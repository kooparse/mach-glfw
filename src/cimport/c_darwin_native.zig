pub fn import(comptime _: anytype) type {
    return @This();
}
pub const __builtin_bswap16 = @import("std").zig.c_builtins.__builtin_bswap16;
pub const __builtin_bswap32 = @import("std").zig.c_builtins.__builtin_bswap32;
pub const __builtin_bswap64 = @import("std").zig.c_builtins.__builtin_bswap64;
pub const __builtin_signbit = @import("std").zig.c_builtins.__builtin_signbit;
pub const __builtin_signbitf = @import("std").zig.c_builtins.__builtin_signbitf;
pub const __builtin_popcount = @import("std").zig.c_builtins.__builtin_popcount;
pub const __builtin_ctz = @import("std").zig.c_builtins.__builtin_ctz;
pub const __builtin_clz = @import("std").zig.c_builtins.__builtin_clz;
pub const __builtin_sqrt = @import("std").zig.c_builtins.__builtin_sqrt;
pub const __builtin_sqrtf = @import("std").zig.c_builtins.__builtin_sqrtf;
pub const __builtin_sin = @import("std").zig.c_builtins.__builtin_sin;
pub const __builtin_sinf = @import("std").zig.c_builtins.__builtin_sinf;
pub const __builtin_cos = @import("std").zig.c_builtins.__builtin_cos;
pub const __builtin_cosf = @import("std").zig.c_builtins.__builtin_cosf;
pub const __builtin_exp = @import("std").zig.c_builtins.__builtin_exp;
pub const __builtin_expf = @import("std").zig.c_builtins.__builtin_expf;
pub const __builtin_exp2 = @import("std").zig.c_builtins.__builtin_exp2;
pub const __builtin_exp2f = @import("std").zig.c_builtins.__builtin_exp2f;
pub const __builtin_log = @import("std").zig.c_builtins.__builtin_log;
pub const __builtin_logf = @import("std").zig.c_builtins.__builtin_logf;
pub const __builtin_log2 = @import("std").zig.c_builtins.__builtin_log2;
pub const __builtin_log2f = @import("std").zig.c_builtins.__builtin_log2f;
pub const __builtin_log10 = @import("std").zig.c_builtins.__builtin_log10;
pub const __builtin_log10f = @import("std").zig.c_builtins.__builtin_log10f;
pub const __builtin_abs = @import("std").zig.c_builtins.__builtin_abs;
pub const __builtin_fabs = @import("std").zig.c_builtins.__builtin_fabs;
pub const __builtin_fabsf = @import("std").zig.c_builtins.__builtin_fabsf;
pub const __builtin_floor = @import("std").zig.c_builtins.__builtin_floor;
pub const __builtin_floorf = @import("std").zig.c_builtins.__builtin_floorf;
pub const __builtin_ceil = @import("std").zig.c_builtins.__builtin_ceil;
pub const __builtin_ceilf = @import("std").zig.c_builtins.__builtin_ceilf;
pub const __builtin_trunc = @import("std").zig.c_builtins.__builtin_trunc;
pub const __builtin_truncf = @import("std").zig.c_builtins.__builtin_truncf;
pub const __builtin_round = @import("std").zig.c_builtins.__builtin_round;
pub const __builtin_roundf = @import("std").zig.c_builtins.__builtin_roundf;
pub const __builtin_strlen = @import("std").zig.c_builtins.__builtin_strlen;
pub const __builtin_strcmp = @import("std").zig.c_builtins.__builtin_strcmp;
pub const __builtin_object_size = @import("std").zig.c_builtins.__builtin_object_size;
pub const __builtin___memset_chk = @import("std").zig.c_builtins.__builtin___memset_chk;
pub const __builtin_memset = @import("std").zig.c_builtins.__builtin_memset;
pub const __builtin___memcpy_chk = @import("std").zig.c_builtins.__builtin___memcpy_chk;
pub const __builtin_memcpy = @import("std").zig.c_builtins.__builtin_memcpy;
pub const __builtin_expect = @import("std").zig.c_builtins.__builtin_expect;
pub const __builtin_nanf = @import("std").zig.c_builtins.__builtin_nanf;
pub const __builtin_huge_valf = @import("std").zig.c_builtins.__builtin_huge_valf;
pub const __builtin_inff = @import("std").zig.c_builtins.__builtin_inff;
pub const __builtin_isnan = @import("std").zig.c_builtins.__builtin_isnan;
pub const __builtin_isinf = @import("std").zig.c_builtins.__builtin_isinf;
pub const __builtin_isinf_sign = @import("std").zig.c_builtins.__builtin_isinf_sign;
pub const __has_builtin = @import("std").zig.c_builtins.__has_builtin;
pub const __builtin_assume = @import("std").zig.c_builtins.__builtin_assume;
pub const __builtin_unreachable = @import("std").zig.c_builtins.__builtin_unreachable;
pub const __builtin_constant_p = @import("std").zig.c_builtins.__builtin_constant_p;
pub const __builtin_mul_overflow = @import("std").zig.c_builtins.__builtin_mul_overflow;
pub const ptrdiff_t = c_long;
pub const wchar_t = c_int;
pub const max_align_t = c_longdouble;
pub const int_least8_t = i8;
pub const int_least16_t = i16;
pub const int_least32_t = i32;
pub const int_least64_t = i64;
pub const uint_least8_t = u8;
pub const uint_least16_t = u16;
pub const uint_least32_t = u32;
pub const uint_least64_t = u64;
pub const int_fast8_t = i8;
pub const int_fast16_t = i16;
pub const int_fast32_t = i32;
pub const int_fast64_t = i64;
pub const uint_fast8_t = u8;
pub const uint_fast16_t = u16;
pub const uint_fast32_t = u32;
pub const uint_fast64_t = u64;
pub const __int8_t = i8;
pub const __uint8_t = u8;
pub const __int16_t = c_short;
pub const __uint16_t = c_ushort;
pub const __int32_t = c_int;
pub const __uint32_t = c_uint;
pub const __int64_t = c_longlong;
pub const __uint64_t = c_ulonglong;
pub const __darwin_intptr_t = c_long;
pub const __darwin_natural_t = c_uint;
pub const __darwin_ct_rune_t = c_int;
pub const __mbstate_t = extern union {
    __mbstate8: [128]u8,
    _mbstateL: c_longlong,
};
pub const __darwin_mbstate_t = __mbstate_t;
pub const __darwin_ptrdiff_t = c_long;
pub const __darwin_size_t = c_ulong;
pub const __builtin_va_list = [*c]u8;
pub const __darwin_va_list = __builtin_va_list;
pub const __darwin_wchar_t = c_int;
pub const __darwin_rune_t = __darwin_wchar_t;
pub const __darwin_wint_t = c_int;
pub const __darwin_clock_t = c_ulong;
pub const __darwin_socklen_t = __uint32_t;
pub const __darwin_ssize_t = c_long;
pub const __darwin_time_t = c_long;
pub const __darwin_blkcnt_t = __int64_t;
pub const __darwin_blksize_t = __int32_t;
pub const __darwin_dev_t = __int32_t;
pub const __darwin_fsblkcnt_t = c_uint;
pub const __darwin_fsfilcnt_t = c_uint;
pub const __darwin_gid_t = __uint32_t;
pub const __darwin_id_t = __uint32_t;
pub const __darwin_ino64_t = __uint64_t;
pub const __darwin_ino_t = __darwin_ino64_t;
pub const __darwin_mach_port_name_t = __darwin_natural_t;
pub const __darwin_mach_port_t = __darwin_mach_port_name_t;
pub const __darwin_mode_t = __uint16_t;
pub const __darwin_off_t = __int64_t;
pub const __darwin_pid_t = __int32_t;
pub const __darwin_sigset_t = __uint32_t;
pub const __darwin_suseconds_t = __int32_t;
pub const __darwin_uid_t = __uint32_t;
pub const __darwin_useconds_t = __uint32_t;
pub const __darwin_uuid_t = [16]u8;
pub const __darwin_uuid_string_t = [37]u8;
pub const struct___darwin_pthread_handler_rec = extern struct {
    __routine: ?fn (?*anyopaque) callconv(.C) void,
    __arg: ?*anyopaque,
    __next: [*c]struct___darwin_pthread_handler_rec,
};
pub const struct__opaque_pthread_attr_t = extern struct {
    __sig: c_long,
    __opaque: [56]u8,
};
pub const struct__opaque_pthread_cond_t = extern struct {
    __sig: c_long,
    __opaque: [40]u8,
};
pub const struct__opaque_pthread_condattr_t = extern struct {
    __sig: c_long,
    __opaque: [8]u8,
};
pub const struct__opaque_pthread_mutex_t = extern struct {
    __sig: c_long,
    __opaque: [56]u8,
};
pub const struct__opaque_pthread_mutexattr_t = extern struct {
    __sig: c_long,
    __opaque: [8]u8,
};
pub const struct__opaque_pthread_once_t = extern struct {
    __sig: c_long,
    __opaque: [8]u8,
};
pub const struct__opaque_pthread_rwlock_t = extern struct {
    __sig: c_long,
    __opaque: [192]u8,
};
pub const struct__opaque_pthread_rwlockattr_t = extern struct {
    __sig: c_long,
    __opaque: [16]u8,
};
pub const struct__opaque_pthread_t = extern struct {
    __sig: c_long,
    __cleanup_stack: [*c]struct___darwin_pthread_handler_rec,
    __opaque: [8176]u8,
};
pub const __darwin_pthread_attr_t = struct__opaque_pthread_attr_t;
pub const __darwin_pthread_cond_t = struct__opaque_pthread_cond_t;
pub const __darwin_pthread_condattr_t = struct__opaque_pthread_condattr_t;
pub const __darwin_pthread_key_t = c_ulong;
pub const __darwin_pthread_mutex_t = struct__opaque_pthread_mutex_t;
pub const __darwin_pthread_mutexattr_t = struct__opaque_pthread_mutexattr_t;
pub const __darwin_pthread_once_t = struct__opaque_pthread_once_t;
pub const __darwin_pthread_rwlock_t = struct__opaque_pthread_rwlock_t;
pub const __darwin_pthread_rwlockattr_t = struct__opaque_pthread_rwlockattr_t;
pub const __darwin_pthread_t = [*c]struct__opaque_pthread_t;
pub const u_int8_t = u8;
pub const u_int16_t = c_ushort;
pub const u_int32_t = c_uint;
pub const u_int64_t = c_ulonglong;
pub const register_t = i64;
pub const user_addr_t = u_int64_t;
pub const user_size_t = u_int64_t;
pub const user_ssize_t = i64;
pub const user_long_t = i64;
pub const user_ulong_t = u_int64_t;
pub const user_time_t = i64;
pub const user_off_t = i64;
pub const syscall_arg_t = u_int64_t;
pub const intmax_t = c_long;
pub const uintmax_t = c_ulong;
pub const VkBool32 = u32;
pub const VkDeviceAddress = u64;
pub const VkDeviceSize = u64;
pub const VkFlags = u32;
pub const VkSampleMask = u32;
pub const struct_VkBuffer_T = opaque {};
pub const VkBuffer = ?*struct_VkBuffer_T;
pub const struct_VkImage_T = opaque {};
pub const VkImage = ?*struct_VkImage_T;
pub const struct_VkInstance_T = opaque {};
pub const VkInstance = ?*struct_VkInstance_T;
pub const struct_VkPhysicalDevice_T = opaque {};
pub const VkPhysicalDevice = ?*struct_VkPhysicalDevice_T;
pub const struct_VkDevice_T = opaque {};
pub const VkDevice = ?*struct_VkDevice_T;
pub const struct_VkQueue_T = opaque {};
pub const VkQueue = ?*struct_VkQueue_T;
pub const struct_VkSemaphore_T = opaque {};
pub const VkSemaphore = ?*struct_VkSemaphore_T;
pub const struct_VkCommandBuffer_T = opaque {};
pub const VkCommandBuffer = ?*struct_VkCommandBuffer_T;
pub const struct_VkFence_T = opaque {};
pub const VkFence = ?*struct_VkFence_T;
pub const struct_VkDeviceMemory_T = opaque {};
pub const VkDeviceMemory = ?*struct_VkDeviceMemory_T;
pub const struct_VkEvent_T = opaque {};
pub const VkEvent = ?*struct_VkEvent_T;
pub const struct_VkQueryPool_T = opaque {};
pub const VkQueryPool = ?*struct_VkQueryPool_T;
pub const struct_VkBufferView_T = opaque {};
pub const VkBufferView = ?*struct_VkBufferView_T;
pub const struct_VkImageView_T = opaque {};
pub const VkImageView = ?*struct_VkImageView_T;
pub const struct_VkShaderModule_T = opaque {};
pub const VkShaderModule = ?*struct_VkShaderModule_T;
pub const struct_VkPipelineCache_T = opaque {};
pub const VkPipelineCache = ?*struct_VkPipelineCache_T;
pub const struct_VkPipelineLayout_T = opaque {};
pub const VkPipelineLayout = ?*struct_VkPipelineLayout_T;
pub const struct_VkPipeline_T = opaque {};
pub const VkPipeline = ?*struct_VkPipeline_T;
pub const struct_VkRenderPass_T = opaque {};
pub const VkRenderPass = ?*struct_VkRenderPass_T;
pub const struct_VkDescriptorSetLayout_T = opaque {};
pub const VkDescriptorSetLayout = ?*struct_VkDescriptorSetLayout_T;
pub const struct_VkSampler_T = opaque {};
pub const VkSampler = ?*struct_VkSampler_T;
pub const struct_VkDescriptorSet_T = opaque {};
pub const VkDescriptorSet = ?*struct_VkDescriptorSet_T;
pub const struct_VkDescriptorPool_T = opaque {};
pub const VkDescriptorPool = ?*struct_VkDescriptorPool_T;
pub const struct_VkFramebuffer_T = opaque {};
pub const VkFramebuffer = ?*struct_VkFramebuffer_T;
pub const struct_VkCommandPool_T = opaque {};
pub const VkCommandPool = ?*struct_VkCommandPool_T;
pub const VK_SUCCESS: c_int = 0;
pub const VK_NOT_READY: c_int = 1;
pub const VK_TIMEOUT: c_int = 2;
pub const VK_EVENT_SET: c_int = 3;
pub const VK_EVENT_RESET: c_int = 4;
pub const VK_INCOMPLETE: c_int = 5;
pub const VK_ERROR_OUT_OF_HOST_MEMORY: c_int = -1;
pub const VK_ERROR_OUT_OF_DEVICE_MEMORY: c_int = -2;
pub const VK_ERROR_INITIALIZATION_FAILED: c_int = -3;
pub const VK_ERROR_DEVICE_LOST: c_int = -4;
pub const VK_ERROR_MEMORY_MAP_FAILED: c_int = -5;
pub const VK_ERROR_LAYER_NOT_PRESENT: c_int = -6;
pub const VK_ERROR_EXTENSION_NOT_PRESENT: c_int = -7;
pub const VK_ERROR_FEATURE_NOT_PRESENT: c_int = -8;
pub const VK_ERROR_INCOMPATIBLE_DRIVER: c_int = -9;
pub const VK_ERROR_TOO_MANY_OBJECTS: c_int = -10;
pub const VK_ERROR_FORMAT_NOT_SUPPORTED: c_int = -11;
pub const VK_ERROR_FRAGMENTED_POOL: c_int = -12;
pub const VK_ERROR_UNKNOWN: c_int = -13;
pub const VK_ERROR_OUT_OF_POOL_MEMORY: c_int = -1000069000;
pub const VK_ERROR_INVALID_EXTERNAL_HANDLE: c_int = -1000072003;
pub const VK_ERROR_FRAGMENTATION: c_int = -1000161000;
pub const VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS: c_int = -1000257000;
pub const VK_PIPELINE_COMPILE_REQUIRED: c_int = 1000297000;
pub const VK_ERROR_SURFACE_LOST_KHR: c_int = -1000000000;
pub const VK_ERROR_NATIVE_WINDOW_IN_USE_KHR: c_int = -1000000001;
pub const VK_SUBOPTIMAL_KHR: c_int = 1000001003;
pub const VK_ERROR_OUT_OF_DATE_KHR: c_int = -1000001004;
pub const VK_ERROR_INCOMPATIBLE_DISPLAY_KHR: c_int = -1000003001;
pub const VK_ERROR_VALIDATION_FAILED_EXT: c_int = -1000011001;
pub const VK_ERROR_INVALID_SHADER_NV: c_int = -1000012000;
pub const VK_ERROR_INVALID_DRM_FORMAT_MODIFIER_PLANE_LAYOUT_EXT: c_int = -1000158000;
pub const VK_ERROR_NOT_PERMITTED_KHR: c_int = -1000174001;
pub const VK_ERROR_FULL_SCREEN_EXCLUSIVE_MODE_LOST_EXT: c_int = -1000255000;
pub const VK_THREAD_IDLE_KHR: c_int = 1000268000;
pub const VK_THREAD_DONE_KHR: c_int = 1000268001;
pub const VK_OPERATION_DEFERRED_KHR: c_int = 1000268002;
pub const VK_OPERATION_NOT_DEFERRED_KHR: c_int = 1000268003;
pub const VK_ERROR_COMPRESSION_EXHAUSTED_EXT: c_int = -1000338000;
pub const VK_ERROR_OUT_OF_POOL_MEMORY_KHR: c_int = -1000069000;
pub const VK_ERROR_INVALID_EXTERNAL_HANDLE_KHR: c_int = -1000072003;
pub const VK_ERROR_FRAGMENTATION_EXT: c_int = -1000161000;
pub const VK_ERROR_NOT_PERMITTED_EXT: c_int = -1000174001;
pub const VK_ERROR_INVALID_DEVICE_ADDRESS_EXT: c_int = -1000257000;
pub const VK_ERROR_INVALID_OPAQUE_CAPTURE_ADDRESS_KHR: c_int = -1000257000;
pub const VK_PIPELINE_COMPILE_REQUIRED_EXT: c_int = 1000297000;
pub const VK_ERROR_PIPELINE_COMPILE_REQUIRED_EXT: c_int = 1000297000;
pub const VK_RESULT_MAX_ENUM: c_int = 2147483647;
pub const enum_VkResult = c_int;
pub const VkResult = enum_VkResult;
pub const VK_STRUCTURE_TYPE_APPLICATION_INFO: c_int = 0;
pub const VK_STRUCTURE_TYPE_INSTANCE_CREATE_INFO: c_int = 1;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_CREATE_INFO: c_int = 2;
pub const VK_STRUCTURE_TYPE_DEVICE_CREATE_INFO: c_int = 3;
pub const VK_STRUCTURE_TYPE_SUBMIT_INFO: c_int = 4;
pub const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_INFO: c_int = 5;
pub const VK_STRUCTURE_TYPE_MAPPED_MEMORY_RANGE: c_int = 6;
pub const VK_STRUCTURE_TYPE_BIND_SPARSE_INFO: c_int = 7;
pub const VK_STRUCTURE_TYPE_FENCE_CREATE_INFO: c_int = 8;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO: c_int = 9;
pub const VK_STRUCTURE_TYPE_EVENT_CREATE_INFO: c_int = 10;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO: c_int = 11;
pub const VK_STRUCTURE_TYPE_BUFFER_CREATE_INFO: c_int = 12;
pub const VK_STRUCTURE_TYPE_BUFFER_VIEW_CREATE_INFO: c_int = 13;
pub const VK_STRUCTURE_TYPE_IMAGE_CREATE_INFO: c_int = 14;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_CREATE_INFO: c_int = 15;
pub const VK_STRUCTURE_TYPE_SHADER_MODULE_CREATE_INFO: c_int = 16;
pub const VK_STRUCTURE_TYPE_PIPELINE_CACHE_CREATE_INFO: c_int = 17;
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_CREATE_INFO: c_int = 18;
pub const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_STATE_CREATE_INFO: c_int = 19;
pub const VK_STRUCTURE_TYPE_PIPELINE_INPUT_ASSEMBLY_STATE_CREATE_INFO: c_int = 20;
pub const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_STATE_CREATE_INFO: c_int = 21;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_STATE_CREATE_INFO: c_int = 22;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_CREATE_INFO: c_int = 23;
pub const VK_STRUCTURE_TYPE_PIPELINE_MULTISAMPLE_STATE_CREATE_INFO: c_int = 24;
pub const VK_STRUCTURE_TYPE_PIPELINE_DEPTH_STENCIL_STATE_CREATE_INFO: c_int = 25;
pub const VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_STATE_CREATE_INFO: c_int = 26;
pub const VK_STRUCTURE_TYPE_PIPELINE_DYNAMIC_STATE_CREATE_INFO: c_int = 27;
pub const VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_CREATE_INFO: c_int = 28;
pub const VK_STRUCTURE_TYPE_COMPUTE_PIPELINE_CREATE_INFO: c_int = 29;
pub const VK_STRUCTURE_TYPE_PIPELINE_LAYOUT_CREATE_INFO: c_int = 30;
pub const VK_STRUCTURE_TYPE_SAMPLER_CREATE_INFO: c_int = 31;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_CREATE_INFO: c_int = 32;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_CREATE_INFO: c_int = 33;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_ALLOCATE_INFO: c_int = 34;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET: c_int = 35;
pub const VK_STRUCTURE_TYPE_COPY_DESCRIPTOR_SET: c_int = 36;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_CREATE_INFO: c_int = 37;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO: c_int = 38;
pub const VK_STRUCTURE_TYPE_COMMAND_POOL_CREATE_INFO: c_int = 39;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_ALLOCATE_INFO: c_int = 40;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_INFO: c_int = 41;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_BEGIN_INFO: c_int = 42;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_BEGIN_INFO: c_int = 43;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER: c_int = 44;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER: c_int = 45;
pub const VK_STRUCTURE_TYPE_MEMORY_BARRIER: c_int = 46;
pub const VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO: c_int = 47;
pub const VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO: c_int = 48;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_PROPERTIES: c_int = 1000094000;
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO: c_int = 1000157000;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO: c_int = 1000157001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES: c_int = 1000083000;
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS: c_int = 1000127000;
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO: c_int = 1000127001;
pub const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO: c_int = 1000060000;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO: c_int = 1000060003;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO: c_int = 1000060004;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO: c_int = 1000060005;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO: c_int = 1000060006;
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO: c_int = 1000060013;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO: c_int = 1000060014;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES: c_int = 1000070000;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO: c_int = 1000070001;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2: c_int = 1000146000;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2: c_int = 1000146001;
pub const VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2: c_int = 1000146002;
pub const VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2: c_int = 1000146003;
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2: c_int = 1000146004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2: c_int = 1000059000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2: c_int = 1000059001;
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2: c_int = 1000059002;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2: c_int = 1000059003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2: c_int = 1000059004;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2: c_int = 1000059005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2: c_int = 1000059006;
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2: c_int = 1000059007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2: c_int = 1000059008;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES: c_int = 1000117000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO: c_int = 1000117001;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO: c_int = 1000117002;
pub const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO: c_int = 1000117003;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO: c_int = 1000053000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES: c_int = 1000053001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES: c_int = 1000053002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES: c_int = 1000120000;
pub const VK_STRUCTURE_TYPE_PROTECTED_SUBMIT_INFO: c_int = 1000145000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_FEATURES: c_int = 1000145001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROTECTED_MEMORY_PROPERTIES: c_int = 1000145002;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_INFO_2: c_int = 1000145003;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO: c_int = 1000156000;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO: c_int = 1000156001;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO: c_int = 1000156002;
pub const VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO: c_int = 1000156003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES: c_int = 1000156004;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES: c_int = 1000156005;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO: c_int = 1000085000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO: c_int = 1000071000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES: c_int = 1000071001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO: c_int = 1000071002;
pub const VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES: c_int = 1000071003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES: c_int = 1000071004;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO: c_int = 1000072000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO: c_int = 1000072001;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO: c_int = 1000072002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO: c_int = 1000112000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES: c_int = 1000112001;
pub const VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO: c_int = 1000113000;
pub const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO: c_int = 1000077000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO: c_int = 1000076000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES: c_int = 1000076001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES: c_int = 1000168000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT: c_int = 1000168001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETERS_FEATURES: c_int = 1000063000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_FEATURES: c_int = 49;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_1_PROPERTIES: c_int = 50;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_FEATURES: c_int = 51;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_2_PROPERTIES: c_int = 52;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO: c_int = 1000147000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2: c_int = 1000109000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2: c_int = 1000109001;
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2: c_int = 1000109002;
pub const VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2: c_int = 1000109003;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2: c_int = 1000109004;
pub const VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO: c_int = 1000109005;
pub const VK_STRUCTURE_TYPE_SUBPASS_END_INFO: c_int = 1000109006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES: c_int = 1000177000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES: c_int = 1000196000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES: c_int = 1000180000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES: c_int = 1000082000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES: c_int = 1000197000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO: c_int = 1000161000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES: c_int = 1000161001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES: c_int = 1000161002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO: c_int = 1000161003;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT: c_int = 1000161004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES: c_int = 1000199000;
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE: c_int = 1000199001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES: c_int = 1000221000;
pub const VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO: c_int = 1000246000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES: c_int = 1000130000;
pub const VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO: c_int = 1000130001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES: c_int = 1000211000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES: c_int = 1000108000;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO: c_int = 1000108001;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO: c_int = 1000108002;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO: c_int = 1000108003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES: c_int = 1000253000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES: c_int = 1000175000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES: c_int = 1000241000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT: c_int = 1000241001;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT: c_int = 1000241002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES: c_int = 1000261000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES: c_int = 1000207000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES: c_int = 1000207001;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO: c_int = 1000207002;
pub const VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO: c_int = 1000207003;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO: c_int = 1000207004;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO: c_int = 1000207005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES: c_int = 1000257000;
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO: c_int = 1000244001;
pub const VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO: c_int = 1000257002;
pub const VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO: c_int = 1000257003;
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO: c_int = 1000257004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_FEATURES: c_int = 53;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_1_3_PROPERTIES: c_int = 54;
pub const VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO: c_int = 1000192000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES: c_int = 1000215000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES: c_int = 1000245000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES: c_int = 1000276000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES: c_int = 1000295000;
pub const VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO: c_int = 1000295001;
pub const VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO: c_int = 1000295002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES: c_int = 1000297000;
pub const VK_STRUCTURE_TYPE_MEMORY_BARRIER_2: c_int = 1000314000;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2: c_int = 1000314001;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2: c_int = 1000314002;
pub const VK_STRUCTURE_TYPE_DEPENDENCY_INFO: c_int = 1000314003;
pub const VK_STRUCTURE_TYPE_SUBMIT_INFO_2: c_int = 1000314004;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO: c_int = 1000314005;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO: c_int = 1000314006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES: c_int = 1000314007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES: c_int = 1000325000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES: c_int = 1000335000;
pub const VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2: c_int = 1000337000;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2: c_int = 1000337001;
pub const VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2: c_int = 1000337002;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2: c_int = 1000337003;
pub const VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2: c_int = 1000337004;
pub const VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2: c_int = 1000337005;
pub const VK_STRUCTURE_TYPE_BUFFER_COPY_2: c_int = 1000337006;
pub const VK_STRUCTURE_TYPE_IMAGE_COPY_2: c_int = 1000337007;
pub const VK_STRUCTURE_TYPE_IMAGE_BLIT_2: c_int = 1000337008;
pub const VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2: c_int = 1000337009;
pub const VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2: c_int = 1000337010;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES: c_int = 1000225000;
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO: c_int = 1000225001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES: c_int = 1000225002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES: c_int = 1000138000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES: c_int = 1000138001;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK: c_int = 1000138002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO: c_int = 1000138003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES: c_int = 1000066000;
pub const VK_STRUCTURE_TYPE_RENDERING_INFO: c_int = 1000044000;
pub const VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO: c_int = 1000044001;
pub const VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO: c_int = 1000044002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES: c_int = 1000044003;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO: c_int = 1000044004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES: c_int = 1000280000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES: c_int = 1000280001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES: c_int = 1000281001;
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3: c_int = 1000360000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES: c_int = 1000413000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES: c_int = 1000413001;
pub const VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS: c_int = 1000413002;
pub const VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS: c_int = 1000413003;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_CREATE_INFO_KHR: c_int = 1000001000;
pub const VK_STRUCTURE_TYPE_PRESENT_INFO_KHR: c_int = 1000001001;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_CAPABILITIES_KHR: c_int = 1000060007;
pub const VK_STRUCTURE_TYPE_IMAGE_SWAPCHAIN_CREATE_INFO_KHR: c_int = 1000060008;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_SWAPCHAIN_INFO_KHR: c_int = 1000060009;
pub const VK_STRUCTURE_TYPE_ACQUIRE_NEXT_IMAGE_INFO_KHR: c_int = 1000060010;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_PRESENT_INFO_KHR: c_int = 1000060011;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_SWAPCHAIN_CREATE_INFO_KHR: c_int = 1000060012;
pub const VK_STRUCTURE_TYPE_DISPLAY_MODE_CREATE_INFO_KHR: c_int = 1000002000;
pub const VK_STRUCTURE_TYPE_DISPLAY_SURFACE_CREATE_INFO_KHR: c_int = 1000002001;
pub const VK_STRUCTURE_TYPE_DISPLAY_PRESENT_INFO_KHR: c_int = 1000003000;
pub const VK_STRUCTURE_TYPE_XLIB_SURFACE_CREATE_INFO_KHR: c_int = 1000004000;
pub const VK_STRUCTURE_TYPE_XCB_SURFACE_CREATE_INFO_KHR: c_int = 1000005000;
pub const VK_STRUCTURE_TYPE_WAYLAND_SURFACE_CREATE_INFO_KHR: c_int = 1000006000;
pub const VK_STRUCTURE_TYPE_ANDROID_SURFACE_CREATE_INFO_KHR: c_int = 1000008000;
pub const VK_STRUCTURE_TYPE_WIN32_SURFACE_CREATE_INFO_KHR: c_int = 1000009000;
pub const VK_STRUCTURE_TYPE_DEBUG_REPORT_CALLBACK_CREATE_INFO_EXT: c_int = 1000011000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_RASTERIZATION_ORDER_AMD: c_int = 1000018000;
pub const VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_NAME_INFO_EXT: c_int = 1000022000;
pub const VK_STRUCTURE_TYPE_DEBUG_MARKER_OBJECT_TAG_INFO_EXT: c_int = 1000022001;
pub const VK_STRUCTURE_TYPE_DEBUG_MARKER_MARKER_INFO_EXT: c_int = 1000022002;
pub const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_IMAGE_CREATE_INFO_NV: c_int = 1000026000;
pub const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_BUFFER_CREATE_INFO_NV: c_int = 1000026001;
pub const VK_STRUCTURE_TYPE_DEDICATED_ALLOCATION_MEMORY_ALLOCATE_INFO_NV: c_int = 1000026002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_FEATURES_EXT: c_int = 1000028000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TRANSFORM_FEEDBACK_PROPERTIES_EXT: c_int = 1000028001;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_STATE_STREAM_CREATE_INFO_EXT: c_int = 1000028002;
pub const VK_STRUCTURE_TYPE_CU_MODULE_CREATE_INFO_NVX: c_int = 1000029000;
pub const VK_STRUCTURE_TYPE_CU_FUNCTION_CREATE_INFO_NVX: c_int = 1000029001;
pub const VK_STRUCTURE_TYPE_CU_LAUNCH_INFO_NVX: c_int = 1000029002;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_HANDLE_INFO_NVX: c_int = 1000030000;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_ADDRESS_PROPERTIES_NVX: c_int = 1000030001;
pub const VK_STRUCTURE_TYPE_TEXTURE_LOD_GATHER_FORMAT_PROPERTIES_AMD: c_int = 1000041000;
pub const VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR: c_int = 1000044006;
pub const VK_STRUCTURE_TYPE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_INFO_EXT: c_int = 1000044007;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_AMD: c_int = 1000044008;
pub const VK_STRUCTURE_TYPE_MULTIVIEW_PER_VIEW_ATTRIBUTES_INFO_NVX: c_int = 1000044009;
pub const VK_STRUCTURE_TYPE_STREAM_DESCRIPTOR_SURFACE_CREATE_INFO_GGP: c_int = 1000049000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CORNER_SAMPLED_IMAGE_FEATURES_NV: c_int = 1000050000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_NV: c_int = 1000056000;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_NV: c_int = 1000056001;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_NV: c_int = 1000057000;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_NV: c_int = 1000057001;
pub const VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_NV: c_int = 1000058000;
pub const VK_STRUCTURE_TYPE_VALIDATION_FLAGS_EXT: c_int = 1000061000;
pub const VK_STRUCTURE_TYPE_VI_SURFACE_CREATE_INFO_NN: c_int = 1000062000;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_ASTC_DECODE_MODE_EXT: c_int = 1000067000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ASTC_DECODE_FEATURES_EXT: c_int = 1000067001;
pub const VK_STRUCTURE_TYPE_PIPELINE_ROBUSTNESS_CREATE_INFO_EXT: c_int = 1000068000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_FEATURES_EXT: c_int = 1000068001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_ROBUSTNESS_PROPERTIES_EXT: c_int = 1000068002;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_WIN32_HANDLE_INFO_KHR: c_int = 1000073000;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_WIN32_HANDLE_INFO_KHR: c_int = 1000073001;
pub const VK_STRUCTURE_TYPE_MEMORY_WIN32_HANDLE_PROPERTIES_KHR: c_int = 1000073002;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_WIN32_HANDLE_INFO_KHR: c_int = 1000073003;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_FD_INFO_KHR: c_int = 1000074000;
pub const VK_STRUCTURE_TYPE_MEMORY_FD_PROPERTIES_KHR: c_int = 1000074001;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_FD_INFO_KHR: c_int = 1000074002;
pub const VK_STRUCTURE_TYPE_WIN32_KEYED_MUTEX_ACQUIRE_RELEASE_INFO_KHR: c_int = 1000075000;
pub const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: c_int = 1000078000;
pub const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_WIN32_HANDLE_INFO_KHR: c_int = 1000078001;
pub const VK_STRUCTURE_TYPE_D3D12_FENCE_SUBMIT_INFO_KHR: c_int = 1000078002;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_GET_WIN32_HANDLE_INFO_KHR: c_int = 1000078003;
pub const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_FD_INFO_KHR: c_int = 1000079000;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_GET_FD_INFO_KHR: c_int = 1000079001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PUSH_DESCRIPTOR_PROPERTIES_KHR: c_int = 1000080000;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_CONDITIONAL_RENDERING_INFO_EXT: c_int = 1000081000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONDITIONAL_RENDERING_FEATURES_EXT: c_int = 1000081001;
pub const VK_STRUCTURE_TYPE_CONDITIONAL_RENDERING_BEGIN_INFO_EXT: c_int = 1000081002;
pub const VK_STRUCTURE_TYPE_PRESENT_REGIONS_KHR: c_int = 1000084000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_W_SCALING_STATE_CREATE_INFO_NV: c_int = 1000087000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_EXT: c_int = 1000090000;
pub const VK_STRUCTURE_TYPE_DISPLAY_POWER_INFO_EXT: c_int = 1000091000;
pub const VK_STRUCTURE_TYPE_DEVICE_EVENT_INFO_EXT: c_int = 1000091001;
pub const VK_STRUCTURE_TYPE_DISPLAY_EVENT_INFO_EXT: c_int = 1000091002;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_COUNTER_CREATE_INFO_EXT: c_int = 1000091003;
pub const VK_STRUCTURE_TYPE_PRESENT_TIMES_INFO_GOOGLE: c_int = 1000092000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PER_VIEW_ATTRIBUTES_PROPERTIES_NVX: c_int = 1000097000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SWIZZLE_STATE_CREATE_INFO_NV: c_int = 1000098000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DISCARD_RECTANGLE_PROPERTIES_EXT: c_int = 1000099000;
pub const VK_STRUCTURE_TYPE_PIPELINE_DISCARD_RECTANGLE_STATE_CREATE_INFO_EXT: c_int = 1000099001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CONSERVATIVE_RASTERIZATION_PROPERTIES_EXT: c_int = 1000101000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_CONSERVATIVE_STATE_CREATE_INFO_EXT: c_int = 1000101001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_ENABLE_FEATURES_EXT: c_int = 1000102000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_DEPTH_CLIP_STATE_CREATE_INFO_EXT: c_int = 1000102001;
pub const VK_STRUCTURE_TYPE_HDR_METADATA_EXT: c_int = 1000105000;
pub const VK_STRUCTURE_TYPE_SHARED_PRESENT_SURFACE_CAPABILITIES_KHR: c_int = 1000111000;
pub const VK_STRUCTURE_TYPE_IMPORT_FENCE_WIN32_HANDLE_INFO_KHR: c_int = 1000114000;
pub const VK_STRUCTURE_TYPE_EXPORT_FENCE_WIN32_HANDLE_INFO_KHR: c_int = 1000114001;
pub const VK_STRUCTURE_TYPE_FENCE_GET_WIN32_HANDLE_INFO_KHR: c_int = 1000114002;
pub const VK_STRUCTURE_TYPE_IMPORT_FENCE_FD_INFO_KHR: c_int = 1000115000;
pub const VK_STRUCTURE_TYPE_FENCE_GET_FD_INFO_KHR: c_int = 1000115001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_FEATURES_KHR: c_int = 1000116000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PERFORMANCE_QUERY_PROPERTIES_KHR: c_int = 1000116001;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_CREATE_INFO_KHR: c_int = 1000116002;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_QUERY_SUBMIT_INFO_KHR: c_int = 1000116003;
pub const VK_STRUCTURE_TYPE_ACQUIRE_PROFILING_LOCK_INFO_KHR: c_int = 1000116004;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_KHR: c_int = 1000116005;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_COUNTER_DESCRIPTION_KHR: c_int = 1000116006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SURFACE_INFO_2_KHR: c_int = 1000119000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_2_KHR: c_int = 1000119001;
pub const VK_STRUCTURE_TYPE_SURFACE_FORMAT_2_KHR: c_int = 1000119002;
pub const VK_STRUCTURE_TYPE_DISPLAY_PROPERTIES_2_KHR: c_int = 1000121000;
pub const VK_STRUCTURE_TYPE_DISPLAY_PLANE_PROPERTIES_2_KHR: c_int = 1000121001;
pub const VK_STRUCTURE_TYPE_DISPLAY_MODE_PROPERTIES_2_KHR: c_int = 1000121002;
pub const VK_STRUCTURE_TYPE_DISPLAY_PLANE_INFO_2_KHR: c_int = 1000121003;
pub const VK_STRUCTURE_TYPE_DISPLAY_PLANE_CAPABILITIES_2_KHR: c_int = 1000121004;
pub const VK_STRUCTURE_TYPE_IOS_SURFACE_CREATE_INFO_MVK: c_int = 1000122000;
pub const VK_STRUCTURE_TYPE_MACOS_SURFACE_CREATE_INFO_MVK: c_int = 1000123000;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_NAME_INFO_EXT: c_int = 1000128000;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_OBJECT_TAG_INFO_EXT: c_int = 1000128001;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_LABEL_EXT: c_int = 1000128002;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CALLBACK_DATA_EXT: c_int = 1000128003;
pub const VK_STRUCTURE_TYPE_DEBUG_UTILS_MESSENGER_CREATE_INFO_EXT: c_int = 1000128004;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_USAGE_ANDROID: c_int = 1000129000;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_PROPERTIES_ANDROID: c_int = 1000129001;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_ANDROID: c_int = 1000129002;
pub const VK_STRUCTURE_TYPE_IMPORT_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: c_int = 1000129003;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_ANDROID_HARDWARE_BUFFER_INFO_ANDROID: c_int = 1000129004;
pub const VK_STRUCTURE_TYPE_EXTERNAL_FORMAT_ANDROID: c_int = 1000129005;
pub const VK_STRUCTURE_TYPE_ANDROID_HARDWARE_BUFFER_FORMAT_PROPERTIES_2_ANDROID: c_int = 1000129006;
pub const VK_STRUCTURE_TYPE_SAMPLE_LOCATIONS_INFO_EXT: c_int = 1000143000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_SAMPLE_LOCATIONS_BEGIN_INFO_EXT: c_int = 1000143001;
pub const VK_STRUCTURE_TYPE_PIPELINE_SAMPLE_LOCATIONS_STATE_CREATE_INFO_EXT: c_int = 1000143002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLE_LOCATIONS_PROPERTIES_EXT: c_int = 1000143003;
pub const VK_STRUCTURE_TYPE_MULTISAMPLE_PROPERTIES_EXT: c_int = 1000143004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_FEATURES_EXT: c_int = 1000148000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BLEND_OPERATION_ADVANCED_PROPERTIES_EXT: c_int = 1000148001;
pub const VK_STRUCTURE_TYPE_PIPELINE_COLOR_BLEND_ADVANCED_STATE_CREATE_INFO_EXT: c_int = 1000148002;
pub const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_TO_COLOR_STATE_CREATE_INFO_NV: c_int = 1000149000;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_KHR: c_int = 1000150007;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_GEOMETRY_INFO_KHR: c_int = 1000150000;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_DEVICE_ADDRESS_INFO_KHR: c_int = 1000150002;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_AABBS_DATA_KHR: c_int = 1000150003;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_INSTANCES_DATA_KHR: c_int = 1000150004;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_TRIANGLES_DATA_KHR: c_int = 1000150005;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_KHR: c_int = 1000150006;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_VERSION_INFO_KHR: c_int = 1000150009;
pub const VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_INFO_KHR: c_int = 1000150010;
pub const VK_STRUCTURE_TYPE_COPY_ACCELERATION_STRUCTURE_TO_MEMORY_INFO_KHR: c_int = 1000150011;
pub const VK_STRUCTURE_TYPE_COPY_MEMORY_TO_ACCELERATION_STRUCTURE_INFO_KHR: c_int = 1000150012;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_FEATURES_KHR: c_int = 1000150013;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ACCELERATION_STRUCTURE_PROPERTIES_KHR: c_int = 1000150014;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_KHR: c_int = 1000150017;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_BUILD_SIZES_INFO_KHR: c_int = 1000150020;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_FEATURES_KHR: c_int = 1000347000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PIPELINE_PROPERTIES_KHR: c_int = 1000347001;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_KHR: c_int = 1000150015;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_KHR: c_int = 1000150016;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_INTERFACE_CREATE_INFO_KHR: c_int = 1000150018;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_QUERY_FEATURES_KHR: c_int = 1000348013;
pub const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_MODULATION_STATE_CREATE_INFO_NV: c_int = 1000152000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_FEATURES_NV: c_int = 1000154000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SM_BUILTINS_PROPERTIES_NV: c_int = 1000154001;
pub const VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_EXT: c_int = 1000158000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_DRM_FORMAT_MODIFIER_INFO_EXT: c_int = 1000158002;
pub const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_LIST_CREATE_INFO_EXT: c_int = 1000158003;
pub const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_EXPLICIT_CREATE_INFO_EXT: c_int = 1000158004;
pub const VK_STRUCTURE_TYPE_IMAGE_DRM_FORMAT_MODIFIER_PROPERTIES_EXT: c_int = 1000158005;
pub const VK_STRUCTURE_TYPE_DRM_FORMAT_MODIFIER_PROPERTIES_LIST_2_EXT: c_int = 1000158006;
pub const VK_STRUCTURE_TYPE_VALIDATION_CACHE_CREATE_INFO_EXT: c_int = 1000160000;
pub const VK_STRUCTURE_TYPE_SHADER_MODULE_VALIDATION_CACHE_CREATE_INFO_EXT: c_int = 1000160001;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_SHADING_RATE_IMAGE_STATE_CREATE_INFO_NV: c_int = 1000164000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_FEATURES_NV: c_int = 1000164001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADING_RATE_IMAGE_PROPERTIES_NV: c_int = 1000164002;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_COARSE_SAMPLE_ORDER_STATE_CREATE_INFO_NV: c_int = 1000164005;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_PIPELINE_CREATE_INFO_NV: c_int = 1000165000;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_CREATE_INFO_NV: c_int = 1000165001;
pub const VK_STRUCTURE_TYPE_GEOMETRY_NV: c_int = 1000165003;
pub const VK_STRUCTURE_TYPE_GEOMETRY_TRIANGLES_NV: c_int = 1000165004;
pub const VK_STRUCTURE_TYPE_GEOMETRY_AABB_NV: c_int = 1000165005;
pub const VK_STRUCTURE_TYPE_BIND_ACCELERATION_STRUCTURE_MEMORY_INFO_NV: c_int = 1000165006;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_ACCELERATION_STRUCTURE_NV: c_int = 1000165007;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_INFO_NV: c_int = 1000165008;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_PROPERTIES_NV: c_int = 1000165009;
pub const VK_STRUCTURE_TYPE_RAY_TRACING_SHADER_GROUP_CREATE_INFO_NV: c_int = 1000165011;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_INFO_NV: c_int = 1000165012;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_REPRESENTATIVE_FRAGMENT_TEST_FEATURES_NV: c_int = 1000166000;
pub const VK_STRUCTURE_TYPE_PIPELINE_REPRESENTATIVE_FRAGMENT_TEST_STATE_CREATE_INFO_NV: c_int = 1000166001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_IMAGE_FORMAT_INFO_EXT: c_int = 1000170000;
pub const VK_STRUCTURE_TYPE_FILTER_CUBIC_IMAGE_VIEW_IMAGE_FORMAT_PROPERTIES_EXT: c_int = 1000170001;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_HOST_POINTER_INFO_EXT: c_int = 1000178000;
pub const VK_STRUCTURE_TYPE_MEMORY_HOST_POINTER_PROPERTIES_EXT: c_int = 1000178001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_HOST_PROPERTIES_EXT: c_int = 1000178002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CLOCK_FEATURES_KHR: c_int = 1000181000;
pub const VK_STRUCTURE_TYPE_PIPELINE_COMPILER_CONTROL_CREATE_INFO_AMD: c_int = 1000183000;
pub const VK_STRUCTURE_TYPE_CALIBRATED_TIMESTAMP_INFO_EXT: c_int = 1000184000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_AMD: c_int = 1000185000;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_KHR: c_int = 1000174000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_KHR: c_int = 1000388000;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_KHR: c_int = 1000388001;
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OVERALLOCATION_CREATE_INFO_AMD: c_int = 1000189000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_PROPERTIES_EXT: c_int = 1000190000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VERTEX_INPUT_DIVISOR_STATE_CREATE_INFO_EXT: c_int = 1000190001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_ATTRIBUTE_DIVISOR_FEATURES_EXT: c_int = 1000190002;
pub const VK_STRUCTURE_TYPE_PRESENT_FRAME_TOKEN_GGP: c_int = 1000191000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COMPUTE_SHADER_DERIVATIVES_FEATURES_NV: c_int = 1000201000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_FEATURES_NV: c_int = 1000202000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MESH_SHADER_PROPERTIES_NV: c_int = 1000202001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_FOOTPRINT_FEATURES_NV: c_int = 1000204000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_EXCLUSIVE_SCISSOR_STATE_CREATE_INFO_NV: c_int = 1000205000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXCLUSIVE_SCISSOR_FEATURES_NV: c_int = 1000205002;
pub const VK_STRUCTURE_TYPE_CHECKPOINT_DATA_NV: c_int = 1000206000;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_NV: c_int = 1000206001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_FUNCTIONS_2_FEATURES_INTEL: c_int = 1000209000;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_PERFORMANCE_QUERY_CREATE_INFO_INTEL: c_int = 1000210000;
pub const VK_STRUCTURE_TYPE_INITIALIZE_PERFORMANCE_API_INFO_INTEL: c_int = 1000210001;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_MARKER_INFO_INTEL: c_int = 1000210002;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_STREAM_MARKER_INFO_INTEL: c_int = 1000210003;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_OVERRIDE_INFO_INTEL: c_int = 1000210004;
pub const VK_STRUCTURE_TYPE_PERFORMANCE_CONFIGURATION_ACQUIRE_INFO_INTEL: c_int = 1000210005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PCI_BUS_INFO_PROPERTIES_EXT: c_int = 1000212000;
pub const VK_STRUCTURE_TYPE_DISPLAY_NATIVE_HDR_SURFACE_CAPABILITIES_AMD: c_int = 1000213000;
pub const VK_STRUCTURE_TYPE_SWAPCHAIN_DISPLAY_NATIVE_HDR_CREATE_INFO_AMD: c_int = 1000213001;
pub const VK_STRUCTURE_TYPE_IMAGEPIPE_SURFACE_CREATE_INFO_FUCHSIA: c_int = 1000214000;
pub const VK_STRUCTURE_TYPE_METAL_SURFACE_CREATE_INFO_EXT: c_int = 1000217000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_FEATURES_EXT: c_int = 1000218000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_PROPERTIES_EXT: c_int = 1000218001;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_FRAGMENT_DENSITY_MAP_CREATE_INFO_EXT: c_int = 1000218002;
pub const VK_STRUCTURE_TYPE_FRAGMENT_SHADING_RATE_ATTACHMENT_INFO_KHR: c_int = 1000226000;
pub const VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_STATE_CREATE_INFO_KHR: c_int = 1000226001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_PROPERTIES_KHR: c_int = 1000226002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_FEATURES_KHR: c_int = 1000226003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_KHR: c_int = 1000226004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_CORE_PROPERTIES_2_AMD: c_int = 1000227000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COHERENT_MEMORY_FEATURES_AMD: c_int = 1000229000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_IMAGE_ATOMIC_INT64_FEATURES_EXT: c_int = 1000234000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_BUDGET_PROPERTIES_EXT: c_int = 1000237000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PRIORITY_FEATURES_EXT: c_int = 1000238000;
pub const VK_STRUCTURE_TYPE_MEMORY_PRIORITY_ALLOCATE_INFO_EXT: c_int = 1000238001;
pub const VK_STRUCTURE_TYPE_SURFACE_PROTECTED_CAPABILITIES_KHR: c_int = 1000239000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEDICATED_ALLOCATION_IMAGE_ALIASING_FEATURES_NV: c_int = 1000240000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_EXT: c_int = 1000244000;
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_CREATE_INFO_EXT: c_int = 1000244002;
pub const VK_STRUCTURE_TYPE_VALIDATION_FEATURES_EXT: c_int = 1000247000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_WAIT_FEATURES_KHR: c_int = 1000248000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_FEATURES_NV: c_int = 1000249000;
pub const VK_STRUCTURE_TYPE_COOPERATIVE_MATRIX_PROPERTIES_NV: c_int = 1000249001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COOPERATIVE_MATRIX_PROPERTIES_NV: c_int = 1000249002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COVERAGE_REDUCTION_MODE_FEATURES_NV: c_int = 1000250000;
pub const VK_STRUCTURE_TYPE_PIPELINE_COVERAGE_REDUCTION_STATE_CREATE_INFO_NV: c_int = 1000250001;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_MIXED_SAMPLES_COMBINATION_NV: c_int = 1000250002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_INTERLOCK_FEATURES_EXT: c_int = 1000251000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_IMAGE_ARRAYS_FEATURES_EXT: c_int = 1000252000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_FEATURES_EXT: c_int = 1000254000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_PROVOKING_VERTEX_STATE_CREATE_INFO_EXT: c_int = 1000254001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROVOKING_VERTEX_PROPERTIES_EXT: c_int = 1000254002;
pub const VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_INFO_EXT: c_int = 1000255000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES_FULL_SCREEN_EXCLUSIVE_EXT: c_int = 1000255002;
pub const VK_STRUCTURE_TYPE_SURFACE_FULL_SCREEN_EXCLUSIVE_WIN32_INFO_EXT: c_int = 1000255001;
pub const VK_STRUCTURE_TYPE_HEADLESS_SURFACE_CREATE_INFO_EXT: c_int = 1000256000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_FEATURES_EXT: c_int = 1000259000;
pub const VK_STRUCTURE_TYPE_PIPELINE_RASTERIZATION_LINE_STATE_CREATE_INFO_EXT: c_int = 1000259001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINE_RASTERIZATION_PROPERTIES_EXT: c_int = 1000259002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_FEATURES_EXT: c_int = 1000260000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INDEX_TYPE_UINT8_FEATURES_EXT: c_int = 1000265000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_FEATURES_EXT: c_int = 1000267000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_EXECUTABLE_PROPERTIES_FEATURES_KHR: c_int = 1000269000;
pub const VK_STRUCTURE_TYPE_PIPELINE_INFO_KHR: c_int = 1000269001;
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_PROPERTIES_KHR: c_int = 1000269002;
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INFO_KHR: c_int = 1000269003;
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_STATISTIC_KHR: c_int = 1000269004;
pub const VK_STRUCTURE_TYPE_PIPELINE_EXECUTABLE_INTERNAL_REPRESENTATION_KHR: c_int = 1000269005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_FLOAT_2_FEATURES_EXT: c_int = 1000273000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_PROPERTIES_NV: c_int = 1000277000;
pub const VK_STRUCTURE_TYPE_GRAPHICS_SHADER_GROUP_CREATE_INFO_NV: c_int = 1000277001;
pub const VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_SHADER_GROUPS_CREATE_INFO_NV: c_int = 1000277002;
pub const VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_TOKEN_NV: c_int = 1000277003;
pub const VK_STRUCTURE_TYPE_INDIRECT_COMMANDS_LAYOUT_CREATE_INFO_NV: c_int = 1000277004;
pub const VK_STRUCTURE_TYPE_GENERATED_COMMANDS_INFO_NV: c_int = 1000277005;
pub const VK_STRUCTURE_TYPE_GENERATED_COMMANDS_MEMORY_REQUIREMENTS_INFO_NV: c_int = 1000277006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_GENERATED_COMMANDS_FEATURES_NV: c_int = 1000277007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INHERITED_VIEWPORT_SCISSOR_FEATURES_NV: c_int = 1000278000;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_VIEWPORT_SCISSOR_INFO_NV: c_int = 1000278001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_FEATURES_EXT: c_int = 1000281000;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDER_PASS_TRANSFORM_INFO_QCOM: c_int = 1000282000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_TRANSFORM_BEGIN_INFO_QCOM: c_int = 1000282001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEVICE_MEMORY_REPORT_FEATURES_EXT: c_int = 1000284000;
pub const VK_STRUCTURE_TYPE_DEVICE_DEVICE_MEMORY_REPORT_CREATE_INFO_EXT: c_int = 1000284001;
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_REPORT_CALLBACK_DATA_EXT: c_int = 1000284002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_FEATURES_EXT: c_int = 1000286000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ROBUSTNESS_2_PROPERTIES_EXT: c_int = 1000286001;
pub const VK_STRUCTURE_TYPE_SAMPLER_CUSTOM_BORDER_COLOR_CREATE_INFO_EXT: c_int = 1000287000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_PROPERTIES_EXT: c_int = 1000287001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_CUSTOM_BORDER_COLOR_FEATURES_EXT: c_int = 1000287002;
pub const VK_STRUCTURE_TYPE_PIPELINE_LIBRARY_CREATE_INFO_KHR: c_int = 1000290000;
pub const VK_STRUCTURE_TYPE_PRESENT_ID_KHR: c_int = 1000294000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRESENT_ID_FEATURES_KHR: c_int = 1000294001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DIAGNOSTICS_CONFIG_FEATURES_NV: c_int = 1000300000;
pub const VK_STRUCTURE_TYPE_DEVICE_DIAGNOSTICS_CONFIG_CREATE_INFO_NV: c_int = 1000300001;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECT_CREATE_INFO_EXT: c_int = 1000311000;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_OBJECTS_INFO_EXT: c_int = 1000311001;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_DEVICE_INFO_EXT: c_int = 1000311002;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_COMMAND_QUEUE_INFO_EXT: c_int = 1000311003;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_BUFFER_INFO_EXT: c_int = 1000311004;
pub const VK_STRUCTURE_TYPE_IMPORT_METAL_BUFFER_INFO_EXT: c_int = 1000311005;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_TEXTURE_INFO_EXT: c_int = 1000311006;
pub const VK_STRUCTURE_TYPE_IMPORT_METAL_TEXTURE_INFO_EXT: c_int = 1000311007;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_IO_SURFACE_INFO_EXT: c_int = 1000311008;
pub const VK_STRUCTURE_TYPE_IMPORT_METAL_IO_SURFACE_INFO_EXT: c_int = 1000311009;
pub const VK_STRUCTURE_TYPE_EXPORT_METAL_SHARED_EVENT_INFO_EXT: c_int = 1000311010;
pub const VK_STRUCTURE_TYPE_IMPORT_METAL_SHARED_EVENT_INFO_EXT: c_int = 1000311011;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_CHECKPOINT_PROPERTIES_2_NV: c_int = 1000314008;
pub const VK_STRUCTURE_TYPE_CHECKPOINT_DATA_2_NV: c_int = 1000314009;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_FEATURES_EXT: c_int = 1000320000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GRAPHICS_PIPELINE_LIBRARY_PROPERTIES_EXT: c_int = 1000320001;
pub const VK_STRUCTURE_TYPE_GRAPHICS_PIPELINE_LIBRARY_CREATE_INFO_EXT: c_int = 1000320002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_FEATURES_AMD: c_int = 1000321000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_KHR: c_int = 1000203000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_PROPERTIES_KHR: c_int = 1000322000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_FEATURES_KHR: c_int = 1000323000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_PROPERTIES_NV: c_int = 1000326000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADING_RATE_ENUMS_FEATURES_NV: c_int = 1000326001;
pub const VK_STRUCTURE_TYPE_PIPELINE_FRAGMENT_SHADING_RATE_ENUM_STATE_CREATE_INFO_NV: c_int = 1000326002;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_GEOMETRY_MOTION_TRIANGLES_DATA_NV: c_int = 1000327000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MOTION_BLUR_FEATURES_NV: c_int = 1000327001;
pub const VK_STRUCTURE_TYPE_ACCELERATION_STRUCTURE_MOTION_INFO_NV: c_int = 1000327002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_YCBCR_2_PLANE_444_FORMATS_FEATURES_EXT: c_int = 1000330000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_FEATURES_EXT: c_int = 1000332000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_2_PROPERTIES_EXT: c_int = 1000332001;
pub const VK_STRUCTURE_TYPE_COPY_COMMAND_TRANSFORM_INFO_QCOM: c_int = 1000333000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_FEATURES_KHR: c_int = 1000336000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_FEATURES_EXT: c_int = 1000338000;
pub const VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_CONTROL_EXT: c_int = 1000338001;
pub const VK_STRUCTURE_TYPE_SUBRESOURCE_LAYOUT_2_EXT: c_int = 1000338002;
pub const VK_STRUCTURE_TYPE_IMAGE_SUBRESOURCE_2_EXT: c_int = 1000338003;
pub const VK_STRUCTURE_TYPE_IMAGE_COMPRESSION_PROPERTIES_EXT: c_int = 1000338004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_FEATURES_EXT: c_int = 1000339000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_4444_FORMATS_FEATURES_EXT: c_int = 1000340000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_FEATURES_ARM: c_int = 1000342000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RGBA10X6_FORMATS_FEATURES_EXT: c_int = 1000344000;
pub const VK_STRUCTURE_TYPE_DIRECTFB_SURFACE_CREATE_INFO_EXT: c_int = 1000346000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MUTABLE_DESCRIPTOR_TYPE_FEATURES_VALVE: c_int = 1000351000;
pub const VK_STRUCTURE_TYPE_MUTABLE_DESCRIPTOR_TYPE_CREATE_INFO_VALVE: c_int = 1000351002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VERTEX_INPUT_DYNAMIC_STATE_FEATURES_EXT: c_int = 1000352000;
pub const VK_STRUCTURE_TYPE_VERTEX_INPUT_BINDING_DESCRIPTION_2_EXT: c_int = 1000352001;
pub const VK_STRUCTURE_TYPE_VERTEX_INPUT_ATTRIBUTE_DESCRIPTION_2_EXT: c_int = 1000352002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRM_PROPERTIES_EXT: c_int = 1000353000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_CLIP_CONTROL_FEATURES_EXT: c_int = 1000355000;
pub const VK_STRUCTURE_TYPE_PIPELINE_VIEWPORT_DEPTH_CLIP_CONTROL_CREATE_INFO_EXT: c_int = 1000355001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVE_TOPOLOGY_LIST_RESTART_FEATURES_EXT: c_int = 1000356000;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_ZIRCON_HANDLE_INFO_FUCHSIA: c_int = 1000364000;
pub const VK_STRUCTURE_TYPE_MEMORY_ZIRCON_HANDLE_PROPERTIES_FUCHSIA: c_int = 1000364001;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_ZIRCON_HANDLE_INFO_FUCHSIA: c_int = 1000364002;
pub const VK_STRUCTURE_TYPE_IMPORT_SEMAPHORE_ZIRCON_HANDLE_INFO_FUCHSIA: c_int = 1000365000;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_GET_ZIRCON_HANDLE_INFO_FUCHSIA: c_int = 1000365001;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CREATE_INFO_FUCHSIA: c_int = 1000366000;
pub const VK_STRUCTURE_TYPE_IMPORT_MEMORY_BUFFER_COLLECTION_FUCHSIA: c_int = 1000366001;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_IMAGE_CREATE_INFO_FUCHSIA: c_int = 1000366002;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_PROPERTIES_FUCHSIA: c_int = 1000366003;
pub const VK_STRUCTURE_TYPE_BUFFER_CONSTRAINTS_INFO_FUCHSIA: c_int = 1000366004;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_BUFFER_CREATE_INFO_FUCHSIA: c_int = 1000366005;
pub const VK_STRUCTURE_TYPE_IMAGE_CONSTRAINTS_INFO_FUCHSIA: c_int = 1000366006;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_CONSTRAINTS_INFO_FUCHSIA: c_int = 1000366007;
pub const VK_STRUCTURE_TYPE_SYSMEM_COLOR_SPACE_FUCHSIA: c_int = 1000366008;
pub const VK_STRUCTURE_TYPE_BUFFER_COLLECTION_CONSTRAINTS_INFO_FUCHSIA: c_int = 1000366009;
pub const VK_STRUCTURE_TYPE_SUBPASS_SHADING_PIPELINE_CREATE_INFO_HUAWEI: c_int = 1000369000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_FEATURES_HUAWEI: c_int = 1000369001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_SHADING_PROPERTIES_HUAWEI: c_int = 1000369002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INVOCATION_MASK_FEATURES_HUAWEI: c_int = 1000370000;
pub const VK_STRUCTURE_TYPE_MEMORY_GET_REMOTE_ADDRESS_INFO_NV: c_int = 1000371000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_MEMORY_RDMA_FEATURES_NV: c_int = 1000371001;
pub const VK_STRUCTURE_TYPE_PIPELINE_PROPERTIES_IDENTIFIER_EXT: c_int = 1000372000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_PROPERTIES_FEATURES_EXT: c_int = 1000372001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_FEATURES_EXT: c_int = 1000376000;
pub const VK_STRUCTURE_TYPE_SUBPASS_RESOLVE_PERFORMANCE_QUERY_EXT: c_int = 1000376001;
pub const VK_STRUCTURE_TYPE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_INFO_EXT: c_int = 1000376002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTENDED_DYNAMIC_STATE_2_FEATURES_EXT: c_int = 1000377000;
pub const VK_STRUCTURE_TYPE_SCREEN_SURFACE_CREATE_INFO_QNX: c_int = 1000378000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_COLOR_WRITE_ENABLE_FEATURES_EXT: c_int = 1000381000;
pub const VK_STRUCTURE_TYPE_PIPELINE_COLOR_WRITE_CREATE_INFO_EXT: c_int = 1000381001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIMITIVES_GENERATED_QUERY_FEATURES_EXT: c_int = 1000382000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_RAY_TRACING_MAINTENANCE_1_FEATURES_KHR: c_int = 1000386000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_VIEW_MIN_LOD_FEATURES_EXT: c_int = 1000391000;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_MIN_LOD_CREATE_INFO_EXT: c_int = 1000391001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_FEATURES_EXT: c_int = 1000392000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTI_DRAW_PROPERTIES_EXT: c_int = 1000392001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_2D_VIEW_OF_3D_FEATURES_EXT: c_int = 1000393000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BORDER_COLOR_SWIZZLE_FEATURES_EXT: c_int = 1000411000;
pub const VK_STRUCTURE_TYPE_SAMPLER_BORDER_COLOR_COMPONENT_MAPPING_CREATE_INFO_EXT: c_int = 1000411001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PAGEABLE_DEVICE_LOCAL_MEMORY_FEATURES_EXT: c_int = 1000412000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_SET_HOST_MAPPING_FEATURES_VALVE: c_int = 1000420000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_BINDING_REFERENCE_VALVE: c_int = 1000420001;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_HOST_MAPPING_INFO_VALVE: c_int = 1000420002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_NON_SEAMLESS_CUBE_MAP_FEATURES_EXT: c_int = 1000422000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_FEATURES_QCOM: c_int = 1000425000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_DENSITY_MAP_OFFSET_PROPERTIES_QCOM: c_int = 1000425001;
pub const VK_STRUCTURE_TYPE_SUBPASS_FRAGMENT_DENSITY_MAP_OFFSET_END_INFO_QCOM: c_int = 1000425002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_LINEAR_COLOR_ATTACHMENT_FEATURES_NV: c_int = 1000430000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_FEATURES_EXT: c_int = 1000437000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_FEATURES_QCOM: c_int = 1000440000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_PROCESSING_PROPERTIES_QCOM: c_int = 1000440001;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_SAMPLE_WEIGHT_CREATE_INFO_QCOM: c_int = 1000440002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBPASS_MERGE_FEEDBACK_FEATURES_EXT: c_int = 1000458000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_CONTROL_EXT: c_int = 1000458001;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATION_FEEDBACK_CREATE_INFO_EXT: c_int = 1000458002;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_SUBPASS_FEEDBACK_CREATE_INFO_EXT: c_int = 1000458003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_FEATURES_EXT: c_int = 1000462000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_MODULE_IDENTIFIER_PROPERTIES_EXT: c_int = 1000462001;
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_MODULE_IDENTIFIER_CREATE_INFO_EXT: c_int = 1000462002;
pub const VK_STRUCTURE_TYPE_SHADER_MODULE_IDENTIFIER_EXT: c_int = 1000462003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TILE_PROPERTIES_FEATURES_QCOM: c_int = 1000484000;
pub const VK_STRUCTURE_TYPE_TILE_PROPERTIES_QCOM: c_int = 1000484001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_AMIGO_PROFILING_FEATURES_SEC: c_int = 1000485000;
pub const VK_STRUCTURE_TYPE_AMIGO_PROFILING_SUBMIT_INFO_SEC: c_int = 1000485001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES: c_int = 1000120000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DRAW_PARAMETER_FEATURES: c_int = 1000063000;
pub const VK_STRUCTURE_TYPE_DEBUG_REPORT_CREATE_INFO_EXT: c_int = 1000011000;
pub const VK_STRUCTURE_TYPE_RENDERING_INFO_KHR: c_int = 1000044000;
pub const VK_STRUCTURE_TYPE_RENDERING_ATTACHMENT_INFO_KHR: c_int = 1000044001;
pub const VK_STRUCTURE_TYPE_PIPELINE_RENDERING_CREATE_INFO_KHR: c_int = 1000044002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DYNAMIC_RENDERING_FEATURES_KHR: c_int = 1000044003;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_INHERITANCE_RENDERING_INFO_KHR: c_int = 1000044004;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_SAMPLE_COUNT_INFO_NV: c_int = 1000044008;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_MULTIVIEW_CREATE_INFO_KHR: c_int = 1000053000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_FEATURES_KHR: c_int = 1000053001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MULTIVIEW_PROPERTIES_KHR: c_int = 1000053002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FEATURES_2_KHR: c_int = 1000059000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PROPERTIES_2_KHR: c_int = 1000059001;
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_2_KHR: c_int = 1000059002;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_PROPERTIES_2_KHR: c_int = 1000059003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_FORMAT_INFO_2_KHR: c_int = 1000059004;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_PROPERTIES_2_KHR: c_int = 1000059005;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MEMORY_PROPERTIES_2_KHR: c_int = 1000059006;
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_FORMAT_PROPERTIES_2_KHR: c_int = 1000059007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SPARSE_IMAGE_FORMAT_INFO_2_KHR: c_int = 1000059008;
pub const VK_STRUCTURE_TYPE_MEMORY_ALLOCATE_FLAGS_INFO_KHR: c_int = 1000060000;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_RENDER_PASS_BEGIN_INFO_KHR: c_int = 1000060003;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_COMMAND_BUFFER_BEGIN_INFO_KHR: c_int = 1000060004;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_SUBMIT_INFO_KHR: c_int = 1000060005;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_BIND_SPARSE_INFO_KHR: c_int = 1000060006;
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_DEVICE_GROUP_INFO_KHR: c_int = 1000060013;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_DEVICE_GROUP_INFO_KHR: c_int = 1000060014;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXTURE_COMPRESSION_ASTC_HDR_FEATURES_EXT: c_int = 1000066000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GROUP_PROPERTIES_KHR: c_int = 1000070000;
pub const VK_STRUCTURE_TYPE_DEVICE_GROUP_DEVICE_CREATE_INFO_KHR: c_int = 1000070001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_IMAGE_FORMAT_INFO_KHR: c_int = 1000071000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_IMAGE_FORMAT_PROPERTIES_KHR: c_int = 1000071001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_BUFFER_INFO_KHR: c_int = 1000071002;
pub const VK_STRUCTURE_TYPE_EXTERNAL_BUFFER_PROPERTIES_KHR: c_int = 1000071003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ID_PROPERTIES_KHR: c_int = 1000071004;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_BUFFER_CREATE_INFO_KHR: c_int = 1000072000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_MEMORY_IMAGE_CREATE_INFO_KHR: c_int = 1000072001;
pub const VK_STRUCTURE_TYPE_EXPORT_MEMORY_ALLOCATE_INFO_KHR: c_int = 1000072002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_SEMAPHORE_INFO_KHR: c_int = 1000076000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_SEMAPHORE_PROPERTIES_KHR: c_int = 1000076001;
pub const VK_STRUCTURE_TYPE_EXPORT_SEMAPHORE_CREATE_INFO_KHR: c_int = 1000077000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_FLOAT16_INT8_FEATURES_KHR: c_int = 1000082000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT16_INT8_FEATURES_KHR: c_int = 1000082000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_16BIT_STORAGE_FEATURES_KHR: c_int = 1000083000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_CREATE_INFO_KHR: c_int = 1000085000;
pub const VK_STRUCTURE_TYPE_SURFACE_CAPABILITIES2_EXT: c_int = 1000090000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGELESS_FRAMEBUFFER_FEATURES_KHR: c_int = 1000108000;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENTS_CREATE_INFO_KHR: c_int = 1000108001;
pub const VK_STRUCTURE_TYPE_FRAMEBUFFER_ATTACHMENT_IMAGE_INFO_KHR: c_int = 1000108002;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_ATTACHMENT_BEGIN_INFO_KHR: c_int = 1000108003;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_2_KHR: c_int = 1000109000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_2_KHR: c_int = 1000109001;
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_2_KHR: c_int = 1000109002;
pub const VK_STRUCTURE_TYPE_SUBPASS_DEPENDENCY_2_KHR: c_int = 1000109003;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_CREATE_INFO_2_KHR: c_int = 1000109004;
pub const VK_STRUCTURE_TYPE_SUBPASS_BEGIN_INFO_KHR: c_int = 1000109005;
pub const VK_STRUCTURE_TYPE_SUBPASS_END_INFO_KHR: c_int = 1000109006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_EXTERNAL_FENCE_INFO_KHR: c_int = 1000112000;
pub const VK_STRUCTURE_TYPE_EXTERNAL_FENCE_PROPERTIES_KHR: c_int = 1000112001;
pub const VK_STRUCTURE_TYPE_EXPORT_FENCE_CREATE_INFO_KHR: c_int = 1000113000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_POINT_CLIPPING_PROPERTIES_KHR: c_int = 1000117000;
pub const VK_STRUCTURE_TYPE_RENDER_PASS_INPUT_ATTACHMENT_ASPECT_CREATE_INFO_KHR: c_int = 1000117001;
pub const VK_STRUCTURE_TYPE_IMAGE_VIEW_USAGE_CREATE_INFO_KHR: c_int = 1000117002;
pub const VK_STRUCTURE_TYPE_PIPELINE_TESSELLATION_DOMAIN_ORIGIN_STATE_CREATE_INFO_KHR: c_int = 1000117003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTERS_FEATURES_KHR: c_int = 1000120000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VARIABLE_POINTER_FEATURES_KHR: c_int = 1000120000;
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_REQUIREMENTS_KHR: c_int = 1000127000;
pub const VK_STRUCTURE_TYPE_MEMORY_DEDICATED_ALLOCATE_INFO_KHR: c_int = 1000127001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_FILTER_MINMAX_PROPERTIES_EXT: c_int = 1000130000;
pub const VK_STRUCTURE_TYPE_SAMPLER_REDUCTION_MODE_CREATE_INFO_EXT: c_int = 1000130001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_FEATURES_EXT: c_int = 1000138000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_INLINE_UNIFORM_BLOCK_PROPERTIES_EXT: c_int = 1000138001;
pub const VK_STRUCTURE_TYPE_WRITE_DESCRIPTOR_SET_INLINE_UNIFORM_BLOCK_EXT: c_int = 1000138002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_POOL_INLINE_UNIFORM_BLOCK_CREATE_INFO_EXT: c_int = 1000138003;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_REQUIREMENTS_INFO_2_KHR: c_int = 1000146000;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_REQUIREMENTS_INFO_2_KHR: c_int = 1000146001;
pub const VK_STRUCTURE_TYPE_IMAGE_SPARSE_MEMORY_REQUIREMENTS_INFO_2_KHR: c_int = 1000146002;
pub const VK_STRUCTURE_TYPE_MEMORY_REQUIREMENTS_2_KHR: c_int = 1000146003;
pub const VK_STRUCTURE_TYPE_SPARSE_IMAGE_MEMORY_REQUIREMENTS_2_KHR: c_int = 1000146004;
pub const VK_STRUCTURE_TYPE_IMAGE_FORMAT_LIST_CREATE_INFO_KHR: c_int = 1000147000;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_CREATE_INFO_KHR: c_int = 1000156000;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_INFO_KHR: c_int = 1000156001;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_PLANE_MEMORY_INFO_KHR: c_int = 1000156002;
pub const VK_STRUCTURE_TYPE_IMAGE_PLANE_MEMORY_REQUIREMENTS_INFO_KHR: c_int = 1000156003;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SAMPLER_YCBCR_CONVERSION_FEATURES_KHR: c_int = 1000156004;
pub const VK_STRUCTURE_TYPE_SAMPLER_YCBCR_CONVERSION_IMAGE_FORMAT_PROPERTIES_KHR: c_int = 1000156005;
pub const VK_STRUCTURE_TYPE_BIND_BUFFER_MEMORY_INFO_KHR: c_int = 1000157000;
pub const VK_STRUCTURE_TYPE_BIND_IMAGE_MEMORY_INFO_KHR: c_int = 1000157001;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_BINDING_FLAGS_CREATE_INFO_EXT: c_int = 1000161000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_FEATURES_EXT: c_int = 1000161001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DESCRIPTOR_INDEXING_PROPERTIES_EXT: c_int = 1000161002;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_ALLOCATE_INFO_EXT: c_int = 1000161003;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_VARIABLE_DESCRIPTOR_COUNT_LAYOUT_SUPPORT_EXT: c_int = 1000161004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_3_PROPERTIES_KHR: c_int = 1000168000;
pub const VK_STRUCTURE_TYPE_DESCRIPTOR_SET_LAYOUT_SUPPORT_KHR: c_int = 1000168001;
pub const VK_STRUCTURE_TYPE_DEVICE_QUEUE_GLOBAL_PRIORITY_CREATE_INFO_EXT: c_int = 1000174000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_SUBGROUP_EXTENDED_TYPES_FEATURES_KHR: c_int = 1000175000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_8BIT_STORAGE_FEATURES_KHR: c_int = 1000177000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_ATOMIC_INT64_FEATURES_KHR: c_int = 1000180000;
pub const VK_STRUCTURE_TYPE_PIPELINE_CREATION_FEEDBACK_CREATE_INFO_EXT: c_int = 1000192000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DRIVER_PROPERTIES_KHR: c_int = 1000196000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FLOAT_CONTROLS_PROPERTIES_KHR: c_int = 1000197000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_DEPTH_STENCIL_RESOLVE_PROPERTIES_KHR: c_int = 1000199000;
pub const VK_STRUCTURE_TYPE_SUBPASS_DESCRIPTION_DEPTH_STENCIL_RESOLVE_KHR: c_int = 1000199001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_FRAGMENT_SHADER_BARYCENTRIC_FEATURES_NV: c_int = 1000203000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_FEATURES_KHR: c_int = 1000207000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TIMELINE_SEMAPHORE_PROPERTIES_KHR: c_int = 1000207001;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_TYPE_CREATE_INFO_KHR: c_int = 1000207002;
pub const VK_STRUCTURE_TYPE_TIMELINE_SEMAPHORE_SUBMIT_INFO_KHR: c_int = 1000207003;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_WAIT_INFO_KHR: c_int = 1000207004;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_SIGNAL_INFO_KHR: c_int = 1000207005;
pub const VK_STRUCTURE_TYPE_QUERY_POOL_CREATE_INFO_INTEL: c_int = 1000210000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_VULKAN_MEMORY_MODEL_FEATURES_KHR: c_int = 1000211000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_TERMINATE_INVOCATION_FEATURES_KHR: c_int = 1000215000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SCALAR_BLOCK_LAYOUT_FEATURES_EXT: c_int = 1000221000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_PROPERTIES_EXT: c_int = 1000225000;
pub const VK_STRUCTURE_TYPE_PIPELINE_SHADER_STAGE_REQUIRED_SUBGROUP_SIZE_CREATE_INFO_EXT: c_int = 1000225001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SUBGROUP_SIZE_CONTROL_FEATURES_EXT: c_int = 1000225002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SEPARATE_DEPTH_STENCIL_LAYOUTS_FEATURES_KHR: c_int = 1000241000;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_REFERENCE_STENCIL_LAYOUT_KHR: c_int = 1000241001;
pub const VK_STRUCTURE_TYPE_ATTACHMENT_DESCRIPTION_STENCIL_LAYOUT_KHR: c_int = 1000241002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_ADDRESS_FEATURES_EXT: c_int = 1000244000;
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_EXT: c_int = 1000244001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TOOL_PROPERTIES_EXT: c_int = 1000245000;
pub const VK_STRUCTURE_TYPE_IMAGE_STENCIL_USAGE_CREATE_INFO_EXT: c_int = 1000246000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_UNIFORM_BUFFER_STANDARD_LAYOUT_FEATURES_KHR: c_int = 1000253000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_BUFFER_DEVICE_ADDRESS_FEATURES_KHR: c_int = 1000257000;
pub const VK_STRUCTURE_TYPE_BUFFER_DEVICE_ADDRESS_INFO_KHR: c_int = 1000244001;
pub const VK_STRUCTURE_TYPE_BUFFER_OPAQUE_CAPTURE_ADDRESS_CREATE_INFO_KHR: c_int = 1000257002;
pub const VK_STRUCTURE_TYPE_MEMORY_OPAQUE_CAPTURE_ADDRESS_ALLOCATE_INFO_KHR: c_int = 1000257003;
pub const VK_STRUCTURE_TYPE_DEVICE_MEMORY_OPAQUE_CAPTURE_ADDRESS_INFO_KHR: c_int = 1000257004;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_HOST_QUERY_RESET_FEATURES_EXT: c_int = 1000261000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_DEMOTE_TO_HELPER_INVOCATION_FEATURES_EXT: c_int = 1000276000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_FEATURES_KHR: c_int = 1000280000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SHADER_INTEGER_DOT_PRODUCT_PROPERTIES_KHR: c_int = 1000280001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_TEXEL_BUFFER_ALIGNMENT_PROPERTIES_EXT: c_int = 1000281001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PRIVATE_DATA_FEATURES_EXT: c_int = 1000295000;
pub const VK_STRUCTURE_TYPE_DEVICE_PRIVATE_DATA_CREATE_INFO_EXT: c_int = 1000295001;
pub const VK_STRUCTURE_TYPE_PRIVATE_DATA_SLOT_CREATE_INFO_EXT: c_int = 1000295002;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_PIPELINE_CREATION_CACHE_CONTROL_FEATURES_EXT: c_int = 1000297000;
pub const VK_STRUCTURE_TYPE_MEMORY_BARRIER_2_KHR: c_int = 1000314000;
pub const VK_STRUCTURE_TYPE_BUFFER_MEMORY_BARRIER_2_KHR: c_int = 1000314001;
pub const VK_STRUCTURE_TYPE_IMAGE_MEMORY_BARRIER_2_KHR: c_int = 1000314002;
pub const VK_STRUCTURE_TYPE_DEPENDENCY_INFO_KHR: c_int = 1000314003;
pub const VK_STRUCTURE_TYPE_SUBMIT_INFO_2_KHR: c_int = 1000314004;
pub const VK_STRUCTURE_TYPE_SEMAPHORE_SUBMIT_INFO_KHR: c_int = 1000314005;
pub const VK_STRUCTURE_TYPE_COMMAND_BUFFER_SUBMIT_INFO_KHR: c_int = 1000314006;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_SYNCHRONIZATION_2_FEATURES_KHR: c_int = 1000314007;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_ZERO_INITIALIZE_WORKGROUP_MEMORY_FEATURES_KHR: c_int = 1000325000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_IMAGE_ROBUSTNESS_FEATURES_EXT: c_int = 1000335000;
pub const VK_STRUCTURE_TYPE_COPY_BUFFER_INFO_2_KHR: c_int = 1000337000;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_INFO_2_KHR: c_int = 1000337001;
pub const VK_STRUCTURE_TYPE_COPY_BUFFER_TO_IMAGE_INFO_2_KHR: c_int = 1000337002;
pub const VK_STRUCTURE_TYPE_COPY_IMAGE_TO_BUFFER_INFO_2_KHR: c_int = 1000337003;
pub const VK_STRUCTURE_TYPE_BLIT_IMAGE_INFO_2_KHR: c_int = 1000337004;
pub const VK_STRUCTURE_TYPE_RESOLVE_IMAGE_INFO_2_KHR: c_int = 1000337005;
pub const VK_STRUCTURE_TYPE_BUFFER_COPY_2_KHR: c_int = 1000337006;
pub const VK_STRUCTURE_TYPE_IMAGE_COPY_2_KHR: c_int = 1000337007;
pub const VK_STRUCTURE_TYPE_IMAGE_BLIT_2_KHR: c_int = 1000337008;
pub const VK_STRUCTURE_TYPE_BUFFER_IMAGE_COPY_2_KHR: c_int = 1000337009;
pub const VK_STRUCTURE_TYPE_IMAGE_RESOLVE_2_KHR: c_int = 1000337010;
pub const VK_STRUCTURE_TYPE_FORMAT_PROPERTIES_3_KHR: c_int = 1000360000;
pub const VK_STRUCTURE_TYPE_PIPELINE_INFO_EXT: c_int = 1000269001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_GLOBAL_PRIORITY_QUERY_FEATURES_EXT: c_int = 1000388000;
pub const VK_STRUCTURE_TYPE_QUEUE_FAMILY_GLOBAL_PRIORITY_PROPERTIES_EXT: c_int = 1000388001;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_FEATURES_KHR: c_int = 1000413000;
pub const VK_STRUCTURE_TYPE_PHYSICAL_DEVICE_MAINTENANCE_4_PROPERTIES_KHR: c_int = 1000413001;
pub const VK_STRUCTURE_TYPE_DEVICE_BUFFER_MEMORY_REQUIREMENTS_KHR: c_int = 1000413002;
pub const VK_STRUCTURE_TYPE_DEVICE_IMAGE_MEMORY_REQUIREMENTS_KHR: c_int = 1000413003;
pub const VK_STRUCTURE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkStructureType = c_uint;
pub const VkStructureType = enum_VkStructureType;
pub const VK_PIPELINE_CACHE_HEADER_VERSION_ONE: c_int = 1;
pub const VK_PIPELINE_CACHE_HEADER_VERSION_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineCacheHeaderVersion = c_uint;
pub const VkPipelineCacheHeaderVersion = enum_VkPipelineCacheHeaderVersion;
pub const VK_IMAGE_LAYOUT_UNDEFINED: c_int = 0;
pub const VK_IMAGE_LAYOUT_GENERAL: c_int = 1;
pub const VK_IMAGE_LAYOUT_COLOR_ATTACHMENT_OPTIMAL: c_int = 2;
pub const VK_IMAGE_LAYOUT_DEPTH_STENCIL_ATTACHMENT_OPTIMAL: c_int = 3;
pub const VK_IMAGE_LAYOUT_DEPTH_STENCIL_READ_ONLY_OPTIMAL: c_int = 4;
pub const VK_IMAGE_LAYOUT_SHADER_READ_ONLY_OPTIMAL: c_int = 5;
pub const VK_IMAGE_LAYOUT_TRANSFER_SRC_OPTIMAL: c_int = 6;
pub const VK_IMAGE_LAYOUT_TRANSFER_DST_OPTIMAL: c_int = 7;
pub const VK_IMAGE_LAYOUT_PREINITIALIZED: c_int = 8;
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL: c_int = 1000117000;
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL: c_int = 1000117001;
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL: c_int = 1000241000;
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL: c_int = 1000241001;
pub const VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL: c_int = 1000241002;
pub const VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL: c_int = 1000241003;
pub const VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL: c_int = 1000314000;
pub const VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL: c_int = 1000314001;
pub const VK_IMAGE_LAYOUT_PRESENT_SRC_KHR: c_int = 1000001002;
pub const VK_IMAGE_LAYOUT_SHARED_PRESENT_KHR: c_int = 1000111000;
pub const VK_IMAGE_LAYOUT_FRAGMENT_DENSITY_MAP_OPTIMAL_EXT: c_int = 1000218000;
pub const VK_IMAGE_LAYOUT_FRAGMENT_SHADING_RATE_ATTACHMENT_OPTIMAL_KHR: c_int = 1000164003;
pub const VK_IMAGE_LAYOUT_ATTACHMENT_FEEDBACK_LOOP_OPTIMAL_EXT: c_int = 1000339000;
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_OPTIMAL_KHR: c_int = 1000117000;
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_OPTIMAL_KHR: c_int = 1000117001;
pub const VK_IMAGE_LAYOUT_SHADING_RATE_OPTIMAL_NV: c_int = 1000164003;
pub const VK_IMAGE_LAYOUT_DEPTH_ATTACHMENT_OPTIMAL_KHR: c_int = 1000241000;
pub const VK_IMAGE_LAYOUT_DEPTH_READ_ONLY_OPTIMAL_KHR: c_int = 1000241001;
pub const VK_IMAGE_LAYOUT_STENCIL_ATTACHMENT_OPTIMAL_KHR: c_int = 1000241002;
pub const VK_IMAGE_LAYOUT_STENCIL_READ_ONLY_OPTIMAL_KHR: c_int = 1000241003;
pub const VK_IMAGE_LAYOUT_READ_ONLY_OPTIMAL_KHR: c_int = 1000314000;
pub const VK_IMAGE_LAYOUT_ATTACHMENT_OPTIMAL_KHR: c_int = 1000314001;
pub const VK_IMAGE_LAYOUT_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageLayout = c_uint;
pub const VkImageLayout = enum_VkImageLayout;
pub const VK_OBJECT_TYPE_UNKNOWN: c_int = 0;
pub const VK_OBJECT_TYPE_INSTANCE: c_int = 1;
pub const VK_OBJECT_TYPE_PHYSICAL_DEVICE: c_int = 2;
pub const VK_OBJECT_TYPE_DEVICE: c_int = 3;
pub const VK_OBJECT_TYPE_QUEUE: c_int = 4;
pub const VK_OBJECT_TYPE_SEMAPHORE: c_int = 5;
pub const VK_OBJECT_TYPE_COMMAND_BUFFER: c_int = 6;
pub const VK_OBJECT_TYPE_FENCE: c_int = 7;
pub const VK_OBJECT_TYPE_DEVICE_MEMORY: c_int = 8;
pub const VK_OBJECT_TYPE_BUFFER: c_int = 9;
pub const VK_OBJECT_TYPE_IMAGE: c_int = 10;
pub const VK_OBJECT_TYPE_EVENT: c_int = 11;
pub const VK_OBJECT_TYPE_QUERY_POOL: c_int = 12;
pub const VK_OBJECT_TYPE_BUFFER_VIEW: c_int = 13;
pub const VK_OBJECT_TYPE_IMAGE_VIEW: c_int = 14;
pub const VK_OBJECT_TYPE_SHADER_MODULE: c_int = 15;
pub const VK_OBJECT_TYPE_PIPELINE_CACHE: c_int = 16;
pub const VK_OBJECT_TYPE_PIPELINE_LAYOUT: c_int = 17;
pub const VK_OBJECT_TYPE_RENDER_PASS: c_int = 18;
pub const VK_OBJECT_TYPE_PIPELINE: c_int = 19;
pub const VK_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT: c_int = 20;
pub const VK_OBJECT_TYPE_SAMPLER: c_int = 21;
pub const VK_OBJECT_TYPE_DESCRIPTOR_POOL: c_int = 22;
pub const VK_OBJECT_TYPE_DESCRIPTOR_SET: c_int = 23;
pub const VK_OBJECT_TYPE_FRAMEBUFFER: c_int = 24;
pub const VK_OBJECT_TYPE_COMMAND_POOL: c_int = 25;
pub const VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION: c_int = 1000156000;
pub const VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE: c_int = 1000085000;
pub const VK_OBJECT_TYPE_PRIVATE_DATA_SLOT: c_int = 1000295000;
pub const VK_OBJECT_TYPE_SURFACE_KHR: c_int = 1000000000;
pub const VK_OBJECT_TYPE_SWAPCHAIN_KHR: c_int = 1000001000;
pub const VK_OBJECT_TYPE_DISPLAY_KHR: c_int = 1000002000;
pub const VK_OBJECT_TYPE_DISPLAY_MODE_KHR: c_int = 1000002001;
pub const VK_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT: c_int = 1000011000;
pub const VK_OBJECT_TYPE_CU_MODULE_NVX: c_int = 1000029000;
pub const VK_OBJECT_TYPE_CU_FUNCTION_NVX: c_int = 1000029001;
pub const VK_OBJECT_TYPE_DEBUG_UTILS_MESSENGER_EXT: c_int = 1000128000;
pub const VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR: c_int = 1000150000;
pub const VK_OBJECT_TYPE_VALIDATION_CACHE_EXT: c_int = 1000160000;
pub const VK_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV: c_int = 1000165000;
pub const VK_OBJECT_TYPE_PERFORMANCE_CONFIGURATION_INTEL: c_int = 1000210000;
pub const VK_OBJECT_TYPE_DEFERRED_OPERATION_KHR: c_int = 1000268000;
pub const VK_OBJECT_TYPE_INDIRECT_COMMANDS_LAYOUT_NV: c_int = 1000277000;
pub const VK_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA: c_int = 1000366000;
pub const VK_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR: c_int = 1000085000;
pub const VK_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR: c_int = 1000156000;
pub const VK_OBJECT_TYPE_PRIVATE_DATA_SLOT_EXT: c_int = 1000295000;
pub const VK_OBJECT_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkObjectType = c_uint;
pub const VkObjectType = enum_VkObjectType;
pub const VK_VENDOR_ID_VIV: c_int = 65537;
pub const VK_VENDOR_ID_VSI: c_int = 65538;
pub const VK_VENDOR_ID_KAZAN: c_int = 65539;
pub const VK_VENDOR_ID_CODEPLAY: c_int = 65540;
pub const VK_VENDOR_ID_MESA: c_int = 65541;
pub const VK_VENDOR_ID_POCL: c_int = 65542;
pub const VK_VENDOR_ID_MAX_ENUM: c_int = 2147483647;
pub const enum_VkVendorId = c_uint;
pub const VkVendorId = enum_VkVendorId;
pub const VK_SYSTEM_ALLOCATION_SCOPE_COMMAND: c_int = 0;
pub const VK_SYSTEM_ALLOCATION_SCOPE_OBJECT: c_int = 1;
pub const VK_SYSTEM_ALLOCATION_SCOPE_CACHE: c_int = 2;
pub const VK_SYSTEM_ALLOCATION_SCOPE_DEVICE: c_int = 3;
pub const VK_SYSTEM_ALLOCATION_SCOPE_INSTANCE: c_int = 4;
pub const VK_SYSTEM_ALLOCATION_SCOPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSystemAllocationScope = c_uint;
pub const VkSystemAllocationScope = enum_VkSystemAllocationScope;
pub const VK_INTERNAL_ALLOCATION_TYPE_EXECUTABLE: c_int = 0;
pub const VK_INTERNAL_ALLOCATION_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkInternalAllocationType = c_uint;
pub const VkInternalAllocationType = enum_VkInternalAllocationType;
pub const VK_FORMAT_UNDEFINED: c_int = 0;
pub const VK_FORMAT_R4G4_UNORM_PACK8: c_int = 1;
pub const VK_FORMAT_R4G4B4A4_UNORM_PACK16: c_int = 2;
pub const VK_FORMAT_B4G4R4A4_UNORM_PACK16: c_int = 3;
pub const VK_FORMAT_R5G6B5_UNORM_PACK16: c_int = 4;
pub const VK_FORMAT_B5G6R5_UNORM_PACK16: c_int = 5;
pub const VK_FORMAT_R5G5B5A1_UNORM_PACK16: c_int = 6;
pub const VK_FORMAT_B5G5R5A1_UNORM_PACK16: c_int = 7;
pub const VK_FORMAT_A1R5G5B5_UNORM_PACK16: c_int = 8;
pub const VK_FORMAT_R8_UNORM: c_int = 9;
pub const VK_FORMAT_R8_SNORM: c_int = 10;
pub const VK_FORMAT_R8_USCALED: c_int = 11;
pub const VK_FORMAT_R8_SSCALED: c_int = 12;
pub const VK_FORMAT_R8_UINT: c_int = 13;
pub const VK_FORMAT_R8_SINT: c_int = 14;
pub const VK_FORMAT_R8_SRGB: c_int = 15;
pub const VK_FORMAT_R8G8_UNORM: c_int = 16;
pub const VK_FORMAT_R8G8_SNORM: c_int = 17;
pub const VK_FORMAT_R8G8_USCALED: c_int = 18;
pub const VK_FORMAT_R8G8_SSCALED: c_int = 19;
pub const VK_FORMAT_R8G8_UINT: c_int = 20;
pub const VK_FORMAT_R8G8_SINT: c_int = 21;
pub const VK_FORMAT_R8G8_SRGB: c_int = 22;
pub const VK_FORMAT_R8G8B8_UNORM: c_int = 23;
pub const VK_FORMAT_R8G8B8_SNORM: c_int = 24;
pub const VK_FORMAT_R8G8B8_USCALED: c_int = 25;
pub const VK_FORMAT_R8G8B8_SSCALED: c_int = 26;
pub const VK_FORMAT_R8G8B8_UINT: c_int = 27;
pub const VK_FORMAT_R8G8B8_SINT: c_int = 28;
pub const VK_FORMAT_R8G8B8_SRGB: c_int = 29;
pub const VK_FORMAT_B8G8R8_UNORM: c_int = 30;
pub const VK_FORMAT_B8G8R8_SNORM: c_int = 31;
pub const VK_FORMAT_B8G8R8_USCALED: c_int = 32;
pub const VK_FORMAT_B8G8R8_SSCALED: c_int = 33;
pub const VK_FORMAT_B8G8R8_UINT: c_int = 34;
pub const VK_FORMAT_B8G8R8_SINT: c_int = 35;
pub const VK_FORMAT_B8G8R8_SRGB: c_int = 36;
pub const VK_FORMAT_R8G8B8A8_UNORM: c_int = 37;
pub const VK_FORMAT_R8G8B8A8_SNORM: c_int = 38;
pub const VK_FORMAT_R8G8B8A8_USCALED: c_int = 39;
pub const VK_FORMAT_R8G8B8A8_SSCALED: c_int = 40;
pub const VK_FORMAT_R8G8B8A8_UINT: c_int = 41;
pub const VK_FORMAT_R8G8B8A8_SINT: c_int = 42;
pub const VK_FORMAT_R8G8B8A8_SRGB: c_int = 43;
pub const VK_FORMAT_B8G8R8A8_UNORM: c_int = 44;
pub const VK_FORMAT_B8G8R8A8_SNORM: c_int = 45;
pub const VK_FORMAT_B8G8R8A8_USCALED: c_int = 46;
pub const VK_FORMAT_B8G8R8A8_SSCALED: c_int = 47;
pub const VK_FORMAT_B8G8R8A8_UINT: c_int = 48;
pub const VK_FORMAT_B8G8R8A8_SINT: c_int = 49;
pub const VK_FORMAT_B8G8R8A8_SRGB: c_int = 50;
pub const VK_FORMAT_A8B8G8R8_UNORM_PACK32: c_int = 51;
pub const VK_FORMAT_A8B8G8R8_SNORM_PACK32: c_int = 52;
pub const VK_FORMAT_A8B8G8R8_USCALED_PACK32: c_int = 53;
pub const VK_FORMAT_A8B8G8R8_SSCALED_PACK32: c_int = 54;
pub const VK_FORMAT_A8B8G8R8_UINT_PACK32: c_int = 55;
pub const VK_FORMAT_A8B8G8R8_SINT_PACK32: c_int = 56;
pub const VK_FORMAT_A8B8G8R8_SRGB_PACK32: c_int = 57;
pub const VK_FORMAT_A2R10G10B10_UNORM_PACK32: c_int = 58;
pub const VK_FORMAT_A2R10G10B10_SNORM_PACK32: c_int = 59;
pub const VK_FORMAT_A2R10G10B10_USCALED_PACK32: c_int = 60;
pub const VK_FORMAT_A2R10G10B10_SSCALED_PACK32: c_int = 61;
pub const VK_FORMAT_A2R10G10B10_UINT_PACK32: c_int = 62;
pub const VK_FORMAT_A2R10G10B10_SINT_PACK32: c_int = 63;
pub const VK_FORMAT_A2B10G10R10_UNORM_PACK32: c_int = 64;
pub const VK_FORMAT_A2B10G10R10_SNORM_PACK32: c_int = 65;
pub const VK_FORMAT_A2B10G10R10_USCALED_PACK32: c_int = 66;
pub const VK_FORMAT_A2B10G10R10_SSCALED_PACK32: c_int = 67;
pub const VK_FORMAT_A2B10G10R10_UINT_PACK32: c_int = 68;
pub const VK_FORMAT_A2B10G10R10_SINT_PACK32: c_int = 69;
pub const VK_FORMAT_R16_UNORM: c_int = 70;
pub const VK_FORMAT_R16_SNORM: c_int = 71;
pub const VK_FORMAT_R16_USCALED: c_int = 72;
pub const VK_FORMAT_R16_SSCALED: c_int = 73;
pub const VK_FORMAT_R16_UINT: c_int = 74;
pub const VK_FORMAT_R16_SINT: c_int = 75;
pub const VK_FORMAT_R16_SFLOAT: c_int = 76;
pub const VK_FORMAT_R16G16_UNORM: c_int = 77;
pub const VK_FORMAT_R16G16_SNORM: c_int = 78;
pub const VK_FORMAT_R16G16_USCALED: c_int = 79;
pub const VK_FORMAT_R16G16_SSCALED: c_int = 80;
pub const VK_FORMAT_R16G16_UINT: c_int = 81;
pub const VK_FORMAT_R16G16_SINT: c_int = 82;
pub const VK_FORMAT_R16G16_SFLOAT: c_int = 83;
pub const VK_FORMAT_R16G16B16_UNORM: c_int = 84;
pub const VK_FORMAT_R16G16B16_SNORM: c_int = 85;
pub const VK_FORMAT_R16G16B16_USCALED: c_int = 86;
pub const VK_FORMAT_R16G16B16_SSCALED: c_int = 87;
pub const VK_FORMAT_R16G16B16_UINT: c_int = 88;
pub const VK_FORMAT_R16G16B16_SINT: c_int = 89;
pub const VK_FORMAT_R16G16B16_SFLOAT: c_int = 90;
pub const VK_FORMAT_R16G16B16A16_UNORM: c_int = 91;
pub const VK_FORMAT_R16G16B16A16_SNORM: c_int = 92;
pub const VK_FORMAT_R16G16B16A16_USCALED: c_int = 93;
pub const VK_FORMAT_R16G16B16A16_SSCALED: c_int = 94;
pub const VK_FORMAT_R16G16B16A16_UINT: c_int = 95;
pub const VK_FORMAT_R16G16B16A16_SINT: c_int = 96;
pub const VK_FORMAT_R16G16B16A16_SFLOAT: c_int = 97;
pub const VK_FORMAT_R32_UINT: c_int = 98;
pub const VK_FORMAT_R32_SINT: c_int = 99;
pub const VK_FORMAT_R32_SFLOAT: c_int = 100;
pub const VK_FORMAT_R32G32_UINT: c_int = 101;
pub const VK_FORMAT_R32G32_SINT: c_int = 102;
pub const VK_FORMAT_R32G32_SFLOAT: c_int = 103;
pub const VK_FORMAT_R32G32B32_UINT: c_int = 104;
pub const VK_FORMAT_R32G32B32_SINT: c_int = 105;
pub const VK_FORMAT_R32G32B32_SFLOAT: c_int = 106;
pub const VK_FORMAT_R32G32B32A32_UINT: c_int = 107;
pub const VK_FORMAT_R32G32B32A32_SINT: c_int = 108;
pub const VK_FORMAT_R32G32B32A32_SFLOAT: c_int = 109;
pub const VK_FORMAT_R64_UINT: c_int = 110;
pub const VK_FORMAT_R64_SINT: c_int = 111;
pub const VK_FORMAT_R64_SFLOAT: c_int = 112;
pub const VK_FORMAT_R64G64_UINT: c_int = 113;
pub const VK_FORMAT_R64G64_SINT: c_int = 114;
pub const VK_FORMAT_R64G64_SFLOAT: c_int = 115;
pub const VK_FORMAT_R64G64B64_UINT: c_int = 116;
pub const VK_FORMAT_R64G64B64_SINT: c_int = 117;
pub const VK_FORMAT_R64G64B64_SFLOAT: c_int = 118;
pub const VK_FORMAT_R64G64B64A64_UINT: c_int = 119;
pub const VK_FORMAT_R64G64B64A64_SINT: c_int = 120;
pub const VK_FORMAT_R64G64B64A64_SFLOAT: c_int = 121;
pub const VK_FORMAT_B10G11R11_UFLOAT_PACK32: c_int = 122;
pub const VK_FORMAT_E5B9G9R9_UFLOAT_PACK32: c_int = 123;
pub const VK_FORMAT_D16_UNORM: c_int = 124;
pub const VK_FORMAT_X8_D24_UNORM_PACK32: c_int = 125;
pub const VK_FORMAT_D32_SFLOAT: c_int = 126;
pub const VK_FORMAT_S8_UINT: c_int = 127;
pub const VK_FORMAT_D16_UNORM_S8_UINT: c_int = 128;
pub const VK_FORMAT_D24_UNORM_S8_UINT: c_int = 129;
pub const VK_FORMAT_D32_SFLOAT_S8_UINT: c_int = 130;
pub const VK_FORMAT_BC1_RGB_UNORM_BLOCK: c_int = 131;
pub const VK_FORMAT_BC1_RGB_SRGB_BLOCK: c_int = 132;
pub const VK_FORMAT_BC1_RGBA_UNORM_BLOCK: c_int = 133;
pub const VK_FORMAT_BC1_RGBA_SRGB_BLOCK: c_int = 134;
pub const VK_FORMAT_BC2_UNORM_BLOCK: c_int = 135;
pub const VK_FORMAT_BC2_SRGB_BLOCK: c_int = 136;
pub const VK_FORMAT_BC3_UNORM_BLOCK: c_int = 137;
pub const VK_FORMAT_BC3_SRGB_BLOCK: c_int = 138;
pub const VK_FORMAT_BC4_UNORM_BLOCK: c_int = 139;
pub const VK_FORMAT_BC4_SNORM_BLOCK: c_int = 140;
pub const VK_FORMAT_BC5_UNORM_BLOCK: c_int = 141;
pub const VK_FORMAT_BC5_SNORM_BLOCK: c_int = 142;
pub const VK_FORMAT_BC6H_UFLOAT_BLOCK: c_int = 143;
pub const VK_FORMAT_BC6H_SFLOAT_BLOCK: c_int = 144;
pub const VK_FORMAT_BC7_UNORM_BLOCK: c_int = 145;
pub const VK_FORMAT_BC7_SRGB_BLOCK: c_int = 146;
pub const VK_FORMAT_ETC2_R8G8B8_UNORM_BLOCK: c_int = 147;
pub const VK_FORMAT_ETC2_R8G8B8_SRGB_BLOCK: c_int = 148;
pub const VK_FORMAT_ETC2_R8G8B8A1_UNORM_BLOCK: c_int = 149;
pub const VK_FORMAT_ETC2_R8G8B8A1_SRGB_BLOCK: c_int = 150;
pub const VK_FORMAT_ETC2_R8G8B8A8_UNORM_BLOCK: c_int = 151;
pub const VK_FORMAT_ETC2_R8G8B8A8_SRGB_BLOCK: c_int = 152;
pub const VK_FORMAT_EAC_R11_UNORM_BLOCK: c_int = 153;
pub const VK_FORMAT_EAC_R11_SNORM_BLOCK: c_int = 154;
pub const VK_FORMAT_EAC_R11G11_UNORM_BLOCK: c_int = 155;
pub const VK_FORMAT_EAC_R11G11_SNORM_BLOCK: c_int = 156;
pub const VK_FORMAT_ASTC_4x4_UNORM_BLOCK: c_int = 157;
pub const VK_FORMAT_ASTC_4x4_SRGB_BLOCK: c_int = 158;
pub const VK_FORMAT_ASTC_5x4_UNORM_BLOCK: c_int = 159;
pub const VK_FORMAT_ASTC_5x4_SRGB_BLOCK: c_int = 160;
pub const VK_FORMAT_ASTC_5x5_UNORM_BLOCK: c_int = 161;
pub const VK_FORMAT_ASTC_5x5_SRGB_BLOCK: c_int = 162;
pub const VK_FORMAT_ASTC_6x5_UNORM_BLOCK: c_int = 163;
pub const VK_FORMAT_ASTC_6x5_SRGB_BLOCK: c_int = 164;
pub const VK_FORMAT_ASTC_6x6_UNORM_BLOCK: c_int = 165;
pub const VK_FORMAT_ASTC_6x6_SRGB_BLOCK: c_int = 166;
pub const VK_FORMAT_ASTC_8x5_UNORM_BLOCK: c_int = 167;
pub const VK_FORMAT_ASTC_8x5_SRGB_BLOCK: c_int = 168;
pub const VK_FORMAT_ASTC_8x6_UNORM_BLOCK: c_int = 169;
pub const VK_FORMAT_ASTC_8x6_SRGB_BLOCK: c_int = 170;
pub const VK_FORMAT_ASTC_8x8_UNORM_BLOCK: c_int = 171;
pub const VK_FORMAT_ASTC_8x8_SRGB_BLOCK: c_int = 172;
pub const VK_FORMAT_ASTC_10x5_UNORM_BLOCK: c_int = 173;
pub const VK_FORMAT_ASTC_10x5_SRGB_BLOCK: c_int = 174;
pub const VK_FORMAT_ASTC_10x6_UNORM_BLOCK: c_int = 175;
pub const VK_FORMAT_ASTC_10x6_SRGB_BLOCK: c_int = 176;
pub const VK_FORMAT_ASTC_10x8_UNORM_BLOCK: c_int = 177;
pub const VK_FORMAT_ASTC_10x8_SRGB_BLOCK: c_int = 178;
pub const VK_FORMAT_ASTC_10x10_UNORM_BLOCK: c_int = 179;
pub const VK_FORMAT_ASTC_10x10_SRGB_BLOCK: c_int = 180;
pub const VK_FORMAT_ASTC_12x10_UNORM_BLOCK: c_int = 181;
pub const VK_FORMAT_ASTC_12x10_SRGB_BLOCK: c_int = 182;
pub const VK_FORMAT_ASTC_12x12_UNORM_BLOCK: c_int = 183;
pub const VK_FORMAT_ASTC_12x12_SRGB_BLOCK: c_int = 184;
pub const VK_FORMAT_G8B8G8R8_422_UNORM: c_int = 1000156000;
pub const VK_FORMAT_B8G8R8G8_422_UNORM: c_int = 1000156001;
pub const VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM: c_int = 1000156002;
pub const VK_FORMAT_G8_B8R8_2PLANE_420_UNORM: c_int = 1000156003;
pub const VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM: c_int = 1000156004;
pub const VK_FORMAT_G8_B8R8_2PLANE_422_UNORM: c_int = 1000156005;
pub const VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM: c_int = 1000156006;
pub const VK_FORMAT_R10X6_UNORM_PACK16: c_int = 1000156007;
pub const VK_FORMAT_R10X6G10X6_UNORM_2PACK16: c_int = 1000156008;
pub const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16: c_int = 1000156009;
pub const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16: c_int = 1000156010;
pub const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16: c_int = 1000156011;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16: c_int = 1000156012;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16: c_int = 1000156013;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16: c_int = 1000156014;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16: c_int = 1000156015;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16: c_int = 1000156016;
pub const VK_FORMAT_R12X4_UNORM_PACK16: c_int = 1000156017;
pub const VK_FORMAT_R12X4G12X4_UNORM_2PACK16: c_int = 1000156018;
pub const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16: c_int = 1000156019;
pub const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16: c_int = 1000156020;
pub const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16: c_int = 1000156021;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16: c_int = 1000156022;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16: c_int = 1000156023;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16: c_int = 1000156024;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16: c_int = 1000156025;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16: c_int = 1000156026;
pub const VK_FORMAT_G16B16G16R16_422_UNORM: c_int = 1000156027;
pub const VK_FORMAT_B16G16R16G16_422_UNORM: c_int = 1000156028;
pub const VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM: c_int = 1000156029;
pub const VK_FORMAT_G16_B16R16_2PLANE_420_UNORM: c_int = 1000156030;
pub const VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM: c_int = 1000156031;
pub const VK_FORMAT_G16_B16R16_2PLANE_422_UNORM: c_int = 1000156032;
pub const VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM: c_int = 1000156033;
pub const VK_FORMAT_G8_B8R8_2PLANE_444_UNORM: c_int = 1000330000;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16: c_int = 1000330001;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16: c_int = 1000330002;
pub const VK_FORMAT_G16_B16R16_2PLANE_444_UNORM: c_int = 1000330003;
pub const VK_FORMAT_A4R4G4B4_UNORM_PACK16: c_int = 1000340000;
pub const VK_FORMAT_A4B4G4R4_UNORM_PACK16: c_int = 1000340001;
pub const VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK: c_int = 1000066000;
pub const VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK: c_int = 1000066001;
pub const VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK: c_int = 1000066002;
pub const VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK: c_int = 1000066003;
pub const VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK: c_int = 1000066004;
pub const VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK: c_int = 1000066005;
pub const VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK: c_int = 1000066006;
pub const VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK: c_int = 1000066007;
pub const VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK: c_int = 1000066008;
pub const VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK: c_int = 1000066009;
pub const VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK: c_int = 1000066010;
pub const VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK: c_int = 1000066011;
pub const VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK: c_int = 1000066012;
pub const VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK: c_int = 1000066013;
pub const VK_FORMAT_PVRTC1_2BPP_UNORM_BLOCK_IMG: c_int = 1000054000;
pub const VK_FORMAT_PVRTC1_4BPP_UNORM_BLOCK_IMG: c_int = 1000054001;
pub const VK_FORMAT_PVRTC2_2BPP_UNORM_BLOCK_IMG: c_int = 1000054002;
pub const VK_FORMAT_PVRTC2_4BPP_UNORM_BLOCK_IMG: c_int = 1000054003;
pub const VK_FORMAT_PVRTC1_2BPP_SRGB_BLOCK_IMG: c_int = 1000054004;
pub const VK_FORMAT_PVRTC1_4BPP_SRGB_BLOCK_IMG: c_int = 1000054005;
pub const VK_FORMAT_PVRTC2_2BPP_SRGB_BLOCK_IMG: c_int = 1000054006;
pub const VK_FORMAT_PVRTC2_4BPP_SRGB_BLOCK_IMG: c_int = 1000054007;
pub const VK_FORMAT_ASTC_4x4_SFLOAT_BLOCK_EXT: c_int = 1000066000;
pub const VK_FORMAT_ASTC_5x4_SFLOAT_BLOCK_EXT: c_int = 1000066001;
pub const VK_FORMAT_ASTC_5x5_SFLOAT_BLOCK_EXT: c_int = 1000066002;
pub const VK_FORMAT_ASTC_6x5_SFLOAT_BLOCK_EXT: c_int = 1000066003;
pub const VK_FORMAT_ASTC_6x6_SFLOAT_BLOCK_EXT: c_int = 1000066004;
pub const VK_FORMAT_ASTC_8x5_SFLOAT_BLOCK_EXT: c_int = 1000066005;
pub const VK_FORMAT_ASTC_8x6_SFLOAT_BLOCK_EXT: c_int = 1000066006;
pub const VK_FORMAT_ASTC_8x8_SFLOAT_BLOCK_EXT: c_int = 1000066007;
pub const VK_FORMAT_ASTC_10x5_SFLOAT_BLOCK_EXT: c_int = 1000066008;
pub const VK_FORMAT_ASTC_10x6_SFLOAT_BLOCK_EXT: c_int = 1000066009;
pub const VK_FORMAT_ASTC_10x8_SFLOAT_BLOCK_EXT: c_int = 1000066010;
pub const VK_FORMAT_ASTC_10x10_SFLOAT_BLOCK_EXT: c_int = 1000066011;
pub const VK_FORMAT_ASTC_12x10_SFLOAT_BLOCK_EXT: c_int = 1000066012;
pub const VK_FORMAT_ASTC_12x12_SFLOAT_BLOCK_EXT: c_int = 1000066013;
pub const VK_FORMAT_G8B8G8R8_422_UNORM_KHR: c_int = 1000156000;
pub const VK_FORMAT_B8G8R8G8_422_UNORM_KHR: c_int = 1000156001;
pub const VK_FORMAT_G8_B8_R8_3PLANE_420_UNORM_KHR: c_int = 1000156002;
pub const VK_FORMAT_G8_B8R8_2PLANE_420_UNORM_KHR: c_int = 1000156003;
pub const VK_FORMAT_G8_B8_R8_3PLANE_422_UNORM_KHR: c_int = 1000156004;
pub const VK_FORMAT_G8_B8R8_2PLANE_422_UNORM_KHR: c_int = 1000156005;
pub const VK_FORMAT_G8_B8_R8_3PLANE_444_UNORM_KHR: c_int = 1000156006;
pub const VK_FORMAT_R10X6_UNORM_PACK16_KHR: c_int = 1000156007;
pub const VK_FORMAT_R10X6G10X6_UNORM_2PACK16_KHR: c_int = 1000156008;
pub const VK_FORMAT_R10X6G10X6B10X6A10X6_UNORM_4PACK16_KHR: c_int = 1000156009;
pub const VK_FORMAT_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16_KHR: c_int = 1000156010;
pub const VK_FORMAT_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16_KHR: c_int = 1000156011;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16_KHR: c_int = 1000156012;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16_KHR: c_int = 1000156013;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16_KHR: c_int = 1000156014;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16_KHR: c_int = 1000156015;
pub const VK_FORMAT_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16_KHR: c_int = 1000156016;
pub const VK_FORMAT_R12X4_UNORM_PACK16_KHR: c_int = 1000156017;
pub const VK_FORMAT_R12X4G12X4_UNORM_2PACK16_KHR: c_int = 1000156018;
pub const VK_FORMAT_R12X4G12X4B12X4A12X4_UNORM_4PACK16_KHR: c_int = 1000156019;
pub const VK_FORMAT_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16_KHR: c_int = 1000156020;
pub const VK_FORMAT_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16_KHR: c_int = 1000156021;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16_KHR: c_int = 1000156022;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16_KHR: c_int = 1000156023;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16_KHR: c_int = 1000156024;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16_KHR: c_int = 1000156025;
pub const VK_FORMAT_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16_KHR: c_int = 1000156026;
pub const VK_FORMAT_G16B16G16R16_422_UNORM_KHR: c_int = 1000156027;
pub const VK_FORMAT_B16G16R16G16_422_UNORM_KHR: c_int = 1000156028;
pub const VK_FORMAT_G16_B16_R16_3PLANE_420_UNORM_KHR: c_int = 1000156029;
pub const VK_FORMAT_G16_B16R16_2PLANE_420_UNORM_KHR: c_int = 1000156030;
pub const VK_FORMAT_G16_B16_R16_3PLANE_422_UNORM_KHR: c_int = 1000156031;
pub const VK_FORMAT_G16_B16R16_2PLANE_422_UNORM_KHR: c_int = 1000156032;
pub const VK_FORMAT_G16_B16_R16_3PLANE_444_UNORM_KHR: c_int = 1000156033;
pub const VK_FORMAT_G8_B8R8_2PLANE_444_UNORM_EXT: c_int = 1000330000;
pub const VK_FORMAT_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16_EXT: c_int = 1000330001;
pub const VK_FORMAT_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16_EXT: c_int = 1000330002;
pub const VK_FORMAT_G16_B16R16_2PLANE_444_UNORM_EXT: c_int = 1000330003;
pub const VK_FORMAT_A4R4G4B4_UNORM_PACK16_EXT: c_int = 1000340000;
pub const VK_FORMAT_A4B4G4R4_UNORM_PACK16_EXT: c_int = 1000340001;
pub const VK_FORMAT_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFormat = c_uint;
pub const VkFormat = enum_VkFormat;
pub const VK_IMAGE_TILING_OPTIMAL: c_int = 0;
pub const VK_IMAGE_TILING_LINEAR: c_int = 1;
pub const VK_IMAGE_TILING_DRM_FORMAT_MODIFIER_EXT: c_int = 1000158000;
pub const VK_IMAGE_TILING_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageTiling = c_uint;
pub const VkImageTiling = enum_VkImageTiling;
pub const VK_IMAGE_TYPE_1D: c_int = 0;
pub const VK_IMAGE_TYPE_2D: c_int = 1;
pub const VK_IMAGE_TYPE_3D: c_int = 2;
pub const VK_IMAGE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageType = c_uint;
pub const VkImageType = enum_VkImageType;
pub const VK_PHYSICAL_DEVICE_TYPE_OTHER: c_int = 0;
pub const VK_PHYSICAL_DEVICE_TYPE_INTEGRATED_GPU: c_int = 1;
pub const VK_PHYSICAL_DEVICE_TYPE_DISCRETE_GPU: c_int = 2;
pub const VK_PHYSICAL_DEVICE_TYPE_VIRTUAL_GPU: c_int = 3;
pub const VK_PHYSICAL_DEVICE_TYPE_CPU: c_int = 4;
pub const VK_PHYSICAL_DEVICE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPhysicalDeviceType = c_uint;
pub const VkPhysicalDeviceType = enum_VkPhysicalDeviceType;
pub const VK_QUERY_TYPE_OCCLUSION: c_int = 0;
pub const VK_QUERY_TYPE_PIPELINE_STATISTICS: c_int = 1;
pub const VK_QUERY_TYPE_TIMESTAMP: c_int = 2;
pub const VK_QUERY_TYPE_TRANSFORM_FEEDBACK_STREAM_EXT: c_int = 1000028004;
pub const VK_QUERY_TYPE_PERFORMANCE_QUERY_KHR: c_int = 1000116000;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_KHR: c_int = 1000150000;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_SIZE_KHR: c_int = 1000150001;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_COMPACTED_SIZE_NV: c_int = 1000165000;
pub const VK_QUERY_TYPE_PERFORMANCE_QUERY_INTEL: c_int = 1000210000;
pub const VK_QUERY_TYPE_PRIMITIVES_GENERATED_EXT: c_int = 1000382000;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SERIALIZATION_BOTTOM_LEVEL_POINTERS_KHR: c_int = 1000386000;
pub const VK_QUERY_TYPE_ACCELERATION_STRUCTURE_SIZE_KHR: c_int = 1000386001;
pub const VK_QUERY_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueryType = c_uint;
pub const VkQueryType = enum_VkQueryType;
pub const VK_SHARING_MODE_EXCLUSIVE: c_int = 0;
pub const VK_SHARING_MODE_CONCURRENT: c_int = 1;
pub const VK_SHARING_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSharingMode = c_uint;
pub const VkSharingMode = enum_VkSharingMode;
pub const VK_COMPONENT_SWIZZLE_IDENTITY: c_int = 0;
pub const VK_COMPONENT_SWIZZLE_ZERO: c_int = 1;
pub const VK_COMPONENT_SWIZZLE_ONE: c_int = 2;
pub const VK_COMPONENT_SWIZZLE_R: c_int = 3;
pub const VK_COMPONENT_SWIZZLE_G: c_int = 4;
pub const VK_COMPONENT_SWIZZLE_B: c_int = 5;
pub const VK_COMPONENT_SWIZZLE_A: c_int = 6;
pub const VK_COMPONENT_SWIZZLE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkComponentSwizzle = c_uint;
pub const VkComponentSwizzle = enum_VkComponentSwizzle;
pub const VK_IMAGE_VIEW_TYPE_1D: c_int = 0;
pub const VK_IMAGE_VIEW_TYPE_2D: c_int = 1;
pub const VK_IMAGE_VIEW_TYPE_3D: c_int = 2;
pub const VK_IMAGE_VIEW_TYPE_CUBE: c_int = 3;
pub const VK_IMAGE_VIEW_TYPE_1D_ARRAY: c_int = 4;
pub const VK_IMAGE_VIEW_TYPE_2D_ARRAY: c_int = 5;
pub const VK_IMAGE_VIEW_TYPE_CUBE_ARRAY: c_int = 6;
pub const VK_IMAGE_VIEW_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageViewType = c_uint;
pub const VkImageViewType = enum_VkImageViewType;
pub const VK_BLEND_FACTOR_ZERO: c_int = 0;
pub const VK_BLEND_FACTOR_ONE: c_int = 1;
pub const VK_BLEND_FACTOR_SRC_COLOR: c_int = 2;
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC_COLOR: c_int = 3;
pub const VK_BLEND_FACTOR_DST_COLOR: c_int = 4;
pub const VK_BLEND_FACTOR_ONE_MINUS_DST_COLOR: c_int = 5;
pub const VK_BLEND_FACTOR_SRC_ALPHA: c_int = 6;
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC_ALPHA: c_int = 7;
pub const VK_BLEND_FACTOR_DST_ALPHA: c_int = 8;
pub const VK_BLEND_FACTOR_ONE_MINUS_DST_ALPHA: c_int = 9;
pub const VK_BLEND_FACTOR_CONSTANT_COLOR: c_int = 10;
pub const VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_COLOR: c_int = 11;
pub const VK_BLEND_FACTOR_CONSTANT_ALPHA: c_int = 12;
pub const VK_BLEND_FACTOR_ONE_MINUS_CONSTANT_ALPHA: c_int = 13;
pub const VK_BLEND_FACTOR_SRC_ALPHA_SATURATE: c_int = 14;
pub const VK_BLEND_FACTOR_SRC1_COLOR: c_int = 15;
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC1_COLOR: c_int = 16;
pub const VK_BLEND_FACTOR_SRC1_ALPHA: c_int = 17;
pub const VK_BLEND_FACTOR_ONE_MINUS_SRC1_ALPHA: c_int = 18;
pub const VK_BLEND_FACTOR_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBlendFactor = c_uint;
pub const VkBlendFactor = enum_VkBlendFactor;
pub const VK_BLEND_OP_ADD: c_int = 0;
pub const VK_BLEND_OP_SUBTRACT: c_int = 1;
pub const VK_BLEND_OP_REVERSE_SUBTRACT: c_int = 2;
pub const VK_BLEND_OP_MIN: c_int = 3;
pub const VK_BLEND_OP_MAX: c_int = 4;
pub const VK_BLEND_OP_ZERO_EXT: c_int = 1000148000;
pub const VK_BLEND_OP_SRC_EXT: c_int = 1000148001;
pub const VK_BLEND_OP_DST_EXT: c_int = 1000148002;
pub const VK_BLEND_OP_SRC_OVER_EXT: c_int = 1000148003;
pub const VK_BLEND_OP_DST_OVER_EXT: c_int = 1000148004;
pub const VK_BLEND_OP_SRC_IN_EXT: c_int = 1000148005;
pub const VK_BLEND_OP_DST_IN_EXT: c_int = 1000148006;
pub const VK_BLEND_OP_SRC_OUT_EXT: c_int = 1000148007;
pub const VK_BLEND_OP_DST_OUT_EXT: c_int = 1000148008;
pub const VK_BLEND_OP_SRC_ATOP_EXT: c_int = 1000148009;
pub const VK_BLEND_OP_DST_ATOP_EXT: c_int = 1000148010;
pub const VK_BLEND_OP_XOR_EXT: c_int = 1000148011;
pub const VK_BLEND_OP_MULTIPLY_EXT: c_int = 1000148012;
pub const VK_BLEND_OP_SCREEN_EXT: c_int = 1000148013;
pub const VK_BLEND_OP_OVERLAY_EXT: c_int = 1000148014;
pub const VK_BLEND_OP_DARKEN_EXT: c_int = 1000148015;
pub const VK_BLEND_OP_LIGHTEN_EXT: c_int = 1000148016;
pub const VK_BLEND_OP_COLORDODGE_EXT: c_int = 1000148017;
pub const VK_BLEND_OP_COLORBURN_EXT: c_int = 1000148018;
pub const VK_BLEND_OP_HARDLIGHT_EXT: c_int = 1000148019;
pub const VK_BLEND_OP_SOFTLIGHT_EXT: c_int = 1000148020;
pub const VK_BLEND_OP_DIFFERENCE_EXT: c_int = 1000148021;
pub const VK_BLEND_OP_EXCLUSION_EXT: c_int = 1000148022;
pub const VK_BLEND_OP_INVERT_EXT: c_int = 1000148023;
pub const VK_BLEND_OP_INVERT_RGB_EXT: c_int = 1000148024;
pub const VK_BLEND_OP_LINEARDODGE_EXT: c_int = 1000148025;
pub const VK_BLEND_OP_LINEARBURN_EXT: c_int = 1000148026;
pub const VK_BLEND_OP_VIVIDLIGHT_EXT: c_int = 1000148027;
pub const VK_BLEND_OP_LINEARLIGHT_EXT: c_int = 1000148028;
pub const VK_BLEND_OP_PINLIGHT_EXT: c_int = 1000148029;
pub const VK_BLEND_OP_HARDMIX_EXT: c_int = 1000148030;
pub const VK_BLEND_OP_HSL_HUE_EXT: c_int = 1000148031;
pub const VK_BLEND_OP_HSL_SATURATION_EXT: c_int = 1000148032;
pub const VK_BLEND_OP_HSL_COLOR_EXT: c_int = 1000148033;
pub const VK_BLEND_OP_HSL_LUMINOSITY_EXT: c_int = 1000148034;
pub const VK_BLEND_OP_PLUS_EXT: c_int = 1000148035;
pub const VK_BLEND_OP_PLUS_CLAMPED_EXT: c_int = 1000148036;
pub const VK_BLEND_OP_PLUS_CLAMPED_ALPHA_EXT: c_int = 1000148037;
pub const VK_BLEND_OP_PLUS_DARKER_EXT: c_int = 1000148038;
pub const VK_BLEND_OP_MINUS_EXT: c_int = 1000148039;
pub const VK_BLEND_OP_MINUS_CLAMPED_EXT: c_int = 1000148040;
pub const VK_BLEND_OP_CONTRAST_EXT: c_int = 1000148041;
pub const VK_BLEND_OP_INVERT_OVG_EXT: c_int = 1000148042;
pub const VK_BLEND_OP_RED_EXT: c_int = 1000148043;
pub const VK_BLEND_OP_GREEN_EXT: c_int = 1000148044;
pub const VK_BLEND_OP_BLUE_EXT: c_int = 1000148045;
pub const VK_BLEND_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBlendOp = c_uint;
pub const VkBlendOp = enum_VkBlendOp;
pub const VK_COMPARE_OP_NEVER: c_int = 0;
pub const VK_COMPARE_OP_LESS: c_int = 1;
pub const VK_COMPARE_OP_EQUAL: c_int = 2;
pub const VK_COMPARE_OP_LESS_OR_EQUAL: c_int = 3;
pub const VK_COMPARE_OP_GREATER: c_int = 4;
pub const VK_COMPARE_OP_NOT_EQUAL: c_int = 5;
pub const VK_COMPARE_OP_GREATER_OR_EQUAL: c_int = 6;
pub const VK_COMPARE_OP_ALWAYS: c_int = 7;
pub const VK_COMPARE_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCompareOp = c_uint;
pub const VkCompareOp = enum_VkCompareOp;
pub const VK_DYNAMIC_STATE_VIEWPORT: c_int = 0;
pub const VK_DYNAMIC_STATE_SCISSOR: c_int = 1;
pub const VK_DYNAMIC_STATE_LINE_WIDTH: c_int = 2;
pub const VK_DYNAMIC_STATE_DEPTH_BIAS: c_int = 3;
pub const VK_DYNAMIC_STATE_BLEND_CONSTANTS: c_int = 4;
pub const VK_DYNAMIC_STATE_DEPTH_BOUNDS: c_int = 5;
pub const VK_DYNAMIC_STATE_STENCIL_COMPARE_MASK: c_int = 6;
pub const VK_DYNAMIC_STATE_STENCIL_WRITE_MASK: c_int = 7;
pub const VK_DYNAMIC_STATE_STENCIL_REFERENCE: c_int = 8;
pub const VK_DYNAMIC_STATE_CULL_MODE: c_int = 1000267000;
pub const VK_DYNAMIC_STATE_FRONT_FACE: c_int = 1000267001;
pub const VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY: c_int = 1000267002;
pub const VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT: c_int = 1000267003;
pub const VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT: c_int = 1000267004;
pub const VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE: c_int = 1000267005;
pub const VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE: c_int = 1000267006;
pub const VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE: c_int = 1000267007;
pub const VK_DYNAMIC_STATE_DEPTH_COMPARE_OP: c_int = 1000267008;
pub const VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE: c_int = 1000267009;
pub const VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE: c_int = 1000267010;
pub const VK_DYNAMIC_STATE_STENCIL_OP: c_int = 1000267011;
pub const VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE: c_int = 1000377001;
pub const VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE: c_int = 1000377002;
pub const VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE: c_int = 1000377004;
pub const VK_DYNAMIC_STATE_VIEWPORT_W_SCALING_NV: c_int = 1000087000;
pub const VK_DYNAMIC_STATE_DISCARD_RECTANGLE_EXT: c_int = 1000099000;
pub const VK_DYNAMIC_STATE_SAMPLE_LOCATIONS_EXT: c_int = 1000143000;
pub const VK_DYNAMIC_STATE_RAY_TRACING_PIPELINE_STACK_SIZE_KHR: c_int = 1000347000;
pub const VK_DYNAMIC_STATE_VIEWPORT_SHADING_RATE_PALETTE_NV: c_int = 1000164004;
pub const VK_DYNAMIC_STATE_VIEWPORT_COARSE_SAMPLE_ORDER_NV: c_int = 1000164006;
pub const VK_DYNAMIC_STATE_EXCLUSIVE_SCISSOR_NV: c_int = 1000205001;
pub const VK_DYNAMIC_STATE_FRAGMENT_SHADING_RATE_KHR: c_int = 1000226000;
pub const VK_DYNAMIC_STATE_LINE_STIPPLE_EXT: c_int = 1000259000;
pub const VK_DYNAMIC_STATE_VERTEX_INPUT_EXT: c_int = 1000352000;
pub const VK_DYNAMIC_STATE_PATCH_CONTROL_POINTS_EXT: c_int = 1000377000;
pub const VK_DYNAMIC_STATE_LOGIC_OP_EXT: c_int = 1000377003;
pub const VK_DYNAMIC_STATE_COLOR_WRITE_ENABLE_EXT: c_int = 1000381000;
pub const VK_DYNAMIC_STATE_CULL_MODE_EXT: c_int = 1000267000;
pub const VK_DYNAMIC_STATE_FRONT_FACE_EXT: c_int = 1000267001;
pub const VK_DYNAMIC_STATE_PRIMITIVE_TOPOLOGY_EXT: c_int = 1000267002;
pub const VK_DYNAMIC_STATE_VIEWPORT_WITH_COUNT_EXT: c_int = 1000267003;
pub const VK_DYNAMIC_STATE_SCISSOR_WITH_COUNT_EXT: c_int = 1000267004;
pub const VK_DYNAMIC_STATE_VERTEX_INPUT_BINDING_STRIDE_EXT: c_int = 1000267005;
pub const VK_DYNAMIC_STATE_DEPTH_TEST_ENABLE_EXT: c_int = 1000267006;
pub const VK_DYNAMIC_STATE_DEPTH_WRITE_ENABLE_EXT: c_int = 1000267007;
pub const VK_DYNAMIC_STATE_DEPTH_COMPARE_OP_EXT: c_int = 1000267008;
pub const VK_DYNAMIC_STATE_DEPTH_BOUNDS_TEST_ENABLE_EXT: c_int = 1000267009;
pub const VK_DYNAMIC_STATE_STENCIL_TEST_ENABLE_EXT: c_int = 1000267010;
pub const VK_DYNAMIC_STATE_STENCIL_OP_EXT: c_int = 1000267011;
pub const VK_DYNAMIC_STATE_RASTERIZER_DISCARD_ENABLE_EXT: c_int = 1000377001;
pub const VK_DYNAMIC_STATE_DEPTH_BIAS_ENABLE_EXT: c_int = 1000377002;
pub const VK_DYNAMIC_STATE_PRIMITIVE_RESTART_ENABLE_EXT: c_int = 1000377004;
pub const VK_DYNAMIC_STATE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDynamicState = c_uint;
pub const VkDynamicState = enum_VkDynamicState;
pub const VK_FRONT_FACE_COUNTER_CLOCKWISE: c_int = 0;
pub const VK_FRONT_FACE_CLOCKWISE: c_int = 1;
pub const VK_FRONT_FACE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFrontFace = c_uint;
pub const VkFrontFace = enum_VkFrontFace;
pub const VK_VERTEX_INPUT_RATE_VERTEX: c_int = 0;
pub const VK_VERTEX_INPUT_RATE_INSTANCE: c_int = 1;
pub const VK_VERTEX_INPUT_RATE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkVertexInputRate = c_uint;
pub const VkVertexInputRate = enum_VkVertexInputRate;
pub const VK_PRIMITIVE_TOPOLOGY_POINT_LIST: c_int = 0;
pub const VK_PRIMITIVE_TOPOLOGY_LINE_LIST: c_int = 1;
pub const VK_PRIMITIVE_TOPOLOGY_LINE_STRIP: c_int = 2;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST: c_int = 3;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP: c_int = 4;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_FAN: c_int = 5;
pub const VK_PRIMITIVE_TOPOLOGY_LINE_LIST_WITH_ADJACENCY: c_int = 6;
pub const VK_PRIMITIVE_TOPOLOGY_LINE_STRIP_WITH_ADJACENCY: c_int = 7;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_LIST_WITH_ADJACENCY: c_int = 8;
pub const VK_PRIMITIVE_TOPOLOGY_TRIANGLE_STRIP_WITH_ADJACENCY: c_int = 9;
pub const VK_PRIMITIVE_TOPOLOGY_PATCH_LIST: c_int = 10;
pub const VK_PRIMITIVE_TOPOLOGY_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPrimitiveTopology = c_uint;
pub const VkPrimitiveTopology = enum_VkPrimitiveTopology;
pub const VK_POLYGON_MODE_FILL: c_int = 0;
pub const VK_POLYGON_MODE_LINE: c_int = 1;
pub const VK_POLYGON_MODE_POINT: c_int = 2;
pub const VK_POLYGON_MODE_FILL_RECTANGLE_NV: c_int = 1000153000;
pub const VK_POLYGON_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPolygonMode = c_uint;
pub const VkPolygonMode = enum_VkPolygonMode;
pub const VK_STENCIL_OP_KEEP: c_int = 0;
pub const VK_STENCIL_OP_ZERO: c_int = 1;
pub const VK_STENCIL_OP_REPLACE: c_int = 2;
pub const VK_STENCIL_OP_INCREMENT_AND_CLAMP: c_int = 3;
pub const VK_STENCIL_OP_DECREMENT_AND_CLAMP: c_int = 4;
pub const VK_STENCIL_OP_INVERT: c_int = 5;
pub const VK_STENCIL_OP_INCREMENT_AND_WRAP: c_int = 6;
pub const VK_STENCIL_OP_DECREMENT_AND_WRAP: c_int = 7;
pub const VK_STENCIL_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkStencilOp = c_uint;
pub const VkStencilOp = enum_VkStencilOp;
pub const VK_LOGIC_OP_CLEAR: c_int = 0;
pub const VK_LOGIC_OP_AND: c_int = 1;
pub const VK_LOGIC_OP_AND_REVERSE: c_int = 2;
pub const VK_LOGIC_OP_COPY: c_int = 3;
pub const VK_LOGIC_OP_AND_INVERTED: c_int = 4;
pub const VK_LOGIC_OP_NO_OP: c_int = 5;
pub const VK_LOGIC_OP_XOR: c_int = 6;
pub const VK_LOGIC_OP_OR: c_int = 7;
pub const VK_LOGIC_OP_NOR: c_int = 8;
pub const VK_LOGIC_OP_EQUIVALENT: c_int = 9;
pub const VK_LOGIC_OP_INVERT: c_int = 10;
pub const VK_LOGIC_OP_OR_REVERSE: c_int = 11;
pub const VK_LOGIC_OP_COPY_INVERTED: c_int = 12;
pub const VK_LOGIC_OP_OR_INVERTED: c_int = 13;
pub const VK_LOGIC_OP_NAND: c_int = 14;
pub const VK_LOGIC_OP_SET: c_int = 15;
pub const VK_LOGIC_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkLogicOp = c_uint;
pub const VkLogicOp = enum_VkLogicOp;
pub const VK_BORDER_COLOR_FLOAT_TRANSPARENT_BLACK: c_int = 0;
pub const VK_BORDER_COLOR_INT_TRANSPARENT_BLACK: c_int = 1;
pub const VK_BORDER_COLOR_FLOAT_OPAQUE_BLACK: c_int = 2;
pub const VK_BORDER_COLOR_INT_OPAQUE_BLACK: c_int = 3;
pub const VK_BORDER_COLOR_FLOAT_OPAQUE_WHITE: c_int = 4;
pub const VK_BORDER_COLOR_INT_OPAQUE_WHITE: c_int = 5;
pub const VK_BORDER_COLOR_FLOAT_CUSTOM_EXT: c_int = 1000287003;
pub const VK_BORDER_COLOR_INT_CUSTOM_EXT: c_int = 1000287004;
pub const VK_BORDER_COLOR_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBorderColor = c_uint;
pub const VkBorderColor = enum_VkBorderColor;
pub const VK_FILTER_NEAREST: c_int = 0;
pub const VK_FILTER_LINEAR: c_int = 1;
pub const VK_FILTER_CUBIC_EXT: c_int = 1000015000;
pub const VK_FILTER_CUBIC_IMG: c_int = 1000015000;
pub const VK_FILTER_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFilter = c_uint;
pub const VkFilter = enum_VkFilter;
pub const VK_SAMPLER_ADDRESS_MODE_REPEAT: c_int = 0;
pub const VK_SAMPLER_ADDRESS_MODE_MIRRORED_REPEAT: c_int = 1;
pub const VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_EDGE: c_int = 2;
pub const VK_SAMPLER_ADDRESS_MODE_CLAMP_TO_BORDER: c_int = 3;
pub const VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE: c_int = 4;
pub const VK_SAMPLER_ADDRESS_MODE_MIRROR_CLAMP_TO_EDGE_KHR: c_int = 4;
pub const VK_SAMPLER_ADDRESS_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerAddressMode = c_uint;
pub const VkSamplerAddressMode = enum_VkSamplerAddressMode;
pub const VK_SAMPLER_MIPMAP_MODE_NEAREST: c_int = 0;
pub const VK_SAMPLER_MIPMAP_MODE_LINEAR: c_int = 1;
pub const VK_SAMPLER_MIPMAP_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerMipmapMode = c_uint;
pub const VkSamplerMipmapMode = enum_VkSamplerMipmapMode;
pub const VK_DESCRIPTOR_TYPE_SAMPLER: c_int = 0;
pub const VK_DESCRIPTOR_TYPE_COMBINED_IMAGE_SAMPLER: c_int = 1;
pub const VK_DESCRIPTOR_TYPE_SAMPLED_IMAGE: c_int = 2;
pub const VK_DESCRIPTOR_TYPE_STORAGE_IMAGE: c_int = 3;
pub const VK_DESCRIPTOR_TYPE_UNIFORM_TEXEL_BUFFER: c_int = 4;
pub const VK_DESCRIPTOR_TYPE_STORAGE_TEXEL_BUFFER: c_int = 5;
pub const VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER: c_int = 6;
pub const VK_DESCRIPTOR_TYPE_STORAGE_BUFFER: c_int = 7;
pub const VK_DESCRIPTOR_TYPE_UNIFORM_BUFFER_DYNAMIC: c_int = 8;
pub const VK_DESCRIPTOR_TYPE_STORAGE_BUFFER_DYNAMIC: c_int = 9;
pub const VK_DESCRIPTOR_TYPE_INPUT_ATTACHMENT: c_int = 10;
pub const VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK: c_int = 1000138000;
pub const VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_KHR: c_int = 1000150000;
pub const VK_DESCRIPTOR_TYPE_ACCELERATION_STRUCTURE_NV: c_int = 1000165000;
pub const VK_DESCRIPTOR_TYPE_MUTABLE_VALVE: c_int = 1000351000;
pub const VK_DESCRIPTOR_TYPE_SAMPLE_WEIGHT_IMAGE_QCOM: c_int = 1000440000;
pub const VK_DESCRIPTOR_TYPE_BLOCK_MATCH_IMAGE_QCOM: c_int = 1000440001;
pub const VK_DESCRIPTOR_TYPE_INLINE_UNIFORM_BLOCK_EXT: c_int = 1000138000;
pub const VK_DESCRIPTOR_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorType = c_uint;
pub const VkDescriptorType = enum_VkDescriptorType;
pub const VK_ATTACHMENT_LOAD_OP_LOAD: c_int = 0;
pub const VK_ATTACHMENT_LOAD_OP_CLEAR: c_int = 1;
pub const VK_ATTACHMENT_LOAD_OP_DONT_CARE: c_int = 2;
pub const VK_ATTACHMENT_LOAD_OP_NONE_EXT: c_int = 1000400000;
pub const VK_ATTACHMENT_LOAD_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkAttachmentLoadOp = c_uint;
pub const VkAttachmentLoadOp = enum_VkAttachmentLoadOp;
pub const VK_ATTACHMENT_STORE_OP_STORE: c_int = 0;
pub const VK_ATTACHMENT_STORE_OP_DONT_CARE: c_int = 1;
pub const VK_ATTACHMENT_STORE_OP_NONE: c_int = 1000301000;
pub const VK_ATTACHMENT_STORE_OP_NONE_KHR: c_int = 1000301000;
pub const VK_ATTACHMENT_STORE_OP_NONE_QCOM: c_int = 1000301000;
pub const VK_ATTACHMENT_STORE_OP_NONE_EXT: c_int = 1000301000;
pub const VK_ATTACHMENT_STORE_OP_MAX_ENUM: c_int = 2147483647;
pub const enum_VkAttachmentStoreOp = c_uint;
pub const VkAttachmentStoreOp = enum_VkAttachmentStoreOp;
pub const VK_PIPELINE_BIND_POINT_GRAPHICS: c_int = 0;
pub const VK_PIPELINE_BIND_POINT_COMPUTE: c_int = 1;
pub const VK_PIPELINE_BIND_POINT_RAY_TRACING_KHR: c_int = 1000165000;
pub const VK_PIPELINE_BIND_POINT_SUBPASS_SHADING_HUAWEI: c_int = 1000369003;
pub const VK_PIPELINE_BIND_POINT_RAY_TRACING_NV: c_int = 1000165000;
pub const VK_PIPELINE_BIND_POINT_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineBindPoint = c_uint;
pub const VkPipelineBindPoint = enum_VkPipelineBindPoint;
pub const VK_COMMAND_BUFFER_LEVEL_PRIMARY: c_int = 0;
pub const VK_COMMAND_BUFFER_LEVEL_SECONDARY: c_int = 1;
pub const VK_COMMAND_BUFFER_LEVEL_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandBufferLevel = c_uint;
pub const VkCommandBufferLevel = enum_VkCommandBufferLevel;
pub const VK_INDEX_TYPE_UINT16: c_int = 0;
pub const VK_INDEX_TYPE_UINT32: c_int = 1;
pub const VK_INDEX_TYPE_NONE_KHR: c_int = 1000165000;
pub const VK_INDEX_TYPE_UINT8_EXT: c_int = 1000265000;
pub const VK_INDEX_TYPE_NONE_NV: c_int = 1000165000;
pub const VK_INDEX_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkIndexType = c_uint;
pub const VkIndexType = enum_VkIndexType;
pub const VK_SUBPASS_CONTENTS_INLINE: c_int = 0;
pub const VK_SUBPASS_CONTENTS_SECONDARY_COMMAND_BUFFERS: c_int = 1;
pub const VK_SUBPASS_CONTENTS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSubpassContents = c_uint;
pub const VkSubpassContents = enum_VkSubpassContents;
pub const VK_ACCESS_INDIRECT_COMMAND_READ_BIT: c_int = 1;
pub const VK_ACCESS_INDEX_READ_BIT: c_int = 2;
pub const VK_ACCESS_VERTEX_ATTRIBUTE_READ_BIT: c_int = 4;
pub const VK_ACCESS_UNIFORM_READ_BIT: c_int = 8;
pub const VK_ACCESS_INPUT_ATTACHMENT_READ_BIT: c_int = 16;
pub const VK_ACCESS_SHADER_READ_BIT: c_int = 32;
pub const VK_ACCESS_SHADER_WRITE_BIT: c_int = 64;
pub const VK_ACCESS_COLOR_ATTACHMENT_READ_BIT: c_int = 128;
pub const VK_ACCESS_COLOR_ATTACHMENT_WRITE_BIT: c_int = 256;
pub const VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_READ_BIT: c_int = 512;
pub const VK_ACCESS_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: c_int = 1024;
pub const VK_ACCESS_TRANSFER_READ_BIT: c_int = 2048;
pub const VK_ACCESS_TRANSFER_WRITE_BIT: c_int = 4096;
pub const VK_ACCESS_HOST_READ_BIT: c_int = 8192;
pub const VK_ACCESS_HOST_WRITE_BIT: c_int = 16384;
pub const VK_ACCESS_MEMORY_READ_BIT: c_int = 32768;
pub const VK_ACCESS_MEMORY_WRITE_BIT: c_int = 65536;
pub const VK_ACCESS_NONE: c_int = 0;
pub const VK_ACCESS_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: c_int = 33554432;
pub const VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: c_int = 67108864;
pub const VK_ACCESS_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: c_int = 134217728;
pub const VK_ACCESS_CONDITIONAL_RENDERING_READ_BIT_EXT: c_int = 1048576;
pub const VK_ACCESS_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: c_int = 524288;
pub const VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_KHR: c_int = 2097152;
pub const VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: c_int = 4194304;
pub const VK_ACCESS_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: c_int = 16777216;
pub const VK_ACCESS_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR: c_int = 8388608;
pub const VK_ACCESS_COMMAND_PREPROCESS_READ_BIT_NV: c_int = 131072;
pub const VK_ACCESS_COMMAND_PREPROCESS_WRITE_BIT_NV: c_int = 262144;
pub const VK_ACCESS_SHADING_RATE_IMAGE_READ_BIT_NV: c_int = 8388608;
pub const VK_ACCESS_ACCELERATION_STRUCTURE_READ_BIT_NV: c_int = 2097152;
pub const VK_ACCESS_ACCELERATION_STRUCTURE_WRITE_BIT_NV: c_int = 4194304;
pub const VK_ACCESS_NONE_KHR: c_int = 0;
pub const VK_ACCESS_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkAccessFlagBits = c_uint;
pub const VkAccessFlagBits = enum_VkAccessFlagBits;
pub const VkAccessFlags = VkFlags;
pub const VK_IMAGE_ASPECT_COLOR_BIT: c_int = 1;
pub const VK_IMAGE_ASPECT_DEPTH_BIT: c_int = 2;
pub const VK_IMAGE_ASPECT_STENCIL_BIT: c_int = 4;
pub const VK_IMAGE_ASPECT_METADATA_BIT: c_int = 8;
pub const VK_IMAGE_ASPECT_PLANE_0_BIT: c_int = 16;
pub const VK_IMAGE_ASPECT_PLANE_1_BIT: c_int = 32;
pub const VK_IMAGE_ASPECT_PLANE_2_BIT: c_int = 64;
pub const VK_IMAGE_ASPECT_NONE: c_int = 0;
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_0_BIT_EXT: c_int = 128;
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_1_BIT_EXT: c_int = 256;
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_2_BIT_EXT: c_int = 512;
pub const VK_IMAGE_ASPECT_MEMORY_PLANE_3_BIT_EXT: c_int = 1024;
pub const VK_IMAGE_ASPECT_PLANE_0_BIT_KHR: c_int = 16;
pub const VK_IMAGE_ASPECT_PLANE_1_BIT_KHR: c_int = 32;
pub const VK_IMAGE_ASPECT_PLANE_2_BIT_KHR: c_int = 64;
pub const VK_IMAGE_ASPECT_NONE_KHR: c_int = 0;
pub const VK_IMAGE_ASPECT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageAspectFlagBits = c_uint;
pub const VkImageAspectFlagBits = enum_VkImageAspectFlagBits;
pub const VkImageAspectFlags = VkFlags;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_BIT: c_int = 1;
pub const VK_FORMAT_FEATURE_STORAGE_IMAGE_BIT: c_int = 2;
pub const VK_FORMAT_FEATURE_STORAGE_IMAGE_ATOMIC_BIT: c_int = 4;
pub const VK_FORMAT_FEATURE_UNIFORM_TEXEL_BUFFER_BIT: c_int = 8;
pub const VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_BIT: c_int = 16;
pub const VK_FORMAT_FEATURE_STORAGE_TEXEL_BUFFER_ATOMIC_BIT: c_int = 32;
pub const VK_FORMAT_FEATURE_VERTEX_BUFFER_BIT: c_int = 64;
pub const VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BIT: c_int = 128;
pub const VK_FORMAT_FEATURE_COLOR_ATTACHMENT_BLEND_BIT: c_int = 256;
pub const VK_FORMAT_FEATURE_DEPTH_STENCIL_ATTACHMENT_BIT: c_int = 512;
pub const VK_FORMAT_FEATURE_BLIT_SRC_BIT: c_int = 1024;
pub const VK_FORMAT_FEATURE_BLIT_DST_BIT: c_int = 2048;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_LINEAR_BIT: c_int = 4096;
pub const VK_FORMAT_FEATURE_TRANSFER_SRC_BIT: c_int = 16384;
pub const VK_FORMAT_FEATURE_TRANSFER_DST_BIT: c_int = 32768;
pub const VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT: c_int = 131072;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT: c_int = 262144;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT: c_int = 524288;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT: c_int = 1048576;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT: c_int = 2097152;
pub const VK_FORMAT_FEATURE_DISJOINT_BIT: c_int = 4194304;
pub const VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT: c_int = 8388608;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT: c_int = 65536;
pub const VK_FORMAT_FEATURE_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR: c_int = 536870912;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT: c_int = 8192;
pub const VK_FORMAT_FEATURE_FRAGMENT_DENSITY_MAP_BIT_EXT: c_int = 16777216;
pub const VK_FORMAT_FEATURE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 1073741824;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_CUBIC_BIT_IMG: c_int = 8192;
pub const VK_FORMAT_FEATURE_TRANSFER_SRC_BIT_KHR: c_int = 16384;
pub const VK_FORMAT_FEATURE_TRANSFER_DST_BIT_KHR: c_int = 32768;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_FILTER_MINMAX_BIT_EXT: c_int = 65536;
pub const VK_FORMAT_FEATURE_MIDPOINT_CHROMA_SAMPLES_BIT_KHR: c_int = 131072;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR: c_int = 262144;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR: c_int = 524288;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR: c_int = 1048576;
pub const VK_FORMAT_FEATURE_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR: c_int = 2097152;
pub const VK_FORMAT_FEATURE_DISJOINT_BIT_KHR: c_int = 4194304;
pub const VK_FORMAT_FEATURE_COSITED_CHROMA_SAMPLES_BIT_KHR: c_int = 8388608;
pub const VK_FORMAT_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFormatFeatureFlagBits = c_uint;
pub const VkFormatFeatureFlagBits = enum_VkFormatFeatureFlagBits;
pub const VkFormatFeatureFlags = VkFlags;
pub const VK_IMAGE_CREATE_SPARSE_BINDING_BIT: c_int = 1;
pub const VK_IMAGE_CREATE_SPARSE_RESIDENCY_BIT: c_int = 2;
pub const VK_IMAGE_CREATE_SPARSE_ALIASED_BIT: c_int = 4;
pub const VK_IMAGE_CREATE_MUTABLE_FORMAT_BIT: c_int = 8;
pub const VK_IMAGE_CREATE_CUBE_COMPATIBLE_BIT: c_int = 16;
pub const VK_IMAGE_CREATE_ALIAS_BIT: c_int = 1024;
pub const VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT: c_int = 64;
pub const VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT: c_int = 32;
pub const VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT: c_int = 128;
pub const VK_IMAGE_CREATE_EXTENDED_USAGE_BIT: c_int = 256;
pub const VK_IMAGE_CREATE_PROTECTED_BIT: c_int = 2048;
pub const VK_IMAGE_CREATE_DISJOINT_BIT: c_int = 512;
pub const VK_IMAGE_CREATE_CORNER_SAMPLED_BIT_NV: c_int = 8192;
pub const VK_IMAGE_CREATE_SAMPLE_LOCATIONS_COMPATIBLE_DEPTH_BIT_EXT: c_int = 4096;
pub const VK_IMAGE_CREATE_SUBSAMPLED_BIT_EXT: c_int = 16384;
pub const VK_IMAGE_CREATE_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_BIT_EXT: c_int = 262144;
pub const VK_IMAGE_CREATE_2D_VIEW_COMPATIBLE_BIT_EXT: c_int = 131072;
pub const VK_IMAGE_CREATE_FRAGMENT_DENSITY_MAP_OFFSET_BIT_QCOM: c_int = 32768;
pub const VK_IMAGE_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: c_int = 64;
pub const VK_IMAGE_CREATE_2D_ARRAY_COMPATIBLE_BIT_KHR: c_int = 32;
pub const VK_IMAGE_CREATE_BLOCK_TEXEL_VIEW_COMPATIBLE_BIT_KHR: c_int = 128;
pub const VK_IMAGE_CREATE_EXTENDED_USAGE_BIT_KHR: c_int = 256;
pub const VK_IMAGE_CREATE_DISJOINT_BIT_KHR: c_int = 512;
pub const VK_IMAGE_CREATE_ALIAS_BIT_KHR: c_int = 1024;
pub const VK_IMAGE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageCreateFlagBits = c_uint;
pub const VkImageCreateFlagBits = enum_VkImageCreateFlagBits;
pub const VkImageCreateFlags = VkFlags;
pub const VK_SAMPLE_COUNT_1_BIT: c_int = 1;
pub const VK_SAMPLE_COUNT_2_BIT: c_int = 2;
pub const VK_SAMPLE_COUNT_4_BIT: c_int = 4;
pub const VK_SAMPLE_COUNT_8_BIT: c_int = 8;
pub const VK_SAMPLE_COUNT_16_BIT: c_int = 16;
pub const VK_SAMPLE_COUNT_32_BIT: c_int = 32;
pub const VK_SAMPLE_COUNT_64_BIT: c_int = 64;
pub const VK_SAMPLE_COUNT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSampleCountFlagBits = c_uint;
pub const VkSampleCountFlagBits = enum_VkSampleCountFlagBits;
pub const VkSampleCountFlags = VkFlags;
pub const VK_IMAGE_USAGE_TRANSFER_SRC_BIT: c_int = 1;
pub const VK_IMAGE_USAGE_TRANSFER_DST_BIT: c_int = 2;
pub const VK_IMAGE_USAGE_SAMPLED_BIT: c_int = 4;
pub const VK_IMAGE_USAGE_STORAGE_BIT: c_int = 8;
pub const VK_IMAGE_USAGE_COLOR_ATTACHMENT_BIT: c_int = 16;
pub const VK_IMAGE_USAGE_DEPTH_STENCIL_ATTACHMENT_BIT: c_int = 32;
pub const VK_IMAGE_USAGE_TRANSIENT_ATTACHMENT_BIT: c_int = 64;
pub const VK_IMAGE_USAGE_INPUT_ATTACHMENT_BIT: c_int = 128;
pub const VK_IMAGE_USAGE_FRAGMENT_DENSITY_MAP_BIT_EXT: c_int = 512;
pub const VK_IMAGE_USAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 256;
pub const VK_IMAGE_USAGE_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: c_int = 524288;
pub const VK_IMAGE_USAGE_INVOCATION_MASK_BIT_HUAWEI: c_int = 262144;
pub const VK_IMAGE_USAGE_SAMPLE_WEIGHT_BIT_QCOM: c_int = 1048576;
pub const VK_IMAGE_USAGE_SAMPLE_BLOCK_MATCH_BIT_QCOM: c_int = 2097152;
pub const VK_IMAGE_USAGE_SHADING_RATE_IMAGE_BIT_NV: c_int = 256;
pub const VK_IMAGE_USAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageUsageFlagBits = c_uint;
pub const VkImageUsageFlagBits = enum_VkImageUsageFlagBits;
pub const VkImageUsageFlags = VkFlags;
pub const VK_INSTANCE_CREATE_ENUMERATE_PORTABILITY_BIT_KHR: c_int = 1;
pub const VK_INSTANCE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkInstanceCreateFlagBits = c_uint;
pub const VkInstanceCreateFlagBits = enum_VkInstanceCreateFlagBits;
pub const VkInstanceCreateFlags = VkFlags;
pub const VK_MEMORY_HEAP_DEVICE_LOCAL_BIT: c_int = 1;
pub const VK_MEMORY_HEAP_MULTI_INSTANCE_BIT: c_int = 2;
pub const VK_MEMORY_HEAP_MULTI_INSTANCE_BIT_KHR: c_int = 2;
pub const VK_MEMORY_HEAP_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkMemoryHeapFlagBits = c_uint;
pub const VkMemoryHeapFlagBits = enum_VkMemoryHeapFlagBits;
pub const VkMemoryHeapFlags = VkFlags;
pub const VK_MEMORY_PROPERTY_DEVICE_LOCAL_BIT: c_int = 1;
pub const VK_MEMORY_PROPERTY_HOST_VISIBLE_BIT: c_int = 2;
pub const VK_MEMORY_PROPERTY_HOST_COHERENT_BIT: c_int = 4;
pub const VK_MEMORY_PROPERTY_HOST_CACHED_BIT: c_int = 8;
pub const VK_MEMORY_PROPERTY_LAZILY_ALLOCATED_BIT: c_int = 16;
pub const VK_MEMORY_PROPERTY_PROTECTED_BIT: c_int = 32;
pub const VK_MEMORY_PROPERTY_DEVICE_COHERENT_BIT_AMD: c_int = 64;
pub const VK_MEMORY_PROPERTY_DEVICE_UNCACHED_BIT_AMD: c_int = 128;
pub const VK_MEMORY_PROPERTY_RDMA_CAPABLE_BIT_NV: c_int = 256;
pub const VK_MEMORY_PROPERTY_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkMemoryPropertyFlagBits = c_uint;
pub const VkMemoryPropertyFlagBits = enum_VkMemoryPropertyFlagBits;
pub const VkMemoryPropertyFlags = VkFlags;
pub const VK_QUEUE_GRAPHICS_BIT: c_int = 1;
pub const VK_QUEUE_COMPUTE_BIT: c_int = 2;
pub const VK_QUEUE_TRANSFER_BIT: c_int = 4;
pub const VK_QUEUE_SPARSE_BINDING_BIT: c_int = 8;
pub const VK_QUEUE_PROTECTED_BIT: c_int = 16;
pub const VK_QUEUE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueueFlagBits = c_uint;
pub const VkQueueFlagBits = enum_VkQueueFlagBits;
pub const VkQueueFlags = VkFlags;
pub const VkDeviceCreateFlags = VkFlags;
pub const VK_DEVICE_QUEUE_CREATE_PROTECTED_BIT: c_int = 1;
pub const VK_DEVICE_QUEUE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDeviceQueueCreateFlagBits = c_uint;
pub const VkDeviceQueueCreateFlagBits = enum_VkDeviceQueueCreateFlagBits;
pub const VkDeviceQueueCreateFlags = VkFlags;
pub const VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT: c_int = 1;
pub const VK_PIPELINE_STAGE_DRAW_INDIRECT_BIT: c_int = 2;
pub const VK_PIPELINE_STAGE_VERTEX_INPUT_BIT: c_int = 4;
pub const VK_PIPELINE_STAGE_VERTEX_SHADER_BIT: c_int = 8;
pub const VK_PIPELINE_STAGE_TESSELLATION_CONTROL_SHADER_BIT: c_int = 16;
pub const VK_PIPELINE_STAGE_TESSELLATION_EVALUATION_SHADER_BIT: c_int = 32;
pub const VK_PIPELINE_STAGE_GEOMETRY_SHADER_BIT: c_int = 64;
pub const VK_PIPELINE_STAGE_FRAGMENT_SHADER_BIT: c_int = 128;
pub const VK_PIPELINE_STAGE_EARLY_FRAGMENT_TESTS_BIT: c_int = 256;
pub const VK_PIPELINE_STAGE_LATE_FRAGMENT_TESTS_BIT: c_int = 512;
pub const VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT: c_int = 1024;
pub const VK_PIPELINE_STAGE_COMPUTE_SHADER_BIT: c_int = 2048;
pub const VK_PIPELINE_STAGE_TRANSFER_BIT: c_int = 4096;
pub const VK_PIPELINE_STAGE_BOTTOM_OF_PIPE_BIT: c_int = 8192;
pub const VK_PIPELINE_STAGE_HOST_BIT: c_int = 16384;
pub const VK_PIPELINE_STAGE_ALL_GRAPHICS_BIT: c_int = 32768;
pub const VK_PIPELINE_STAGE_ALL_COMMANDS_BIT: c_int = 65536;
pub const VK_PIPELINE_STAGE_NONE: c_int = 0;
pub const VK_PIPELINE_STAGE_TRANSFORM_FEEDBACK_BIT_EXT: c_int = 16777216;
pub const VK_PIPELINE_STAGE_CONDITIONAL_RENDERING_BIT_EXT: c_int = 262144;
pub const VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_KHR: c_int = 33554432;
pub const VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_KHR: c_int = 2097152;
pub const VK_PIPELINE_STAGE_TASK_SHADER_BIT_NV: c_int = 524288;
pub const VK_PIPELINE_STAGE_MESH_SHADER_BIT_NV: c_int = 1048576;
pub const VK_PIPELINE_STAGE_FRAGMENT_DENSITY_PROCESS_BIT_EXT: c_int = 8388608;
pub const VK_PIPELINE_STAGE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 4194304;
pub const VK_PIPELINE_STAGE_COMMAND_PREPROCESS_BIT_NV: c_int = 131072;
pub const VK_PIPELINE_STAGE_SHADING_RATE_IMAGE_BIT_NV: c_int = 4194304;
pub const VK_PIPELINE_STAGE_RAY_TRACING_SHADER_BIT_NV: c_int = 2097152;
pub const VK_PIPELINE_STAGE_ACCELERATION_STRUCTURE_BUILD_BIT_NV: c_int = 33554432;
pub const VK_PIPELINE_STAGE_NONE_KHR: c_int = 0;
pub const VK_PIPELINE_STAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineStageFlagBits = c_uint;
pub const VkPipelineStageFlagBits = enum_VkPipelineStageFlagBits;
pub const VkPipelineStageFlags = VkFlags;
pub const VkMemoryMapFlags = VkFlags;
pub const VK_SPARSE_MEMORY_BIND_METADATA_BIT: c_int = 1;
pub const VK_SPARSE_MEMORY_BIND_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSparseMemoryBindFlagBits = c_uint;
pub const VkSparseMemoryBindFlagBits = enum_VkSparseMemoryBindFlagBits;
pub const VkSparseMemoryBindFlags = VkFlags;
pub const VK_SPARSE_IMAGE_FORMAT_SINGLE_MIPTAIL_BIT: c_int = 1;
pub const VK_SPARSE_IMAGE_FORMAT_ALIGNED_MIP_SIZE_BIT: c_int = 2;
pub const VK_SPARSE_IMAGE_FORMAT_NONSTANDARD_BLOCK_SIZE_BIT: c_int = 4;
pub const VK_SPARSE_IMAGE_FORMAT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSparseImageFormatFlagBits = c_uint;
pub const VkSparseImageFormatFlagBits = enum_VkSparseImageFormatFlagBits;
pub const VkSparseImageFormatFlags = VkFlags;
pub const VK_FENCE_CREATE_SIGNALED_BIT: c_int = 1;
pub const VK_FENCE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFenceCreateFlagBits = c_uint;
pub const VkFenceCreateFlagBits = enum_VkFenceCreateFlagBits;
pub const VkFenceCreateFlags = VkFlags;
pub const VkSemaphoreCreateFlags = VkFlags;
pub const VK_EVENT_CREATE_DEVICE_ONLY_BIT: c_int = 1;
pub const VK_EVENT_CREATE_DEVICE_ONLY_BIT_KHR: c_int = 1;
pub const VK_EVENT_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkEventCreateFlagBits = c_uint;
pub const VkEventCreateFlagBits = enum_VkEventCreateFlagBits;
pub const VkEventCreateFlags = VkFlags;
pub const VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_VERTICES_BIT: c_int = 1;
pub const VK_QUERY_PIPELINE_STATISTIC_INPUT_ASSEMBLY_PRIMITIVES_BIT: c_int = 2;
pub const VK_QUERY_PIPELINE_STATISTIC_VERTEX_SHADER_INVOCATIONS_BIT: c_int = 4;
pub const VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_INVOCATIONS_BIT: c_int = 8;
pub const VK_QUERY_PIPELINE_STATISTIC_GEOMETRY_SHADER_PRIMITIVES_BIT: c_int = 16;
pub const VK_QUERY_PIPELINE_STATISTIC_CLIPPING_INVOCATIONS_BIT: c_int = 32;
pub const VK_QUERY_PIPELINE_STATISTIC_CLIPPING_PRIMITIVES_BIT: c_int = 64;
pub const VK_QUERY_PIPELINE_STATISTIC_FRAGMENT_SHADER_INVOCATIONS_BIT: c_int = 128;
pub const VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_CONTROL_SHADER_PATCHES_BIT: c_int = 256;
pub const VK_QUERY_PIPELINE_STATISTIC_TESSELLATION_EVALUATION_SHADER_INVOCATIONS_BIT: c_int = 512;
pub const VK_QUERY_PIPELINE_STATISTIC_COMPUTE_SHADER_INVOCATIONS_BIT: c_int = 1024;
pub const VK_QUERY_PIPELINE_STATISTIC_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueryPipelineStatisticFlagBits = c_uint;
pub const VkQueryPipelineStatisticFlagBits = enum_VkQueryPipelineStatisticFlagBits;
pub const VkQueryPipelineStatisticFlags = VkFlags;
pub const VkQueryPoolCreateFlags = VkFlags;
pub const VK_QUERY_RESULT_64_BIT: c_int = 1;
pub const VK_QUERY_RESULT_WAIT_BIT: c_int = 2;
pub const VK_QUERY_RESULT_WITH_AVAILABILITY_BIT: c_int = 4;
pub const VK_QUERY_RESULT_PARTIAL_BIT: c_int = 8;
pub const VK_QUERY_RESULT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueryResultFlagBits = c_uint;
pub const VkQueryResultFlagBits = enum_VkQueryResultFlagBits;
pub const VkQueryResultFlags = VkFlags;
pub const VK_BUFFER_CREATE_SPARSE_BINDING_BIT: c_int = 1;
pub const VK_BUFFER_CREATE_SPARSE_RESIDENCY_BIT: c_int = 2;
pub const VK_BUFFER_CREATE_SPARSE_ALIASED_BIT: c_int = 4;
pub const VK_BUFFER_CREATE_PROTECTED_BIT: c_int = 8;
pub const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT: c_int = 16;
pub const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_EXT: c_int = 16;
pub const VK_BUFFER_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: c_int = 16;
pub const VK_BUFFER_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBufferCreateFlagBits = c_uint;
pub const VkBufferCreateFlagBits = enum_VkBufferCreateFlagBits;
pub const VkBufferCreateFlags = VkFlags;
pub const VK_BUFFER_USAGE_TRANSFER_SRC_BIT: c_int = 1;
pub const VK_BUFFER_USAGE_TRANSFER_DST_BIT: c_int = 2;
pub const VK_BUFFER_USAGE_UNIFORM_TEXEL_BUFFER_BIT: c_int = 4;
pub const VK_BUFFER_USAGE_STORAGE_TEXEL_BUFFER_BIT: c_int = 8;
pub const VK_BUFFER_USAGE_UNIFORM_BUFFER_BIT: c_int = 16;
pub const VK_BUFFER_USAGE_STORAGE_BUFFER_BIT: c_int = 32;
pub const VK_BUFFER_USAGE_INDEX_BUFFER_BIT: c_int = 64;
pub const VK_BUFFER_USAGE_VERTEX_BUFFER_BIT: c_int = 128;
pub const VK_BUFFER_USAGE_INDIRECT_BUFFER_BIT: c_int = 256;
pub const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT: c_int = 131072;
pub const VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_BUFFER_BIT_EXT: c_int = 2048;
pub const VK_BUFFER_USAGE_TRANSFORM_FEEDBACK_COUNTER_BUFFER_BIT_EXT: c_int = 4096;
pub const VK_BUFFER_USAGE_CONDITIONAL_RENDERING_BIT_EXT: c_int = 512;
pub const VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_BUILD_INPUT_READ_ONLY_BIT_KHR: c_int = 524288;
pub const VK_BUFFER_USAGE_ACCELERATION_STRUCTURE_STORAGE_BIT_KHR: c_int = 1048576;
pub const VK_BUFFER_USAGE_SHADER_BINDING_TABLE_BIT_KHR: c_int = 1024;
pub const VK_BUFFER_USAGE_RAY_TRACING_BIT_NV: c_int = 1024;
pub const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_EXT: c_int = 131072;
pub const VK_BUFFER_USAGE_SHADER_DEVICE_ADDRESS_BIT_KHR: c_int = 131072;
pub const VK_BUFFER_USAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkBufferUsageFlagBits = c_uint;
pub const VkBufferUsageFlagBits = enum_VkBufferUsageFlagBits;
pub const VkBufferUsageFlags = VkFlags;
pub const VkBufferViewCreateFlags = VkFlags;
pub const VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DYNAMIC_BIT_EXT: c_int = 1;
pub const VK_IMAGE_VIEW_CREATE_FRAGMENT_DENSITY_MAP_DEFERRED_BIT_EXT: c_int = 2;
pub const VK_IMAGE_VIEW_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkImageViewCreateFlagBits = c_uint;
pub const VkImageViewCreateFlagBits = enum_VkImageViewCreateFlagBits;
pub const VkImageViewCreateFlags = VkFlags;
pub const VkShaderModuleCreateFlags = VkFlags;
pub const VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT: c_int = 1;
pub const VK_PIPELINE_CACHE_CREATE_EXTERNALLY_SYNCHRONIZED_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_CACHE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineCacheCreateFlagBits = c_uint;
pub const VkPipelineCacheCreateFlagBits = enum_VkPipelineCacheCreateFlagBits;
pub const VkPipelineCacheCreateFlags = VkFlags;
pub const VK_COLOR_COMPONENT_R_BIT: c_int = 1;
pub const VK_COLOR_COMPONENT_G_BIT: c_int = 2;
pub const VK_COLOR_COMPONENT_B_BIT: c_int = 4;
pub const VK_COLOR_COMPONENT_A_BIT: c_int = 8;
pub const VK_COLOR_COMPONENT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkColorComponentFlagBits = c_uint;
pub const VkColorComponentFlagBits = enum_VkColorComponentFlagBits;
pub const VkColorComponentFlags = VkFlags;
pub const VK_PIPELINE_CREATE_DISABLE_OPTIMIZATION_BIT: c_int = 1;
pub const VK_PIPELINE_CREATE_ALLOW_DERIVATIVES_BIT: c_int = 2;
pub const VK_PIPELINE_CREATE_DERIVATIVE_BIT: c_int = 4;
pub const VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT: c_int = 8;
pub const VK_PIPELINE_CREATE_DISPATCH_BASE_BIT: c_int = 16;
pub const VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT: c_int = 256;
pub const VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT: c_int = 512;
pub const VK_PIPELINE_CREATE_RENDERING_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 2097152;
pub const VK_PIPELINE_CREATE_RENDERING_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT: c_int = 4194304;
pub const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_ANY_HIT_SHADERS_BIT_KHR: c_int = 16384;
pub const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_CLOSEST_HIT_SHADERS_BIT_KHR: c_int = 32768;
pub const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_MISS_SHADERS_BIT_KHR: c_int = 65536;
pub const VK_PIPELINE_CREATE_RAY_TRACING_NO_NULL_INTERSECTION_SHADERS_BIT_KHR: c_int = 131072;
pub const VK_PIPELINE_CREATE_RAY_TRACING_SKIP_TRIANGLES_BIT_KHR: c_int = 4096;
pub const VK_PIPELINE_CREATE_RAY_TRACING_SKIP_AABBS_BIT_KHR: c_int = 8192;
pub const VK_PIPELINE_CREATE_RAY_TRACING_SHADER_GROUP_HANDLE_CAPTURE_REPLAY_BIT_KHR: c_int = 524288;
pub const VK_PIPELINE_CREATE_DEFER_COMPILE_BIT_NV: c_int = 32;
pub const VK_PIPELINE_CREATE_CAPTURE_STATISTICS_BIT_KHR: c_int = 64;
pub const VK_PIPELINE_CREATE_CAPTURE_INTERNAL_REPRESENTATIONS_BIT_KHR: c_int = 128;
pub const VK_PIPELINE_CREATE_INDIRECT_BINDABLE_BIT_NV: c_int = 262144;
pub const VK_PIPELINE_CREATE_LIBRARY_BIT_KHR: c_int = 2048;
pub const VK_PIPELINE_CREATE_RETAIN_LINK_TIME_OPTIMIZATION_INFO_BIT_EXT: c_int = 8388608;
pub const VK_PIPELINE_CREATE_LINK_TIME_OPTIMIZATION_BIT_EXT: c_int = 1024;
pub const VK_PIPELINE_CREATE_RAY_TRACING_ALLOW_MOTION_BIT_NV: c_int = 1048576;
pub const VK_PIPELINE_CREATE_COLOR_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: c_int = 33554432;
pub const VK_PIPELINE_CREATE_DEPTH_STENCIL_ATTACHMENT_FEEDBACK_LOOP_BIT_EXT: c_int = 67108864;
pub const VK_PIPELINE_CREATE_DISPATCH_BASE: c_int = 16;
pub const VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: c_int = 2097152;
pub const VK_PIPELINE_RASTERIZATION_STATE_CREATE_FRAGMENT_DENSITY_MAP_ATTACHMENT_BIT_EXT: c_int = 4194304;
pub const VK_PIPELINE_CREATE_VIEW_INDEX_FROM_DEVICE_INDEX_BIT_KHR: c_int = 8;
pub const VK_PIPELINE_CREATE_DISPATCH_BASE_KHR: c_int = 16;
pub const VK_PIPELINE_CREATE_FAIL_ON_PIPELINE_COMPILE_REQUIRED_BIT_EXT: c_int = 256;
pub const VK_PIPELINE_CREATE_EARLY_RETURN_ON_FAILURE_BIT_EXT: c_int = 512;
pub const VK_PIPELINE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineCreateFlagBits = c_uint;
pub const VkPipelineCreateFlagBits = enum_VkPipelineCreateFlagBits;
pub const VkPipelineCreateFlags = VkFlags;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT: c_int = 1;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT: c_int = 2;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_ALLOW_VARYING_SUBGROUP_SIZE_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_REQUIRE_FULL_SUBGROUPS_BIT_EXT: c_int = 2;
pub const VK_PIPELINE_SHADER_STAGE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineShaderStageCreateFlagBits = c_uint;
pub const VkPipelineShaderStageCreateFlagBits = enum_VkPipelineShaderStageCreateFlagBits;
pub const VkPipelineShaderStageCreateFlags = VkFlags;
pub const VK_SHADER_STAGE_VERTEX_BIT: c_int = 1;
pub const VK_SHADER_STAGE_TESSELLATION_CONTROL_BIT: c_int = 2;
pub const VK_SHADER_STAGE_TESSELLATION_EVALUATION_BIT: c_int = 4;
pub const VK_SHADER_STAGE_GEOMETRY_BIT: c_int = 8;
pub const VK_SHADER_STAGE_FRAGMENT_BIT: c_int = 16;
pub const VK_SHADER_STAGE_COMPUTE_BIT: c_int = 32;
pub const VK_SHADER_STAGE_ALL_GRAPHICS: c_int = 31;
pub const VK_SHADER_STAGE_ALL: c_int = 2147483647;
pub const VK_SHADER_STAGE_RAYGEN_BIT_KHR: c_int = 256;
pub const VK_SHADER_STAGE_ANY_HIT_BIT_KHR: c_int = 512;
pub const VK_SHADER_STAGE_CLOSEST_HIT_BIT_KHR: c_int = 1024;
pub const VK_SHADER_STAGE_MISS_BIT_KHR: c_int = 2048;
pub const VK_SHADER_STAGE_INTERSECTION_BIT_KHR: c_int = 4096;
pub const VK_SHADER_STAGE_CALLABLE_BIT_KHR: c_int = 8192;
pub const VK_SHADER_STAGE_TASK_BIT_NV: c_int = 64;
pub const VK_SHADER_STAGE_MESH_BIT_NV: c_int = 128;
pub const VK_SHADER_STAGE_SUBPASS_SHADING_BIT_HUAWEI: c_int = 16384;
pub const VK_SHADER_STAGE_RAYGEN_BIT_NV: c_int = 256;
pub const VK_SHADER_STAGE_ANY_HIT_BIT_NV: c_int = 512;
pub const VK_SHADER_STAGE_CLOSEST_HIT_BIT_NV: c_int = 1024;
pub const VK_SHADER_STAGE_MISS_BIT_NV: c_int = 2048;
pub const VK_SHADER_STAGE_INTERSECTION_BIT_NV: c_int = 4096;
pub const VK_SHADER_STAGE_CALLABLE_BIT_NV: c_int = 8192;
pub const VK_SHADER_STAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkShaderStageFlagBits = c_uint;
pub const VkShaderStageFlagBits = enum_VkShaderStageFlagBits;
pub const VK_CULL_MODE_NONE: c_int = 0;
pub const VK_CULL_MODE_FRONT_BIT: c_int = 1;
pub const VK_CULL_MODE_BACK_BIT: c_int = 2;
pub const VK_CULL_MODE_FRONT_AND_BACK: c_int = 3;
pub const VK_CULL_MODE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCullModeFlagBits = c_uint;
pub const VkCullModeFlagBits = enum_VkCullModeFlagBits;
pub const VkCullModeFlags = VkFlags;
pub const VkPipelineVertexInputStateCreateFlags = VkFlags;
pub const VkPipelineInputAssemblyStateCreateFlags = VkFlags;
pub const VkPipelineTessellationStateCreateFlags = VkFlags;
pub const VkPipelineViewportStateCreateFlags = VkFlags;
pub const VkPipelineRasterizationStateCreateFlags = VkFlags;
pub const VkPipelineMultisampleStateCreateFlags = VkFlags;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM: c_int = 1;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM: c_int = 2;
pub const VK_PIPELINE_DEPTH_STENCIL_STATE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineDepthStencilStateCreateFlagBits = c_uint;
pub const VkPipelineDepthStencilStateCreateFlagBits = enum_VkPipelineDepthStencilStateCreateFlagBits;
pub const VkPipelineDepthStencilStateCreateFlags = VkFlags;
pub const VK_PIPELINE_COLOR_BLEND_STATE_CREATE_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_BIT_ARM: c_int = 1;
pub const VK_PIPELINE_COLOR_BLEND_STATE_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineColorBlendStateCreateFlagBits = c_uint;
pub const VkPipelineColorBlendStateCreateFlagBits = enum_VkPipelineColorBlendStateCreateFlagBits;
pub const VkPipelineColorBlendStateCreateFlags = VkFlags;
pub const VkPipelineDynamicStateCreateFlags = VkFlags;
pub const VK_PIPELINE_LAYOUT_CREATE_INDEPENDENT_SETS_BIT_EXT: c_int = 2;
pub const VK_PIPELINE_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineLayoutCreateFlagBits = c_uint;
pub const VkPipelineLayoutCreateFlagBits = enum_VkPipelineLayoutCreateFlagBits;
pub const VkPipelineLayoutCreateFlags = VkFlags;
pub const VkShaderStageFlags = VkFlags;
pub const VK_SAMPLER_CREATE_SUBSAMPLED_BIT_EXT: c_int = 1;
pub const VK_SAMPLER_CREATE_SUBSAMPLED_COARSE_RECONSTRUCTION_BIT_EXT: c_int = 2;
pub const VK_SAMPLER_CREATE_NON_SEAMLESS_CUBE_MAP_BIT_EXT: c_int = 4;
pub const VK_SAMPLER_CREATE_IMAGE_PROCESSING_BIT_QCOM: c_int = 16;
pub const VK_SAMPLER_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerCreateFlagBits = c_uint;
pub const VkSamplerCreateFlagBits = enum_VkSamplerCreateFlagBits;
pub const VkSamplerCreateFlags = VkFlags;
pub const VK_DESCRIPTOR_POOL_CREATE_FREE_DESCRIPTOR_SET_BIT: c_int = 1;
pub const VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT: c_int = 2;
pub const VK_DESCRIPTOR_POOL_CREATE_HOST_ONLY_BIT_VALVE: c_int = 4;
pub const VK_DESCRIPTOR_POOL_CREATE_UPDATE_AFTER_BIND_BIT_EXT: c_int = 2;
pub const VK_DESCRIPTOR_POOL_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorPoolCreateFlagBits = c_uint;
pub const VkDescriptorPoolCreateFlagBits = enum_VkDescriptorPoolCreateFlagBits;
pub const VkDescriptorPoolCreateFlags = VkFlags;
pub const VkDescriptorPoolResetFlags = VkFlags;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT: c_int = 2;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_PUSH_DESCRIPTOR_BIT_KHR: c_int = 1;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_HOST_ONLY_POOL_BIT_VALVE: c_int = 4;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_UPDATE_AFTER_BIND_POOL_BIT_EXT: c_int = 2;
pub const VK_DESCRIPTOR_SET_LAYOUT_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorSetLayoutCreateFlagBits = c_uint;
pub const VkDescriptorSetLayoutCreateFlagBits = enum_VkDescriptorSetLayoutCreateFlagBits;
pub const VkDescriptorSetLayoutCreateFlags = VkFlags;
pub const VK_ATTACHMENT_DESCRIPTION_MAY_ALIAS_BIT: c_int = 1;
pub const VK_ATTACHMENT_DESCRIPTION_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkAttachmentDescriptionFlagBits = c_uint;
pub const VkAttachmentDescriptionFlagBits = enum_VkAttachmentDescriptionFlagBits;
pub const VkAttachmentDescriptionFlags = VkFlags;
pub const VK_DEPENDENCY_BY_REGION_BIT: c_int = 1;
pub const VK_DEPENDENCY_DEVICE_GROUP_BIT: c_int = 4;
pub const VK_DEPENDENCY_VIEW_LOCAL_BIT: c_int = 2;
pub const VK_DEPENDENCY_FEEDBACK_LOOP_BIT_EXT: c_int = 8;
pub const VK_DEPENDENCY_VIEW_LOCAL_BIT_KHR: c_int = 2;
pub const VK_DEPENDENCY_DEVICE_GROUP_BIT_KHR: c_int = 4;
pub const VK_DEPENDENCY_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDependencyFlagBits = c_uint;
pub const VkDependencyFlagBits = enum_VkDependencyFlagBits;
pub const VkDependencyFlags = VkFlags;
pub const VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT: c_int = 1;
pub const VK_FRAMEBUFFER_CREATE_IMAGELESS_BIT_KHR: c_int = 1;
pub const VK_FRAMEBUFFER_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFramebufferCreateFlagBits = c_uint;
pub const VkFramebufferCreateFlagBits = enum_VkFramebufferCreateFlagBits;
pub const VkFramebufferCreateFlags = VkFlags;
pub const VK_RENDER_PASS_CREATE_TRANSFORM_BIT_QCOM: c_int = 2;
pub const VK_RENDER_PASS_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkRenderPassCreateFlagBits = c_uint;
pub const VkRenderPassCreateFlagBits = enum_VkRenderPassCreateFlagBits;
pub const VkRenderPassCreateFlags = VkFlags;
pub const VK_SUBPASS_DESCRIPTION_PER_VIEW_ATTRIBUTES_BIT_NVX: c_int = 1;
pub const VK_SUBPASS_DESCRIPTION_PER_VIEW_POSITION_X_ONLY_BIT_NVX: c_int = 2;
pub const VK_SUBPASS_DESCRIPTION_FRAGMENT_REGION_BIT_QCOM: c_int = 4;
pub const VK_SUBPASS_DESCRIPTION_SHADER_RESOLVE_BIT_QCOM: c_int = 8;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_COLOR_ACCESS_BIT_ARM: c_int = 16;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_DEPTH_ACCESS_BIT_ARM: c_int = 32;
pub const VK_SUBPASS_DESCRIPTION_RASTERIZATION_ORDER_ATTACHMENT_STENCIL_ACCESS_BIT_ARM: c_int = 64;
pub const VK_SUBPASS_DESCRIPTION_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSubpassDescriptionFlagBits = c_uint;
pub const VkSubpassDescriptionFlagBits = enum_VkSubpassDescriptionFlagBits;
pub const VkSubpassDescriptionFlags = VkFlags;
pub const VK_COMMAND_POOL_CREATE_TRANSIENT_BIT: c_int = 1;
pub const VK_COMMAND_POOL_CREATE_RESET_COMMAND_BUFFER_BIT: c_int = 2;
pub const VK_COMMAND_POOL_CREATE_PROTECTED_BIT: c_int = 4;
pub const VK_COMMAND_POOL_CREATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandPoolCreateFlagBits = c_uint;
pub const VkCommandPoolCreateFlagBits = enum_VkCommandPoolCreateFlagBits;
pub const VkCommandPoolCreateFlags = VkFlags;
pub const VK_COMMAND_POOL_RESET_RELEASE_RESOURCES_BIT: c_int = 1;
pub const VK_COMMAND_POOL_RESET_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandPoolResetFlagBits = c_uint;
pub const VkCommandPoolResetFlagBits = enum_VkCommandPoolResetFlagBits;
pub const VkCommandPoolResetFlags = VkFlags;
pub const VK_COMMAND_BUFFER_USAGE_ONE_TIME_SUBMIT_BIT: c_int = 1;
pub const VK_COMMAND_BUFFER_USAGE_RENDER_PASS_CONTINUE_BIT: c_int = 2;
pub const VK_COMMAND_BUFFER_USAGE_SIMULTANEOUS_USE_BIT: c_int = 4;
pub const VK_COMMAND_BUFFER_USAGE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandBufferUsageFlagBits = c_uint;
pub const VkCommandBufferUsageFlagBits = enum_VkCommandBufferUsageFlagBits;
pub const VkCommandBufferUsageFlags = VkFlags;
pub const VK_QUERY_CONTROL_PRECISE_BIT: c_int = 1;
pub const VK_QUERY_CONTROL_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkQueryControlFlagBits = c_uint;
pub const VkQueryControlFlagBits = enum_VkQueryControlFlagBits;
pub const VkQueryControlFlags = VkFlags;
pub const VK_COMMAND_BUFFER_RESET_RELEASE_RESOURCES_BIT: c_int = 1;
pub const VK_COMMAND_BUFFER_RESET_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkCommandBufferResetFlagBits = c_uint;
pub const VkCommandBufferResetFlagBits = enum_VkCommandBufferResetFlagBits;
pub const VkCommandBufferResetFlags = VkFlags;
pub const VK_STENCIL_FACE_FRONT_BIT: c_int = 1;
pub const VK_STENCIL_FACE_BACK_BIT: c_int = 2;
pub const VK_STENCIL_FACE_FRONT_AND_BACK: c_int = 3;
pub const VK_STENCIL_FRONT_AND_BACK: c_int = 3;
pub const VK_STENCIL_FACE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkStencilFaceFlagBits = c_uint;
pub const VkStencilFaceFlagBits = enum_VkStencilFaceFlagBits;
pub const VkStencilFaceFlags = VkFlags;
pub const struct_VkExtent2D = extern struct {
    width: u32,
    height: u32,
};
pub const VkExtent2D = struct_VkExtent2D;
pub const struct_VkExtent3D = extern struct {
    width: u32,
    height: u32,
    depth: u32,
};
pub const VkExtent3D = struct_VkExtent3D;
pub const struct_VkOffset2D = extern struct {
    x: i32,
    y: i32,
};
pub const VkOffset2D = struct_VkOffset2D;
pub const struct_VkOffset3D = extern struct {
    x: i32,
    y: i32,
    z: i32,
};
pub const VkOffset3D = struct_VkOffset3D;
pub const struct_VkRect2D = extern struct {
    offset: VkOffset2D,
    extent: VkExtent2D,
};
pub const VkRect2D = struct_VkRect2D;
pub const struct_VkBaseInStructure = extern struct {
    sType: VkStructureType,
    pNext: [*c]const struct_VkBaseInStructure,
};
pub const VkBaseInStructure = struct_VkBaseInStructure;
pub const struct_VkBaseOutStructure = extern struct {
    sType: VkStructureType,
    pNext: [*c]struct_VkBaseOutStructure,
};
pub const VkBaseOutStructure = struct_VkBaseOutStructure;
pub const struct_VkBufferMemoryBarrier = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    srcQueueFamilyIndex: u32,
    dstQueueFamilyIndex: u32,
    buffer: VkBuffer,
    offset: VkDeviceSize,
    size: VkDeviceSize,
};
pub const VkBufferMemoryBarrier = struct_VkBufferMemoryBarrier;
pub const struct_VkDispatchIndirectCommand = extern struct {
    x: u32,
    y: u32,
    z: u32,
};
pub const VkDispatchIndirectCommand = struct_VkDispatchIndirectCommand;
pub const struct_VkDrawIndexedIndirectCommand = extern struct {
    indexCount: u32,
    instanceCount: u32,
    firstIndex: u32,
    vertexOffset: i32,
    firstInstance: u32,
};
pub const VkDrawIndexedIndirectCommand = struct_VkDrawIndexedIndirectCommand;
pub const struct_VkDrawIndirectCommand = extern struct {
    vertexCount: u32,
    instanceCount: u32,
    firstVertex: u32,
    firstInstance: u32,
};
pub const VkDrawIndirectCommand = struct_VkDrawIndirectCommand;
pub const struct_VkImageSubresourceRange = extern struct {
    aspectMask: VkImageAspectFlags,
    baseMipLevel: u32,
    levelCount: u32,
    baseArrayLayer: u32,
    layerCount: u32,
};
pub const VkImageSubresourceRange = struct_VkImageSubresourceRange;
pub const struct_VkImageMemoryBarrier = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    oldLayout: VkImageLayout,
    newLayout: VkImageLayout,
    srcQueueFamilyIndex: u32,
    dstQueueFamilyIndex: u32,
    image: VkImage,
    subresourceRange: VkImageSubresourceRange,
};
pub const VkImageMemoryBarrier = struct_VkImageMemoryBarrier;
pub const struct_VkMemoryBarrier = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
};
pub const VkMemoryBarrier = struct_VkMemoryBarrier;
pub const struct_VkPipelineCacheHeaderVersionOne = extern struct {
    headerSize: u32,
    headerVersion: VkPipelineCacheHeaderVersion,
    vendorID: u32,
    deviceID: u32,
    pipelineCacheUUID: [16]u8,
};
pub const VkPipelineCacheHeaderVersionOne = struct_VkPipelineCacheHeaderVersionOne;
pub const PFN_vkAllocationFunction = ?*const fn (?*anyopaque, usize, usize, VkSystemAllocationScope) callconv(.C) ?*anyopaque;
pub const PFN_vkFreeFunction = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const PFN_vkInternalAllocationNotification = ?*const fn (?*anyopaque, usize, VkInternalAllocationType, VkSystemAllocationScope) callconv(.C) void;
pub const PFN_vkInternalFreeNotification = ?*const fn (?*anyopaque, usize, VkInternalAllocationType, VkSystemAllocationScope) callconv(.C) void;
pub const PFN_vkReallocationFunction = ?*const fn (?*anyopaque, ?*anyopaque, usize, usize, VkSystemAllocationScope) callconv(.C) ?*anyopaque;
pub const PFN_vkVoidFunction = ?*const fn () callconv(.C) void;
pub const struct_VkAllocationCallbacks = extern struct {
    pUserData: ?*anyopaque,
    pfnAllocation: PFN_vkAllocationFunction,
    pfnReallocation: PFN_vkReallocationFunction,
    pfnFree: PFN_vkFreeFunction,
    pfnInternalAllocation: PFN_vkInternalAllocationNotification,
    pfnInternalFree: PFN_vkInternalFreeNotification,
};
pub const VkAllocationCallbacks = struct_VkAllocationCallbacks;
pub const struct_VkApplicationInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    pApplicationName: [*c]const u8,
    applicationVersion: u32,
    pEngineName: [*c]const u8,
    engineVersion: u32,
    apiVersion: u32,
};
pub const VkApplicationInfo = struct_VkApplicationInfo;
pub const struct_VkFormatProperties = extern struct {
    linearTilingFeatures: VkFormatFeatureFlags,
    optimalTilingFeatures: VkFormatFeatureFlags,
    bufferFeatures: VkFormatFeatureFlags,
};
pub const VkFormatProperties = struct_VkFormatProperties;
pub const struct_VkImageFormatProperties = extern struct {
    maxExtent: VkExtent3D,
    maxMipLevels: u32,
    maxArrayLayers: u32,
    sampleCounts: VkSampleCountFlags,
    maxResourceSize: VkDeviceSize,
};
pub const VkImageFormatProperties = struct_VkImageFormatProperties;
pub const struct_VkInstanceCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkInstanceCreateFlags,
    pApplicationInfo: [*c]const VkApplicationInfo,
    enabledLayerCount: u32,
    ppEnabledLayerNames: [*c]const [*c]const u8,
    enabledExtensionCount: u32,
    ppEnabledExtensionNames: [*c]const [*c]const u8,
};
pub const VkInstanceCreateInfo = struct_VkInstanceCreateInfo;
pub const struct_VkMemoryHeap = extern struct {
    size: VkDeviceSize,
    flags: VkMemoryHeapFlags,
};
pub const VkMemoryHeap = struct_VkMemoryHeap;
pub const struct_VkMemoryType = extern struct {
    propertyFlags: VkMemoryPropertyFlags,
    heapIndex: u32,
};
pub const VkMemoryType = struct_VkMemoryType;
pub const struct_VkPhysicalDeviceFeatures = extern struct {
    robustBufferAccess: VkBool32,
    fullDrawIndexUint32: VkBool32,
    imageCubeArray: VkBool32,
    independentBlend: VkBool32,
    geometryShader: VkBool32,
    tessellationShader: VkBool32,
    sampleRateShading: VkBool32,
    dualSrcBlend: VkBool32,
    logicOp: VkBool32,
    multiDrawIndirect: VkBool32,
    drawIndirectFirstInstance: VkBool32,
    depthClamp: VkBool32,
    depthBiasClamp: VkBool32,
    fillModeNonSolid: VkBool32,
    depthBounds: VkBool32,
    wideLines: VkBool32,
    largePoints: VkBool32,
    alphaToOne: VkBool32,
    multiViewport: VkBool32,
    samplerAnisotropy: VkBool32,
    textureCompressionETC2: VkBool32,
    textureCompressionASTC_LDR: VkBool32,
    textureCompressionBC: VkBool32,
    occlusionQueryPrecise: VkBool32,
    pipelineStatisticsQuery: VkBool32,
    vertexPipelineStoresAndAtomics: VkBool32,
    fragmentStoresAndAtomics: VkBool32,
    shaderTessellationAndGeometryPointSize: VkBool32,
    shaderImageGatherExtended: VkBool32,
    shaderStorageImageExtendedFormats: VkBool32,
    shaderStorageImageMultisample: VkBool32,
    shaderStorageImageReadWithoutFormat: VkBool32,
    shaderStorageImageWriteWithoutFormat: VkBool32,
    shaderUniformBufferArrayDynamicIndexing: VkBool32,
    shaderSampledImageArrayDynamicIndexing: VkBool32,
    shaderStorageBufferArrayDynamicIndexing: VkBool32,
    shaderStorageImageArrayDynamicIndexing: VkBool32,
    shaderClipDistance: VkBool32,
    shaderCullDistance: VkBool32,
    shaderFloat64: VkBool32,
    shaderInt64: VkBool32,
    shaderInt16: VkBool32,
    shaderResourceResidency: VkBool32,
    shaderResourceMinLod: VkBool32,
    sparseBinding: VkBool32,
    sparseResidencyBuffer: VkBool32,
    sparseResidencyImage2D: VkBool32,
    sparseResidencyImage3D: VkBool32,
    sparseResidency2Samples: VkBool32,
    sparseResidency4Samples: VkBool32,
    sparseResidency8Samples: VkBool32,
    sparseResidency16Samples: VkBool32,
    sparseResidencyAliased: VkBool32,
    variableMultisampleRate: VkBool32,
    inheritedQueries: VkBool32,
};
pub const VkPhysicalDeviceFeatures = struct_VkPhysicalDeviceFeatures;
pub const struct_VkPhysicalDeviceLimits = extern struct {
    maxImageDimension1D: u32,
    maxImageDimension2D: u32,
    maxImageDimension3D: u32,
    maxImageDimensionCube: u32,
    maxImageArrayLayers: u32,
    maxTexelBufferElements: u32,
    maxUniformBufferRange: u32,
    maxStorageBufferRange: u32,
    maxPushConstantsSize: u32,
    maxMemoryAllocationCount: u32,
    maxSamplerAllocationCount: u32,
    bufferImageGranularity: VkDeviceSize,
    sparseAddressSpaceSize: VkDeviceSize,
    maxBoundDescriptorSets: u32,
    maxPerStageDescriptorSamplers: u32,
    maxPerStageDescriptorUniformBuffers: u32,
    maxPerStageDescriptorStorageBuffers: u32,
    maxPerStageDescriptorSampledImages: u32,
    maxPerStageDescriptorStorageImages: u32,
    maxPerStageDescriptorInputAttachments: u32,
    maxPerStageResources: u32,
    maxDescriptorSetSamplers: u32,
    maxDescriptorSetUniformBuffers: u32,
    maxDescriptorSetUniformBuffersDynamic: u32,
    maxDescriptorSetStorageBuffers: u32,
    maxDescriptorSetStorageBuffersDynamic: u32,
    maxDescriptorSetSampledImages: u32,
    maxDescriptorSetStorageImages: u32,
    maxDescriptorSetInputAttachments: u32,
    maxVertexInputAttributes: u32,
    maxVertexInputBindings: u32,
    maxVertexInputAttributeOffset: u32,
    maxVertexInputBindingStride: u32,
    maxVertexOutputComponents: u32,
    maxTessellationGenerationLevel: u32,
    maxTessellationPatchSize: u32,
    maxTessellationControlPerVertexInputComponents: u32,
    maxTessellationControlPerVertexOutputComponents: u32,
    maxTessellationControlPerPatchOutputComponents: u32,
    maxTessellationControlTotalOutputComponents: u32,
    maxTessellationEvaluationInputComponents: u32,
    maxTessellationEvaluationOutputComponents: u32,
    maxGeometryShaderInvocations: u32,
    maxGeometryInputComponents: u32,
    maxGeometryOutputComponents: u32,
    maxGeometryOutputVertices: u32,
    maxGeometryTotalOutputComponents: u32,
    maxFragmentInputComponents: u32,
    maxFragmentOutputAttachments: u32,
    maxFragmentDualSrcAttachments: u32,
    maxFragmentCombinedOutputResources: u32,
    maxComputeSharedMemorySize: u32,
    maxComputeWorkGroupCount: [3]u32,
    maxComputeWorkGroupInvocations: u32,
    maxComputeWorkGroupSize: [3]u32,
    subPixelPrecisionBits: u32,
    subTexelPrecisionBits: u32,
    mipmapPrecisionBits: u32,
    maxDrawIndexedIndexValue: u32,
    maxDrawIndirectCount: u32,
    maxSamplerLodBias: f32,
    maxSamplerAnisotropy: f32,
    maxViewports: u32,
    maxViewportDimensions: [2]u32,
    viewportBoundsRange: [2]f32,
    viewportSubPixelBits: u32,
    minMemoryMapAlignment: usize,
    minTexelBufferOffsetAlignment: VkDeviceSize,
    minUniformBufferOffsetAlignment: VkDeviceSize,
    minStorageBufferOffsetAlignment: VkDeviceSize,
    minTexelOffset: i32,
    maxTexelOffset: u32,
    minTexelGatherOffset: i32,
    maxTexelGatherOffset: u32,
    minInterpolationOffset: f32,
    maxInterpolationOffset: f32,
    subPixelInterpolationOffsetBits: u32,
    maxFramebufferWidth: u32,
    maxFramebufferHeight: u32,
    maxFramebufferLayers: u32,
    framebufferColorSampleCounts: VkSampleCountFlags,
    framebufferDepthSampleCounts: VkSampleCountFlags,
    framebufferStencilSampleCounts: VkSampleCountFlags,
    framebufferNoAttachmentsSampleCounts: VkSampleCountFlags,
    maxColorAttachments: u32,
    sampledImageColorSampleCounts: VkSampleCountFlags,
    sampledImageIntegerSampleCounts: VkSampleCountFlags,
    sampledImageDepthSampleCounts: VkSampleCountFlags,
    sampledImageStencilSampleCounts: VkSampleCountFlags,
    storageImageSampleCounts: VkSampleCountFlags,
    maxSampleMaskWords: u32,
    timestampComputeAndGraphics: VkBool32,
    timestampPeriod: f32,
    maxClipDistances: u32,
    maxCullDistances: u32,
    maxCombinedClipAndCullDistances: u32,
    discreteQueuePriorities: u32,
    pointSizeRange: [2]f32,
    lineWidthRange: [2]f32,
    pointSizeGranularity: f32,
    lineWidthGranularity: f32,
    strictLines: VkBool32,
    standardSampleLocations: VkBool32,
    optimalBufferCopyOffsetAlignment: VkDeviceSize,
    optimalBufferCopyRowPitchAlignment: VkDeviceSize,
    nonCoherentAtomSize: VkDeviceSize,
};
pub const VkPhysicalDeviceLimits = struct_VkPhysicalDeviceLimits;
pub const struct_VkPhysicalDeviceMemoryProperties = extern struct {
    memoryTypeCount: u32,
    memoryTypes: [32]VkMemoryType,
    memoryHeapCount: u32,
    memoryHeaps: [16]VkMemoryHeap,
};
pub const VkPhysicalDeviceMemoryProperties = struct_VkPhysicalDeviceMemoryProperties;
pub const struct_VkPhysicalDeviceSparseProperties = extern struct {
    residencyStandard2DBlockShape: VkBool32,
    residencyStandard2DMultisampleBlockShape: VkBool32,
    residencyStandard3DBlockShape: VkBool32,
    residencyAlignedMipSize: VkBool32,
    residencyNonResidentStrict: VkBool32,
};
pub const VkPhysicalDeviceSparseProperties = struct_VkPhysicalDeviceSparseProperties;
pub const struct_VkPhysicalDeviceProperties = extern struct {
    apiVersion: u32,
    driverVersion: u32,
    vendorID: u32,
    deviceID: u32,
    deviceType: VkPhysicalDeviceType,
    deviceName: [256]u8,
    pipelineCacheUUID: [16]u8,
    limits: VkPhysicalDeviceLimits,
    sparseProperties: VkPhysicalDeviceSparseProperties,
};
pub const VkPhysicalDeviceProperties = struct_VkPhysicalDeviceProperties;
pub const struct_VkQueueFamilyProperties = extern struct {
    queueFlags: VkQueueFlags,
    queueCount: u32,
    timestampValidBits: u32,
    minImageTransferGranularity: VkExtent3D,
};
pub const VkQueueFamilyProperties = struct_VkQueueFamilyProperties;
pub const struct_VkDeviceQueueCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkDeviceQueueCreateFlags,
    queueFamilyIndex: u32,
    queueCount: u32,
    pQueuePriorities: [*c]const f32,
};
pub const VkDeviceQueueCreateInfo = struct_VkDeviceQueueCreateInfo;
pub const struct_VkDeviceCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkDeviceCreateFlags,
    queueCreateInfoCount: u32,
    pQueueCreateInfos: [*c]const VkDeviceQueueCreateInfo,
    enabledLayerCount: u32,
    ppEnabledLayerNames: [*c]const [*c]const u8,
    enabledExtensionCount: u32,
    ppEnabledExtensionNames: [*c]const [*c]const u8,
    pEnabledFeatures: [*c]const VkPhysicalDeviceFeatures,
};
pub const VkDeviceCreateInfo = struct_VkDeviceCreateInfo;
pub const struct_VkExtensionProperties = extern struct {
    extensionName: [256]u8,
    specVersion: u32,
};
pub const VkExtensionProperties = struct_VkExtensionProperties;
pub const struct_VkLayerProperties = extern struct {
    layerName: [256]u8,
    specVersion: u32,
    implementationVersion: u32,
    description: [256]u8,
};
pub const VkLayerProperties = struct_VkLayerProperties;
pub const struct_VkSubmitInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    waitSemaphoreCount: u32,
    pWaitSemaphores: [*c]const VkSemaphore,
    pWaitDstStageMask: [*c]const VkPipelineStageFlags,
    commandBufferCount: u32,
    pCommandBuffers: [*c]const VkCommandBuffer,
    signalSemaphoreCount: u32,
    pSignalSemaphores: [*c]const VkSemaphore,
};
pub const VkSubmitInfo = struct_VkSubmitInfo;
pub const struct_VkMappedMemoryRange = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    memory: VkDeviceMemory,
    offset: VkDeviceSize,
    size: VkDeviceSize,
};
pub const VkMappedMemoryRange = struct_VkMappedMemoryRange;
pub const struct_VkMemoryAllocateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    allocationSize: VkDeviceSize,
    memoryTypeIndex: u32,
};
pub const VkMemoryAllocateInfo = struct_VkMemoryAllocateInfo;
pub const struct_VkMemoryRequirements = extern struct {
    size: VkDeviceSize,
    alignment: VkDeviceSize,
    memoryTypeBits: u32,
};
pub const VkMemoryRequirements = struct_VkMemoryRequirements;
pub const struct_VkSparseMemoryBind = extern struct {
    resourceOffset: VkDeviceSize,
    size: VkDeviceSize,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    flags: VkSparseMemoryBindFlags,
};
pub const VkSparseMemoryBind = struct_VkSparseMemoryBind;
pub const struct_VkSparseBufferMemoryBindInfo = extern struct {
    buffer: VkBuffer,
    bindCount: u32,
    pBinds: [*c]const VkSparseMemoryBind,
};
pub const VkSparseBufferMemoryBindInfo = struct_VkSparseBufferMemoryBindInfo;
pub const struct_VkSparseImageOpaqueMemoryBindInfo = extern struct {
    image: VkImage,
    bindCount: u32,
    pBinds: [*c]const VkSparseMemoryBind,
};
pub const VkSparseImageOpaqueMemoryBindInfo = struct_VkSparseImageOpaqueMemoryBindInfo;
pub const struct_VkImageSubresource = extern struct {
    aspectMask: VkImageAspectFlags,
    mipLevel: u32,
    arrayLayer: u32,
};
pub const VkImageSubresource = struct_VkImageSubresource;
pub const struct_VkSparseImageMemoryBind = extern struct {
    subresource: VkImageSubresource,
    offset: VkOffset3D,
    extent: VkExtent3D,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    flags: VkSparseMemoryBindFlags,
};
pub const VkSparseImageMemoryBind = struct_VkSparseImageMemoryBind;
pub const struct_VkSparseImageMemoryBindInfo = extern struct {
    image: VkImage,
    bindCount: u32,
    pBinds: [*c]const VkSparseImageMemoryBind,
};
pub const VkSparseImageMemoryBindInfo = struct_VkSparseImageMemoryBindInfo;
pub const struct_VkBindSparseInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    waitSemaphoreCount: u32,
    pWaitSemaphores: [*c]const VkSemaphore,
    bufferBindCount: u32,
    pBufferBinds: [*c]const VkSparseBufferMemoryBindInfo,
    imageOpaqueBindCount: u32,
    pImageOpaqueBinds: [*c]const VkSparseImageOpaqueMemoryBindInfo,
    imageBindCount: u32,
    pImageBinds: [*c]const VkSparseImageMemoryBindInfo,
    signalSemaphoreCount: u32,
    pSignalSemaphores: [*c]const VkSemaphore,
};
pub const VkBindSparseInfo = struct_VkBindSparseInfo;
pub const struct_VkSparseImageFormatProperties = extern struct {
    aspectMask: VkImageAspectFlags,
    imageGranularity: VkExtent3D,
    flags: VkSparseImageFormatFlags,
};
pub const VkSparseImageFormatProperties = struct_VkSparseImageFormatProperties;
pub const struct_VkSparseImageMemoryRequirements = extern struct {
    formatProperties: VkSparseImageFormatProperties,
    imageMipTailFirstLod: u32,
    imageMipTailSize: VkDeviceSize,
    imageMipTailOffset: VkDeviceSize,
    imageMipTailStride: VkDeviceSize,
};
pub const VkSparseImageMemoryRequirements = struct_VkSparseImageMemoryRequirements;
pub const struct_VkFenceCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkFenceCreateFlags,
};
pub const VkFenceCreateInfo = struct_VkFenceCreateInfo;
pub const struct_VkSemaphoreCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkSemaphoreCreateFlags,
};
pub const VkSemaphoreCreateInfo = struct_VkSemaphoreCreateInfo;
pub const struct_VkEventCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkEventCreateFlags,
};
pub const VkEventCreateInfo = struct_VkEventCreateInfo;
pub const struct_VkQueryPoolCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkQueryPoolCreateFlags,
    queryType: VkQueryType,
    queryCount: u32,
    pipelineStatistics: VkQueryPipelineStatisticFlags,
};
pub const VkQueryPoolCreateInfo = struct_VkQueryPoolCreateInfo;
pub const struct_VkBufferCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkBufferCreateFlags,
    size: VkDeviceSize,
    usage: VkBufferUsageFlags,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: [*c]const u32,
};
pub const VkBufferCreateInfo = struct_VkBufferCreateInfo;
pub const struct_VkBufferViewCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkBufferViewCreateFlags,
    buffer: VkBuffer,
    format: VkFormat,
    offset: VkDeviceSize,
    range: VkDeviceSize,
};
pub const VkBufferViewCreateInfo = struct_VkBufferViewCreateInfo;
pub const struct_VkImageCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkImageCreateFlags,
    imageType: VkImageType,
    format: VkFormat,
    extent: VkExtent3D,
    mipLevels: u32,
    arrayLayers: u32,
    samples: VkSampleCountFlagBits,
    tiling: VkImageTiling,
    usage: VkImageUsageFlags,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: [*c]const u32,
    initialLayout: VkImageLayout,
};
pub const VkImageCreateInfo = struct_VkImageCreateInfo;
pub const struct_VkSubresourceLayout = extern struct {
    offset: VkDeviceSize,
    size: VkDeviceSize,
    rowPitch: VkDeviceSize,
    arrayPitch: VkDeviceSize,
    depthPitch: VkDeviceSize,
};
pub const VkSubresourceLayout = struct_VkSubresourceLayout;
pub const struct_VkComponentMapping = extern struct {
    r: VkComponentSwizzle,
    g: VkComponentSwizzle,
    b: VkComponentSwizzle,
    a: VkComponentSwizzle,
};
pub const VkComponentMapping = struct_VkComponentMapping;
pub const struct_VkImageViewCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkImageViewCreateFlags,
    image: VkImage,
    viewType: VkImageViewType,
    format: VkFormat,
    components: VkComponentMapping,
    subresourceRange: VkImageSubresourceRange,
};
pub const VkImageViewCreateInfo = struct_VkImageViewCreateInfo;
pub const struct_VkShaderModuleCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkShaderModuleCreateFlags,
    codeSize: usize,
    pCode: [*c]const u32,
};
pub const VkShaderModuleCreateInfo = struct_VkShaderModuleCreateInfo;
pub const struct_VkPipelineCacheCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineCacheCreateFlags,
    initialDataSize: usize,
    pInitialData: ?*const anyopaque,
};
pub const VkPipelineCacheCreateInfo = struct_VkPipelineCacheCreateInfo;
pub const struct_VkSpecializationMapEntry = extern struct {
    constantID: u32,
    offset: u32,
    size: usize,
};
pub const VkSpecializationMapEntry = struct_VkSpecializationMapEntry;
pub const struct_VkSpecializationInfo = extern struct {
    mapEntryCount: u32,
    pMapEntries: [*c]const VkSpecializationMapEntry,
    dataSize: usize,
    pData: ?*const anyopaque,
};
pub const VkSpecializationInfo = struct_VkSpecializationInfo;
pub const struct_VkPipelineShaderStageCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineShaderStageCreateFlags,
    stage: VkShaderStageFlagBits,
    module: VkShaderModule,
    pName: [*c]const u8,
    pSpecializationInfo: [*c]const VkSpecializationInfo,
};
pub const VkPipelineShaderStageCreateInfo = struct_VkPipelineShaderStageCreateInfo;
pub const struct_VkComputePipelineCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineCreateFlags,
    stage: VkPipelineShaderStageCreateInfo,
    layout: VkPipelineLayout,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
};
pub const VkComputePipelineCreateInfo = struct_VkComputePipelineCreateInfo;
pub const struct_VkVertexInputBindingDescription = extern struct {
    binding: u32,
    stride: u32,
    inputRate: VkVertexInputRate,
};
pub const VkVertexInputBindingDescription = struct_VkVertexInputBindingDescription;
pub const struct_VkVertexInputAttributeDescription = extern struct {
    location: u32,
    binding: u32,
    format: VkFormat,
    offset: u32,
};
pub const VkVertexInputAttributeDescription = struct_VkVertexInputAttributeDescription;
pub const struct_VkPipelineVertexInputStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineVertexInputStateCreateFlags,
    vertexBindingDescriptionCount: u32,
    pVertexBindingDescriptions: [*c]const VkVertexInputBindingDescription,
    vertexAttributeDescriptionCount: u32,
    pVertexAttributeDescriptions: [*c]const VkVertexInputAttributeDescription,
};
pub const VkPipelineVertexInputStateCreateInfo = struct_VkPipelineVertexInputStateCreateInfo;
pub const struct_VkPipelineInputAssemblyStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineInputAssemblyStateCreateFlags,
    topology: VkPrimitiveTopology,
    primitiveRestartEnable: VkBool32,
};
pub const VkPipelineInputAssemblyStateCreateInfo = struct_VkPipelineInputAssemblyStateCreateInfo;
pub const struct_VkPipelineTessellationStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineTessellationStateCreateFlags,
    patchControlPoints: u32,
};
pub const VkPipelineTessellationStateCreateInfo = struct_VkPipelineTessellationStateCreateInfo;
pub const struct_VkViewport = extern struct {
    x: f32,
    y: f32,
    width: f32,
    height: f32,
    minDepth: f32,
    maxDepth: f32,
};
pub const VkViewport = struct_VkViewport;
pub const struct_VkPipelineViewportStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineViewportStateCreateFlags,
    viewportCount: u32,
    pViewports: [*c]const VkViewport,
    scissorCount: u32,
    pScissors: [*c]const VkRect2D,
};
pub const VkPipelineViewportStateCreateInfo = struct_VkPipelineViewportStateCreateInfo;
pub const struct_VkPipelineRasterizationStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineRasterizationStateCreateFlags,
    depthClampEnable: VkBool32,
    rasterizerDiscardEnable: VkBool32,
    polygonMode: VkPolygonMode,
    cullMode: VkCullModeFlags,
    frontFace: VkFrontFace,
    depthBiasEnable: VkBool32,
    depthBiasConstantFactor: f32,
    depthBiasClamp: f32,
    depthBiasSlopeFactor: f32,
    lineWidth: f32,
};
pub const VkPipelineRasterizationStateCreateInfo = struct_VkPipelineRasterizationStateCreateInfo;
pub const struct_VkPipelineMultisampleStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineMultisampleStateCreateFlags,
    rasterizationSamples: VkSampleCountFlagBits,
    sampleShadingEnable: VkBool32,
    minSampleShading: f32,
    pSampleMask: [*c]const VkSampleMask,
    alphaToCoverageEnable: VkBool32,
    alphaToOneEnable: VkBool32,
};
pub const VkPipelineMultisampleStateCreateInfo = struct_VkPipelineMultisampleStateCreateInfo;
pub const struct_VkStencilOpState = extern struct {
    failOp: VkStencilOp,
    passOp: VkStencilOp,
    depthFailOp: VkStencilOp,
    compareOp: VkCompareOp,
    compareMask: u32,
    writeMask: u32,
    reference: u32,
};
pub const VkStencilOpState = struct_VkStencilOpState;
pub const struct_VkPipelineDepthStencilStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineDepthStencilStateCreateFlags,
    depthTestEnable: VkBool32,
    depthWriteEnable: VkBool32,
    depthCompareOp: VkCompareOp,
    depthBoundsTestEnable: VkBool32,
    stencilTestEnable: VkBool32,
    front: VkStencilOpState,
    back: VkStencilOpState,
    minDepthBounds: f32,
    maxDepthBounds: f32,
};
pub const VkPipelineDepthStencilStateCreateInfo = struct_VkPipelineDepthStencilStateCreateInfo;
pub const struct_VkPipelineColorBlendAttachmentState = extern struct {
    blendEnable: VkBool32,
    srcColorBlendFactor: VkBlendFactor,
    dstColorBlendFactor: VkBlendFactor,
    colorBlendOp: VkBlendOp,
    srcAlphaBlendFactor: VkBlendFactor,
    dstAlphaBlendFactor: VkBlendFactor,
    alphaBlendOp: VkBlendOp,
    colorWriteMask: VkColorComponentFlags,
};
pub const VkPipelineColorBlendAttachmentState = struct_VkPipelineColorBlendAttachmentState;
pub const struct_VkPipelineColorBlendStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineColorBlendStateCreateFlags,
    logicOpEnable: VkBool32,
    logicOp: VkLogicOp,
    attachmentCount: u32,
    pAttachments: [*c]const VkPipelineColorBlendAttachmentState,
    blendConstants: [4]f32,
};
pub const VkPipelineColorBlendStateCreateInfo = struct_VkPipelineColorBlendStateCreateInfo;
pub const struct_VkPipelineDynamicStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineDynamicStateCreateFlags,
    dynamicStateCount: u32,
    pDynamicStates: [*c]const VkDynamicState,
};
pub const VkPipelineDynamicStateCreateInfo = struct_VkPipelineDynamicStateCreateInfo;
pub const struct_VkGraphicsPipelineCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineCreateFlags,
    stageCount: u32,
    pStages: [*c]const VkPipelineShaderStageCreateInfo,
    pVertexInputState: [*c]const VkPipelineVertexInputStateCreateInfo,
    pInputAssemblyState: [*c]const VkPipelineInputAssemblyStateCreateInfo,
    pTessellationState: [*c]const VkPipelineTessellationStateCreateInfo,
    pViewportState: [*c]const VkPipelineViewportStateCreateInfo,
    pRasterizationState: [*c]const VkPipelineRasterizationStateCreateInfo,
    pMultisampleState: [*c]const VkPipelineMultisampleStateCreateInfo,
    pDepthStencilState: [*c]const VkPipelineDepthStencilStateCreateInfo,
    pColorBlendState: [*c]const VkPipelineColorBlendStateCreateInfo,
    pDynamicState: [*c]const VkPipelineDynamicStateCreateInfo,
    layout: VkPipelineLayout,
    renderPass: VkRenderPass,
    subpass: u32,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
};
pub const VkGraphicsPipelineCreateInfo = struct_VkGraphicsPipelineCreateInfo;
pub const struct_VkPushConstantRange = extern struct {
    stageFlags: VkShaderStageFlags,
    offset: u32,
    size: u32,
};
pub const VkPushConstantRange = struct_VkPushConstantRange;
pub const struct_VkPipelineLayoutCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineLayoutCreateFlags,
    setLayoutCount: u32,
    pSetLayouts: [*c]const VkDescriptorSetLayout,
    pushConstantRangeCount: u32,
    pPushConstantRanges: [*c]const VkPushConstantRange,
};
pub const VkPipelineLayoutCreateInfo = struct_VkPipelineLayoutCreateInfo;
pub const struct_VkSamplerCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkSamplerCreateFlags,
    magFilter: VkFilter,
    minFilter: VkFilter,
    mipmapMode: VkSamplerMipmapMode,
    addressModeU: VkSamplerAddressMode,
    addressModeV: VkSamplerAddressMode,
    addressModeW: VkSamplerAddressMode,
    mipLodBias: f32,
    anisotropyEnable: VkBool32,
    maxAnisotropy: f32,
    compareEnable: VkBool32,
    compareOp: VkCompareOp,
    minLod: f32,
    maxLod: f32,
    borderColor: VkBorderColor,
    unnormalizedCoordinates: VkBool32,
};
pub const VkSamplerCreateInfo = struct_VkSamplerCreateInfo;
pub const struct_VkCopyDescriptorSet = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcSet: VkDescriptorSet,
    srcBinding: u32,
    srcArrayElement: u32,
    dstSet: VkDescriptorSet,
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
};
pub const VkCopyDescriptorSet = struct_VkCopyDescriptorSet;
pub const struct_VkDescriptorBufferInfo = extern struct {
    buffer: VkBuffer,
    offset: VkDeviceSize,
    range: VkDeviceSize,
};
pub const VkDescriptorBufferInfo = struct_VkDescriptorBufferInfo;
pub const struct_VkDescriptorImageInfo = extern struct {
    sampler: VkSampler,
    imageView: VkImageView,
    imageLayout: VkImageLayout,
};
pub const VkDescriptorImageInfo = struct_VkDescriptorImageInfo;
pub const struct_VkDescriptorPoolSize = extern struct {
    type: VkDescriptorType,
    descriptorCount: u32,
};
pub const VkDescriptorPoolSize = struct_VkDescriptorPoolSize;
pub const struct_VkDescriptorPoolCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkDescriptorPoolCreateFlags,
    maxSets: u32,
    poolSizeCount: u32,
    pPoolSizes: [*c]const VkDescriptorPoolSize,
};
pub const VkDescriptorPoolCreateInfo = struct_VkDescriptorPoolCreateInfo;
pub const struct_VkDescriptorSetAllocateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    descriptorPool: VkDescriptorPool,
    descriptorSetCount: u32,
    pSetLayouts: [*c]const VkDescriptorSetLayout,
};
pub const VkDescriptorSetAllocateInfo = struct_VkDescriptorSetAllocateInfo;
pub const struct_VkDescriptorSetLayoutBinding = extern struct {
    binding: u32,
    descriptorType: VkDescriptorType,
    descriptorCount: u32,
    stageFlags: VkShaderStageFlags,
    pImmutableSamplers: [*c]const VkSampler,
};
pub const VkDescriptorSetLayoutBinding = struct_VkDescriptorSetLayoutBinding;
pub const struct_VkDescriptorSetLayoutCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkDescriptorSetLayoutCreateFlags,
    bindingCount: u32,
    pBindings: [*c]const VkDescriptorSetLayoutBinding,
};
pub const VkDescriptorSetLayoutCreateInfo = struct_VkDescriptorSetLayoutCreateInfo;
pub const struct_VkWriteDescriptorSet = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    dstSet: VkDescriptorSet,
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
    descriptorType: VkDescriptorType,
    pImageInfo: [*c]const VkDescriptorImageInfo,
    pBufferInfo: [*c]const VkDescriptorBufferInfo,
    pTexelBufferView: [*c]const VkBufferView,
};
pub const VkWriteDescriptorSet = struct_VkWriteDescriptorSet;
pub const struct_VkAttachmentDescription = extern struct {
    flags: VkAttachmentDescriptionFlags,
    format: VkFormat,
    samples: VkSampleCountFlagBits,
    loadOp: VkAttachmentLoadOp,
    storeOp: VkAttachmentStoreOp,
    stencilLoadOp: VkAttachmentLoadOp,
    stencilStoreOp: VkAttachmentStoreOp,
    initialLayout: VkImageLayout,
    finalLayout: VkImageLayout,
};
pub const VkAttachmentDescription = struct_VkAttachmentDescription;
pub const struct_VkAttachmentReference = extern struct {
    attachment: u32,
    layout: VkImageLayout,
};
pub const VkAttachmentReference = struct_VkAttachmentReference;
pub const struct_VkFramebufferCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkFramebufferCreateFlags,
    renderPass: VkRenderPass,
    attachmentCount: u32,
    pAttachments: [*c]const VkImageView,
    width: u32,
    height: u32,
    layers: u32,
};
pub const VkFramebufferCreateInfo = struct_VkFramebufferCreateInfo;
pub const struct_VkSubpassDescription = extern struct {
    flags: VkSubpassDescriptionFlags,
    pipelineBindPoint: VkPipelineBindPoint,
    inputAttachmentCount: u32,
    pInputAttachments: [*c]const VkAttachmentReference,
    colorAttachmentCount: u32,
    pColorAttachments: [*c]const VkAttachmentReference,
    pResolveAttachments: [*c]const VkAttachmentReference,
    pDepthStencilAttachment: [*c]const VkAttachmentReference,
    preserveAttachmentCount: u32,
    pPreserveAttachments: [*c]const u32,
};
pub const VkSubpassDescription = struct_VkSubpassDescription;
pub const struct_VkSubpassDependency = extern struct {
    srcSubpass: u32,
    dstSubpass: u32,
    srcStageMask: VkPipelineStageFlags,
    dstStageMask: VkPipelineStageFlags,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    dependencyFlags: VkDependencyFlags,
};
pub const VkSubpassDependency = struct_VkSubpassDependency;
pub const struct_VkRenderPassCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkRenderPassCreateFlags,
    attachmentCount: u32,
    pAttachments: [*c]const VkAttachmentDescription,
    subpassCount: u32,
    pSubpasses: [*c]const VkSubpassDescription,
    dependencyCount: u32,
    pDependencies: [*c]const VkSubpassDependency,
};
pub const VkRenderPassCreateInfo = struct_VkRenderPassCreateInfo;
pub const struct_VkCommandPoolCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkCommandPoolCreateFlags,
    queueFamilyIndex: u32,
};
pub const VkCommandPoolCreateInfo = struct_VkCommandPoolCreateInfo;
pub const struct_VkCommandBufferAllocateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    commandPool: VkCommandPool,
    level: VkCommandBufferLevel,
    commandBufferCount: u32,
};
pub const VkCommandBufferAllocateInfo = struct_VkCommandBufferAllocateInfo;
pub const struct_VkCommandBufferInheritanceInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    renderPass: VkRenderPass,
    subpass: u32,
    framebuffer: VkFramebuffer,
    occlusionQueryEnable: VkBool32,
    queryFlags: VkQueryControlFlags,
    pipelineStatistics: VkQueryPipelineStatisticFlags,
};
pub const VkCommandBufferInheritanceInfo = struct_VkCommandBufferInheritanceInfo;
pub const struct_VkCommandBufferBeginInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkCommandBufferUsageFlags,
    pInheritanceInfo: [*c]const VkCommandBufferInheritanceInfo,
};
pub const VkCommandBufferBeginInfo = struct_VkCommandBufferBeginInfo;
pub const struct_VkBufferCopy = extern struct {
    srcOffset: VkDeviceSize,
    dstOffset: VkDeviceSize,
    size: VkDeviceSize,
};
pub const VkBufferCopy = struct_VkBufferCopy;
pub const struct_VkImageSubresourceLayers = extern struct {
    aspectMask: VkImageAspectFlags,
    mipLevel: u32,
    baseArrayLayer: u32,
    layerCount: u32,
};
pub const VkImageSubresourceLayers = struct_VkImageSubresourceLayers;
pub const struct_VkBufferImageCopy = extern struct {
    bufferOffset: VkDeviceSize,
    bufferRowLength: u32,
    bufferImageHeight: u32,
    imageSubresource: VkImageSubresourceLayers,
    imageOffset: VkOffset3D,
    imageExtent: VkExtent3D,
};
pub const VkBufferImageCopy = struct_VkBufferImageCopy;
pub const union_VkClearColorValue = extern union {
    float32: [4]f32,
    int32: [4]i32,
    uint32: [4]u32,
};
pub const VkClearColorValue = union_VkClearColorValue;
pub const struct_VkClearDepthStencilValue = extern struct {
    depth: f32,
    stencil: u32,
};
pub const VkClearDepthStencilValue = struct_VkClearDepthStencilValue;
pub const union_VkClearValue = extern union {
    color: VkClearColorValue,
    depthStencil: VkClearDepthStencilValue,
};
pub const VkClearValue = union_VkClearValue;
pub const struct_VkClearAttachment = extern struct {
    aspectMask: VkImageAspectFlags,
    colorAttachment: u32,
    clearValue: VkClearValue,
};
pub const VkClearAttachment = struct_VkClearAttachment;
pub const struct_VkClearRect = extern struct {
    rect: VkRect2D,
    baseArrayLayer: u32,
    layerCount: u32,
};
pub const VkClearRect = struct_VkClearRect;
pub const struct_VkImageBlit = extern struct {
    srcSubresource: VkImageSubresourceLayers,
    srcOffsets: [2]VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffsets: [2]VkOffset3D,
};
pub const VkImageBlit = struct_VkImageBlit;
pub const struct_VkImageCopy = extern struct {
    srcSubresource: VkImageSubresourceLayers,
    srcOffset: VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffset: VkOffset3D,
    extent: VkExtent3D,
};
pub const VkImageCopy = struct_VkImageCopy;
pub const struct_VkImageResolve = extern struct {
    srcSubresource: VkImageSubresourceLayers,
    srcOffset: VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffset: VkOffset3D,
    extent: VkExtent3D,
};
pub const VkImageResolve = struct_VkImageResolve;
pub const struct_VkRenderPassBeginInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    renderPass: VkRenderPass,
    framebuffer: VkFramebuffer,
    renderArea: VkRect2D,
    clearValueCount: u32,
    pClearValues: [*c]const VkClearValue,
};
pub const VkRenderPassBeginInfo = struct_VkRenderPassBeginInfo;
pub const PFN_vkCreateInstance = ?*const fn ([*c]const VkInstanceCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkInstance) callconv(.C) VkResult;
pub const PFN_vkDestroyInstance = ?*const fn (VkInstance, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkEnumeratePhysicalDevices = ?*const fn (VkInstance, [*c]u32, [*c]VkPhysicalDevice) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceFeatures = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceFeatures) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties = ?*const fn (VkPhysicalDevice, VkFormat, [*c]VkFormatProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties = ?*const fn (VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, [*c]VkImageFormatProperties) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceProperties = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkQueueFamilyProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceMemoryProperties) callconv(.C) void;
pub const PFN_vkGetInstanceProcAddr = ?*const fn (VkInstance, [*c]const u8) callconv(.C) PFN_vkVoidFunction;
pub const PFN_vkGetDeviceProcAddr = ?*const fn (VkDevice, [*c]const u8) callconv(.C) PFN_vkVoidFunction;
pub const PFN_vkCreateDevice = ?*const fn (VkPhysicalDevice, [*c]const VkDeviceCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDevice) callconv(.C) VkResult;
pub const PFN_vkDestroyDevice = ?*const fn (VkDevice, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkEnumerateInstanceExtensionProperties = ?*const fn ([*c]const u8, [*c]u32, [*c]VkExtensionProperties) callconv(.C) VkResult;
pub const PFN_vkEnumerateDeviceExtensionProperties = ?*const fn (VkPhysicalDevice, [*c]const u8, [*c]u32, [*c]VkExtensionProperties) callconv(.C) VkResult;
pub const PFN_vkEnumerateInstanceLayerProperties = ?*const fn ([*c]u32, [*c]VkLayerProperties) callconv(.C) VkResult;
pub const PFN_vkEnumerateDeviceLayerProperties = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkLayerProperties) callconv(.C) VkResult;
pub const PFN_vkGetDeviceQueue = ?*const fn (VkDevice, u32, u32, [*c]VkQueue) callconv(.C) void;
pub const PFN_vkQueueSubmit = ?*const fn (VkQueue, u32, [*c]const VkSubmitInfo, VkFence) callconv(.C) VkResult;
pub const PFN_vkQueueWaitIdle = ?*const fn (VkQueue) callconv(.C) VkResult;
pub const PFN_vkDeviceWaitIdle = ?*const fn (VkDevice) callconv(.C) VkResult;
pub const PFN_vkAllocateMemory = ?*const fn (VkDevice, [*c]const VkMemoryAllocateInfo, [*c]const VkAllocationCallbacks, [*c]VkDeviceMemory) callconv(.C) VkResult;
pub const PFN_vkFreeMemory = ?*const fn (VkDevice, VkDeviceMemory, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkMapMemory = ?*const fn (VkDevice, VkDeviceMemory, VkDeviceSize, VkDeviceSize, VkMemoryMapFlags, [*c]?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkUnmapMemory = ?*const fn (VkDevice, VkDeviceMemory) callconv(.C) void;
pub const PFN_vkFlushMappedMemoryRanges = ?*const fn (VkDevice, u32, [*c]const VkMappedMemoryRange) callconv(.C) VkResult;
pub const PFN_vkInvalidateMappedMemoryRanges = ?*const fn (VkDevice, u32, [*c]const VkMappedMemoryRange) callconv(.C) VkResult;
pub const PFN_vkGetDeviceMemoryCommitment = ?*const fn (VkDevice, VkDeviceMemory, [*c]VkDeviceSize) callconv(.C) void;
pub const PFN_vkBindBufferMemory = ?*const fn (VkDevice, VkBuffer, VkDeviceMemory, VkDeviceSize) callconv(.C) VkResult;
pub const PFN_vkBindImageMemory = ?*const fn (VkDevice, VkImage, VkDeviceMemory, VkDeviceSize) callconv(.C) VkResult;
pub const PFN_vkGetBufferMemoryRequirements = ?*const fn (VkDevice, VkBuffer, [*c]VkMemoryRequirements) callconv(.C) void;
pub const PFN_vkGetImageMemoryRequirements = ?*const fn (VkDevice, VkImage, [*c]VkMemoryRequirements) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements = ?*const fn (VkDevice, VkImage, [*c]u32, [*c]VkSparseImageMemoryRequirements) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties = ?*const fn (VkPhysicalDevice, VkFormat, VkImageType, VkSampleCountFlagBits, VkImageUsageFlags, VkImageTiling, [*c]u32, [*c]VkSparseImageFormatProperties) callconv(.C) void;
pub const PFN_vkQueueBindSparse = ?*const fn (VkQueue, u32, [*c]const VkBindSparseInfo, VkFence) callconv(.C) VkResult;
pub const PFN_vkCreateFence = ?*const fn (VkDevice, [*c]const VkFenceCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkFence) callconv(.C) VkResult;
pub const PFN_vkDestroyFence = ?*const fn (VkDevice, VkFence, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetFences = ?*const fn (VkDevice, u32, [*c]const VkFence) callconv(.C) VkResult;
pub const PFN_vkGetFenceStatus = ?*const fn (VkDevice, VkFence) callconv(.C) VkResult;
pub const PFN_vkWaitForFences = ?*const fn (VkDevice, u32, [*c]const VkFence, VkBool32, u64) callconv(.C) VkResult;
pub const PFN_vkCreateSemaphore = ?*const fn (VkDevice, [*c]const VkSemaphoreCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSemaphore) callconv(.C) VkResult;
pub const PFN_vkDestroySemaphore = ?*const fn (VkDevice, VkSemaphore, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateEvent = ?*const fn (VkDevice, [*c]const VkEventCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkEvent) callconv(.C) VkResult;
pub const PFN_vkDestroyEvent = ?*const fn (VkDevice, VkEvent, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetEventStatus = ?*const fn (VkDevice, VkEvent) callconv(.C) VkResult;
pub const PFN_vkSetEvent = ?*const fn (VkDevice, VkEvent) callconv(.C) VkResult;
pub const PFN_vkResetEvent = ?*const fn (VkDevice, VkEvent) callconv(.C) VkResult;
pub const PFN_vkCreateQueryPool = ?*const fn (VkDevice, [*c]const VkQueryPoolCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkQueryPool) callconv(.C) VkResult;
pub const PFN_vkDestroyQueryPool = ?*const fn (VkDevice, VkQueryPool, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetQueryPoolResults = ?*const fn (VkDevice, VkQueryPool, u32, u32, usize, ?*anyopaque, VkDeviceSize, VkQueryResultFlags) callconv(.C) VkResult;
pub const PFN_vkCreateBuffer = ?*const fn (VkDevice, [*c]const VkBufferCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkBuffer) callconv(.C) VkResult;
pub const PFN_vkDestroyBuffer = ?*const fn (VkDevice, VkBuffer, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateBufferView = ?*const fn (VkDevice, [*c]const VkBufferViewCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkBufferView) callconv(.C) VkResult;
pub const PFN_vkDestroyBufferView = ?*const fn (VkDevice, VkBufferView, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateImage = ?*const fn (VkDevice, [*c]const VkImageCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkImage) callconv(.C) VkResult;
pub const PFN_vkDestroyImage = ?*const fn (VkDevice, VkImage, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetImageSubresourceLayout = ?*const fn (VkDevice, VkImage, [*c]const VkImageSubresource, [*c]VkSubresourceLayout) callconv(.C) void;
pub const PFN_vkCreateImageView = ?*const fn (VkDevice, [*c]const VkImageViewCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkImageView) callconv(.C) VkResult;
pub const PFN_vkDestroyImageView = ?*const fn (VkDevice, VkImageView, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateShaderModule = ?*const fn (VkDevice, [*c]const VkShaderModuleCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkShaderModule) callconv(.C) VkResult;
pub const PFN_vkDestroyShaderModule = ?*const fn (VkDevice, VkShaderModule, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreatePipelineCache = ?*const fn (VkDevice, [*c]const VkPipelineCacheCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipelineCache) callconv(.C) VkResult;
pub const PFN_vkDestroyPipelineCache = ?*const fn (VkDevice, VkPipelineCache, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetPipelineCacheData = ?*const fn (VkDevice, VkPipelineCache, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkMergePipelineCaches = ?*const fn (VkDevice, VkPipelineCache, u32, [*c]const VkPipelineCache) callconv(.C) VkResult;
pub const PFN_vkCreateGraphicsPipelines = ?*const fn (VkDevice, VkPipelineCache, u32, [*c]const VkGraphicsPipelineCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkCreateComputePipelines = ?*const fn (VkDevice, VkPipelineCache, u32, [*c]const VkComputePipelineCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkDestroyPipeline = ?*const fn (VkDevice, VkPipeline, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreatePipelineLayout = ?*const fn (VkDevice, [*c]const VkPipelineLayoutCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPipelineLayout) callconv(.C) VkResult;
pub const PFN_vkDestroyPipelineLayout = ?*const fn (VkDevice, VkPipelineLayout, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateSampler = ?*const fn (VkDevice, [*c]const VkSamplerCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSampler) callconv(.C) VkResult;
pub const PFN_vkDestroySampler = ?*const fn (VkDevice, VkSampler, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorSetLayout = ?*const fn (VkDevice, [*c]const VkDescriptorSetLayoutCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorSetLayout) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorSetLayout = ?*const fn (VkDevice, VkDescriptorSetLayout, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorPool = ?*const fn (VkDevice, [*c]const VkDescriptorPoolCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorPool) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorPool = ?*const fn (VkDevice, VkDescriptorPool, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetDescriptorPool = ?*const fn (VkDevice, VkDescriptorPool, VkDescriptorPoolResetFlags) callconv(.C) VkResult;
pub const PFN_vkAllocateDescriptorSets = ?*const fn (VkDevice, [*c]const VkDescriptorSetAllocateInfo, [*c]VkDescriptorSet) callconv(.C) VkResult;
pub const PFN_vkFreeDescriptorSets = ?*const fn (VkDevice, VkDescriptorPool, u32, [*c]const VkDescriptorSet) callconv(.C) VkResult;
pub const PFN_vkUpdateDescriptorSets = ?*const fn (VkDevice, u32, [*c]const VkWriteDescriptorSet, u32, [*c]const VkCopyDescriptorSet) callconv(.C) void;
pub const PFN_vkCreateFramebuffer = ?*const fn (VkDevice, [*c]const VkFramebufferCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkFramebuffer) callconv(.C) VkResult;
pub const PFN_vkDestroyFramebuffer = ?*const fn (VkDevice, VkFramebuffer, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateRenderPass = ?*const fn (VkDevice, [*c]const VkRenderPassCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkRenderPass) callconv(.C) VkResult;
pub const PFN_vkDestroyRenderPass = ?*const fn (VkDevice, VkRenderPass, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetRenderAreaGranularity = ?*const fn (VkDevice, VkRenderPass, [*c]VkExtent2D) callconv(.C) void;
pub const PFN_vkCreateCommandPool = ?*const fn (VkDevice, [*c]const VkCommandPoolCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkCommandPool) callconv(.C) VkResult;
pub const PFN_vkDestroyCommandPool = ?*const fn (VkDevice, VkCommandPool, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkResetCommandPool = ?*const fn (VkDevice, VkCommandPool, VkCommandPoolResetFlags) callconv(.C) VkResult;
pub const PFN_vkAllocateCommandBuffers = ?*const fn (VkDevice, [*c]const VkCommandBufferAllocateInfo, [*c]VkCommandBuffer) callconv(.C) VkResult;
pub const PFN_vkFreeCommandBuffers = ?*const fn (VkDevice, VkCommandPool, u32, [*c]const VkCommandBuffer) callconv(.C) void;
pub const PFN_vkBeginCommandBuffer = ?*const fn (VkCommandBuffer, [*c]const VkCommandBufferBeginInfo) callconv(.C) VkResult;
pub const PFN_vkEndCommandBuffer = ?*const fn (VkCommandBuffer) callconv(.C) VkResult;
pub const PFN_vkResetCommandBuffer = ?*const fn (VkCommandBuffer, VkCommandBufferResetFlags) callconv(.C) VkResult;
pub const PFN_vkCmdBindPipeline = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipeline) callconv(.C) void;
pub const PFN_vkCmdSetViewport = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkViewport) callconv(.C) void;
pub const PFN_vkCmdSetScissor = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkRect2D) callconv(.C) void;
pub const PFN_vkCmdSetLineWidth = ?*const fn (VkCommandBuffer, f32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBias = ?*const fn (VkCommandBuffer, f32, f32, f32) callconv(.C) void;
pub const PFN_vkCmdSetBlendConstants = ?*const fn (VkCommandBuffer, [*c]const f32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBounds = ?*const fn (VkCommandBuffer, f32, f32) callconv(.C) void;
pub const PFN_vkCmdSetStencilCompareMask = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdSetStencilWriteMask = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdSetStencilReference = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, u32) callconv(.C) void;
pub const PFN_vkCmdBindDescriptorSets = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, [*c]const VkDescriptorSet, u32, [*c]const u32) callconv(.C) void;
pub const PFN_vkCmdBindIndexBuffer = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkIndexType) callconv(.C) void;
pub const PFN_vkCmdBindVertexBuffers = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdDraw = ?*const fn (VkCommandBuffer, u32, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexed = ?*const fn (VkCommandBuffer, u32, u32, u32, i32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndirect = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirect = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDispatch = ?*const fn (VkCommandBuffer, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchIndirect = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdCopyBuffer = ?*const fn (VkCommandBuffer, VkBuffer, VkBuffer, u32, [*c]const VkBufferCopy) callconv(.C) void;
pub const PFN_vkCmdCopyImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, [*c]const VkImageCopy) callconv(.C) void;
pub const PFN_vkCmdBlitImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, [*c]const VkImageBlit, VkFilter) callconv(.C) void;
pub const PFN_vkCmdCopyBufferToImage = ?*const fn (VkCommandBuffer, VkBuffer, VkImage, VkImageLayout, u32, [*c]const VkBufferImageCopy) callconv(.C) void;
pub const PFN_vkCmdCopyImageToBuffer = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, VkBuffer, u32, [*c]const VkBufferImageCopy) callconv(.C) void;
pub const PFN_vkCmdUpdateBuffer = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkCmdFillBuffer = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkDeviceSize, u32) callconv(.C) void;
pub const PFN_vkCmdClearColorImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, [*c]const VkClearColorValue, u32, [*c]const VkImageSubresourceRange) callconv(.C) void;
pub const PFN_vkCmdClearDepthStencilImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, [*c]const VkClearDepthStencilValue, u32, [*c]const VkImageSubresourceRange) callconv(.C) void;
pub const PFN_vkCmdClearAttachments = ?*const fn (VkCommandBuffer, u32, [*c]const VkClearAttachment, u32, [*c]const VkClearRect) callconv(.C) void;
pub const PFN_vkCmdResolveImage = ?*const fn (VkCommandBuffer, VkImage, VkImageLayout, VkImage, VkImageLayout, u32, [*c]const VkImageResolve) callconv(.C) void;
pub const PFN_vkCmdSetEvent = ?*const fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags) callconv(.C) void;
pub const PFN_vkCmdResetEvent = ?*const fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags) callconv(.C) void;
pub const PFN_vkCmdWaitEvents = ?*const fn (VkCommandBuffer, u32, [*c]const VkEvent, VkPipelineStageFlags, VkPipelineStageFlags, u32, [*c]const VkMemoryBarrier, u32, [*c]const VkBufferMemoryBarrier, u32, [*c]const VkImageMemoryBarrier) callconv(.C) void;
pub const PFN_vkCmdPipelineBarrier = ?*const fn (VkCommandBuffer, VkPipelineStageFlags, VkPipelineStageFlags, VkDependencyFlags, u32, [*c]const VkMemoryBarrier, u32, [*c]const VkBufferMemoryBarrier, u32, [*c]const VkImageMemoryBarrier) callconv(.C) void;
pub const PFN_vkCmdBeginQuery = ?*const fn (VkCommandBuffer, VkQueryPool, u32, VkQueryControlFlags) callconv(.C) void;
pub const PFN_vkCmdEndQuery = ?*const fn (VkCommandBuffer, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkCmdResetQueryPool = ?*const fn (VkCommandBuffer, VkQueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkCmdWriteTimestamp = ?*const fn (VkCommandBuffer, VkPipelineStageFlagBits, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkCmdCopyQueryPoolResults = ?*const fn (VkCommandBuffer, VkQueryPool, u32, u32, VkBuffer, VkDeviceSize, VkDeviceSize, VkQueryResultFlags) callconv(.C) void;
pub const PFN_vkCmdPushConstants = ?*const fn (VkCommandBuffer, VkPipelineLayout, VkShaderStageFlags, u32, u32, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkCmdBeginRenderPass = ?*const fn (VkCommandBuffer, [*c]const VkRenderPassBeginInfo, VkSubpassContents) callconv(.C) void;
pub const PFN_vkCmdNextSubpass = ?*const fn (VkCommandBuffer, VkSubpassContents) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdExecuteCommands = ?*const fn (VkCommandBuffer, u32, [*c]const VkCommandBuffer) callconv(.C) void;
pub extern fn vkCreateInstance(pCreateInfo: [*c]const VkInstanceCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pInstance: [*c]VkInstance) VkResult;
pub extern fn vkDestroyInstance(instance: VkInstance, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkEnumeratePhysicalDevices(instance: VkInstance, pPhysicalDeviceCount: [*c]u32, pPhysicalDevices: [*c]VkPhysicalDevice) VkResult;
pub extern fn vkGetPhysicalDeviceFeatures(physicalDevice: VkPhysicalDevice, pFeatures: [*c]VkPhysicalDeviceFeatures) void;
pub extern fn vkGetPhysicalDeviceFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: [*c]VkFormatProperties) void;
pub extern fn vkGetPhysicalDeviceImageFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, @"type": VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, pImageFormatProperties: [*c]VkImageFormatProperties) VkResult;
pub extern fn vkGetPhysicalDeviceProperties(physicalDevice: VkPhysicalDevice, pProperties: [*c]VkPhysicalDeviceProperties) void;
pub extern fn vkGetPhysicalDeviceQueueFamilyProperties(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: [*c]u32, pQueueFamilyProperties: [*c]VkQueueFamilyProperties) void;
pub extern fn vkGetPhysicalDeviceMemoryProperties(physicalDevice: VkPhysicalDevice, pMemoryProperties: [*c]VkPhysicalDeviceMemoryProperties) void;
pub extern fn vkGetInstanceProcAddr(instance: VkInstance, pName: [*c]const u8) PFN_vkVoidFunction;
pub extern fn vkGetDeviceProcAddr(device: VkDevice, pName: [*c]const u8) PFN_vkVoidFunction;
pub extern fn vkCreateDevice(physicalDevice: VkPhysicalDevice, pCreateInfo: [*c]const VkDeviceCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pDevice: [*c]VkDevice) VkResult;
pub extern fn vkDestroyDevice(device: VkDevice, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkEnumerateInstanceExtensionProperties(pLayerName: [*c]const u8, pPropertyCount: [*c]u32, pProperties: [*c]VkExtensionProperties) VkResult;
pub extern fn vkEnumerateDeviceExtensionProperties(physicalDevice: VkPhysicalDevice, pLayerName: [*c]const u8, pPropertyCount: [*c]u32, pProperties: [*c]VkExtensionProperties) VkResult;
pub extern fn vkEnumerateInstanceLayerProperties(pPropertyCount: [*c]u32, pProperties: [*c]VkLayerProperties) VkResult;
pub extern fn vkEnumerateDeviceLayerProperties(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkLayerProperties) VkResult;
pub extern fn vkGetDeviceQueue(device: VkDevice, queueFamilyIndex: u32, queueIndex: u32, pQueue: [*c]VkQueue) void;
pub extern fn vkQueueSubmit(queue: VkQueue, submitCount: u32, pSubmits: [*c]const VkSubmitInfo, fence: VkFence) VkResult;
pub extern fn vkQueueWaitIdle(queue: VkQueue) VkResult;
pub extern fn vkDeviceWaitIdle(device: VkDevice) VkResult;
pub extern fn vkAllocateMemory(device: VkDevice, pAllocateInfo: [*c]const VkMemoryAllocateInfo, pAllocator: [*c]const VkAllocationCallbacks, pMemory: [*c]VkDeviceMemory) VkResult;
pub extern fn vkFreeMemory(device: VkDevice, memory: VkDeviceMemory, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkMapMemory(device: VkDevice, memory: VkDeviceMemory, offset: VkDeviceSize, size: VkDeviceSize, flags: VkMemoryMapFlags, ppData: [*c]?*anyopaque) VkResult;
pub extern fn vkUnmapMemory(device: VkDevice, memory: VkDeviceMemory) void;
pub extern fn vkFlushMappedMemoryRanges(device: VkDevice, memoryRangeCount: u32, pMemoryRanges: [*c]const VkMappedMemoryRange) VkResult;
pub extern fn vkInvalidateMappedMemoryRanges(device: VkDevice, memoryRangeCount: u32, pMemoryRanges: [*c]const VkMappedMemoryRange) VkResult;
pub extern fn vkGetDeviceMemoryCommitment(device: VkDevice, memory: VkDeviceMemory, pCommittedMemoryInBytes: [*c]VkDeviceSize) void;
pub extern fn vkBindBufferMemory(device: VkDevice, buffer: VkBuffer, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) VkResult;
pub extern fn vkBindImageMemory(device: VkDevice, image: VkImage, memory: VkDeviceMemory, memoryOffset: VkDeviceSize) VkResult;
pub extern fn vkGetBufferMemoryRequirements(device: VkDevice, buffer: VkBuffer, pMemoryRequirements: [*c]VkMemoryRequirements) void;
pub extern fn vkGetImageMemoryRequirements(device: VkDevice, image: VkImage, pMemoryRequirements: [*c]VkMemoryRequirements) void;
pub extern fn vkGetImageSparseMemoryRequirements(device: VkDevice, image: VkImage, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements) void;
pub extern fn vkGetPhysicalDeviceSparseImageFormatProperties(physicalDevice: VkPhysicalDevice, format: VkFormat, @"type": VkImageType, samples: VkSampleCountFlagBits, usage: VkImageUsageFlags, tiling: VkImageTiling, pPropertyCount: [*c]u32, pProperties: [*c]VkSparseImageFormatProperties) void;
pub extern fn vkQueueBindSparse(queue: VkQueue, bindInfoCount: u32, pBindInfo: [*c]const VkBindSparseInfo, fence: VkFence) VkResult;
pub extern fn vkCreateFence(device: VkDevice, pCreateInfo: [*c]const VkFenceCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pFence: [*c]VkFence) VkResult;
pub extern fn vkDestroyFence(device: VkDevice, fence: VkFence, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkResetFences(device: VkDevice, fenceCount: u32, pFences: [*c]const VkFence) VkResult;
pub extern fn vkGetFenceStatus(device: VkDevice, fence: VkFence) VkResult;
pub extern fn vkWaitForFences(device: VkDevice, fenceCount: u32, pFences: [*c]const VkFence, waitAll: VkBool32, timeout: u64) VkResult;
pub extern fn vkCreateSemaphore(device: VkDevice, pCreateInfo: [*c]const VkSemaphoreCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pSemaphore: [*c]VkSemaphore) VkResult;
pub extern fn vkDestroySemaphore(device: VkDevice, semaphore: VkSemaphore, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateEvent(device: VkDevice, pCreateInfo: [*c]const VkEventCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pEvent: [*c]VkEvent) VkResult;
pub extern fn vkDestroyEvent(device: VkDevice, event: VkEvent, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetEventStatus(device: VkDevice, event: VkEvent) VkResult;
pub extern fn vkSetEvent(device: VkDevice, event: VkEvent) VkResult;
pub extern fn vkResetEvent(device: VkDevice, event: VkEvent) VkResult;
pub extern fn vkCreateQueryPool(device: VkDevice, pCreateInfo: [*c]const VkQueryPoolCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pQueryPool: [*c]VkQueryPool) VkResult;
pub extern fn vkDestroyQueryPool(device: VkDevice, queryPool: VkQueryPool, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetQueryPoolResults(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dataSize: usize, pData: ?*anyopaque, stride: VkDeviceSize, flags: VkQueryResultFlags) VkResult;
pub extern fn vkCreateBuffer(device: VkDevice, pCreateInfo: [*c]const VkBufferCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pBuffer: [*c]VkBuffer) VkResult;
pub extern fn vkDestroyBuffer(device: VkDevice, buffer: VkBuffer, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateBufferView(device: VkDevice, pCreateInfo: [*c]const VkBufferViewCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pView: [*c]VkBufferView) VkResult;
pub extern fn vkDestroyBufferView(device: VkDevice, bufferView: VkBufferView, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateImage(device: VkDevice, pCreateInfo: [*c]const VkImageCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pImage: [*c]VkImage) VkResult;
pub extern fn vkDestroyImage(device: VkDevice, image: VkImage, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetImageSubresourceLayout(device: VkDevice, image: VkImage, pSubresource: [*c]const VkImageSubresource, pLayout: [*c]VkSubresourceLayout) void;
pub extern fn vkCreateImageView(device: VkDevice, pCreateInfo: [*c]const VkImageViewCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pView: [*c]VkImageView) VkResult;
pub extern fn vkDestroyImageView(device: VkDevice, imageView: VkImageView, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateShaderModule(device: VkDevice, pCreateInfo: [*c]const VkShaderModuleCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pShaderModule: [*c]VkShaderModule) VkResult;
pub extern fn vkDestroyShaderModule(device: VkDevice, shaderModule: VkShaderModule, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreatePipelineCache(device: VkDevice, pCreateInfo: [*c]const VkPipelineCacheCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPipelineCache: [*c]VkPipelineCache) VkResult;
pub extern fn vkDestroyPipelineCache(device: VkDevice, pipelineCache: VkPipelineCache, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetPipelineCacheData(device: VkDevice, pipelineCache: VkPipelineCache, pDataSize: [*c]usize, pData: ?*anyopaque) VkResult;
pub extern fn vkMergePipelineCaches(device: VkDevice, dstCache: VkPipelineCache, srcCacheCount: u32, pSrcCaches: [*c]const VkPipelineCache) VkResult;
pub extern fn vkCreateGraphicsPipelines(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: [*c]const VkGraphicsPipelineCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPipelines: [*c]VkPipeline) VkResult;
pub extern fn vkCreateComputePipelines(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: [*c]const VkComputePipelineCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPipelines: [*c]VkPipeline) VkResult;
pub extern fn vkDestroyPipeline(device: VkDevice, pipeline: VkPipeline, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreatePipelineLayout(device: VkDevice, pCreateInfo: [*c]const VkPipelineLayoutCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPipelineLayout: [*c]VkPipelineLayout) VkResult;
pub extern fn vkDestroyPipelineLayout(device: VkDevice, pipelineLayout: VkPipelineLayout, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateSampler(device: VkDevice, pCreateInfo: [*c]const VkSamplerCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pSampler: [*c]VkSampler) VkResult;
pub extern fn vkDestroySampler(device: VkDevice, sampler: VkSampler, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateDescriptorSetLayout(device: VkDevice, pCreateInfo: [*c]const VkDescriptorSetLayoutCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pSetLayout: [*c]VkDescriptorSetLayout) VkResult;
pub extern fn vkDestroyDescriptorSetLayout(device: VkDevice, descriptorSetLayout: VkDescriptorSetLayout, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateDescriptorPool(device: VkDevice, pCreateInfo: [*c]const VkDescriptorPoolCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pDescriptorPool: [*c]VkDescriptorPool) VkResult;
pub extern fn vkDestroyDescriptorPool(device: VkDevice, descriptorPool: VkDescriptorPool, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkResetDescriptorPool(device: VkDevice, descriptorPool: VkDescriptorPool, flags: VkDescriptorPoolResetFlags) VkResult;
pub extern fn vkAllocateDescriptorSets(device: VkDevice, pAllocateInfo: [*c]const VkDescriptorSetAllocateInfo, pDescriptorSets: [*c]VkDescriptorSet) VkResult;
pub extern fn vkFreeDescriptorSets(device: VkDevice, descriptorPool: VkDescriptorPool, descriptorSetCount: u32, pDescriptorSets: [*c]const VkDescriptorSet) VkResult;
pub extern fn vkUpdateDescriptorSets(device: VkDevice, descriptorWriteCount: u32, pDescriptorWrites: [*c]const VkWriteDescriptorSet, descriptorCopyCount: u32, pDescriptorCopies: [*c]const VkCopyDescriptorSet) void;
pub extern fn vkCreateFramebuffer(device: VkDevice, pCreateInfo: [*c]const VkFramebufferCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pFramebuffer: [*c]VkFramebuffer) VkResult;
pub extern fn vkDestroyFramebuffer(device: VkDevice, framebuffer: VkFramebuffer, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateRenderPass(device: VkDevice, pCreateInfo: [*c]const VkRenderPassCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pRenderPass: [*c]VkRenderPass) VkResult;
pub extern fn vkDestroyRenderPass(device: VkDevice, renderPass: VkRenderPass, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetRenderAreaGranularity(device: VkDevice, renderPass: VkRenderPass, pGranularity: [*c]VkExtent2D) void;
pub extern fn vkCreateCommandPool(device: VkDevice, pCreateInfo: [*c]const VkCommandPoolCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pCommandPool: [*c]VkCommandPool) VkResult;
pub extern fn vkDestroyCommandPool(device: VkDevice, commandPool: VkCommandPool, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkResetCommandPool(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolResetFlags) VkResult;
pub extern fn vkAllocateCommandBuffers(device: VkDevice, pAllocateInfo: [*c]const VkCommandBufferAllocateInfo, pCommandBuffers: [*c]VkCommandBuffer) VkResult;
pub extern fn vkFreeCommandBuffers(device: VkDevice, commandPool: VkCommandPool, commandBufferCount: u32, pCommandBuffers: [*c]const VkCommandBuffer) void;
pub extern fn vkBeginCommandBuffer(commandBuffer: VkCommandBuffer, pBeginInfo: [*c]const VkCommandBufferBeginInfo) VkResult;
pub extern fn vkEndCommandBuffer(commandBuffer: VkCommandBuffer) VkResult;
pub extern fn vkResetCommandBuffer(commandBuffer: VkCommandBuffer, flags: VkCommandBufferResetFlags) VkResult;
pub extern fn vkCmdBindPipeline(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline) void;
pub extern fn vkCmdSetViewport(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewports: [*c]const VkViewport) void;
pub extern fn vkCmdSetScissor(commandBuffer: VkCommandBuffer, firstScissor: u32, scissorCount: u32, pScissors: [*c]const VkRect2D) void;
pub extern fn vkCmdSetLineWidth(commandBuffer: VkCommandBuffer, lineWidth: f32) void;
pub extern fn vkCmdSetDepthBias(commandBuffer: VkCommandBuffer, depthBiasConstantFactor: f32, depthBiasClamp: f32, depthBiasSlopeFactor: f32) void;
pub extern fn vkCmdSetBlendConstants(commandBuffer: VkCommandBuffer, blendConstants: [*c]const f32) void;
pub extern fn vkCmdSetDepthBounds(commandBuffer: VkCommandBuffer, minDepthBounds: f32, maxDepthBounds: f32) void;
pub extern fn vkCmdSetStencilCompareMask(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, compareMask: u32) void;
pub extern fn vkCmdSetStencilWriteMask(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, writeMask: u32) void;
pub extern fn vkCmdSetStencilReference(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, reference: u32) void;
pub extern fn vkCmdBindDescriptorSets(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, firstSet: u32, descriptorSetCount: u32, pDescriptorSets: [*c]const VkDescriptorSet, dynamicOffsetCount: u32, pDynamicOffsets: [*c]const u32) void;
pub extern fn vkCmdBindIndexBuffer(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, indexType: VkIndexType) void;
pub extern fn vkCmdBindVertexBuffers(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const VkBuffer, pOffsets: [*c]const VkDeviceSize) void;
pub extern fn vkCmdDraw(commandBuffer: VkCommandBuffer, vertexCount: u32, instanceCount: u32, firstVertex: u32, firstInstance: u32) void;
pub extern fn vkCmdDrawIndexed(commandBuffer: VkCommandBuffer, indexCount: u32, instanceCount: u32, firstIndex: u32, vertexOffset: i32, firstInstance: u32) void;
pub extern fn vkCmdDrawIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDispatch(commandBuffer: VkCommandBuffer, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub extern fn vkCmdDispatchIndirect(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize) void;
pub extern fn vkCmdCopyBuffer(commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstBuffer: VkBuffer, regionCount: u32, pRegions: [*c]const VkBufferCopy) void;
pub extern fn vkCmdCopyImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: [*c]const VkImageCopy) void;
pub extern fn vkCmdBlitImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: [*c]const VkImageBlit, filter: VkFilter) void;
pub extern fn vkCmdCopyBufferToImage(commandBuffer: VkCommandBuffer, srcBuffer: VkBuffer, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: [*c]const VkBufferImageCopy) void;
pub extern fn vkCmdCopyImageToBuffer(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstBuffer: VkBuffer, regionCount: u32, pRegions: [*c]const VkBufferImageCopy) void;
pub extern fn vkCmdUpdateBuffer(commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, dataSize: VkDeviceSize, pData: ?*const anyopaque) void;
pub extern fn vkCmdFillBuffer(commandBuffer: VkCommandBuffer, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, size: VkDeviceSize, data: u32) void;
pub extern fn vkCmdClearColorImage(commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pColor: [*c]const VkClearColorValue, rangeCount: u32, pRanges: [*c]const VkImageSubresourceRange) void;
pub extern fn vkCmdClearDepthStencilImage(commandBuffer: VkCommandBuffer, image: VkImage, imageLayout: VkImageLayout, pDepthStencil: [*c]const VkClearDepthStencilValue, rangeCount: u32, pRanges: [*c]const VkImageSubresourceRange) void;
pub extern fn vkCmdClearAttachments(commandBuffer: VkCommandBuffer, attachmentCount: u32, pAttachments: [*c]const VkClearAttachment, rectCount: u32, pRects: [*c]const VkClearRect) void;
pub extern fn vkCmdResolveImage(commandBuffer: VkCommandBuffer, srcImage: VkImage, srcImageLayout: VkImageLayout, dstImage: VkImage, dstImageLayout: VkImageLayout, regionCount: u32, pRegions: [*c]const VkImageResolve) void;
pub extern fn vkCmdSetEvent(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags) void;
pub extern fn vkCmdResetEvent(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags) void;
pub extern fn vkCmdWaitEvents(commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: [*c]const VkEvent, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, memoryBarrierCount: u32, pMemoryBarriers: [*c]const VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: [*c]const VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: [*c]const VkImageMemoryBarrier) void;
pub extern fn vkCmdPipelineBarrier(commandBuffer: VkCommandBuffer, srcStageMask: VkPipelineStageFlags, dstStageMask: VkPipelineStageFlags, dependencyFlags: VkDependencyFlags, memoryBarrierCount: u32, pMemoryBarriers: [*c]const VkMemoryBarrier, bufferMemoryBarrierCount: u32, pBufferMemoryBarriers: [*c]const VkBufferMemoryBarrier, imageMemoryBarrierCount: u32, pImageMemoryBarriers: [*c]const VkImageMemoryBarrier) void;
pub extern fn vkCmdBeginQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags) void;
pub extern fn vkCmdEndQuery(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32) void;
pub extern fn vkCmdResetQueryPool(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) void;
pub extern fn vkCmdWriteTimestamp(commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, queryPool: VkQueryPool, query: u32) void;
pub extern fn vkCmdCopyQueryPoolResults(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, stride: VkDeviceSize, flags: VkQueryResultFlags) void;
pub extern fn vkCmdPushConstants(commandBuffer: VkCommandBuffer, layout: VkPipelineLayout, stageFlags: VkShaderStageFlags, offset: u32, size: u32, pValues: ?*const anyopaque) void;
pub extern fn vkCmdBeginRenderPass(commandBuffer: VkCommandBuffer, pRenderPassBegin: [*c]const VkRenderPassBeginInfo, contents: VkSubpassContents) void;
pub extern fn vkCmdNextSubpass(commandBuffer: VkCommandBuffer, contents: VkSubpassContents) void;
pub extern fn vkCmdEndRenderPass(commandBuffer: VkCommandBuffer) void;
pub extern fn vkCmdExecuteCommands(commandBuffer: VkCommandBuffer, commandBufferCount: u32, pCommandBuffers: [*c]const VkCommandBuffer) void;
pub const struct_VkSamplerYcbcrConversion_T = opaque {};
pub const VkSamplerYcbcrConversion = ?*struct_VkSamplerYcbcrConversion_T;
pub const struct_VkDescriptorUpdateTemplate_T = opaque {};
pub const VkDescriptorUpdateTemplate = ?*struct_VkDescriptorUpdateTemplate_T;
pub const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES: c_int = 0;
pub const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY: c_int = 1;
pub const VK_POINT_CLIPPING_BEHAVIOR_ALL_CLIP_PLANES_KHR: c_int = 0;
pub const VK_POINT_CLIPPING_BEHAVIOR_USER_CLIP_PLANES_ONLY_KHR: c_int = 1;
pub const VK_POINT_CLIPPING_BEHAVIOR_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPointClippingBehavior = c_uint;
pub const VkPointClippingBehavior = enum_VkPointClippingBehavior;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT: c_int = 0;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT: c_int = 1;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_UPPER_LEFT_KHR: c_int = 0;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_LOWER_LEFT_KHR: c_int = 1;
pub const VK_TESSELLATION_DOMAIN_ORIGIN_MAX_ENUM: c_int = 2147483647;
pub const enum_VkTessellationDomainOrigin = c_uint;
pub const VkTessellationDomainOrigin = enum_VkTessellationDomainOrigin;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY: c_int = 0;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY: c_int = 1;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709: c_int = 2;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601: c_int = 3;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020: c_int = 4;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_RGB_IDENTITY_KHR: c_int = 0;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_IDENTITY_KHR: c_int = 1;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_709_KHR: c_int = 2;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_601_KHR: c_int = 3;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_YCBCR_2020_KHR: c_int = 4;
pub const VK_SAMPLER_YCBCR_MODEL_CONVERSION_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerYcbcrModelConversion = c_uint;
pub const VkSamplerYcbcrModelConversion = enum_VkSamplerYcbcrModelConversion;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_FULL: c_int = 0;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW: c_int = 1;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_FULL_KHR: c_int = 0;
pub const VK_SAMPLER_YCBCR_RANGE_ITU_NARROW_KHR: c_int = 1;
pub const VK_SAMPLER_YCBCR_RANGE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerYcbcrRange = c_uint;
pub const VkSamplerYcbcrRange = enum_VkSamplerYcbcrRange;
pub const VK_CHROMA_LOCATION_COSITED_EVEN: c_int = 0;
pub const VK_CHROMA_LOCATION_MIDPOINT: c_int = 1;
pub const VK_CHROMA_LOCATION_COSITED_EVEN_KHR: c_int = 0;
pub const VK_CHROMA_LOCATION_MIDPOINT_KHR: c_int = 1;
pub const VK_CHROMA_LOCATION_MAX_ENUM: c_int = 2147483647;
pub const enum_VkChromaLocation = c_uint;
pub const VkChromaLocation = enum_VkChromaLocation;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET: c_int = 0;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_PUSH_DESCRIPTORS_KHR: c_int = 1;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_DESCRIPTOR_SET_KHR: c_int = 0;
pub const VK_DESCRIPTOR_UPDATE_TEMPLATE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorUpdateTemplateType = c_uint;
pub const VkDescriptorUpdateTemplateType = enum_VkDescriptorUpdateTemplateType;
pub const VK_SUBGROUP_FEATURE_BASIC_BIT: c_int = 1;
pub const VK_SUBGROUP_FEATURE_VOTE_BIT: c_int = 2;
pub const VK_SUBGROUP_FEATURE_ARITHMETIC_BIT: c_int = 4;
pub const VK_SUBGROUP_FEATURE_BALLOT_BIT: c_int = 8;
pub const VK_SUBGROUP_FEATURE_SHUFFLE_BIT: c_int = 16;
pub const VK_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT: c_int = 32;
pub const VK_SUBGROUP_FEATURE_CLUSTERED_BIT: c_int = 64;
pub const VK_SUBGROUP_FEATURE_QUAD_BIT: c_int = 128;
pub const VK_SUBGROUP_FEATURE_PARTITIONED_BIT_NV: c_int = 256;
pub const VK_SUBGROUP_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSubgroupFeatureFlagBits = c_uint;
pub const VkSubgroupFeatureFlagBits = enum_VkSubgroupFeatureFlagBits;
pub const VkSubgroupFeatureFlags = VkFlags;
pub const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT: c_int = 1;
pub const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT: c_int = 2;
pub const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT: c_int = 4;
pub const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT: c_int = 8;
pub const VK_PEER_MEMORY_FEATURE_COPY_SRC_BIT_KHR: c_int = 1;
pub const VK_PEER_MEMORY_FEATURE_COPY_DST_BIT_KHR: c_int = 2;
pub const VK_PEER_MEMORY_FEATURE_GENERIC_SRC_BIT_KHR: c_int = 4;
pub const VK_PEER_MEMORY_FEATURE_GENERIC_DST_BIT_KHR: c_int = 8;
pub const VK_PEER_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPeerMemoryFeatureFlagBits = c_uint;
pub const VkPeerMemoryFeatureFlagBits = enum_VkPeerMemoryFeatureFlagBits;
pub const VkPeerMemoryFeatureFlags = VkFlags;
pub const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT: c_int = 1;
pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT: c_int = 2;
pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT: c_int = 4;
pub const VK_MEMORY_ALLOCATE_DEVICE_MASK_BIT_KHR: c_int = 1;
pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_BIT_KHR: c_int = 2;
pub const VK_MEMORY_ALLOCATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: c_int = 4;
pub const VK_MEMORY_ALLOCATE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkMemoryAllocateFlagBits = c_uint;
pub const VkMemoryAllocateFlagBits = enum_VkMemoryAllocateFlagBits;
pub const VkMemoryAllocateFlags = VkFlags;
pub const VkCommandPoolTrimFlags = VkFlags;
pub const VkDescriptorUpdateTemplateCreateFlags = VkFlags;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT: c_int = 1;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT: c_int = 2;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: c_int = 4;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT: c_int = 8;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT: c_int = 16;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT: c_int = 32;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT: c_int = 64;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_DMA_BUF_BIT_EXT: c_int = 512;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_ANDROID_HARDWARE_BUFFER_BIT_ANDROID: c_int = 1024;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_ALLOCATION_BIT_EXT: c_int = 128;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_HOST_MAPPED_FOREIGN_MEMORY_BIT_EXT: c_int = 256;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_ZIRCON_VMO_BIT_FUCHSIA: c_int = 2048;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_RDMA_ADDRESS_BIT_NV: c_int = 4096;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: c_int = 4;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_BIT_KHR: c_int = 8;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_TEXTURE_KMT_BIT_KHR: c_int = 16;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_HEAP_BIT_KHR: c_int = 32;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D12_RESOURCE_BIT_KHR: c_int = 64;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalMemoryHandleTypeFlagBits = c_uint;
pub const VkExternalMemoryHandleTypeFlagBits = enum_VkExternalMemoryHandleTypeFlagBits;
pub const VkExternalMemoryHandleTypeFlags = VkFlags;
pub const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT: c_int = 1;
pub const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT: c_int = 2;
pub const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT: c_int = 4;
pub const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_KHR: c_int = 4;
pub const VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalMemoryFeatureFlagBits = c_uint;
pub const VkExternalMemoryFeatureFlagBits = enum_VkExternalMemoryFeatureFlagBits;
pub const VkExternalMemoryFeatureFlags = VkFlags;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT: c_int = 1;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT: c_int = 2;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: c_int = 4;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT: c_int = 8;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: c_int = 4;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_SYNC_FD_BIT_KHR: c_int = 8;
pub const VK_EXTERNAL_FENCE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalFenceHandleTypeFlagBits = c_uint;
pub const VkExternalFenceHandleTypeFlagBits = enum_VkExternalFenceHandleTypeFlagBits;
pub const VkExternalFenceHandleTypeFlags = VkFlags;
pub const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT: c_int = 1;
pub const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT: c_int = 2;
pub const VK_EXTERNAL_FENCE_FEATURE_EXPORTABLE_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_FENCE_FEATURE_IMPORTABLE_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_FENCE_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalFenceFeatureFlagBits = c_uint;
pub const VkExternalFenceFeatureFlagBits = enum_VkExternalFenceFeatureFlagBits;
pub const VkExternalFenceFeatureFlags = VkFlags;
pub const VK_FENCE_IMPORT_TEMPORARY_BIT: c_int = 1;
pub const VK_FENCE_IMPORT_TEMPORARY_BIT_KHR: c_int = 1;
pub const VK_FENCE_IMPORT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkFenceImportFlagBits = c_uint;
pub const VkFenceImportFlagBits = enum_VkFenceImportFlagBits;
pub const VkFenceImportFlags = VkFlags;
pub const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT: c_int = 1;
pub const VK_SEMAPHORE_IMPORT_TEMPORARY_BIT_KHR: c_int = 1;
pub const VK_SEMAPHORE_IMPORT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSemaphoreImportFlagBits = c_uint;
pub const VkSemaphoreImportFlagBits = enum_VkSemaphoreImportFlagBits;
pub const VkSemaphoreImportFlags = VkFlags;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT: c_int = 1;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT: c_int = 2;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT: c_int = 4;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT: c_int = 8;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT: c_int = 16;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_ZIRCON_EVENT_BIT_FUCHSIA: c_int = 128;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D11_FENCE_BIT: c_int = 8;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_FD_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_KHR: c_int = 4;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_D3D12_FENCE_BIT_KHR: c_int = 8;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_SYNC_FD_BIT_KHR: c_int = 16;
pub const VK_EXTERNAL_SEMAPHORE_HANDLE_TYPE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalSemaphoreHandleTypeFlagBits = c_uint;
pub const VkExternalSemaphoreHandleTypeFlagBits = enum_VkExternalSemaphoreHandleTypeFlagBits;
pub const VkExternalSemaphoreHandleTypeFlags = VkFlags;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT: c_int = 1;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT: c_int = 2;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_EXPORTABLE_BIT_KHR: c_int = 1;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_IMPORTABLE_BIT_KHR: c_int = 2;
pub const VK_EXTERNAL_SEMAPHORE_FEATURE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkExternalSemaphoreFeatureFlagBits = c_uint;
pub const VkExternalSemaphoreFeatureFlagBits = enum_VkExternalSemaphoreFeatureFlagBits;
pub const VkExternalSemaphoreFeatureFlags = VkFlags;
pub const struct_VkPhysicalDeviceSubgroupProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    subgroupSize: u32,
    supportedStages: VkShaderStageFlags,
    supportedOperations: VkSubgroupFeatureFlags,
    quadOperationsInAllStages: VkBool32,
};
pub const VkPhysicalDeviceSubgroupProperties = struct_VkPhysicalDeviceSubgroupProperties;
pub const struct_VkBindBufferMemoryInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    buffer: VkBuffer,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
};
pub const VkBindBufferMemoryInfo = struct_VkBindBufferMemoryInfo;
pub const struct_VkBindImageMemoryInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    image: VkImage,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
};
pub const VkBindImageMemoryInfo = struct_VkBindImageMemoryInfo;
pub const struct_VkPhysicalDevice16BitStorageFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    storageBuffer16BitAccess: VkBool32,
    uniformAndStorageBuffer16BitAccess: VkBool32,
    storagePushConstant16: VkBool32,
    storageInputOutput16: VkBool32,
};
pub const VkPhysicalDevice16BitStorageFeatures = struct_VkPhysicalDevice16BitStorageFeatures;
pub const struct_VkMemoryDedicatedRequirements = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    prefersDedicatedAllocation: VkBool32,
    requiresDedicatedAllocation: VkBool32,
};
pub const VkMemoryDedicatedRequirements = struct_VkMemoryDedicatedRequirements;
pub const struct_VkMemoryDedicatedAllocateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    image: VkImage,
    buffer: VkBuffer,
};
pub const VkMemoryDedicatedAllocateInfo = struct_VkMemoryDedicatedAllocateInfo;
pub const struct_VkMemoryAllocateFlagsInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkMemoryAllocateFlags,
    deviceMask: u32,
};
pub const VkMemoryAllocateFlagsInfo = struct_VkMemoryAllocateFlagsInfo;
pub const struct_VkDeviceGroupRenderPassBeginInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    deviceMask: u32,
    deviceRenderAreaCount: u32,
    pDeviceRenderAreas: [*c]const VkRect2D,
};
pub const VkDeviceGroupRenderPassBeginInfo = struct_VkDeviceGroupRenderPassBeginInfo;
pub const struct_VkDeviceGroupCommandBufferBeginInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    deviceMask: u32,
};
pub const VkDeviceGroupCommandBufferBeginInfo = struct_VkDeviceGroupCommandBufferBeginInfo;
pub const struct_VkDeviceGroupSubmitInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    waitSemaphoreCount: u32,
    pWaitSemaphoreDeviceIndices: [*c]const u32,
    commandBufferCount: u32,
    pCommandBufferDeviceMasks: [*c]const u32,
    signalSemaphoreCount: u32,
    pSignalSemaphoreDeviceIndices: [*c]const u32,
};
pub const VkDeviceGroupSubmitInfo = struct_VkDeviceGroupSubmitInfo;
pub const struct_VkDeviceGroupBindSparseInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    resourceDeviceIndex: u32,
    memoryDeviceIndex: u32,
};
pub const VkDeviceGroupBindSparseInfo = struct_VkDeviceGroupBindSparseInfo;
pub const struct_VkBindBufferMemoryDeviceGroupInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    deviceIndexCount: u32,
    pDeviceIndices: [*c]const u32,
};
pub const VkBindBufferMemoryDeviceGroupInfo = struct_VkBindBufferMemoryDeviceGroupInfo;
pub const struct_VkBindImageMemoryDeviceGroupInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    deviceIndexCount: u32,
    pDeviceIndices: [*c]const u32,
    splitInstanceBindRegionCount: u32,
    pSplitInstanceBindRegions: [*c]const VkRect2D,
};
pub const VkBindImageMemoryDeviceGroupInfo = struct_VkBindImageMemoryDeviceGroupInfo;
pub const struct_VkPhysicalDeviceGroupProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    physicalDeviceCount: u32,
    physicalDevices: [32]VkPhysicalDevice,
    subsetAllocation: VkBool32,
};
pub const VkPhysicalDeviceGroupProperties = struct_VkPhysicalDeviceGroupProperties;
pub const struct_VkDeviceGroupDeviceCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    physicalDeviceCount: u32,
    pPhysicalDevices: [*c]const VkPhysicalDevice,
};
pub const VkDeviceGroupDeviceCreateInfo = struct_VkDeviceGroupDeviceCreateInfo;
pub const struct_VkBufferMemoryRequirementsInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    buffer: VkBuffer,
};
pub const VkBufferMemoryRequirementsInfo2 = struct_VkBufferMemoryRequirementsInfo2;
pub const struct_VkImageMemoryRequirementsInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    image: VkImage,
};
pub const VkImageMemoryRequirementsInfo2 = struct_VkImageMemoryRequirementsInfo2;
pub const struct_VkImageSparseMemoryRequirementsInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    image: VkImage,
};
pub const VkImageSparseMemoryRequirementsInfo2 = struct_VkImageSparseMemoryRequirementsInfo2;
pub const struct_VkMemoryRequirements2 = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    memoryRequirements: VkMemoryRequirements,
};
pub const VkMemoryRequirements2 = struct_VkMemoryRequirements2;
pub const struct_VkSparseImageMemoryRequirements2 = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    memoryRequirements: VkSparseImageMemoryRequirements,
};
pub const VkSparseImageMemoryRequirements2 = struct_VkSparseImageMemoryRequirements2;
pub const struct_VkPhysicalDeviceFeatures2 = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    features: VkPhysicalDeviceFeatures,
};
pub const VkPhysicalDeviceFeatures2 = struct_VkPhysicalDeviceFeatures2;
pub const struct_VkPhysicalDeviceProperties2 = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    properties: VkPhysicalDeviceProperties,
};
pub const VkPhysicalDeviceProperties2 = struct_VkPhysicalDeviceProperties2;
pub const struct_VkFormatProperties2 = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    formatProperties: VkFormatProperties,
};
pub const VkFormatProperties2 = struct_VkFormatProperties2;
pub const struct_VkImageFormatProperties2 = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    imageFormatProperties: VkImageFormatProperties,
};
pub const VkImageFormatProperties2 = struct_VkImageFormatProperties2;
pub const struct_VkPhysicalDeviceImageFormatInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    format: VkFormat,
    type: VkImageType,
    tiling: VkImageTiling,
    usage: VkImageUsageFlags,
    flags: VkImageCreateFlags,
};
pub const VkPhysicalDeviceImageFormatInfo2 = struct_VkPhysicalDeviceImageFormatInfo2;
pub const struct_VkQueueFamilyProperties2 = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    queueFamilyProperties: VkQueueFamilyProperties,
};
pub const VkQueueFamilyProperties2 = struct_VkQueueFamilyProperties2;
pub const struct_VkPhysicalDeviceMemoryProperties2 = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    memoryProperties: VkPhysicalDeviceMemoryProperties,
};
pub const VkPhysicalDeviceMemoryProperties2 = struct_VkPhysicalDeviceMemoryProperties2;
pub const struct_VkSparseImageFormatProperties2 = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    properties: VkSparseImageFormatProperties,
};
pub const VkSparseImageFormatProperties2 = struct_VkSparseImageFormatProperties2;
pub const struct_VkPhysicalDeviceSparseImageFormatInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    format: VkFormat,
    type: VkImageType,
    samples: VkSampleCountFlagBits,
    usage: VkImageUsageFlags,
    tiling: VkImageTiling,
};
pub const VkPhysicalDeviceSparseImageFormatInfo2 = struct_VkPhysicalDeviceSparseImageFormatInfo2;
pub const struct_VkPhysicalDevicePointClippingProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    pointClippingBehavior: VkPointClippingBehavior,
};
pub const VkPhysicalDevicePointClippingProperties = struct_VkPhysicalDevicePointClippingProperties;
pub const struct_VkInputAttachmentAspectReference = extern struct {
    subpass: u32,
    inputAttachmentIndex: u32,
    aspectMask: VkImageAspectFlags,
};
pub const VkInputAttachmentAspectReference = struct_VkInputAttachmentAspectReference;
pub const struct_VkRenderPassInputAttachmentAspectCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    aspectReferenceCount: u32,
    pAspectReferences: [*c]const VkInputAttachmentAspectReference,
};
pub const VkRenderPassInputAttachmentAspectCreateInfo = struct_VkRenderPassInputAttachmentAspectCreateInfo;
pub const struct_VkImageViewUsageCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    usage: VkImageUsageFlags,
};
pub const VkImageViewUsageCreateInfo = struct_VkImageViewUsageCreateInfo;
pub const struct_VkPipelineTessellationDomainOriginStateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    domainOrigin: VkTessellationDomainOrigin,
};
pub const VkPipelineTessellationDomainOriginStateCreateInfo = struct_VkPipelineTessellationDomainOriginStateCreateInfo;
pub const struct_VkRenderPassMultiviewCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    subpassCount: u32,
    pViewMasks: [*c]const u32,
    dependencyCount: u32,
    pViewOffsets: [*c]const i32,
    correlationMaskCount: u32,
    pCorrelationMasks: [*c]const u32,
};
pub const VkRenderPassMultiviewCreateInfo = struct_VkRenderPassMultiviewCreateInfo;
pub const struct_VkPhysicalDeviceMultiviewFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    multiview: VkBool32,
    multiviewGeometryShader: VkBool32,
    multiviewTessellationShader: VkBool32,
};
pub const VkPhysicalDeviceMultiviewFeatures = struct_VkPhysicalDeviceMultiviewFeatures;
pub const struct_VkPhysicalDeviceMultiviewProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxMultiviewViewCount: u32,
    maxMultiviewInstanceIndex: u32,
};
pub const VkPhysicalDeviceMultiviewProperties = struct_VkPhysicalDeviceMultiviewProperties;
pub const struct_VkPhysicalDeviceVariablePointersFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    variablePointersStorageBuffer: VkBool32,
    variablePointers: VkBool32,
};
pub const VkPhysicalDeviceVariablePointersFeatures = struct_VkPhysicalDeviceVariablePointersFeatures;
pub const VkPhysicalDeviceVariablePointerFeatures = VkPhysicalDeviceVariablePointersFeatures;
pub const struct_VkPhysicalDeviceProtectedMemoryFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    protectedMemory: VkBool32,
};
pub const VkPhysicalDeviceProtectedMemoryFeatures = struct_VkPhysicalDeviceProtectedMemoryFeatures;
pub const struct_VkPhysicalDeviceProtectedMemoryProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    protectedNoFault: VkBool32,
};
pub const VkPhysicalDeviceProtectedMemoryProperties = struct_VkPhysicalDeviceProtectedMemoryProperties;
pub const struct_VkDeviceQueueInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkDeviceQueueCreateFlags,
    queueFamilyIndex: u32,
    queueIndex: u32,
};
pub const VkDeviceQueueInfo2 = struct_VkDeviceQueueInfo2;
pub const struct_VkProtectedSubmitInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    protectedSubmit: VkBool32,
};
pub const VkProtectedSubmitInfo = struct_VkProtectedSubmitInfo;
pub const struct_VkSamplerYcbcrConversionCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    format: VkFormat,
    ycbcrModel: VkSamplerYcbcrModelConversion,
    ycbcrRange: VkSamplerYcbcrRange,
    components: VkComponentMapping,
    xChromaOffset: VkChromaLocation,
    yChromaOffset: VkChromaLocation,
    chromaFilter: VkFilter,
    forceExplicitReconstruction: VkBool32,
};
pub const VkSamplerYcbcrConversionCreateInfo = struct_VkSamplerYcbcrConversionCreateInfo;
pub const struct_VkSamplerYcbcrConversionInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    conversion: VkSamplerYcbcrConversion,
};
pub const VkSamplerYcbcrConversionInfo = struct_VkSamplerYcbcrConversionInfo;
pub const struct_VkBindImagePlaneMemoryInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    planeAspect: VkImageAspectFlagBits,
};
pub const VkBindImagePlaneMemoryInfo = struct_VkBindImagePlaneMemoryInfo;
pub const struct_VkImagePlaneMemoryRequirementsInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    planeAspect: VkImageAspectFlagBits,
};
pub const VkImagePlaneMemoryRequirementsInfo = struct_VkImagePlaneMemoryRequirementsInfo;
pub const struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    samplerYcbcrConversion: VkBool32,
};
pub const VkPhysicalDeviceSamplerYcbcrConversionFeatures = struct_VkPhysicalDeviceSamplerYcbcrConversionFeatures;
pub const struct_VkSamplerYcbcrConversionImageFormatProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    combinedImageSamplerDescriptorCount: u32,
};
pub const VkSamplerYcbcrConversionImageFormatProperties = struct_VkSamplerYcbcrConversionImageFormatProperties;
pub const struct_VkDescriptorUpdateTemplateEntry = extern struct {
    dstBinding: u32,
    dstArrayElement: u32,
    descriptorCount: u32,
    descriptorType: VkDescriptorType,
    offset: usize,
    stride: usize,
};
pub const VkDescriptorUpdateTemplateEntry = struct_VkDescriptorUpdateTemplateEntry;
pub const struct_VkDescriptorUpdateTemplateCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkDescriptorUpdateTemplateCreateFlags,
    descriptorUpdateEntryCount: u32,
    pDescriptorUpdateEntries: [*c]const VkDescriptorUpdateTemplateEntry,
    templateType: VkDescriptorUpdateTemplateType,
    descriptorSetLayout: VkDescriptorSetLayout,
    pipelineBindPoint: VkPipelineBindPoint,
    pipelineLayout: VkPipelineLayout,
    set: u32,
};
pub const VkDescriptorUpdateTemplateCreateInfo = struct_VkDescriptorUpdateTemplateCreateInfo;
pub const struct_VkExternalMemoryProperties = extern struct {
    externalMemoryFeatures: VkExternalMemoryFeatureFlags,
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlags,
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlags,
};
pub const VkExternalMemoryProperties = struct_VkExternalMemoryProperties;
pub const struct_VkPhysicalDeviceExternalImageFormatInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    handleType: VkExternalMemoryHandleTypeFlagBits,
};
pub const VkPhysicalDeviceExternalImageFormatInfo = struct_VkPhysicalDeviceExternalImageFormatInfo;
pub const struct_VkExternalImageFormatProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    externalMemoryProperties: VkExternalMemoryProperties,
};
pub const VkExternalImageFormatProperties = struct_VkExternalImageFormatProperties;
pub const struct_VkPhysicalDeviceExternalBufferInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkBufferCreateFlags,
    usage: VkBufferUsageFlags,
    handleType: VkExternalMemoryHandleTypeFlagBits,
};
pub const VkPhysicalDeviceExternalBufferInfo = struct_VkPhysicalDeviceExternalBufferInfo;
pub const struct_VkExternalBufferProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    externalMemoryProperties: VkExternalMemoryProperties,
};
pub const VkExternalBufferProperties = struct_VkExternalBufferProperties;
pub const struct_VkPhysicalDeviceIDProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    deviceUUID: [16]u8,
    driverUUID: [16]u8,
    deviceLUID: [8]u8,
    deviceNodeMask: u32,
    deviceLUIDValid: VkBool32,
};
pub const VkPhysicalDeviceIDProperties = struct_VkPhysicalDeviceIDProperties;
pub const struct_VkExternalMemoryImageCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    handleTypes: VkExternalMemoryHandleTypeFlags,
};
pub const VkExternalMemoryImageCreateInfo = struct_VkExternalMemoryImageCreateInfo;
pub const struct_VkExternalMemoryBufferCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    handleTypes: VkExternalMemoryHandleTypeFlags,
};
pub const VkExternalMemoryBufferCreateInfo = struct_VkExternalMemoryBufferCreateInfo;
pub const struct_VkExportMemoryAllocateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    handleTypes: VkExternalMemoryHandleTypeFlags,
};
pub const VkExportMemoryAllocateInfo = struct_VkExportMemoryAllocateInfo;
pub const struct_VkPhysicalDeviceExternalFenceInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    handleType: VkExternalFenceHandleTypeFlagBits,
};
pub const VkPhysicalDeviceExternalFenceInfo = struct_VkPhysicalDeviceExternalFenceInfo;
pub const struct_VkExternalFenceProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    exportFromImportedHandleTypes: VkExternalFenceHandleTypeFlags,
    compatibleHandleTypes: VkExternalFenceHandleTypeFlags,
    externalFenceFeatures: VkExternalFenceFeatureFlags,
};
pub const VkExternalFenceProperties = struct_VkExternalFenceProperties;
pub const struct_VkExportFenceCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    handleTypes: VkExternalFenceHandleTypeFlags,
};
pub const VkExportFenceCreateInfo = struct_VkExportFenceCreateInfo;
pub const struct_VkExportSemaphoreCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    handleTypes: VkExternalSemaphoreHandleTypeFlags,
};
pub const VkExportSemaphoreCreateInfo = struct_VkExportSemaphoreCreateInfo;
pub const struct_VkPhysicalDeviceExternalSemaphoreInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
};
pub const VkPhysicalDeviceExternalSemaphoreInfo = struct_VkPhysicalDeviceExternalSemaphoreInfo;
pub const struct_VkExternalSemaphoreProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    exportFromImportedHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    compatibleHandleTypes: VkExternalSemaphoreHandleTypeFlags,
    externalSemaphoreFeatures: VkExternalSemaphoreFeatureFlags,
};
pub const VkExternalSemaphoreProperties = struct_VkExternalSemaphoreProperties;
pub const struct_VkPhysicalDeviceMaintenance3Properties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxPerSetDescriptors: u32,
    maxMemoryAllocationSize: VkDeviceSize,
};
pub const VkPhysicalDeviceMaintenance3Properties = struct_VkPhysicalDeviceMaintenance3Properties;
pub const struct_VkDescriptorSetLayoutSupport = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    supported: VkBool32,
};
pub const VkDescriptorSetLayoutSupport = struct_VkDescriptorSetLayoutSupport;
pub const struct_VkPhysicalDeviceShaderDrawParametersFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderDrawParameters: VkBool32,
};
pub const VkPhysicalDeviceShaderDrawParametersFeatures = struct_VkPhysicalDeviceShaderDrawParametersFeatures;
pub const VkPhysicalDeviceShaderDrawParameterFeatures = VkPhysicalDeviceShaderDrawParametersFeatures;
pub const PFN_vkEnumerateInstanceVersion = ?*const fn ([*c]u32) callconv(.C) VkResult;
pub const PFN_vkBindBufferMemory2 = ?*const fn (VkDevice, u32, [*c]const VkBindBufferMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkBindImageMemory2 = ?*const fn (VkDevice, u32, [*c]const VkBindImageMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkGetDeviceGroupPeerMemoryFeatures = ?*const fn (VkDevice, u32, u32, u32, [*c]VkPeerMemoryFeatureFlags) callconv(.C) void;
pub const PFN_vkCmdSetDeviceMask = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchBase = ?*const fn (VkCommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.C) void;
pub const PFN_vkEnumeratePhysicalDeviceGroups = ?*const fn (VkInstance, [*c]u32, [*c]VkPhysicalDeviceGroupProperties) callconv(.C) VkResult;
pub const PFN_vkGetImageMemoryRequirements2 = ?*const fn (VkDevice, [*c]const VkImageMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetBufferMemoryRequirements2 = ?*const fn (VkDevice, [*c]const VkBufferMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements2 = ?*const fn (VkDevice, [*c]const VkImageSparseMemoryRequirementsInfo2, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFeatures2 = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceFeatures2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceProperties2 = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties2 = ?*const fn (VkPhysicalDevice, VkFormat, [*c]VkFormatProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties2 = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceImageFormatInfo2, [*c]VkImageFormatProperties2) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties2 = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkQueueFamilyProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties2 = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceMemoryProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties2 = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSparseImageFormatInfo2, [*c]u32, [*c]VkSparseImageFormatProperties2) callconv(.C) void;
pub const PFN_vkTrimCommandPool = ?*const fn (VkDevice, VkCommandPool, VkCommandPoolTrimFlags) callconv(.C) void;
pub const PFN_vkGetDeviceQueue2 = ?*const fn (VkDevice, [*c]const VkDeviceQueueInfo2, [*c]VkQueue) callconv(.C) void;
pub const PFN_vkCreateSamplerYcbcrConversion = ?*const fn (VkDevice, [*c]const VkSamplerYcbcrConversionCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSamplerYcbcrConversion) callconv(.C) VkResult;
pub const PFN_vkDestroySamplerYcbcrConversion = ?*const fn (VkDevice, VkSamplerYcbcrConversion, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCreateDescriptorUpdateTemplate = ?*const fn (VkDevice, [*c]const VkDescriptorUpdateTemplateCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorUpdateTemplate) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorUpdateTemplate = ?*const fn (VkDevice, VkDescriptorUpdateTemplate, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkUpdateDescriptorSetWithTemplate = ?*const fn (VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalBufferProperties = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalBufferInfo, [*c]VkExternalBufferProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalFenceProperties = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalFenceInfo, [*c]VkExternalFenceProperties) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceExternalSemaphoreProperties = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalSemaphoreInfo, [*c]VkExternalSemaphoreProperties) callconv(.C) void;
pub const PFN_vkGetDescriptorSetLayoutSupport = ?*const fn (VkDevice, [*c]const VkDescriptorSetLayoutCreateInfo, [*c]VkDescriptorSetLayoutSupport) callconv(.C) void;
pub extern fn vkEnumerateInstanceVersion(pApiVersion: [*c]u32) VkResult;
pub extern fn vkBindBufferMemory2(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindBufferMemoryInfo) VkResult;
pub extern fn vkBindImageMemory2(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindImageMemoryInfo) VkResult;
pub extern fn vkGetDeviceGroupPeerMemoryFeatures(device: VkDevice, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: [*c]VkPeerMemoryFeatureFlags) void;
pub extern fn vkCmdSetDeviceMask(commandBuffer: VkCommandBuffer, deviceMask: u32) void;
pub extern fn vkCmdDispatchBase(commandBuffer: VkCommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub extern fn vkEnumeratePhysicalDeviceGroups(instance: VkInstance, pPhysicalDeviceGroupCount: [*c]u32, pPhysicalDeviceGroupProperties: [*c]VkPhysicalDeviceGroupProperties) VkResult;
pub extern fn vkGetImageMemoryRequirements2(device: VkDevice, pInfo: [*c]const VkImageMemoryRequirementsInfo2, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetBufferMemoryRequirements2(device: VkDevice, pInfo: [*c]const VkBufferMemoryRequirementsInfo2, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetImageSparseMemoryRequirements2(device: VkDevice, pInfo: [*c]const VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements2) void;
pub extern fn vkGetPhysicalDeviceFeatures2(physicalDevice: VkPhysicalDevice, pFeatures: [*c]VkPhysicalDeviceFeatures2) void;
pub extern fn vkGetPhysicalDeviceProperties2(physicalDevice: VkPhysicalDevice, pProperties: [*c]VkPhysicalDeviceProperties2) void;
pub extern fn vkGetPhysicalDeviceFormatProperties2(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: [*c]VkFormatProperties2) void;
pub extern fn vkGetPhysicalDeviceImageFormatProperties2(physicalDevice: VkPhysicalDevice, pImageFormatInfo: [*c]const VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: [*c]VkImageFormatProperties2) VkResult;
pub extern fn vkGetPhysicalDeviceQueueFamilyProperties2(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: [*c]u32, pQueueFamilyProperties: [*c]VkQueueFamilyProperties2) void;
pub extern fn vkGetPhysicalDeviceMemoryProperties2(physicalDevice: VkPhysicalDevice, pMemoryProperties: [*c]VkPhysicalDeviceMemoryProperties2) void;
pub extern fn vkGetPhysicalDeviceSparseImageFormatProperties2(physicalDevice: VkPhysicalDevice, pFormatInfo: [*c]const VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: [*c]u32, pProperties: [*c]VkSparseImageFormatProperties2) void;
pub extern fn vkTrimCommandPool(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags) void;
pub extern fn vkGetDeviceQueue2(device: VkDevice, pQueueInfo: [*c]const VkDeviceQueueInfo2, pQueue: [*c]VkQueue) void;
pub extern fn vkCreateSamplerYcbcrConversion(device: VkDevice, pCreateInfo: [*c]const VkSamplerYcbcrConversionCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pYcbcrConversion: [*c]VkSamplerYcbcrConversion) VkResult;
pub extern fn vkDestroySamplerYcbcrConversion(device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCreateDescriptorUpdateTemplate(device: VkDevice, pCreateInfo: [*c]const VkDescriptorUpdateTemplateCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pDescriptorUpdateTemplate: [*c]VkDescriptorUpdateTemplate) VkResult;
pub extern fn vkDestroyDescriptorUpdateTemplate(device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkUpdateDescriptorSetWithTemplate(device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: ?*const anyopaque) void;
pub extern fn vkGetPhysicalDeviceExternalBufferProperties(physicalDevice: VkPhysicalDevice, pExternalBufferInfo: [*c]const VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: [*c]VkExternalBufferProperties) void;
pub extern fn vkGetPhysicalDeviceExternalFenceProperties(physicalDevice: VkPhysicalDevice, pExternalFenceInfo: [*c]const VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: [*c]VkExternalFenceProperties) void;
pub extern fn vkGetPhysicalDeviceExternalSemaphoreProperties(physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: [*c]const VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: [*c]VkExternalSemaphoreProperties) void;
pub extern fn vkGetDescriptorSetLayoutSupport(device: VkDevice, pCreateInfo: [*c]const VkDescriptorSetLayoutCreateInfo, pSupport: [*c]VkDescriptorSetLayoutSupport) void;
pub const VK_DRIVER_ID_AMD_PROPRIETARY: c_int = 1;
pub const VK_DRIVER_ID_AMD_OPEN_SOURCE: c_int = 2;
pub const VK_DRIVER_ID_MESA_RADV: c_int = 3;
pub const VK_DRIVER_ID_NVIDIA_PROPRIETARY: c_int = 4;
pub const VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS: c_int = 5;
pub const VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA: c_int = 6;
pub const VK_DRIVER_ID_IMAGINATION_PROPRIETARY: c_int = 7;
pub const VK_DRIVER_ID_QUALCOMM_PROPRIETARY: c_int = 8;
pub const VK_DRIVER_ID_ARM_PROPRIETARY: c_int = 9;
pub const VK_DRIVER_ID_GOOGLE_SWIFTSHADER: c_int = 10;
pub const VK_DRIVER_ID_GGP_PROPRIETARY: c_int = 11;
pub const VK_DRIVER_ID_BROADCOM_PROPRIETARY: c_int = 12;
pub const VK_DRIVER_ID_MESA_LLVMPIPE: c_int = 13;
pub const VK_DRIVER_ID_MOLTENVK: c_int = 14;
pub const VK_DRIVER_ID_COREAVI_PROPRIETARY: c_int = 15;
pub const VK_DRIVER_ID_JUICE_PROPRIETARY: c_int = 16;
pub const VK_DRIVER_ID_VERISILICON_PROPRIETARY: c_int = 17;
pub const VK_DRIVER_ID_MESA_TURNIP: c_int = 18;
pub const VK_DRIVER_ID_MESA_V3DV: c_int = 19;
pub const VK_DRIVER_ID_MESA_PANVK: c_int = 20;
pub const VK_DRIVER_ID_SAMSUNG_PROPRIETARY: c_int = 21;
pub const VK_DRIVER_ID_MESA_VENUS: c_int = 22;
pub const VK_DRIVER_ID_MESA_DOZEN: c_int = 23;
pub const VK_DRIVER_ID_AMD_PROPRIETARY_KHR: c_int = 1;
pub const VK_DRIVER_ID_AMD_OPEN_SOURCE_KHR: c_int = 2;
pub const VK_DRIVER_ID_MESA_RADV_KHR: c_int = 3;
pub const VK_DRIVER_ID_NVIDIA_PROPRIETARY_KHR: c_int = 4;
pub const VK_DRIVER_ID_INTEL_PROPRIETARY_WINDOWS_KHR: c_int = 5;
pub const VK_DRIVER_ID_INTEL_OPEN_SOURCE_MESA_KHR: c_int = 6;
pub const VK_DRIVER_ID_IMAGINATION_PROPRIETARY_KHR: c_int = 7;
pub const VK_DRIVER_ID_QUALCOMM_PROPRIETARY_KHR: c_int = 8;
pub const VK_DRIVER_ID_ARM_PROPRIETARY_KHR: c_int = 9;
pub const VK_DRIVER_ID_GOOGLE_SWIFTSHADER_KHR: c_int = 10;
pub const VK_DRIVER_ID_GGP_PROPRIETARY_KHR: c_int = 11;
pub const VK_DRIVER_ID_BROADCOM_PROPRIETARY_KHR: c_int = 12;
pub const VK_DRIVER_ID_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDriverId = c_uint;
pub const VkDriverId = enum_VkDriverId;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY: c_int = 0;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL: c_int = 1;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE: c_int = 2;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_32_BIT_ONLY_KHR: c_int = 0;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_ALL_KHR: c_int = 1;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_NONE_KHR: c_int = 2;
pub const VK_SHADER_FLOAT_CONTROLS_INDEPENDENCE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkShaderFloatControlsIndependence = c_uint;
pub const VkShaderFloatControlsIndependence = enum_VkShaderFloatControlsIndependence;
pub const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE: c_int = 0;
pub const VK_SAMPLER_REDUCTION_MODE_MIN: c_int = 1;
pub const VK_SAMPLER_REDUCTION_MODE_MAX: c_int = 2;
pub const VK_SAMPLER_REDUCTION_MODE_WEIGHTED_AVERAGE_EXT: c_int = 0;
pub const VK_SAMPLER_REDUCTION_MODE_MIN_EXT: c_int = 1;
pub const VK_SAMPLER_REDUCTION_MODE_MAX_EXT: c_int = 2;
pub const VK_SAMPLER_REDUCTION_MODE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSamplerReductionMode = c_uint;
pub const VkSamplerReductionMode = enum_VkSamplerReductionMode;
pub const VK_SEMAPHORE_TYPE_BINARY: c_int = 0;
pub const VK_SEMAPHORE_TYPE_TIMELINE: c_int = 1;
pub const VK_SEMAPHORE_TYPE_BINARY_KHR: c_int = 0;
pub const VK_SEMAPHORE_TYPE_TIMELINE_KHR: c_int = 1;
pub const VK_SEMAPHORE_TYPE_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSemaphoreType = c_uint;
pub const VkSemaphoreType = enum_VkSemaphoreType;
pub const VK_RESOLVE_MODE_NONE: c_int = 0;
pub const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT: c_int = 1;
pub const VK_RESOLVE_MODE_AVERAGE_BIT: c_int = 2;
pub const VK_RESOLVE_MODE_MIN_BIT: c_int = 4;
pub const VK_RESOLVE_MODE_MAX_BIT: c_int = 8;
pub const VK_RESOLVE_MODE_NONE_KHR: c_int = 0;
pub const VK_RESOLVE_MODE_SAMPLE_ZERO_BIT_KHR: c_int = 1;
pub const VK_RESOLVE_MODE_AVERAGE_BIT_KHR: c_int = 2;
pub const VK_RESOLVE_MODE_MIN_BIT_KHR: c_int = 4;
pub const VK_RESOLVE_MODE_MAX_BIT_KHR: c_int = 8;
pub const VK_RESOLVE_MODE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkResolveModeFlagBits = c_uint;
pub const VkResolveModeFlagBits = enum_VkResolveModeFlagBits;
pub const VkResolveModeFlags = VkFlags;
pub const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT: c_int = 1;
pub const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT: c_int = 2;
pub const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT: c_int = 4;
pub const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT: c_int = 8;
pub const VK_DESCRIPTOR_BINDING_UPDATE_AFTER_BIND_BIT_EXT: c_int = 1;
pub const VK_DESCRIPTOR_BINDING_UPDATE_UNUSED_WHILE_PENDING_BIT_EXT: c_int = 2;
pub const VK_DESCRIPTOR_BINDING_PARTIALLY_BOUND_BIT_EXT: c_int = 4;
pub const VK_DESCRIPTOR_BINDING_VARIABLE_DESCRIPTOR_COUNT_BIT_EXT: c_int = 8;
pub const VK_DESCRIPTOR_BINDING_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkDescriptorBindingFlagBits = c_uint;
pub const VkDescriptorBindingFlagBits = enum_VkDescriptorBindingFlagBits;
pub const VkDescriptorBindingFlags = VkFlags;
pub const VK_SEMAPHORE_WAIT_ANY_BIT: c_int = 1;
pub const VK_SEMAPHORE_WAIT_ANY_BIT_KHR: c_int = 1;
pub const VK_SEMAPHORE_WAIT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSemaphoreWaitFlagBits = c_uint;
pub const VkSemaphoreWaitFlagBits = enum_VkSemaphoreWaitFlagBits;
pub const VkSemaphoreWaitFlags = VkFlags;
pub const struct_VkPhysicalDeviceVulkan11Features = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    storageBuffer16BitAccess: VkBool32,
    uniformAndStorageBuffer16BitAccess: VkBool32,
    storagePushConstant16: VkBool32,
    storageInputOutput16: VkBool32,
    multiview: VkBool32,
    multiviewGeometryShader: VkBool32,
    multiviewTessellationShader: VkBool32,
    variablePointersStorageBuffer: VkBool32,
    variablePointers: VkBool32,
    protectedMemory: VkBool32,
    samplerYcbcrConversion: VkBool32,
    shaderDrawParameters: VkBool32,
};
pub const VkPhysicalDeviceVulkan11Features = struct_VkPhysicalDeviceVulkan11Features;
pub const struct_VkPhysicalDeviceVulkan11Properties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    deviceUUID: [16]u8,
    driverUUID: [16]u8,
    deviceLUID: [8]u8,
    deviceNodeMask: u32,
    deviceLUIDValid: VkBool32,
    subgroupSize: u32,
    subgroupSupportedStages: VkShaderStageFlags,
    subgroupSupportedOperations: VkSubgroupFeatureFlags,
    subgroupQuadOperationsInAllStages: VkBool32,
    pointClippingBehavior: VkPointClippingBehavior,
    maxMultiviewViewCount: u32,
    maxMultiviewInstanceIndex: u32,
    protectedNoFault: VkBool32,
    maxPerSetDescriptors: u32,
    maxMemoryAllocationSize: VkDeviceSize,
};
pub const VkPhysicalDeviceVulkan11Properties = struct_VkPhysicalDeviceVulkan11Properties;
pub const struct_VkPhysicalDeviceVulkan12Features = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    samplerMirrorClampToEdge: VkBool32,
    drawIndirectCount: VkBool32,
    storageBuffer8BitAccess: VkBool32,
    uniformAndStorageBuffer8BitAccess: VkBool32,
    storagePushConstant8: VkBool32,
    shaderBufferInt64Atomics: VkBool32,
    shaderSharedInt64Atomics: VkBool32,
    shaderFloat16: VkBool32,
    shaderInt8: VkBool32,
    descriptorIndexing: VkBool32,
    shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    shaderSampledImageArrayNonUniformIndexing: VkBool32,
    shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageImageArrayNonUniformIndexing: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingUpdateUnusedWhilePending: VkBool32,
    descriptorBindingPartiallyBound: VkBool32,
    descriptorBindingVariableDescriptorCount: VkBool32,
    runtimeDescriptorArray: VkBool32,
    samplerFilterMinmax: VkBool32,
    scalarBlockLayout: VkBool32,
    imagelessFramebuffer: VkBool32,
    uniformBufferStandardLayout: VkBool32,
    shaderSubgroupExtendedTypes: VkBool32,
    separateDepthStencilLayouts: VkBool32,
    hostQueryReset: VkBool32,
    timelineSemaphore: VkBool32,
    bufferDeviceAddress: VkBool32,
    bufferDeviceAddressCaptureReplay: VkBool32,
    bufferDeviceAddressMultiDevice: VkBool32,
    vulkanMemoryModel: VkBool32,
    vulkanMemoryModelDeviceScope: VkBool32,
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
    shaderOutputViewportIndex: VkBool32,
    shaderOutputLayer: VkBool32,
    subgroupBroadcastDynamicId: VkBool32,
};
pub const VkPhysicalDeviceVulkan12Features = struct_VkPhysicalDeviceVulkan12Features;
pub const struct_VkConformanceVersion = extern struct {
    major: u8,
    minor: u8,
    subminor: u8,
    patch: u8,
};
pub const VkConformanceVersion = struct_VkConformanceVersion;
pub const struct_VkPhysicalDeviceVulkan12Properties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    driverID: VkDriverId,
    driverName: [256]u8,
    driverInfo: [256]u8,
    conformanceVersion: VkConformanceVersion,
    denormBehaviorIndependence: VkShaderFloatControlsIndependence,
    roundingModeIndependence: VkShaderFloatControlsIndependence,
    shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    shaderDenormPreserveFloat16: VkBool32,
    shaderDenormPreserveFloat32: VkBool32,
    shaderDenormPreserveFloat64: VkBool32,
    shaderDenormFlushToZeroFloat16: VkBool32,
    shaderDenormFlushToZeroFloat32: VkBool32,
    shaderDenormFlushToZeroFloat64: VkBool32,
    shaderRoundingModeRTEFloat16: VkBool32,
    shaderRoundingModeRTEFloat32: VkBool32,
    shaderRoundingModeRTEFloat64: VkBool32,
    shaderRoundingModeRTZFloat16: VkBool32,
    shaderRoundingModeRTZFloat32: VkBool32,
    shaderRoundingModeRTZFloat64: VkBool32,
    maxUpdateAfterBindDescriptorsInAllPools: u32,
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    robustBufferAccessUpdateAfterBind: VkBool32,
    quadDivergentImplicitLod: VkBool32,
    maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    maxPerStageUpdateAfterBindResources: u32,
    maxDescriptorSetUpdateAfterBindSamplers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindSampledImages: u32,
    maxDescriptorSetUpdateAfterBindStorageImages: u32,
    maxDescriptorSetUpdateAfterBindInputAttachments: u32,
    supportedDepthResolveModes: VkResolveModeFlags,
    supportedStencilResolveModes: VkResolveModeFlags,
    independentResolveNone: VkBool32,
    independentResolve: VkBool32,
    filterMinmaxSingleComponentFormats: VkBool32,
    filterMinmaxImageComponentMapping: VkBool32,
    maxTimelineSemaphoreValueDifference: u64,
    framebufferIntegerColorSampleCounts: VkSampleCountFlags,
};
pub const VkPhysicalDeviceVulkan12Properties = struct_VkPhysicalDeviceVulkan12Properties;
pub const struct_VkImageFormatListCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    viewFormatCount: u32,
    pViewFormats: [*c]const VkFormat,
};
pub const VkImageFormatListCreateInfo = struct_VkImageFormatListCreateInfo;
pub const struct_VkAttachmentDescription2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkAttachmentDescriptionFlags,
    format: VkFormat,
    samples: VkSampleCountFlagBits,
    loadOp: VkAttachmentLoadOp,
    storeOp: VkAttachmentStoreOp,
    stencilLoadOp: VkAttachmentLoadOp,
    stencilStoreOp: VkAttachmentStoreOp,
    initialLayout: VkImageLayout,
    finalLayout: VkImageLayout,
};
pub const VkAttachmentDescription2 = struct_VkAttachmentDescription2;
pub const struct_VkAttachmentReference2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    attachment: u32,
    layout: VkImageLayout,
    aspectMask: VkImageAspectFlags,
};
pub const VkAttachmentReference2 = struct_VkAttachmentReference2;
pub const struct_VkSubpassDescription2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkSubpassDescriptionFlags,
    pipelineBindPoint: VkPipelineBindPoint,
    viewMask: u32,
    inputAttachmentCount: u32,
    pInputAttachments: [*c]const VkAttachmentReference2,
    colorAttachmentCount: u32,
    pColorAttachments: [*c]const VkAttachmentReference2,
    pResolveAttachments: [*c]const VkAttachmentReference2,
    pDepthStencilAttachment: [*c]const VkAttachmentReference2,
    preserveAttachmentCount: u32,
    pPreserveAttachments: [*c]const u32,
};
pub const VkSubpassDescription2 = struct_VkSubpassDescription2;
pub const struct_VkSubpassDependency2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcSubpass: u32,
    dstSubpass: u32,
    srcStageMask: VkPipelineStageFlags,
    dstStageMask: VkPipelineStageFlags,
    srcAccessMask: VkAccessFlags,
    dstAccessMask: VkAccessFlags,
    dependencyFlags: VkDependencyFlags,
    viewOffset: i32,
};
pub const VkSubpassDependency2 = struct_VkSubpassDependency2;
pub const struct_VkRenderPassCreateInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkRenderPassCreateFlags,
    attachmentCount: u32,
    pAttachments: [*c]const VkAttachmentDescription2,
    subpassCount: u32,
    pSubpasses: [*c]const VkSubpassDescription2,
    dependencyCount: u32,
    pDependencies: [*c]const VkSubpassDependency2,
    correlatedViewMaskCount: u32,
    pCorrelatedViewMasks: [*c]const u32,
};
pub const VkRenderPassCreateInfo2 = struct_VkRenderPassCreateInfo2;
pub const struct_VkSubpassBeginInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    contents: VkSubpassContents,
};
pub const VkSubpassBeginInfo = struct_VkSubpassBeginInfo;
pub const struct_VkSubpassEndInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
};
pub const VkSubpassEndInfo = struct_VkSubpassEndInfo;
pub const struct_VkPhysicalDevice8BitStorageFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    storageBuffer8BitAccess: VkBool32,
    uniformAndStorageBuffer8BitAccess: VkBool32,
    storagePushConstant8: VkBool32,
};
pub const VkPhysicalDevice8BitStorageFeatures = struct_VkPhysicalDevice8BitStorageFeatures;
pub const struct_VkPhysicalDeviceDriverProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    driverID: VkDriverId,
    driverName: [256]u8,
    driverInfo: [256]u8,
    conformanceVersion: VkConformanceVersion,
};
pub const VkPhysicalDeviceDriverProperties = struct_VkPhysicalDeviceDriverProperties;
pub const struct_VkPhysicalDeviceShaderAtomicInt64Features = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderBufferInt64Atomics: VkBool32,
    shaderSharedInt64Atomics: VkBool32,
};
pub const VkPhysicalDeviceShaderAtomicInt64Features = struct_VkPhysicalDeviceShaderAtomicInt64Features;
pub const struct_VkPhysicalDeviceShaderFloat16Int8Features = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderFloat16: VkBool32,
    shaderInt8: VkBool32,
};
pub const VkPhysicalDeviceShaderFloat16Int8Features = struct_VkPhysicalDeviceShaderFloat16Int8Features;
pub const struct_VkPhysicalDeviceFloatControlsProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    denormBehaviorIndependence: VkShaderFloatControlsIndependence,
    roundingModeIndependence: VkShaderFloatControlsIndependence,
    shaderSignedZeroInfNanPreserveFloat16: VkBool32,
    shaderSignedZeroInfNanPreserveFloat32: VkBool32,
    shaderSignedZeroInfNanPreserveFloat64: VkBool32,
    shaderDenormPreserveFloat16: VkBool32,
    shaderDenormPreserveFloat32: VkBool32,
    shaderDenormPreserveFloat64: VkBool32,
    shaderDenormFlushToZeroFloat16: VkBool32,
    shaderDenormFlushToZeroFloat32: VkBool32,
    shaderDenormFlushToZeroFloat64: VkBool32,
    shaderRoundingModeRTEFloat16: VkBool32,
    shaderRoundingModeRTEFloat32: VkBool32,
    shaderRoundingModeRTEFloat64: VkBool32,
    shaderRoundingModeRTZFloat16: VkBool32,
    shaderRoundingModeRTZFloat32: VkBool32,
    shaderRoundingModeRTZFloat64: VkBool32,
};
pub const VkPhysicalDeviceFloatControlsProperties = struct_VkPhysicalDeviceFloatControlsProperties;
pub const struct_VkDescriptorSetLayoutBindingFlagsCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    bindingCount: u32,
    pBindingFlags: [*c]const VkDescriptorBindingFlags,
};
pub const VkDescriptorSetLayoutBindingFlagsCreateInfo = struct_VkDescriptorSetLayoutBindingFlagsCreateInfo;
pub const struct_VkPhysicalDeviceDescriptorIndexingFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderInputAttachmentArrayDynamicIndexing: VkBool32,
    shaderUniformTexelBufferArrayDynamicIndexing: VkBool32,
    shaderStorageTexelBufferArrayDynamicIndexing: VkBool32,
    shaderUniformBufferArrayNonUniformIndexing: VkBool32,
    shaderSampledImageArrayNonUniformIndexing: VkBool32,
    shaderStorageBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageImageArrayNonUniformIndexing: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexing: VkBool32,
    shaderUniformTexelBufferArrayNonUniformIndexing: VkBool32,
    shaderStorageTexelBufferArrayNonUniformIndexing: VkBool32,
    descriptorBindingUniformBufferUpdateAfterBind: VkBool32,
    descriptorBindingSampledImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageImageUpdateAfterBind: VkBool32,
    descriptorBindingStorageBufferUpdateAfterBind: VkBool32,
    descriptorBindingUniformTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingStorageTexelBufferUpdateAfterBind: VkBool32,
    descriptorBindingUpdateUnusedWhilePending: VkBool32,
    descriptorBindingPartiallyBound: VkBool32,
    descriptorBindingVariableDescriptorCount: VkBool32,
    runtimeDescriptorArray: VkBool32,
};
pub const VkPhysicalDeviceDescriptorIndexingFeatures = struct_VkPhysicalDeviceDescriptorIndexingFeatures;
pub const struct_VkPhysicalDeviceDescriptorIndexingProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxUpdateAfterBindDescriptorsInAllPools: u32,
    shaderUniformBufferArrayNonUniformIndexingNative: VkBool32,
    shaderSampledImageArrayNonUniformIndexingNative: VkBool32,
    shaderStorageBufferArrayNonUniformIndexingNative: VkBool32,
    shaderStorageImageArrayNonUniformIndexingNative: VkBool32,
    shaderInputAttachmentArrayNonUniformIndexingNative: VkBool32,
    robustBufferAccessUpdateAfterBind: VkBool32,
    quadDivergentImplicitLod: VkBool32,
    maxPerStageDescriptorUpdateAfterBindSamplers: u32,
    maxPerStageDescriptorUpdateAfterBindUniformBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindStorageBuffers: u32,
    maxPerStageDescriptorUpdateAfterBindSampledImages: u32,
    maxPerStageDescriptorUpdateAfterBindStorageImages: u32,
    maxPerStageDescriptorUpdateAfterBindInputAttachments: u32,
    maxPerStageUpdateAfterBindResources: u32,
    maxDescriptorSetUpdateAfterBindSamplers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffers: u32,
    maxDescriptorSetUpdateAfterBindUniformBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffers: u32,
    maxDescriptorSetUpdateAfterBindStorageBuffersDynamic: u32,
    maxDescriptorSetUpdateAfterBindSampledImages: u32,
    maxDescriptorSetUpdateAfterBindStorageImages: u32,
    maxDescriptorSetUpdateAfterBindInputAttachments: u32,
};
pub const VkPhysicalDeviceDescriptorIndexingProperties = struct_VkPhysicalDeviceDescriptorIndexingProperties;
pub const struct_VkDescriptorSetVariableDescriptorCountAllocateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    descriptorSetCount: u32,
    pDescriptorCounts: [*c]const u32,
};
pub const VkDescriptorSetVariableDescriptorCountAllocateInfo = struct_VkDescriptorSetVariableDescriptorCountAllocateInfo;
pub const struct_VkDescriptorSetVariableDescriptorCountLayoutSupport = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxVariableDescriptorCount: u32,
};
pub const VkDescriptorSetVariableDescriptorCountLayoutSupport = struct_VkDescriptorSetVariableDescriptorCountLayoutSupport;
pub const struct_VkSubpassDescriptionDepthStencilResolve = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    depthResolveMode: VkResolveModeFlagBits,
    stencilResolveMode: VkResolveModeFlagBits,
    pDepthStencilResolveAttachment: [*c]const VkAttachmentReference2,
};
pub const VkSubpassDescriptionDepthStencilResolve = struct_VkSubpassDescriptionDepthStencilResolve;
pub const struct_VkPhysicalDeviceDepthStencilResolveProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    supportedDepthResolveModes: VkResolveModeFlags,
    supportedStencilResolveModes: VkResolveModeFlags,
    independentResolveNone: VkBool32,
    independentResolve: VkBool32,
};
pub const VkPhysicalDeviceDepthStencilResolveProperties = struct_VkPhysicalDeviceDepthStencilResolveProperties;
pub const struct_VkPhysicalDeviceScalarBlockLayoutFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    scalarBlockLayout: VkBool32,
};
pub const VkPhysicalDeviceScalarBlockLayoutFeatures = struct_VkPhysicalDeviceScalarBlockLayoutFeatures;
pub const struct_VkImageStencilUsageCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    stencilUsage: VkImageUsageFlags,
};
pub const VkImageStencilUsageCreateInfo = struct_VkImageStencilUsageCreateInfo;
pub const struct_VkSamplerReductionModeCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    reductionMode: VkSamplerReductionMode,
};
pub const VkSamplerReductionModeCreateInfo = struct_VkSamplerReductionModeCreateInfo;
pub const struct_VkPhysicalDeviceSamplerFilterMinmaxProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    filterMinmaxSingleComponentFormats: VkBool32,
    filterMinmaxImageComponentMapping: VkBool32,
};
pub const VkPhysicalDeviceSamplerFilterMinmaxProperties = struct_VkPhysicalDeviceSamplerFilterMinmaxProperties;
pub const struct_VkPhysicalDeviceVulkanMemoryModelFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    vulkanMemoryModel: VkBool32,
    vulkanMemoryModelDeviceScope: VkBool32,
    vulkanMemoryModelAvailabilityVisibilityChains: VkBool32,
};
pub const VkPhysicalDeviceVulkanMemoryModelFeatures = struct_VkPhysicalDeviceVulkanMemoryModelFeatures;
pub const struct_VkPhysicalDeviceImagelessFramebufferFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    imagelessFramebuffer: VkBool32,
};
pub const VkPhysicalDeviceImagelessFramebufferFeatures = struct_VkPhysicalDeviceImagelessFramebufferFeatures;
pub const struct_VkFramebufferAttachmentImageInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkImageCreateFlags,
    usage: VkImageUsageFlags,
    width: u32,
    height: u32,
    layerCount: u32,
    viewFormatCount: u32,
    pViewFormats: [*c]const VkFormat,
};
pub const VkFramebufferAttachmentImageInfo = struct_VkFramebufferAttachmentImageInfo;
pub const struct_VkFramebufferAttachmentsCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    attachmentImageInfoCount: u32,
    pAttachmentImageInfos: [*c]const VkFramebufferAttachmentImageInfo,
};
pub const VkFramebufferAttachmentsCreateInfo = struct_VkFramebufferAttachmentsCreateInfo;
pub const struct_VkRenderPassAttachmentBeginInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    attachmentCount: u32,
    pAttachments: [*c]const VkImageView,
};
pub const VkRenderPassAttachmentBeginInfo = struct_VkRenderPassAttachmentBeginInfo;
pub const struct_VkPhysicalDeviceUniformBufferStandardLayoutFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    uniformBufferStandardLayout: VkBool32,
};
pub const VkPhysicalDeviceUniformBufferStandardLayoutFeatures = struct_VkPhysicalDeviceUniformBufferStandardLayoutFeatures;
pub const struct_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderSubgroupExtendedTypes: VkBool32,
};
pub const VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures = struct_VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
pub const struct_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    separateDepthStencilLayouts: VkBool32,
};
pub const VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures = struct_VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
pub const struct_VkAttachmentReferenceStencilLayout = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    stencilLayout: VkImageLayout,
};
pub const VkAttachmentReferenceStencilLayout = struct_VkAttachmentReferenceStencilLayout;
pub const struct_VkAttachmentDescriptionStencilLayout = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    stencilInitialLayout: VkImageLayout,
    stencilFinalLayout: VkImageLayout,
};
pub const VkAttachmentDescriptionStencilLayout = struct_VkAttachmentDescriptionStencilLayout;
pub const struct_VkPhysicalDeviceHostQueryResetFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    hostQueryReset: VkBool32,
};
pub const VkPhysicalDeviceHostQueryResetFeatures = struct_VkPhysicalDeviceHostQueryResetFeatures;
pub const struct_VkPhysicalDeviceTimelineSemaphoreFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    timelineSemaphore: VkBool32,
};
pub const VkPhysicalDeviceTimelineSemaphoreFeatures = struct_VkPhysicalDeviceTimelineSemaphoreFeatures;
pub const struct_VkPhysicalDeviceTimelineSemaphoreProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxTimelineSemaphoreValueDifference: u64,
};
pub const VkPhysicalDeviceTimelineSemaphoreProperties = struct_VkPhysicalDeviceTimelineSemaphoreProperties;
pub const struct_VkSemaphoreTypeCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    semaphoreType: VkSemaphoreType,
    initialValue: u64,
};
pub const VkSemaphoreTypeCreateInfo = struct_VkSemaphoreTypeCreateInfo;
pub const struct_VkTimelineSemaphoreSubmitInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    waitSemaphoreValueCount: u32,
    pWaitSemaphoreValues: [*c]const u64,
    signalSemaphoreValueCount: u32,
    pSignalSemaphoreValues: [*c]const u64,
};
pub const VkTimelineSemaphoreSubmitInfo = struct_VkTimelineSemaphoreSubmitInfo;
pub const struct_VkSemaphoreWaitInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkSemaphoreWaitFlags,
    semaphoreCount: u32,
    pSemaphores: [*c]const VkSemaphore,
    pValues: [*c]const u64,
};
pub const VkSemaphoreWaitInfo = struct_VkSemaphoreWaitInfo;
pub const struct_VkSemaphoreSignalInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    semaphore: VkSemaphore,
    value: u64,
};
pub const VkSemaphoreSignalInfo = struct_VkSemaphoreSignalInfo;
pub const struct_VkPhysicalDeviceBufferDeviceAddressFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    bufferDeviceAddress: VkBool32,
    bufferDeviceAddressCaptureReplay: VkBool32,
    bufferDeviceAddressMultiDevice: VkBool32,
};
pub const VkPhysicalDeviceBufferDeviceAddressFeatures = struct_VkPhysicalDeviceBufferDeviceAddressFeatures;
pub const struct_VkBufferDeviceAddressInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    buffer: VkBuffer,
};
pub const VkBufferDeviceAddressInfo = struct_VkBufferDeviceAddressInfo;
pub const struct_VkBufferOpaqueCaptureAddressCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    opaqueCaptureAddress: u64,
};
pub const VkBufferOpaqueCaptureAddressCreateInfo = struct_VkBufferOpaqueCaptureAddressCreateInfo;
pub const struct_VkMemoryOpaqueCaptureAddressAllocateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    opaqueCaptureAddress: u64,
};
pub const VkMemoryOpaqueCaptureAddressAllocateInfo = struct_VkMemoryOpaqueCaptureAddressAllocateInfo;
pub const struct_VkDeviceMemoryOpaqueCaptureAddressInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    memory: VkDeviceMemory,
};
pub const VkDeviceMemoryOpaqueCaptureAddressInfo = struct_VkDeviceMemoryOpaqueCaptureAddressInfo;
pub const PFN_vkCmdDrawIndirectCount = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCount = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCreateRenderPass2 = ?*const fn (VkDevice, [*c]const VkRenderPassCreateInfo2, [*c]const VkAllocationCallbacks, [*c]VkRenderPass) callconv(.C) VkResult;
pub const PFN_vkCmdBeginRenderPass2 = ?*const fn (VkCommandBuffer, [*c]const VkRenderPassBeginInfo, [*c]const VkSubpassBeginInfo) callconv(.C) void;
pub const PFN_vkCmdNextSubpass2 = ?*const fn (VkCommandBuffer, [*c]const VkSubpassBeginInfo, [*c]const VkSubpassEndInfo) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass2 = ?*const fn (VkCommandBuffer, [*c]const VkSubpassEndInfo) callconv(.C) void;
pub const PFN_vkResetQueryPool = ?*const fn (VkDevice, VkQueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkGetSemaphoreCounterValue = ?*const fn (VkDevice, VkSemaphore, [*c]u64) callconv(.C) VkResult;
pub const PFN_vkWaitSemaphores = ?*const fn (VkDevice, [*c]const VkSemaphoreWaitInfo, u64) callconv(.C) VkResult;
pub const PFN_vkSignalSemaphore = ?*const fn (VkDevice, [*c]const VkSemaphoreSignalInfo) callconv(.C) VkResult;
pub const PFN_vkGetBufferDeviceAddress = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) VkDeviceAddress;
pub const PFN_vkGetBufferOpaqueCaptureAddress = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) u64;
pub const PFN_vkGetDeviceMemoryOpaqueCaptureAddress = ?*const fn (VkDevice, [*c]const VkDeviceMemoryOpaqueCaptureAddressInfo) callconv(.C) u64;
pub extern fn vkCmdDrawIndirectCount(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirectCount(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCreateRenderPass2(device: VkDevice, pCreateInfo: [*c]const VkRenderPassCreateInfo2, pAllocator: [*c]const VkAllocationCallbacks, pRenderPass: [*c]VkRenderPass) VkResult;
pub extern fn vkCmdBeginRenderPass2(commandBuffer: VkCommandBuffer, pRenderPassBegin: [*c]const VkRenderPassBeginInfo, pSubpassBeginInfo: [*c]const VkSubpassBeginInfo) void;
pub extern fn vkCmdNextSubpass2(commandBuffer: VkCommandBuffer, pSubpassBeginInfo: [*c]const VkSubpassBeginInfo, pSubpassEndInfo: [*c]const VkSubpassEndInfo) void;
pub extern fn vkCmdEndRenderPass2(commandBuffer: VkCommandBuffer, pSubpassEndInfo: [*c]const VkSubpassEndInfo) void;
pub extern fn vkResetQueryPool(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) void;
pub extern fn vkGetSemaphoreCounterValue(device: VkDevice, semaphore: VkSemaphore, pValue: [*c]u64) VkResult;
pub extern fn vkWaitSemaphores(device: VkDevice, pWaitInfo: [*c]const VkSemaphoreWaitInfo, timeout: u64) VkResult;
pub extern fn vkSignalSemaphore(device: VkDevice, pSignalInfo: [*c]const VkSemaphoreSignalInfo) VkResult;
pub extern fn vkGetBufferDeviceAddress(device: VkDevice, pInfo: [*c]const VkBufferDeviceAddressInfo) VkDeviceAddress;
pub extern fn vkGetBufferOpaqueCaptureAddress(device: VkDevice, pInfo: [*c]const VkBufferDeviceAddressInfo) u64;
pub extern fn vkGetDeviceMemoryOpaqueCaptureAddress(device: VkDevice, pInfo: [*c]const VkDeviceMemoryOpaqueCaptureAddressInfo) u64;
pub const VkFlags64 = u64;
pub const struct_VkPrivateDataSlot_T = opaque {};
pub const VkPrivateDataSlot = ?*struct_VkPrivateDataSlot_T;
pub const VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT: c_int = 1;
pub const VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT: c_int = 2;
pub const VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT: c_int = 4;
pub const VK_PIPELINE_CREATION_FEEDBACK_VALID_BIT_EXT: c_int = 1;
pub const VK_PIPELINE_CREATION_FEEDBACK_APPLICATION_PIPELINE_CACHE_HIT_BIT_EXT: c_int = 2;
pub const VK_PIPELINE_CREATION_FEEDBACK_BASE_PIPELINE_ACCELERATION_BIT_EXT: c_int = 4;
pub const VK_PIPELINE_CREATION_FEEDBACK_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkPipelineCreationFeedbackFlagBits = c_uint;
pub const VkPipelineCreationFeedbackFlagBits = enum_VkPipelineCreationFeedbackFlagBits;
pub const VkPipelineCreationFeedbackFlags = VkFlags;
pub const VK_TOOL_PURPOSE_VALIDATION_BIT: c_int = 1;
pub const VK_TOOL_PURPOSE_PROFILING_BIT: c_int = 2;
pub const VK_TOOL_PURPOSE_TRACING_BIT: c_int = 4;
pub const VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT: c_int = 8;
pub const VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT: c_int = 16;
pub const VK_TOOL_PURPOSE_DEBUG_REPORTING_BIT_EXT: c_int = 32;
pub const VK_TOOL_PURPOSE_DEBUG_MARKERS_BIT_EXT: c_int = 64;
pub const VK_TOOL_PURPOSE_VALIDATION_BIT_EXT: c_int = 1;
pub const VK_TOOL_PURPOSE_PROFILING_BIT_EXT: c_int = 2;
pub const VK_TOOL_PURPOSE_TRACING_BIT_EXT: c_int = 4;
pub const VK_TOOL_PURPOSE_ADDITIONAL_FEATURES_BIT_EXT: c_int = 8;
pub const VK_TOOL_PURPOSE_MODIFYING_FEATURES_BIT_EXT: c_int = 16;
pub const VK_TOOL_PURPOSE_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkToolPurposeFlagBits = c_uint;
pub const VkToolPurposeFlagBits = enum_VkToolPurposeFlagBits;
pub const VkToolPurposeFlags = VkFlags;
pub const VkPrivateDataSlotCreateFlags = VkFlags;
pub const VkPipelineStageFlags2 = VkFlags64;
pub const VkPipelineStageFlagBits2 = VkFlags64;
pub const VK_PIPELINE_STAGE_2_NONE: VkPipelineStageFlagBits2 = 0;
pub const VK_PIPELINE_STAGE_2_NONE_KHR: VkPipelineStageFlagBits2 = 0;
pub const VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT: VkPipelineStageFlagBits2 = 1;
pub const VK_PIPELINE_STAGE_2_TOP_OF_PIPE_BIT_KHR: VkPipelineStageFlagBits2 = 1;
pub const VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT: VkPipelineStageFlagBits2 = 2;
pub const VK_PIPELINE_STAGE_2_DRAW_INDIRECT_BIT_KHR: VkPipelineStageFlagBits2 = 2;
pub const VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT: VkPipelineStageFlagBits2 = 4;
pub const VK_PIPELINE_STAGE_2_VERTEX_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = 4;
pub const VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT: VkPipelineStageFlagBits2 = 8;
pub const VK_PIPELINE_STAGE_2_VERTEX_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 8;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT: VkPipelineStageFlagBits2 = 16;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_CONTROL_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 16;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT: VkPipelineStageFlagBits2 = 32;
pub const VK_PIPELINE_STAGE_2_TESSELLATION_EVALUATION_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 32;
pub const VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT: VkPipelineStageFlagBits2 = 64;
pub const VK_PIPELINE_STAGE_2_GEOMETRY_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 64;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT: VkPipelineStageFlagBits2 = 128;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 128;
pub const VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits2 = 256;
pub const VK_PIPELINE_STAGE_2_EARLY_FRAGMENT_TESTS_BIT_KHR: VkPipelineStageFlagBits2 = 256;
pub const VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT: VkPipelineStageFlagBits2 = 512;
pub const VK_PIPELINE_STAGE_2_LATE_FRAGMENT_TESTS_BIT_KHR: VkPipelineStageFlagBits2 = 512;
pub const VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT: VkPipelineStageFlagBits2 = 1024;
pub const VK_PIPELINE_STAGE_2_COLOR_ATTACHMENT_OUTPUT_BIT_KHR: VkPipelineStageFlagBits2 = 1024;
pub const VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT: VkPipelineStageFlagBits2 = 2048;
pub const VK_PIPELINE_STAGE_2_COMPUTE_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 2048;
pub const VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT: VkPipelineStageFlagBits2 = 4096;
pub const VK_PIPELINE_STAGE_2_ALL_TRANSFER_BIT_KHR: VkPipelineStageFlagBits2 = 4096;
pub const VK_PIPELINE_STAGE_2_TRANSFER_BIT: VkPipelineStageFlagBits2 = 4096;
pub const VK_PIPELINE_STAGE_2_TRANSFER_BIT_KHR: VkPipelineStageFlagBits2 = 4096;
pub const VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT: VkPipelineStageFlagBits2 = 8192;
pub const VK_PIPELINE_STAGE_2_BOTTOM_OF_PIPE_BIT_KHR: VkPipelineStageFlagBits2 = 8192;
pub const VK_PIPELINE_STAGE_2_HOST_BIT: VkPipelineStageFlagBits2 = 16384;
pub const VK_PIPELINE_STAGE_2_HOST_BIT_KHR: VkPipelineStageFlagBits2 = 16384;
pub const VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT: VkPipelineStageFlagBits2 = 32768;
pub const VK_PIPELINE_STAGE_2_ALL_GRAPHICS_BIT_KHR: VkPipelineStageFlagBits2 = 32768;
pub const VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT: VkPipelineStageFlagBits2 = 65536;
pub const VK_PIPELINE_STAGE_2_ALL_COMMANDS_BIT_KHR: VkPipelineStageFlagBits2 = 65536;
pub const VK_PIPELINE_STAGE_2_COPY_BIT: VkPipelineStageFlagBits2 = 4294967296;
pub const VK_PIPELINE_STAGE_2_COPY_BIT_KHR: VkPipelineStageFlagBits2 = 4294967296;
pub const VK_PIPELINE_STAGE_2_RESOLVE_BIT: VkPipelineStageFlagBits2 = 8589934592;
pub const VK_PIPELINE_STAGE_2_RESOLVE_BIT_KHR: VkPipelineStageFlagBits2 = 8589934592;
pub const VK_PIPELINE_STAGE_2_BLIT_BIT: VkPipelineStageFlagBits2 = 17179869184;
pub const VK_PIPELINE_STAGE_2_BLIT_BIT_KHR: VkPipelineStageFlagBits2 = 17179869184;
pub const VK_PIPELINE_STAGE_2_CLEAR_BIT: VkPipelineStageFlagBits2 = 34359738368;
pub const VK_PIPELINE_STAGE_2_CLEAR_BIT_KHR: VkPipelineStageFlagBits2 = 34359738368;
pub const VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT: VkPipelineStageFlagBits2 = 68719476736;
pub const VK_PIPELINE_STAGE_2_INDEX_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = 68719476736;
pub const VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT: VkPipelineStageFlagBits2 = 137438953472;
pub const VK_PIPELINE_STAGE_2_VERTEX_ATTRIBUTE_INPUT_BIT_KHR: VkPipelineStageFlagBits2 = 137438953472;
pub const VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT: VkPipelineStageFlagBits2 = 274877906944;
pub const VK_PIPELINE_STAGE_2_PRE_RASTERIZATION_SHADERS_BIT_KHR: VkPipelineStageFlagBits2 = 274877906944;
pub const VK_PIPELINE_STAGE_2_TRANSFORM_FEEDBACK_BIT_EXT: VkPipelineStageFlagBits2 = 16777216;
pub const VK_PIPELINE_STAGE_2_CONDITIONAL_RENDERING_BIT_EXT: VkPipelineStageFlagBits2 = 262144;
pub const VK_PIPELINE_STAGE_2_COMMAND_PREPROCESS_BIT_NV: VkPipelineStageFlagBits2 = 131072;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkPipelineStageFlagBits2 = 4194304;
pub const VK_PIPELINE_STAGE_2_SHADING_RATE_IMAGE_BIT_NV: VkPipelineStageFlagBits2 = 4194304;
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_KHR: VkPipelineStageFlagBits2 = 33554432;
pub const VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_KHR: VkPipelineStageFlagBits2 = 2097152;
pub const VK_PIPELINE_STAGE_2_RAY_TRACING_SHADER_BIT_NV: VkPipelineStageFlagBits2 = 2097152;
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_BUILD_BIT_NV: VkPipelineStageFlagBits2 = 33554432;
pub const VK_PIPELINE_STAGE_2_FRAGMENT_DENSITY_PROCESS_BIT_EXT: VkPipelineStageFlagBits2 = 8388608;
pub const VK_PIPELINE_STAGE_2_TASK_SHADER_BIT_NV: VkPipelineStageFlagBits2 = 524288;
pub const VK_PIPELINE_STAGE_2_MESH_SHADER_BIT_NV: VkPipelineStageFlagBits2 = 1048576;
pub const VK_PIPELINE_STAGE_2_SUBPASS_SHADING_BIT_HUAWEI: VkPipelineStageFlagBits2 = 549755813888;
pub const VK_PIPELINE_STAGE_2_INVOCATION_MASK_BIT_HUAWEI: VkPipelineStageFlagBits2 = 1099511627776;
pub const VK_PIPELINE_STAGE_2_ACCELERATION_STRUCTURE_COPY_BIT_KHR: VkPipelineStageFlagBits2 = 268435456;
pub const VkAccessFlags2 = VkFlags64;
pub const VkAccessFlagBits2 = VkFlags64;
pub const VK_ACCESS_2_NONE: VkAccessFlagBits2 = 0;
pub const VK_ACCESS_2_NONE_KHR: VkAccessFlagBits2 = 0;
pub const VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT: VkAccessFlagBits2 = 1;
pub const VK_ACCESS_2_INDIRECT_COMMAND_READ_BIT_KHR: VkAccessFlagBits2 = 1;
pub const VK_ACCESS_2_INDEX_READ_BIT: VkAccessFlagBits2 = 2;
pub const VK_ACCESS_2_INDEX_READ_BIT_KHR: VkAccessFlagBits2 = 2;
pub const VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT: VkAccessFlagBits2 = 4;
pub const VK_ACCESS_2_VERTEX_ATTRIBUTE_READ_BIT_KHR: VkAccessFlagBits2 = 4;
pub const VK_ACCESS_2_UNIFORM_READ_BIT: VkAccessFlagBits2 = 8;
pub const VK_ACCESS_2_UNIFORM_READ_BIT_KHR: VkAccessFlagBits2 = 8;
pub const VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 16;
pub const VK_ACCESS_2_INPUT_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 16;
pub const VK_ACCESS_2_SHADER_READ_BIT: VkAccessFlagBits2 = 32;
pub const VK_ACCESS_2_SHADER_READ_BIT_KHR: VkAccessFlagBits2 = 32;
pub const VK_ACCESS_2_SHADER_WRITE_BIT: VkAccessFlagBits2 = 64;
pub const VK_ACCESS_2_SHADER_WRITE_BIT_KHR: VkAccessFlagBits2 = 64;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 128;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 128;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT: VkAccessFlagBits2 = 256;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_WRITE_BIT_KHR: VkAccessFlagBits2 = 256;
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT: VkAccessFlagBits2 = 512;
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 512;
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT: VkAccessFlagBits2 = 1024;
pub const VK_ACCESS_2_DEPTH_STENCIL_ATTACHMENT_WRITE_BIT_KHR: VkAccessFlagBits2 = 1024;
pub const VK_ACCESS_2_TRANSFER_READ_BIT: VkAccessFlagBits2 = 2048;
pub const VK_ACCESS_2_TRANSFER_READ_BIT_KHR: VkAccessFlagBits2 = 2048;
pub const VK_ACCESS_2_TRANSFER_WRITE_BIT: VkAccessFlagBits2 = 4096;
pub const VK_ACCESS_2_TRANSFER_WRITE_BIT_KHR: VkAccessFlagBits2 = 4096;
pub const VK_ACCESS_2_HOST_READ_BIT: VkAccessFlagBits2 = 8192;
pub const VK_ACCESS_2_HOST_READ_BIT_KHR: VkAccessFlagBits2 = 8192;
pub const VK_ACCESS_2_HOST_WRITE_BIT: VkAccessFlagBits2 = 16384;
pub const VK_ACCESS_2_HOST_WRITE_BIT_KHR: VkAccessFlagBits2 = 16384;
pub const VK_ACCESS_2_MEMORY_READ_BIT: VkAccessFlagBits2 = 32768;
pub const VK_ACCESS_2_MEMORY_READ_BIT_KHR: VkAccessFlagBits2 = 32768;
pub const VK_ACCESS_2_MEMORY_WRITE_BIT: VkAccessFlagBits2 = 65536;
pub const VK_ACCESS_2_MEMORY_WRITE_BIT_KHR: VkAccessFlagBits2 = 65536;
pub const VK_ACCESS_2_SHADER_SAMPLED_READ_BIT: VkAccessFlagBits2 = 4294967296;
pub const VK_ACCESS_2_SHADER_SAMPLED_READ_BIT_KHR: VkAccessFlagBits2 = 4294967296;
pub const VK_ACCESS_2_SHADER_STORAGE_READ_BIT: VkAccessFlagBits2 = 8589934592;
pub const VK_ACCESS_2_SHADER_STORAGE_READ_BIT_KHR: VkAccessFlagBits2 = 8589934592;
pub const VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT: VkAccessFlagBits2 = 17179869184;
pub const VK_ACCESS_2_SHADER_STORAGE_WRITE_BIT_KHR: VkAccessFlagBits2 = 17179869184;
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_WRITE_BIT_EXT: VkAccessFlagBits2 = 33554432;
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_READ_BIT_EXT: VkAccessFlagBits2 = 67108864;
pub const VK_ACCESS_2_TRANSFORM_FEEDBACK_COUNTER_WRITE_BIT_EXT: VkAccessFlagBits2 = 134217728;
pub const VK_ACCESS_2_CONDITIONAL_RENDERING_READ_BIT_EXT: VkAccessFlagBits2 = 1048576;
pub const VK_ACCESS_2_COMMAND_PREPROCESS_READ_BIT_NV: VkAccessFlagBits2 = 131072;
pub const VK_ACCESS_2_COMMAND_PREPROCESS_WRITE_BIT_NV: VkAccessFlagBits2 = 262144;
pub const VK_ACCESS_2_FRAGMENT_SHADING_RATE_ATTACHMENT_READ_BIT_KHR: VkAccessFlagBits2 = 8388608;
pub const VK_ACCESS_2_SHADING_RATE_IMAGE_READ_BIT_NV: VkAccessFlagBits2 = 8388608;
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_KHR: VkAccessFlagBits2 = 2097152;
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_KHR: VkAccessFlagBits2 = 4194304;
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_READ_BIT_NV: VkAccessFlagBits2 = 2097152;
pub const VK_ACCESS_2_ACCELERATION_STRUCTURE_WRITE_BIT_NV: VkAccessFlagBits2 = 4194304;
pub const VK_ACCESS_2_FRAGMENT_DENSITY_MAP_READ_BIT_EXT: VkAccessFlagBits2 = 16777216;
pub const VK_ACCESS_2_COLOR_ATTACHMENT_READ_NONCOHERENT_BIT_EXT: VkAccessFlagBits2 = 524288;
pub const VK_ACCESS_2_INVOCATION_MASK_READ_BIT_HUAWEI: VkAccessFlagBits2 = 549755813888;
pub const VK_ACCESS_2_SHADER_BINDING_TABLE_READ_BIT_KHR: VkAccessFlagBits2 = 1099511627776;
pub const VK_SUBMIT_PROTECTED_BIT: c_int = 1;
pub const VK_SUBMIT_PROTECTED_BIT_KHR: c_int = 1;
pub const VK_SUBMIT_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkSubmitFlagBits = c_uint;
pub const VkSubmitFlagBits = enum_VkSubmitFlagBits;
pub const VkSubmitFlags = VkFlags;
pub const VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT: c_int = 1;
pub const VK_RENDERING_SUSPENDING_BIT: c_int = 2;
pub const VK_RENDERING_RESUMING_BIT: c_int = 4;
pub const VK_RENDERING_CONTENTS_SECONDARY_COMMAND_BUFFERS_BIT_KHR: c_int = 1;
pub const VK_RENDERING_SUSPENDING_BIT_KHR: c_int = 2;
pub const VK_RENDERING_RESUMING_BIT_KHR: c_int = 4;
pub const VK_RENDERING_FLAG_BITS_MAX_ENUM: c_int = 2147483647;
pub const enum_VkRenderingFlagBits = c_uint;
pub const VkRenderingFlagBits = enum_VkRenderingFlagBits;
pub const VkRenderingFlags = VkFlags;
pub const VkFormatFeatureFlags2 = VkFlags64;
pub const VkFormatFeatureFlagBits2 = VkFlags64;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT: VkFormatFeatureFlagBits2 = 1;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_BIT_KHR: VkFormatFeatureFlagBits2 = 1;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT: VkFormatFeatureFlagBits2 = 2;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_BIT_KHR: VkFormatFeatureFlagBits2 = 2;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT: VkFormatFeatureFlagBits2 = 4;
pub const VK_FORMAT_FEATURE_2_STORAGE_IMAGE_ATOMIC_BIT_KHR: VkFormatFeatureFlagBits2 = 4;
pub const VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits2 = 8;
pub const VK_FORMAT_FEATURE_2_UNIFORM_TEXEL_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 8;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT: VkFormatFeatureFlagBits2 = 16;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 16;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT: VkFormatFeatureFlagBits2 = 32;
pub const VK_FORMAT_FEATURE_2_STORAGE_TEXEL_BUFFER_ATOMIC_BIT_KHR: VkFormatFeatureFlagBits2 = 32;
pub const VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT: VkFormatFeatureFlagBits2 = 64;
pub const VK_FORMAT_FEATURE_2_VERTEX_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 64;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT: VkFormatFeatureFlagBits2 = 128;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = 128;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT: VkFormatFeatureFlagBits2 = 256;
pub const VK_FORMAT_FEATURE_2_COLOR_ATTACHMENT_BLEND_BIT_KHR: VkFormatFeatureFlagBits2 = 256;
pub const VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT: VkFormatFeatureFlagBits2 = 512;
pub const VK_FORMAT_FEATURE_2_DEPTH_STENCIL_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = 512;
pub const VK_FORMAT_FEATURE_2_BLIT_SRC_BIT: VkFormatFeatureFlagBits2 = 1024;
pub const VK_FORMAT_FEATURE_2_BLIT_SRC_BIT_KHR: VkFormatFeatureFlagBits2 = 1024;
pub const VK_FORMAT_FEATURE_2_BLIT_DST_BIT: VkFormatFeatureFlagBits2 = 2048;
pub const VK_FORMAT_FEATURE_2_BLIT_DST_BIT_KHR: VkFormatFeatureFlagBits2 = 2048;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT: VkFormatFeatureFlagBits2 = 4096;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_LINEAR_BIT_KHR: VkFormatFeatureFlagBits2 = 4096;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT: VkFormatFeatureFlagBits2 = 8192;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_CUBIC_BIT_EXT: VkFormatFeatureFlagBits2 = 8192;
pub const VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT: VkFormatFeatureFlagBits2 = 16384;
pub const VK_FORMAT_FEATURE_2_TRANSFER_SRC_BIT_KHR: VkFormatFeatureFlagBits2 = 16384;
pub const VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT: VkFormatFeatureFlagBits2 = 32768;
pub const VK_FORMAT_FEATURE_2_TRANSFER_DST_BIT_KHR: VkFormatFeatureFlagBits2 = 32768;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT: VkFormatFeatureFlagBits2 = 65536;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_FILTER_MINMAX_BIT_KHR: VkFormatFeatureFlagBits2 = 65536;
pub const VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits2 = 131072;
pub const VK_FORMAT_FEATURE_2_MIDPOINT_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits2 = 131072;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT: VkFormatFeatureFlagBits2 = 262144;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_LINEAR_FILTER_BIT_KHR: VkFormatFeatureFlagBits2 = 262144;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT: VkFormatFeatureFlagBits2 = 524288;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_SEPARATE_RECONSTRUCTION_FILTER_BIT_KHR: VkFormatFeatureFlagBits2 = 524288;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT: VkFormatFeatureFlagBits2 = 1048576;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_BIT_KHR: VkFormatFeatureFlagBits2 = 1048576;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT: VkFormatFeatureFlagBits2 = 2097152;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_YCBCR_CONVERSION_CHROMA_RECONSTRUCTION_EXPLICIT_FORCEABLE_BIT_KHR: VkFormatFeatureFlagBits2 = 2097152;
pub const VK_FORMAT_FEATURE_2_DISJOINT_BIT: VkFormatFeatureFlagBits2 = 4194304;
pub const VK_FORMAT_FEATURE_2_DISJOINT_BIT_KHR: VkFormatFeatureFlagBits2 = 4194304;
pub const VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT: VkFormatFeatureFlagBits2 = 8388608;
pub const VK_FORMAT_FEATURE_2_COSITED_CHROMA_SAMPLES_BIT_KHR: VkFormatFeatureFlagBits2 = 8388608;
pub const VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT: VkFormatFeatureFlagBits2 = 2147483648;
pub const VK_FORMAT_FEATURE_2_STORAGE_READ_WITHOUT_FORMAT_BIT_KHR: VkFormatFeatureFlagBits2 = 2147483648;
pub const VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT: VkFormatFeatureFlagBits2 = 4294967296;
pub const VK_FORMAT_FEATURE_2_STORAGE_WRITE_WITHOUT_FORMAT_BIT_KHR: VkFormatFeatureFlagBits2 = 4294967296;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT: VkFormatFeatureFlagBits2 = 8589934592;
pub const VK_FORMAT_FEATURE_2_SAMPLED_IMAGE_DEPTH_COMPARISON_BIT_KHR: VkFormatFeatureFlagBits2 = 8589934592;
pub const VK_FORMAT_FEATURE_2_ACCELERATION_STRUCTURE_VERTEX_BUFFER_BIT_KHR: VkFormatFeatureFlagBits2 = 536870912;
pub const VK_FORMAT_FEATURE_2_FRAGMENT_DENSITY_MAP_BIT_EXT: VkFormatFeatureFlagBits2 = 16777216;
pub const VK_FORMAT_FEATURE_2_FRAGMENT_SHADING_RATE_ATTACHMENT_BIT_KHR: VkFormatFeatureFlagBits2 = 1073741824;
pub const VK_FORMAT_FEATURE_2_LINEAR_COLOR_ATTACHMENT_BIT_NV: VkFormatFeatureFlagBits2 = 274877906944;
pub const VK_FORMAT_FEATURE_2_WEIGHT_IMAGE_BIT_QCOM: VkFormatFeatureFlagBits2 = 17179869184;
pub const VK_FORMAT_FEATURE_2_WEIGHT_SAMPLED_IMAGE_BIT_QCOM: VkFormatFeatureFlagBits2 = 34359738368;
pub const VK_FORMAT_FEATURE_2_BLOCK_MATCHING_BIT_QCOM: VkFormatFeatureFlagBits2 = 68719476736;
pub const VK_FORMAT_FEATURE_2_BOX_FILTER_SAMPLED_BIT_QCOM: VkFormatFeatureFlagBits2 = 137438953472;
pub const struct_VkPhysicalDeviceVulkan13Features = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    robustImageAccess: VkBool32,
    inlineUniformBlock: VkBool32,
    descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32,
    pipelineCreationCacheControl: VkBool32,
    privateData: VkBool32,
    shaderDemoteToHelperInvocation: VkBool32,
    shaderTerminateInvocation: VkBool32,
    subgroupSizeControl: VkBool32,
    computeFullSubgroups: VkBool32,
    synchronization2: VkBool32,
    textureCompressionASTC_HDR: VkBool32,
    shaderZeroInitializeWorkgroupMemory: VkBool32,
    dynamicRendering: VkBool32,
    shaderIntegerDotProduct: VkBool32,
    maintenance4: VkBool32,
};
pub const VkPhysicalDeviceVulkan13Features = struct_VkPhysicalDeviceVulkan13Features;
pub const struct_VkPhysicalDeviceVulkan13Properties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    minSubgroupSize: u32,
    maxSubgroupSize: u32,
    maxComputeWorkgroupSubgroups: u32,
    requiredSubgroupSizeStages: VkShaderStageFlags,
    maxInlineUniformBlockSize: u32,
    maxPerStageDescriptorInlineUniformBlocks: u32,
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
    maxDescriptorSetInlineUniformBlocks: u32,
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32,
    maxInlineUniformTotalSize: u32,
    integerDotProduct8BitUnsignedAccelerated: VkBool32,
    integerDotProduct8BitSignedAccelerated: VkBool32,
    integerDotProduct8BitMixedSignednessAccelerated: VkBool32,
    integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32,
    integerDotProduct4x8BitPackedSignedAccelerated: VkBool32,
    integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32,
    integerDotProduct16BitUnsignedAccelerated: VkBool32,
    integerDotProduct16BitSignedAccelerated: VkBool32,
    integerDotProduct16BitMixedSignednessAccelerated: VkBool32,
    integerDotProduct32BitUnsignedAccelerated: VkBool32,
    integerDotProduct32BitSignedAccelerated: VkBool32,
    integerDotProduct32BitMixedSignednessAccelerated: VkBool32,
    integerDotProduct64BitUnsignedAccelerated: VkBool32,
    integerDotProduct64BitSignedAccelerated: VkBool32,
    integerDotProduct64BitMixedSignednessAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32,
    storageTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    storageTexelBufferOffsetSingleTexelAlignment: VkBool32,
    uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    uniformTexelBufferOffsetSingleTexelAlignment: VkBool32,
    maxBufferSize: VkDeviceSize,
};
pub const VkPhysicalDeviceVulkan13Properties = struct_VkPhysicalDeviceVulkan13Properties;
pub const struct_VkPipelineCreationFeedback = extern struct {
    flags: VkPipelineCreationFeedbackFlags,
    duration: u64,
};
pub const VkPipelineCreationFeedback = struct_VkPipelineCreationFeedback;
pub const struct_VkPipelineCreationFeedbackCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    pPipelineCreationFeedback: [*c]VkPipelineCreationFeedback,
    pipelineStageCreationFeedbackCount: u32,
    pPipelineStageCreationFeedbacks: [*c]VkPipelineCreationFeedback,
};
pub const VkPipelineCreationFeedbackCreateInfo = struct_VkPipelineCreationFeedbackCreateInfo;
pub const struct_VkPhysicalDeviceShaderTerminateInvocationFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderTerminateInvocation: VkBool32,
};
pub const VkPhysicalDeviceShaderTerminateInvocationFeatures = struct_VkPhysicalDeviceShaderTerminateInvocationFeatures;
pub const struct_VkPhysicalDeviceToolProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    name: [256]u8,
    version: [256]u8,
    purposes: VkToolPurposeFlags,
    description: [256]u8,
    layer: [256]u8,
};
pub const VkPhysicalDeviceToolProperties = struct_VkPhysicalDeviceToolProperties;
pub const struct_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderDemoteToHelperInvocation: VkBool32,
};
pub const VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures = struct_VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;
pub const struct_VkPhysicalDevicePrivateDataFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    privateData: VkBool32,
};
pub const VkPhysicalDevicePrivateDataFeatures = struct_VkPhysicalDevicePrivateDataFeatures;
pub const struct_VkDevicePrivateDataCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    privateDataSlotRequestCount: u32,
};
pub const VkDevicePrivateDataCreateInfo = struct_VkDevicePrivateDataCreateInfo;
pub const struct_VkPrivateDataSlotCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPrivateDataSlotCreateFlags,
};
pub const VkPrivateDataSlotCreateInfo = struct_VkPrivateDataSlotCreateInfo;
pub const struct_VkPhysicalDevicePipelineCreationCacheControlFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    pipelineCreationCacheControl: VkBool32,
};
pub const VkPhysicalDevicePipelineCreationCacheControlFeatures = struct_VkPhysicalDevicePipelineCreationCacheControlFeatures;
pub const struct_VkMemoryBarrier2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcStageMask: VkPipelineStageFlags2,
    srcAccessMask: VkAccessFlags2,
    dstStageMask: VkPipelineStageFlags2,
    dstAccessMask: VkAccessFlags2,
};
pub const VkMemoryBarrier2 = struct_VkMemoryBarrier2;
pub const struct_VkBufferMemoryBarrier2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcStageMask: VkPipelineStageFlags2,
    srcAccessMask: VkAccessFlags2,
    dstStageMask: VkPipelineStageFlags2,
    dstAccessMask: VkAccessFlags2,
    srcQueueFamilyIndex: u32,
    dstQueueFamilyIndex: u32,
    buffer: VkBuffer,
    offset: VkDeviceSize,
    size: VkDeviceSize,
};
pub const VkBufferMemoryBarrier2 = struct_VkBufferMemoryBarrier2;
pub const struct_VkImageMemoryBarrier2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcStageMask: VkPipelineStageFlags2,
    srcAccessMask: VkAccessFlags2,
    dstStageMask: VkPipelineStageFlags2,
    dstAccessMask: VkAccessFlags2,
    oldLayout: VkImageLayout,
    newLayout: VkImageLayout,
    srcQueueFamilyIndex: u32,
    dstQueueFamilyIndex: u32,
    image: VkImage,
    subresourceRange: VkImageSubresourceRange,
};
pub const VkImageMemoryBarrier2 = struct_VkImageMemoryBarrier2;
pub const struct_VkDependencyInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    dependencyFlags: VkDependencyFlags,
    memoryBarrierCount: u32,
    pMemoryBarriers: [*c]const VkMemoryBarrier2,
    bufferMemoryBarrierCount: u32,
    pBufferMemoryBarriers: [*c]const VkBufferMemoryBarrier2,
    imageMemoryBarrierCount: u32,
    pImageMemoryBarriers: [*c]const VkImageMemoryBarrier2,
};
pub const VkDependencyInfo = struct_VkDependencyInfo;
pub const struct_VkSemaphoreSubmitInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    semaphore: VkSemaphore,
    value: u64,
    stageMask: VkPipelineStageFlags2,
    deviceIndex: u32,
};
pub const VkSemaphoreSubmitInfo = struct_VkSemaphoreSubmitInfo;
pub const struct_VkCommandBufferSubmitInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    commandBuffer: VkCommandBuffer,
    deviceMask: u32,
};
pub const VkCommandBufferSubmitInfo = struct_VkCommandBufferSubmitInfo;
pub const struct_VkSubmitInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkSubmitFlags,
    waitSemaphoreInfoCount: u32,
    pWaitSemaphoreInfos: [*c]const VkSemaphoreSubmitInfo,
    commandBufferInfoCount: u32,
    pCommandBufferInfos: [*c]const VkCommandBufferSubmitInfo,
    signalSemaphoreInfoCount: u32,
    pSignalSemaphoreInfos: [*c]const VkSemaphoreSubmitInfo,
};
pub const VkSubmitInfo2 = struct_VkSubmitInfo2;
pub const struct_VkPhysicalDeviceSynchronization2Features = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    synchronization2: VkBool32,
};
pub const VkPhysicalDeviceSynchronization2Features = struct_VkPhysicalDeviceSynchronization2Features;
pub const struct_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderZeroInitializeWorkgroupMemory: VkBool32,
};
pub const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures = struct_VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
pub const struct_VkPhysicalDeviceImageRobustnessFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    robustImageAccess: VkBool32,
};
pub const VkPhysicalDeviceImageRobustnessFeatures = struct_VkPhysicalDeviceImageRobustnessFeatures;
pub const struct_VkBufferCopy2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcOffset: VkDeviceSize,
    dstOffset: VkDeviceSize,
    size: VkDeviceSize,
};
pub const VkBufferCopy2 = struct_VkBufferCopy2;
pub const struct_VkCopyBufferInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcBuffer: VkBuffer,
    dstBuffer: VkBuffer,
    regionCount: u32,
    pRegions: [*c]const VkBufferCopy2,
};
pub const VkCopyBufferInfo2 = struct_VkCopyBufferInfo2;
pub const struct_VkImageCopy2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcSubresource: VkImageSubresourceLayers,
    srcOffset: VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffset: VkOffset3D,
    extent: VkExtent3D,
};
pub const VkImageCopy2 = struct_VkImageCopy2;
pub const struct_VkCopyImageInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcImage: VkImage,
    srcImageLayout: VkImageLayout,
    dstImage: VkImage,
    dstImageLayout: VkImageLayout,
    regionCount: u32,
    pRegions: [*c]const VkImageCopy2,
};
pub const VkCopyImageInfo2 = struct_VkCopyImageInfo2;
pub const struct_VkBufferImageCopy2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    bufferOffset: VkDeviceSize,
    bufferRowLength: u32,
    bufferImageHeight: u32,
    imageSubresource: VkImageSubresourceLayers,
    imageOffset: VkOffset3D,
    imageExtent: VkExtent3D,
};
pub const VkBufferImageCopy2 = struct_VkBufferImageCopy2;
pub const struct_VkCopyBufferToImageInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcBuffer: VkBuffer,
    dstImage: VkImage,
    dstImageLayout: VkImageLayout,
    regionCount: u32,
    pRegions: [*c]const VkBufferImageCopy2,
};
pub const VkCopyBufferToImageInfo2 = struct_VkCopyBufferToImageInfo2;
pub const struct_VkCopyImageToBufferInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcImage: VkImage,
    srcImageLayout: VkImageLayout,
    dstBuffer: VkBuffer,
    regionCount: u32,
    pRegions: [*c]const VkBufferImageCopy2,
};
pub const VkCopyImageToBufferInfo2 = struct_VkCopyImageToBufferInfo2;
pub const struct_VkImageBlit2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcSubresource: VkImageSubresourceLayers,
    srcOffsets: [2]VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffsets: [2]VkOffset3D,
};
pub const VkImageBlit2 = struct_VkImageBlit2;
pub const struct_VkBlitImageInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcImage: VkImage,
    srcImageLayout: VkImageLayout,
    dstImage: VkImage,
    dstImageLayout: VkImageLayout,
    regionCount: u32,
    pRegions: [*c]const VkImageBlit2,
    filter: VkFilter,
};
pub const VkBlitImageInfo2 = struct_VkBlitImageInfo2;
pub const struct_VkImageResolve2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcSubresource: VkImageSubresourceLayers,
    srcOffset: VkOffset3D,
    dstSubresource: VkImageSubresourceLayers,
    dstOffset: VkOffset3D,
    extent: VkExtent3D,
};
pub const VkImageResolve2 = struct_VkImageResolve2;
pub const struct_VkResolveImageInfo2 = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcImage: VkImage,
    srcImageLayout: VkImageLayout,
    dstImage: VkImage,
    dstImageLayout: VkImageLayout,
    regionCount: u32,
    pRegions: [*c]const VkImageResolve2,
};
pub const VkResolveImageInfo2 = struct_VkResolveImageInfo2;
pub const struct_VkPhysicalDeviceSubgroupSizeControlFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    subgroupSizeControl: VkBool32,
    computeFullSubgroups: VkBool32,
};
pub const VkPhysicalDeviceSubgroupSizeControlFeatures = struct_VkPhysicalDeviceSubgroupSizeControlFeatures;
pub const struct_VkPhysicalDeviceSubgroupSizeControlProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    minSubgroupSize: u32,
    maxSubgroupSize: u32,
    maxComputeWorkgroupSubgroups: u32,
    requiredSubgroupSizeStages: VkShaderStageFlags,
};
pub const VkPhysicalDeviceSubgroupSizeControlProperties = struct_VkPhysicalDeviceSubgroupSizeControlProperties;
pub const struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    requiredSubgroupSize: u32,
};
pub const VkPipelineShaderStageRequiredSubgroupSizeCreateInfo = struct_VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
pub const struct_VkPhysicalDeviceInlineUniformBlockFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    inlineUniformBlock: VkBool32,
    descriptorBindingInlineUniformBlockUpdateAfterBind: VkBool32,
};
pub const VkPhysicalDeviceInlineUniformBlockFeatures = struct_VkPhysicalDeviceInlineUniformBlockFeatures;
pub const struct_VkPhysicalDeviceInlineUniformBlockProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxInlineUniformBlockSize: u32,
    maxPerStageDescriptorInlineUniformBlocks: u32,
    maxPerStageDescriptorUpdateAfterBindInlineUniformBlocks: u32,
    maxDescriptorSetInlineUniformBlocks: u32,
    maxDescriptorSetUpdateAfterBindInlineUniformBlocks: u32,
};
pub const VkPhysicalDeviceInlineUniformBlockProperties = struct_VkPhysicalDeviceInlineUniformBlockProperties;
pub const struct_VkWriteDescriptorSetInlineUniformBlock = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    dataSize: u32,
    pData: ?*const anyopaque,
};
pub const VkWriteDescriptorSetInlineUniformBlock = struct_VkWriteDescriptorSetInlineUniformBlock;
pub const struct_VkDescriptorPoolInlineUniformBlockCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    maxInlineUniformBlockBindings: u32,
};
pub const VkDescriptorPoolInlineUniformBlockCreateInfo = struct_VkDescriptorPoolInlineUniformBlockCreateInfo;
pub const struct_VkPhysicalDeviceTextureCompressionASTCHDRFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    textureCompressionASTC_HDR: VkBool32,
};
pub const VkPhysicalDeviceTextureCompressionASTCHDRFeatures = struct_VkPhysicalDeviceTextureCompressionASTCHDRFeatures;
pub const struct_VkRenderingAttachmentInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    imageView: VkImageView,
    imageLayout: VkImageLayout,
    resolveMode: VkResolveModeFlagBits,
    resolveImageView: VkImageView,
    resolveImageLayout: VkImageLayout,
    loadOp: VkAttachmentLoadOp,
    storeOp: VkAttachmentStoreOp,
    clearValue: VkClearValue,
};
pub const VkRenderingAttachmentInfo = struct_VkRenderingAttachmentInfo;
pub const struct_VkRenderingInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkRenderingFlags,
    renderArea: VkRect2D,
    layerCount: u32,
    viewMask: u32,
    colorAttachmentCount: u32,
    pColorAttachments: [*c]const VkRenderingAttachmentInfo,
    pDepthAttachment: [*c]const VkRenderingAttachmentInfo,
    pStencilAttachment: [*c]const VkRenderingAttachmentInfo,
};
pub const VkRenderingInfo = struct_VkRenderingInfo;
pub const struct_VkPipelineRenderingCreateInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    viewMask: u32,
    colorAttachmentCount: u32,
    pColorAttachmentFormats: [*c]const VkFormat,
    depthAttachmentFormat: VkFormat,
    stencilAttachmentFormat: VkFormat,
};
pub const VkPipelineRenderingCreateInfo = struct_VkPipelineRenderingCreateInfo;
pub const struct_VkPhysicalDeviceDynamicRenderingFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    dynamicRendering: VkBool32,
};
pub const VkPhysicalDeviceDynamicRenderingFeatures = struct_VkPhysicalDeviceDynamicRenderingFeatures;
pub const struct_VkCommandBufferInheritanceRenderingInfo = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkRenderingFlags,
    viewMask: u32,
    colorAttachmentCount: u32,
    pColorAttachmentFormats: [*c]const VkFormat,
    depthAttachmentFormat: VkFormat,
    stencilAttachmentFormat: VkFormat,
    rasterizationSamples: VkSampleCountFlagBits,
};
pub const VkCommandBufferInheritanceRenderingInfo = struct_VkCommandBufferInheritanceRenderingInfo;
pub const struct_VkPhysicalDeviceShaderIntegerDotProductFeatures = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderIntegerDotProduct: VkBool32,
};
pub const VkPhysicalDeviceShaderIntegerDotProductFeatures = struct_VkPhysicalDeviceShaderIntegerDotProductFeatures;
pub const struct_VkPhysicalDeviceShaderIntegerDotProductProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    integerDotProduct8BitUnsignedAccelerated: VkBool32,
    integerDotProduct8BitSignedAccelerated: VkBool32,
    integerDotProduct8BitMixedSignednessAccelerated: VkBool32,
    integerDotProduct4x8BitPackedUnsignedAccelerated: VkBool32,
    integerDotProduct4x8BitPackedSignedAccelerated: VkBool32,
    integerDotProduct4x8BitPackedMixedSignednessAccelerated: VkBool32,
    integerDotProduct16BitUnsignedAccelerated: VkBool32,
    integerDotProduct16BitSignedAccelerated: VkBool32,
    integerDotProduct16BitMixedSignednessAccelerated: VkBool32,
    integerDotProduct32BitUnsignedAccelerated: VkBool32,
    integerDotProduct32BitSignedAccelerated: VkBool32,
    integerDotProduct32BitMixedSignednessAccelerated: VkBool32,
    integerDotProduct64BitUnsignedAccelerated: VkBool32,
    integerDotProduct64BitSignedAccelerated: VkBool32,
    integerDotProduct64BitMixedSignednessAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating8BitUnsignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating8BitSignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating8BitMixedSignednessAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating4x8BitPackedUnsignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating4x8BitPackedSignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating4x8BitPackedMixedSignednessAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating16BitUnsignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating16BitSignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating16BitMixedSignednessAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating32BitUnsignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating32BitSignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating32BitMixedSignednessAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating64BitUnsignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating64BitSignedAccelerated: VkBool32,
    integerDotProductAccumulatingSaturating64BitMixedSignednessAccelerated: VkBool32,
};
pub const VkPhysicalDeviceShaderIntegerDotProductProperties = struct_VkPhysicalDeviceShaderIntegerDotProductProperties;
pub const struct_VkPhysicalDeviceTexelBufferAlignmentProperties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    storageTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    storageTexelBufferOffsetSingleTexelAlignment: VkBool32,
    uniformTexelBufferOffsetAlignmentBytes: VkDeviceSize,
    uniformTexelBufferOffsetSingleTexelAlignment: VkBool32,
};
pub const VkPhysicalDeviceTexelBufferAlignmentProperties = struct_VkPhysicalDeviceTexelBufferAlignmentProperties;
pub const struct_VkFormatProperties3 = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    linearTilingFeatures: VkFormatFeatureFlags2,
    optimalTilingFeatures: VkFormatFeatureFlags2,
    bufferFeatures: VkFormatFeatureFlags2,
};
pub const VkFormatProperties3 = struct_VkFormatProperties3;
pub const struct_VkPhysicalDeviceMaintenance4Features = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maintenance4: VkBool32,
};
pub const VkPhysicalDeviceMaintenance4Features = struct_VkPhysicalDeviceMaintenance4Features;
pub const struct_VkPhysicalDeviceMaintenance4Properties = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxBufferSize: VkDeviceSize,
};
pub const VkPhysicalDeviceMaintenance4Properties = struct_VkPhysicalDeviceMaintenance4Properties;
pub const struct_VkDeviceBufferMemoryRequirements = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    pCreateInfo: [*c]const VkBufferCreateInfo,
};
pub const VkDeviceBufferMemoryRequirements = struct_VkDeviceBufferMemoryRequirements;
pub const struct_VkDeviceImageMemoryRequirements = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    pCreateInfo: [*c]const VkImageCreateInfo,
    planeAspect: VkImageAspectFlagBits,
};
pub const VkDeviceImageMemoryRequirements = struct_VkDeviceImageMemoryRequirements;
pub const PFN_vkGetPhysicalDeviceToolProperties = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkPhysicalDeviceToolProperties) callconv(.C) VkResult;
pub const PFN_vkCreatePrivateDataSlot = ?*const fn (VkDevice, [*c]const VkPrivateDataSlotCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPrivateDataSlot) callconv(.C) VkResult;
pub const PFN_vkDestroyPrivateDataSlot = ?*const fn (VkDevice, VkPrivateDataSlot, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkSetPrivateData = ?*const fn (VkDevice, VkObjectType, u64, VkPrivateDataSlot, u64) callconv(.C) VkResult;
pub const PFN_vkGetPrivateData = ?*const fn (VkDevice, VkObjectType, u64, VkPrivateDataSlot, [*c]u64) callconv(.C) void;
pub const PFN_vkCmdSetEvent2 = ?*const fn (VkCommandBuffer, VkEvent, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdResetEvent2 = ?*const fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags2) callconv(.C) void;
pub const PFN_vkCmdWaitEvents2 = ?*const fn (VkCommandBuffer, u32, [*c]const VkEvent, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdPipelineBarrier2 = ?*const fn (VkCommandBuffer, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdWriteTimestamp2 = ?*const fn (VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkQueueSubmit2 = ?*const fn (VkQueue, u32, [*c]const VkSubmitInfo2, VkFence) callconv(.C) VkResult;
pub const PFN_vkCmdCopyBuffer2 = ?*const fn (VkCommandBuffer, [*c]const VkCopyBufferInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyImage2 = ?*const fn (VkCommandBuffer, [*c]const VkCopyImageInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyBufferToImage2 = ?*const fn (VkCommandBuffer, [*c]const VkCopyBufferToImageInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyImageToBuffer2 = ?*const fn (VkCommandBuffer, [*c]const VkCopyImageToBufferInfo2) callconv(.C) void;
pub const PFN_vkCmdBlitImage2 = ?*const fn (VkCommandBuffer, [*c]const VkBlitImageInfo2) callconv(.C) void;
pub const PFN_vkCmdResolveImage2 = ?*const fn (VkCommandBuffer, [*c]const VkResolveImageInfo2) callconv(.C) void;
pub const PFN_vkCmdBeginRendering = ?*const fn (VkCommandBuffer, [*c]const VkRenderingInfo) callconv(.C) void;
pub const PFN_vkCmdEndRendering = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdSetCullMode = ?*const fn (VkCommandBuffer, VkCullModeFlags) callconv(.C) void;
pub const PFN_vkCmdSetFrontFace = ?*const fn (VkCommandBuffer, VkFrontFace) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveTopology = ?*const fn (VkCommandBuffer, VkPrimitiveTopology) callconv(.C) void;
pub const PFN_vkCmdSetViewportWithCount = ?*const fn (VkCommandBuffer, u32, [*c]const VkViewport) callconv(.C) void;
pub const PFN_vkCmdSetScissorWithCount = ?*const fn (VkCommandBuffer, u32, [*c]const VkRect2D) callconv(.C) void;
pub const PFN_vkCmdBindVertexBuffers2 = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize, [*c]const VkDeviceSize, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdSetDepthTestEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthWriteEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthCompareOp = ?*const fn (VkCommandBuffer, VkCompareOp) callconv(.C) void;
pub const PFN_vkCmdSetDepthBoundsTestEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilTestEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilOp = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp) callconv(.C) void;
pub const PFN_vkCmdSetRasterizerDiscardEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBiasEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveRestartEnable = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkGetDeviceBufferMemoryRequirements = ?*const fn (VkDevice, [*c]const VkDeviceBufferMemoryRequirements, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetDeviceImageMemoryRequirements = ?*const fn (VkDevice, [*c]const VkDeviceImageMemoryRequirements, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetDeviceImageSparseMemoryRequirements = ?*const fn (VkDevice, [*c]const VkDeviceImageMemoryRequirements, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceToolProperties(physicalDevice: VkPhysicalDevice, pToolCount: [*c]u32, pToolProperties: [*c]VkPhysicalDeviceToolProperties) VkResult;
pub extern fn vkCreatePrivateDataSlot(device: VkDevice, pCreateInfo: [*c]const VkPrivateDataSlotCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPrivateDataSlot: [*c]VkPrivateDataSlot) VkResult;
pub extern fn vkDestroyPrivateDataSlot(device: VkDevice, privateDataSlot: VkPrivateDataSlot, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkSetPrivateData(device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlot, data: u64) VkResult;
pub extern fn vkGetPrivateData(device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlot, pData: [*c]u64) void;
pub extern fn vkCmdSetEvent2(commandBuffer: VkCommandBuffer, event: VkEvent, pDependencyInfo: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdResetEvent2(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags2) void;
pub extern fn vkCmdWaitEvents2(commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: [*c]const VkEvent, pDependencyInfos: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdPipelineBarrier2(commandBuffer: VkCommandBuffer, pDependencyInfo: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdWriteTimestamp2(commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2, queryPool: VkQueryPool, query: u32) void;
pub extern fn vkQueueSubmit2(queue: VkQueue, submitCount: u32, pSubmits: [*c]const VkSubmitInfo2, fence: VkFence) VkResult;
pub extern fn vkCmdCopyBuffer2(commandBuffer: VkCommandBuffer, pCopyBufferInfo: [*c]const VkCopyBufferInfo2) void;
pub extern fn vkCmdCopyImage2(commandBuffer: VkCommandBuffer, pCopyImageInfo: [*c]const VkCopyImageInfo2) void;
pub extern fn vkCmdCopyBufferToImage2(commandBuffer: VkCommandBuffer, pCopyBufferToImageInfo: [*c]const VkCopyBufferToImageInfo2) void;
pub extern fn vkCmdCopyImageToBuffer2(commandBuffer: VkCommandBuffer, pCopyImageToBufferInfo: [*c]const VkCopyImageToBufferInfo2) void;
pub extern fn vkCmdBlitImage2(commandBuffer: VkCommandBuffer, pBlitImageInfo: [*c]const VkBlitImageInfo2) void;
pub extern fn vkCmdResolveImage2(commandBuffer: VkCommandBuffer, pResolveImageInfo: [*c]const VkResolveImageInfo2) void;
pub extern fn vkCmdBeginRendering(commandBuffer: VkCommandBuffer, pRenderingInfo: [*c]const VkRenderingInfo) void;
pub extern fn vkCmdEndRendering(commandBuffer: VkCommandBuffer) void;
pub extern fn vkCmdSetCullMode(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags) void;
pub extern fn vkCmdSetFrontFace(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace) void;
pub extern fn vkCmdSetPrimitiveTopology(commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology) void;
pub extern fn vkCmdSetViewportWithCount(commandBuffer: VkCommandBuffer, viewportCount: u32, pViewports: [*c]const VkViewport) void;
pub extern fn vkCmdSetScissorWithCount(commandBuffer: VkCommandBuffer, scissorCount: u32, pScissors: [*c]const VkRect2D) void;
pub extern fn vkCmdBindVertexBuffers2(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const VkBuffer, pOffsets: [*c]const VkDeviceSize, pSizes: [*c]const VkDeviceSize, pStrides: [*c]const VkDeviceSize) void;
pub extern fn vkCmdSetDepthTestEnable(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32) void;
pub extern fn vkCmdSetDepthWriteEnable(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32) void;
pub extern fn vkCmdSetDepthCompareOp(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp) void;
pub extern fn vkCmdSetDepthBoundsTestEnable(commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32) void;
pub extern fn vkCmdSetStencilTestEnable(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32) void;
pub extern fn vkCmdSetStencilOp(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp) void;
pub extern fn vkCmdSetRasterizerDiscardEnable(commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32) void;
pub extern fn vkCmdSetDepthBiasEnable(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32) void;
pub extern fn vkCmdSetPrimitiveRestartEnable(commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32) void;
pub extern fn vkGetDeviceBufferMemoryRequirements(device: VkDevice, pInfo: [*c]const VkDeviceBufferMemoryRequirements, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetDeviceImageMemoryRequirements(device: VkDevice, pInfo: [*c]const VkDeviceImageMemoryRequirements, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetDeviceImageSparseMemoryRequirements(device: VkDevice, pInfo: [*c]const VkDeviceImageMemoryRequirements, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements2) void;
pub const struct_VkSurfaceKHR_T = opaque {};
pub const VkSurfaceKHR = ?*struct_VkSurfaceKHR_T;
pub const VK_PRESENT_MODE_IMMEDIATE_KHR: c_int = 0;
pub const VK_PRESENT_MODE_MAILBOX_KHR: c_int = 1;
pub const VK_PRESENT_MODE_FIFO_KHR: c_int = 2;
pub const VK_PRESENT_MODE_FIFO_RELAXED_KHR: c_int = 3;
pub const VK_PRESENT_MODE_SHARED_DEMAND_REFRESH_KHR: c_int = 1000111000;
pub const VK_PRESENT_MODE_SHARED_CONTINUOUS_REFRESH_KHR: c_int = 1000111001;
pub const VK_PRESENT_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPresentModeKHR = c_uint;
pub const VkPresentModeKHR = enum_VkPresentModeKHR;
pub const VK_COLOR_SPACE_SRGB_NONLINEAR_KHR: c_int = 0;
pub const VK_COLOR_SPACE_DISPLAY_P3_NONLINEAR_EXT: c_int = 1000104001;
pub const VK_COLOR_SPACE_EXTENDED_SRGB_LINEAR_EXT: c_int = 1000104002;
pub const VK_COLOR_SPACE_DISPLAY_P3_LINEAR_EXT: c_int = 1000104003;
pub const VK_COLOR_SPACE_DCI_P3_NONLINEAR_EXT: c_int = 1000104004;
pub const VK_COLOR_SPACE_BT709_LINEAR_EXT: c_int = 1000104005;
pub const VK_COLOR_SPACE_BT709_NONLINEAR_EXT: c_int = 1000104006;
pub const VK_COLOR_SPACE_BT2020_LINEAR_EXT: c_int = 1000104007;
pub const VK_COLOR_SPACE_HDR10_ST2084_EXT: c_int = 1000104008;
pub const VK_COLOR_SPACE_DOLBYVISION_EXT: c_int = 1000104009;
pub const VK_COLOR_SPACE_HDR10_HLG_EXT: c_int = 1000104010;
pub const VK_COLOR_SPACE_ADOBERGB_LINEAR_EXT: c_int = 1000104011;
pub const VK_COLOR_SPACE_ADOBERGB_NONLINEAR_EXT: c_int = 1000104012;
pub const VK_COLOR_SPACE_PASS_THROUGH_EXT: c_int = 1000104013;
pub const VK_COLOR_SPACE_EXTENDED_SRGB_NONLINEAR_EXT: c_int = 1000104014;
pub const VK_COLOR_SPACE_DISPLAY_NATIVE_AMD: c_int = 1000213000;
pub const VK_COLORSPACE_SRGB_NONLINEAR_KHR: c_int = 0;
pub const VK_COLOR_SPACE_DCI_P3_LINEAR_EXT: c_int = 1000104003;
pub const VK_COLOR_SPACE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkColorSpaceKHR = c_uint;
pub const VkColorSpaceKHR = enum_VkColorSpaceKHR;
pub const VK_SURFACE_TRANSFORM_IDENTITY_BIT_KHR: c_int = 1;
pub const VK_SURFACE_TRANSFORM_ROTATE_90_BIT_KHR: c_int = 2;
pub const VK_SURFACE_TRANSFORM_ROTATE_180_BIT_KHR: c_int = 4;
pub const VK_SURFACE_TRANSFORM_ROTATE_270_BIT_KHR: c_int = 8;
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_BIT_KHR: c_int = 16;
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_90_BIT_KHR: c_int = 32;
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_180_BIT_KHR: c_int = 64;
pub const VK_SURFACE_TRANSFORM_HORIZONTAL_MIRROR_ROTATE_270_BIT_KHR: c_int = 128;
pub const VK_SURFACE_TRANSFORM_INHERIT_BIT_KHR: c_int = 256;
pub const VK_SURFACE_TRANSFORM_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkSurfaceTransformFlagBitsKHR = c_uint;
pub const VkSurfaceTransformFlagBitsKHR = enum_VkSurfaceTransformFlagBitsKHR;
pub const VK_COMPOSITE_ALPHA_OPAQUE_BIT_KHR: c_int = 1;
pub const VK_COMPOSITE_ALPHA_PRE_MULTIPLIED_BIT_KHR: c_int = 2;
pub const VK_COMPOSITE_ALPHA_POST_MULTIPLIED_BIT_KHR: c_int = 4;
pub const VK_COMPOSITE_ALPHA_INHERIT_BIT_KHR: c_int = 8;
pub const VK_COMPOSITE_ALPHA_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkCompositeAlphaFlagBitsKHR = c_uint;
pub const VkCompositeAlphaFlagBitsKHR = enum_VkCompositeAlphaFlagBitsKHR;
pub const VkCompositeAlphaFlagsKHR = VkFlags;
pub const VkSurfaceTransformFlagsKHR = VkFlags;
pub const struct_VkSurfaceCapabilitiesKHR = extern struct {
    minImageCount: u32,
    maxImageCount: u32,
    currentExtent: VkExtent2D,
    minImageExtent: VkExtent2D,
    maxImageExtent: VkExtent2D,
    maxImageArrayLayers: u32,
    supportedTransforms: VkSurfaceTransformFlagsKHR,
    currentTransform: VkSurfaceTransformFlagBitsKHR,
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    supportedUsageFlags: VkImageUsageFlags,
};
pub const VkSurfaceCapabilitiesKHR = struct_VkSurfaceCapabilitiesKHR;
pub const struct_VkSurfaceFormatKHR = extern struct {
    format: VkFormat,
    colorSpace: VkColorSpaceKHR,
};
pub const VkSurfaceFormatKHR = struct_VkSurfaceFormatKHR;
pub const PFN_vkDestroySurfaceKHR = ?*const fn (VkInstance, VkSurfaceKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSurfaceSupportKHR = ?*const fn (VkPhysicalDevice, u32, VkSurfaceKHR, [*c]VkBool32) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilitiesKHR = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]VkSurfaceCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfaceFormatsKHR = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]u32, [*c]VkSurfaceFormatKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfacePresentModesKHR = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]u32, [*c]VkPresentModeKHR) callconv(.C) VkResult;
pub extern fn vkDestroySurfaceKHR(instance: VkInstance, surface: VkSurfaceKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetPhysicalDeviceSurfaceSupportKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, surface: VkSurfaceKHR, pSupported: [*c]VkBool32) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceCapabilitiesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: [*c]VkSurfaceCapabilitiesKHR) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceFormatsKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceFormatCount: [*c]u32, pSurfaceFormats: [*c]VkSurfaceFormatKHR) VkResult;
pub extern fn vkGetPhysicalDeviceSurfacePresentModesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pPresentModeCount: [*c]u32, pPresentModes: [*c]VkPresentModeKHR) VkResult;
pub const struct_VkSwapchainKHR_T = opaque {};
pub const VkSwapchainKHR = ?*struct_VkSwapchainKHR_T;
pub const VK_SWAPCHAIN_CREATE_SPLIT_INSTANCE_BIND_REGIONS_BIT_KHR: c_int = 1;
pub const VK_SWAPCHAIN_CREATE_PROTECTED_BIT_KHR: c_int = 2;
pub const VK_SWAPCHAIN_CREATE_MUTABLE_FORMAT_BIT_KHR: c_int = 4;
pub const VK_SWAPCHAIN_CREATE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkSwapchainCreateFlagBitsKHR = c_uint;
pub const VkSwapchainCreateFlagBitsKHR = enum_VkSwapchainCreateFlagBitsKHR;
pub const VkSwapchainCreateFlagsKHR = VkFlags;
pub const VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_BIT_KHR: c_int = 1;
pub const VK_DEVICE_GROUP_PRESENT_MODE_REMOTE_BIT_KHR: c_int = 2;
pub const VK_DEVICE_GROUP_PRESENT_MODE_SUM_BIT_KHR: c_int = 4;
pub const VK_DEVICE_GROUP_PRESENT_MODE_LOCAL_MULTI_DEVICE_BIT_KHR: c_int = 8;
pub const VK_DEVICE_GROUP_PRESENT_MODE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkDeviceGroupPresentModeFlagBitsKHR = c_uint;
pub const VkDeviceGroupPresentModeFlagBitsKHR = enum_VkDeviceGroupPresentModeFlagBitsKHR;
pub const VkDeviceGroupPresentModeFlagsKHR = VkFlags;
pub const struct_VkSwapchainCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkSwapchainCreateFlagsKHR,
    surface: VkSurfaceKHR,
    minImageCount: u32,
    imageFormat: VkFormat,
    imageColorSpace: VkColorSpaceKHR,
    imageExtent: VkExtent2D,
    imageArrayLayers: u32,
    imageUsage: VkImageUsageFlags,
    imageSharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: [*c]const u32,
    preTransform: VkSurfaceTransformFlagBitsKHR,
    compositeAlpha: VkCompositeAlphaFlagBitsKHR,
    presentMode: VkPresentModeKHR,
    clipped: VkBool32,
    oldSwapchain: VkSwapchainKHR,
};
pub const VkSwapchainCreateInfoKHR = struct_VkSwapchainCreateInfoKHR;
pub const struct_VkPresentInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    waitSemaphoreCount: u32,
    pWaitSemaphores: [*c]const VkSemaphore,
    swapchainCount: u32,
    pSwapchains: [*c]const VkSwapchainKHR,
    pImageIndices: [*c]const u32,
    pResults: [*c]VkResult,
};
pub const VkPresentInfoKHR = struct_VkPresentInfoKHR;
pub const struct_VkImageSwapchainCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    swapchain: VkSwapchainKHR,
};
pub const VkImageSwapchainCreateInfoKHR = struct_VkImageSwapchainCreateInfoKHR;
pub const struct_VkBindImageMemorySwapchainInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    swapchain: VkSwapchainKHR,
    imageIndex: u32,
};
pub const VkBindImageMemorySwapchainInfoKHR = struct_VkBindImageMemorySwapchainInfoKHR;
pub const struct_VkAcquireNextImageInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    swapchain: VkSwapchainKHR,
    timeout: u64,
    semaphore: VkSemaphore,
    fence: VkFence,
    deviceMask: u32,
};
pub const VkAcquireNextImageInfoKHR = struct_VkAcquireNextImageInfoKHR;
pub const struct_VkDeviceGroupPresentCapabilitiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    presentMask: [32]u32,
    modes: VkDeviceGroupPresentModeFlagsKHR,
};
pub const VkDeviceGroupPresentCapabilitiesKHR = struct_VkDeviceGroupPresentCapabilitiesKHR;
pub const struct_VkDeviceGroupPresentInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    swapchainCount: u32,
    pDeviceMasks: [*c]const u32,
    mode: VkDeviceGroupPresentModeFlagBitsKHR,
};
pub const VkDeviceGroupPresentInfoKHR = struct_VkDeviceGroupPresentInfoKHR;
pub const struct_VkDeviceGroupSwapchainCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    modes: VkDeviceGroupPresentModeFlagsKHR,
};
pub const VkDeviceGroupSwapchainCreateInfoKHR = struct_VkDeviceGroupSwapchainCreateInfoKHR;
pub const PFN_vkCreateSwapchainKHR = ?*const fn (VkDevice, [*c]const VkSwapchainCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkSwapchainKHR) callconv(.C) VkResult;
pub const PFN_vkDestroySwapchainKHR = ?*const fn (VkDevice, VkSwapchainKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetSwapchainImagesKHR = ?*const fn (VkDevice, VkSwapchainKHR, [*c]u32, [*c]VkImage) callconv(.C) VkResult;
pub const PFN_vkAcquireNextImageKHR = ?*const fn (VkDevice, VkSwapchainKHR, u64, VkSemaphore, VkFence, [*c]u32) callconv(.C) VkResult;
pub const PFN_vkQueuePresentKHR = ?*const fn (VkQueue, [*c]const VkPresentInfoKHR) callconv(.C) VkResult;
pub const PFN_vkGetDeviceGroupPresentCapabilitiesKHR = ?*const fn (VkDevice, [*c]VkDeviceGroupPresentCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetDeviceGroupSurfacePresentModesKHR = ?*const fn (VkDevice, VkSurfaceKHR, [*c]VkDeviceGroupPresentModeFlagsKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDevicePresentRectanglesKHR = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]u32, [*c]VkRect2D) callconv(.C) VkResult;
pub const PFN_vkAcquireNextImage2KHR = ?*const fn (VkDevice, [*c]const VkAcquireNextImageInfoKHR, [*c]u32) callconv(.C) VkResult;
pub extern fn vkCreateSwapchainKHR(device: VkDevice, pCreateInfo: [*c]const VkSwapchainCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pSwapchain: [*c]VkSwapchainKHR) VkResult;
pub extern fn vkDestroySwapchainKHR(device: VkDevice, swapchain: VkSwapchainKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetSwapchainImagesKHR(device: VkDevice, swapchain: VkSwapchainKHR, pSwapchainImageCount: [*c]u32, pSwapchainImages: [*c]VkImage) VkResult;
pub extern fn vkAcquireNextImageKHR(device: VkDevice, swapchain: VkSwapchainKHR, timeout: u64, semaphore: VkSemaphore, fence: VkFence, pImageIndex: [*c]u32) VkResult;
pub extern fn vkQueuePresentKHR(queue: VkQueue, pPresentInfo: [*c]const VkPresentInfoKHR) VkResult;
pub extern fn vkGetDeviceGroupPresentCapabilitiesKHR(device: VkDevice, pDeviceGroupPresentCapabilities: [*c]VkDeviceGroupPresentCapabilitiesKHR) VkResult;
pub extern fn vkGetDeviceGroupSurfacePresentModesKHR(device: VkDevice, surface: VkSurfaceKHR, pModes: [*c]VkDeviceGroupPresentModeFlagsKHR) VkResult;
pub extern fn vkGetPhysicalDevicePresentRectanglesKHR(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pRectCount: [*c]u32, pRects: [*c]VkRect2D) VkResult;
pub extern fn vkAcquireNextImage2KHR(device: VkDevice, pAcquireInfo: [*c]const VkAcquireNextImageInfoKHR, pImageIndex: [*c]u32) VkResult;
pub const struct_VkDisplayKHR_T = opaque {};
pub const VkDisplayKHR = ?*struct_VkDisplayKHR_T;
pub const struct_VkDisplayModeKHR_T = opaque {};
pub const VkDisplayModeKHR = ?*struct_VkDisplayModeKHR_T;
pub const VkDisplayModeCreateFlagsKHR = VkFlags;
pub const VK_DISPLAY_PLANE_ALPHA_OPAQUE_BIT_KHR: c_int = 1;
pub const VK_DISPLAY_PLANE_ALPHA_GLOBAL_BIT_KHR: c_int = 2;
pub const VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_BIT_KHR: c_int = 4;
pub const VK_DISPLAY_PLANE_ALPHA_PER_PIXEL_PREMULTIPLIED_BIT_KHR: c_int = 8;
pub const VK_DISPLAY_PLANE_ALPHA_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkDisplayPlaneAlphaFlagBitsKHR = c_uint;
pub const VkDisplayPlaneAlphaFlagBitsKHR = enum_VkDisplayPlaneAlphaFlagBitsKHR;
pub const VkDisplayPlaneAlphaFlagsKHR = VkFlags;
pub const VkDisplaySurfaceCreateFlagsKHR = VkFlags;
pub const struct_VkDisplayModeParametersKHR = extern struct {
    visibleRegion: VkExtent2D,
    refreshRate: u32,
};
pub const VkDisplayModeParametersKHR = struct_VkDisplayModeParametersKHR;
pub const struct_VkDisplayModeCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkDisplayModeCreateFlagsKHR,
    parameters: VkDisplayModeParametersKHR,
};
pub const VkDisplayModeCreateInfoKHR = struct_VkDisplayModeCreateInfoKHR;
pub const struct_VkDisplayModePropertiesKHR = extern struct {
    displayMode: VkDisplayModeKHR,
    parameters: VkDisplayModeParametersKHR,
};
pub const VkDisplayModePropertiesKHR = struct_VkDisplayModePropertiesKHR;
pub const struct_VkDisplayPlaneCapabilitiesKHR = extern struct {
    supportedAlpha: VkDisplayPlaneAlphaFlagsKHR,
    minSrcPosition: VkOffset2D,
    maxSrcPosition: VkOffset2D,
    minSrcExtent: VkExtent2D,
    maxSrcExtent: VkExtent2D,
    minDstPosition: VkOffset2D,
    maxDstPosition: VkOffset2D,
    minDstExtent: VkExtent2D,
    maxDstExtent: VkExtent2D,
};
pub const VkDisplayPlaneCapabilitiesKHR = struct_VkDisplayPlaneCapabilitiesKHR;
pub const struct_VkDisplayPlanePropertiesKHR = extern struct {
    currentDisplay: VkDisplayKHR,
    currentStackIndex: u32,
};
pub const VkDisplayPlanePropertiesKHR = struct_VkDisplayPlanePropertiesKHR;
pub const struct_VkDisplayPropertiesKHR = extern struct {
    display: VkDisplayKHR,
    displayName: [*c]const u8,
    physicalDimensions: VkExtent2D,
    physicalResolution: VkExtent2D,
    supportedTransforms: VkSurfaceTransformFlagsKHR,
    planeReorderPossible: VkBool32,
    persistentContent: VkBool32,
};
pub const VkDisplayPropertiesKHR = struct_VkDisplayPropertiesKHR;
pub const struct_VkDisplaySurfaceCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkDisplaySurfaceCreateFlagsKHR,
    displayMode: VkDisplayModeKHR,
    planeIndex: u32,
    planeStackIndex: u32,
    transform: VkSurfaceTransformFlagBitsKHR,
    globalAlpha: f32,
    alphaMode: VkDisplayPlaneAlphaFlagBitsKHR,
    imageExtent: VkExtent2D,
};
pub const VkDisplaySurfaceCreateInfoKHR = struct_VkDisplaySurfaceCreateInfoKHR;
pub const PFN_vkGetPhysicalDeviceDisplayPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayPropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceDisplayPlanePropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayPlanePropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayPlaneSupportedDisplaysKHR = ?*const fn (VkPhysicalDevice, u32, [*c]u32, [*c]VkDisplayKHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayModePropertiesKHR = ?*const fn (VkPhysicalDevice, VkDisplayKHR, [*c]u32, [*c]VkDisplayModePropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkCreateDisplayModeKHR = ?*const fn (VkPhysicalDevice, VkDisplayKHR, [*c]const VkDisplayModeCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkDisplayModeKHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayPlaneCapabilitiesKHR = ?*const fn (VkPhysicalDevice, VkDisplayModeKHR, u32, [*c]VkDisplayPlaneCapabilitiesKHR) callconv(.C) VkResult;
pub const PFN_vkCreateDisplayPlaneSurfaceKHR = ?*const fn (VkInstance, [*c]const VkDisplaySurfaceCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkSurfaceKHR) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceDisplayPropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayPropertiesKHR) VkResult;
pub extern fn vkGetPhysicalDeviceDisplayPlanePropertiesKHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayPlanePropertiesKHR) VkResult;
pub extern fn vkGetDisplayPlaneSupportedDisplaysKHR(physicalDevice: VkPhysicalDevice, planeIndex: u32, pDisplayCount: [*c]u32, pDisplays: [*c]VkDisplayKHR) VkResult;
pub extern fn vkGetDisplayModePropertiesKHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayModePropertiesKHR) VkResult;
pub extern fn vkCreateDisplayModeKHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pCreateInfo: [*c]const VkDisplayModeCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pMode: [*c]VkDisplayModeKHR) VkResult;
pub extern fn vkGetDisplayPlaneCapabilitiesKHR(physicalDevice: VkPhysicalDevice, mode: VkDisplayModeKHR, planeIndex: u32, pCapabilities: [*c]VkDisplayPlaneCapabilitiesKHR) VkResult;
pub extern fn vkCreateDisplayPlaneSurfaceKHR(instance: VkInstance, pCreateInfo: [*c]const VkDisplaySurfaceCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pSurface: [*c]VkSurfaceKHR) VkResult;
pub const struct_VkDisplayPresentInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcRect: VkRect2D,
    dstRect: VkRect2D,
    persistent: VkBool32,
};
pub const VkDisplayPresentInfoKHR = struct_VkDisplayPresentInfoKHR;
pub const PFN_vkCreateSharedSwapchainsKHR = ?*const fn (VkDevice, u32, [*c]const VkSwapchainCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkSwapchainKHR) callconv(.C) VkResult;
pub extern fn vkCreateSharedSwapchainsKHR(device: VkDevice, swapchainCount: u32, pCreateInfos: [*c]const VkSwapchainCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pSwapchains: [*c]VkSwapchainKHR) VkResult;
pub const VkRenderingFlagsKHR = VkRenderingFlags;
pub const VkRenderingFlagBitsKHR = VkRenderingFlagBits;
pub const VkRenderingInfoKHR = VkRenderingInfo;
pub const VkRenderingAttachmentInfoKHR = VkRenderingAttachmentInfo;
pub const VkPipelineRenderingCreateInfoKHR = VkPipelineRenderingCreateInfo;
pub const VkPhysicalDeviceDynamicRenderingFeaturesKHR = VkPhysicalDeviceDynamicRenderingFeatures;
pub const VkCommandBufferInheritanceRenderingInfoKHR = VkCommandBufferInheritanceRenderingInfo;
pub const struct_VkRenderingFragmentShadingRateAttachmentInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    imageView: VkImageView,
    imageLayout: VkImageLayout,
    shadingRateAttachmentTexelSize: VkExtent2D,
};
pub const VkRenderingFragmentShadingRateAttachmentInfoKHR = struct_VkRenderingFragmentShadingRateAttachmentInfoKHR;
pub const struct_VkRenderingFragmentDensityMapAttachmentInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    imageView: VkImageView,
    imageLayout: VkImageLayout,
};
pub const VkRenderingFragmentDensityMapAttachmentInfoEXT = struct_VkRenderingFragmentDensityMapAttachmentInfoEXT;
pub const struct_VkAttachmentSampleCountInfoAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    colorAttachmentCount: u32,
    pColorAttachmentSamples: [*c]const VkSampleCountFlagBits,
    depthStencilAttachmentSamples: VkSampleCountFlagBits,
};
pub const VkAttachmentSampleCountInfoAMD = struct_VkAttachmentSampleCountInfoAMD;
pub const VkAttachmentSampleCountInfoNV = VkAttachmentSampleCountInfoAMD;
pub const struct_VkMultiviewPerViewAttributesInfoNVX = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    perViewAttributes: VkBool32,
    perViewAttributesPositionXOnly: VkBool32,
};
pub const VkMultiviewPerViewAttributesInfoNVX = struct_VkMultiviewPerViewAttributesInfoNVX;
pub const PFN_vkCmdBeginRenderingKHR = ?*const fn (VkCommandBuffer, [*c]const VkRenderingInfo) callconv(.C) void;
pub const PFN_vkCmdEndRenderingKHR = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub extern fn vkCmdBeginRenderingKHR(commandBuffer: VkCommandBuffer, pRenderingInfo: [*c]const VkRenderingInfo) void;
pub extern fn vkCmdEndRenderingKHR(commandBuffer: VkCommandBuffer) void;
pub const VkRenderPassMultiviewCreateInfoKHR = VkRenderPassMultiviewCreateInfo;
pub const VkPhysicalDeviceMultiviewFeaturesKHR = VkPhysicalDeviceMultiviewFeatures;
pub const VkPhysicalDeviceMultiviewPropertiesKHR = VkPhysicalDeviceMultiviewProperties;
pub const VkPhysicalDeviceFeatures2KHR = VkPhysicalDeviceFeatures2;
pub const VkPhysicalDeviceProperties2KHR = VkPhysicalDeviceProperties2;
pub const VkFormatProperties2KHR = VkFormatProperties2;
pub const VkImageFormatProperties2KHR = VkImageFormatProperties2;
pub const VkPhysicalDeviceImageFormatInfo2KHR = VkPhysicalDeviceImageFormatInfo2;
pub const VkQueueFamilyProperties2KHR = VkQueueFamilyProperties2;
pub const VkPhysicalDeviceMemoryProperties2KHR = VkPhysicalDeviceMemoryProperties2;
pub const VkSparseImageFormatProperties2KHR = VkSparseImageFormatProperties2;
pub const VkPhysicalDeviceSparseImageFormatInfo2KHR = VkPhysicalDeviceSparseImageFormatInfo2;
pub const PFN_vkGetPhysicalDeviceFeatures2KHR = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceFeatures2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceFormatProperties2KHR = ?*const fn (VkPhysicalDevice, VkFormat, [*c]VkFormatProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceImageFormatProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceImageFormatInfo2, [*c]VkImageFormatProperties2) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceQueueFamilyProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkQueueFamilyProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMemoryProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]VkPhysicalDeviceMemoryProperties2) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceSparseImageFormatProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSparseImageFormatInfo2, [*c]u32, [*c]VkSparseImageFormatProperties2) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceFeatures2KHR(physicalDevice: VkPhysicalDevice, pFeatures: [*c]VkPhysicalDeviceFeatures2) void;
pub extern fn vkGetPhysicalDeviceProperties2KHR(physicalDevice: VkPhysicalDevice, pProperties: [*c]VkPhysicalDeviceProperties2) void;
pub extern fn vkGetPhysicalDeviceFormatProperties2KHR(physicalDevice: VkPhysicalDevice, format: VkFormat, pFormatProperties: [*c]VkFormatProperties2) void;
pub extern fn vkGetPhysicalDeviceImageFormatProperties2KHR(physicalDevice: VkPhysicalDevice, pImageFormatInfo: [*c]const VkPhysicalDeviceImageFormatInfo2, pImageFormatProperties: [*c]VkImageFormatProperties2) VkResult;
pub extern fn vkGetPhysicalDeviceQueueFamilyProperties2KHR(physicalDevice: VkPhysicalDevice, pQueueFamilyPropertyCount: [*c]u32, pQueueFamilyProperties: [*c]VkQueueFamilyProperties2) void;
pub extern fn vkGetPhysicalDeviceMemoryProperties2KHR(physicalDevice: VkPhysicalDevice, pMemoryProperties: [*c]VkPhysicalDeviceMemoryProperties2) void;
pub extern fn vkGetPhysicalDeviceSparseImageFormatProperties2KHR(physicalDevice: VkPhysicalDevice, pFormatInfo: [*c]const VkPhysicalDeviceSparseImageFormatInfo2, pPropertyCount: [*c]u32, pProperties: [*c]VkSparseImageFormatProperties2) void;
pub const VkPeerMemoryFeatureFlagsKHR = VkPeerMemoryFeatureFlags;
pub const VkPeerMemoryFeatureFlagBitsKHR = VkPeerMemoryFeatureFlagBits;
pub const VkMemoryAllocateFlagsKHR = VkMemoryAllocateFlags;
pub const VkMemoryAllocateFlagBitsKHR = VkMemoryAllocateFlagBits;
pub const VkMemoryAllocateFlagsInfoKHR = VkMemoryAllocateFlagsInfo;
pub const VkDeviceGroupRenderPassBeginInfoKHR = VkDeviceGroupRenderPassBeginInfo;
pub const VkDeviceGroupCommandBufferBeginInfoKHR = VkDeviceGroupCommandBufferBeginInfo;
pub const VkDeviceGroupSubmitInfoKHR = VkDeviceGroupSubmitInfo;
pub const VkDeviceGroupBindSparseInfoKHR = VkDeviceGroupBindSparseInfo;
pub const VkBindBufferMemoryDeviceGroupInfoKHR = VkBindBufferMemoryDeviceGroupInfo;
pub const VkBindImageMemoryDeviceGroupInfoKHR = VkBindImageMemoryDeviceGroupInfo;
pub const PFN_vkGetDeviceGroupPeerMemoryFeaturesKHR = ?*const fn (VkDevice, u32, u32, u32, [*c]VkPeerMemoryFeatureFlags) callconv(.C) void;
pub const PFN_vkCmdSetDeviceMaskKHR = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdDispatchBaseKHR = ?*const fn (VkCommandBuffer, u32, u32, u32, u32, u32, u32) callconv(.C) void;
pub extern fn vkGetDeviceGroupPeerMemoryFeaturesKHR(device: VkDevice, heapIndex: u32, localDeviceIndex: u32, remoteDeviceIndex: u32, pPeerMemoryFeatures: [*c]VkPeerMemoryFeatureFlags) void;
pub extern fn vkCmdSetDeviceMaskKHR(commandBuffer: VkCommandBuffer, deviceMask: u32) void;
pub extern fn vkCmdDispatchBaseKHR(commandBuffer: VkCommandBuffer, baseGroupX: u32, baseGroupY: u32, baseGroupZ: u32, groupCountX: u32, groupCountY: u32, groupCountZ: u32) void;
pub const VkCommandPoolTrimFlagsKHR = VkCommandPoolTrimFlags;
pub const PFN_vkTrimCommandPoolKHR = ?*const fn (VkDevice, VkCommandPool, VkCommandPoolTrimFlags) callconv(.C) void;
pub extern fn vkTrimCommandPoolKHR(device: VkDevice, commandPool: VkCommandPool, flags: VkCommandPoolTrimFlags) void;
pub const VkPhysicalDeviceGroupPropertiesKHR = VkPhysicalDeviceGroupProperties;
pub const VkDeviceGroupDeviceCreateInfoKHR = VkDeviceGroupDeviceCreateInfo;
pub const PFN_vkEnumeratePhysicalDeviceGroupsKHR = ?*const fn (VkInstance, [*c]u32, [*c]VkPhysicalDeviceGroupProperties) callconv(.C) VkResult;
pub extern fn vkEnumeratePhysicalDeviceGroupsKHR(instance: VkInstance, pPhysicalDeviceGroupCount: [*c]u32, pPhysicalDeviceGroupProperties: [*c]VkPhysicalDeviceGroupProperties) VkResult;
pub const VkExternalMemoryHandleTypeFlagsKHR = VkExternalMemoryHandleTypeFlags;
pub const VkExternalMemoryHandleTypeFlagBitsKHR = VkExternalMemoryHandleTypeFlagBits;
pub const VkExternalMemoryFeatureFlagsKHR = VkExternalMemoryFeatureFlags;
pub const VkExternalMemoryFeatureFlagBitsKHR = VkExternalMemoryFeatureFlagBits;
pub const VkExternalMemoryPropertiesKHR = VkExternalMemoryProperties;
pub const VkPhysicalDeviceExternalImageFormatInfoKHR = VkPhysicalDeviceExternalImageFormatInfo;
pub const VkExternalImageFormatPropertiesKHR = VkExternalImageFormatProperties;
pub const VkPhysicalDeviceExternalBufferInfoKHR = VkPhysicalDeviceExternalBufferInfo;
pub const VkExternalBufferPropertiesKHR = VkExternalBufferProperties;
pub const VkPhysicalDeviceIDPropertiesKHR = VkPhysicalDeviceIDProperties;
pub const PFN_vkGetPhysicalDeviceExternalBufferPropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalBufferInfo, [*c]VkExternalBufferProperties) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceExternalBufferPropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalBufferInfo: [*c]const VkPhysicalDeviceExternalBufferInfo, pExternalBufferProperties: [*c]VkExternalBufferProperties) void;
pub const VkExternalMemoryImageCreateInfoKHR = VkExternalMemoryImageCreateInfo;
pub const VkExternalMemoryBufferCreateInfoKHR = VkExternalMemoryBufferCreateInfo;
pub const VkExportMemoryAllocateInfoKHR = VkExportMemoryAllocateInfo;
pub const struct_VkImportMemoryFdInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    handleType: VkExternalMemoryHandleTypeFlagBits,
    fd: c_int,
};
pub const VkImportMemoryFdInfoKHR = struct_VkImportMemoryFdInfoKHR;
pub const struct_VkMemoryFdPropertiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    memoryTypeBits: u32,
};
pub const VkMemoryFdPropertiesKHR = struct_VkMemoryFdPropertiesKHR;
pub const struct_VkMemoryGetFdInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    memory: VkDeviceMemory,
    handleType: VkExternalMemoryHandleTypeFlagBits,
};
pub const VkMemoryGetFdInfoKHR = struct_VkMemoryGetFdInfoKHR;
pub const PFN_vkGetMemoryFdKHR = ?*const fn (VkDevice, [*c]const VkMemoryGetFdInfoKHR, [*c]c_int) callconv(.C) VkResult;
pub const PFN_vkGetMemoryFdPropertiesKHR = ?*const fn (VkDevice, VkExternalMemoryHandleTypeFlagBits, c_int, [*c]VkMemoryFdPropertiesKHR) callconv(.C) VkResult;
pub extern fn vkGetMemoryFdKHR(device: VkDevice, pGetFdInfo: [*c]const VkMemoryGetFdInfoKHR, pFd: [*c]c_int) VkResult;
pub extern fn vkGetMemoryFdPropertiesKHR(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, fd: c_int, pMemoryFdProperties: [*c]VkMemoryFdPropertiesKHR) VkResult;
pub const VkExternalSemaphoreHandleTypeFlagsKHR = VkExternalSemaphoreHandleTypeFlags;
pub const VkExternalSemaphoreHandleTypeFlagBitsKHR = VkExternalSemaphoreHandleTypeFlagBits;
pub const VkExternalSemaphoreFeatureFlagsKHR = VkExternalSemaphoreFeatureFlags;
pub const VkExternalSemaphoreFeatureFlagBitsKHR = VkExternalSemaphoreFeatureFlagBits;
pub const VkPhysicalDeviceExternalSemaphoreInfoKHR = VkPhysicalDeviceExternalSemaphoreInfo;
pub const VkExternalSemaphorePropertiesKHR = VkExternalSemaphoreProperties;
pub const PFN_vkGetPhysicalDeviceExternalSemaphorePropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalSemaphoreInfo, [*c]VkExternalSemaphoreProperties) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceExternalSemaphorePropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalSemaphoreInfo: [*c]const VkPhysicalDeviceExternalSemaphoreInfo, pExternalSemaphoreProperties: [*c]VkExternalSemaphoreProperties) void;
pub const VkSemaphoreImportFlagsKHR = VkSemaphoreImportFlags;
pub const VkSemaphoreImportFlagBitsKHR = VkSemaphoreImportFlagBits;
pub const VkExportSemaphoreCreateInfoKHR = VkExportSemaphoreCreateInfo;
pub const struct_VkImportSemaphoreFdInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    semaphore: VkSemaphore,
    flags: VkSemaphoreImportFlags,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
    fd: c_int,
};
pub const VkImportSemaphoreFdInfoKHR = struct_VkImportSemaphoreFdInfoKHR;
pub const struct_VkSemaphoreGetFdInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    semaphore: VkSemaphore,
    handleType: VkExternalSemaphoreHandleTypeFlagBits,
};
pub const VkSemaphoreGetFdInfoKHR = struct_VkSemaphoreGetFdInfoKHR;
pub const PFN_vkImportSemaphoreFdKHR = ?*const fn (VkDevice, [*c]const VkImportSemaphoreFdInfoKHR) callconv(.C) VkResult;
pub const PFN_vkGetSemaphoreFdKHR = ?*const fn (VkDevice, [*c]const VkSemaphoreGetFdInfoKHR, [*c]c_int) callconv(.C) VkResult;
pub extern fn vkImportSemaphoreFdKHR(device: VkDevice, pImportSemaphoreFdInfo: [*c]const VkImportSemaphoreFdInfoKHR) VkResult;
pub extern fn vkGetSemaphoreFdKHR(device: VkDevice, pGetFdInfo: [*c]const VkSemaphoreGetFdInfoKHR, pFd: [*c]c_int) VkResult;
pub const struct_VkPhysicalDevicePushDescriptorPropertiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxPushDescriptors: u32,
};
pub const VkPhysicalDevicePushDescriptorPropertiesKHR = struct_VkPhysicalDevicePushDescriptorPropertiesKHR;
pub const PFN_vkCmdPushDescriptorSetKHR = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipelineLayout, u32, u32, [*c]const VkWriteDescriptorSet) callconv(.C) void;
pub const PFN_vkCmdPushDescriptorSetWithTemplateKHR = ?*const fn (VkCommandBuffer, VkDescriptorUpdateTemplate, VkPipelineLayout, u32, ?*const anyopaque) callconv(.C) void;
pub extern fn vkCmdPushDescriptorSetKHR(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, layout: VkPipelineLayout, set: u32, descriptorWriteCount: u32, pDescriptorWrites: [*c]const VkWriteDescriptorSet) void;
pub extern fn vkCmdPushDescriptorSetWithTemplateKHR(commandBuffer: VkCommandBuffer, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, layout: VkPipelineLayout, set: u32, pData: ?*const anyopaque) void;
pub const VkPhysicalDeviceShaderFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub const VkPhysicalDeviceFloat16Int8FeaturesKHR = VkPhysicalDeviceShaderFloat16Int8Features;
pub const VkPhysicalDevice16BitStorageFeaturesKHR = VkPhysicalDevice16BitStorageFeatures;
pub const struct_VkRectLayerKHR = extern struct {
    offset: VkOffset2D,
    extent: VkExtent2D,
    layer: u32,
};
pub const VkRectLayerKHR = struct_VkRectLayerKHR;
pub const struct_VkPresentRegionKHR = extern struct {
    rectangleCount: u32,
    pRectangles: [*c]const VkRectLayerKHR,
};
pub const VkPresentRegionKHR = struct_VkPresentRegionKHR;
pub const struct_VkPresentRegionsKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    swapchainCount: u32,
    pRegions: [*c]const VkPresentRegionKHR,
};
pub const VkPresentRegionsKHR = struct_VkPresentRegionsKHR;
pub const VkDescriptorUpdateTemplateKHR = VkDescriptorUpdateTemplate;
pub const VkDescriptorUpdateTemplateTypeKHR = VkDescriptorUpdateTemplateType;
pub const VkDescriptorUpdateTemplateCreateFlagsKHR = VkDescriptorUpdateTemplateCreateFlags;
pub const VkDescriptorUpdateTemplateEntryKHR = VkDescriptorUpdateTemplateEntry;
pub const VkDescriptorUpdateTemplateCreateInfoKHR = VkDescriptorUpdateTemplateCreateInfo;
pub const PFN_vkCreateDescriptorUpdateTemplateKHR = ?*const fn (VkDevice, [*c]const VkDescriptorUpdateTemplateCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkDescriptorUpdateTemplate) callconv(.C) VkResult;
pub const PFN_vkDestroyDescriptorUpdateTemplateKHR = ?*const fn (VkDevice, VkDescriptorUpdateTemplate, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkUpdateDescriptorSetWithTemplateKHR = ?*const fn (VkDevice, VkDescriptorSet, VkDescriptorUpdateTemplate, ?*const anyopaque) callconv(.C) void;
pub extern fn vkCreateDescriptorUpdateTemplateKHR(device: VkDevice, pCreateInfo: [*c]const VkDescriptorUpdateTemplateCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pDescriptorUpdateTemplate: [*c]VkDescriptorUpdateTemplate) VkResult;
pub extern fn vkDestroyDescriptorUpdateTemplateKHR(device: VkDevice, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkUpdateDescriptorSetWithTemplateKHR(device: VkDevice, descriptorSet: VkDescriptorSet, descriptorUpdateTemplate: VkDescriptorUpdateTemplate, pData: ?*const anyopaque) void;
pub const VkPhysicalDeviceImagelessFramebufferFeaturesKHR = VkPhysicalDeviceImagelessFramebufferFeatures;
pub const VkFramebufferAttachmentsCreateInfoKHR = VkFramebufferAttachmentsCreateInfo;
pub const VkFramebufferAttachmentImageInfoKHR = VkFramebufferAttachmentImageInfo;
pub const VkRenderPassAttachmentBeginInfoKHR = VkRenderPassAttachmentBeginInfo;
pub const VkRenderPassCreateInfo2KHR = VkRenderPassCreateInfo2;
pub const VkAttachmentDescription2KHR = VkAttachmentDescription2;
pub const VkAttachmentReference2KHR = VkAttachmentReference2;
pub const VkSubpassDescription2KHR = VkSubpassDescription2;
pub const VkSubpassDependency2KHR = VkSubpassDependency2;
pub const VkSubpassBeginInfoKHR = VkSubpassBeginInfo;
pub const VkSubpassEndInfoKHR = VkSubpassEndInfo;
pub const PFN_vkCreateRenderPass2KHR = ?*const fn (VkDevice, [*c]const VkRenderPassCreateInfo2, [*c]const VkAllocationCallbacks, [*c]VkRenderPass) callconv(.C) VkResult;
pub const PFN_vkCmdBeginRenderPass2KHR = ?*const fn (VkCommandBuffer, [*c]const VkRenderPassBeginInfo, [*c]const VkSubpassBeginInfo) callconv(.C) void;
pub const PFN_vkCmdNextSubpass2KHR = ?*const fn (VkCommandBuffer, [*c]const VkSubpassBeginInfo, [*c]const VkSubpassEndInfo) callconv(.C) void;
pub const PFN_vkCmdEndRenderPass2KHR = ?*const fn (VkCommandBuffer, [*c]const VkSubpassEndInfo) callconv(.C) void;
pub extern fn vkCreateRenderPass2KHR(device: VkDevice, pCreateInfo: [*c]const VkRenderPassCreateInfo2, pAllocator: [*c]const VkAllocationCallbacks, pRenderPass: [*c]VkRenderPass) VkResult;
pub extern fn vkCmdBeginRenderPass2KHR(commandBuffer: VkCommandBuffer, pRenderPassBegin: [*c]const VkRenderPassBeginInfo, pSubpassBeginInfo: [*c]const VkSubpassBeginInfo) void;
pub extern fn vkCmdNextSubpass2KHR(commandBuffer: VkCommandBuffer, pSubpassBeginInfo: [*c]const VkSubpassBeginInfo, pSubpassEndInfo: [*c]const VkSubpassEndInfo) void;
pub extern fn vkCmdEndRenderPass2KHR(commandBuffer: VkCommandBuffer, pSubpassEndInfo: [*c]const VkSubpassEndInfo) void;
pub const struct_VkSharedPresentSurfaceCapabilitiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    sharedPresentSupportedUsageFlags: VkImageUsageFlags,
};
pub const VkSharedPresentSurfaceCapabilitiesKHR = struct_VkSharedPresentSurfaceCapabilitiesKHR;
pub const PFN_vkGetSwapchainStatusKHR = ?*const fn (VkDevice, VkSwapchainKHR) callconv(.C) VkResult;
pub extern fn vkGetSwapchainStatusKHR(device: VkDevice, swapchain: VkSwapchainKHR) VkResult;
pub const VkExternalFenceHandleTypeFlagsKHR = VkExternalFenceHandleTypeFlags;
pub const VkExternalFenceHandleTypeFlagBitsKHR = VkExternalFenceHandleTypeFlagBits;
pub const VkExternalFenceFeatureFlagsKHR = VkExternalFenceFeatureFlags;
pub const VkExternalFenceFeatureFlagBitsKHR = VkExternalFenceFeatureFlagBits;
pub const VkPhysicalDeviceExternalFenceInfoKHR = VkPhysicalDeviceExternalFenceInfo;
pub const VkExternalFencePropertiesKHR = VkExternalFenceProperties;
pub const PFN_vkGetPhysicalDeviceExternalFencePropertiesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceExternalFenceInfo, [*c]VkExternalFenceProperties) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceExternalFencePropertiesKHR(physicalDevice: VkPhysicalDevice, pExternalFenceInfo: [*c]const VkPhysicalDeviceExternalFenceInfo, pExternalFenceProperties: [*c]VkExternalFenceProperties) void;
pub const VkFenceImportFlagsKHR = VkFenceImportFlags;
pub const VkFenceImportFlagBitsKHR = VkFenceImportFlagBits;
pub const VkExportFenceCreateInfoKHR = VkExportFenceCreateInfo;
pub const struct_VkImportFenceFdInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    fence: VkFence,
    flags: VkFenceImportFlags,
    handleType: VkExternalFenceHandleTypeFlagBits,
    fd: c_int,
};
pub const VkImportFenceFdInfoKHR = struct_VkImportFenceFdInfoKHR;
pub const struct_VkFenceGetFdInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    fence: VkFence,
    handleType: VkExternalFenceHandleTypeFlagBits,
};
pub const VkFenceGetFdInfoKHR = struct_VkFenceGetFdInfoKHR;
pub const PFN_vkImportFenceFdKHR = ?*const fn (VkDevice, [*c]const VkImportFenceFdInfoKHR) callconv(.C) VkResult;
pub const PFN_vkGetFenceFdKHR = ?*const fn (VkDevice, [*c]const VkFenceGetFdInfoKHR, [*c]c_int) callconv(.C) VkResult;
pub extern fn vkImportFenceFdKHR(device: VkDevice, pImportFenceFdInfo: [*c]const VkImportFenceFdInfoKHR) VkResult;
pub extern fn vkGetFenceFdKHR(device: VkDevice, pGetFdInfo: [*c]const VkFenceGetFdInfoKHR, pFd: [*c]c_int) VkResult;
pub const VK_PERFORMANCE_COUNTER_UNIT_GENERIC_KHR: c_int = 0;
pub const VK_PERFORMANCE_COUNTER_UNIT_PERCENTAGE_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_UNIT_NANOSECONDS_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_UNIT_BYTES_KHR: c_int = 3;
pub const VK_PERFORMANCE_COUNTER_UNIT_BYTES_PER_SECOND_KHR: c_int = 4;
pub const VK_PERFORMANCE_COUNTER_UNIT_KELVIN_KHR: c_int = 5;
pub const VK_PERFORMANCE_COUNTER_UNIT_WATTS_KHR: c_int = 6;
pub const VK_PERFORMANCE_COUNTER_UNIT_VOLTS_KHR: c_int = 7;
pub const VK_PERFORMANCE_COUNTER_UNIT_AMPS_KHR: c_int = 8;
pub const VK_PERFORMANCE_COUNTER_UNIT_HERTZ_KHR: c_int = 9;
pub const VK_PERFORMANCE_COUNTER_UNIT_CYCLES_KHR: c_int = 10;
pub const VK_PERFORMANCE_COUNTER_UNIT_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPerformanceCounterUnitKHR = c_uint;
pub const VkPerformanceCounterUnitKHR = enum_VkPerformanceCounterUnitKHR;
pub const VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_BUFFER_KHR: c_int = 0;
pub const VK_PERFORMANCE_COUNTER_SCOPE_RENDER_PASS_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_SCOPE_COMMAND_KHR: c_int = 2;
pub const VK_QUERY_SCOPE_COMMAND_BUFFER_KHR: c_int = 0;
pub const VK_QUERY_SCOPE_RENDER_PASS_KHR: c_int = 1;
pub const VK_QUERY_SCOPE_COMMAND_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_SCOPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPerformanceCounterScopeKHR = c_uint;
pub const VkPerformanceCounterScopeKHR = enum_VkPerformanceCounterScopeKHR;
pub const VK_PERFORMANCE_COUNTER_STORAGE_INT32_KHR: c_int = 0;
pub const VK_PERFORMANCE_COUNTER_STORAGE_INT64_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_STORAGE_UINT32_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_STORAGE_UINT64_KHR: c_int = 3;
pub const VK_PERFORMANCE_COUNTER_STORAGE_FLOAT32_KHR: c_int = 4;
pub const VK_PERFORMANCE_COUNTER_STORAGE_FLOAT64_KHR: c_int = 5;
pub const VK_PERFORMANCE_COUNTER_STORAGE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPerformanceCounterStorageKHR = c_uint;
pub const VkPerformanceCounterStorageKHR = enum_VkPerformanceCounterStorageKHR;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_BIT_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_BIT_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_PERFORMANCE_IMPACTING_KHR: c_int = 1;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_CONCURRENTLY_IMPACTED_KHR: c_int = 2;
pub const VK_PERFORMANCE_COUNTER_DESCRIPTION_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPerformanceCounterDescriptionFlagBitsKHR = c_uint;
pub const VkPerformanceCounterDescriptionFlagBitsKHR = enum_VkPerformanceCounterDescriptionFlagBitsKHR;
pub const VkPerformanceCounterDescriptionFlagsKHR = VkFlags;
pub const VK_ACQUIRE_PROFILING_LOCK_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAcquireProfilingLockFlagBitsKHR = c_uint;
pub const VkAcquireProfilingLockFlagBitsKHR = enum_VkAcquireProfilingLockFlagBitsKHR;
pub const VkAcquireProfilingLockFlagsKHR = VkFlags;
pub const struct_VkPhysicalDevicePerformanceQueryFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    performanceCounterQueryPools: VkBool32,
    performanceCounterMultipleQueryPools: VkBool32,
};
pub const VkPhysicalDevicePerformanceQueryFeaturesKHR = struct_VkPhysicalDevicePerformanceQueryFeaturesKHR;
pub const struct_VkPhysicalDevicePerformanceQueryPropertiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    allowCommandBufferQueryCopies: VkBool32,
};
pub const VkPhysicalDevicePerformanceQueryPropertiesKHR = struct_VkPhysicalDevicePerformanceQueryPropertiesKHR;
pub const struct_VkPerformanceCounterKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    unit: VkPerformanceCounterUnitKHR,
    scope: VkPerformanceCounterScopeKHR,
    storage: VkPerformanceCounterStorageKHR,
    uuid: [16]u8,
};
pub const VkPerformanceCounterKHR = struct_VkPerformanceCounterKHR;
pub const struct_VkPerformanceCounterDescriptionKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    flags: VkPerformanceCounterDescriptionFlagsKHR,
    name: [256]u8,
    category: [256]u8,
    description: [256]u8,
};
pub const VkPerformanceCounterDescriptionKHR = struct_VkPerformanceCounterDescriptionKHR;
pub const struct_VkQueryPoolPerformanceCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    queueFamilyIndex: u32,
    counterIndexCount: u32,
    pCounterIndices: [*c]const u32,
};
pub const VkQueryPoolPerformanceCreateInfoKHR = struct_VkQueryPoolPerformanceCreateInfoKHR;
pub const union_VkPerformanceCounterResultKHR = extern union {
    int32: i32,
    int64: i64,
    uint32: u32,
    uint64: u64,
    float32: f32,
    float64: f64,
};
pub const VkPerformanceCounterResultKHR = union_VkPerformanceCounterResultKHR;
pub const struct_VkAcquireProfilingLockInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkAcquireProfilingLockFlagsKHR,
    timeout: u64,
};
pub const VkAcquireProfilingLockInfoKHR = struct_VkAcquireProfilingLockInfoKHR;
pub const struct_VkPerformanceQuerySubmitInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    counterPassIndex: u32,
};
pub const VkPerformanceQuerySubmitInfoKHR = struct_VkPerformanceQuerySubmitInfoKHR;
pub const PFN_vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR = ?*const fn (VkPhysicalDevice, u32, [*c]u32, [*c]VkPerformanceCounterKHR, [*c]VkPerformanceCounterDescriptionKHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR = ?*const fn (VkPhysicalDevice, [*c]const VkQueryPoolPerformanceCreateInfoKHR, [*c]u32) callconv(.C) void;
pub const PFN_vkAcquireProfilingLockKHR = ?*const fn (VkDevice, [*c]const VkAcquireProfilingLockInfoKHR) callconv(.C) VkResult;
pub const PFN_vkReleaseProfilingLockKHR = ?*const fn (VkDevice) callconv(.C) void;
pub extern fn vkEnumeratePhysicalDeviceQueueFamilyPerformanceQueryCountersKHR(physicalDevice: VkPhysicalDevice, queueFamilyIndex: u32, pCounterCount: [*c]u32, pCounters: [*c]VkPerformanceCounterKHR, pCounterDescriptions: [*c]VkPerformanceCounterDescriptionKHR) VkResult;
pub extern fn vkGetPhysicalDeviceQueueFamilyPerformanceQueryPassesKHR(physicalDevice: VkPhysicalDevice, pPerformanceQueryCreateInfo: [*c]const VkQueryPoolPerformanceCreateInfoKHR, pNumPasses: [*c]u32) void;
pub extern fn vkAcquireProfilingLockKHR(device: VkDevice, pInfo: [*c]const VkAcquireProfilingLockInfoKHR) VkResult;
pub extern fn vkReleaseProfilingLockKHR(device: VkDevice) void;
pub const VkPointClippingBehaviorKHR = VkPointClippingBehavior;
pub const VkTessellationDomainOriginKHR = VkTessellationDomainOrigin;
pub const VkPhysicalDevicePointClippingPropertiesKHR = VkPhysicalDevicePointClippingProperties;
pub const VkRenderPassInputAttachmentAspectCreateInfoKHR = VkRenderPassInputAttachmentAspectCreateInfo;
pub const VkInputAttachmentAspectReferenceKHR = VkInputAttachmentAspectReference;
pub const VkImageViewUsageCreateInfoKHR = VkImageViewUsageCreateInfo;
pub const VkPipelineTessellationDomainOriginStateCreateInfoKHR = VkPipelineTessellationDomainOriginStateCreateInfo;
pub const struct_VkPhysicalDeviceSurfaceInfo2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    surface: VkSurfaceKHR,
};
pub const VkPhysicalDeviceSurfaceInfo2KHR = struct_VkPhysicalDeviceSurfaceInfo2KHR;
pub const struct_VkSurfaceCapabilities2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    surfaceCapabilities: VkSurfaceCapabilitiesKHR,
};
pub const VkSurfaceCapabilities2KHR = struct_VkSurfaceCapabilities2KHR;
pub const struct_VkSurfaceFormat2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    surfaceFormat: VkSurfaceFormatKHR,
};
pub const VkSurfaceFormat2KHR = struct_VkSurfaceFormat2KHR;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilities2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSurfaceInfo2KHR, [*c]VkSurfaceCapabilities2KHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceSurfaceFormats2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkPhysicalDeviceSurfaceInfo2KHR, [*c]u32, [*c]VkSurfaceFormat2KHR) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceCapabilities2KHR(physicalDevice: VkPhysicalDevice, pSurfaceInfo: [*c]const VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceCapabilities: [*c]VkSurfaceCapabilities2KHR) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceFormats2KHR(physicalDevice: VkPhysicalDevice, pSurfaceInfo: [*c]const VkPhysicalDeviceSurfaceInfo2KHR, pSurfaceFormatCount: [*c]u32, pSurfaceFormats: [*c]VkSurfaceFormat2KHR) VkResult;
pub const VkPhysicalDeviceVariablePointerFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub const VkPhysicalDeviceVariablePointersFeaturesKHR = VkPhysicalDeviceVariablePointersFeatures;
pub const struct_VkDisplayProperties2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    displayProperties: VkDisplayPropertiesKHR,
};
pub const VkDisplayProperties2KHR = struct_VkDisplayProperties2KHR;
pub const struct_VkDisplayPlaneProperties2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    displayPlaneProperties: VkDisplayPlanePropertiesKHR,
};
pub const VkDisplayPlaneProperties2KHR = struct_VkDisplayPlaneProperties2KHR;
pub const struct_VkDisplayModeProperties2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    displayModeProperties: VkDisplayModePropertiesKHR,
};
pub const VkDisplayModeProperties2KHR = struct_VkDisplayModeProperties2KHR;
pub const struct_VkDisplayPlaneInfo2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    mode: VkDisplayModeKHR,
    planeIndex: u32,
};
pub const VkDisplayPlaneInfo2KHR = struct_VkDisplayPlaneInfo2KHR;
pub const struct_VkDisplayPlaneCapabilities2KHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    capabilities: VkDisplayPlaneCapabilitiesKHR,
};
pub const VkDisplayPlaneCapabilities2KHR = struct_VkDisplayPlaneCapabilities2KHR;
pub const PFN_vkGetPhysicalDeviceDisplayProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayProperties2KHR) callconv(.C) VkResult;
pub const PFN_vkGetPhysicalDeviceDisplayPlaneProperties2KHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkDisplayPlaneProperties2KHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayModeProperties2KHR = ?*const fn (VkPhysicalDevice, VkDisplayKHR, [*c]u32, [*c]VkDisplayModeProperties2KHR) callconv(.C) VkResult;
pub const PFN_vkGetDisplayPlaneCapabilities2KHR = ?*const fn (VkPhysicalDevice, [*c]const VkDisplayPlaneInfo2KHR, [*c]VkDisplayPlaneCapabilities2KHR) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceDisplayProperties2KHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayProperties2KHR) VkResult;
pub extern fn vkGetPhysicalDeviceDisplayPlaneProperties2KHR(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayPlaneProperties2KHR) VkResult;
pub extern fn vkGetDisplayModeProperties2KHR(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR, pPropertyCount: [*c]u32, pProperties: [*c]VkDisplayModeProperties2KHR) VkResult;
pub extern fn vkGetDisplayPlaneCapabilities2KHR(physicalDevice: VkPhysicalDevice, pDisplayPlaneInfo: [*c]const VkDisplayPlaneInfo2KHR, pCapabilities: [*c]VkDisplayPlaneCapabilities2KHR) VkResult;
pub const VkMemoryDedicatedRequirementsKHR = VkMemoryDedicatedRequirements;
pub const VkMemoryDedicatedAllocateInfoKHR = VkMemoryDedicatedAllocateInfo;
pub const VkBufferMemoryRequirementsInfo2KHR = VkBufferMemoryRequirementsInfo2;
pub const VkImageMemoryRequirementsInfo2KHR = VkImageMemoryRequirementsInfo2;
pub const VkImageSparseMemoryRequirementsInfo2KHR = VkImageSparseMemoryRequirementsInfo2;
pub const VkMemoryRequirements2KHR = VkMemoryRequirements2;
pub const VkSparseImageMemoryRequirements2KHR = VkSparseImageMemoryRequirements2;
pub const PFN_vkGetImageMemoryRequirements2KHR = ?*const fn (VkDevice, [*c]const VkImageMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetBufferMemoryRequirements2KHR = ?*const fn (VkDevice, [*c]const VkBufferMemoryRequirementsInfo2, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetImageSparseMemoryRequirements2KHR = ?*const fn (VkDevice, [*c]const VkImageSparseMemoryRequirementsInfo2, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub extern fn vkGetImageMemoryRequirements2KHR(device: VkDevice, pInfo: [*c]const VkImageMemoryRequirementsInfo2, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetBufferMemoryRequirements2KHR(device: VkDevice, pInfo: [*c]const VkBufferMemoryRequirementsInfo2, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetImageSparseMemoryRequirements2KHR(device: VkDevice, pInfo: [*c]const VkImageSparseMemoryRequirementsInfo2, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements2) void;
pub const VkImageFormatListCreateInfoKHR = VkImageFormatListCreateInfo;
pub const VkSamplerYcbcrConversionKHR = VkSamplerYcbcrConversion;
pub const VkSamplerYcbcrModelConversionKHR = VkSamplerYcbcrModelConversion;
pub const VkSamplerYcbcrRangeKHR = VkSamplerYcbcrRange;
pub const VkChromaLocationKHR = VkChromaLocation;
pub const VkSamplerYcbcrConversionCreateInfoKHR = VkSamplerYcbcrConversionCreateInfo;
pub const VkSamplerYcbcrConversionInfoKHR = VkSamplerYcbcrConversionInfo;
pub const VkBindImagePlaneMemoryInfoKHR = VkBindImagePlaneMemoryInfo;
pub const VkImagePlaneMemoryRequirementsInfoKHR = VkImagePlaneMemoryRequirementsInfo;
pub const VkPhysicalDeviceSamplerYcbcrConversionFeaturesKHR = VkPhysicalDeviceSamplerYcbcrConversionFeatures;
pub const VkSamplerYcbcrConversionImageFormatPropertiesKHR = VkSamplerYcbcrConversionImageFormatProperties;
pub const PFN_vkCreateSamplerYcbcrConversionKHR = ?*const fn (VkDevice, [*c]const VkSamplerYcbcrConversionCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkSamplerYcbcrConversion) callconv(.C) VkResult;
pub const PFN_vkDestroySamplerYcbcrConversionKHR = ?*const fn (VkDevice, VkSamplerYcbcrConversion, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub extern fn vkCreateSamplerYcbcrConversionKHR(device: VkDevice, pCreateInfo: [*c]const VkSamplerYcbcrConversionCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pYcbcrConversion: [*c]VkSamplerYcbcrConversion) VkResult;
pub extern fn vkDestroySamplerYcbcrConversionKHR(device: VkDevice, ycbcrConversion: VkSamplerYcbcrConversion, pAllocator: [*c]const VkAllocationCallbacks) void;
pub const VkBindBufferMemoryInfoKHR = VkBindBufferMemoryInfo;
pub const VkBindImageMemoryInfoKHR = VkBindImageMemoryInfo;
pub const PFN_vkBindBufferMemory2KHR = ?*const fn (VkDevice, u32, [*c]const VkBindBufferMemoryInfo) callconv(.C) VkResult;
pub const PFN_vkBindImageMemory2KHR = ?*const fn (VkDevice, u32, [*c]const VkBindImageMemoryInfo) callconv(.C) VkResult;
pub extern fn vkBindBufferMemory2KHR(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindBufferMemoryInfo) VkResult;
pub extern fn vkBindImageMemory2KHR(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindImageMemoryInfo) VkResult;
pub const VkPhysicalDeviceMaintenance3PropertiesKHR = VkPhysicalDeviceMaintenance3Properties;
pub const VkDescriptorSetLayoutSupportKHR = VkDescriptorSetLayoutSupport;
pub const PFN_vkGetDescriptorSetLayoutSupportKHR = ?*const fn (VkDevice, [*c]const VkDescriptorSetLayoutCreateInfo, [*c]VkDescriptorSetLayoutSupport) callconv(.C) void;
pub extern fn vkGetDescriptorSetLayoutSupportKHR(device: VkDevice, pCreateInfo: [*c]const VkDescriptorSetLayoutCreateInfo, pSupport: [*c]VkDescriptorSetLayoutSupport) void;
pub const PFN_vkCmdDrawIndirectCountKHR = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCountKHR = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawIndirectCountKHR(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirectCountKHR(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub const VkPhysicalDeviceShaderSubgroupExtendedTypesFeaturesKHR = VkPhysicalDeviceShaderSubgroupExtendedTypesFeatures;
pub const VkPhysicalDevice8BitStorageFeaturesKHR = VkPhysicalDevice8BitStorageFeatures;
pub const VkPhysicalDeviceShaderAtomicInt64FeaturesKHR = VkPhysicalDeviceShaderAtomicInt64Features;
pub const struct_VkPhysicalDeviceShaderClockFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderSubgroupClock: VkBool32,
    shaderDeviceClock: VkBool32,
};
pub const VkPhysicalDeviceShaderClockFeaturesKHR = struct_VkPhysicalDeviceShaderClockFeaturesKHR;
pub const VK_QUEUE_GLOBAL_PRIORITY_LOW_KHR: c_int = 128;
pub const VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_KHR: c_int = 256;
pub const VK_QUEUE_GLOBAL_PRIORITY_HIGH_KHR: c_int = 512;
pub const VK_QUEUE_GLOBAL_PRIORITY_REALTIME_KHR: c_int = 1024;
pub const VK_QUEUE_GLOBAL_PRIORITY_LOW_EXT: c_int = 128;
pub const VK_QUEUE_GLOBAL_PRIORITY_MEDIUM_EXT: c_int = 256;
pub const VK_QUEUE_GLOBAL_PRIORITY_HIGH_EXT: c_int = 512;
pub const VK_QUEUE_GLOBAL_PRIORITY_REALTIME_EXT: c_int = 1024;
pub const VK_QUEUE_GLOBAL_PRIORITY_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkQueueGlobalPriorityKHR = c_uint;
pub const VkQueueGlobalPriorityKHR = enum_VkQueueGlobalPriorityKHR;
pub const struct_VkDeviceQueueGlobalPriorityCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    globalPriority: VkQueueGlobalPriorityKHR,
};
pub const VkDeviceQueueGlobalPriorityCreateInfoKHR = struct_VkDeviceQueueGlobalPriorityCreateInfoKHR;
pub const struct_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    globalPriorityQuery: VkBool32,
};
pub const VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR = struct_VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR;
pub const struct_VkQueueFamilyGlobalPriorityPropertiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    priorityCount: u32,
    priorities: [16]VkQueueGlobalPriorityKHR,
};
pub const VkQueueFamilyGlobalPriorityPropertiesKHR = struct_VkQueueFamilyGlobalPriorityPropertiesKHR;
pub const VkDriverIdKHR = VkDriverId;
pub const VkConformanceVersionKHR = VkConformanceVersion;
pub const VkPhysicalDeviceDriverPropertiesKHR = VkPhysicalDeviceDriverProperties;
pub const VkShaderFloatControlsIndependenceKHR = VkShaderFloatControlsIndependence;
pub const VkPhysicalDeviceFloatControlsPropertiesKHR = VkPhysicalDeviceFloatControlsProperties;
pub const VkResolveModeFlagBitsKHR = VkResolveModeFlagBits;
pub const VkResolveModeFlagsKHR = VkResolveModeFlags;
pub const VkSubpassDescriptionDepthStencilResolveKHR = VkSubpassDescriptionDepthStencilResolve;
pub const VkPhysicalDeviceDepthStencilResolvePropertiesKHR = VkPhysicalDeviceDepthStencilResolveProperties;
pub const VkSemaphoreTypeKHR = VkSemaphoreType;
pub const VkSemaphoreWaitFlagBitsKHR = VkSemaphoreWaitFlagBits;
pub const VkSemaphoreWaitFlagsKHR = VkSemaphoreWaitFlags;
pub const VkPhysicalDeviceTimelineSemaphoreFeaturesKHR = VkPhysicalDeviceTimelineSemaphoreFeatures;
pub const VkPhysicalDeviceTimelineSemaphorePropertiesKHR = VkPhysicalDeviceTimelineSemaphoreProperties;
pub const VkSemaphoreTypeCreateInfoKHR = VkSemaphoreTypeCreateInfo;
pub const VkTimelineSemaphoreSubmitInfoKHR = VkTimelineSemaphoreSubmitInfo;
pub const VkSemaphoreWaitInfoKHR = VkSemaphoreWaitInfo;
pub const VkSemaphoreSignalInfoKHR = VkSemaphoreSignalInfo;
pub const PFN_vkGetSemaphoreCounterValueKHR = ?*const fn (VkDevice, VkSemaphore, [*c]u64) callconv(.C) VkResult;
pub const PFN_vkWaitSemaphoresKHR = ?*const fn (VkDevice, [*c]const VkSemaphoreWaitInfo, u64) callconv(.C) VkResult;
pub const PFN_vkSignalSemaphoreKHR = ?*const fn (VkDevice, [*c]const VkSemaphoreSignalInfo) callconv(.C) VkResult;
pub extern fn vkGetSemaphoreCounterValueKHR(device: VkDevice, semaphore: VkSemaphore, pValue: [*c]u64) VkResult;
pub extern fn vkWaitSemaphoresKHR(device: VkDevice, pWaitInfo: [*c]const VkSemaphoreWaitInfo, timeout: u64) VkResult;
pub extern fn vkSignalSemaphoreKHR(device: VkDevice, pSignalInfo: [*c]const VkSemaphoreSignalInfo) VkResult;
pub const VkPhysicalDeviceVulkanMemoryModelFeaturesKHR = VkPhysicalDeviceVulkanMemoryModelFeatures;
pub const VkPhysicalDeviceShaderTerminateInvocationFeaturesKHR = VkPhysicalDeviceShaderTerminateInvocationFeatures;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_KEEP_KHR: c_int = 0;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_REPLACE_KHR: c_int = 1;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MIN_KHR: c_int = 2;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_KHR: c_int = 3;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MUL_KHR: c_int = 4;
pub const VK_FRAGMENT_SHADING_RATE_COMBINER_OP_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkFragmentShadingRateCombinerOpKHR = c_uint;
pub const VkFragmentShadingRateCombinerOpKHR = enum_VkFragmentShadingRateCombinerOpKHR;
pub const struct_VkFragmentShadingRateAttachmentInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    pFragmentShadingRateAttachment: [*c]const VkAttachmentReference2,
    shadingRateAttachmentTexelSize: VkExtent2D,
};
pub const VkFragmentShadingRateAttachmentInfoKHR = struct_VkFragmentShadingRateAttachmentInfoKHR;
pub const struct_VkPipelineFragmentShadingRateStateCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    fragmentSize: VkExtent2D,
    combinerOps: [2]VkFragmentShadingRateCombinerOpKHR,
};
pub const VkPipelineFragmentShadingRateStateCreateInfoKHR = struct_VkPipelineFragmentShadingRateStateCreateInfoKHR;
pub const struct_VkPhysicalDeviceFragmentShadingRateFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    pipelineFragmentShadingRate: VkBool32,
    primitiveFragmentShadingRate: VkBool32,
    attachmentFragmentShadingRate: VkBool32,
};
pub const VkPhysicalDeviceFragmentShadingRateFeaturesKHR = struct_VkPhysicalDeviceFragmentShadingRateFeaturesKHR;
pub const struct_VkPhysicalDeviceFragmentShadingRatePropertiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    minFragmentShadingRateAttachmentTexelSize: VkExtent2D,
    maxFragmentShadingRateAttachmentTexelSize: VkExtent2D,
    maxFragmentShadingRateAttachmentTexelSizeAspectRatio: u32,
    primitiveFragmentShadingRateWithMultipleViewports: VkBool32,
    layeredShadingRateAttachments: VkBool32,
    fragmentShadingRateNonTrivialCombinerOps: VkBool32,
    maxFragmentSize: VkExtent2D,
    maxFragmentSizeAspectRatio: u32,
    maxFragmentShadingRateCoverageSamples: u32,
    maxFragmentShadingRateRasterizationSamples: VkSampleCountFlagBits,
    fragmentShadingRateWithShaderDepthStencilWrites: VkBool32,
    fragmentShadingRateWithSampleMask: VkBool32,
    fragmentShadingRateWithShaderSampleMask: VkBool32,
    fragmentShadingRateWithConservativeRasterization: VkBool32,
    fragmentShadingRateWithFragmentShaderInterlock: VkBool32,
    fragmentShadingRateWithCustomSampleLocations: VkBool32,
    fragmentShadingRateStrictMultiplyCombiner: VkBool32,
};
pub const VkPhysicalDeviceFragmentShadingRatePropertiesKHR = struct_VkPhysicalDeviceFragmentShadingRatePropertiesKHR;
pub const struct_VkPhysicalDeviceFragmentShadingRateKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    sampleCounts: VkSampleCountFlags,
    fragmentSize: VkExtent2D,
};
pub const VkPhysicalDeviceFragmentShadingRateKHR = struct_VkPhysicalDeviceFragmentShadingRateKHR;
pub const PFN_vkGetPhysicalDeviceFragmentShadingRatesKHR = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkPhysicalDeviceFragmentShadingRateKHR) callconv(.C) VkResult;
pub const PFN_vkCmdSetFragmentShadingRateKHR = ?*const fn (VkCommandBuffer, [*c]const VkExtent2D, [*c]const VkFragmentShadingRateCombinerOpKHR) callconv(.C) void;
pub extern fn vkGetPhysicalDeviceFragmentShadingRatesKHR(physicalDevice: VkPhysicalDevice, pFragmentShadingRateCount: [*c]u32, pFragmentShadingRates: [*c]VkPhysicalDeviceFragmentShadingRateKHR) VkResult;
pub extern fn vkCmdSetFragmentShadingRateKHR(commandBuffer: VkCommandBuffer, pFragmentSize: [*c]const VkExtent2D, combinerOps: [*c]const VkFragmentShadingRateCombinerOpKHR) void;
pub const struct_VkSurfaceProtectedCapabilitiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    supportsProtected: VkBool32,
};
pub const VkSurfaceProtectedCapabilitiesKHR = struct_VkSurfaceProtectedCapabilitiesKHR;
pub const VkPhysicalDeviceSeparateDepthStencilLayoutsFeaturesKHR = VkPhysicalDeviceSeparateDepthStencilLayoutsFeatures;
pub const VkAttachmentReferenceStencilLayoutKHR = VkAttachmentReferenceStencilLayout;
pub const VkAttachmentDescriptionStencilLayoutKHR = VkAttachmentDescriptionStencilLayout;
pub const struct_VkPhysicalDevicePresentWaitFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    presentWait: VkBool32,
};
pub const VkPhysicalDevicePresentWaitFeaturesKHR = struct_VkPhysicalDevicePresentWaitFeaturesKHR;
pub const PFN_vkWaitForPresentKHR = ?*const fn (VkDevice, VkSwapchainKHR, u64, u64) callconv(.C) VkResult;
pub extern fn vkWaitForPresentKHR(device: VkDevice, swapchain: VkSwapchainKHR, presentId: u64, timeout: u64) VkResult;
pub const VkPhysicalDeviceUniformBufferStandardLayoutFeaturesKHR = VkPhysicalDeviceUniformBufferStandardLayoutFeatures;
pub const VkPhysicalDeviceBufferDeviceAddressFeaturesKHR = VkPhysicalDeviceBufferDeviceAddressFeatures;
pub const VkBufferDeviceAddressInfoKHR = VkBufferDeviceAddressInfo;
pub const VkBufferOpaqueCaptureAddressCreateInfoKHR = VkBufferOpaqueCaptureAddressCreateInfo;
pub const VkMemoryOpaqueCaptureAddressAllocateInfoKHR = VkMemoryOpaqueCaptureAddressAllocateInfo;
pub const VkDeviceMemoryOpaqueCaptureAddressInfoKHR = VkDeviceMemoryOpaqueCaptureAddressInfo;
pub const PFN_vkGetBufferDeviceAddressKHR = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) VkDeviceAddress;
pub const PFN_vkGetBufferOpaqueCaptureAddressKHR = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) u64;
pub const PFN_vkGetDeviceMemoryOpaqueCaptureAddressKHR = ?*const fn (VkDevice, [*c]const VkDeviceMemoryOpaqueCaptureAddressInfo) callconv(.C) u64;
pub extern fn vkGetBufferDeviceAddressKHR(device: VkDevice, pInfo: [*c]const VkBufferDeviceAddressInfo) VkDeviceAddress;
pub extern fn vkGetBufferOpaqueCaptureAddressKHR(device: VkDevice, pInfo: [*c]const VkBufferDeviceAddressInfo) u64;
pub extern fn vkGetDeviceMemoryOpaqueCaptureAddressKHR(device: VkDevice, pInfo: [*c]const VkDeviceMemoryOpaqueCaptureAddressInfo) u64;
pub const struct_VkDeferredOperationKHR_T = opaque {};
pub const VkDeferredOperationKHR = ?*struct_VkDeferredOperationKHR_T;
pub const PFN_vkCreateDeferredOperationKHR = ?*const fn (VkDevice, [*c]const VkAllocationCallbacks, [*c]VkDeferredOperationKHR) callconv(.C) VkResult;
pub const PFN_vkDestroyDeferredOperationKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetDeferredOperationMaxConcurrencyKHR = ?*const fn (VkDevice, VkDeferredOperationKHR) callconv(.C) u32;
pub const PFN_vkGetDeferredOperationResultKHR = ?*const fn (VkDevice, VkDeferredOperationKHR) callconv(.C) VkResult;
pub const PFN_vkDeferredOperationJoinKHR = ?*const fn (VkDevice, VkDeferredOperationKHR) callconv(.C) VkResult;
pub extern fn vkCreateDeferredOperationKHR(device: VkDevice, pAllocator: [*c]const VkAllocationCallbacks, pDeferredOperation: [*c]VkDeferredOperationKHR) VkResult;
pub extern fn vkDestroyDeferredOperationKHR(device: VkDevice, operation: VkDeferredOperationKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetDeferredOperationMaxConcurrencyKHR(device: VkDevice, operation: VkDeferredOperationKHR) u32;
pub extern fn vkGetDeferredOperationResultKHR(device: VkDevice, operation: VkDeferredOperationKHR) VkResult;
pub extern fn vkDeferredOperationJoinKHR(device: VkDevice, operation: VkDeferredOperationKHR) VkResult;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_BOOL32_KHR: c_int = 0;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_INT64_KHR: c_int = 1;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_UINT64_KHR: c_int = 2;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_FLOAT64_KHR: c_int = 3;
pub const VK_PIPELINE_EXECUTABLE_STATISTIC_FORMAT_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkPipelineExecutableStatisticFormatKHR = c_uint;
pub const VkPipelineExecutableStatisticFormatKHR = enum_VkPipelineExecutableStatisticFormatKHR;
pub const struct_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    pipelineExecutableInfo: VkBool32,
};
pub const VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR = struct_VkPhysicalDevicePipelineExecutablePropertiesFeaturesKHR;
pub const struct_VkPipelineInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    pipeline: VkPipeline,
};
pub const VkPipelineInfoKHR = struct_VkPipelineInfoKHR;
pub const struct_VkPipelineExecutablePropertiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    stages: VkShaderStageFlags,
    name: [256]u8,
    description: [256]u8,
    subgroupSize: u32,
};
pub const VkPipelineExecutablePropertiesKHR = struct_VkPipelineExecutablePropertiesKHR;
pub const struct_VkPipelineExecutableInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    pipeline: VkPipeline,
    executableIndex: u32,
};
pub const VkPipelineExecutableInfoKHR = struct_VkPipelineExecutableInfoKHR;
pub const union_VkPipelineExecutableStatisticValueKHR = extern union {
    b32: VkBool32,
    i64: i64,
    u64: u64,
    f64: f64,
};
pub const VkPipelineExecutableStatisticValueKHR = union_VkPipelineExecutableStatisticValueKHR;
pub const struct_VkPipelineExecutableStatisticKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    name: [256]u8,
    description: [256]u8,
    format: VkPipelineExecutableStatisticFormatKHR,
    value: VkPipelineExecutableStatisticValueKHR,
};
pub const VkPipelineExecutableStatisticKHR = struct_VkPipelineExecutableStatisticKHR;
pub const struct_VkPipelineExecutableInternalRepresentationKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    name: [256]u8,
    description: [256]u8,
    isText: VkBool32,
    dataSize: usize,
    pData: ?*anyopaque,
};
pub const VkPipelineExecutableInternalRepresentationKHR = struct_VkPipelineExecutableInternalRepresentationKHR;
pub const PFN_vkGetPipelineExecutablePropertiesKHR = ?*const fn (VkDevice, [*c]const VkPipelineInfoKHR, [*c]u32, [*c]VkPipelineExecutablePropertiesKHR) callconv(.C) VkResult;
pub const PFN_vkGetPipelineExecutableStatisticsKHR = ?*const fn (VkDevice, [*c]const VkPipelineExecutableInfoKHR, [*c]u32, [*c]VkPipelineExecutableStatisticKHR) callconv(.C) VkResult;
pub const PFN_vkGetPipelineExecutableInternalRepresentationsKHR = ?*const fn (VkDevice, [*c]const VkPipelineExecutableInfoKHR, [*c]u32, [*c]VkPipelineExecutableInternalRepresentationKHR) callconv(.C) VkResult;
pub extern fn vkGetPipelineExecutablePropertiesKHR(device: VkDevice, pPipelineInfo: [*c]const VkPipelineInfoKHR, pExecutableCount: [*c]u32, pProperties: [*c]VkPipelineExecutablePropertiesKHR) VkResult;
pub extern fn vkGetPipelineExecutableStatisticsKHR(device: VkDevice, pExecutableInfo: [*c]const VkPipelineExecutableInfoKHR, pStatisticCount: [*c]u32, pStatistics: [*c]VkPipelineExecutableStatisticKHR) VkResult;
pub extern fn vkGetPipelineExecutableInternalRepresentationsKHR(device: VkDevice, pExecutableInfo: [*c]const VkPipelineExecutableInfoKHR, pInternalRepresentationCount: [*c]u32, pInternalRepresentations: [*c]VkPipelineExecutableInternalRepresentationKHR) VkResult;
pub const VkPhysicalDeviceShaderIntegerDotProductFeaturesKHR = VkPhysicalDeviceShaderIntegerDotProductFeatures;
pub const VkPhysicalDeviceShaderIntegerDotProductPropertiesKHR = VkPhysicalDeviceShaderIntegerDotProductProperties;
pub const struct_VkPipelineLibraryCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    libraryCount: u32,
    pLibraries: [*c]const VkPipeline,
};
pub const VkPipelineLibraryCreateInfoKHR = struct_VkPipelineLibraryCreateInfoKHR;
pub const struct_VkPresentIdKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    swapchainCount: u32,
    pPresentIds: [*c]const u64,
};
pub const VkPresentIdKHR = struct_VkPresentIdKHR;
pub const struct_VkPhysicalDevicePresentIdFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    presentId: VkBool32,
};
pub const VkPhysicalDevicePresentIdFeaturesKHR = struct_VkPhysicalDevicePresentIdFeaturesKHR;
pub const VkPipelineStageFlags2KHR = VkPipelineStageFlags2;
pub const VkPipelineStageFlagBits2KHR = VkPipelineStageFlagBits2;
pub const VkAccessFlags2KHR = VkAccessFlags2;
pub const VkAccessFlagBits2KHR = VkAccessFlagBits2;
pub const VkSubmitFlagBitsKHR = VkSubmitFlagBits;
pub const VkSubmitFlagsKHR = VkSubmitFlags;
pub const VkMemoryBarrier2KHR = VkMemoryBarrier2;
pub const VkBufferMemoryBarrier2KHR = VkBufferMemoryBarrier2;
pub const VkImageMemoryBarrier2KHR = VkImageMemoryBarrier2;
pub const VkDependencyInfoKHR = VkDependencyInfo;
pub const VkSubmitInfo2KHR = VkSubmitInfo2;
pub const VkSemaphoreSubmitInfoKHR = VkSemaphoreSubmitInfo;
pub const VkCommandBufferSubmitInfoKHR = VkCommandBufferSubmitInfo;
pub const VkPhysicalDeviceSynchronization2FeaturesKHR = VkPhysicalDeviceSynchronization2Features;
pub const struct_VkQueueFamilyCheckpointProperties2NV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    checkpointExecutionStageMask: VkPipelineStageFlags2,
};
pub const VkQueueFamilyCheckpointProperties2NV = struct_VkQueueFamilyCheckpointProperties2NV;
pub const struct_VkCheckpointData2NV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    stage: VkPipelineStageFlags2,
    pCheckpointMarker: ?*anyopaque,
};
pub const VkCheckpointData2NV = struct_VkCheckpointData2NV;
pub const PFN_vkCmdSetEvent2KHR = ?*const fn (VkCommandBuffer, VkEvent, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdResetEvent2KHR = ?*const fn (VkCommandBuffer, VkEvent, VkPipelineStageFlags2) callconv(.C) void;
pub const PFN_vkCmdWaitEvents2KHR = ?*const fn (VkCommandBuffer, u32, [*c]const VkEvent, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdPipelineBarrier2KHR = ?*const fn (VkCommandBuffer, [*c]const VkDependencyInfo) callconv(.C) void;
pub const PFN_vkCmdWriteTimestamp2KHR = ?*const fn (VkCommandBuffer, VkPipelineStageFlags2, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkQueueSubmit2KHR = ?*const fn (VkQueue, u32, [*c]const VkSubmitInfo2, VkFence) callconv(.C) VkResult;
pub const PFN_vkCmdWriteBufferMarker2AMD = ?*const fn (VkCommandBuffer, VkPipelineStageFlags2, VkBuffer, VkDeviceSize, u32) callconv(.C) void;
pub const PFN_vkGetQueueCheckpointData2NV = ?*const fn (VkQueue, [*c]u32, [*c]VkCheckpointData2NV) callconv(.C) void;
pub extern fn vkCmdSetEvent2KHR(commandBuffer: VkCommandBuffer, event: VkEvent, pDependencyInfo: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdResetEvent2KHR(commandBuffer: VkCommandBuffer, event: VkEvent, stageMask: VkPipelineStageFlags2) void;
pub extern fn vkCmdWaitEvents2KHR(commandBuffer: VkCommandBuffer, eventCount: u32, pEvents: [*c]const VkEvent, pDependencyInfos: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdPipelineBarrier2KHR(commandBuffer: VkCommandBuffer, pDependencyInfo: [*c]const VkDependencyInfo) void;
pub extern fn vkCmdWriteTimestamp2KHR(commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2, queryPool: VkQueryPool, query: u32) void;
pub extern fn vkQueueSubmit2KHR(queue: VkQueue, submitCount: u32, pSubmits: [*c]const VkSubmitInfo2, fence: VkFence) VkResult;
pub extern fn vkCmdWriteBufferMarker2AMD(commandBuffer: VkCommandBuffer, stage: VkPipelineStageFlags2, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: u32) void;
pub extern fn vkGetQueueCheckpointData2NV(queue: VkQueue, pCheckpointDataCount: [*c]u32, pCheckpointData: [*c]VkCheckpointData2NV) void;
pub const struct_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    fragmentShaderBarycentric: VkBool32,
};
pub const VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR = struct_VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;
pub const struct_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    triStripVertexOrderIndependentOfProvokingVertex: VkBool32,
};
pub const VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR = struct_VkPhysicalDeviceFragmentShaderBarycentricPropertiesKHR;
pub const struct_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderSubgroupUniformControlFlow: VkBool32,
};
pub const VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR = struct_VkPhysicalDeviceShaderSubgroupUniformControlFlowFeaturesKHR;
pub const VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeaturesKHR = VkPhysicalDeviceZeroInitializeWorkgroupMemoryFeatures;
pub const struct_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    workgroupMemoryExplicitLayout: VkBool32,
    workgroupMemoryExplicitLayoutScalarBlockLayout: VkBool32,
    workgroupMemoryExplicitLayout8BitAccess: VkBool32,
    workgroupMemoryExplicitLayout16BitAccess: VkBool32,
};
pub const VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR = struct_VkPhysicalDeviceWorkgroupMemoryExplicitLayoutFeaturesKHR;
pub const VkCopyBufferInfo2KHR = VkCopyBufferInfo2;
pub const VkCopyImageInfo2KHR = VkCopyImageInfo2;
pub const VkCopyBufferToImageInfo2KHR = VkCopyBufferToImageInfo2;
pub const VkCopyImageToBufferInfo2KHR = VkCopyImageToBufferInfo2;
pub const VkBlitImageInfo2KHR = VkBlitImageInfo2;
pub const VkResolveImageInfo2KHR = VkResolveImageInfo2;
pub const VkBufferCopy2KHR = VkBufferCopy2;
pub const VkImageCopy2KHR = VkImageCopy2;
pub const VkImageBlit2KHR = VkImageBlit2;
pub const VkBufferImageCopy2KHR = VkBufferImageCopy2;
pub const VkImageResolve2KHR = VkImageResolve2;
pub const PFN_vkCmdCopyBuffer2KHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyBufferInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyImage2KHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyImageInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyBufferToImage2KHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyBufferToImageInfo2) callconv(.C) void;
pub const PFN_vkCmdCopyImageToBuffer2KHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyImageToBufferInfo2) callconv(.C) void;
pub const PFN_vkCmdBlitImage2KHR = ?*const fn (VkCommandBuffer, [*c]const VkBlitImageInfo2) callconv(.C) void;
pub const PFN_vkCmdResolveImage2KHR = ?*const fn (VkCommandBuffer, [*c]const VkResolveImageInfo2) callconv(.C) void;
pub extern fn vkCmdCopyBuffer2KHR(commandBuffer: VkCommandBuffer, pCopyBufferInfo: [*c]const VkCopyBufferInfo2) void;
pub extern fn vkCmdCopyImage2KHR(commandBuffer: VkCommandBuffer, pCopyImageInfo: [*c]const VkCopyImageInfo2) void;
pub extern fn vkCmdCopyBufferToImage2KHR(commandBuffer: VkCommandBuffer, pCopyBufferToImageInfo: [*c]const VkCopyBufferToImageInfo2) void;
pub extern fn vkCmdCopyImageToBuffer2KHR(commandBuffer: VkCommandBuffer, pCopyImageToBufferInfo: [*c]const VkCopyImageToBufferInfo2) void;
pub extern fn vkCmdBlitImage2KHR(commandBuffer: VkCommandBuffer, pBlitImageInfo: [*c]const VkBlitImageInfo2) void;
pub extern fn vkCmdResolveImage2KHR(commandBuffer: VkCommandBuffer, pResolveImageInfo: [*c]const VkResolveImageInfo2) void;
pub const VkFormatFeatureFlags2KHR = VkFormatFeatureFlags2;
pub const VkFormatFeatureFlagBits2KHR = VkFormatFeatureFlagBits2;
pub const VkFormatProperties3KHR = VkFormatProperties3;
pub const struct_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    rayTracingMaintenance1: VkBool32,
    rayTracingPipelineTraceRaysIndirect2: VkBool32,
};
pub const VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR = struct_VkPhysicalDeviceRayTracingMaintenance1FeaturesKHR;
pub const struct_VkTraceRaysIndirectCommand2KHR = extern struct {
    raygenShaderRecordAddress: VkDeviceAddress,
    raygenShaderRecordSize: VkDeviceSize,
    missShaderBindingTableAddress: VkDeviceAddress,
    missShaderBindingTableSize: VkDeviceSize,
    missShaderBindingTableStride: VkDeviceSize,
    hitShaderBindingTableAddress: VkDeviceAddress,
    hitShaderBindingTableSize: VkDeviceSize,
    hitShaderBindingTableStride: VkDeviceSize,
    callableShaderBindingTableAddress: VkDeviceAddress,
    callableShaderBindingTableSize: VkDeviceSize,
    callableShaderBindingTableStride: VkDeviceSize,
    width: u32,
    height: u32,
    depth: u32,
};
pub const VkTraceRaysIndirectCommand2KHR = struct_VkTraceRaysIndirectCommand2KHR;
pub const PFN_vkCmdTraceRaysIndirect2KHR = ?*const fn (VkCommandBuffer, VkDeviceAddress) callconv(.C) void;
pub extern fn vkCmdTraceRaysIndirect2KHR(commandBuffer: VkCommandBuffer, indirectDeviceAddress: VkDeviceAddress) void;
pub const VkPhysicalDeviceMaintenance4FeaturesKHR = VkPhysicalDeviceMaintenance4Features;
pub const VkPhysicalDeviceMaintenance4PropertiesKHR = VkPhysicalDeviceMaintenance4Properties;
pub const VkDeviceBufferMemoryRequirementsKHR = VkDeviceBufferMemoryRequirements;
pub const VkDeviceImageMemoryRequirementsKHR = VkDeviceImageMemoryRequirements;
pub const PFN_vkGetDeviceBufferMemoryRequirementsKHR = ?*const fn (VkDevice, [*c]const VkDeviceBufferMemoryRequirements, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetDeviceImageMemoryRequirementsKHR = ?*const fn (VkDevice, [*c]const VkDeviceImageMemoryRequirements, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkGetDeviceImageSparseMemoryRequirementsKHR = ?*const fn (VkDevice, [*c]const VkDeviceImageMemoryRequirements, [*c]u32, [*c]VkSparseImageMemoryRequirements2) callconv(.C) void;
pub extern fn vkGetDeviceBufferMemoryRequirementsKHR(device: VkDevice, pInfo: [*c]const VkDeviceBufferMemoryRequirements, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetDeviceImageMemoryRequirementsKHR(device: VkDevice, pInfo: [*c]const VkDeviceImageMemoryRequirements, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkGetDeviceImageSparseMemoryRequirementsKHR(device: VkDevice, pInfo: [*c]const VkDeviceImageMemoryRequirements, pSparseMemoryRequirementCount: [*c]u32, pSparseMemoryRequirements: [*c]VkSparseImageMemoryRequirements2) void;
pub const struct_VkDebugReportCallbackEXT_T = opaque {};
pub const VkDebugReportCallbackEXT = ?*struct_VkDebugReportCallbackEXT_T;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_UNKNOWN_EXT: c_int = 0;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_INSTANCE_EXT: c_int = 1;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PHYSICAL_DEVICE_EXT: c_int = 2;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_EXT: c_int = 3;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_QUEUE_EXT: c_int = 4;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SEMAPHORE_EXT: c_int = 5;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_BUFFER_EXT: c_int = 6;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_FENCE_EXT: c_int = 7;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEVICE_MEMORY_EXT: c_int = 8;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_EXT: c_int = 9;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_EXT: c_int = 10;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_EVENT_EXT: c_int = 11;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_QUERY_POOL_EXT: c_int = 12;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_VIEW_EXT: c_int = 13;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_IMAGE_VIEW_EXT: c_int = 14;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SHADER_MODULE_EXT: c_int = 15;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_CACHE_EXT: c_int = 16;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_LAYOUT_EXT: c_int = 17;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_RENDER_PASS_EXT: c_int = 18;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_PIPELINE_EXT: c_int = 19;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_LAYOUT_EXT: c_int = 20;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_EXT: c_int = 21;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_POOL_EXT: c_int = 22;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_SET_EXT: c_int = 23;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_FRAMEBUFFER_EXT: c_int = 24;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_COMMAND_POOL_EXT: c_int = 25;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SURFACE_KHR_EXT: c_int = 26;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SWAPCHAIN_KHR_EXT: c_int = 27;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_CALLBACK_EXT_EXT: c_int = 28;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_KHR_EXT: c_int = 29;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DISPLAY_MODE_KHR_EXT: c_int = 30;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT_EXT: c_int = 33;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_EXT: c_int = 1000156000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_EXT: c_int = 1000085000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_CU_MODULE_NVX_EXT: c_int = 1000029000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_CU_FUNCTION_NVX_EXT: c_int = 1000029001;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_KHR_EXT: c_int = 1000150000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_ACCELERATION_STRUCTURE_NV_EXT: c_int = 1000165000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_BUFFER_COLLECTION_FUCHSIA_EXT: c_int = 1000366000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DEBUG_REPORT_EXT: c_int = 28;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_VALIDATION_CACHE_EXT: c_int = 33;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_DESCRIPTOR_UPDATE_TEMPLATE_KHR_EXT: c_int = 1000085000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_SAMPLER_YCBCR_CONVERSION_KHR_EXT: c_int = 1000156000;
pub const VK_DEBUG_REPORT_OBJECT_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDebugReportObjectTypeEXT = c_uint;
pub const VkDebugReportObjectTypeEXT = enum_VkDebugReportObjectTypeEXT;
pub const VK_DEBUG_REPORT_INFORMATION_BIT_EXT: c_int = 1;
pub const VK_DEBUG_REPORT_WARNING_BIT_EXT: c_int = 2;
pub const VK_DEBUG_REPORT_PERFORMANCE_WARNING_BIT_EXT: c_int = 4;
pub const VK_DEBUG_REPORT_ERROR_BIT_EXT: c_int = 8;
pub const VK_DEBUG_REPORT_DEBUG_BIT_EXT: c_int = 16;
pub const VK_DEBUG_REPORT_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDebugReportFlagBitsEXT = c_uint;
pub const VkDebugReportFlagBitsEXT = enum_VkDebugReportFlagBitsEXT;
pub const VkDebugReportFlagsEXT = VkFlags;
pub const PFN_vkDebugReportCallbackEXT = ?*const fn (VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, u64, usize, i32, [*c]const u8, [*c]const u8, ?*anyopaque) callconv(.C) VkBool32;
pub const struct_VkDebugReportCallbackCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkDebugReportFlagsEXT,
    pfnCallback: PFN_vkDebugReportCallbackEXT,
    pUserData: ?*anyopaque,
};
pub const VkDebugReportCallbackCreateInfoEXT = struct_VkDebugReportCallbackCreateInfoEXT;
pub const PFN_vkCreateDebugReportCallbackEXT = ?*const fn (VkInstance, [*c]const VkDebugReportCallbackCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkDebugReportCallbackEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyDebugReportCallbackEXT = ?*const fn (VkInstance, VkDebugReportCallbackEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkDebugReportMessageEXT = ?*const fn (VkInstance, VkDebugReportFlagsEXT, VkDebugReportObjectTypeEXT, u64, usize, i32, [*c]const u8, [*c]const u8) callconv(.C) void;
pub extern fn vkCreateDebugReportCallbackEXT(instance: VkInstance, pCreateInfo: [*c]const VkDebugReportCallbackCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pCallback: [*c]VkDebugReportCallbackEXT) VkResult;
pub extern fn vkDestroyDebugReportCallbackEXT(instance: VkInstance, callback: VkDebugReportCallbackEXT, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkDebugReportMessageEXT(instance: VkInstance, flags: VkDebugReportFlagsEXT, objectType: VkDebugReportObjectTypeEXT, object: u64, location: usize, messageCode: i32, pLayerPrefix: [*c]const u8, pMessage: [*c]const u8) void;
pub const VK_RASTERIZATION_ORDER_STRICT_AMD: c_int = 0;
pub const VK_RASTERIZATION_ORDER_RELAXED_AMD: c_int = 1;
pub const VK_RASTERIZATION_ORDER_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkRasterizationOrderAMD = c_uint;
pub const VkRasterizationOrderAMD = enum_VkRasterizationOrderAMD;
pub const struct_VkPipelineRasterizationStateRasterizationOrderAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    rasterizationOrder: VkRasterizationOrderAMD,
};
pub const VkPipelineRasterizationStateRasterizationOrderAMD = struct_VkPipelineRasterizationStateRasterizationOrderAMD;
pub const struct_VkDebugMarkerObjectNameInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    objectType: VkDebugReportObjectTypeEXT,
    object: u64,
    pObjectName: [*c]const u8,
};
pub const VkDebugMarkerObjectNameInfoEXT = struct_VkDebugMarkerObjectNameInfoEXT;
pub const struct_VkDebugMarkerObjectTagInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    objectType: VkDebugReportObjectTypeEXT,
    object: u64,
    tagName: u64,
    tagSize: usize,
    pTag: ?*const anyopaque,
};
pub const VkDebugMarkerObjectTagInfoEXT = struct_VkDebugMarkerObjectTagInfoEXT;
pub const struct_VkDebugMarkerMarkerInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    pMarkerName: [*c]const u8,
    color: [4]f32,
};
pub const VkDebugMarkerMarkerInfoEXT = struct_VkDebugMarkerMarkerInfoEXT;
pub const PFN_vkDebugMarkerSetObjectTagEXT = ?*const fn (VkDevice, [*c]const VkDebugMarkerObjectTagInfoEXT) callconv(.C) VkResult;
pub const PFN_vkDebugMarkerSetObjectNameEXT = ?*const fn (VkDevice, [*c]const VkDebugMarkerObjectNameInfoEXT) callconv(.C) VkResult;
pub const PFN_vkCmdDebugMarkerBeginEXT = ?*const fn (VkCommandBuffer, [*c]const VkDebugMarkerMarkerInfoEXT) callconv(.C) void;
pub const PFN_vkCmdDebugMarkerEndEXT = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdDebugMarkerInsertEXT = ?*const fn (VkCommandBuffer, [*c]const VkDebugMarkerMarkerInfoEXT) callconv(.C) void;
pub extern fn vkDebugMarkerSetObjectTagEXT(device: VkDevice, pTagInfo: [*c]const VkDebugMarkerObjectTagInfoEXT) VkResult;
pub extern fn vkDebugMarkerSetObjectNameEXT(device: VkDevice, pNameInfo: [*c]const VkDebugMarkerObjectNameInfoEXT) VkResult;
pub extern fn vkCmdDebugMarkerBeginEXT(commandBuffer: VkCommandBuffer, pMarkerInfo: [*c]const VkDebugMarkerMarkerInfoEXT) void;
pub extern fn vkCmdDebugMarkerEndEXT(commandBuffer: VkCommandBuffer) void;
pub extern fn vkCmdDebugMarkerInsertEXT(commandBuffer: VkCommandBuffer, pMarkerInfo: [*c]const VkDebugMarkerMarkerInfoEXT) void;
pub const struct_VkDedicatedAllocationImageCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    dedicatedAllocation: VkBool32,
};
pub const VkDedicatedAllocationImageCreateInfoNV = struct_VkDedicatedAllocationImageCreateInfoNV;
pub const struct_VkDedicatedAllocationBufferCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    dedicatedAllocation: VkBool32,
};
pub const VkDedicatedAllocationBufferCreateInfoNV = struct_VkDedicatedAllocationBufferCreateInfoNV;
pub const struct_VkDedicatedAllocationMemoryAllocateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    image: VkImage,
    buffer: VkBuffer,
};
pub const VkDedicatedAllocationMemoryAllocateInfoNV = struct_VkDedicatedAllocationMemoryAllocateInfoNV;
pub const VkPipelineRasterizationStateStreamCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceTransformFeedbackFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    transformFeedback: VkBool32,
    geometryStreams: VkBool32,
};
pub const VkPhysicalDeviceTransformFeedbackFeaturesEXT = struct_VkPhysicalDeviceTransformFeedbackFeaturesEXT;
pub const struct_VkPhysicalDeviceTransformFeedbackPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxTransformFeedbackStreams: u32,
    maxTransformFeedbackBuffers: u32,
    maxTransformFeedbackBufferSize: VkDeviceSize,
    maxTransformFeedbackStreamDataSize: u32,
    maxTransformFeedbackBufferDataSize: u32,
    maxTransformFeedbackBufferDataStride: u32,
    transformFeedbackQueries: VkBool32,
    transformFeedbackStreamsLinesTriangles: VkBool32,
    transformFeedbackRasterizationStreamSelect: VkBool32,
    transformFeedbackDraw: VkBool32,
};
pub const VkPhysicalDeviceTransformFeedbackPropertiesEXT = struct_VkPhysicalDeviceTransformFeedbackPropertiesEXT;
pub const struct_VkPipelineRasterizationStateStreamCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineRasterizationStateStreamCreateFlagsEXT,
    rasterizationStream: u32,
};
pub const VkPipelineRasterizationStateStreamCreateInfoEXT = struct_VkPipelineRasterizationStateStreamCreateInfoEXT;
pub const PFN_vkCmdBindTransformFeedbackBuffersEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdBeginTransformFeedbackEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdEndTransformFeedbackEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdBeginQueryIndexedEXT = ?*const fn (VkCommandBuffer, VkQueryPool, u32, VkQueryControlFlags, u32) callconv(.C) void;
pub const PFN_vkCmdEndQueryIndexedEXT = ?*const fn (VkCommandBuffer, VkQueryPool, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndirectByteCountEXT = ?*const fn (VkCommandBuffer, u32, u32, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdBindTransformFeedbackBuffersEXT(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const VkBuffer, pOffsets: [*c]const VkDeviceSize, pSizes: [*c]const VkDeviceSize) void;
pub extern fn vkCmdBeginTransformFeedbackEXT(commandBuffer: VkCommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: [*c]const VkBuffer, pCounterBufferOffsets: [*c]const VkDeviceSize) void;
pub extern fn vkCmdEndTransformFeedbackEXT(commandBuffer: VkCommandBuffer, firstCounterBuffer: u32, counterBufferCount: u32, pCounterBuffers: [*c]const VkBuffer, pCounterBufferOffsets: [*c]const VkDeviceSize) void;
pub extern fn vkCmdBeginQueryIndexedEXT(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, flags: VkQueryControlFlags, index: u32) void;
pub extern fn vkCmdEndQueryIndexedEXT(commandBuffer: VkCommandBuffer, queryPool: VkQueryPool, query: u32, index: u32) void;
pub extern fn vkCmdDrawIndirectByteCountEXT(commandBuffer: VkCommandBuffer, instanceCount: u32, firstInstance: u32, counterBuffer: VkBuffer, counterBufferOffset: VkDeviceSize, counterOffset: u32, vertexStride: u32) void;
pub const struct_VkCuModuleNVX_T = opaque {};
pub const VkCuModuleNVX = ?*struct_VkCuModuleNVX_T;
pub const struct_VkCuFunctionNVX_T = opaque {};
pub const VkCuFunctionNVX = ?*struct_VkCuFunctionNVX_T;
pub const struct_VkCuModuleCreateInfoNVX = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    dataSize: usize,
    pData: ?*const anyopaque,
};
pub const VkCuModuleCreateInfoNVX = struct_VkCuModuleCreateInfoNVX;
pub const struct_VkCuFunctionCreateInfoNVX = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    module: VkCuModuleNVX,
    pName: [*c]const u8,
};
pub const VkCuFunctionCreateInfoNVX = struct_VkCuFunctionCreateInfoNVX;
pub const struct_VkCuLaunchInfoNVX = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    function: VkCuFunctionNVX,
    gridDimX: u32,
    gridDimY: u32,
    gridDimZ: u32,
    blockDimX: u32,
    blockDimY: u32,
    blockDimZ: u32,
    sharedMemBytes: u32,
    paramCount: usize,
    pParams: [*c]const ?*const anyopaque,
    extraCount: usize,
    pExtras: [*c]const ?*const anyopaque,
};
pub const VkCuLaunchInfoNVX = struct_VkCuLaunchInfoNVX;
pub const PFN_vkCreateCuModuleNVX = ?*const fn (VkDevice, [*c]const VkCuModuleCreateInfoNVX, [*c]const VkAllocationCallbacks, [*c]VkCuModuleNVX) callconv(.C) VkResult;
pub const PFN_vkCreateCuFunctionNVX = ?*const fn (VkDevice, [*c]const VkCuFunctionCreateInfoNVX, [*c]const VkAllocationCallbacks, [*c]VkCuFunctionNVX) callconv(.C) VkResult;
pub const PFN_vkDestroyCuModuleNVX = ?*const fn (VkDevice, VkCuModuleNVX, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkDestroyCuFunctionNVX = ?*const fn (VkDevice, VkCuFunctionNVX, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdCuLaunchKernelNVX = ?*const fn (VkCommandBuffer, [*c]const VkCuLaunchInfoNVX) callconv(.C) void;
pub extern fn vkCreateCuModuleNVX(device: VkDevice, pCreateInfo: [*c]const VkCuModuleCreateInfoNVX, pAllocator: [*c]const VkAllocationCallbacks, pModule: [*c]VkCuModuleNVX) VkResult;
pub extern fn vkCreateCuFunctionNVX(device: VkDevice, pCreateInfo: [*c]const VkCuFunctionCreateInfoNVX, pAllocator: [*c]const VkAllocationCallbacks, pFunction: [*c]VkCuFunctionNVX) VkResult;
pub extern fn vkDestroyCuModuleNVX(device: VkDevice, module: VkCuModuleNVX, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkDestroyCuFunctionNVX(device: VkDevice, function: VkCuFunctionNVX, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCmdCuLaunchKernelNVX(commandBuffer: VkCommandBuffer, pLaunchInfo: [*c]const VkCuLaunchInfoNVX) void;
pub const struct_VkImageViewHandleInfoNVX = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    imageView: VkImageView,
    descriptorType: VkDescriptorType,
    sampler: VkSampler,
};
pub const VkImageViewHandleInfoNVX = struct_VkImageViewHandleInfoNVX;
pub const struct_VkImageViewAddressPropertiesNVX = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    deviceAddress: VkDeviceAddress,
    size: VkDeviceSize,
};
pub const VkImageViewAddressPropertiesNVX = struct_VkImageViewAddressPropertiesNVX;
pub const PFN_vkGetImageViewHandleNVX = ?*const fn (VkDevice, [*c]const VkImageViewHandleInfoNVX) callconv(.C) u32;
pub const PFN_vkGetImageViewAddressNVX = ?*const fn (VkDevice, VkImageView, [*c]VkImageViewAddressPropertiesNVX) callconv(.C) VkResult;
pub extern fn vkGetImageViewHandleNVX(device: VkDevice, pInfo: [*c]const VkImageViewHandleInfoNVX) u32;
pub extern fn vkGetImageViewAddressNVX(device: VkDevice, imageView: VkImageView, pProperties: [*c]VkImageViewAddressPropertiesNVX) VkResult;
pub const PFN_vkCmdDrawIndirectCountAMD = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawIndexedIndirectCountAMD = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawIndirectCountAMD(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawIndexedIndirectCountAMD(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub const struct_VkTextureLODGatherFormatPropertiesAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    supportsTextureGatherLODBiasAMD: VkBool32,
};
pub const VkTextureLODGatherFormatPropertiesAMD = struct_VkTextureLODGatherFormatPropertiesAMD;
pub const VK_SHADER_INFO_TYPE_STATISTICS_AMD: c_int = 0;
pub const VK_SHADER_INFO_TYPE_BINARY_AMD: c_int = 1;
pub const VK_SHADER_INFO_TYPE_DISASSEMBLY_AMD: c_int = 2;
pub const VK_SHADER_INFO_TYPE_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkShaderInfoTypeAMD = c_uint;
pub const VkShaderInfoTypeAMD = enum_VkShaderInfoTypeAMD;
pub const struct_VkShaderResourceUsageAMD = extern struct {
    numUsedVgprs: u32,
    numUsedSgprs: u32,
    ldsSizePerLocalWorkGroup: u32,
    ldsUsageSizeInBytes: usize,
    scratchMemUsageInBytes: usize,
};
pub const VkShaderResourceUsageAMD = struct_VkShaderResourceUsageAMD;
pub const struct_VkShaderStatisticsInfoAMD = extern struct {
    shaderStageMask: VkShaderStageFlags,
    resourceUsage: VkShaderResourceUsageAMD,
    numPhysicalVgprs: u32,
    numPhysicalSgprs: u32,
    numAvailableVgprs: u32,
    numAvailableSgprs: u32,
    computeWorkGroupSize: [3]u32,
};
pub const VkShaderStatisticsInfoAMD = struct_VkShaderStatisticsInfoAMD;
pub const PFN_vkGetShaderInfoAMD = ?*const fn (VkDevice, VkPipeline, VkShaderStageFlagBits, VkShaderInfoTypeAMD, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub extern fn vkGetShaderInfoAMD(device: VkDevice, pipeline: VkPipeline, shaderStage: VkShaderStageFlagBits, infoType: VkShaderInfoTypeAMD, pInfoSize: [*c]usize, pInfo: ?*anyopaque) VkResult;
pub const struct_VkPhysicalDeviceCornerSampledImageFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    cornerSampledImage: VkBool32,
};
pub const VkPhysicalDeviceCornerSampledImageFeaturesNV = struct_VkPhysicalDeviceCornerSampledImageFeaturesNV;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_BIT_NV: c_int = 1;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_OPAQUE_WIN32_KMT_BIT_NV: c_int = 2;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_BIT_NV: c_int = 4;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_D3D11_IMAGE_KMT_BIT_NV: c_int = 8;
pub const VK_EXTERNAL_MEMORY_HANDLE_TYPE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkExternalMemoryHandleTypeFlagBitsNV = c_uint;
pub const VkExternalMemoryHandleTypeFlagBitsNV = enum_VkExternalMemoryHandleTypeFlagBitsNV;
pub const VkExternalMemoryHandleTypeFlagsNV = VkFlags;
pub const VK_EXTERNAL_MEMORY_FEATURE_DEDICATED_ONLY_BIT_NV: c_int = 1;
pub const VK_EXTERNAL_MEMORY_FEATURE_EXPORTABLE_BIT_NV: c_int = 2;
pub const VK_EXTERNAL_MEMORY_FEATURE_IMPORTABLE_BIT_NV: c_int = 4;
pub const VK_EXTERNAL_MEMORY_FEATURE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkExternalMemoryFeatureFlagBitsNV = c_uint;
pub const VkExternalMemoryFeatureFlagBitsNV = enum_VkExternalMemoryFeatureFlagBitsNV;
pub const VkExternalMemoryFeatureFlagsNV = VkFlags;
pub const struct_VkExternalImageFormatPropertiesNV = extern struct {
    imageFormatProperties: VkImageFormatProperties,
    externalMemoryFeatures: VkExternalMemoryFeatureFlagsNV,
    exportFromImportedHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
    compatibleHandleTypes: VkExternalMemoryHandleTypeFlagsNV,
};
pub const VkExternalImageFormatPropertiesNV = struct_VkExternalImageFormatPropertiesNV;
pub const PFN_vkGetPhysicalDeviceExternalImageFormatPropertiesNV = ?*const fn (VkPhysicalDevice, VkFormat, VkImageType, VkImageTiling, VkImageUsageFlags, VkImageCreateFlags, VkExternalMemoryHandleTypeFlagsNV, [*c]VkExternalImageFormatPropertiesNV) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceExternalImageFormatPropertiesNV(physicalDevice: VkPhysicalDevice, format: VkFormat, @"type": VkImageType, tiling: VkImageTiling, usage: VkImageUsageFlags, flags: VkImageCreateFlags, externalHandleType: VkExternalMemoryHandleTypeFlagsNV, pExternalImageFormatProperties: [*c]VkExternalImageFormatPropertiesNV) VkResult;
pub const struct_VkExternalMemoryImageCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    handleTypes: VkExternalMemoryHandleTypeFlagsNV,
};
pub const VkExternalMemoryImageCreateInfoNV = struct_VkExternalMemoryImageCreateInfoNV;
pub const struct_VkExportMemoryAllocateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    handleTypes: VkExternalMemoryHandleTypeFlagsNV,
};
pub const VkExportMemoryAllocateInfoNV = struct_VkExportMemoryAllocateInfoNV;
pub const VK_VALIDATION_CHECK_ALL_EXT: c_int = 0;
pub const VK_VALIDATION_CHECK_SHADERS_EXT: c_int = 1;
pub const VK_VALIDATION_CHECK_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkValidationCheckEXT = c_uint;
pub const VkValidationCheckEXT = enum_VkValidationCheckEXT;
pub const struct_VkValidationFlagsEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    disabledValidationCheckCount: u32,
    pDisabledValidationChecks: [*c]const VkValidationCheckEXT,
};
pub const VkValidationFlagsEXT = struct_VkValidationFlagsEXT;
pub const VkPhysicalDeviceTextureCompressionASTCHDRFeaturesEXT = VkPhysicalDeviceTextureCompressionASTCHDRFeatures;
pub const struct_VkImageViewASTCDecodeModeEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    decodeMode: VkFormat,
};
pub const VkImageViewASTCDecodeModeEXT = struct_VkImageViewASTCDecodeModeEXT;
pub const struct_VkPhysicalDeviceASTCDecodeFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    decodeModeSharedExponent: VkBool32,
};
pub const VkPhysicalDeviceASTCDecodeFeaturesEXT = struct_VkPhysicalDeviceASTCDecodeFeaturesEXT;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DEVICE_DEFAULT_EXT: c_int = 0;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_DISABLED_EXT: c_int = 1;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_EXT: c_int = 2;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_ROBUST_BUFFER_ACCESS_2_EXT: c_int = 3;
pub const VK_PIPELINE_ROBUSTNESS_BUFFER_BEHAVIOR_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkPipelineRobustnessBufferBehaviorEXT = c_uint;
pub const VkPipelineRobustnessBufferBehaviorEXT = enum_VkPipelineRobustnessBufferBehaviorEXT;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DEVICE_DEFAULT_EXT: c_int = 0;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_DISABLED_EXT: c_int = 1;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_EXT: c_int = 2;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_ROBUST_IMAGE_ACCESS_2_EXT: c_int = 3;
pub const VK_PIPELINE_ROBUSTNESS_IMAGE_BEHAVIOR_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkPipelineRobustnessImageBehaviorEXT = c_uint;
pub const VkPipelineRobustnessImageBehaviorEXT = enum_VkPipelineRobustnessImageBehaviorEXT;
pub const struct_VkPhysicalDevicePipelineRobustnessFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    pipelineRobustness: VkBool32,
};
pub const VkPhysicalDevicePipelineRobustnessFeaturesEXT = struct_VkPhysicalDevicePipelineRobustnessFeaturesEXT;
pub const struct_VkPhysicalDevicePipelineRobustnessPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    defaultRobustnessStorageBuffers: VkPipelineRobustnessBufferBehaviorEXT,
    defaultRobustnessUniformBuffers: VkPipelineRobustnessBufferBehaviorEXT,
    defaultRobustnessVertexInputs: VkPipelineRobustnessBufferBehaviorEXT,
    defaultRobustnessImages: VkPipelineRobustnessImageBehaviorEXT,
};
pub const VkPhysicalDevicePipelineRobustnessPropertiesEXT = struct_VkPhysicalDevicePipelineRobustnessPropertiesEXT;
pub const struct_VkPipelineRobustnessCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    storageBuffers: VkPipelineRobustnessBufferBehaviorEXT,
    uniformBuffers: VkPipelineRobustnessBufferBehaviorEXT,
    vertexInputs: VkPipelineRobustnessBufferBehaviorEXT,
    images: VkPipelineRobustnessImageBehaviorEXT,
};
pub const VkPipelineRobustnessCreateInfoEXT = struct_VkPipelineRobustnessCreateInfoEXT;
pub const VK_CONDITIONAL_RENDERING_INVERTED_BIT_EXT: c_int = 1;
pub const VK_CONDITIONAL_RENDERING_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkConditionalRenderingFlagBitsEXT = c_uint;
pub const VkConditionalRenderingFlagBitsEXT = enum_VkConditionalRenderingFlagBitsEXT;
pub const VkConditionalRenderingFlagsEXT = VkFlags;
pub const struct_VkConditionalRenderingBeginInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    buffer: VkBuffer,
    offset: VkDeviceSize,
    flags: VkConditionalRenderingFlagsEXT,
};
pub const VkConditionalRenderingBeginInfoEXT = struct_VkConditionalRenderingBeginInfoEXT;
pub const struct_VkPhysicalDeviceConditionalRenderingFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    conditionalRendering: VkBool32,
    inheritedConditionalRendering: VkBool32,
};
pub const VkPhysicalDeviceConditionalRenderingFeaturesEXT = struct_VkPhysicalDeviceConditionalRenderingFeaturesEXT;
pub const struct_VkCommandBufferInheritanceConditionalRenderingInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    conditionalRenderingEnable: VkBool32,
};
pub const VkCommandBufferInheritanceConditionalRenderingInfoEXT = struct_VkCommandBufferInheritanceConditionalRenderingInfoEXT;
pub const PFN_vkCmdBeginConditionalRenderingEXT = ?*const fn (VkCommandBuffer, [*c]const VkConditionalRenderingBeginInfoEXT) callconv(.C) void;
pub const PFN_vkCmdEndConditionalRenderingEXT = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub extern fn vkCmdBeginConditionalRenderingEXT(commandBuffer: VkCommandBuffer, pConditionalRenderingBegin: [*c]const VkConditionalRenderingBeginInfoEXT) void;
pub extern fn vkCmdEndConditionalRenderingEXT(commandBuffer: VkCommandBuffer) void;
pub const struct_VkViewportWScalingNV = extern struct {
    xcoeff: f32,
    ycoeff: f32,
};
pub const VkViewportWScalingNV = struct_VkViewportWScalingNV;
pub const struct_VkPipelineViewportWScalingStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    viewportWScalingEnable: VkBool32,
    viewportCount: u32,
    pViewportWScalings: [*c]const VkViewportWScalingNV,
};
pub const VkPipelineViewportWScalingStateCreateInfoNV = struct_VkPipelineViewportWScalingStateCreateInfoNV;
pub const PFN_vkCmdSetViewportWScalingNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkViewportWScalingNV) callconv(.C) void;
pub extern fn vkCmdSetViewportWScalingNV(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pViewportWScalings: [*c]const VkViewportWScalingNV) void;
pub const PFN_vkReleaseDisplayEXT = ?*const fn (VkPhysicalDevice, VkDisplayKHR) callconv(.C) VkResult;
pub extern fn vkReleaseDisplayEXT(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR) VkResult;
pub const VK_SURFACE_COUNTER_VBLANK_BIT_EXT: c_int = 1;
pub const VK_SURFACE_COUNTER_VBLANK_EXT: c_int = 1;
pub const VK_SURFACE_COUNTER_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkSurfaceCounterFlagBitsEXT = c_uint;
pub const VkSurfaceCounterFlagBitsEXT = enum_VkSurfaceCounterFlagBitsEXT;
pub const VkSurfaceCounterFlagsEXT = VkFlags;
pub const struct_VkSurfaceCapabilities2EXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    minImageCount: u32,
    maxImageCount: u32,
    currentExtent: VkExtent2D,
    minImageExtent: VkExtent2D,
    maxImageExtent: VkExtent2D,
    maxImageArrayLayers: u32,
    supportedTransforms: VkSurfaceTransformFlagsKHR,
    currentTransform: VkSurfaceTransformFlagBitsKHR,
    supportedCompositeAlpha: VkCompositeAlphaFlagsKHR,
    supportedUsageFlags: VkImageUsageFlags,
    supportedSurfaceCounters: VkSurfaceCounterFlagsEXT,
};
pub const VkSurfaceCapabilities2EXT = struct_VkSurfaceCapabilities2EXT;
pub const PFN_vkGetPhysicalDeviceSurfaceCapabilities2EXT = ?*const fn (VkPhysicalDevice, VkSurfaceKHR, [*c]VkSurfaceCapabilities2EXT) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceSurfaceCapabilities2EXT(physicalDevice: VkPhysicalDevice, surface: VkSurfaceKHR, pSurfaceCapabilities: [*c]VkSurfaceCapabilities2EXT) VkResult;
pub const VK_DISPLAY_POWER_STATE_OFF_EXT: c_int = 0;
pub const VK_DISPLAY_POWER_STATE_SUSPEND_EXT: c_int = 1;
pub const VK_DISPLAY_POWER_STATE_ON_EXT: c_int = 2;
pub const VK_DISPLAY_POWER_STATE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDisplayPowerStateEXT = c_uint;
pub const VkDisplayPowerStateEXT = enum_VkDisplayPowerStateEXT;
pub const VK_DEVICE_EVENT_TYPE_DISPLAY_HOTPLUG_EXT: c_int = 0;
pub const VK_DEVICE_EVENT_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceEventTypeEXT = c_uint;
pub const VkDeviceEventTypeEXT = enum_VkDeviceEventTypeEXT;
pub const VK_DISPLAY_EVENT_TYPE_FIRST_PIXEL_OUT_EXT: c_int = 0;
pub const VK_DISPLAY_EVENT_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDisplayEventTypeEXT = c_uint;
pub const VkDisplayEventTypeEXT = enum_VkDisplayEventTypeEXT;
pub const struct_VkDisplayPowerInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    powerState: VkDisplayPowerStateEXT,
};
pub const VkDisplayPowerInfoEXT = struct_VkDisplayPowerInfoEXT;
pub const struct_VkDeviceEventInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    deviceEvent: VkDeviceEventTypeEXT,
};
pub const VkDeviceEventInfoEXT = struct_VkDeviceEventInfoEXT;
pub const struct_VkDisplayEventInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    displayEvent: VkDisplayEventTypeEXT,
};
pub const VkDisplayEventInfoEXT = struct_VkDisplayEventInfoEXT;
pub const struct_VkSwapchainCounterCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    surfaceCounters: VkSurfaceCounterFlagsEXT,
};
pub const VkSwapchainCounterCreateInfoEXT = struct_VkSwapchainCounterCreateInfoEXT;
pub const PFN_vkDisplayPowerControlEXT = ?*const fn (VkDevice, VkDisplayKHR, [*c]const VkDisplayPowerInfoEXT) callconv(.C) VkResult;
pub const PFN_vkRegisterDeviceEventEXT = ?*const fn (VkDevice, [*c]const VkDeviceEventInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkFence) callconv(.C) VkResult;
pub const PFN_vkRegisterDisplayEventEXT = ?*const fn (VkDevice, VkDisplayKHR, [*c]const VkDisplayEventInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkFence) callconv(.C) VkResult;
pub const PFN_vkGetSwapchainCounterEXT = ?*const fn (VkDevice, VkSwapchainKHR, VkSurfaceCounterFlagBitsEXT, [*c]u64) callconv(.C) VkResult;
pub extern fn vkDisplayPowerControlEXT(device: VkDevice, display: VkDisplayKHR, pDisplayPowerInfo: [*c]const VkDisplayPowerInfoEXT) VkResult;
pub extern fn vkRegisterDeviceEventEXT(device: VkDevice, pDeviceEventInfo: [*c]const VkDeviceEventInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pFence: [*c]VkFence) VkResult;
pub extern fn vkRegisterDisplayEventEXT(device: VkDevice, display: VkDisplayKHR, pDisplayEventInfo: [*c]const VkDisplayEventInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pFence: [*c]VkFence) VkResult;
pub extern fn vkGetSwapchainCounterEXT(device: VkDevice, swapchain: VkSwapchainKHR, counter: VkSurfaceCounterFlagBitsEXT, pCounterValue: [*c]u64) VkResult;
pub const struct_VkRefreshCycleDurationGOOGLE = extern struct {
    refreshDuration: u64,
};
pub const VkRefreshCycleDurationGOOGLE = struct_VkRefreshCycleDurationGOOGLE;
pub const struct_VkPastPresentationTimingGOOGLE = extern struct {
    presentID: u32,
    desiredPresentTime: u64,
    actualPresentTime: u64,
    earliestPresentTime: u64,
    presentMargin: u64,
};
pub const VkPastPresentationTimingGOOGLE = struct_VkPastPresentationTimingGOOGLE;
pub const struct_VkPresentTimeGOOGLE = extern struct {
    presentID: u32,
    desiredPresentTime: u64,
};
pub const VkPresentTimeGOOGLE = struct_VkPresentTimeGOOGLE;
pub const struct_VkPresentTimesInfoGOOGLE = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    swapchainCount: u32,
    pTimes: [*c]const VkPresentTimeGOOGLE,
};
pub const VkPresentTimesInfoGOOGLE = struct_VkPresentTimesInfoGOOGLE;
pub const PFN_vkGetRefreshCycleDurationGOOGLE = ?*const fn (VkDevice, VkSwapchainKHR, [*c]VkRefreshCycleDurationGOOGLE) callconv(.C) VkResult;
pub const PFN_vkGetPastPresentationTimingGOOGLE = ?*const fn (VkDevice, VkSwapchainKHR, [*c]u32, [*c]VkPastPresentationTimingGOOGLE) callconv(.C) VkResult;
pub extern fn vkGetRefreshCycleDurationGOOGLE(device: VkDevice, swapchain: VkSwapchainKHR, pDisplayTimingProperties: [*c]VkRefreshCycleDurationGOOGLE) VkResult;
pub extern fn vkGetPastPresentationTimingGOOGLE(device: VkDevice, swapchain: VkSwapchainKHR, pPresentationTimingCount: [*c]u32, pPresentationTimings: [*c]VkPastPresentationTimingGOOGLE) VkResult;
pub const struct_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    perViewPositionAllComponents: VkBool32,
};
pub const VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX = struct_VkPhysicalDeviceMultiviewPerViewAttributesPropertiesNVX;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_X_NV: c_int = 0;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_X_NV: c_int = 1;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Y_NV: c_int = 2;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Y_NV: c_int = 3;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_Z_NV: c_int = 4;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_Z_NV: c_int = 5;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_POSITIVE_W_NV: c_int = 6;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_NEGATIVE_W_NV: c_int = 7;
pub const VK_VIEWPORT_COORDINATE_SWIZZLE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkViewportCoordinateSwizzleNV = c_uint;
pub const VkViewportCoordinateSwizzleNV = enum_VkViewportCoordinateSwizzleNV;
pub const VkPipelineViewportSwizzleStateCreateFlagsNV = VkFlags;
pub const struct_VkViewportSwizzleNV = extern struct {
    x: VkViewportCoordinateSwizzleNV,
    y: VkViewportCoordinateSwizzleNV,
    z: VkViewportCoordinateSwizzleNV,
    w: VkViewportCoordinateSwizzleNV,
};
pub const VkViewportSwizzleNV = struct_VkViewportSwizzleNV;
pub const struct_VkPipelineViewportSwizzleStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineViewportSwizzleStateCreateFlagsNV,
    viewportCount: u32,
    pViewportSwizzles: [*c]const VkViewportSwizzleNV,
};
pub const VkPipelineViewportSwizzleStateCreateInfoNV = struct_VkPipelineViewportSwizzleStateCreateInfoNV;
pub const VK_DISCARD_RECTANGLE_MODE_INCLUSIVE_EXT: c_int = 0;
pub const VK_DISCARD_RECTANGLE_MODE_EXCLUSIVE_EXT: c_int = 1;
pub const VK_DISCARD_RECTANGLE_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDiscardRectangleModeEXT = c_uint;
pub const VkDiscardRectangleModeEXT = enum_VkDiscardRectangleModeEXT;
pub const VkPipelineDiscardRectangleStateCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceDiscardRectanglePropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxDiscardRectangles: u32,
};
pub const VkPhysicalDeviceDiscardRectanglePropertiesEXT = struct_VkPhysicalDeviceDiscardRectanglePropertiesEXT;
pub const struct_VkPipelineDiscardRectangleStateCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineDiscardRectangleStateCreateFlagsEXT,
    discardRectangleMode: VkDiscardRectangleModeEXT,
    discardRectangleCount: u32,
    pDiscardRectangles: [*c]const VkRect2D,
};
pub const VkPipelineDiscardRectangleStateCreateInfoEXT = struct_VkPipelineDiscardRectangleStateCreateInfoEXT;
pub const PFN_vkCmdSetDiscardRectangleEXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkRect2D) callconv(.C) void;
pub extern fn vkCmdSetDiscardRectangleEXT(commandBuffer: VkCommandBuffer, firstDiscardRectangle: u32, discardRectangleCount: u32, pDiscardRectangles: [*c]const VkRect2D) void;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_DISABLED_EXT: c_int = 0;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_OVERESTIMATE_EXT: c_int = 1;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_UNDERESTIMATE_EXT: c_int = 2;
pub const VK_CONSERVATIVE_RASTERIZATION_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkConservativeRasterizationModeEXT = c_uint;
pub const VkConservativeRasterizationModeEXT = enum_VkConservativeRasterizationModeEXT;
pub const VkPipelineRasterizationConservativeStateCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceConservativeRasterizationPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    primitiveOverestimationSize: f32,
    maxExtraPrimitiveOverestimationSize: f32,
    extraPrimitiveOverestimationSizeGranularity: f32,
    primitiveUnderestimation: VkBool32,
    conservativePointAndLineRasterization: VkBool32,
    degenerateTrianglesRasterized: VkBool32,
    degenerateLinesRasterized: VkBool32,
    fullyCoveredFragmentShaderInputVariable: VkBool32,
    conservativeRasterizationPostDepthCoverage: VkBool32,
};
pub const VkPhysicalDeviceConservativeRasterizationPropertiesEXT = struct_VkPhysicalDeviceConservativeRasterizationPropertiesEXT;
pub const struct_VkPipelineRasterizationConservativeStateCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineRasterizationConservativeStateCreateFlagsEXT,
    conservativeRasterizationMode: VkConservativeRasterizationModeEXT,
    extraPrimitiveOverestimationSize: f32,
};
pub const VkPipelineRasterizationConservativeStateCreateInfoEXT = struct_VkPipelineRasterizationConservativeStateCreateInfoEXT;
pub const VkPipelineRasterizationDepthClipStateCreateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceDepthClipEnableFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    depthClipEnable: VkBool32,
};
pub const VkPhysicalDeviceDepthClipEnableFeaturesEXT = struct_VkPhysicalDeviceDepthClipEnableFeaturesEXT;
pub const struct_VkPipelineRasterizationDepthClipStateCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineRasterizationDepthClipStateCreateFlagsEXT,
    depthClipEnable: VkBool32,
};
pub const VkPipelineRasterizationDepthClipStateCreateInfoEXT = struct_VkPipelineRasterizationDepthClipStateCreateInfoEXT;
pub const struct_VkXYColorEXT = extern struct {
    x: f32,
    y: f32,
};
pub const VkXYColorEXT = struct_VkXYColorEXT;
pub const struct_VkHdrMetadataEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    displayPrimaryRed: VkXYColorEXT,
    displayPrimaryGreen: VkXYColorEXT,
    displayPrimaryBlue: VkXYColorEXT,
    whitePoint: VkXYColorEXT,
    maxLuminance: f32,
    minLuminance: f32,
    maxContentLightLevel: f32,
    maxFrameAverageLightLevel: f32,
};
pub const VkHdrMetadataEXT = struct_VkHdrMetadataEXT;
pub const PFN_vkSetHdrMetadataEXT = ?*const fn (VkDevice, u32, [*c]const VkSwapchainKHR, [*c]const VkHdrMetadataEXT) callconv(.C) void;
pub extern fn vkSetHdrMetadataEXT(device: VkDevice, swapchainCount: u32, pSwapchains: [*c]const VkSwapchainKHR, pMetadata: [*c]const VkHdrMetadataEXT) void;
pub const struct_VkDebugUtilsMessengerEXT_T = opaque {};
pub const VkDebugUtilsMessengerEXT = ?*struct_VkDebugUtilsMessengerEXT_T;
pub const VkDebugUtilsMessengerCallbackDataFlagsEXT = VkFlags;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_VERBOSE_BIT_EXT: c_int = 1;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_INFO_BIT_EXT: c_int = 16;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_WARNING_BIT_EXT: c_int = 256;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_ERROR_BIT_EXT: c_int = 4096;
pub const VK_DEBUG_UTILS_MESSAGE_SEVERITY_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDebugUtilsMessageSeverityFlagBitsEXT = c_uint;
pub const VkDebugUtilsMessageSeverityFlagBitsEXT = enum_VkDebugUtilsMessageSeverityFlagBitsEXT;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_GENERAL_BIT_EXT: c_int = 1;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_VALIDATION_BIT_EXT: c_int = 2;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_PERFORMANCE_BIT_EXT: c_int = 4;
pub const VK_DEBUG_UTILS_MESSAGE_TYPE_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDebugUtilsMessageTypeFlagBitsEXT = c_uint;
pub const VkDebugUtilsMessageTypeFlagBitsEXT = enum_VkDebugUtilsMessageTypeFlagBitsEXT;
pub const VkDebugUtilsMessageTypeFlagsEXT = VkFlags;
pub const VkDebugUtilsMessageSeverityFlagsEXT = VkFlags;
pub const VkDebugUtilsMessengerCreateFlagsEXT = VkFlags;
pub const struct_VkDebugUtilsLabelEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    pLabelName: [*c]const u8,
    color: [4]f32,
};
pub const VkDebugUtilsLabelEXT = struct_VkDebugUtilsLabelEXT;
pub const struct_VkDebugUtilsObjectNameInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    objectType: VkObjectType,
    objectHandle: u64,
    pObjectName: [*c]const u8,
};
pub const VkDebugUtilsObjectNameInfoEXT = struct_VkDebugUtilsObjectNameInfoEXT;
pub const struct_VkDebugUtilsMessengerCallbackDataEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkDebugUtilsMessengerCallbackDataFlagsEXT,
    pMessageIdName: [*c]const u8,
    messageIdNumber: i32,
    pMessage: [*c]const u8,
    queueLabelCount: u32,
    pQueueLabels: [*c]const VkDebugUtilsLabelEXT,
    cmdBufLabelCount: u32,
    pCmdBufLabels: [*c]const VkDebugUtilsLabelEXT,
    objectCount: u32,
    pObjects: [*c]const VkDebugUtilsObjectNameInfoEXT,
};
pub const VkDebugUtilsMessengerCallbackDataEXT = struct_VkDebugUtilsMessengerCallbackDataEXT;
pub const PFN_vkDebugUtilsMessengerCallbackEXT = ?*const fn (VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, [*c]const VkDebugUtilsMessengerCallbackDataEXT, ?*anyopaque) callconv(.C) VkBool32;
pub const struct_VkDebugUtilsMessengerCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkDebugUtilsMessengerCreateFlagsEXT,
    messageSeverity: VkDebugUtilsMessageSeverityFlagsEXT,
    messageType: VkDebugUtilsMessageTypeFlagsEXT,
    pfnUserCallback: PFN_vkDebugUtilsMessengerCallbackEXT,
    pUserData: ?*anyopaque,
};
pub const VkDebugUtilsMessengerCreateInfoEXT = struct_VkDebugUtilsMessengerCreateInfoEXT;
pub const struct_VkDebugUtilsObjectTagInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    objectType: VkObjectType,
    objectHandle: u64,
    tagName: u64,
    tagSize: usize,
    pTag: ?*const anyopaque,
};
pub const VkDebugUtilsObjectTagInfoEXT = struct_VkDebugUtilsObjectTagInfoEXT;
pub const PFN_vkSetDebugUtilsObjectNameEXT = ?*const fn (VkDevice, [*c]const VkDebugUtilsObjectNameInfoEXT) callconv(.C) VkResult;
pub const PFN_vkSetDebugUtilsObjectTagEXT = ?*const fn (VkDevice, [*c]const VkDebugUtilsObjectTagInfoEXT) callconv(.C) VkResult;
pub const PFN_vkQueueBeginDebugUtilsLabelEXT = ?*const fn (VkQueue, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkQueueEndDebugUtilsLabelEXT = ?*const fn (VkQueue) callconv(.C) void;
pub const PFN_vkQueueInsertDebugUtilsLabelEXT = ?*const fn (VkQueue, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCmdBeginDebugUtilsLabelEXT = ?*const fn (VkCommandBuffer, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCmdEndDebugUtilsLabelEXT = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub const PFN_vkCmdInsertDebugUtilsLabelEXT = ?*const fn (VkCommandBuffer, [*c]const VkDebugUtilsLabelEXT) callconv(.C) void;
pub const PFN_vkCreateDebugUtilsMessengerEXT = ?*const fn (VkInstance, [*c]const VkDebugUtilsMessengerCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkDebugUtilsMessengerEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyDebugUtilsMessengerEXT = ?*const fn (VkInstance, VkDebugUtilsMessengerEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkSubmitDebugUtilsMessageEXT = ?*const fn (VkInstance, VkDebugUtilsMessageSeverityFlagBitsEXT, VkDebugUtilsMessageTypeFlagsEXT, [*c]const VkDebugUtilsMessengerCallbackDataEXT) callconv(.C) void;
pub extern fn vkSetDebugUtilsObjectNameEXT(device: VkDevice, pNameInfo: [*c]const VkDebugUtilsObjectNameInfoEXT) VkResult;
pub extern fn vkSetDebugUtilsObjectTagEXT(device: VkDevice, pTagInfo: [*c]const VkDebugUtilsObjectTagInfoEXT) VkResult;
pub extern fn vkQueueBeginDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: [*c]const VkDebugUtilsLabelEXT) void;
pub extern fn vkQueueEndDebugUtilsLabelEXT(queue: VkQueue) void;
pub extern fn vkQueueInsertDebugUtilsLabelEXT(queue: VkQueue, pLabelInfo: [*c]const VkDebugUtilsLabelEXT) void;
pub extern fn vkCmdBeginDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer, pLabelInfo: [*c]const VkDebugUtilsLabelEXT) void;
pub extern fn vkCmdEndDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer) void;
pub extern fn vkCmdInsertDebugUtilsLabelEXT(commandBuffer: VkCommandBuffer, pLabelInfo: [*c]const VkDebugUtilsLabelEXT) void;
pub extern fn vkCreateDebugUtilsMessengerEXT(instance: VkInstance, pCreateInfo: [*c]const VkDebugUtilsMessengerCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pMessenger: [*c]VkDebugUtilsMessengerEXT) VkResult;
pub extern fn vkDestroyDebugUtilsMessengerEXT(instance: VkInstance, messenger: VkDebugUtilsMessengerEXT, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkSubmitDebugUtilsMessageEXT(instance: VkInstance, messageSeverity: VkDebugUtilsMessageSeverityFlagBitsEXT, messageTypes: VkDebugUtilsMessageTypeFlagsEXT, pCallbackData: [*c]const VkDebugUtilsMessengerCallbackDataEXT) void;
pub const VkSamplerReductionModeEXT = VkSamplerReductionMode;
pub const VkSamplerReductionModeCreateInfoEXT = VkSamplerReductionModeCreateInfo;
pub const VkPhysicalDeviceSamplerFilterMinmaxPropertiesEXT = VkPhysicalDeviceSamplerFilterMinmaxProperties;
pub const VkPhysicalDeviceInlineUniformBlockFeaturesEXT = VkPhysicalDeviceInlineUniformBlockFeatures;
pub const VkPhysicalDeviceInlineUniformBlockPropertiesEXT = VkPhysicalDeviceInlineUniformBlockProperties;
pub const VkWriteDescriptorSetInlineUniformBlockEXT = VkWriteDescriptorSetInlineUniformBlock;
pub const VkDescriptorPoolInlineUniformBlockCreateInfoEXT = VkDescriptorPoolInlineUniformBlockCreateInfo;
pub const struct_VkSampleLocationEXT = extern struct {
    x: f32,
    y: f32,
};
pub const VkSampleLocationEXT = struct_VkSampleLocationEXT;
pub const struct_VkSampleLocationsInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    sampleLocationsPerPixel: VkSampleCountFlagBits,
    sampleLocationGridSize: VkExtent2D,
    sampleLocationsCount: u32,
    pSampleLocations: [*c]const VkSampleLocationEXT,
};
pub const VkSampleLocationsInfoEXT = struct_VkSampleLocationsInfoEXT;
pub const struct_VkAttachmentSampleLocationsEXT = extern struct {
    attachmentIndex: u32,
    sampleLocationsInfo: VkSampleLocationsInfoEXT,
};
pub const VkAttachmentSampleLocationsEXT = struct_VkAttachmentSampleLocationsEXT;
pub const struct_VkSubpassSampleLocationsEXT = extern struct {
    subpassIndex: u32,
    sampleLocationsInfo: VkSampleLocationsInfoEXT,
};
pub const VkSubpassSampleLocationsEXT = struct_VkSubpassSampleLocationsEXT;
pub const struct_VkRenderPassSampleLocationsBeginInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    attachmentInitialSampleLocationsCount: u32,
    pAttachmentInitialSampleLocations: [*c]const VkAttachmentSampleLocationsEXT,
    postSubpassSampleLocationsCount: u32,
    pPostSubpassSampleLocations: [*c]const VkSubpassSampleLocationsEXT,
};
pub const VkRenderPassSampleLocationsBeginInfoEXT = struct_VkRenderPassSampleLocationsBeginInfoEXT;
pub const struct_VkPipelineSampleLocationsStateCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    sampleLocationsEnable: VkBool32,
    sampleLocationsInfo: VkSampleLocationsInfoEXT,
};
pub const VkPipelineSampleLocationsStateCreateInfoEXT = struct_VkPipelineSampleLocationsStateCreateInfoEXT;
pub const struct_VkPhysicalDeviceSampleLocationsPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    sampleLocationSampleCounts: VkSampleCountFlags,
    maxSampleLocationGridSize: VkExtent2D,
    sampleLocationCoordinateRange: [2]f32,
    sampleLocationSubPixelBits: u32,
    variableSampleLocations: VkBool32,
};
pub const VkPhysicalDeviceSampleLocationsPropertiesEXT = struct_VkPhysicalDeviceSampleLocationsPropertiesEXT;
pub const struct_VkMultisamplePropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxSampleLocationGridSize: VkExtent2D,
};
pub const VkMultisamplePropertiesEXT = struct_VkMultisamplePropertiesEXT;
pub const PFN_vkCmdSetSampleLocationsEXT = ?*const fn (VkCommandBuffer, [*c]const VkSampleLocationsInfoEXT) callconv(.C) void;
pub const PFN_vkGetPhysicalDeviceMultisamplePropertiesEXT = ?*const fn (VkPhysicalDevice, VkSampleCountFlagBits, [*c]VkMultisamplePropertiesEXT) callconv(.C) void;
pub extern fn vkCmdSetSampleLocationsEXT(commandBuffer: VkCommandBuffer, pSampleLocationsInfo: [*c]const VkSampleLocationsInfoEXT) void;
pub extern fn vkGetPhysicalDeviceMultisamplePropertiesEXT(physicalDevice: VkPhysicalDevice, samples: VkSampleCountFlagBits, pMultisampleProperties: [*c]VkMultisamplePropertiesEXT) void;
pub const VK_BLEND_OVERLAP_UNCORRELATED_EXT: c_int = 0;
pub const VK_BLEND_OVERLAP_DISJOINT_EXT: c_int = 1;
pub const VK_BLEND_OVERLAP_CONJOINT_EXT: c_int = 2;
pub const VK_BLEND_OVERLAP_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkBlendOverlapEXT = c_uint;
pub const VkBlendOverlapEXT = enum_VkBlendOverlapEXT;
pub const struct_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    advancedBlendCoherentOperations: VkBool32,
};
pub const VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT = struct_VkPhysicalDeviceBlendOperationAdvancedFeaturesEXT;
pub const struct_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    advancedBlendMaxColorAttachments: u32,
    advancedBlendIndependentBlend: VkBool32,
    advancedBlendNonPremultipliedSrcColor: VkBool32,
    advancedBlendNonPremultipliedDstColor: VkBool32,
    advancedBlendCorrelatedOverlap: VkBool32,
    advancedBlendAllOperations: VkBool32,
};
pub const VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT = struct_VkPhysicalDeviceBlendOperationAdvancedPropertiesEXT;
pub const struct_VkPipelineColorBlendAdvancedStateCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    srcPremultiplied: VkBool32,
    dstPremultiplied: VkBool32,
    blendOverlap: VkBlendOverlapEXT,
};
pub const VkPipelineColorBlendAdvancedStateCreateInfoEXT = struct_VkPipelineColorBlendAdvancedStateCreateInfoEXT;
pub const VkPipelineCoverageToColorStateCreateFlagsNV = VkFlags;
pub const struct_VkPipelineCoverageToColorStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineCoverageToColorStateCreateFlagsNV,
    coverageToColorEnable: VkBool32,
    coverageToColorLocation: u32,
};
pub const VkPipelineCoverageToColorStateCreateInfoNV = struct_VkPipelineCoverageToColorStateCreateInfoNV;
pub const VK_COVERAGE_MODULATION_MODE_NONE_NV: c_int = 0;
pub const VK_COVERAGE_MODULATION_MODE_RGB_NV: c_int = 1;
pub const VK_COVERAGE_MODULATION_MODE_ALPHA_NV: c_int = 2;
pub const VK_COVERAGE_MODULATION_MODE_RGBA_NV: c_int = 3;
pub const VK_COVERAGE_MODULATION_MODE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkCoverageModulationModeNV = c_uint;
pub const VkCoverageModulationModeNV = enum_VkCoverageModulationModeNV;
pub const VkPipelineCoverageModulationStateCreateFlagsNV = VkFlags;
pub const struct_VkPipelineCoverageModulationStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineCoverageModulationStateCreateFlagsNV,
    coverageModulationMode: VkCoverageModulationModeNV,
    coverageModulationTableEnable: VkBool32,
    coverageModulationTableCount: u32,
    pCoverageModulationTable: [*c]const f32,
};
pub const VkPipelineCoverageModulationStateCreateInfoNV = struct_VkPipelineCoverageModulationStateCreateInfoNV;
pub const struct_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderSMCount: u32,
    shaderWarpsPerSM: u32,
};
pub const VkPhysicalDeviceShaderSMBuiltinsPropertiesNV = struct_VkPhysicalDeviceShaderSMBuiltinsPropertiesNV;
pub const struct_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderSMBuiltins: VkBool32,
};
pub const VkPhysicalDeviceShaderSMBuiltinsFeaturesNV = struct_VkPhysicalDeviceShaderSMBuiltinsFeaturesNV;
pub const struct_VkDrmFormatModifierPropertiesEXT = extern struct {
    drmFormatModifier: u64,
    drmFormatModifierPlaneCount: u32,
    drmFormatModifierTilingFeatures: VkFormatFeatureFlags,
};
pub const VkDrmFormatModifierPropertiesEXT = struct_VkDrmFormatModifierPropertiesEXT;
pub const struct_VkDrmFormatModifierPropertiesListEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    drmFormatModifierCount: u32,
    pDrmFormatModifierProperties: [*c]VkDrmFormatModifierPropertiesEXT,
};
pub const VkDrmFormatModifierPropertiesListEXT = struct_VkDrmFormatModifierPropertiesListEXT;
pub const struct_VkPhysicalDeviceImageDrmFormatModifierInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    drmFormatModifier: u64,
    sharingMode: VkSharingMode,
    queueFamilyIndexCount: u32,
    pQueueFamilyIndices: [*c]const u32,
};
pub const VkPhysicalDeviceImageDrmFormatModifierInfoEXT = struct_VkPhysicalDeviceImageDrmFormatModifierInfoEXT;
pub const struct_VkImageDrmFormatModifierListCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    drmFormatModifierCount: u32,
    pDrmFormatModifiers: [*c]const u64,
};
pub const VkImageDrmFormatModifierListCreateInfoEXT = struct_VkImageDrmFormatModifierListCreateInfoEXT;
pub const struct_VkImageDrmFormatModifierExplicitCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    drmFormatModifier: u64,
    drmFormatModifierPlaneCount: u32,
    pPlaneLayouts: [*c]const VkSubresourceLayout,
};
pub const VkImageDrmFormatModifierExplicitCreateInfoEXT = struct_VkImageDrmFormatModifierExplicitCreateInfoEXT;
pub const struct_VkImageDrmFormatModifierPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    drmFormatModifier: u64,
};
pub const VkImageDrmFormatModifierPropertiesEXT = struct_VkImageDrmFormatModifierPropertiesEXT;
pub const struct_VkDrmFormatModifierProperties2EXT = extern struct {
    drmFormatModifier: u64,
    drmFormatModifierPlaneCount: u32,
    drmFormatModifierTilingFeatures: VkFormatFeatureFlags2,
};
pub const VkDrmFormatModifierProperties2EXT = struct_VkDrmFormatModifierProperties2EXT;
pub const struct_VkDrmFormatModifierPropertiesList2EXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    drmFormatModifierCount: u32,
    pDrmFormatModifierProperties: [*c]VkDrmFormatModifierProperties2EXT,
};
pub const VkDrmFormatModifierPropertiesList2EXT = struct_VkDrmFormatModifierPropertiesList2EXT;
pub const PFN_vkGetImageDrmFormatModifierPropertiesEXT = ?*const fn (VkDevice, VkImage, [*c]VkImageDrmFormatModifierPropertiesEXT) callconv(.C) VkResult;
pub extern fn vkGetImageDrmFormatModifierPropertiesEXT(device: VkDevice, image: VkImage, pProperties: [*c]VkImageDrmFormatModifierPropertiesEXT) VkResult;
pub const struct_VkValidationCacheEXT_T = opaque {};
pub const VkValidationCacheEXT = ?*struct_VkValidationCacheEXT_T;
pub const VK_VALIDATION_CACHE_HEADER_VERSION_ONE_EXT: c_int = 1;
pub const VK_VALIDATION_CACHE_HEADER_VERSION_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkValidationCacheHeaderVersionEXT = c_uint;
pub const VkValidationCacheHeaderVersionEXT = enum_VkValidationCacheHeaderVersionEXT;
pub const VkValidationCacheCreateFlagsEXT = VkFlags;
pub const struct_VkValidationCacheCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkValidationCacheCreateFlagsEXT,
    initialDataSize: usize,
    pInitialData: ?*const anyopaque,
};
pub const VkValidationCacheCreateInfoEXT = struct_VkValidationCacheCreateInfoEXT;
pub const struct_VkShaderModuleValidationCacheCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    validationCache: VkValidationCacheEXT,
};
pub const VkShaderModuleValidationCacheCreateInfoEXT = struct_VkShaderModuleValidationCacheCreateInfoEXT;
pub const PFN_vkCreateValidationCacheEXT = ?*const fn (VkDevice, [*c]const VkValidationCacheCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkValidationCacheEXT) callconv(.C) VkResult;
pub const PFN_vkDestroyValidationCacheEXT = ?*const fn (VkDevice, VkValidationCacheEXT, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkMergeValidationCachesEXT = ?*const fn (VkDevice, VkValidationCacheEXT, u32, [*c]const VkValidationCacheEXT) callconv(.C) VkResult;
pub const PFN_vkGetValidationCacheDataEXT = ?*const fn (VkDevice, VkValidationCacheEXT, [*c]usize, ?*anyopaque) callconv(.C) VkResult;
pub extern fn vkCreateValidationCacheEXT(device: VkDevice, pCreateInfo: [*c]const VkValidationCacheCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pValidationCache: [*c]VkValidationCacheEXT) VkResult;
pub extern fn vkDestroyValidationCacheEXT(device: VkDevice, validationCache: VkValidationCacheEXT, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkMergeValidationCachesEXT(device: VkDevice, dstCache: VkValidationCacheEXT, srcCacheCount: u32, pSrcCaches: [*c]const VkValidationCacheEXT) VkResult;
pub extern fn vkGetValidationCacheDataEXT(device: VkDevice, validationCache: VkValidationCacheEXT, pDataSize: [*c]usize, pData: ?*anyopaque) VkResult;
pub const VkDescriptorBindingFlagBitsEXT = VkDescriptorBindingFlagBits;
pub const VkDescriptorBindingFlagsEXT = VkDescriptorBindingFlags;
pub const VkDescriptorSetLayoutBindingFlagsCreateInfoEXT = VkDescriptorSetLayoutBindingFlagsCreateInfo;
pub const VkPhysicalDeviceDescriptorIndexingFeaturesEXT = VkPhysicalDeviceDescriptorIndexingFeatures;
pub const VkPhysicalDeviceDescriptorIndexingPropertiesEXT = VkPhysicalDeviceDescriptorIndexingProperties;
pub const VkDescriptorSetVariableDescriptorCountAllocateInfoEXT = VkDescriptorSetVariableDescriptorCountAllocateInfo;
pub const VkDescriptorSetVariableDescriptorCountLayoutSupportEXT = VkDescriptorSetVariableDescriptorCountLayoutSupport;
pub const VK_SHADING_RATE_PALETTE_ENTRY_NO_INVOCATIONS_NV: c_int = 0;
pub const VK_SHADING_RATE_PALETTE_ENTRY_16_INVOCATIONS_PER_PIXEL_NV: c_int = 1;
pub const VK_SHADING_RATE_PALETTE_ENTRY_8_INVOCATIONS_PER_PIXEL_NV: c_int = 2;
pub const VK_SHADING_RATE_PALETTE_ENTRY_4_INVOCATIONS_PER_PIXEL_NV: c_int = 3;
pub const VK_SHADING_RATE_PALETTE_ENTRY_2_INVOCATIONS_PER_PIXEL_NV: c_int = 4;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_PIXEL_NV: c_int = 5;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X1_PIXELS_NV: c_int = 6;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_1X2_PIXELS_NV: c_int = 7;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X2_PIXELS_NV: c_int = 8;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X2_PIXELS_NV: c_int = 9;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_2X4_PIXELS_NV: c_int = 10;
pub const VK_SHADING_RATE_PALETTE_ENTRY_1_INVOCATION_PER_4X4_PIXELS_NV: c_int = 11;
pub const VK_SHADING_RATE_PALETTE_ENTRY_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkShadingRatePaletteEntryNV = c_uint;
pub const VkShadingRatePaletteEntryNV = enum_VkShadingRatePaletteEntryNV;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_DEFAULT_NV: c_int = 0;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_CUSTOM_NV: c_int = 1;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_PIXEL_MAJOR_NV: c_int = 2;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_SAMPLE_MAJOR_NV: c_int = 3;
pub const VK_COARSE_SAMPLE_ORDER_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkCoarseSampleOrderTypeNV = c_uint;
pub const VkCoarseSampleOrderTypeNV = enum_VkCoarseSampleOrderTypeNV;
pub const struct_VkShadingRatePaletteNV = extern struct {
    shadingRatePaletteEntryCount: u32,
    pShadingRatePaletteEntries: [*c]const VkShadingRatePaletteEntryNV,
};
pub const VkShadingRatePaletteNV = struct_VkShadingRatePaletteNV;
pub const struct_VkPipelineViewportShadingRateImageStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    shadingRateImageEnable: VkBool32,
    viewportCount: u32,
    pShadingRatePalettes: [*c]const VkShadingRatePaletteNV,
};
pub const VkPipelineViewportShadingRateImageStateCreateInfoNV = struct_VkPipelineViewportShadingRateImageStateCreateInfoNV;
pub const struct_VkPhysicalDeviceShadingRateImageFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shadingRateImage: VkBool32,
    shadingRateCoarseSampleOrder: VkBool32,
};
pub const VkPhysicalDeviceShadingRateImageFeaturesNV = struct_VkPhysicalDeviceShadingRateImageFeaturesNV;
pub const struct_VkPhysicalDeviceShadingRateImagePropertiesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shadingRateTexelSize: VkExtent2D,
    shadingRatePaletteSize: u32,
    shadingRateMaxCoarseSamples: u32,
};
pub const VkPhysicalDeviceShadingRateImagePropertiesNV = struct_VkPhysicalDeviceShadingRateImagePropertiesNV;
pub const struct_VkCoarseSampleLocationNV = extern struct {
    pixelX: u32,
    pixelY: u32,
    sample: u32,
};
pub const VkCoarseSampleLocationNV = struct_VkCoarseSampleLocationNV;
pub const struct_VkCoarseSampleOrderCustomNV = extern struct {
    shadingRate: VkShadingRatePaletteEntryNV,
    sampleCount: u32,
    sampleLocationCount: u32,
    pSampleLocations: [*c]const VkCoarseSampleLocationNV,
};
pub const VkCoarseSampleOrderCustomNV = struct_VkCoarseSampleOrderCustomNV;
pub const struct_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    sampleOrderType: VkCoarseSampleOrderTypeNV,
    customSampleOrderCount: u32,
    pCustomSampleOrders: [*c]const VkCoarseSampleOrderCustomNV,
};
pub const VkPipelineViewportCoarseSampleOrderStateCreateInfoNV = struct_VkPipelineViewportCoarseSampleOrderStateCreateInfoNV;
pub const PFN_vkCmdBindShadingRateImageNV = ?*const fn (VkCommandBuffer, VkImageView, VkImageLayout) callconv(.C) void;
pub const PFN_vkCmdSetViewportShadingRatePaletteNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkShadingRatePaletteNV) callconv(.C) void;
pub const PFN_vkCmdSetCoarseSampleOrderNV = ?*const fn (VkCommandBuffer, VkCoarseSampleOrderTypeNV, u32, [*c]const VkCoarseSampleOrderCustomNV) callconv(.C) void;
pub extern fn vkCmdBindShadingRateImageNV(commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout) void;
pub extern fn vkCmdSetViewportShadingRatePaletteNV(commandBuffer: VkCommandBuffer, firstViewport: u32, viewportCount: u32, pShadingRatePalettes: [*c]const VkShadingRatePaletteNV) void;
pub extern fn vkCmdSetCoarseSampleOrderNV(commandBuffer: VkCommandBuffer, sampleOrderType: VkCoarseSampleOrderTypeNV, customSampleOrderCount: u32, pCustomSampleOrders: [*c]const VkCoarseSampleOrderCustomNV) void;
pub const struct_VkAccelerationStructureNV_T = opaque {};
pub const VkAccelerationStructureNV = ?*struct_VkAccelerationStructureNV_T;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_KHR: c_int = 0;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_KHR: c_int = 1;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_KHR: c_int = 2;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_GENERAL_NV: c_int = 0;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_TRIANGLES_HIT_GROUP_NV: c_int = 1;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_PROCEDURAL_HIT_GROUP_NV: c_int = 2;
pub const VK_RAY_TRACING_SHADER_GROUP_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkRayTracingShaderGroupTypeKHR = c_uint;
pub const VkRayTracingShaderGroupTypeKHR = enum_VkRayTracingShaderGroupTypeKHR;
pub const VkRayTracingShaderGroupTypeNV = VkRayTracingShaderGroupTypeKHR;
pub const VK_GEOMETRY_TYPE_TRIANGLES_KHR: c_int = 0;
pub const VK_GEOMETRY_TYPE_AABBS_KHR: c_int = 1;
pub const VK_GEOMETRY_TYPE_INSTANCES_KHR: c_int = 2;
pub const VK_GEOMETRY_TYPE_TRIANGLES_NV: c_int = 0;
pub const VK_GEOMETRY_TYPE_AABBS_NV: c_int = 1;
pub const VK_GEOMETRY_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkGeometryTypeKHR = c_uint;
pub const VkGeometryTypeKHR = enum_VkGeometryTypeKHR;
pub const VkGeometryTypeNV = VkGeometryTypeKHR;
pub const VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_KHR: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_KHR: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_TYPE_GENERIC_KHR: c_int = 2;
pub const VK_ACCELERATION_STRUCTURE_TYPE_TOP_LEVEL_NV: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_TYPE_BOTTOM_LEVEL_NV: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAccelerationStructureTypeKHR = c_uint;
pub const VkAccelerationStructureTypeKHR = enum_VkAccelerationStructureTypeKHR;
pub const VkAccelerationStructureTypeNV = VkAccelerationStructureTypeKHR;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_KHR: c_int = 0;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_KHR: c_int = 1;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_SERIALIZE_KHR: c_int = 2;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_DESERIALIZE_KHR: c_int = 3;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_CLONE_NV: c_int = 0;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_COMPACT_NV: c_int = 1;
pub const VK_COPY_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkCopyAccelerationStructureModeKHR = c_uint;
pub const VkCopyAccelerationStructureModeKHR = enum_VkCopyAccelerationStructureModeKHR;
pub const VkCopyAccelerationStructureModeNV = VkCopyAccelerationStructureModeKHR;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_OBJECT_NV: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_BUILD_SCRATCH_NV: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_UPDATE_SCRATCH_NV: c_int = 2;
pub const VK_ACCELERATION_STRUCTURE_MEMORY_REQUIREMENTS_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkAccelerationStructureMemoryRequirementsTypeNV = c_uint;
pub const VkAccelerationStructureMemoryRequirementsTypeNV = enum_VkAccelerationStructureMemoryRequirementsTypeNV;
pub const VK_GEOMETRY_OPAQUE_BIT_KHR: c_int = 1;
pub const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_KHR: c_int = 2;
pub const VK_GEOMETRY_OPAQUE_BIT_NV: c_int = 1;
pub const VK_GEOMETRY_NO_DUPLICATE_ANY_HIT_INVOCATION_BIT_NV: c_int = 2;
pub const VK_GEOMETRY_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkGeometryFlagBitsKHR = c_uint;
pub const VkGeometryFlagBitsKHR = enum_VkGeometryFlagBitsKHR;
pub const VkGeometryFlagsKHR = VkFlags;
pub const VkGeometryFlagsNV = VkGeometryFlagsKHR;
pub const VkGeometryFlagBitsNV = VkGeometryFlagBitsKHR;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FACING_CULL_DISABLE_BIT_KHR: c_int = 1;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FLIP_FACING_BIT_KHR: c_int = 2;
pub const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_KHR: c_int = 4;
pub const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_KHR: c_int = 8;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_KHR: c_int = 2;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_CULL_DISABLE_BIT_NV: c_int = 1;
pub const VK_GEOMETRY_INSTANCE_TRIANGLE_FRONT_COUNTERCLOCKWISE_BIT_NV: c_int = 2;
pub const VK_GEOMETRY_INSTANCE_FORCE_OPAQUE_BIT_NV: c_int = 4;
pub const VK_GEOMETRY_INSTANCE_FORCE_NO_OPAQUE_BIT_NV: c_int = 8;
pub const VK_GEOMETRY_INSTANCE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkGeometryInstanceFlagBitsKHR = c_uint;
pub const VkGeometryInstanceFlagBitsKHR = enum_VkGeometryInstanceFlagBitsKHR;
pub const VkGeometryInstanceFlagsKHR = VkFlags;
pub const VkGeometryInstanceFlagsNV = VkGeometryInstanceFlagsKHR;
pub const VkGeometryInstanceFlagBitsNV = VkGeometryInstanceFlagBitsKHR;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_KHR: c_int = 1;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_KHR: c_int = 2;
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_KHR: c_int = 4;
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_KHR: c_int = 8;
pub const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_KHR: c_int = 16;
pub const VK_BUILD_ACCELERATION_STRUCTURE_MOTION_BIT_NV: c_int = 32;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_UPDATE_BIT_NV: c_int = 1;
pub const VK_BUILD_ACCELERATION_STRUCTURE_ALLOW_COMPACTION_BIT_NV: c_int = 2;
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_TRACE_BIT_NV: c_int = 4;
pub const VK_BUILD_ACCELERATION_STRUCTURE_PREFER_FAST_BUILD_BIT_NV: c_int = 8;
pub const VK_BUILD_ACCELERATION_STRUCTURE_LOW_MEMORY_BIT_NV: c_int = 16;
pub const VK_BUILD_ACCELERATION_STRUCTURE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkBuildAccelerationStructureFlagBitsKHR = c_uint;
pub const VkBuildAccelerationStructureFlagBitsKHR = enum_VkBuildAccelerationStructureFlagBitsKHR;
pub const VkBuildAccelerationStructureFlagsKHR = VkFlags;
pub const VkBuildAccelerationStructureFlagsNV = VkBuildAccelerationStructureFlagsKHR;
pub const VkBuildAccelerationStructureFlagBitsNV = VkBuildAccelerationStructureFlagBitsKHR;
pub const struct_VkRayTracingShaderGroupCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    type: VkRayTracingShaderGroupTypeKHR,
    generalShader: u32,
    closestHitShader: u32,
    anyHitShader: u32,
    intersectionShader: u32,
};
pub const VkRayTracingShaderGroupCreateInfoNV = struct_VkRayTracingShaderGroupCreateInfoNV;
pub const struct_VkRayTracingPipelineCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineCreateFlags,
    stageCount: u32,
    pStages: [*c]const VkPipelineShaderStageCreateInfo,
    groupCount: u32,
    pGroups: [*c]const VkRayTracingShaderGroupCreateInfoNV,
    maxRecursionDepth: u32,
    layout: VkPipelineLayout,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
};
pub const VkRayTracingPipelineCreateInfoNV = struct_VkRayTracingPipelineCreateInfoNV;
pub const struct_VkGeometryTrianglesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    vertexData: VkBuffer,
    vertexOffset: VkDeviceSize,
    vertexCount: u32,
    vertexStride: VkDeviceSize,
    vertexFormat: VkFormat,
    indexData: VkBuffer,
    indexOffset: VkDeviceSize,
    indexCount: u32,
    indexType: VkIndexType,
    transformData: VkBuffer,
    transformOffset: VkDeviceSize,
};
pub const VkGeometryTrianglesNV = struct_VkGeometryTrianglesNV;
pub const struct_VkGeometryAABBNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    aabbData: VkBuffer,
    numAABBs: u32,
    stride: u32,
    offset: VkDeviceSize,
};
pub const VkGeometryAABBNV = struct_VkGeometryAABBNV;
pub const struct_VkGeometryDataNV = extern struct {
    triangles: VkGeometryTrianglesNV,
    aabbs: VkGeometryAABBNV,
};
pub const VkGeometryDataNV = struct_VkGeometryDataNV;
pub const struct_VkGeometryNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    geometryType: VkGeometryTypeKHR,
    geometry: VkGeometryDataNV,
    flags: VkGeometryFlagsKHR,
};
pub const VkGeometryNV = struct_VkGeometryNV;
pub const struct_VkAccelerationStructureInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    type: VkAccelerationStructureTypeNV,
    flags: VkBuildAccelerationStructureFlagsNV,
    instanceCount: u32,
    geometryCount: u32,
    pGeometries: [*c]const VkGeometryNV,
};
pub const VkAccelerationStructureInfoNV = struct_VkAccelerationStructureInfoNV;
pub const struct_VkAccelerationStructureCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    compactedSize: VkDeviceSize,
    info: VkAccelerationStructureInfoNV,
};
pub const VkAccelerationStructureCreateInfoNV = struct_VkAccelerationStructureCreateInfoNV;
pub const struct_VkBindAccelerationStructureMemoryInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    accelerationStructure: VkAccelerationStructureNV,
    memory: VkDeviceMemory,
    memoryOffset: VkDeviceSize,
    deviceIndexCount: u32,
    pDeviceIndices: [*c]const u32,
};
pub const VkBindAccelerationStructureMemoryInfoNV = struct_VkBindAccelerationStructureMemoryInfoNV;
pub const struct_VkWriteDescriptorSetAccelerationStructureNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    accelerationStructureCount: u32,
    pAccelerationStructures: [*c]const VkAccelerationStructureNV,
};
pub const VkWriteDescriptorSetAccelerationStructureNV = struct_VkWriteDescriptorSetAccelerationStructureNV;
pub const struct_VkAccelerationStructureMemoryRequirementsInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    type: VkAccelerationStructureMemoryRequirementsTypeNV,
    accelerationStructure: VkAccelerationStructureNV,
};
pub const VkAccelerationStructureMemoryRequirementsInfoNV = struct_VkAccelerationStructureMemoryRequirementsInfoNV;
pub const struct_VkPhysicalDeviceRayTracingPropertiesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderGroupHandleSize: u32,
    maxRecursionDepth: u32,
    maxShaderGroupStride: u32,
    shaderGroupBaseAlignment: u32,
    maxGeometryCount: u64,
    maxInstanceCount: u64,
    maxTriangleCount: u64,
    maxDescriptorSetAccelerationStructures: u32,
};
pub const VkPhysicalDeviceRayTracingPropertiesNV = struct_VkPhysicalDeviceRayTracingPropertiesNV;
pub const struct_VkTransformMatrixKHR = extern struct {
    matrix: [3][4]f32,
};
pub const VkTransformMatrixKHR = struct_VkTransformMatrixKHR;
pub const VkTransformMatrixNV = VkTransformMatrixKHR;
pub const struct_VkAabbPositionsKHR = extern struct {
    minX: f32,
    minY: f32,
    minZ: f32,
    maxX: f32,
    maxY: f32,
    maxZ: f32,
};
pub const VkAabbPositionsKHR = struct_VkAabbPositionsKHR;
pub const VkAabbPositionsNV = VkAabbPositionsKHR; // /Users/slimsag/Desktop/hexops/mach/gpu/libs/mach-glfw/upstream/vulkan_headers/include/vulkan/vulkan_core.h:11655:35: warning: struct demoted to opaque type - has bitfield
pub const struct_VkAccelerationStructureInstanceKHR = opaque {};
pub const VkAccelerationStructureInstanceKHR = struct_VkAccelerationStructureInstanceKHR;
pub const VkAccelerationStructureInstanceNV = VkAccelerationStructureInstanceKHR;
pub const PFN_vkCreateAccelerationStructureNV = ?*const fn (VkDevice, [*c]const VkAccelerationStructureCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkAccelerationStructureNV) callconv(.C) VkResult;
pub const PFN_vkDestroyAccelerationStructureNV = ?*const fn (VkDevice, VkAccelerationStructureNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkGetAccelerationStructureMemoryRequirementsNV = ?*const fn (VkDevice, [*c]const VkAccelerationStructureMemoryRequirementsInfoNV, [*c]VkMemoryRequirements2KHR) callconv(.C) void;
pub const PFN_vkBindAccelerationStructureMemoryNV = ?*const fn (VkDevice, u32, [*c]const VkBindAccelerationStructureMemoryInfoNV) callconv(.C) VkResult;
pub const PFN_vkCmdBuildAccelerationStructureNV = ?*const fn (VkCommandBuffer, [*c]const VkAccelerationStructureInfoNV, VkBuffer, VkDeviceSize, VkBool32, VkAccelerationStructureNV, VkAccelerationStructureNV, VkBuffer, VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdCopyAccelerationStructureNV = ?*const fn (VkCommandBuffer, VkAccelerationStructureNV, VkAccelerationStructureNV, VkCopyAccelerationStructureModeKHR) callconv(.C) void;
pub const PFN_vkCmdTraceRaysNV = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, VkBuffer, VkDeviceSize, VkDeviceSize, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCreateRayTracingPipelinesNV = ?*const fn (VkDevice, VkPipelineCache, u32, [*c]const VkRayTracingPipelineCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkGetRayTracingShaderGroupHandlesKHR = ?*const fn (VkDevice, VkPipeline, u32, u32, usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetRayTracingShaderGroupHandlesNV = ?*const fn (VkDevice, VkPipeline, u32, u32, usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkGetAccelerationStructureHandleNV = ?*const fn (VkDevice, VkAccelerationStructureNV, usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCmdWriteAccelerationStructuresPropertiesNV = ?*const fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureNV, VkQueryType, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkCompileDeferredNV = ?*const fn (VkDevice, VkPipeline, u32) callconv(.C) VkResult;
pub extern fn vkCreateAccelerationStructureNV(device: VkDevice, pCreateInfo: [*c]const VkAccelerationStructureCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pAccelerationStructure: [*c]VkAccelerationStructureNV) VkResult;
pub extern fn vkDestroyAccelerationStructureNV(device: VkDevice, accelerationStructure: VkAccelerationStructureNV, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkGetAccelerationStructureMemoryRequirementsNV(device: VkDevice, pInfo: [*c]const VkAccelerationStructureMemoryRequirementsInfoNV, pMemoryRequirements: [*c]VkMemoryRequirements2KHR) void;
pub extern fn vkBindAccelerationStructureMemoryNV(device: VkDevice, bindInfoCount: u32, pBindInfos: [*c]const VkBindAccelerationStructureMemoryInfoNV) VkResult;
pub extern fn vkCmdBuildAccelerationStructureNV(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkAccelerationStructureInfoNV, instanceData: VkBuffer, instanceOffset: VkDeviceSize, update: VkBool32, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, scratch: VkBuffer, scratchOffset: VkDeviceSize) void;
pub extern fn vkCmdCopyAccelerationStructureNV(commandBuffer: VkCommandBuffer, dst: VkAccelerationStructureNV, src: VkAccelerationStructureNV, mode: VkCopyAccelerationStructureModeKHR) void;
pub extern fn vkCmdTraceRaysNV(commandBuffer: VkCommandBuffer, raygenShaderBindingTableBuffer: VkBuffer, raygenShaderBindingOffset: VkDeviceSize, missShaderBindingTableBuffer: VkBuffer, missShaderBindingOffset: VkDeviceSize, missShaderBindingStride: VkDeviceSize, hitShaderBindingTableBuffer: VkBuffer, hitShaderBindingOffset: VkDeviceSize, hitShaderBindingStride: VkDeviceSize, callableShaderBindingTableBuffer: VkBuffer, callableShaderBindingOffset: VkDeviceSize, callableShaderBindingStride: VkDeviceSize, width: u32, height: u32, depth: u32) void;
pub extern fn vkCreateRayTracingPipelinesNV(device: VkDevice, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: [*c]const VkRayTracingPipelineCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pPipelines: [*c]VkPipeline) VkResult;
pub extern fn vkGetRayTracingShaderGroupHandlesKHR(device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: usize, pData: ?*anyopaque) VkResult;
pub extern fn vkGetRayTracingShaderGroupHandlesNV(device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: usize, pData: ?*anyopaque) VkResult;
pub extern fn vkGetAccelerationStructureHandleNV(device: VkDevice, accelerationStructure: VkAccelerationStructureNV, dataSize: usize, pData: ?*anyopaque) VkResult;
pub extern fn vkCmdWriteAccelerationStructuresPropertiesNV(commandBuffer: VkCommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: [*c]const VkAccelerationStructureNV, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: u32) void;
pub extern fn vkCompileDeferredNV(device: VkDevice, pipeline: VkPipeline, shader: u32) VkResult;
pub const struct_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    representativeFragmentTest: VkBool32,
};
pub const VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV = struct_VkPhysicalDeviceRepresentativeFragmentTestFeaturesNV;
pub const struct_VkPipelineRepresentativeFragmentTestStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    representativeFragmentTestEnable: VkBool32,
};
pub const VkPipelineRepresentativeFragmentTestStateCreateInfoNV = struct_VkPipelineRepresentativeFragmentTestStateCreateInfoNV;
pub const struct_VkPhysicalDeviceImageViewImageFormatInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    imageViewType: VkImageViewType,
};
pub const VkPhysicalDeviceImageViewImageFormatInfoEXT = struct_VkPhysicalDeviceImageViewImageFormatInfoEXT;
pub const struct_VkFilterCubicImageViewImageFormatPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    filterCubic: VkBool32,
    filterCubicMinmax: VkBool32,
};
pub const VkFilterCubicImageViewImageFormatPropertiesEXT = struct_VkFilterCubicImageViewImageFormatPropertiesEXT;
pub const VkQueueGlobalPriorityEXT = VkQueueGlobalPriorityKHR;
pub const VkDeviceQueueGlobalPriorityCreateInfoEXT = VkDeviceQueueGlobalPriorityCreateInfoKHR;
pub const struct_VkImportMemoryHostPointerInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    handleType: VkExternalMemoryHandleTypeFlagBits,
    pHostPointer: ?*anyopaque,
};
pub const VkImportMemoryHostPointerInfoEXT = struct_VkImportMemoryHostPointerInfoEXT;
pub const struct_VkMemoryHostPointerPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    memoryTypeBits: u32,
};
pub const VkMemoryHostPointerPropertiesEXT = struct_VkMemoryHostPointerPropertiesEXT;
pub const struct_VkPhysicalDeviceExternalMemoryHostPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    minImportedHostPointerAlignment: VkDeviceSize,
};
pub const VkPhysicalDeviceExternalMemoryHostPropertiesEXT = struct_VkPhysicalDeviceExternalMemoryHostPropertiesEXT;
pub const PFN_vkGetMemoryHostPointerPropertiesEXT = ?*const fn (VkDevice, VkExternalMemoryHandleTypeFlagBits, ?*const anyopaque, [*c]VkMemoryHostPointerPropertiesEXT) callconv(.C) VkResult;
pub extern fn vkGetMemoryHostPointerPropertiesEXT(device: VkDevice, handleType: VkExternalMemoryHandleTypeFlagBits, pHostPointer: ?*const anyopaque, pMemoryHostPointerProperties: [*c]VkMemoryHostPointerPropertiesEXT) VkResult;
pub const PFN_vkCmdWriteBufferMarkerAMD = ?*const fn (VkCommandBuffer, VkPipelineStageFlagBits, VkBuffer, VkDeviceSize, u32) callconv(.C) void;
pub extern fn vkCmdWriteBufferMarkerAMD(commandBuffer: VkCommandBuffer, pipelineStage: VkPipelineStageFlagBits, dstBuffer: VkBuffer, dstOffset: VkDeviceSize, marker: u32) void;
pub const VK_PIPELINE_COMPILER_CONTROL_FLAG_BITS_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkPipelineCompilerControlFlagBitsAMD = c_uint;
pub const VkPipelineCompilerControlFlagBitsAMD = enum_VkPipelineCompilerControlFlagBitsAMD;
pub const VkPipelineCompilerControlFlagsAMD = VkFlags;
pub const struct_VkPipelineCompilerControlCreateInfoAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    compilerControlFlags: VkPipelineCompilerControlFlagsAMD,
};
pub const VkPipelineCompilerControlCreateInfoAMD = struct_VkPipelineCompilerControlCreateInfoAMD;
pub const VK_TIME_DOMAIN_DEVICE_EXT: c_int = 0;
pub const VK_TIME_DOMAIN_CLOCK_MONOTONIC_EXT: c_int = 1;
pub const VK_TIME_DOMAIN_CLOCK_MONOTONIC_RAW_EXT: c_int = 2;
pub const VK_TIME_DOMAIN_QUERY_PERFORMANCE_COUNTER_EXT: c_int = 3;
pub const VK_TIME_DOMAIN_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkTimeDomainEXT = c_uint;
pub const VkTimeDomainEXT = enum_VkTimeDomainEXT;
pub const struct_VkCalibratedTimestampInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    timeDomain: VkTimeDomainEXT,
};
pub const VkCalibratedTimestampInfoEXT = struct_VkCalibratedTimestampInfoEXT;
pub const PFN_vkGetPhysicalDeviceCalibrateableTimeDomainsEXT = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkTimeDomainEXT) callconv(.C) VkResult;
pub const PFN_vkGetCalibratedTimestampsEXT = ?*const fn (VkDevice, u32, [*c]const VkCalibratedTimestampInfoEXT, [*c]u64, [*c]u64) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceCalibrateableTimeDomainsEXT(physicalDevice: VkPhysicalDevice, pTimeDomainCount: [*c]u32, pTimeDomains: [*c]VkTimeDomainEXT) VkResult;
pub extern fn vkGetCalibratedTimestampsEXT(device: VkDevice, timestampCount: u32, pTimestampInfos: [*c]const VkCalibratedTimestampInfoEXT, pTimestamps: [*c]u64, pMaxDeviation: [*c]u64) VkResult;
pub const struct_VkPhysicalDeviceShaderCorePropertiesAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderEngineCount: u32,
    shaderArraysPerEngineCount: u32,
    computeUnitsPerShaderArray: u32,
    simdPerComputeUnit: u32,
    wavefrontsPerSimd: u32,
    wavefrontSize: u32,
    sgprsPerSimd: u32,
    minSgprAllocation: u32,
    maxSgprAllocation: u32,
    sgprAllocationGranularity: u32,
    vgprsPerSimd: u32,
    minVgprAllocation: u32,
    maxVgprAllocation: u32,
    vgprAllocationGranularity: u32,
};
pub const VkPhysicalDeviceShaderCorePropertiesAMD = struct_VkPhysicalDeviceShaderCorePropertiesAMD;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_DEFAULT_AMD: c_int = 0;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_ALLOWED_AMD: c_int = 1;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_DISALLOWED_AMD: c_int = 2;
pub const VK_MEMORY_OVERALLOCATION_BEHAVIOR_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkMemoryOverallocationBehaviorAMD = c_uint;
pub const VkMemoryOverallocationBehaviorAMD = enum_VkMemoryOverallocationBehaviorAMD;
pub const struct_VkDeviceMemoryOverallocationCreateInfoAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    overallocationBehavior: VkMemoryOverallocationBehaviorAMD,
};
pub const VkDeviceMemoryOverallocationCreateInfoAMD = struct_VkDeviceMemoryOverallocationCreateInfoAMD;
pub const struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxVertexAttribDivisor: u32,
};
pub const VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT = struct_VkPhysicalDeviceVertexAttributeDivisorPropertiesEXT;
pub const struct_VkVertexInputBindingDivisorDescriptionEXT = extern struct {
    binding: u32,
    divisor: u32,
};
pub const VkVertexInputBindingDivisorDescriptionEXT = struct_VkVertexInputBindingDivisorDescriptionEXT;
pub const struct_VkPipelineVertexInputDivisorStateCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    vertexBindingDivisorCount: u32,
    pVertexBindingDivisors: [*c]const VkVertexInputBindingDivisorDescriptionEXT,
};
pub const VkPipelineVertexInputDivisorStateCreateInfoEXT = struct_VkPipelineVertexInputDivisorStateCreateInfoEXT;
pub const struct_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    vertexAttributeInstanceRateDivisor: VkBool32,
    vertexAttributeInstanceRateZeroDivisor: VkBool32,
};
pub const VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT = struct_VkPhysicalDeviceVertexAttributeDivisorFeaturesEXT;
pub const VkPipelineCreationFeedbackFlagBitsEXT = VkPipelineCreationFeedbackFlagBits;
pub const VkPipelineCreationFeedbackFlagsEXT = VkPipelineCreationFeedbackFlags;
pub const VkPipelineCreationFeedbackCreateInfoEXT = VkPipelineCreationFeedbackCreateInfo;
pub const VkPipelineCreationFeedbackEXT = VkPipelineCreationFeedback;
pub const struct_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    computeDerivativeGroupQuads: VkBool32,
    computeDerivativeGroupLinear: VkBool32,
};
pub const VkPhysicalDeviceComputeShaderDerivativesFeaturesNV = struct_VkPhysicalDeviceComputeShaderDerivativesFeaturesNV;
pub const struct_VkPhysicalDeviceMeshShaderFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    taskShader: VkBool32,
    meshShader: VkBool32,
};
pub const VkPhysicalDeviceMeshShaderFeaturesNV = struct_VkPhysicalDeviceMeshShaderFeaturesNV;
pub const struct_VkPhysicalDeviceMeshShaderPropertiesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxDrawMeshTasksCount: u32,
    maxTaskWorkGroupInvocations: u32,
    maxTaskWorkGroupSize: [3]u32,
    maxTaskTotalMemorySize: u32,
    maxTaskOutputCount: u32,
    maxMeshWorkGroupInvocations: u32,
    maxMeshWorkGroupSize: [3]u32,
    maxMeshTotalMemorySize: u32,
    maxMeshOutputVertices: u32,
    maxMeshOutputPrimitives: u32,
    maxMeshMultiviewViewCount: u32,
    meshOutputPerVertexGranularity: u32,
    meshOutputPerPrimitiveGranularity: u32,
};
pub const VkPhysicalDeviceMeshShaderPropertiesNV = struct_VkPhysicalDeviceMeshShaderPropertiesNV;
pub const struct_VkDrawMeshTasksIndirectCommandNV = extern struct {
    taskCount: u32,
    firstTask: u32,
};
pub const VkDrawMeshTasksIndirectCommandNV = struct_VkDrawMeshTasksIndirectCommandNV;
pub const PFN_vkCmdDrawMeshTasksNV = ?*const fn (VkCommandBuffer, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectNV = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMeshTasksIndirectCountNV = ?*const fn (VkCommandBuffer, VkBuffer, VkDeviceSize, VkBuffer, VkDeviceSize, u32, u32) callconv(.C) void;
pub extern fn vkCmdDrawMeshTasksNV(commandBuffer: VkCommandBuffer, taskCount: u32, firstTask: u32) void;
pub extern fn vkCmdDrawMeshTasksIndirectNV(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, drawCount: u32, stride: u32) void;
pub extern fn vkCmdDrawMeshTasksIndirectCountNV(commandBuffer: VkCommandBuffer, buffer: VkBuffer, offset: VkDeviceSize, countBuffer: VkBuffer, countBufferOffset: VkDeviceSize, maxDrawCount: u32, stride: u32) void;
pub const VkPhysicalDeviceFragmentShaderBarycentricFeaturesNV = VkPhysicalDeviceFragmentShaderBarycentricFeaturesKHR;
pub const struct_VkPhysicalDeviceShaderImageFootprintFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    imageFootprint: VkBool32,
};
pub const VkPhysicalDeviceShaderImageFootprintFeaturesNV = struct_VkPhysicalDeviceShaderImageFootprintFeaturesNV;
pub const struct_VkPipelineViewportExclusiveScissorStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    exclusiveScissorCount: u32,
    pExclusiveScissors: [*c]const VkRect2D,
};
pub const VkPipelineViewportExclusiveScissorStateCreateInfoNV = struct_VkPipelineViewportExclusiveScissorStateCreateInfoNV;
pub const struct_VkPhysicalDeviceExclusiveScissorFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    exclusiveScissor: VkBool32,
};
pub const VkPhysicalDeviceExclusiveScissorFeaturesNV = struct_VkPhysicalDeviceExclusiveScissorFeaturesNV;
pub const PFN_vkCmdSetExclusiveScissorNV = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkRect2D) callconv(.C) void;
pub extern fn vkCmdSetExclusiveScissorNV(commandBuffer: VkCommandBuffer, firstExclusiveScissor: u32, exclusiveScissorCount: u32, pExclusiveScissors: [*c]const VkRect2D) void;
pub const struct_VkQueueFamilyCheckpointPropertiesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    checkpointExecutionStageMask: VkPipelineStageFlags,
};
pub const VkQueueFamilyCheckpointPropertiesNV = struct_VkQueueFamilyCheckpointPropertiesNV;
pub const struct_VkCheckpointDataNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    stage: VkPipelineStageFlagBits,
    pCheckpointMarker: ?*anyopaque,
};
pub const VkCheckpointDataNV = struct_VkCheckpointDataNV;
pub const PFN_vkCmdSetCheckpointNV = ?*const fn (VkCommandBuffer, ?*const anyopaque) callconv(.C) void;
pub const PFN_vkGetQueueCheckpointDataNV = ?*const fn (VkQueue, [*c]u32, [*c]VkCheckpointDataNV) callconv(.C) void;
pub extern fn vkCmdSetCheckpointNV(commandBuffer: VkCommandBuffer, pCheckpointMarker: ?*const anyopaque) void;
pub extern fn vkGetQueueCheckpointDataNV(queue: VkQueue, pCheckpointDataCount: [*c]u32, pCheckpointData: [*c]VkCheckpointDataNV) void;
pub const struct_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderIntegerFunctions2: VkBool32,
};
pub const VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL = struct_VkPhysicalDeviceShaderIntegerFunctions2FeaturesINTEL;
pub const struct_VkPerformanceConfigurationINTEL_T = opaque {};
pub const VkPerformanceConfigurationINTEL = ?*struct_VkPerformanceConfigurationINTEL_T;
pub const VK_PERFORMANCE_CONFIGURATION_TYPE_COMMAND_QUEUE_METRICS_DISCOVERY_ACTIVATED_INTEL: c_int = 0;
pub const VK_PERFORMANCE_CONFIGURATION_TYPE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkPerformanceConfigurationTypeINTEL = c_uint;
pub const VkPerformanceConfigurationTypeINTEL = enum_VkPerformanceConfigurationTypeINTEL;
pub const VK_QUERY_POOL_SAMPLING_MODE_MANUAL_INTEL: c_int = 0;
pub const VK_QUERY_POOL_SAMPLING_MODE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkQueryPoolSamplingModeINTEL = c_uint;
pub const VkQueryPoolSamplingModeINTEL = enum_VkQueryPoolSamplingModeINTEL;
pub const VK_PERFORMANCE_OVERRIDE_TYPE_NULL_HARDWARE_INTEL: c_int = 0;
pub const VK_PERFORMANCE_OVERRIDE_TYPE_FLUSH_GPU_CACHES_INTEL: c_int = 1;
pub const VK_PERFORMANCE_OVERRIDE_TYPE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkPerformanceOverrideTypeINTEL = c_uint;
pub const VkPerformanceOverrideTypeINTEL = enum_VkPerformanceOverrideTypeINTEL;
pub const VK_PERFORMANCE_PARAMETER_TYPE_HW_COUNTERS_SUPPORTED_INTEL: c_int = 0;
pub const VK_PERFORMANCE_PARAMETER_TYPE_STREAM_MARKER_VALID_BITS_INTEL: c_int = 1;
pub const VK_PERFORMANCE_PARAMETER_TYPE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkPerformanceParameterTypeINTEL = c_uint;
pub const VkPerformanceParameterTypeINTEL = enum_VkPerformanceParameterTypeINTEL;
pub const VK_PERFORMANCE_VALUE_TYPE_UINT32_INTEL: c_int = 0;
pub const VK_PERFORMANCE_VALUE_TYPE_UINT64_INTEL: c_int = 1;
pub const VK_PERFORMANCE_VALUE_TYPE_FLOAT_INTEL: c_int = 2;
pub const VK_PERFORMANCE_VALUE_TYPE_BOOL_INTEL: c_int = 3;
pub const VK_PERFORMANCE_VALUE_TYPE_STRING_INTEL: c_int = 4;
pub const VK_PERFORMANCE_VALUE_TYPE_MAX_ENUM_INTEL: c_int = 2147483647;
pub const enum_VkPerformanceValueTypeINTEL = c_uint;
pub const VkPerformanceValueTypeINTEL = enum_VkPerformanceValueTypeINTEL;
pub const union_VkPerformanceValueDataINTEL = extern union {
    value32: u32,
    value64: u64,
    valueFloat: f32,
    valueBool: VkBool32,
    valueString: [*c]const u8,
};
pub const VkPerformanceValueDataINTEL = union_VkPerformanceValueDataINTEL;
pub const struct_VkPerformanceValueINTEL = extern struct {
    type: VkPerformanceValueTypeINTEL,
    data: VkPerformanceValueDataINTEL,
};
pub const VkPerformanceValueINTEL = struct_VkPerformanceValueINTEL;
pub const struct_VkInitializePerformanceApiInfoINTEL = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    pUserData: ?*anyopaque,
};
pub const VkInitializePerformanceApiInfoINTEL = struct_VkInitializePerformanceApiInfoINTEL;
pub const struct_VkQueryPoolPerformanceQueryCreateInfoINTEL = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    performanceCountersSampling: VkQueryPoolSamplingModeINTEL,
};
pub const VkQueryPoolPerformanceQueryCreateInfoINTEL = struct_VkQueryPoolPerformanceQueryCreateInfoINTEL;
pub const VkQueryPoolCreateInfoINTEL = VkQueryPoolPerformanceQueryCreateInfoINTEL;
pub const struct_VkPerformanceMarkerInfoINTEL = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    marker: u64,
};
pub const VkPerformanceMarkerInfoINTEL = struct_VkPerformanceMarkerInfoINTEL;
pub const struct_VkPerformanceStreamMarkerInfoINTEL = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    marker: u32,
};
pub const VkPerformanceStreamMarkerInfoINTEL = struct_VkPerformanceStreamMarkerInfoINTEL;
pub const struct_VkPerformanceOverrideInfoINTEL = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    type: VkPerformanceOverrideTypeINTEL,
    enable: VkBool32,
    parameter: u64,
};
pub const VkPerformanceOverrideInfoINTEL = struct_VkPerformanceOverrideInfoINTEL;
pub const struct_VkPerformanceConfigurationAcquireInfoINTEL = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    type: VkPerformanceConfigurationTypeINTEL,
};
pub const VkPerformanceConfigurationAcquireInfoINTEL = struct_VkPerformanceConfigurationAcquireInfoINTEL;
pub const PFN_vkInitializePerformanceApiINTEL = ?*const fn (VkDevice, [*c]const VkInitializePerformanceApiInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkUninitializePerformanceApiINTEL = ?*const fn (VkDevice) callconv(.C) void;
pub const PFN_vkCmdSetPerformanceMarkerINTEL = ?*const fn (VkCommandBuffer, [*c]const VkPerformanceMarkerInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkCmdSetPerformanceStreamMarkerINTEL = ?*const fn (VkCommandBuffer, [*c]const VkPerformanceStreamMarkerInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkCmdSetPerformanceOverrideINTEL = ?*const fn (VkCommandBuffer, [*c]const VkPerformanceOverrideInfoINTEL) callconv(.C) VkResult;
pub const PFN_vkAcquirePerformanceConfigurationINTEL = ?*const fn (VkDevice, [*c]const VkPerformanceConfigurationAcquireInfoINTEL, [*c]VkPerformanceConfigurationINTEL) callconv(.C) VkResult;
pub const PFN_vkReleasePerformanceConfigurationINTEL = ?*const fn (VkDevice, VkPerformanceConfigurationINTEL) callconv(.C) VkResult;
pub const PFN_vkQueueSetPerformanceConfigurationINTEL = ?*const fn (VkQueue, VkPerformanceConfigurationINTEL) callconv(.C) VkResult;
pub const PFN_vkGetPerformanceParameterINTEL = ?*const fn (VkDevice, VkPerformanceParameterTypeINTEL, [*c]VkPerformanceValueINTEL) callconv(.C) VkResult;
pub extern fn vkInitializePerformanceApiINTEL(device: VkDevice, pInitializeInfo: [*c]const VkInitializePerformanceApiInfoINTEL) VkResult;
pub extern fn vkUninitializePerformanceApiINTEL(device: VkDevice) void;
pub extern fn vkCmdSetPerformanceMarkerINTEL(commandBuffer: VkCommandBuffer, pMarkerInfo: [*c]const VkPerformanceMarkerInfoINTEL) VkResult;
pub extern fn vkCmdSetPerformanceStreamMarkerINTEL(commandBuffer: VkCommandBuffer, pMarkerInfo: [*c]const VkPerformanceStreamMarkerInfoINTEL) VkResult;
pub extern fn vkCmdSetPerformanceOverrideINTEL(commandBuffer: VkCommandBuffer, pOverrideInfo: [*c]const VkPerformanceOverrideInfoINTEL) VkResult;
pub extern fn vkAcquirePerformanceConfigurationINTEL(device: VkDevice, pAcquireInfo: [*c]const VkPerformanceConfigurationAcquireInfoINTEL, pConfiguration: [*c]VkPerformanceConfigurationINTEL) VkResult;
pub extern fn vkReleasePerformanceConfigurationINTEL(device: VkDevice, configuration: VkPerformanceConfigurationINTEL) VkResult;
pub extern fn vkQueueSetPerformanceConfigurationINTEL(queue: VkQueue, configuration: VkPerformanceConfigurationINTEL) VkResult;
pub extern fn vkGetPerformanceParameterINTEL(device: VkDevice, parameter: VkPerformanceParameterTypeINTEL, pValue: [*c]VkPerformanceValueINTEL) VkResult;
pub const struct_VkPhysicalDevicePCIBusInfoPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    pciDomain: u32,
    pciBus: u32,
    pciDevice: u32,
    pciFunction: u32,
};
pub const VkPhysicalDevicePCIBusInfoPropertiesEXT = struct_VkPhysicalDevicePCIBusInfoPropertiesEXT;
pub const struct_VkDisplayNativeHdrSurfaceCapabilitiesAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    localDimmingSupport: VkBool32,
};
pub const VkDisplayNativeHdrSurfaceCapabilitiesAMD = struct_VkDisplayNativeHdrSurfaceCapabilitiesAMD;
pub const struct_VkSwapchainDisplayNativeHdrCreateInfoAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    localDimmingEnable: VkBool32,
};
pub const VkSwapchainDisplayNativeHdrCreateInfoAMD = struct_VkSwapchainDisplayNativeHdrCreateInfoAMD;
pub const PFN_vkSetLocalDimmingAMD = ?*const fn (VkDevice, VkSwapchainKHR, VkBool32) callconv(.C) void;
pub extern fn vkSetLocalDimmingAMD(device: VkDevice, swapChain: VkSwapchainKHR, localDimmingEnable: VkBool32) void;
pub const struct_VkPhysicalDeviceFragmentDensityMapFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    fragmentDensityMap: VkBool32,
    fragmentDensityMapDynamic: VkBool32,
    fragmentDensityMapNonSubsampledImages: VkBool32,
};
pub const VkPhysicalDeviceFragmentDensityMapFeaturesEXT = struct_VkPhysicalDeviceFragmentDensityMapFeaturesEXT;
pub const struct_VkPhysicalDeviceFragmentDensityMapPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    minFragmentDensityTexelSize: VkExtent2D,
    maxFragmentDensityTexelSize: VkExtent2D,
    fragmentDensityInvocations: VkBool32,
};
pub const VkPhysicalDeviceFragmentDensityMapPropertiesEXT = struct_VkPhysicalDeviceFragmentDensityMapPropertiesEXT;
pub const struct_VkRenderPassFragmentDensityMapCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    fragmentDensityMapAttachment: VkAttachmentReference,
};
pub const VkRenderPassFragmentDensityMapCreateInfoEXT = struct_VkRenderPassFragmentDensityMapCreateInfoEXT;
pub const VkPhysicalDeviceScalarBlockLayoutFeaturesEXT = VkPhysicalDeviceScalarBlockLayoutFeatures;
pub const VkPhysicalDeviceSubgroupSizeControlFeaturesEXT = VkPhysicalDeviceSubgroupSizeControlFeatures;
pub const VkPhysicalDeviceSubgroupSizeControlPropertiesEXT = VkPhysicalDeviceSubgroupSizeControlProperties;
pub const VkPipelineShaderStageRequiredSubgroupSizeCreateInfoEXT = VkPipelineShaderStageRequiredSubgroupSizeCreateInfo;
pub const VK_SHADER_CORE_PROPERTIES_FLAG_BITS_MAX_ENUM_AMD: c_int = 2147483647;
pub const enum_VkShaderCorePropertiesFlagBitsAMD = c_uint;
pub const VkShaderCorePropertiesFlagBitsAMD = enum_VkShaderCorePropertiesFlagBitsAMD;
pub const VkShaderCorePropertiesFlagsAMD = VkFlags;
pub const struct_VkPhysicalDeviceShaderCoreProperties2AMD = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderCoreFeatures: VkShaderCorePropertiesFlagsAMD,
    activeComputeUnitCount: u32,
};
pub const VkPhysicalDeviceShaderCoreProperties2AMD = struct_VkPhysicalDeviceShaderCoreProperties2AMD;
pub const struct_VkPhysicalDeviceCoherentMemoryFeaturesAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    deviceCoherentMemory: VkBool32,
};
pub const VkPhysicalDeviceCoherentMemoryFeaturesAMD = struct_VkPhysicalDeviceCoherentMemoryFeaturesAMD;
pub const struct_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderImageInt64Atomics: VkBool32,
    sparseImageInt64Atomics: VkBool32,
};
pub const VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT = struct_VkPhysicalDeviceShaderImageAtomicInt64FeaturesEXT;
pub const struct_VkPhysicalDeviceMemoryBudgetPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    heapBudget: [16]VkDeviceSize,
    heapUsage: [16]VkDeviceSize,
};
pub const VkPhysicalDeviceMemoryBudgetPropertiesEXT = struct_VkPhysicalDeviceMemoryBudgetPropertiesEXT;
pub const struct_VkPhysicalDeviceMemoryPriorityFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    memoryPriority: VkBool32,
};
pub const VkPhysicalDeviceMemoryPriorityFeaturesEXT = struct_VkPhysicalDeviceMemoryPriorityFeaturesEXT;
pub const struct_VkMemoryPriorityAllocateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    priority: f32,
};
pub const VkMemoryPriorityAllocateInfoEXT = struct_VkMemoryPriorityAllocateInfoEXT;
pub const struct_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    dedicatedAllocationImageAliasing: VkBool32,
};
pub const VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV = struct_VkPhysicalDeviceDedicatedAllocationImageAliasingFeaturesNV;
pub const struct_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    bufferDeviceAddress: VkBool32,
    bufferDeviceAddressCaptureReplay: VkBool32,
    bufferDeviceAddressMultiDevice: VkBool32,
};
pub const VkPhysicalDeviceBufferDeviceAddressFeaturesEXT = struct_VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub const VkPhysicalDeviceBufferAddressFeaturesEXT = VkPhysicalDeviceBufferDeviceAddressFeaturesEXT;
pub const VkBufferDeviceAddressInfoEXT = VkBufferDeviceAddressInfo;
pub const struct_VkBufferDeviceAddressCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    deviceAddress: VkDeviceAddress,
};
pub const VkBufferDeviceAddressCreateInfoEXT = struct_VkBufferDeviceAddressCreateInfoEXT;
pub const PFN_vkGetBufferDeviceAddressEXT = ?*const fn (VkDevice, [*c]const VkBufferDeviceAddressInfo) callconv(.C) VkDeviceAddress;
pub extern fn vkGetBufferDeviceAddressEXT(device: VkDevice, pInfo: [*c]const VkBufferDeviceAddressInfo) VkDeviceAddress;
pub const VkToolPurposeFlagBitsEXT = VkToolPurposeFlagBits;
pub const VkToolPurposeFlagsEXT = VkToolPurposeFlags;
pub const VkPhysicalDeviceToolPropertiesEXT = VkPhysicalDeviceToolProperties;
pub const PFN_vkGetPhysicalDeviceToolPropertiesEXT = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkPhysicalDeviceToolProperties) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceToolPropertiesEXT(physicalDevice: VkPhysicalDevice, pToolCount: [*c]u32, pToolProperties: [*c]VkPhysicalDeviceToolProperties) VkResult;
pub const VkImageStencilUsageCreateInfoEXT = VkImageStencilUsageCreateInfo;
pub const VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_EXT: c_int = 0;
pub const VK_VALIDATION_FEATURE_ENABLE_GPU_ASSISTED_RESERVE_BINDING_SLOT_EXT: c_int = 1;
pub const VK_VALIDATION_FEATURE_ENABLE_BEST_PRACTICES_EXT: c_int = 2;
pub const VK_VALIDATION_FEATURE_ENABLE_DEBUG_PRINTF_EXT: c_int = 3;
pub const VK_VALIDATION_FEATURE_ENABLE_SYNCHRONIZATION_VALIDATION_EXT: c_int = 4;
pub const VK_VALIDATION_FEATURE_ENABLE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkValidationFeatureEnableEXT = c_uint;
pub const VkValidationFeatureEnableEXT = enum_VkValidationFeatureEnableEXT;
pub const VK_VALIDATION_FEATURE_DISABLE_ALL_EXT: c_int = 0;
pub const VK_VALIDATION_FEATURE_DISABLE_SHADERS_EXT: c_int = 1;
pub const VK_VALIDATION_FEATURE_DISABLE_THREAD_SAFETY_EXT: c_int = 2;
pub const VK_VALIDATION_FEATURE_DISABLE_API_PARAMETERS_EXT: c_int = 3;
pub const VK_VALIDATION_FEATURE_DISABLE_OBJECT_LIFETIMES_EXT: c_int = 4;
pub const VK_VALIDATION_FEATURE_DISABLE_CORE_CHECKS_EXT: c_int = 5;
pub const VK_VALIDATION_FEATURE_DISABLE_UNIQUE_HANDLES_EXT: c_int = 6;
pub const VK_VALIDATION_FEATURE_DISABLE_SHADER_VALIDATION_CACHE_EXT: c_int = 7;
pub const VK_VALIDATION_FEATURE_DISABLE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkValidationFeatureDisableEXT = c_uint;
pub const VkValidationFeatureDisableEXT = enum_VkValidationFeatureDisableEXT;
pub const struct_VkValidationFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    enabledValidationFeatureCount: u32,
    pEnabledValidationFeatures: [*c]const VkValidationFeatureEnableEXT,
    disabledValidationFeatureCount: u32,
    pDisabledValidationFeatures: [*c]const VkValidationFeatureDisableEXT,
};
pub const VkValidationFeaturesEXT = struct_VkValidationFeaturesEXT;
pub const VK_COMPONENT_TYPE_FLOAT16_NV: c_int = 0;
pub const VK_COMPONENT_TYPE_FLOAT32_NV: c_int = 1;
pub const VK_COMPONENT_TYPE_FLOAT64_NV: c_int = 2;
pub const VK_COMPONENT_TYPE_SINT8_NV: c_int = 3;
pub const VK_COMPONENT_TYPE_SINT16_NV: c_int = 4;
pub const VK_COMPONENT_TYPE_SINT32_NV: c_int = 5;
pub const VK_COMPONENT_TYPE_SINT64_NV: c_int = 6;
pub const VK_COMPONENT_TYPE_UINT8_NV: c_int = 7;
pub const VK_COMPONENT_TYPE_UINT16_NV: c_int = 8;
pub const VK_COMPONENT_TYPE_UINT32_NV: c_int = 9;
pub const VK_COMPONENT_TYPE_UINT64_NV: c_int = 10;
pub const VK_COMPONENT_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkComponentTypeNV = c_uint;
pub const VkComponentTypeNV = enum_VkComponentTypeNV;
pub const VK_SCOPE_DEVICE_NV: c_int = 1;
pub const VK_SCOPE_WORKGROUP_NV: c_int = 2;
pub const VK_SCOPE_SUBGROUP_NV: c_int = 3;
pub const VK_SCOPE_QUEUE_FAMILY_NV: c_int = 5;
pub const VK_SCOPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkScopeNV = c_uint;
pub const VkScopeNV = enum_VkScopeNV;
pub const struct_VkCooperativeMatrixPropertiesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    MSize: u32,
    NSize: u32,
    KSize: u32,
    AType: VkComponentTypeNV,
    BType: VkComponentTypeNV,
    CType: VkComponentTypeNV,
    DType: VkComponentTypeNV,
    scope: VkScopeNV,
};
pub const VkCooperativeMatrixPropertiesNV = struct_VkCooperativeMatrixPropertiesNV;
pub const struct_VkPhysicalDeviceCooperativeMatrixFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    cooperativeMatrix: VkBool32,
    cooperativeMatrixRobustBufferAccess: VkBool32,
};
pub const VkPhysicalDeviceCooperativeMatrixFeaturesNV = struct_VkPhysicalDeviceCooperativeMatrixFeaturesNV;
pub const struct_VkPhysicalDeviceCooperativeMatrixPropertiesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    cooperativeMatrixSupportedStages: VkShaderStageFlags,
};
pub const VkPhysicalDeviceCooperativeMatrixPropertiesNV = struct_VkPhysicalDeviceCooperativeMatrixPropertiesNV;
pub const PFN_vkGetPhysicalDeviceCooperativeMatrixPropertiesNV = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkCooperativeMatrixPropertiesNV) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceCooperativeMatrixPropertiesNV(physicalDevice: VkPhysicalDevice, pPropertyCount: [*c]u32, pProperties: [*c]VkCooperativeMatrixPropertiesNV) VkResult;
pub const VK_COVERAGE_REDUCTION_MODE_MERGE_NV: c_int = 0;
pub const VK_COVERAGE_REDUCTION_MODE_TRUNCATE_NV: c_int = 1;
pub const VK_COVERAGE_REDUCTION_MODE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkCoverageReductionModeNV = c_uint;
pub const VkCoverageReductionModeNV = enum_VkCoverageReductionModeNV;
pub const VkPipelineCoverageReductionStateCreateFlagsNV = VkFlags;
pub const struct_VkPhysicalDeviceCoverageReductionModeFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    coverageReductionMode: VkBool32,
};
pub const VkPhysicalDeviceCoverageReductionModeFeaturesNV = struct_VkPhysicalDeviceCoverageReductionModeFeaturesNV;
pub const struct_VkPipelineCoverageReductionStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineCoverageReductionStateCreateFlagsNV,
    coverageReductionMode: VkCoverageReductionModeNV,
};
pub const VkPipelineCoverageReductionStateCreateInfoNV = struct_VkPipelineCoverageReductionStateCreateInfoNV;
pub const struct_VkFramebufferMixedSamplesCombinationNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    coverageReductionMode: VkCoverageReductionModeNV,
    rasterizationSamples: VkSampleCountFlagBits,
    depthStencilSamples: VkSampleCountFlags,
    colorSamples: VkSampleCountFlags,
};
pub const VkFramebufferMixedSamplesCombinationNV = struct_VkFramebufferMixedSamplesCombinationNV;
pub const PFN_vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV = ?*const fn (VkPhysicalDevice, [*c]u32, [*c]VkFramebufferMixedSamplesCombinationNV) callconv(.C) VkResult;
pub extern fn vkGetPhysicalDeviceSupportedFramebufferMixedSamplesCombinationsNV(physicalDevice: VkPhysicalDevice, pCombinationCount: [*c]u32, pCombinations: [*c]VkFramebufferMixedSamplesCombinationNV) VkResult;
pub const struct_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    fragmentShaderSampleInterlock: VkBool32,
    fragmentShaderPixelInterlock: VkBool32,
    fragmentShaderShadingRateInterlock: VkBool32,
};
pub const VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT = struct_VkPhysicalDeviceFragmentShaderInterlockFeaturesEXT;
pub const struct_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    ycbcrImageArrays: VkBool32,
};
pub const VkPhysicalDeviceYcbcrImageArraysFeaturesEXT = struct_VkPhysicalDeviceYcbcrImageArraysFeaturesEXT;
pub const VK_PROVOKING_VERTEX_MODE_FIRST_VERTEX_EXT: c_int = 0;
pub const VK_PROVOKING_VERTEX_MODE_LAST_VERTEX_EXT: c_int = 1;
pub const VK_PROVOKING_VERTEX_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkProvokingVertexModeEXT = c_uint;
pub const VkProvokingVertexModeEXT = enum_VkProvokingVertexModeEXT;
pub const struct_VkPhysicalDeviceProvokingVertexFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    provokingVertexLast: VkBool32,
    transformFeedbackPreservesProvokingVertex: VkBool32,
};
pub const VkPhysicalDeviceProvokingVertexFeaturesEXT = struct_VkPhysicalDeviceProvokingVertexFeaturesEXT;
pub const struct_VkPhysicalDeviceProvokingVertexPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    provokingVertexModePerPipeline: VkBool32,
    transformFeedbackPreservesTriangleFanProvokingVertex: VkBool32,
};
pub const VkPhysicalDeviceProvokingVertexPropertiesEXT = struct_VkPhysicalDeviceProvokingVertexPropertiesEXT;
pub const struct_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    provokingVertexMode: VkProvokingVertexModeEXT,
};
pub const VkPipelineRasterizationProvokingVertexStateCreateInfoEXT = struct_VkPipelineRasterizationProvokingVertexStateCreateInfoEXT;
pub const VkHeadlessSurfaceCreateFlagsEXT = VkFlags;
pub const struct_VkHeadlessSurfaceCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkHeadlessSurfaceCreateFlagsEXT,
};
pub const VkHeadlessSurfaceCreateInfoEXT = struct_VkHeadlessSurfaceCreateInfoEXT;
pub const PFN_vkCreateHeadlessSurfaceEXT = ?*const fn (VkInstance, [*c]const VkHeadlessSurfaceCreateInfoEXT, [*c]const VkAllocationCallbacks, [*c]VkSurfaceKHR) callconv(.C) VkResult;
pub extern fn vkCreateHeadlessSurfaceEXT(instance: VkInstance, pCreateInfo: [*c]const VkHeadlessSurfaceCreateInfoEXT, pAllocator: [*c]const VkAllocationCallbacks, pSurface: [*c]VkSurfaceKHR) VkResult;
pub const VK_LINE_RASTERIZATION_MODE_DEFAULT_EXT: c_int = 0;
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_EXT: c_int = 1;
pub const VK_LINE_RASTERIZATION_MODE_BRESENHAM_EXT: c_int = 2;
pub const VK_LINE_RASTERIZATION_MODE_RECTANGULAR_SMOOTH_EXT: c_int = 3;
pub const VK_LINE_RASTERIZATION_MODE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkLineRasterizationModeEXT = c_uint;
pub const VkLineRasterizationModeEXT = enum_VkLineRasterizationModeEXT;
pub const struct_VkPhysicalDeviceLineRasterizationFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    rectangularLines: VkBool32,
    bresenhamLines: VkBool32,
    smoothLines: VkBool32,
    stippledRectangularLines: VkBool32,
    stippledBresenhamLines: VkBool32,
    stippledSmoothLines: VkBool32,
};
pub const VkPhysicalDeviceLineRasterizationFeaturesEXT = struct_VkPhysicalDeviceLineRasterizationFeaturesEXT;
pub const struct_VkPhysicalDeviceLineRasterizationPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    lineSubPixelPrecisionBits: u32,
};
pub const VkPhysicalDeviceLineRasterizationPropertiesEXT = struct_VkPhysicalDeviceLineRasterizationPropertiesEXT;
pub const struct_VkPipelineRasterizationLineStateCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    lineRasterizationMode: VkLineRasterizationModeEXT,
    stippledLineEnable: VkBool32,
    lineStippleFactor: u32,
    lineStipplePattern: u16,
};
pub const VkPipelineRasterizationLineStateCreateInfoEXT = struct_VkPipelineRasterizationLineStateCreateInfoEXT;
pub const PFN_vkCmdSetLineStippleEXT = ?*const fn (VkCommandBuffer, u32, u16) callconv(.C) void;
pub extern fn vkCmdSetLineStippleEXT(commandBuffer: VkCommandBuffer, lineStippleFactor: u32, lineStipplePattern: u16) void;
pub const struct_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderBufferFloat32Atomics: VkBool32,
    shaderBufferFloat32AtomicAdd: VkBool32,
    shaderBufferFloat64Atomics: VkBool32,
    shaderBufferFloat64AtomicAdd: VkBool32,
    shaderSharedFloat32Atomics: VkBool32,
    shaderSharedFloat32AtomicAdd: VkBool32,
    shaderSharedFloat64Atomics: VkBool32,
    shaderSharedFloat64AtomicAdd: VkBool32,
    shaderImageFloat32Atomics: VkBool32,
    shaderImageFloat32AtomicAdd: VkBool32,
    sparseImageFloat32Atomics: VkBool32,
    sparseImageFloat32AtomicAdd: VkBool32,
};
pub const VkPhysicalDeviceShaderAtomicFloatFeaturesEXT = struct_VkPhysicalDeviceShaderAtomicFloatFeaturesEXT;
pub const VkPhysicalDeviceHostQueryResetFeaturesEXT = VkPhysicalDeviceHostQueryResetFeatures;
pub const PFN_vkResetQueryPoolEXT = ?*const fn (VkDevice, VkQueryPool, u32, u32) callconv(.C) void;
pub extern fn vkResetQueryPoolEXT(device: VkDevice, queryPool: VkQueryPool, firstQuery: u32, queryCount: u32) void;
pub const struct_VkPhysicalDeviceIndexTypeUint8FeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    indexTypeUint8: VkBool32,
};
pub const VkPhysicalDeviceIndexTypeUint8FeaturesEXT = struct_VkPhysicalDeviceIndexTypeUint8FeaturesEXT;
pub const struct_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    extendedDynamicState: VkBool32,
};
pub const VkPhysicalDeviceExtendedDynamicStateFeaturesEXT = struct_VkPhysicalDeviceExtendedDynamicStateFeaturesEXT;
pub const PFN_vkCmdSetCullModeEXT = ?*const fn (VkCommandBuffer, VkCullModeFlags) callconv(.C) void;
pub const PFN_vkCmdSetFrontFaceEXT = ?*const fn (VkCommandBuffer, VkFrontFace) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveTopologyEXT = ?*const fn (VkCommandBuffer, VkPrimitiveTopology) callconv(.C) void;
pub const PFN_vkCmdSetViewportWithCountEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkViewport) callconv(.C) void;
pub const PFN_vkCmdSetScissorWithCountEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkRect2D) callconv(.C) void;
pub const PFN_vkCmdBindVertexBuffers2EXT = ?*const fn (VkCommandBuffer, u32, u32, [*c]const VkBuffer, [*c]const VkDeviceSize, [*c]const VkDeviceSize, [*c]const VkDeviceSize) callconv(.C) void;
pub const PFN_vkCmdSetDepthTestEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthWriteEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthCompareOpEXT = ?*const fn (VkCommandBuffer, VkCompareOp) callconv(.C) void;
pub const PFN_vkCmdSetDepthBoundsTestEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilTestEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetStencilOpEXT = ?*const fn (VkCommandBuffer, VkStencilFaceFlags, VkStencilOp, VkStencilOp, VkStencilOp, VkCompareOp) callconv(.C) void;
pub extern fn vkCmdSetCullModeEXT(commandBuffer: VkCommandBuffer, cullMode: VkCullModeFlags) void;
pub extern fn vkCmdSetFrontFaceEXT(commandBuffer: VkCommandBuffer, frontFace: VkFrontFace) void;
pub extern fn vkCmdSetPrimitiveTopologyEXT(commandBuffer: VkCommandBuffer, primitiveTopology: VkPrimitiveTopology) void;
pub extern fn vkCmdSetViewportWithCountEXT(commandBuffer: VkCommandBuffer, viewportCount: u32, pViewports: [*c]const VkViewport) void;
pub extern fn vkCmdSetScissorWithCountEXT(commandBuffer: VkCommandBuffer, scissorCount: u32, pScissors: [*c]const VkRect2D) void;
pub extern fn vkCmdBindVertexBuffers2EXT(commandBuffer: VkCommandBuffer, firstBinding: u32, bindingCount: u32, pBuffers: [*c]const VkBuffer, pOffsets: [*c]const VkDeviceSize, pSizes: [*c]const VkDeviceSize, pStrides: [*c]const VkDeviceSize) void;
pub extern fn vkCmdSetDepthTestEnableEXT(commandBuffer: VkCommandBuffer, depthTestEnable: VkBool32) void;
pub extern fn vkCmdSetDepthWriteEnableEXT(commandBuffer: VkCommandBuffer, depthWriteEnable: VkBool32) void;
pub extern fn vkCmdSetDepthCompareOpEXT(commandBuffer: VkCommandBuffer, depthCompareOp: VkCompareOp) void;
pub extern fn vkCmdSetDepthBoundsTestEnableEXT(commandBuffer: VkCommandBuffer, depthBoundsTestEnable: VkBool32) void;
pub extern fn vkCmdSetStencilTestEnableEXT(commandBuffer: VkCommandBuffer, stencilTestEnable: VkBool32) void;
pub extern fn vkCmdSetStencilOpEXT(commandBuffer: VkCommandBuffer, faceMask: VkStencilFaceFlags, failOp: VkStencilOp, passOp: VkStencilOp, depthFailOp: VkStencilOp, compareOp: VkCompareOp) void;
pub const struct_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderBufferFloat16Atomics: VkBool32,
    shaderBufferFloat16AtomicAdd: VkBool32,
    shaderBufferFloat16AtomicMinMax: VkBool32,
    shaderBufferFloat32AtomicMinMax: VkBool32,
    shaderBufferFloat64AtomicMinMax: VkBool32,
    shaderSharedFloat16Atomics: VkBool32,
    shaderSharedFloat16AtomicAdd: VkBool32,
    shaderSharedFloat16AtomicMinMax: VkBool32,
    shaderSharedFloat32AtomicMinMax: VkBool32,
    shaderSharedFloat64AtomicMinMax: VkBool32,
    shaderImageFloat32AtomicMinMax: VkBool32,
    sparseImageFloat32AtomicMinMax: VkBool32,
};
pub const VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT = struct_VkPhysicalDeviceShaderAtomicFloat2FeaturesEXT;
pub const VkPhysicalDeviceShaderDemoteToHelperInvocationFeaturesEXT = VkPhysicalDeviceShaderDemoteToHelperInvocationFeatures;
pub const struct_VkIndirectCommandsLayoutNV_T = opaque {};
pub const VkIndirectCommandsLayoutNV = ?*struct_VkIndirectCommandsLayoutNV_T;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_SHADER_GROUP_NV: c_int = 0;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_STATE_FLAGS_NV: c_int = 1;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_INDEX_BUFFER_NV: c_int = 2;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_VERTEX_BUFFER_NV: c_int = 3;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_PUSH_CONSTANT_NV: c_int = 4;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_INDEXED_NV: c_int = 5;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_NV: c_int = 6;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_DRAW_TASKS_NV: c_int = 7;
pub const VK_INDIRECT_COMMANDS_TOKEN_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkIndirectCommandsTokenTypeNV = c_uint;
pub const VkIndirectCommandsTokenTypeNV = enum_VkIndirectCommandsTokenTypeNV;
pub const VK_INDIRECT_STATE_FLAG_FRONTFACE_BIT_NV: c_int = 1;
pub const VK_INDIRECT_STATE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkIndirectStateFlagBitsNV = c_uint;
pub const VkIndirectStateFlagBitsNV = enum_VkIndirectStateFlagBitsNV;
pub const VkIndirectStateFlagsNV = VkFlags;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_EXPLICIT_PREPROCESS_BIT_NV: c_int = 1;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_INDEXED_SEQUENCES_BIT_NV: c_int = 2;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_UNORDERED_SEQUENCES_BIT_NV: c_int = 4;
pub const VK_INDIRECT_COMMANDS_LAYOUT_USAGE_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkIndirectCommandsLayoutUsageFlagBitsNV = c_uint;
pub const VkIndirectCommandsLayoutUsageFlagBitsNV = enum_VkIndirectCommandsLayoutUsageFlagBitsNV;
pub const VkIndirectCommandsLayoutUsageFlagsNV = VkFlags;
pub const struct_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxGraphicsShaderGroupCount: u32,
    maxIndirectSequenceCount: u32,
    maxIndirectCommandsTokenCount: u32,
    maxIndirectCommandsStreamCount: u32,
    maxIndirectCommandsTokenOffset: u32,
    maxIndirectCommandsStreamStride: u32,
    minSequencesCountBufferOffsetAlignment: u32,
    minSequencesIndexBufferOffsetAlignment: u32,
    minIndirectCommandsBufferOffsetAlignment: u32,
};
pub const VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV = struct_VkPhysicalDeviceDeviceGeneratedCommandsPropertiesNV;
pub const struct_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    deviceGeneratedCommands: VkBool32,
};
pub const VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV = struct_VkPhysicalDeviceDeviceGeneratedCommandsFeaturesNV;
pub const struct_VkGraphicsShaderGroupCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    stageCount: u32,
    pStages: [*c]const VkPipelineShaderStageCreateInfo,
    pVertexInputState: [*c]const VkPipelineVertexInputStateCreateInfo,
    pTessellationState: [*c]const VkPipelineTessellationStateCreateInfo,
};
pub const VkGraphicsShaderGroupCreateInfoNV = struct_VkGraphicsShaderGroupCreateInfoNV;
pub const struct_VkGraphicsPipelineShaderGroupsCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    groupCount: u32,
    pGroups: [*c]const VkGraphicsShaderGroupCreateInfoNV,
    pipelineCount: u32,
    pPipelines: [*c]const VkPipeline,
};
pub const VkGraphicsPipelineShaderGroupsCreateInfoNV = struct_VkGraphicsPipelineShaderGroupsCreateInfoNV;
pub const struct_VkBindShaderGroupIndirectCommandNV = extern struct {
    groupIndex: u32,
};
pub const VkBindShaderGroupIndirectCommandNV = struct_VkBindShaderGroupIndirectCommandNV;
pub const struct_VkBindIndexBufferIndirectCommandNV = extern struct {
    bufferAddress: VkDeviceAddress,
    size: u32,
    indexType: VkIndexType,
};
pub const VkBindIndexBufferIndirectCommandNV = struct_VkBindIndexBufferIndirectCommandNV;
pub const struct_VkBindVertexBufferIndirectCommandNV = extern struct {
    bufferAddress: VkDeviceAddress,
    size: u32,
    stride: u32,
};
pub const VkBindVertexBufferIndirectCommandNV = struct_VkBindVertexBufferIndirectCommandNV;
pub const struct_VkSetStateFlagsIndirectCommandNV = extern struct {
    data: u32,
};
pub const VkSetStateFlagsIndirectCommandNV = struct_VkSetStateFlagsIndirectCommandNV;
pub const struct_VkIndirectCommandsStreamNV = extern struct {
    buffer: VkBuffer,
    offset: VkDeviceSize,
};
pub const VkIndirectCommandsStreamNV = struct_VkIndirectCommandsStreamNV;
pub const struct_VkIndirectCommandsLayoutTokenNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    tokenType: VkIndirectCommandsTokenTypeNV,
    stream: u32,
    offset: u32,
    vertexBindingUnit: u32,
    vertexDynamicStride: VkBool32,
    pushconstantPipelineLayout: VkPipelineLayout,
    pushconstantShaderStageFlags: VkShaderStageFlags,
    pushconstantOffset: u32,
    pushconstantSize: u32,
    indirectStateFlags: VkIndirectStateFlagsNV,
    indexTypeCount: u32,
    pIndexTypes: [*c]const VkIndexType,
    pIndexTypeValues: [*c]const u32,
};
pub const VkIndirectCommandsLayoutTokenNV = struct_VkIndirectCommandsLayoutTokenNV;
pub const struct_VkIndirectCommandsLayoutCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkIndirectCommandsLayoutUsageFlagsNV,
    pipelineBindPoint: VkPipelineBindPoint,
    tokenCount: u32,
    pTokens: [*c]const VkIndirectCommandsLayoutTokenNV,
    streamCount: u32,
    pStreamStrides: [*c]const u32,
};
pub const VkIndirectCommandsLayoutCreateInfoNV = struct_VkIndirectCommandsLayoutCreateInfoNV;
pub const struct_VkGeneratedCommandsInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    pipelineBindPoint: VkPipelineBindPoint,
    pipeline: VkPipeline,
    indirectCommandsLayout: VkIndirectCommandsLayoutNV,
    streamCount: u32,
    pStreams: [*c]const VkIndirectCommandsStreamNV,
    sequencesCount: u32,
    preprocessBuffer: VkBuffer,
    preprocessOffset: VkDeviceSize,
    preprocessSize: VkDeviceSize,
    sequencesCountBuffer: VkBuffer,
    sequencesCountOffset: VkDeviceSize,
    sequencesIndexBuffer: VkBuffer,
    sequencesIndexOffset: VkDeviceSize,
};
pub const VkGeneratedCommandsInfoNV = struct_VkGeneratedCommandsInfoNV;
pub const struct_VkGeneratedCommandsMemoryRequirementsInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    pipelineBindPoint: VkPipelineBindPoint,
    pipeline: VkPipeline,
    indirectCommandsLayout: VkIndirectCommandsLayoutNV,
    maxSequencesCount: u32,
};
pub const VkGeneratedCommandsMemoryRequirementsInfoNV = struct_VkGeneratedCommandsMemoryRequirementsInfoNV;
pub const PFN_vkGetGeneratedCommandsMemoryRequirementsNV = ?*const fn (VkDevice, [*c]const VkGeneratedCommandsMemoryRequirementsInfoNV, [*c]VkMemoryRequirements2) callconv(.C) void;
pub const PFN_vkCmdPreprocessGeneratedCommandsNV = ?*const fn (VkCommandBuffer, [*c]const VkGeneratedCommandsInfoNV) callconv(.C) void;
pub const PFN_vkCmdExecuteGeneratedCommandsNV = ?*const fn (VkCommandBuffer, VkBool32, [*c]const VkGeneratedCommandsInfoNV) callconv(.C) void;
pub const PFN_vkCmdBindPipelineShaderGroupNV = ?*const fn (VkCommandBuffer, VkPipelineBindPoint, VkPipeline, u32) callconv(.C) void;
pub const PFN_vkCreateIndirectCommandsLayoutNV = ?*const fn (VkDevice, [*c]const VkIndirectCommandsLayoutCreateInfoNV, [*c]const VkAllocationCallbacks, [*c]VkIndirectCommandsLayoutNV) callconv(.C) VkResult;
pub const PFN_vkDestroyIndirectCommandsLayoutNV = ?*const fn (VkDevice, VkIndirectCommandsLayoutNV, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub extern fn vkGetGeneratedCommandsMemoryRequirementsNV(device: VkDevice, pInfo: [*c]const VkGeneratedCommandsMemoryRequirementsInfoNV, pMemoryRequirements: [*c]VkMemoryRequirements2) void;
pub extern fn vkCmdPreprocessGeneratedCommandsNV(commandBuffer: VkCommandBuffer, pGeneratedCommandsInfo: [*c]const VkGeneratedCommandsInfoNV) void;
pub extern fn vkCmdExecuteGeneratedCommandsNV(commandBuffer: VkCommandBuffer, isPreprocessed: VkBool32, pGeneratedCommandsInfo: [*c]const VkGeneratedCommandsInfoNV) void;
pub extern fn vkCmdBindPipelineShaderGroupNV(commandBuffer: VkCommandBuffer, pipelineBindPoint: VkPipelineBindPoint, pipeline: VkPipeline, groupIndex: u32) void;
pub extern fn vkCreateIndirectCommandsLayoutNV(device: VkDevice, pCreateInfo: [*c]const VkIndirectCommandsLayoutCreateInfoNV, pAllocator: [*c]const VkAllocationCallbacks, pIndirectCommandsLayout: [*c]VkIndirectCommandsLayoutNV) VkResult;
pub extern fn vkDestroyIndirectCommandsLayoutNV(device: VkDevice, indirectCommandsLayout: VkIndirectCommandsLayoutNV, pAllocator: [*c]const VkAllocationCallbacks) void;
pub const struct_VkPhysicalDeviceInheritedViewportScissorFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    inheritedViewportScissor2D: VkBool32,
};
pub const VkPhysicalDeviceInheritedViewportScissorFeaturesNV = struct_VkPhysicalDeviceInheritedViewportScissorFeaturesNV;
pub const struct_VkCommandBufferInheritanceViewportScissorInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    viewportScissor2D: VkBool32,
    viewportDepthCount: u32,
    pViewportDepths: [*c]const VkViewport,
};
pub const VkCommandBufferInheritanceViewportScissorInfoNV = struct_VkCommandBufferInheritanceViewportScissorInfoNV;
pub const struct_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    texelBufferAlignment: VkBool32,
};
pub const VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT = struct_VkPhysicalDeviceTexelBufferAlignmentFeaturesEXT;
pub const VkPhysicalDeviceTexelBufferAlignmentPropertiesEXT = VkPhysicalDeviceTexelBufferAlignmentProperties;
pub const struct_VkRenderPassTransformBeginInfoQCOM = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    transform: VkSurfaceTransformFlagBitsKHR,
};
pub const VkRenderPassTransformBeginInfoQCOM = struct_VkRenderPassTransformBeginInfoQCOM;
pub const struct_VkCommandBufferInheritanceRenderPassTransformInfoQCOM = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    transform: VkSurfaceTransformFlagBitsKHR,
    renderArea: VkRect2D,
};
pub const VkCommandBufferInheritanceRenderPassTransformInfoQCOM = struct_VkCommandBufferInheritanceRenderPassTransformInfoQCOM;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATE_EXT: c_int = 0;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_FREE_EXT: c_int = 1;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_IMPORT_EXT: c_int = 2;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_UNIMPORT_EXT: c_int = 3;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_ALLOCATION_FAILED_EXT: c_int = 4;
pub const VK_DEVICE_MEMORY_REPORT_EVENT_TYPE_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkDeviceMemoryReportEventTypeEXT = c_uint;
pub const VkDeviceMemoryReportEventTypeEXT = enum_VkDeviceMemoryReportEventTypeEXT;
pub const VkDeviceMemoryReportFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    deviceMemoryReport: VkBool32,
};
pub const VkPhysicalDeviceDeviceMemoryReportFeaturesEXT = struct_VkPhysicalDeviceDeviceMemoryReportFeaturesEXT;
pub const struct_VkDeviceMemoryReportCallbackDataEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    flags: VkDeviceMemoryReportFlagsEXT,
    type: VkDeviceMemoryReportEventTypeEXT,
    memoryObjectId: u64,
    size: VkDeviceSize,
    objectType: VkObjectType,
    objectHandle: u64,
    heapIndex: u32,
};
pub const VkDeviceMemoryReportCallbackDataEXT = struct_VkDeviceMemoryReportCallbackDataEXT;
pub const PFN_vkDeviceMemoryReportCallbackEXT = ?*const fn ([*c]const VkDeviceMemoryReportCallbackDataEXT, ?*anyopaque) callconv(.C) void;
pub const struct_VkDeviceDeviceMemoryReportCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkDeviceMemoryReportFlagsEXT,
    pfnUserCallback: PFN_vkDeviceMemoryReportCallbackEXT,
    pUserData: ?*anyopaque,
};
pub const VkDeviceDeviceMemoryReportCreateInfoEXT = struct_VkDeviceDeviceMemoryReportCreateInfoEXT;
pub const PFN_vkAcquireDrmDisplayEXT = ?*const fn (VkPhysicalDevice, i32, VkDisplayKHR) callconv(.C) VkResult;
pub const PFN_vkGetDrmDisplayEXT = ?*const fn (VkPhysicalDevice, i32, u32, [*c]VkDisplayKHR) callconv(.C) VkResult;
pub extern fn vkAcquireDrmDisplayEXT(physicalDevice: VkPhysicalDevice, drmFd: i32, display: VkDisplayKHR) VkResult;
pub extern fn vkGetDrmDisplayEXT(physicalDevice: VkPhysicalDevice, drmFd: i32, connectorId: u32, display: [*c]VkDisplayKHR) VkResult;
pub const struct_VkPhysicalDeviceRobustness2FeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    robustBufferAccess2: VkBool32,
    robustImageAccess2: VkBool32,
    nullDescriptor: VkBool32,
};
pub const VkPhysicalDeviceRobustness2FeaturesEXT = struct_VkPhysicalDeviceRobustness2FeaturesEXT;
pub const struct_VkPhysicalDeviceRobustness2PropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    robustStorageBufferAccessSizeAlignment: VkDeviceSize,
    robustUniformBufferAccessSizeAlignment: VkDeviceSize,
};
pub const VkPhysicalDeviceRobustness2PropertiesEXT = struct_VkPhysicalDeviceRobustness2PropertiesEXT;
pub const struct_VkSamplerCustomBorderColorCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    customBorderColor: VkClearColorValue,
    format: VkFormat,
};
pub const VkSamplerCustomBorderColorCreateInfoEXT = struct_VkSamplerCustomBorderColorCreateInfoEXT;
pub const struct_VkPhysicalDeviceCustomBorderColorPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxCustomBorderColorSamplers: u32,
};
pub const VkPhysicalDeviceCustomBorderColorPropertiesEXT = struct_VkPhysicalDeviceCustomBorderColorPropertiesEXT;
pub const struct_VkPhysicalDeviceCustomBorderColorFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    customBorderColors: VkBool32,
    customBorderColorWithoutFormat: VkBool32,
};
pub const VkPhysicalDeviceCustomBorderColorFeaturesEXT = struct_VkPhysicalDeviceCustomBorderColorFeaturesEXT;
pub const VkPrivateDataSlotEXT = VkPrivateDataSlot;
pub const VkPrivateDataSlotCreateFlagsEXT = VkPrivateDataSlotCreateFlags;
pub const VkPhysicalDevicePrivateDataFeaturesEXT = VkPhysicalDevicePrivateDataFeatures;
pub const VkDevicePrivateDataCreateInfoEXT = VkDevicePrivateDataCreateInfo;
pub const VkPrivateDataSlotCreateInfoEXT = VkPrivateDataSlotCreateInfo;
pub const PFN_vkCreatePrivateDataSlotEXT = ?*const fn (VkDevice, [*c]const VkPrivateDataSlotCreateInfo, [*c]const VkAllocationCallbacks, [*c]VkPrivateDataSlot) callconv(.C) VkResult;
pub const PFN_vkDestroyPrivateDataSlotEXT = ?*const fn (VkDevice, VkPrivateDataSlot, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkSetPrivateDataEXT = ?*const fn (VkDevice, VkObjectType, u64, VkPrivateDataSlot, u64) callconv(.C) VkResult;
pub const PFN_vkGetPrivateDataEXT = ?*const fn (VkDevice, VkObjectType, u64, VkPrivateDataSlot, [*c]u64) callconv(.C) void;
pub extern fn vkCreatePrivateDataSlotEXT(device: VkDevice, pCreateInfo: [*c]const VkPrivateDataSlotCreateInfo, pAllocator: [*c]const VkAllocationCallbacks, pPrivateDataSlot: [*c]VkPrivateDataSlot) VkResult;
pub extern fn vkDestroyPrivateDataSlotEXT(device: VkDevice, privateDataSlot: VkPrivateDataSlot, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkSetPrivateDataEXT(device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlot, data: u64) VkResult;
pub extern fn vkGetPrivateDataEXT(device: VkDevice, objectType: VkObjectType, objectHandle: u64, privateDataSlot: VkPrivateDataSlot, pData: [*c]u64) void;
pub const VkPhysicalDevicePipelineCreationCacheControlFeaturesEXT = VkPhysicalDevicePipelineCreationCacheControlFeatures;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_DEBUG_INFO_BIT_NV: c_int = 1;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_RESOURCE_TRACKING_BIT_NV: c_int = 2;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_AUTOMATIC_CHECKPOINTS_BIT_NV: c_int = 4;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_ENABLE_SHADER_ERROR_REPORTING_BIT_NV: c_int = 8;
pub const VK_DEVICE_DIAGNOSTICS_CONFIG_FLAG_BITS_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkDeviceDiagnosticsConfigFlagBitsNV = c_uint;
pub const VkDeviceDiagnosticsConfigFlagBitsNV = enum_VkDeviceDiagnosticsConfigFlagBitsNV;
pub const VkDeviceDiagnosticsConfigFlagsNV = VkFlags;
pub const struct_VkPhysicalDeviceDiagnosticsConfigFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    diagnosticsConfig: VkBool32,
};
pub const VkPhysicalDeviceDiagnosticsConfigFeaturesNV = struct_VkPhysicalDeviceDiagnosticsConfigFeaturesNV;
pub const struct_VkDeviceDiagnosticsConfigCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkDeviceDiagnosticsConfigFlagsNV,
};
pub const VkDeviceDiagnosticsConfigCreateInfoNV = struct_VkDeviceDiagnosticsConfigCreateInfoNV;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_VERTEX_INPUT_INTERFACE_BIT_EXT: c_int = 1;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_PRE_RASTERIZATION_SHADERS_BIT_EXT: c_int = 2;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_SHADER_BIT_EXT: c_int = 4;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_FRAGMENT_OUTPUT_INTERFACE_BIT_EXT: c_int = 8;
pub const VK_GRAPHICS_PIPELINE_LIBRARY_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkGraphicsPipelineLibraryFlagBitsEXT = c_uint;
pub const VkGraphicsPipelineLibraryFlagBitsEXT = enum_VkGraphicsPipelineLibraryFlagBitsEXT;
pub const VkGraphicsPipelineLibraryFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    graphicsPipelineLibrary: VkBool32,
};
pub const VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT = struct_VkPhysicalDeviceGraphicsPipelineLibraryFeaturesEXT;
pub const struct_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    graphicsPipelineLibraryFastLinking: VkBool32,
    graphicsPipelineLibraryIndependentInterpolationDecoration: VkBool32,
};
pub const VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT = struct_VkPhysicalDeviceGraphicsPipelineLibraryPropertiesEXT;
pub const struct_VkGraphicsPipelineLibraryCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    flags: VkGraphicsPipelineLibraryFlagsEXT,
};
pub const VkGraphicsPipelineLibraryCreateInfoEXT = struct_VkGraphicsPipelineLibraryCreateInfoEXT;
pub const struct_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderEarlyAndLateFragmentTests: VkBool32,
};
pub const VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD = struct_VkPhysicalDeviceShaderEarlyAndLateFragmentTestsFeaturesAMD;
pub const VK_FRAGMENT_SHADING_RATE_TYPE_FRAGMENT_SIZE_NV: c_int = 0;
pub const VK_FRAGMENT_SHADING_RATE_TYPE_ENUMS_NV: c_int = 1;
pub const VK_FRAGMENT_SHADING_RATE_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkFragmentShadingRateTypeNV = c_uint;
pub const VkFragmentShadingRateTypeNV = enum_VkFragmentShadingRateTypeNV;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV: c_int = 0;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV: c_int = 1;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV: c_int = 4;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV: c_int = 5;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV: c_int = 6;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV: c_int = 9;
pub const VK_FRAGMENT_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV: c_int = 10;
pub const VK_FRAGMENT_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV: c_int = 11;
pub const VK_FRAGMENT_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV: c_int = 12;
pub const VK_FRAGMENT_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV: c_int = 13;
pub const VK_FRAGMENT_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV: c_int = 14;
pub const VK_FRAGMENT_SHADING_RATE_NO_INVOCATIONS_NV: c_int = 15;
pub const VK_FRAGMENT_SHADING_RATE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkFragmentShadingRateNV = c_uint;
pub const VkFragmentShadingRateNV = enum_VkFragmentShadingRateNV;
pub const struct_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    fragmentShadingRateEnums: VkBool32,
    supersampleFragmentShadingRates: VkBool32,
    noInvocationFragmentShadingRates: VkBool32,
};
pub const VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV = struct_VkPhysicalDeviceFragmentShadingRateEnumsFeaturesNV;
pub const struct_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxFragmentShadingRateInvocationCount: VkSampleCountFlagBits,
};
pub const VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV = struct_VkPhysicalDeviceFragmentShadingRateEnumsPropertiesNV;
pub const struct_VkPipelineFragmentShadingRateEnumStateCreateInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    shadingRateType: VkFragmentShadingRateTypeNV,
    shadingRate: VkFragmentShadingRateNV,
    combinerOps: [2]VkFragmentShadingRateCombinerOpKHR,
};
pub const VkPipelineFragmentShadingRateEnumStateCreateInfoNV = struct_VkPipelineFragmentShadingRateEnumStateCreateInfoNV;
pub const PFN_vkCmdSetFragmentShadingRateEnumNV = ?*const fn (VkCommandBuffer, VkFragmentShadingRateNV, [*c]const VkFragmentShadingRateCombinerOpKHR) callconv(.C) void;
pub extern fn vkCmdSetFragmentShadingRateEnumNV(commandBuffer: VkCommandBuffer, shadingRate: VkFragmentShadingRateNV, combinerOps: [*c]const VkFragmentShadingRateCombinerOpKHR) void;
pub const VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_STATIC_NV: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MATRIX_MOTION_NV: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_SRT_MOTION_NV: c_int = 2;
pub const VK_ACCELERATION_STRUCTURE_MOTION_INSTANCE_TYPE_MAX_ENUM_NV: c_int = 2147483647;
pub const enum_VkAccelerationStructureMotionInstanceTypeNV = c_uint;
pub const VkAccelerationStructureMotionInstanceTypeNV = enum_VkAccelerationStructureMotionInstanceTypeNV;
pub const VkAccelerationStructureMotionInfoFlagsNV = VkFlags;
pub const VkAccelerationStructureMotionInstanceFlagsNV = VkFlags;
pub const union_VkDeviceOrHostAddressConstKHR = extern union {
    deviceAddress: VkDeviceAddress,
    hostAddress: ?*const anyopaque,
};
pub const VkDeviceOrHostAddressConstKHR = union_VkDeviceOrHostAddressConstKHR;
pub const struct_VkAccelerationStructureGeometryMotionTrianglesDataNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    vertexData: VkDeviceOrHostAddressConstKHR,
};
pub const VkAccelerationStructureGeometryMotionTrianglesDataNV = struct_VkAccelerationStructureGeometryMotionTrianglesDataNV;
pub const struct_VkAccelerationStructureMotionInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    maxInstances: u32,
    flags: VkAccelerationStructureMotionInfoFlagsNV,
};
pub const VkAccelerationStructureMotionInfoNV = struct_VkAccelerationStructureMotionInfoNV; // /Users/slimsag/Desktop/hexops/mach/gpu/libs/mach-glfw/upstream/vulkan_headers/include/vulkan/vulkan_core.h:13544:35: warning: struct demoted to opaque type - has bitfield
pub const struct_VkAccelerationStructureMatrixMotionInstanceNV = opaque {};
pub const VkAccelerationStructureMatrixMotionInstanceNV = struct_VkAccelerationStructureMatrixMotionInstanceNV;
pub const struct_VkSRTDataNV = extern struct {
    sx: f32,
    a: f32,
    b: f32,
    pvx: f32,
    sy: f32,
    c: f32,
    pvy: f32,
    sz: f32,
    pvz: f32,
    qx: f32,
    qy: f32,
    qz: f32,
    qw: f32,
    tx: f32,
    ty: f32,
    tz: f32,
};
pub const VkSRTDataNV = struct_VkSRTDataNV; // /Users/slimsag/Desktop/hexops/mach/gpu/libs/mach-glfw/upstream/vulkan_headers/include/vulkan/vulkan_core.h:13573:35: warning: struct demoted to opaque type - has bitfield
pub const struct_VkAccelerationStructureSRTMotionInstanceNV = opaque {};
pub const VkAccelerationStructureSRTMotionInstanceNV = struct_VkAccelerationStructureSRTMotionInstanceNV;
pub const union_VkAccelerationStructureMotionInstanceDataNV = extern union {
    staticInstance: VkAccelerationStructureInstanceKHR,
    matrixMotionInstance: VkAccelerationStructureMatrixMotionInstanceNV,
    srtMotionInstance: VkAccelerationStructureSRTMotionInstanceNV,
};
pub const VkAccelerationStructureMotionInstanceDataNV = union_VkAccelerationStructureMotionInstanceDataNV;
pub const struct_VkAccelerationStructureMotionInstanceNV = extern struct {
    type: VkAccelerationStructureMotionInstanceTypeNV,
    flags: VkAccelerationStructureMotionInstanceFlagsNV,
    data: VkAccelerationStructureMotionInstanceDataNV,
};
pub const VkAccelerationStructureMotionInstanceNV = struct_VkAccelerationStructureMotionInstanceNV;
pub const struct_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    rayTracingMotionBlur: VkBool32,
    rayTracingMotionBlurPipelineTraceRaysIndirect: VkBool32,
};
pub const VkPhysicalDeviceRayTracingMotionBlurFeaturesNV = struct_VkPhysicalDeviceRayTracingMotionBlurFeaturesNV;
pub const struct_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    ycbcr2plane444Formats: VkBool32,
};
pub const VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT = struct_VkPhysicalDeviceYcbcr2Plane444FormatsFeaturesEXT;
pub const struct_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    fragmentDensityMapDeferred: VkBool32,
};
pub const VkPhysicalDeviceFragmentDensityMap2FeaturesEXT = struct_VkPhysicalDeviceFragmentDensityMap2FeaturesEXT;
pub const struct_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    subsampledLoads: VkBool32,
    subsampledCoarseReconstructionEarlyAccess: VkBool32,
    maxSubsampledArrayLayers: u32,
    maxDescriptorSetSubsampledSamplers: u32,
};
pub const VkPhysicalDeviceFragmentDensityMap2PropertiesEXT = struct_VkPhysicalDeviceFragmentDensityMap2PropertiesEXT;
pub const struct_VkCopyCommandTransformInfoQCOM = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    transform: VkSurfaceTransformFlagBitsKHR,
};
pub const VkCopyCommandTransformInfoQCOM = struct_VkCopyCommandTransformInfoQCOM;
pub const VkPhysicalDeviceImageRobustnessFeaturesEXT = VkPhysicalDeviceImageRobustnessFeatures;
pub const VK_IMAGE_COMPRESSION_DEFAULT_EXT: c_int = 0;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_DEFAULT_EXT: c_int = 1;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_EXPLICIT_EXT: c_int = 2;
pub const VK_IMAGE_COMPRESSION_DISABLED_EXT: c_int = 4;
pub const VK_IMAGE_COMPRESSION_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkImageCompressionFlagBitsEXT = c_uint;
pub const VkImageCompressionFlagBitsEXT = enum_VkImageCompressionFlagBitsEXT;
pub const VkImageCompressionFlagsEXT = VkFlags;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_NONE_EXT: c_int = 0;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_1BPC_BIT_EXT: c_int = 1;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_2BPC_BIT_EXT: c_int = 2;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_3BPC_BIT_EXT: c_int = 4;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_4BPC_BIT_EXT: c_int = 8;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_5BPC_BIT_EXT: c_int = 16;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_6BPC_BIT_EXT: c_int = 32;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_7BPC_BIT_EXT: c_int = 64;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_8BPC_BIT_EXT: c_int = 128;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_9BPC_BIT_EXT: c_int = 256;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_10BPC_BIT_EXT: c_int = 512;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_11BPC_BIT_EXT: c_int = 1024;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_12BPC_BIT_EXT: c_int = 2048;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_13BPC_BIT_EXT: c_int = 4096;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_14BPC_BIT_EXT: c_int = 8192;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_15BPC_BIT_EXT: c_int = 16384;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_16BPC_BIT_EXT: c_int = 32768;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_17BPC_BIT_EXT: c_int = 65536;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_18BPC_BIT_EXT: c_int = 131072;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_19BPC_BIT_EXT: c_int = 262144;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_20BPC_BIT_EXT: c_int = 524288;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_21BPC_BIT_EXT: c_int = 1048576;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_22BPC_BIT_EXT: c_int = 2097152;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_23BPC_BIT_EXT: c_int = 4194304;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_24BPC_BIT_EXT: c_int = 8388608;
pub const VK_IMAGE_COMPRESSION_FIXED_RATE_FLAG_BITS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkImageCompressionFixedRateFlagBitsEXT = c_uint;
pub const VkImageCompressionFixedRateFlagBitsEXT = enum_VkImageCompressionFixedRateFlagBitsEXT;
pub const VkImageCompressionFixedRateFlagsEXT = VkFlags;
pub const struct_VkPhysicalDeviceImageCompressionControlFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    imageCompressionControl: VkBool32,
};
pub const VkPhysicalDeviceImageCompressionControlFeaturesEXT = struct_VkPhysicalDeviceImageCompressionControlFeaturesEXT;
pub const struct_VkImageCompressionControlEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkImageCompressionFlagsEXT,
    compressionControlPlaneCount: u32,
    pFixedRateFlags: [*c]VkImageCompressionFixedRateFlagsEXT,
};
pub const VkImageCompressionControlEXT = struct_VkImageCompressionControlEXT;
pub const struct_VkSubresourceLayout2EXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    subresourceLayout: VkSubresourceLayout,
};
pub const VkSubresourceLayout2EXT = struct_VkSubresourceLayout2EXT;
pub const struct_VkImageSubresource2EXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    imageSubresource: VkImageSubresource,
};
pub const VkImageSubresource2EXT = struct_VkImageSubresource2EXT;
pub const struct_VkImageCompressionPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    imageCompressionFlags: VkImageCompressionFlagsEXT,
    imageCompressionFixedRateFlags: VkImageCompressionFixedRateFlagsEXT,
};
pub const VkImageCompressionPropertiesEXT = struct_VkImageCompressionPropertiesEXT;
pub const PFN_vkGetImageSubresourceLayout2EXT = ?*const fn (VkDevice, VkImage, [*c]const VkImageSubresource2EXT, [*c]VkSubresourceLayout2EXT) callconv(.C) void;
pub extern fn vkGetImageSubresourceLayout2EXT(device: VkDevice, image: VkImage, pSubresource: [*c]const VkImageSubresource2EXT, pLayout: [*c]VkSubresourceLayout2EXT) void;
pub const struct_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    attachmentFeedbackLoopLayout: VkBool32,
};
pub const VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT = struct_VkPhysicalDeviceAttachmentFeedbackLoopLayoutFeaturesEXT;
pub const struct_VkPhysicalDevice4444FormatsFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    formatA4R4G4B4: VkBool32,
    formatA4B4G4R4: VkBool32,
};
pub const VkPhysicalDevice4444FormatsFeaturesEXT = struct_VkPhysicalDevice4444FormatsFeaturesEXT;
pub const struct_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    rasterizationOrderColorAttachmentAccess: VkBool32,
    rasterizationOrderDepthAttachmentAccess: VkBool32,
    rasterizationOrderStencilAttachmentAccess: VkBool32,
};
pub const VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM = struct_VkPhysicalDeviceRasterizationOrderAttachmentAccessFeaturesARM;
pub const struct_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    formatRgba10x6WithoutYCbCrSampler: VkBool32,
};
pub const VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT = struct_VkPhysicalDeviceRGBA10X6FormatsFeaturesEXT;
pub const PFN_vkAcquireWinrtDisplayNV = ?*const fn (VkPhysicalDevice, VkDisplayKHR) callconv(.C) VkResult;
pub const PFN_vkGetWinrtDisplayNV = ?*const fn (VkPhysicalDevice, u32, [*c]VkDisplayKHR) callconv(.C) VkResult;
pub extern fn vkAcquireWinrtDisplayNV(physicalDevice: VkPhysicalDevice, display: VkDisplayKHR) VkResult;
pub extern fn vkGetWinrtDisplayNV(physicalDevice: VkPhysicalDevice, deviceRelativeId: u32, pDisplay: [*c]VkDisplayKHR) VkResult;
pub const struct_VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    mutableDescriptorType: VkBool32,
};
pub const VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE = struct_VkPhysicalDeviceMutableDescriptorTypeFeaturesVALVE;
pub const struct_VkMutableDescriptorTypeListVALVE = extern struct {
    descriptorTypeCount: u32,
    pDescriptorTypes: [*c]const VkDescriptorType,
};
pub const VkMutableDescriptorTypeListVALVE = struct_VkMutableDescriptorTypeListVALVE;
pub const struct_VkMutableDescriptorTypeCreateInfoVALVE = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    mutableDescriptorTypeListCount: u32,
    pMutableDescriptorTypeLists: [*c]const VkMutableDescriptorTypeListVALVE,
};
pub const VkMutableDescriptorTypeCreateInfoVALVE = struct_VkMutableDescriptorTypeCreateInfoVALVE;
pub const struct_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    vertexInputDynamicState: VkBool32,
};
pub const VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT = struct_VkPhysicalDeviceVertexInputDynamicStateFeaturesEXT;
pub const struct_VkVertexInputBindingDescription2EXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    binding: u32,
    stride: u32,
    inputRate: VkVertexInputRate,
    divisor: u32,
};
pub const VkVertexInputBindingDescription2EXT = struct_VkVertexInputBindingDescription2EXT;
pub const struct_VkVertexInputAttributeDescription2EXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    location: u32,
    binding: u32,
    format: VkFormat,
    offset: u32,
};
pub const VkVertexInputAttributeDescription2EXT = struct_VkVertexInputAttributeDescription2EXT;
pub const PFN_vkCmdSetVertexInputEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkVertexInputBindingDescription2EXT, u32, [*c]const VkVertexInputAttributeDescription2EXT) callconv(.C) void;
pub extern fn vkCmdSetVertexInputEXT(commandBuffer: VkCommandBuffer, vertexBindingDescriptionCount: u32, pVertexBindingDescriptions: [*c]const VkVertexInputBindingDescription2EXT, vertexAttributeDescriptionCount: u32, pVertexAttributeDescriptions: [*c]const VkVertexInputAttributeDescription2EXT) void;
pub const struct_VkPhysicalDeviceDrmPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    hasPrimary: VkBool32,
    hasRender: VkBool32,
    primaryMajor: i64,
    primaryMinor: i64,
    renderMajor: i64,
    renderMinor: i64,
};
pub const VkPhysicalDeviceDrmPropertiesEXT = struct_VkPhysicalDeviceDrmPropertiesEXT;
pub const struct_VkPhysicalDeviceDepthClipControlFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    depthClipControl: VkBool32,
};
pub const VkPhysicalDeviceDepthClipControlFeaturesEXT = struct_VkPhysicalDeviceDepthClipControlFeaturesEXT;
pub const struct_VkPipelineViewportDepthClipControlCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    negativeOneToOne: VkBool32,
};
pub const VkPipelineViewportDepthClipControlCreateInfoEXT = struct_VkPipelineViewportDepthClipControlCreateInfoEXT;
pub const struct_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    primitiveTopologyListRestart: VkBool32,
    primitiveTopologyPatchListRestart: VkBool32,
};
pub const VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT = struct_VkPhysicalDevicePrimitiveTopologyListRestartFeaturesEXT;
pub const struct_VkSubpassShadingPipelineCreateInfoHUAWEI = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    renderPass: VkRenderPass,
    subpass: u32,
};
pub const VkSubpassShadingPipelineCreateInfoHUAWEI = struct_VkSubpassShadingPipelineCreateInfoHUAWEI;
pub const struct_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    subpassShading: VkBool32,
};
pub const VkPhysicalDeviceSubpassShadingFeaturesHUAWEI = struct_VkPhysicalDeviceSubpassShadingFeaturesHUAWEI;
pub const struct_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxSubpassShadingWorkgroupSizeAspectRatio: u32,
};
pub const VkPhysicalDeviceSubpassShadingPropertiesHUAWEI = struct_VkPhysicalDeviceSubpassShadingPropertiesHUAWEI;
pub const PFN_vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI = ?*const fn (VkDevice, VkRenderPass, [*c]VkExtent2D) callconv(.C) VkResult;
pub const PFN_vkCmdSubpassShadingHUAWEI = ?*const fn (VkCommandBuffer) callconv(.C) void;
pub extern fn vkGetDeviceSubpassShadingMaxWorkgroupSizeHUAWEI(device: VkDevice, renderpass: VkRenderPass, pMaxWorkgroupSize: [*c]VkExtent2D) VkResult;
pub extern fn vkCmdSubpassShadingHUAWEI(commandBuffer: VkCommandBuffer) void;
pub const struct_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    invocationMask: VkBool32,
};
pub const VkPhysicalDeviceInvocationMaskFeaturesHUAWEI = struct_VkPhysicalDeviceInvocationMaskFeaturesHUAWEI;
pub const PFN_vkCmdBindInvocationMaskHUAWEI = ?*const fn (VkCommandBuffer, VkImageView, VkImageLayout) callconv(.C) void;
pub extern fn vkCmdBindInvocationMaskHUAWEI(commandBuffer: VkCommandBuffer, imageView: VkImageView, imageLayout: VkImageLayout) void;
pub const VkRemoteAddressNV = ?*anyopaque;
pub const struct_VkMemoryGetRemoteAddressInfoNV = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    memory: VkDeviceMemory,
    handleType: VkExternalMemoryHandleTypeFlagBits,
};
pub const VkMemoryGetRemoteAddressInfoNV = struct_VkMemoryGetRemoteAddressInfoNV;
pub const struct_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    externalMemoryRDMA: VkBool32,
};
pub const VkPhysicalDeviceExternalMemoryRDMAFeaturesNV = struct_VkPhysicalDeviceExternalMemoryRDMAFeaturesNV;
pub const PFN_vkGetMemoryRemoteAddressNV = ?*const fn (VkDevice, [*c]const VkMemoryGetRemoteAddressInfoNV, [*c]VkRemoteAddressNV) callconv(.C) VkResult;
pub extern fn vkGetMemoryRemoteAddressNV(device: VkDevice, pMemoryGetRemoteAddressInfo: [*c]const VkMemoryGetRemoteAddressInfoNV, pAddress: [*c]VkRemoteAddressNV) VkResult;
pub const VkPipelineInfoEXT = VkPipelineInfoKHR;
pub const struct_VkPipelinePropertiesIdentifierEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    pipelineIdentifier: [16]u8,
};
pub const VkPipelinePropertiesIdentifierEXT = struct_VkPipelinePropertiesIdentifierEXT;
pub const struct_VkPhysicalDevicePipelinePropertiesFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    pipelinePropertiesIdentifier: VkBool32,
};
pub const VkPhysicalDevicePipelinePropertiesFeaturesEXT = struct_VkPhysicalDevicePipelinePropertiesFeaturesEXT;
pub const PFN_vkGetPipelinePropertiesEXT = ?*const fn (VkDevice, [*c]const VkPipelineInfoEXT, [*c]VkBaseOutStructure) callconv(.C) VkResult;
pub extern fn vkGetPipelinePropertiesEXT(device: VkDevice, pPipelineInfo: [*c]const VkPipelineInfoEXT, pPipelineProperties: [*c]VkBaseOutStructure) VkResult;
pub const struct_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    multisampledRenderToSingleSampled: VkBool32,
};
pub const VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT = struct_VkPhysicalDeviceMultisampledRenderToSingleSampledFeaturesEXT;
pub const struct_VkSubpassResolvePerformanceQueryEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    optimal: VkBool32,
};
pub const VkSubpassResolvePerformanceQueryEXT = struct_VkSubpassResolvePerformanceQueryEXT;
pub const struct_VkMultisampledRenderToSingleSampledInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    multisampledRenderToSingleSampledEnable: VkBool32,
    rasterizationSamples: VkSampleCountFlagBits,
};
pub const VkMultisampledRenderToSingleSampledInfoEXT = struct_VkMultisampledRenderToSingleSampledInfoEXT;
pub const struct_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    extendedDynamicState2: VkBool32,
    extendedDynamicState2LogicOp: VkBool32,
    extendedDynamicState2PatchControlPoints: VkBool32,
};
pub const VkPhysicalDeviceExtendedDynamicState2FeaturesEXT = struct_VkPhysicalDeviceExtendedDynamicState2FeaturesEXT;
pub const PFN_vkCmdSetPatchControlPointsEXT = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub const PFN_vkCmdSetRasterizerDiscardEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetDepthBiasEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub const PFN_vkCmdSetLogicOpEXT = ?*const fn (VkCommandBuffer, VkLogicOp) callconv(.C) void;
pub const PFN_vkCmdSetPrimitiveRestartEnableEXT = ?*const fn (VkCommandBuffer, VkBool32) callconv(.C) void;
pub extern fn vkCmdSetPatchControlPointsEXT(commandBuffer: VkCommandBuffer, patchControlPoints: u32) void;
pub extern fn vkCmdSetRasterizerDiscardEnableEXT(commandBuffer: VkCommandBuffer, rasterizerDiscardEnable: VkBool32) void;
pub extern fn vkCmdSetDepthBiasEnableEXT(commandBuffer: VkCommandBuffer, depthBiasEnable: VkBool32) void;
pub extern fn vkCmdSetLogicOpEXT(commandBuffer: VkCommandBuffer, logicOp: VkLogicOp) void;
pub extern fn vkCmdSetPrimitiveRestartEnableEXT(commandBuffer: VkCommandBuffer, primitiveRestartEnable: VkBool32) void;
pub const struct_VkPhysicalDeviceColorWriteEnableFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    colorWriteEnable: VkBool32,
};
pub const VkPhysicalDeviceColorWriteEnableFeaturesEXT = struct_VkPhysicalDeviceColorWriteEnableFeaturesEXT;
pub const struct_VkPipelineColorWriteCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    attachmentCount: u32,
    pColorWriteEnables: [*c]const VkBool32,
};
pub const VkPipelineColorWriteCreateInfoEXT = struct_VkPipelineColorWriteCreateInfoEXT;
pub const PFN_vkCmdSetColorWriteEnableEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkBool32) callconv(.C) void;
pub extern fn vkCmdSetColorWriteEnableEXT(commandBuffer: VkCommandBuffer, attachmentCount: u32, pColorWriteEnables: [*c]const VkBool32) void;
pub const struct_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    primitivesGeneratedQuery: VkBool32,
    primitivesGeneratedQueryWithRasterizerDiscard: VkBool32,
    primitivesGeneratedQueryWithNonZeroStreams: VkBool32,
};
pub const VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT = struct_VkPhysicalDevicePrimitivesGeneratedQueryFeaturesEXT;
pub const VkPhysicalDeviceGlobalPriorityQueryFeaturesEXT = VkPhysicalDeviceGlobalPriorityQueryFeaturesKHR;
pub const VkQueueFamilyGlobalPriorityPropertiesEXT = VkQueueFamilyGlobalPriorityPropertiesKHR;
pub const struct_VkPhysicalDeviceImageViewMinLodFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    minLod: VkBool32,
};
pub const VkPhysicalDeviceImageViewMinLodFeaturesEXT = struct_VkPhysicalDeviceImageViewMinLodFeaturesEXT;
pub const struct_VkImageViewMinLodCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    minLod: f32,
};
pub const VkImageViewMinLodCreateInfoEXT = struct_VkImageViewMinLodCreateInfoEXT;
pub const struct_VkPhysicalDeviceMultiDrawFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    multiDraw: VkBool32,
};
pub const VkPhysicalDeviceMultiDrawFeaturesEXT = struct_VkPhysicalDeviceMultiDrawFeaturesEXT;
pub const struct_VkPhysicalDeviceMultiDrawPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxMultiDrawCount: u32,
};
pub const VkPhysicalDeviceMultiDrawPropertiesEXT = struct_VkPhysicalDeviceMultiDrawPropertiesEXT;
pub const struct_VkMultiDrawInfoEXT = extern struct {
    firstVertex: u32,
    vertexCount: u32,
};
pub const VkMultiDrawInfoEXT = struct_VkMultiDrawInfoEXT;
pub const struct_VkMultiDrawIndexedInfoEXT = extern struct {
    firstIndex: u32,
    indexCount: u32,
    vertexOffset: i32,
};
pub const VkMultiDrawIndexedInfoEXT = struct_VkMultiDrawIndexedInfoEXT;
pub const PFN_vkCmdDrawMultiEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkMultiDrawInfoEXT, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCmdDrawMultiIndexedEXT = ?*const fn (VkCommandBuffer, u32, [*c]const VkMultiDrawIndexedInfoEXT, u32, u32, u32, [*c]const i32) callconv(.C) void;
pub extern fn vkCmdDrawMultiEXT(commandBuffer: VkCommandBuffer, drawCount: u32, pVertexInfo: [*c]const VkMultiDrawInfoEXT, instanceCount: u32, firstInstance: u32, stride: u32) void;
pub extern fn vkCmdDrawMultiIndexedEXT(commandBuffer: VkCommandBuffer, drawCount: u32, pIndexInfo: [*c]const VkMultiDrawIndexedInfoEXT, instanceCount: u32, firstInstance: u32, stride: u32, pVertexOffset: [*c]const i32) void;
pub const struct_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    image2DViewOf3D: VkBool32,
    sampler2DViewOf3D: VkBool32,
};
pub const VkPhysicalDeviceImage2DViewOf3DFeaturesEXT = struct_VkPhysicalDeviceImage2DViewOf3DFeaturesEXT;
pub const struct_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    borderColorSwizzle: VkBool32,
    borderColorSwizzleFromImage: VkBool32,
};
pub const VkPhysicalDeviceBorderColorSwizzleFeaturesEXT = struct_VkPhysicalDeviceBorderColorSwizzleFeaturesEXT;
pub const struct_VkSamplerBorderColorComponentMappingCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    components: VkComponentMapping,
    srgb: VkBool32,
};
pub const VkSamplerBorderColorComponentMappingCreateInfoEXT = struct_VkSamplerBorderColorComponentMappingCreateInfoEXT;
pub const struct_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    pageableDeviceLocalMemory: VkBool32,
};
pub const VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT = struct_VkPhysicalDevicePageableDeviceLocalMemoryFeaturesEXT;
pub const PFN_vkSetDeviceMemoryPriorityEXT = ?*const fn (VkDevice, VkDeviceMemory, f32) callconv(.C) void;
pub extern fn vkSetDeviceMemoryPriorityEXT(device: VkDevice, memory: VkDeviceMemory, priority: f32) void;
pub const struct_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    descriptorSetHostMapping: VkBool32,
};
pub const VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE = struct_VkPhysicalDeviceDescriptorSetHostMappingFeaturesVALVE;
pub const struct_VkDescriptorSetBindingReferenceVALVE = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    descriptorSetLayout: VkDescriptorSetLayout,
    binding: u32,
};
pub const VkDescriptorSetBindingReferenceVALVE = struct_VkDescriptorSetBindingReferenceVALVE;
pub const struct_VkDescriptorSetLayoutHostMappingInfoVALVE = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    descriptorOffset: usize,
    descriptorSize: u32,
};
pub const VkDescriptorSetLayoutHostMappingInfoVALVE = struct_VkDescriptorSetLayoutHostMappingInfoVALVE;
pub const PFN_vkGetDescriptorSetLayoutHostMappingInfoVALVE = ?*const fn (VkDevice, [*c]const VkDescriptorSetBindingReferenceVALVE, [*c]VkDescriptorSetLayoutHostMappingInfoVALVE) callconv(.C) void;
pub const PFN_vkGetDescriptorSetHostMappingVALVE = ?*const fn (VkDevice, VkDescriptorSet, [*c]?*anyopaque) callconv(.C) void;
pub extern fn vkGetDescriptorSetLayoutHostMappingInfoVALVE(device: VkDevice, pBindingReference: [*c]const VkDescriptorSetBindingReferenceVALVE, pHostMapping: [*c]VkDescriptorSetLayoutHostMappingInfoVALVE) void;
pub extern fn vkGetDescriptorSetHostMappingVALVE(device: VkDevice, descriptorSet: VkDescriptorSet, ppData: [*c]?*anyopaque) void;
pub const struct_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    nonSeamlessCubeMap: VkBool32,
};
pub const VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT = struct_VkPhysicalDeviceNonSeamlessCubeMapFeaturesEXT;
pub const struct_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    fragmentDensityMapOffset: VkBool32,
};
pub const VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM = struct_VkPhysicalDeviceFragmentDensityMapOffsetFeaturesQCOM;
pub const struct_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    fragmentDensityOffsetGranularity: VkExtent2D,
};
pub const VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM = struct_VkPhysicalDeviceFragmentDensityMapOffsetPropertiesQCOM;
pub const struct_VkSubpassFragmentDensityMapOffsetEndInfoQCOM = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    fragmentDensityOffsetCount: u32,
    pFragmentDensityOffsets: [*c]const VkOffset2D,
};
pub const VkSubpassFragmentDensityMapOffsetEndInfoQCOM = struct_VkSubpassFragmentDensityMapOffsetEndInfoQCOM;
pub const struct_VkPhysicalDeviceLinearColorAttachmentFeaturesNV = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    linearColorAttachment: VkBool32,
};
pub const VkPhysicalDeviceLinearColorAttachmentFeaturesNV = struct_VkPhysicalDeviceLinearColorAttachmentFeaturesNV;
pub const struct_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    imageCompressionControlSwapchain: VkBool32,
};
pub const VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT = struct_VkPhysicalDeviceImageCompressionControlSwapchainFeaturesEXT;
pub const struct_VkImageViewSampleWeightCreateInfoQCOM = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    filterCenter: VkOffset2D,
    filterSize: VkExtent2D,
    numPhases: u32,
};
pub const VkImageViewSampleWeightCreateInfoQCOM = struct_VkImageViewSampleWeightCreateInfoQCOM;
pub const struct_VkPhysicalDeviceImageProcessingFeaturesQCOM = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    textureSampleWeighted: VkBool32,
    textureBoxFilter: VkBool32,
    textureBlockMatch: VkBool32,
};
pub const VkPhysicalDeviceImageProcessingFeaturesQCOM = struct_VkPhysicalDeviceImageProcessingFeaturesQCOM;
pub const struct_VkPhysicalDeviceImageProcessingPropertiesQCOM = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxWeightFilterPhases: u32,
    maxWeightFilterDimension: VkExtent2D,
    maxBlockMatchRegion: VkExtent2D,
    maxBoxFilterBlockSize: VkExtent2D,
};
pub const VkPhysicalDeviceImageProcessingPropertiesQCOM = struct_VkPhysicalDeviceImageProcessingPropertiesQCOM;
pub const VK_SUBPASS_MERGE_STATUS_MERGED_EXT: c_int = 0;
pub const VK_SUBPASS_MERGE_STATUS_DISALLOWED_EXT: c_int = 1;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SIDE_EFFECTS_EXT: c_int = 2;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SAMPLES_MISMATCH_EXT: c_int = 3;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_VIEWS_MISMATCH_EXT: c_int = 4;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_ALIASING_EXT: c_int = 5;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPENDENCIES_EXT: c_int = 6;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INCOMPATIBLE_INPUT_ATTACHMENT_EXT: c_int = 7;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_TOO_MANY_ATTACHMENTS_EXT: c_int = 8;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_INSUFFICIENT_STORAGE_EXT: c_int = 9;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_DEPTH_STENCIL_COUNT_EXT: c_int = 10;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_RESOLVE_ATTACHMENT_REUSE_EXT: c_int = 11;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_SINGLE_SUBPASS_EXT: c_int = 12;
pub const VK_SUBPASS_MERGE_STATUS_NOT_MERGED_UNSPECIFIED_EXT: c_int = 13;
pub const VK_SUBPASS_MERGE_STATUS_MAX_ENUM_EXT: c_int = 2147483647;
pub const enum_VkSubpassMergeStatusEXT = c_uint;
pub const VkSubpassMergeStatusEXT = enum_VkSubpassMergeStatusEXT;
pub const struct_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    subpassMergeFeedback: VkBool32,
};
pub const VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT = struct_VkPhysicalDeviceSubpassMergeFeedbackFeaturesEXT;
pub const struct_VkRenderPassCreationControlEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    disallowMerging: VkBool32,
};
pub const VkRenderPassCreationControlEXT = struct_VkRenderPassCreationControlEXT;
pub const struct_VkRenderPassCreationFeedbackInfoEXT = extern struct {
    postMergeSubpassCount: u32,
};
pub const VkRenderPassCreationFeedbackInfoEXT = struct_VkRenderPassCreationFeedbackInfoEXT;
pub const struct_VkRenderPassCreationFeedbackCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    pRenderPassFeedback: [*c]VkRenderPassCreationFeedbackInfoEXT,
};
pub const VkRenderPassCreationFeedbackCreateInfoEXT = struct_VkRenderPassCreationFeedbackCreateInfoEXT;
pub const struct_VkRenderPassSubpassFeedbackInfoEXT = extern struct {
    subpassMergeStatus: VkSubpassMergeStatusEXT,
    description: [256]u8,
    postMergeIndex: u32,
};
pub const VkRenderPassSubpassFeedbackInfoEXT = struct_VkRenderPassSubpassFeedbackInfoEXT;
pub const struct_VkRenderPassSubpassFeedbackCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    pSubpassFeedback: [*c]VkRenderPassSubpassFeedbackInfoEXT,
};
pub const VkRenderPassSubpassFeedbackCreateInfoEXT = struct_VkRenderPassSubpassFeedbackCreateInfoEXT;
pub const struct_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderModuleIdentifier: VkBool32,
};
pub const VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT = struct_VkPhysicalDeviceShaderModuleIdentifierFeaturesEXT;
pub const struct_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderModuleIdentifierAlgorithmUUID: [16]u8,
};
pub const VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT = struct_VkPhysicalDeviceShaderModuleIdentifierPropertiesEXT;
pub const struct_VkPipelineShaderStageModuleIdentifierCreateInfoEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    identifierSize: u32,
    pIdentifier: [*c]const u8,
};
pub const VkPipelineShaderStageModuleIdentifierCreateInfoEXT = struct_VkPipelineShaderStageModuleIdentifierCreateInfoEXT;
pub const struct_VkShaderModuleIdentifierEXT = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    identifierSize: u32,
    identifier: [32]u8,
};
pub const VkShaderModuleIdentifierEXT = struct_VkShaderModuleIdentifierEXT;
pub const PFN_vkGetShaderModuleIdentifierEXT = ?*const fn (VkDevice, VkShaderModule, [*c]VkShaderModuleIdentifierEXT) callconv(.C) void;
pub const PFN_vkGetShaderModuleCreateInfoIdentifierEXT = ?*const fn (VkDevice, [*c]const VkShaderModuleCreateInfo, [*c]VkShaderModuleIdentifierEXT) callconv(.C) void;
pub extern fn vkGetShaderModuleIdentifierEXT(device: VkDevice, shaderModule: VkShaderModule, pIdentifier: [*c]VkShaderModuleIdentifierEXT) void;
pub extern fn vkGetShaderModuleCreateInfoIdentifierEXT(device: VkDevice, pCreateInfo: [*c]const VkShaderModuleCreateInfo, pIdentifier: [*c]VkShaderModuleIdentifierEXT) void;
pub const struct_VkPhysicalDeviceTilePropertiesFeaturesQCOM = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    tileProperties: VkBool32,
};
pub const VkPhysicalDeviceTilePropertiesFeaturesQCOM = struct_VkPhysicalDeviceTilePropertiesFeaturesQCOM;
pub const struct_VkTilePropertiesQCOM = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    tileSize: VkExtent3D,
    apronSize: VkExtent2D,
    origin: VkOffset2D,
};
pub const VkTilePropertiesQCOM = struct_VkTilePropertiesQCOM;
pub const PFN_vkGetFramebufferTilePropertiesQCOM = ?*const fn (VkDevice, VkFramebuffer, [*c]u32, [*c]VkTilePropertiesQCOM) callconv(.C) VkResult;
pub const PFN_vkGetDynamicRenderingTilePropertiesQCOM = ?*const fn (VkDevice, [*c]const VkRenderingInfo, [*c]VkTilePropertiesQCOM) callconv(.C) VkResult;
pub extern fn vkGetFramebufferTilePropertiesQCOM(device: VkDevice, framebuffer: VkFramebuffer, pPropertiesCount: [*c]u32, pProperties: [*c]VkTilePropertiesQCOM) VkResult;
pub extern fn vkGetDynamicRenderingTilePropertiesQCOM(device: VkDevice, pRenderingInfo: [*c]const VkRenderingInfo, pProperties: [*c]VkTilePropertiesQCOM) VkResult;
pub const struct_VkPhysicalDeviceAmigoProfilingFeaturesSEC = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    amigoProfiling: VkBool32,
};
pub const VkPhysicalDeviceAmigoProfilingFeaturesSEC = struct_VkPhysicalDeviceAmigoProfilingFeaturesSEC;
pub const struct_VkAmigoProfilingSubmitInfoSEC = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    firstDrawTimestamp: u64,
    swapBufferTimestamp: u64,
};
pub const VkAmigoProfilingSubmitInfoSEC = struct_VkAmigoProfilingSubmitInfoSEC;
pub const struct_VkAccelerationStructureKHR_T = opaque {};
pub const VkAccelerationStructureKHR = ?*struct_VkAccelerationStructureKHR_T;
pub const VK_BUILD_ACCELERATION_STRUCTURE_MODE_BUILD_KHR: c_int = 0;
pub const VK_BUILD_ACCELERATION_STRUCTURE_MODE_UPDATE_KHR: c_int = 1;
pub const VK_BUILD_ACCELERATION_STRUCTURE_MODE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkBuildAccelerationStructureModeKHR = c_uint;
pub const VkBuildAccelerationStructureModeKHR = enum_VkBuildAccelerationStructureModeKHR;
pub const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_KHR: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_DEVICE_KHR: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_HOST_OR_DEVICE_KHR: c_int = 2;
pub const VK_ACCELERATION_STRUCTURE_BUILD_TYPE_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAccelerationStructureBuildTypeKHR = c_uint;
pub const VkAccelerationStructureBuildTypeKHR = enum_VkAccelerationStructureBuildTypeKHR;
pub const VK_ACCELERATION_STRUCTURE_COMPATIBILITY_COMPATIBLE_KHR: c_int = 0;
pub const VK_ACCELERATION_STRUCTURE_COMPATIBILITY_INCOMPATIBLE_KHR: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_COMPATIBILITY_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAccelerationStructureCompatibilityKHR = c_uint;
pub const VkAccelerationStructureCompatibilityKHR = enum_VkAccelerationStructureCompatibilityKHR;
pub const VK_ACCELERATION_STRUCTURE_CREATE_DEVICE_ADDRESS_CAPTURE_REPLAY_BIT_KHR: c_int = 1;
pub const VK_ACCELERATION_STRUCTURE_CREATE_MOTION_BIT_NV: c_int = 4;
pub const VK_ACCELERATION_STRUCTURE_CREATE_FLAG_BITS_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkAccelerationStructureCreateFlagBitsKHR = c_uint;
pub const VkAccelerationStructureCreateFlagBitsKHR = enum_VkAccelerationStructureCreateFlagBitsKHR;
pub const VkAccelerationStructureCreateFlagsKHR = VkFlags;
pub const union_VkDeviceOrHostAddressKHR = extern union {
    deviceAddress: VkDeviceAddress,
    hostAddress: ?*anyopaque,
};
pub const VkDeviceOrHostAddressKHR = union_VkDeviceOrHostAddressKHR;
pub const struct_VkAccelerationStructureBuildRangeInfoKHR = extern struct {
    primitiveCount: u32,
    primitiveOffset: u32,
    firstVertex: u32,
    transformOffset: u32,
};
pub const VkAccelerationStructureBuildRangeInfoKHR = struct_VkAccelerationStructureBuildRangeInfoKHR;
pub const struct_VkAccelerationStructureGeometryTrianglesDataKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    vertexFormat: VkFormat,
    vertexData: VkDeviceOrHostAddressConstKHR,
    vertexStride: VkDeviceSize,
    maxVertex: u32,
    indexType: VkIndexType,
    indexData: VkDeviceOrHostAddressConstKHR,
    transformData: VkDeviceOrHostAddressConstKHR,
};
pub const VkAccelerationStructureGeometryTrianglesDataKHR = struct_VkAccelerationStructureGeometryTrianglesDataKHR;
pub const struct_VkAccelerationStructureGeometryAabbsDataKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    data: VkDeviceOrHostAddressConstKHR,
    stride: VkDeviceSize,
};
pub const VkAccelerationStructureGeometryAabbsDataKHR = struct_VkAccelerationStructureGeometryAabbsDataKHR;
pub const struct_VkAccelerationStructureGeometryInstancesDataKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    arrayOfPointers: VkBool32,
    data: VkDeviceOrHostAddressConstKHR,
};
pub const VkAccelerationStructureGeometryInstancesDataKHR = struct_VkAccelerationStructureGeometryInstancesDataKHR;
pub const union_VkAccelerationStructureGeometryDataKHR = extern union {
    triangles: VkAccelerationStructureGeometryTrianglesDataKHR,
    aabbs: VkAccelerationStructureGeometryAabbsDataKHR,
    instances: VkAccelerationStructureGeometryInstancesDataKHR,
};
pub const VkAccelerationStructureGeometryDataKHR = union_VkAccelerationStructureGeometryDataKHR;
pub const struct_VkAccelerationStructureGeometryKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    geometryType: VkGeometryTypeKHR,
    geometry: VkAccelerationStructureGeometryDataKHR,
    flags: VkGeometryFlagsKHR,
};
pub const VkAccelerationStructureGeometryKHR = struct_VkAccelerationStructureGeometryKHR;
pub const struct_VkAccelerationStructureBuildGeometryInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    type: VkAccelerationStructureTypeKHR,
    flags: VkBuildAccelerationStructureFlagsKHR,
    mode: VkBuildAccelerationStructureModeKHR,
    srcAccelerationStructure: VkAccelerationStructureKHR,
    dstAccelerationStructure: VkAccelerationStructureKHR,
    geometryCount: u32,
    pGeometries: [*c]const VkAccelerationStructureGeometryKHR,
    ppGeometries: [*c]const [*c]const VkAccelerationStructureGeometryKHR,
    scratchData: VkDeviceOrHostAddressKHR,
};
pub const VkAccelerationStructureBuildGeometryInfoKHR = struct_VkAccelerationStructureBuildGeometryInfoKHR;
pub const struct_VkAccelerationStructureCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    createFlags: VkAccelerationStructureCreateFlagsKHR,
    buffer: VkBuffer,
    offset: VkDeviceSize,
    size: VkDeviceSize,
    type: VkAccelerationStructureTypeKHR,
    deviceAddress: VkDeviceAddress,
};
pub const VkAccelerationStructureCreateInfoKHR = struct_VkAccelerationStructureCreateInfoKHR;
pub const struct_VkWriteDescriptorSetAccelerationStructureKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    accelerationStructureCount: u32,
    pAccelerationStructures: [*c]const VkAccelerationStructureKHR,
};
pub const VkWriteDescriptorSetAccelerationStructureKHR = struct_VkWriteDescriptorSetAccelerationStructureKHR;
pub const struct_VkPhysicalDeviceAccelerationStructureFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    accelerationStructure: VkBool32,
    accelerationStructureCaptureReplay: VkBool32,
    accelerationStructureIndirectBuild: VkBool32,
    accelerationStructureHostCommands: VkBool32,
    descriptorBindingAccelerationStructureUpdateAfterBind: VkBool32,
};
pub const VkPhysicalDeviceAccelerationStructureFeaturesKHR = struct_VkPhysicalDeviceAccelerationStructureFeaturesKHR;
pub const struct_VkPhysicalDeviceAccelerationStructurePropertiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    maxGeometryCount: u64,
    maxInstanceCount: u64,
    maxPrimitiveCount: u64,
    maxPerStageDescriptorAccelerationStructures: u32,
    maxPerStageDescriptorUpdateAfterBindAccelerationStructures: u32,
    maxDescriptorSetAccelerationStructures: u32,
    maxDescriptorSetUpdateAfterBindAccelerationStructures: u32,
    minAccelerationStructureScratchOffsetAlignment: u32,
};
pub const VkPhysicalDeviceAccelerationStructurePropertiesKHR = struct_VkPhysicalDeviceAccelerationStructurePropertiesKHR;
pub const struct_VkAccelerationStructureDeviceAddressInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    accelerationStructure: VkAccelerationStructureKHR,
};
pub const VkAccelerationStructureDeviceAddressInfoKHR = struct_VkAccelerationStructureDeviceAddressInfoKHR;
pub const struct_VkAccelerationStructureVersionInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    pVersionData: [*c]const u8,
};
pub const VkAccelerationStructureVersionInfoKHR = struct_VkAccelerationStructureVersionInfoKHR;
pub const struct_VkCopyAccelerationStructureToMemoryInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    src: VkAccelerationStructureKHR,
    dst: VkDeviceOrHostAddressKHR,
    mode: VkCopyAccelerationStructureModeKHR,
};
pub const VkCopyAccelerationStructureToMemoryInfoKHR = struct_VkCopyAccelerationStructureToMemoryInfoKHR;
pub const struct_VkCopyMemoryToAccelerationStructureInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    src: VkDeviceOrHostAddressConstKHR,
    dst: VkAccelerationStructureKHR,
    mode: VkCopyAccelerationStructureModeKHR,
};
pub const VkCopyMemoryToAccelerationStructureInfoKHR = struct_VkCopyMemoryToAccelerationStructureInfoKHR;
pub const struct_VkCopyAccelerationStructureInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    src: VkAccelerationStructureKHR,
    dst: VkAccelerationStructureKHR,
    mode: VkCopyAccelerationStructureModeKHR,
};
pub const VkCopyAccelerationStructureInfoKHR = struct_VkCopyAccelerationStructureInfoKHR;
pub const struct_VkAccelerationStructureBuildSizesInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    accelerationStructureSize: VkDeviceSize,
    updateScratchSize: VkDeviceSize,
    buildScratchSize: VkDeviceSize,
};
pub const VkAccelerationStructureBuildSizesInfoKHR = struct_VkAccelerationStructureBuildSizesInfoKHR;
pub const PFN_vkCreateAccelerationStructureKHR = ?*const fn (VkDevice, [*c]const VkAccelerationStructureCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkAccelerationStructureKHR) callconv(.C) VkResult;
pub const PFN_vkDestroyAccelerationStructureKHR = ?*const fn (VkDevice, VkAccelerationStructureKHR, [*c]const VkAllocationCallbacks) callconv(.C) void;
pub const PFN_vkCmdBuildAccelerationStructuresKHR = ?*const fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureBuildGeometryInfoKHR, [*c]const [*c]const VkAccelerationStructureBuildRangeInfoKHR) callconv(.C) void;
pub const PFN_vkCmdBuildAccelerationStructuresIndirectKHR = ?*const fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureBuildGeometryInfoKHR, [*c]const VkDeviceAddress, [*c]const u32, [*c]const [*c]const u32) callconv(.C) void;
pub const PFN_vkBuildAccelerationStructuresKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, u32, [*c]const VkAccelerationStructureBuildGeometryInfoKHR, [*c]const [*c]const VkAccelerationStructureBuildRangeInfoKHR) callconv(.C) VkResult;
pub const PFN_vkCopyAccelerationStructureKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyAccelerationStructureInfoKHR) callconv(.C) VkResult;
pub const PFN_vkCopyAccelerationStructureToMemoryKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyAccelerationStructureToMemoryInfoKHR) callconv(.C) VkResult;
pub const PFN_vkCopyMemoryToAccelerationStructureKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, [*c]const VkCopyMemoryToAccelerationStructureInfoKHR) callconv(.C) VkResult;
pub const PFN_vkWriteAccelerationStructuresPropertiesKHR = ?*const fn (VkDevice, u32, [*c]const VkAccelerationStructureKHR, VkQueryType, usize, ?*anyopaque, usize) callconv(.C) VkResult;
pub const PFN_vkCmdCopyAccelerationStructureKHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyAccelerationStructureInfoKHR) callconv(.C) void;
pub const PFN_vkCmdCopyAccelerationStructureToMemoryKHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyAccelerationStructureToMemoryInfoKHR) callconv(.C) void;
pub const PFN_vkCmdCopyMemoryToAccelerationStructureKHR = ?*const fn (VkCommandBuffer, [*c]const VkCopyMemoryToAccelerationStructureInfoKHR) callconv(.C) void;
pub const PFN_vkGetAccelerationStructureDeviceAddressKHR = ?*const fn (VkDevice, [*c]const VkAccelerationStructureDeviceAddressInfoKHR) callconv(.C) VkDeviceAddress;
pub const PFN_vkCmdWriteAccelerationStructuresPropertiesKHR = ?*const fn (VkCommandBuffer, u32, [*c]const VkAccelerationStructureKHR, VkQueryType, VkQueryPool, u32) callconv(.C) void;
pub const PFN_vkGetDeviceAccelerationStructureCompatibilityKHR = ?*const fn (VkDevice, [*c]const VkAccelerationStructureVersionInfoKHR, [*c]VkAccelerationStructureCompatibilityKHR) callconv(.C) void;
pub const PFN_vkGetAccelerationStructureBuildSizesKHR = ?*const fn (VkDevice, VkAccelerationStructureBuildTypeKHR, [*c]const VkAccelerationStructureBuildGeometryInfoKHR, [*c]const u32, [*c]VkAccelerationStructureBuildSizesInfoKHR) callconv(.C) void;
pub extern fn vkCreateAccelerationStructureKHR(device: VkDevice, pCreateInfo: [*c]const VkAccelerationStructureCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pAccelerationStructure: [*c]VkAccelerationStructureKHR) VkResult;
pub extern fn vkDestroyAccelerationStructureKHR(device: VkDevice, accelerationStructure: VkAccelerationStructureKHR, pAllocator: [*c]const VkAllocationCallbacks) void;
pub extern fn vkCmdBuildAccelerationStructuresKHR(commandBuffer: VkCommandBuffer, infoCount: u32, pInfos: [*c]const VkAccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: [*c]const [*c]const VkAccelerationStructureBuildRangeInfoKHR) void;
pub extern fn vkCmdBuildAccelerationStructuresIndirectKHR(commandBuffer: VkCommandBuffer, infoCount: u32, pInfos: [*c]const VkAccelerationStructureBuildGeometryInfoKHR, pIndirectDeviceAddresses: [*c]const VkDeviceAddress, pIndirectStrides: [*c]const u32, ppMaxPrimitiveCounts: [*c]const [*c]const u32) void;
pub extern fn vkBuildAccelerationStructuresKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, infoCount: u32, pInfos: [*c]const VkAccelerationStructureBuildGeometryInfoKHR, ppBuildRangeInfos: [*c]const [*c]const VkAccelerationStructureBuildRangeInfoKHR) VkResult;
pub extern fn vkCopyAccelerationStructureKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: [*c]const VkCopyAccelerationStructureInfoKHR) VkResult;
pub extern fn vkCopyAccelerationStructureToMemoryKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: [*c]const VkCopyAccelerationStructureToMemoryInfoKHR) VkResult;
pub extern fn vkCopyMemoryToAccelerationStructureKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pInfo: [*c]const VkCopyMemoryToAccelerationStructureInfoKHR) VkResult;
pub extern fn vkWriteAccelerationStructuresPropertiesKHR(device: VkDevice, accelerationStructureCount: u32, pAccelerationStructures: [*c]const VkAccelerationStructureKHR, queryType: VkQueryType, dataSize: usize, pData: ?*anyopaque, stride: usize) VkResult;
pub extern fn vkCmdCopyAccelerationStructureKHR(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkCopyAccelerationStructureInfoKHR) void;
pub extern fn vkCmdCopyAccelerationStructureToMemoryKHR(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkCopyAccelerationStructureToMemoryInfoKHR) void;
pub extern fn vkCmdCopyMemoryToAccelerationStructureKHR(commandBuffer: VkCommandBuffer, pInfo: [*c]const VkCopyMemoryToAccelerationStructureInfoKHR) void;
pub extern fn vkGetAccelerationStructureDeviceAddressKHR(device: VkDevice, pInfo: [*c]const VkAccelerationStructureDeviceAddressInfoKHR) VkDeviceAddress;
pub extern fn vkCmdWriteAccelerationStructuresPropertiesKHR(commandBuffer: VkCommandBuffer, accelerationStructureCount: u32, pAccelerationStructures: [*c]const VkAccelerationStructureKHR, queryType: VkQueryType, queryPool: VkQueryPool, firstQuery: u32) void;
pub extern fn vkGetDeviceAccelerationStructureCompatibilityKHR(device: VkDevice, pVersionInfo: [*c]const VkAccelerationStructureVersionInfoKHR, pCompatibility: [*c]VkAccelerationStructureCompatibilityKHR) void;
pub extern fn vkGetAccelerationStructureBuildSizesKHR(device: VkDevice, buildType: VkAccelerationStructureBuildTypeKHR, pBuildInfo: [*c]const VkAccelerationStructureBuildGeometryInfoKHR, pMaxPrimitiveCounts: [*c]const u32, pSizeInfo: [*c]VkAccelerationStructureBuildSizesInfoKHR) void;
pub const VK_SHADER_GROUP_SHADER_GENERAL_KHR: c_int = 0;
pub const VK_SHADER_GROUP_SHADER_CLOSEST_HIT_KHR: c_int = 1;
pub const VK_SHADER_GROUP_SHADER_ANY_HIT_KHR: c_int = 2;
pub const VK_SHADER_GROUP_SHADER_INTERSECTION_KHR: c_int = 3;
pub const VK_SHADER_GROUP_SHADER_MAX_ENUM_KHR: c_int = 2147483647;
pub const enum_VkShaderGroupShaderKHR = c_uint;
pub const VkShaderGroupShaderKHR = enum_VkShaderGroupShaderKHR;
pub const struct_VkRayTracingShaderGroupCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    type: VkRayTracingShaderGroupTypeKHR,
    generalShader: u32,
    closestHitShader: u32,
    anyHitShader: u32,
    intersectionShader: u32,
    pShaderGroupCaptureReplayHandle: ?*const anyopaque,
};
pub const VkRayTracingShaderGroupCreateInfoKHR = struct_VkRayTracingShaderGroupCreateInfoKHR;
pub const struct_VkRayTracingPipelineInterfaceCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    maxPipelineRayPayloadSize: u32,
    maxPipelineRayHitAttributeSize: u32,
};
pub const VkRayTracingPipelineInterfaceCreateInfoKHR = struct_VkRayTracingPipelineInterfaceCreateInfoKHR;
pub const struct_VkRayTracingPipelineCreateInfoKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*const anyopaque,
    flags: VkPipelineCreateFlags,
    stageCount: u32,
    pStages: [*c]const VkPipelineShaderStageCreateInfo,
    groupCount: u32,
    pGroups: [*c]const VkRayTracingShaderGroupCreateInfoKHR,
    maxPipelineRayRecursionDepth: u32,
    pLibraryInfo: [*c]const VkPipelineLibraryCreateInfoKHR,
    pLibraryInterface: [*c]const VkRayTracingPipelineInterfaceCreateInfoKHR,
    pDynamicState: [*c]const VkPipelineDynamicStateCreateInfo,
    layout: VkPipelineLayout,
    basePipelineHandle: VkPipeline,
    basePipelineIndex: i32,
};
pub const VkRayTracingPipelineCreateInfoKHR = struct_VkRayTracingPipelineCreateInfoKHR;
pub const struct_VkPhysicalDeviceRayTracingPipelineFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    rayTracingPipeline: VkBool32,
    rayTracingPipelineShaderGroupHandleCaptureReplay: VkBool32,
    rayTracingPipelineShaderGroupHandleCaptureReplayMixed: VkBool32,
    rayTracingPipelineTraceRaysIndirect: VkBool32,
    rayTraversalPrimitiveCulling: VkBool32,
};
pub const VkPhysicalDeviceRayTracingPipelineFeaturesKHR = struct_VkPhysicalDeviceRayTracingPipelineFeaturesKHR;
pub const struct_VkPhysicalDeviceRayTracingPipelinePropertiesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    shaderGroupHandleSize: u32,
    maxRayRecursionDepth: u32,
    maxShaderGroupStride: u32,
    shaderGroupBaseAlignment: u32,
    shaderGroupHandleCaptureReplaySize: u32,
    maxRayDispatchInvocationCount: u32,
    shaderGroupHandleAlignment: u32,
    maxRayHitAttributeSize: u32,
};
pub const VkPhysicalDeviceRayTracingPipelinePropertiesKHR = struct_VkPhysicalDeviceRayTracingPipelinePropertiesKHR;
pub const struct_VkStridedDeviceAddressRegionKHR = extern struct {
    deviceAddress: VkDeviceAddress,
    stride: VkDeviceSize,
    size: VkDeviceSize,
};
pub const VkStridedDeviceAddressRegionKHR = struct_VkStridedDeviceAddressRegionKHR;
pub const struct_VkTraceRaysIndirectCommandKHR = extern struct {
    width: u32,
    height: u32,
    depth: u32,
};
pub const VkTraceRaysIndirectCommandKHR = struct_VkTraceRaysIndirectCommandKHR;
pub const PFN_vkCmdTraceRaysKHR = ?*const fn (VkCommandBuffer, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, u32, u32, u32) callconv(.C) void;
pub const PFN_vkCreateRayTracingPipelinesKHR = ?*const fn (VkDevice, VkDeferredOperationKHR, VkPipelineCache, u32, [*c]const VkRayTracingPipelineCreateInfoKHR, [*c]const VkAllocationCallbacks, [*c]VkPipeline) callconv(.C) VkResult;
pub const PFN_vkGetRayTracingCaptureReplayShaderGroupHandlesKHR = ?*const fn (VkDevice, VkPipeline, u32, u32, usize, ?*anyopaque) callconv(.C) VkResult;
pub const PFN_vkCmdTraceRaysIndirectKHR = ?*const fn (VkCommandBuffer, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, [*c]const VkStridedDeviceAddressRegionKHR, VkDeviceAddress) callconv(.C) void;
pub const PFN_vkGetRayTracingShaderGroupStackSizeKHR = ?*const fn (VkDevice, VkPipeline, u32, VkShaderGroupShaderKHR) callconv(.C) VkDeviceSize;
pub const PFN_vkCmdSetRayTracingPipelineStackSizeKHR = ?*const fn (VkCommandBuffer, u32) callconv(.C) void;
pub extern fn vkCmdTraceRaysKHR(commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pMissShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pHitShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pCallableShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, width: u32, height: u32, depth: u32) void;
pub extern fn vkCreateRayTracingPipelinesKHR(device: VkDevice, deferredOperation: VkDeferredOperationKHR, pipelineCache: VkPipelineCache, createInfoCount: u32, pCreateInfos: [*c]const VkRayTracingPipelineCreateInfoKHR, pAllocator: [*c]const VkAllocationCallbacks, pPipelines: [*c]VkPipeline) VkResult;
pub extern fn vkGetRayTracingCaptureReplayShaderGroupHandlesKHR(device: VkDevice, pipeline: VkPipeline, firstGroup: u32, groupCount: u32, dataSize: usize, pData: ?*anyopaque) VkResult;
pub extern fn vkCmdTraceRaysIndirectKHR(commandBuffer: VkCommandBuffer, pRaygenShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pMissShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pHitShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, pCallableShaderBindingTable: [*c]const VkStridedDeviceAddressRegionKHR, indirectDeviceAddress: VkDeviceAddress) void;
pub extern fn vkGetRayTracingShaderGroupStackSizeKHR(device: VkDevice, pipeline: VkPipeline, group: u32, groupShader: VkShaderGroupShaderKHR) VkDeviceSize;
pub extern fn vkCmdSetRayTracingPipelineStackSizeKHR(commandBuffer: VkCommandBuffer, pipelineStackSize: u32) void;
pub const struct_VkPhysicalDeviceRayQueryFeaturesKHR = extern struct {
    sType: VkStructureType,
    pNext: ?*anyopaque,
    rayQuery: VkBool32,
};
pub const VkPhysicalDeviceRayQueryFeaturesKHR = struct_VkPhysicalDeviceRayQueryFeaturesKHR;
pub const GLbitfield = u32;
pub const GLboolean = u8;
pub const GLbyte = i8;
pub const GLclampf = f32;
pub const GLenum = u32;
pub const GLfloat = f32;
pub const GLint = i32;
pub const GLshort = i16;
pub const GLsizei = i32;
pub const GLubyte = u8;
pub const GLuint = u32;
pub const GLushort = u16;
pub const GLvoid = anyopaque;
pub const GLchar = u8;
pub const GLcharARB = u8;
pub const GLhandleARB = ?*anyopaque;
pub const GLdouble = f64;
pub const GLclampd = f64;
pub const GLfixed = i32;
pub const GLhalf = u16;
pub const GLhalfARB = u16;
pub const GLint64 = i64;
pub const struct___GLsync = opaque {};
pub const GLsync = ?*struct___GLsync;
pub const GLuint64 = u64;
pub const GLint64EXT = i64;
pub const GLuint64EXT = u64;
pub const GLintptr = isize;
pub const GLsizeiptr = isize;
pub const GLintptrARB = isize;
pub const GLsizeiptrARB = isize;
pub extern fn glAccum(op: GLenum, value: GLfloat) void;
pub extern fn glAlphaFunc(func: GLenum, ref: GLclampf) void;
pub extern fn glAreTexturesResident(n: GLsizei, textures: [*c]const GLuint, residences: [*c]GLboolean) GLboolean;
pub extern fn glArrayElement(i: GLint) void;
pub extern fn glBegin(mode: GLenum) void;
pub extern fn glBindTexture(target: GLenum, texture: GLuint) void;
pub extern fn glBitmap(width: GLsizei, height: GLsizei, xorig: GLfloat, yorig: GLfloat, xmove: GLfloat, ymove: GLfloat, bitmap: [*c]const GLubyte) void;
pub extern fn glBlendColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) void;
pub extern fn glBlendEquation(mode: GLenum) void;
pub extern fn glBlendEquationSeparate(modeRGB: GLenum, modeAlpha: GLenum) void;
pub extern fn glBlendFunc(sfactor: GLenum, dfactor: GLenum) void;
pub extern fn glCallList(list: GLuint) void;
pub extern fn glCallLists(n: GLsizei, @"type": GLenum, lists: ?*const GLvoid) void;
pub extern fn glClear(mask: GLbitfield) void;
pub extern fn glClearAccum(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
pub extern fn glClearColor(red: GLclampf, green: GLclampf, blue: GLclampf, alpha: GLclampf) void;
pub extern fn glClearDepth(depth: GLclampd) void;
pub extern fn glClearIndex(c: GLfloat) void;
pub extern fn glClearStencil(s: GLint) void;
pub extern fn glClipPlane(plane: GLenum, equation: [*c]const GLdouble) void;
pub extern fn glColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) void;
pub extern fn glColor3bv(v: [*c]const GLbyte) void;
pub extern fn glColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) void;
pub extern fn glColor3dv(v: [*c]const GLdouble) void;
pub extern fn glColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) void;
pub extern fn glColor3fv(v: [*c]const GLfloat) void;
pub extern fn glColor3i(red: GLint, green: GLint, blue: GLint) void;
pub extern fn glColor3iv(v: [*c]const GLint) void;
pub extern fn glColor3s(red: GLshort, green: GLshort, blue: GLshort) void;
pub extern fn glColor3sv(v: [*c]const GLshort) void;
pub extern fn glColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) void;
pub extern fn glColor3ubv(v: [*c]const GLubyte) void;
pub extern fn glColor3ui(red: GLuint, green: GLuint, blue: GLuint) void;
pub extern fn glColor3uiv(v: [*c]const GLuint) void;
pub extern fn glColor3us(red: GLushort, green: GLushort, blue: GLushort) void;
pub extern fn glColor3usv(v: [*c]const GLushort) void;
pub extern fn glColor4b(red: GLbyte, green: GLbyte, blue: GLbyte, alpha: GLbyte) void;
pub extern fn glColor4bv(v: [*c]const GLbyte) void;
pub extern fn glColor4d(red: GLdouble, green: GLdouble, blue: GLdouble, alpha: GLdouble) void;
pub extern fn glColor4dv(v: [*c]const GLdouble) void;
pub extern fn glColor4f(red: GLfloat, green: GLfloat, blue: GLfloat, alpha: GLfloat) void;
pub extern fn glColor4fv(v: [*c]const GLfloat) void;
pub extern fn glColor4i(red: GLint, green: GLint, blue: GLint, alpha: GLint) void;
pub extern fn glColor4iv(v: [*c]const GLint) void;
pub extern fn glColor4s(red: GLshort, green: GLshort, blue: GLshort, alpha: GLshort) void;
pub extern fn glColor4sv(v: [*c]const GLshort) void;
pub extern fn glColor4ub(red: GLubyte, green: GLubyte, blue: GLubyte, alpha: GLubyte) void;
pub extern fn glColor4ubv(v: [*c]const GLubyte) void;
pub extern fn glColor4ui(red: GLuint, green: GLuint, blue: GLuint, alpha: GLuint) void;
pub extern fn glColor4uiv(v: [*c]const GLuint) void;
pub extern fn glColor4us(red: GLushort, green: GLushort, blue: GLushort, alpha: GLushort) void;
pub extern fn glColor4usv(v: [*c]const GLushort) void;
pub extern fn glColorMask(red: GLboolean, green: GLboolean, blue: GLboolean, alpha: GLboolean) void;
pub extern fn glColorMaterial(face: GLenum, mode: GLenum) void;
pub extern fn glColorPointer(size: GLint, @"type": GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern fn glColorSubTable(target: GLenum, start: GLsizei, count: GLsizei, format: GLenum, @"type": GLenum, data: ?*const GLvoid) void;
pub extern fn glColorTable(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, @"type": GLenum, table: ?*const GLvoid) void;
pub extern fn glColorTableParameterfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glColorTableParameteriv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glConvolutionFilter1D(target: GLenum, internalformat: GLenum, width: GLsizei, format: GLenum, @"type": GLenum, image: ?*const GLvoid) void;
pub extern fn glConvolutionFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, image: ?*const GLvoid) void;
pub extern fn glConvolutionParameterf(target: GLenum, pname: GLenum, params: GLfloat) void;
pub extern fn glConvolutionParameterfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glConvolutionParameteri(target: GLenum, pname: GLenum, params: GLint) void;
pub extern fn glConvolutionParameteriv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glCopyColorSubTable(target: GLenum, start: GLsizei, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glCopyColorTable(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glCopyConvolutionFilter1D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glCopyConvolutionFilter2D(target: GLenum, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glCopyPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, @"type": GLenum) void;
pub extern fn glCopyTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, border: GLint) void;
pub extern fn glCopyTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, x: GLint, y: GLint, width: GLsizei, height: GLsizei, border: GLint) void;
pub extern fn glCopyTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, x: GLint, y: GLint, width: GLsizei) void;
pub extern fn glCopyTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glCopyTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glCullFace(mode: GLenum) void;
pub extern fn glDeleteLists(list: GLuint, range: GLsizei) void;
pub extern fn glDeleteTextures(n: GLsizei, textures: [*c]const GLuint) void;
pub extern fn glDepthFunc(func: GLenum) void;
pub extern fn glDepthMask(flag: GLboolean) void;
pub extern fn glDepthRange(zNear: GLclampd, zFar: GLclampd) void;
pub extern fn glDisable(cap: GLenum) void;
pub extern fn glDisableClientState(array: GLenum) void;
pub extern fn glDrawArrays(mode: GLenum, first: GLint, count: GLsizei) void;
pub extern fn glDrawBuffer(mode: GLenum) void;
pub extern fn glDrawElements(mode: GLenum, count: GLsizei, @"type": GLenum, indices: ?*const GLvoid) void;
pub extern fn glDrawPixels(width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*const GLvoid) void;
pub extern fn glDrawRangeElements(mode: GLenum, start: GLuint, end: GLuint, count: GLsizei, @"type": GLenum, indices: ?*const GLvoid) void;
pub extern fn glEdgeFlag(flag: GLboolean) void;
pub extern fn glEdgeFlagPointer(stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern fn glEdgeFlagv(flag: [*c]const GLboolean) void;
pub extern fn glEnable(cap: GLenum) void;
pub extern fn glEnableClientState(array: GLenum) void;
pub extern fn glEnd() void;
pub extern fn glEndList() void;
pub extern fn glEvalCoord1d(u: GLdouble) void;
pub extern fn glEvalCoord1dv(u: [*c]const GLdouble) void;
pub extern fn glEvalCoord1f(u: GLfloat) void;
pub extern fn glEvalCoord1fv(u: [*c]const GLfloat) void;
pub extern fn glEvalCoord2d(u: GLdouble, v: GLdouble) void;
pub extern fn glEvalCoord2dv(u: [*c]const GLdouble) void;
pub extern fn glEvalCoord2f(u: GLfloat, v: GLfloat) void;
pub extern fn glEvalCoord2fv(u: [*c]const GLfloat) void;
pub extern fn glEvalMesh1(mode: GLenum, @"i1": GLint, @"i2": GLint) void;
pub extern fn glEvalMesh2(mode: GLenum, @"i1": GLint, @"i2": GLint, j1: GLint, j2: GLint) void;
pub extern fn glEvalPoint1(i: GLint) void;
pub extern fn glEvalPoint2(i: GLint, j: GLint) void;
pub extern fn glFeedbackBuffer(size: GLsizei, @"type": GLenum, buffer: [*c]GLfloat) void;
pub extern fn glFinish() void;
pub extern fn glFlush() void;
pub extern fn glFogf(pname: GLenum, param: GLfloat) void;
pub extern fn glFogfv(pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glFogi(pname: GLenum, param: GLint) void;
pub extern fn glFogiv(pname: GLenum, params: [*c]const GLint) void;
pub extern fn glFrontFace(mode: GLenum) void;
pub extern fn glFrustum(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) void;
pub extern fn glGenLists(range: GLsizei) GLuint;
pub extern fn glGenTextures(n: GLsizei, textures: [*c]GLuint) void;
pub extern fn glGetBooleanv(pname: GLenum, params: [*c]GLboolean) void;
pub extern fn glGetClipPlane(plane: GLenum, equation: [*c]GLdouble) void;
pub extern fn glGetColorTable(target: GLenum, format: GLenum, @"type": GLenum, table: ?*GLvoid) void;
pub extern fn glGetColorTableParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetColorTableParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetConvolutionFilter(target: GLenum, format: GLenum, @"type": GLenum, image: ?*GLvoid) void;
pub extern fn glGetConvolutionParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetConvolutionParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetDoublev(pname: GLenum, params: [*c]GLdouble) void;
pub extern fn glGetError() GLenum;
pub extern fn glGetFloatv(pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetHistogram(target: GLenum, reset: GLboolean, format: GLenum, @"type": GLenum, values: ?*GLvoid) void;
pub extern fn glGetHistogramParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetHistogramParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetIntegerv(pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetLightfv(light: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetLightiv(light: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetMapdv(target: GLenum, query: GLenum, v: [*c]GLdouble) void;
pub extern fn glGetMapfv(target: GLenum, query: GLenum, v: [*c]GLfloat) void;
pub extern fn glGetMapiv(target: GLenum, query: GLenum, v: [*c]GLint) void;
pub extern fn glGetMaterialfv(face: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetMaterialiv(face: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetMinmax(target: GLenum, reset: GLboolean, format: GLenum, @"type": GLenum, values: ?*GLvoid) void;
pub extern fn glGetMinmaxParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetMinmaxParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetPixelMapfv(map: GLenum, values: [*c]GLfloat) void;
pub extern fn glGetPixelMapuiv(map: GLenum, values: [*c]GLuint) void;
pub extern fn glGetPixelMapusv(map: GLenum, values: [*c]GLushort) void;
pub extern fn glGetPointerv(pname: GLenum, params: [*c]?*GLvoid) void;
pub extern fn glGetPolygonStipple(mask: [*c]GLubyte) void;
pub extern fn glGetSeparableFilter(target: GLenum, format: GLenum, @"type": GLenum, row: ?*GLvoid, column: ?*GLvoid, span: ?*GLvoid) void;
pub extern fn glGetString(name: GLenum) [*c]const GLubyte;
pub extern fn glGetTexEnvfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexEnviv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetTexGendv(coord: GLenum, pname: GLenum, params: [*c]GLdouble) void;
pub extern fn glGetTexGenfv(coord: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexGeniv(coord: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetTexImage(target: GLenum, level: GLint, format: GLenum, @"type": GLenum, pixels: ?*GLvoid) void;
pub extern fn glGetTexLevelParameterfv(target: GLenum, level: GLint, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexLevelParameteriv(target: GLenum, level: GLint, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetTexParameterfv(target: GLenum, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetTexParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glHint(target: GLenum, mode: GLenum) void;
pub extern fn glHistogram(target: GLenum, width: GLsizei, internalformat: GLenum, sink: GLboolean) void;
pub extern fn glIndexMask(mask: GLuint) void;
pub extern fn glIndexPointer(@"type": GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern fn glIndexd(c: GLdouble) void;
pub extern fn glIndexdv(c: [*c]const GLdouble) void;
pub extern fn glIndexf(c: GLfloat) void;
pub extern fn glIndexfv(c: [*c]const GLfloat) void;
pub extern fn glIndexi(c: GLint) void;
pub extern fn glIndexiv(c: [*c]const GLint) void;
pub extern fn glIndexs(c: GLshort) void;
pub extern fn glIndexsv(c: [*c]const GLshort) void;
pub extern fn glIndexub(c: GLubyte) void;
pub extern fn glIndexubv(c: [*c]const GLubyte) void;
pub extern fn glInitNames() void;
pub extern fn glInterleavedArrays(format: GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern fn glIsEnabled(cap: GLenum) GLboolean;
pub extern fn glIsList(list: GLuint) GLboolean;
pub extern fn glIsTexture(texture: GLuint) GLboolean;
pub extern fn glLightModelf(pname: GLenum, param: GLfloat) void;
pub extern fn glLightModelfv(pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glLightModeli(pname: GLenum, param: GLint) void;
pub extern fn glLightModeliv(pname: GLenum, params: [*c]const GLint) void;
pub extern fn glLightf(light: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glLightfv(light: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glLighti(light: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glLightiv(light: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glLineStipple(factor: GLint, pattern: GLushort) void;
pub extern fn glLineWidth(width: GLfloat) void;
pub extern fn glListBase(base: GLuint) void;
pub extern fn glLoadIdentity() void;
pub extern fn glLoadMatrixd(m: [*c]const GLdouble) void;
pub extern fn glLoadMatrixf(m: [*c]const GLfloat) void;
pub extern fn glLoadName(name: GLuint) void;
pub extern fn glLogicOp(opcode: GLenum) void;
pub extern fn glMap1d(target: GLenum, @"u1": GLdouble, @"u2": GLdouble, stride: GLint, order: GLint, points: [*c]const GLdouble) void;
pub extern fn glMap1f(target: GLenum, @"u1": GLfloat, @"u2": GLfloat, stride: GLint, order: GLint, points: [*c]const GLfloat) void;
pub extern fn glMap2d(target: GLenum, @"u1": GLdouble, @"u2": GLdouble, ustride: GLint, uorder: GLint, v1: GLdouble, v2: GLdouble, vstride: GLint, vorder: GLint, points: [*c]const GLdouble) void;
pub extern fn glMap2f(target: GLenum, @"u1": GLfloat, @"u2": GLfloat, ustride: GLint, uorder: GLint, v1: GLfloat, v2: GLfloat, vstride: GLint, vorder: GLint, points: [*c]const GLfloat) void;
pub extern fn glMapGrid1d(un: GLint, @"u1": GLdouble, @"u2": GLdouble) void;
pub extern fn glMapGrid1f(un: GLint, @"u1": GLfloat, @"u2": GLfloat) void;
pub extern fn glMapGrid2d(un: GLint, @"u1": GLdouble, @"u2": GLdouble, vn: GLint, v1: GLdouble, v2: GLdouble) void;
pub extern fn glMapGrid2f(un: GLint, @"u1": GLfloat, @"u2": GLfloat, vn: GLint, v1: GLfloat, v2: GLfloat) void;
pub extern fn glMaterialf(face: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glMaterialfv(face: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glMateriali(face: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glMaterialiv(face: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glMatrixMode(mode: GLenum) void;
pub extern fn glMinmax(target: GLenum, internalformat: GLenum, sink: GLboolean) void;
pub extern fn glMultMatrixd(m: [*c]const GLdouble) void;
pub extern fn glMultMatrixf(m: [*c]const GLfloat) void;
pub extern fn glNewList(list: GLuint, mode: GLenum) void;
pub extern fn glNormal3b(nx: GLbyte, ny: GLbyte, nz: GLbyte) void;
pub extern fn glNormal3bv(v: [*c]const GLbyte) void;
pub extern fn glNormal3d(nx: GLdouble, ny: GLdouble, nz: GLdouble) void;
pub extern fn glNormal3dv(v: [*c]const GLdouble) void;
pub extern fn glNormal3f(nx: GLfloat, ny: GLfloat, nz: GLfloat) void;
pub extern fn glNormal3fv(v: [*c]const GLfloat) void;
pub extern fn glNormal3i(nx: GLint, ny: GLint, nz: GLint) void;
pub extern fn glNormal3iv(v: [*c]const GLint) void;
pub extern fn glNormal3s(nx: GLshort, ny: GLshort, nz: GLshort) void;
pub extern fn glNormal3sv(v: [*c]const GLshort) void;
pub extern fn glNormalPointer(@"type": GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern fn glOrtho(left: GLdouble, right: GLdouble, bottom: GLdouble, top: GLdouble, zNear: GLdouble, zFar: GLdouble) void;
pub extern fn glPassThrough(token: GLfloat) void;
pub extern fn glPixelMapfv(map: GLenum, mapsize: GLint, values: [*c]const GLfloat) void;
pub extern fn glPixelMapuiv(map: GLenum, mapsize: GLint, values: [*c]const GLuint) void;
pub extern fn glPixelMapusv(map: GLenum, mapsize: GLint, values: [*c]const GLushort) void;
pub extern fn glPixelStoref(pname: GLenum, param: GLfloat) void;
pub extern fn glPixelStorei(pname: GLenum, param: GLint) void;
pub extern fn glPixelTransferf(pname: GLenum, param: GLfloat) void;
pub extern fn glPixelTransferi(pname: GLenum, param: GLint) void;
pub extern fn glPixelZoom(xfactor: GLfloat, yfactor: GLfloat) void;
pub extern fn glPointSize(size: GLfloat) void;
pub extern fn glPolygonMode(face: GLenum, mode: GLenum) void;
pub extern fn glPolygonOffset(factor: GLfloat, units: GLfloat) void;
pub extern fn glPolygonStipple(mask: [*c]const GLubyte) void;
pub extern fn glPopAttrib() void;
pub extern fn glPopClientAttrib() void;
pub extern fn glPopMatrix() void;
pub extern fn glPopName() void;
pub extern fn glPrioritizeTextures(n: GLsizei, textures: [*c]const GLuint, priorities: [*c]const GLclampf) void;
pub extern fn glPushAttrib(mask: GLbitfield) void;
pub extern fn glPushClientAttrib(mask: GLbitfield) void;
pub extern fn glPushMatrix() void;
pub extern fn glPushName(name: GLuint) void;
pub extern fn glRasterPos2d(x: GLdouble, y: GLdouble) void;
pub extern fn glRasterPos2dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos2f(x: GLfloat, y: GLfloat) void;
pub extern fn glRasterPos2fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos2i(x: GLint, y: GLint) void;
pub extern fn glRasterPos2iv(v: [*c]const GLint) void;
pub extern fn glRasterPos2s(x: GLshort, y: GLshort) void;
pub extern fn glRasterPos2sv(v: [*c]const GLshort) void;
pub extern fn glRasterPos3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glRasterPos3dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glRasterPos3fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos3i(x: GLint, y: GLint, z: GLint) void;
pub extern fn glRasterPos3iv(v: [*c]const GLint) void;
pub extern fn glRasterPos3s(x: GLshort, y: GLshort, z: GLshort) void;
pub extern fn glRasterPos3sv(v: [*c]const GLshort) void;
pub extern fn glRasterPos4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
pub extern fn glRasterPos4dv(v: [*c]const GLdouble) void;
pub extern fn glRasterPos4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
pub extern fn glRasterPos4fv(v: [*c]const GLfloat) void;
pub extern fn glRasterPos4i(x: GLint, y: GLint, z: GLint, w: GLint) void;
pub extern fn glRasterPos4iv(v: [*c]const GLint) void;
pub extern fn glRasterPos4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
pub extern fn glRasterPos4sv(v: [*c]const GLshort) void;
pub extern fn glReadBuffer(mode: GLenum) void;
pub extern fn glReadPixels(x: GLint, y: GLint, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*GLvoid) void;
pub extern fn glRectd(x1: GLdouble, y1: GLdouble, x2: GLdouble, y2: GLdouble) void;
pub extern fn glRectdv(v1: [*c]const GLdouble, v2: [*c]const GLdouble) void;
pub extern fn glRectf(x1: GLfloat, y1: GLfloat, x2: GLfloat, y2: GLfloat) void;
pub extern fn glRectfv(v1: [*c]const GLfloat, v2: [*c]const GLfloat) void;
pub extern fn glRecti(x1: GLint, y1: GLint, x2: GLint, y2: GLint) void;
pub extern fn glRectiv(v1: [*c]const GLint, v2: [*c]const GLint) void;
pub extern fn glRects(x1: GLshort, y1: GLshort, x2: GLshort, y2: GLshort) void;
pub extern fn glRectsv(v1: [*c]const GLshort, v2: [*c]const GLshort) void;
pub extern fn glRenderMode(mode: GLenum) GLint;
pub extern fn glResetHistogram(target: GLenum) void;
pub extern fn glResetMinmax(target: GLenum) void;
pub extern fn glRotated(angle: GLdouble, x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glRotatef(angle: GLfloat, x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glScaled(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glScalef(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glScissor(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glSelectBuffer(size: GLsizei, buffer: [*c]GLuint) void;
pub extern fn glSeparableFilter2D(target: GLenum, internalformat: GLenum, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, row: ?*const GLvoid, column: ?*const GLvoid) void;
pub extern fn glShadeModel(mode: GLenum) void;
pub extern fn glStencilFunc(func: GLenum, ref: GLint, mask: GLuint) void;
pub extern fn glStencilMask(mask: GLuint) void;
pub extern fn glStencilOp(fail: GLenum, zfail: GLenum, zpass: GLenum) void;
pub extern fn glTexCoord1d(s: GLdouble) void;
pub extern fn glTexCoord1dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord1f(s: GLfloat) void;
pub extern fn glTexCoord1fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord1i(s: GLint) void;
pub extern fn glTexCoord1iv(v: [*c]const GLint) void;
pub extern fn glTexCoord1s(s: GLshort) void;
pub extern fn glTexCoord1sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord2d(s: GLdouble, t: GLdouble) void;
pub extern fn glTexCoord2dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord2f(s: GLfloat, t: GLfloat) void;
pub extern fn glTexCoord2fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord2i(s: GLint, t: GLint) void;
pub extern fn glTexCoord2iv(v: [*c]const GLint) void;
pub extern fn glTexCoord2s(s: GLshort, t: GLshort) void;
pub extern fn glTexCoord2sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord3d(s: GLdouble, t: GLdouble, r: GLdouble) void;
pub extern fn glTexCoord3dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord3f(s: GLfloat, t: GLfloat, r: GLfloat) void;
pub extern fn glTexCoord3fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord3i(s: GLint, t: GLint, r: GLint) void;
pub extern fn glTexCoord3iv(v: [*c]const GLint) void;
pub extern fn glTexCoord3s(s: GLshort, t: GLshort, r: GLshort) void;
pub extern fn glTexCoord3sv(v: [*c]const GLshort) void;
pub extern fn glTexCoord4d(s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) void;
pub extern fn glTexCoord4dv(v: [*c]const GLdouble) void;
pub extern fn glTexCoord4f(s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) void;
pub extern fn glTexCoord4fv(v: [*c]const GLfloat) void;
pub extern fn glTexCoord4i(s: GLint, t: GLint, r: GLint, q: GLint) void;
pub extern fn glTexCoord4iv(v: [*c]const GLint) void;
pub extern fn glTexCoord4s(s: GLshort, t: GLshort, r: GLshort, q: GLshort) void;
pub extern fn glTexCoord4sv(v: [*c]const GLshort) void;
pub extern fn glTexCoordPointer(size: GLint, @"type": GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern fn glTexEnvf(target: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexEnvfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexEnvi(target: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexEnviv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glTexGend(coord: GLenum, pname: GLenum, param: GLdouble) void;
pub extern fn glTexGendv(coord: GLenum, pname: GLenum, params: [*c]const GLdouble) void;
pub extern fn glTexGenf(coord: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexGenfv(coord: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexGeni(coord: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexGeniv(coord: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glTexImage1D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, border: GLint, format: GLenum, @"type": GLenum, pixels: ?*const GLvoid) void;
pub extern fn glTexImage2D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, border: GLint, format: GLenum, @"type": GLenum, pixels: ?*const GLvoid) void;
pub extern fn glTexImage3D(target: GLenum, level: GLint, internalformat: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, format: GLenum, @"type": GLenum, pixels: ?*const GLvoid) void;
pub extern fn glTexParameterf(target: GLenum, pname: GLenum, param: GLfloat) void;
pub extern fn glTexParameterfv(target: GLenum, pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glTexParameteri(target: GLenum, pname: GLenum, param: GLint) void;
pub extern fn glTexParameteriv(target: GLenum, pname: GLenum, params: [*c]const GLint) void;
pub extern fn glTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*const GLvoid) void;
pub extern fn glTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*const GLvoid) void;
pub extern fn glTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, @"type": GLenum, pixels: ?*const GLvoid) void;
pub extern fn glTranslated(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glTranslatef(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glVertex2d(x: GLdouble, y: GLdouble) void;
pub extern fn glVertex2dv(v: [*c]const GLdouble) void;
pub extern fn glVertex2f(x: GLfloat, y: GLfloat) void;
pub extern fn glVertex2fv(v: [*c]const GLfloat) void;
pub extern fn glVertex2i(x: GLint, y: GLint) void;
pub extern fn glVertex2iv(v: [*c]const GLint) void;
pub extern fn glVertex2s(x: GLshort, y: GLshort) void;
pub extern fn glVertex2sv(v: [*c]const GLshort) void;
pub extern fn glVertex3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glVertex3dv(v: [*c]const GLdouble) void;
pub extern fn glVertex3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glVertex3fv(v: [*c]const GLfloat) void;
pub extern fn glVertex3i(x: GLint, y: GLint, z: GLint) void;
pub extern fn glVertex3iv(v: [*c]const GLint) void;
pub extern fn glVertex3s(x: GLshort, y: GLshort, z: GLshort) void;
pub extern fn glVertex3sv(v: [*c]const GLshort) void;
pub extern fn glVertex4d(x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
pub extern fn glVertex4dv(v: [*c]const GLdouble) void;
pub extern fn glVertex4f(x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
pub extern fn glVertex4fv(v: [*c]const GLfloat) void;
pub extern fn glVertex4i(x: GLint, y: GLint, z: GLint, w: GLint) void;
pub extern fn glVertex4iv(v: [*c]const GLint) void;
pub extern fn glVertex4s(x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
pub extern fn glVertex4sv(v: [*c]const GLshort) void;
pub extern fn glVertexPointer(size: GLint, @"type": GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern fn glViewport(x: GLint, y: GLint, width: GLsizei, height: GLsizei) void;
pub extern fn glSampleCoverage(value: GLclampf, invert: GLboolean) void;
pub extern fn glLoadTransposeMatrixf(m: [*c]const GLfloat) void;
pub extern fn glLoadTransposeMatrixd(m: [*c]const GLdouble) void;
pub extern fn glMultTransposeMatrixf(m: [*c]const GLfloat) void;
pub extern fn glMultTransposeMatrixd(m: [*c]const GLdouble) void;
pub extern fn glCompressedTexImage3D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, depth: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexImage2D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, height: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexImage1D(target: GLenum, level: GLint, internalformat: GLenum, width: GLsizei, border: GLint, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexSubImage3D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, zoffset: GLint, width: GLsizei, height: GLsizei, depth: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexSubImage2D(target: GLenum, level: GLint, xoffset: GLint, yoffset: GLint, width: GLsizei, height: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glCompressedTexSubImage1D(target: GLenum, level: GLint, xoffset: GLint, width: GLsizei, format: GLenum, imageSize: GLsizei, data: ?*const GLvoid) void;
pub extern fn glGetCompressedTexImage(target: GLenum, lod: GLint, img: ?*GLvoid) void;
pub extern fn glActiveTexture(texture: GLenum) void;
pub extern fn glClientActiveTexture(texture: GLenum) void;
pub extern fn glMultiTexCoord1d(target: GLenum, s: GLdouble) void;
pub extern fn glMultiTexCoord1dv(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord1f(target: GLenum, s: GLfloat) void;
pub extern fn glMultiTexCoord1fv(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord1i(target: GLenum, s: GLint) void;
pub extern fn glMultiTexCoord1iv(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord1s(target: GLenum, s: GLshort) void;
pub extern fn glMultiTexCoord1sv(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord2d(target: GLenum, s: GLdouble, t: GLdouble) void;
pub extern fn glMultiTexCoord2dv(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord2f(target: GLenum, s: GLfloat, t: GLfloat) void;
pub extern fn glMultiTexCoord2fv(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord2i(target: GLenum, s: GLint, t: GLint) void;
pub extern fn glMultiTexCoord2iv(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord2s(target: GLenum, s: GLshort, t: GLshort) void;
pub extern fn glMultiTexCoord2sv(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord3d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble) void;
pub extern fn glMultiTexCoord3dv(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord3f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat) void;
pub extern fn glMultiTexCoord3fv(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord3i(target: GLenum, s: GLint, t: GLint, r: GLint) void;
pub extern fn glMultiTexCoord3iv(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord3s(target: GLenum, s: GLshort, t: GLshort, r: GLshort) void;
pub extern fn glMultiTexCoord3sv(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glMultiTexCoord4d(target: GLenum, s: GLdouble, t: GLdouble, r: GLdouble, q: GLdouble) void;
pub extern fn glMultiTexCoord4dv(target: GLenum, v: [*c]const GLdouble) void;
pub extern fn glMultiTexCoord4f(target: GLenum, s: GLfloat, t: GLfloat, r: GLfloat, q: GLfloat) void;
pub extern fn glMultiTexCoord4fv(target: GLenum, v: [*c]const GLfloat) void;
pub extern fn glMultiTexCoord4i(target: GLenum, s: GLint, t: GLint, r: GLint, q: GLint) void;
pub extern fn glMultiTexCoord4iv(target: GLenum, v: [*c]const GLint) void;
pub extern fn glMultiTexCoord4s(target: GLenum, s: GLshort, t: GLshort, r: GLshort, q: GLshort) void;
pub extern fn glMultiTexCoord4sv(target: GLenum, v: [*c]const GLshort) void;
pub extern fn glFogCoordf(coord: GLfloat) void;
pub extern fn glFogCoordfv(coord: [*c]const GLfloat) void;
pub extern fn glFogCoordd(coord: GLdouble) void;
pub extern fn glFogCoorddv(coord: [*c]const GLdouble) void;
pub extern fn glFogCoordPointer(@"type": GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern fn glSecondaryColor3b(red: GLbyte, green: GLbyte, blue: GLbyte) void;
pub extern fn glSecondaryColor3bv(v: [*c]const GLbyte) void;
pub extern fn glSecondaryColor3d(red: GLdouble, green: GLdouble, blue: GLdouble) void;
pub extern fn glSecondaryColor3dv(v: [*c]const GLdouble) void;
pub extern fn glSecondaryColor3f(red: GLfloat, green: GLfloat, blue: GLfloat) void;
pub extern fn glSecondaryColor3fv(v: [*c]const GLfloat) void;
pub extern fn glSecondaryColor3i(red: GLint, green: GLint, blue: GLint) void;
pub extern fn glSecondaryColor3iv(v: [*c]const GLint) void;
pub extern fn glSecondaryColor3s(red: GLshort, green: GLshort, blue: GLshort) void;
pub extern fn glSecondaryColor3sv(v: [*c]const GLshort) void;
pub extern fn glSecondaryColor3ub(red: GLubyte, green: GLubyte, blue: GLubyte) void;
pub extern fn glSecondaryColor3ubv(v: [*c]const GLubyte) void;
pub extern fn glSecondaryColor3ui(red: GLuint, green: GLuint, blue: GLuint) void;
pub extern fn glSecondaryColor3uiv(v: [*c]const GLuint) void;
pub extern fn glSecondaryColor3us(red: GLushort, green: GLushort, blue: GLushort) void;
pub extern fn glSecondaryColor3usv(v: [*c]const GLushort) void;
pub extern fn glSecondaryColorPointer(size: GLint, @"type": GLenum, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern fn glPointParameterf(pname: GLenum, param: GLfloat) void;
pub extern fn glPointParameterfv(pname: GLenum, params: [*c]const GLfloat) void;
pub extern fn glPointParameteri(pname: GLenum, param: GLint) void;
pub extern fn glPointParameteriv(pname: GLenum, params: [*c]const GLint) void;
pub extern fn glBlendFuncSeparate(srcRGB: GLenum, dstRGB: GLenum, srcAlpha: GLenum, dstAlpha: GLenum) void;
pub extern fn glMultiDrawArrays(mode: GLenum, first: [*c]const GLint, count: [*c]const GLsizei, primcount: GLsizei) void;
pub extern fn glMultiDrawElements(mode: GLenum, count: [*c]const GLsizei, @"type": GLenum, indices: [*c]const ?*const GLvoid, primcount: GLsizei) void;
pub extern fn glWindowPos2d(x: GLdouble, y: GLdouble) void;
pub extern fn glWindowPos2dv(v: [*c]const GLdouble) void;
pub extern fn glWindowPos2f(x: GLfloat, y: GLfloat) void;
pub extern fn glWindowPos2fv(v: [*c]const GLfloat) void;
pub extern fn glWindowPos2i(x: GLint, y: GLint) void;
pub extern fn glWindowPos2iv(v: [*c]const GLint) void;
pub extern fn glWindowPos2s(x: GLshort, y: GLshort) void;
pub extern fn glWindowPos2sv(v: [*c]const GLshort) void;
pub extern fn glWindowPos3d(x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glWindowPos3dv(v: [*c]const GLdouble) void;
pub extern fn glWindowPos3f(x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glWindowPos3fv(v: [*c]const GLfloat) void;
pub extern fn glWindowPos3i(x: GLint, y: GLint, z: GLint) void;
pub extern fn glWindowPos3iv(v: [*c]const GLint) void;
pub extern fn glWindowPos3s(x: GLshort, y: GLshort, z: GLshort) void;
pub extern fn glWindowPos3sv(v: [*c]const GLshort) void;
pub extern fn glGenQueries(n: GLsizei, ids: [*c]GLuint) void;
pub extern fn glDeleteQueries(n: GLsizei, ids: [*c]const GLuint) void;
pub extern fn glIsQuery(id: GLuint) GLboolean;
pub extern fn glBeginQuery(target: GLenum, id: GLuint) void;
pub extern fn glEndQuery(target: GLenum) void;
pub extern fn glGetQueryiv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetQueryObjectiv(id: GLuint, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetQueryObjectuiv(id: GLuint, pname: GLenum, params: [*c]GLuint) void;
pub extern fn glBindBuffer(target: GLenum, buffer: GLuint) void;
pub extern fn glDeleteBuffers(n: GLsizei, buffers: [*c]const GLuint) void;
pub extern fn glGenBuffers(n: GLsizei, buffers: [*c]GLuint) void;
pub extern fn glIsBuffer(buffer: GLuint) GLboolean;
pub extern fn glBufferData(target: GLenum, size: GLsizeiptr, data: ?*const GLvoid, usage: GLenum) void;
pub extern fn glBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: ?*const GLvoid) void;
pub extern fn glGetBufferSubData(target: GLenum, offset: GLintptr, size: GLsizeiptr, data: ?*GLvoid) void;
pub extern fn glMapBuffer(target: GLenum, access: GLenum) ?*GLvoid;
pub extern fn glUnmapBuffer(target: GLenum) GLboolean;
pub extern fn glGetBufferParameteriv(target: GLenum, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetBufferPointerv(target: GLenum, pname: GLenum, params: [*c]?*GLvoid) void;
pub extern fn glDrawBuffers(n: GLsizei, bufs: [*c]const GLenum) void;
pub extern fn glVertexAttrib1d(index: GLuint, x: GLdouble) void;
pub extern fn glVertexAttrib1dv(index: GLuint, v: [*c]const GLdouble) void;
pub extern fn glVertexAttrib1f(index: GLuint, x: GLfloat) void;
pub extern fn glVertexAttrib1fv(index: GLuint, v: [*c]const GLfloat) void;
pub extern fn glVertexAttrib1s(index: GLuint, x: GLshort) void;
pub extern fn glVertexAttrib1sv(index: GLuint, v: [*c]const GLshort) void;
pub extern fn glVertexAttrib2d(index: GLuint, x: GLdouble, y: GLdouble) void;
pub extern fn glVertexAttrib2dv(index: GLuint, v: [*c]const GLdouble) void;
pub extern fn glVertexAttrib2f(index: GLuint, x: GLfloat, y: GLfloat) void;
pub extern fn glVertexAttrib2fv(index: GLuint, v: [*c]const GLfloat) void;
pub extern fn glVertexAttrib2s(index: GLuint, x: GLshort, y: GLshort) void;
pub extern fn glVertexAttrib2sv(index: GLuint, v: [*c]const GLshort) void;
pub extern fn glVertexAttrib3d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble) void;
pub extern fn glVertexAttrib3dv(index: GLuint, v: [*c]const GLdouble) void;
pub extern fn glVertexAttrib3f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat) void;
pub extern fn glVertexAttrib3fv(index: GLuint, v: [*c]const GLfloat) void;
pub extern fn glVertexAttrib3s(index: GLuint, x: GLshort, y: GLshort, z: GLshort) void;
pub extern fn glVertexAttrib3sv(index: GLuint, v: [*c]const GLshort) void;
pub extern fn glVertexAttrib4Nbv(index: GLuint, v: [*c]const GLbyte) void;
pub extern fn glVertexAttrib4Niv(index: GLuint, v: [*c]const GLint) void;
pub extern fn glVertexAttrib4Nsv(index: GLuint, v: [*c]const GLshort) void;
pub extern fn glVertexAttrib4Nub(index: GLuint, x: GLubyte, y: GLubyte, z: GLubyte, w: GLubyte) void;
pub extern fn glVertexAttrib4Nubv(index: GLuint, v: [*c]const GLubyte) void;
pub extern fn glVertexAttrib4Nuiv(index: GLuint, v: [*c]const GLuint) void;
pub extern fn glVertexAttrib4Nusv(index: GLuint, v: [*c]const GLushort) void;
pub extern fn glVertexAttrib4bv(index: GLuint, v: [*c]const GLbyte) void;
pub extern fn glVertexAttrib4d(index: GLuint, x: GLdouble, y: GLdouble, z: GLdouble, w: GLdouble) void;
pub extern fn glVertexAttrib4dv(index: GLuint, v: [*c]const GLdouble) void;
pub extern fn glVertexAttrib4f(index: GLuint, x: GLfloat, y: GLfloat, z: GLfloat, w: GLfloat) void;
pub extern fn glVertexAttrib4fv(index: GLuint, v: [*c]const GLfloat) void;
pub extern fn glVertexAttrib4iv(index: GLuint, v: [*c]const GLint) void;
pub extern fn glVertexAttrib4s(index: GLuint, x: GLshort, y: GLshort, z: GLshort, w: GLshort) void;
pub extern fn glVertexAttrib4sv(index: GLuint, v: [*c]const GLshort) void;
pub extern fn glVertexAttrib4ubv(index: GLuint, v: [*c]const GLubyte) void;
pub extern fn glVertexAttrib4uiv(index: GLuint, v: [*c]const GLuint) void;
pub extern fn glVertexAttrib4usv(index: GLuint, v: [*c]const GLushort) void;
pub extern fn glVertexAttribPointer(index: GLuint, size: GLint, @"type": GLenum, normalized: GLboolean, stride: GLsizei, pointer: ?*const GLvoid) void;
pub extern fn glEnableVertexAttribArray(index: GLuint) void;
pub extern fn glDisableVertexAttribArray(index: GLuint) void;
pub extern fn glGetVertexAttribdv(index: GLuint, pname: GLenum, params: [*c]GLdouble) void;
pub extern fn glGetVertexAttribfv(index: GLuint, pname: GLenum, params: [*c]GLfloat) void;
pub extern fn glGetVertexAttribiv(index: GLuint, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetVertexAttribPointerv(index: GLuint, pname: GLenum, pointer: [*c]?*GLvoid) void;
pub extern fn glDeleteShader(shader: GLuint) void;
pub extern fn glDetachShader(program: GLuint, shader: GLuint) void;
pub extern fn glCreateShader(@"type": GLenum) GLuint;
pub extern fn glShaderSource(shader: GLuint, count: GLsizei, string: [*c]const [*c]const GLchar, length: [*c]const GLint) void;
pub extern fn glCompileShader(shader: GLuint) void;
pub extern fn glCreateProgram() GLuint;
pub extern fn glAttachShader(program: GLuint, shader: GLuint) void;
pub extern fn glLinkProgram(program: GLuint) void;
pub extern fn glUseProgram(program: GLuint) void;
pub extern fn glDeleteProgram(program: GLuint) void;
pub extern fn glValidateProgram(program: GLuint) void;
pub extern fn glUniform1f(location: GLint, v0: GLfloat) void;
pub extern fn glUniform2f(location: GLint, v0: GLfloat, v1: GLfloat) void;
pub extern fn glUniform3f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat) void;
pub extern fn glUniform4f(location: GLint, v0: GLfloat, v1: GLfloat, v2: GLfloat, v3: GLfloat) void;
pub extern fn glUniform1i(location: GLint, v0: GLint) void;
pub extern fn glUniform2i(location: GLint, v0: GLint, v1: GLint) void;
pub extern fn glUniform3i(location: GLint, v0: GLint, v1: GLint, v2: GLint) void;
pub extern fn glUniform4i(location: GLint, v0: GLint, v1: GLint, v2: GLint, v3: GLint) void;
pub extern fn glUniform1fv(location: GLint, count: GLsizei, value: [*c]const GLfloat) void;
pub extern fn glUniform2fv(location: GLint, count: GLsizei, value: [*c]const GLfloat) void;
pub extern fn glUniform3fv(location: GLint, count: GLsizei, value: [*c]const GLfloat) void;
pub extern fn glUniform4fv(location: GLint, count: GLsizei, value: [*c]const GLfloat) void;
pub extern fn glUniform1iv(location: GLint, count: GLsizei, value: [*c]const GLint) void;
pub extern fn glUniform2iv(location: GLint, count: GLsizei, value: [*c]const GLint) void;
pub extern fn glUniform3iv(location: GLint, count: GLsizei, value: [*c]const GLint) void;
pub extern fn glUniform4iv(location: GLint, count: GLsizei, value: [*c]const GLint) void;
pub extern fn glUniformMatrix2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void;
pub extern fn glUniformMatrix3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void;
pub extern fn glUniformMatrix4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void;
pub extern fn glIsShader(shader: GLuint) GLboolean;
pub extern fn glIsProgram(program: GLuint) GLboolean;
pub extern fn glGetShaderiv(shader: GLuint, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetProgramiv(program: GLuint, pname: GLenum, params: [*c]GLint) void;
pub extern fn glGetAttachedShaders(program: GLuint, maxCount: GLsizei, count: [*c]GLsizei, shaders: [*c]GLuint) void;
pub extern fn glGetShaderInfoLog(shader: GLuint, bufSize: GLsizei, length: [*c]GLsizei, infoLog: [*c]GLchar) void;
pub extern fn glGetProgramInfoLog(program: GLuint, bufSize: GLsizei, length: [*c]GLsizei, infoLog: [*c]GLchar) void;
pub extern fn glGetUniformLocation(program: GLuint, name: [*c]const GLchar) GLint;
pub extern fn glGetActiveUniform(program: GLuint, index: GLuint, bufSize: GLsizei, length: [*c]GLsizei, size: [*c]GLint, @"type": [*c]GLenum, name: [*c]GLchar) void;
pub extern fn glGetUniformfv(program: GLuint, location: GLint, params: [*c]GLfloat) void;
pub extern fn glGetUniformiv(program: GLuint, location: GLint, params: [*c]GLint) void;
pub extern fn glGetShaderSource(shader: GLuint, bufSize: GLsizei, length: [*c]GLsizei, source: [*c]GLchar) void;
pub extern fn glBindAttribLocation(program: GLuint, index: GLuint, name: [*c]const GLchar) void;
pub extern fn glGetActiveAttrib(program: GLuint, index: GLuint, bufSize: GLsizei, length: [*c]GLsizei, size: [*c]GLint, @"type": [*c]GLenum, name: [*c]GLchar) void;
pub extern fn glGetAttribLocation(program: GLuint, name: [*c]const GLchar) GLint;
pub extern fn glStencilFuncSeparate(face: GLenum, func: GLenum, ref: GLint, mask: GLuint) void;
pub extern fn glStencilOpSeparate(face: GLenum, fail: GLenum, zfail: GLenum, zpass: GLenum) void;
pub extern fn glStencilMaskSeparate(face: GLenum, mask: GLuint) void;
pub extern fn glUniformMatrix2x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void;
pub extern fn glUniformMatrix3x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void;
pub extern fn glUniformMatrix2x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void;
pub extern fn glUniformMatrix4x2fv(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void;
pub extern fn glUniformMatrix3x4fv(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void;
pub extern fn glUniformMatrix4x3fv(location: GLint, count: GLsizei, transpose: GLboolean, value: [*c]const GLfloat) void;
pub const GLFWglproc = ?*const fn () callconv(.C) void;
pub const GLFWvkproc = ?*const fn () callconv(.C) void;
pub const struct_GLFWmonitor = opaque {};
pub const GLFWmonitor = struct_GLFWmonitor;
pub const struct_GLFWwindow = opaque {};
pub const GLFWwindow = struct_GLFWwindow;
pub const struct_GLFWcursor = opaque {};
pub const GLFWcursor = struct_GLFWcursor;
pub const GLFWallocatefun = ?*const fn (usize, ?*anyopaque) callconv(.C) ?*anyopaque;
pub const GLFWreallocatefun = ?*const fn (?*anyopaque, usize, ?*anyopaque) callconv(.C) ?*anyopaque;
pub const GLFWdeallocatefun = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const GLFWerrorfun = ?*const fn (c_int, [*c]const u8) callconv(.C) void;
pub const GLFWwindowposfun = ?*const fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowsizefun = ?*const fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowclosefun = ?*const fn (?*GLFWwindow) callconv(.C) void;
pub const GLFWwindowrefreshfun = ?*const fn (?*GLFWwindow) callconv(.C) void;
pub const GLFWwindowfocusfun = ?*const fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWwindowiconifyfun = ?*const fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWwindowmaximizefun = ?*const fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWframebuffersizefun = ?*const fn (?*GLFWwindow, c_int, c_int) callconv(.C) void;
pub const GLFWwindowcontentscalefun = ?*const fn (?*GLFWwindow, f32, f32) callconv(.C) void;
pub const GLFWmousebuttonfun = ?*const fn (?*GLFWwindow, c_int, c_int, c_int) callconv(.C) void;
pub const GLFWcursorposfun = ?*const fn (?*GLFWwindow, f64, f64) callconv(.C) void;
pub const GLFWcursorenterfun = ?*const fn (?*GLFWwindow, c_int) callconv(.C) void;
pub const GLFWscrollfun = ?*const fn (?*GLFWwindow, f64, f64) callconv(.C) void;
pub const GLFWkeyfun = ?*const fn (?*GLFWwindow, c_int, c_int, c_int, c_int) callconv(.C) void;
pub const GLFWcharfun = ?*const fn (?*GLFWwindow, c_uint) callconv(.C) void;
pub const GLFWcharmodsfun = ?*const fn (?*GLFWwindow, c_uint, c_int) callconv(.C) void;
pub const GLFWdropfun = ?*const fn (?*GLFWwindow, c_int, [*c][*c]const u8) callconv(.C) void;
pub const GLFWmonitorfun = ?*const fn (?*GLFWmonitor, c_int) callconv(.C) void;
pub const GLFWjoystickfun = ?*const fn (c_int, c_int) callconv(.C) void;
pub const struct_GLFWvidmode = extern struct {
    width: c_int,
    height: c_int,
    redBits: c_int,
    greenBits: c_int,
    blueBits: c_int,
    refreshRate: c_int,
};
pub const GLFWvidmode = struct_GLFWvidmode;
pub const struct_GLFWgammaramp = extern struct {
    red: [*c]c_ushort,
    green: [*c]c_ushort,
    blue: [*c]c_ushort,
    size: c_uint,
};
pub const GLFWgammaramp = struct_GLFWgammaramp;
pub const struct_GLFWimage = extern struct {
    width: c_int,
    height: c_int,
    pixels: [*c]u8,
};
pub const GLFWimage = struct_GLFWimage;
pub const struct_GLFWgamepadstate = extern struct {
    buttons: [15]u8,
    axes: [6]f32,
};
pub const GLFWgamepadstate = struct_GLFWgamepadstate;
pub const struct_GLFWallocator = extern struct {
    allocate: GLFWallocatefun,
    reallocate: GLFWreallocatefun,
    deallocate: GLFWdeallocatefun,
    user: ?*anyopaque,
};
pub const GLFWallocator = struct_GLFWallocator;
pub extern fn glfwInit() c_int;
pub extern fn glfwTerminate() void;
pub extern fn glfwInitHint(hint: c_int, value: c_int) void;
pub extern fn glfwInitAllocator(allocator: [*c]const GLFWallocator) void;
pub extern fn glfwInitVulkanLoader(loader: PFN_vkGetInstanceProcAddr) void;
pub extern fn glfwGetVersion(major: [*c]c_int, minor: [*c]c_int, rev: [*c]c_int) void;
pub extern fn glfwGetVersionString() [*c]const u8;
pub extern fn glfwGetError(description: [*c][*c]const u8) c_int;
pub extern fn glfwSetErrorCallback(callback: GLFWerrorfun) GLFWerrorfun;
pub extern fn glfwGetPlatform() c_int;
pub extern fn glfwPlatformSupported(platform: c_int) c_int;
pub extern fn glfwGetMonitors(count: [*c]c_int) [*c]?*GLFWmonitor;
pub extern fn glfwGetPrimaryMonitor() ?*GLFWmonitor;
pub extern fn glfwGetMonitorPos(monitor: ?*GLFWmonitor, xpos: [*c]c_int, ypos: [*c]c_int) void;
pub extern fn glfwGetMonitorWorkarea(monitor: ?*GLFWmonitor, xpos: [*c]c_int, ypos: [*c]c_int, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwGetMonitorPhysicalSize(monitor: ?*GLFWmonitor, widthMM: [*c]c_int, heightMM: [*c]c_int) void;
pub extern fn glfwGetMonitorContentScale(monitor: ?*GLFWmonitor, xscale: [*c]f32, yscale: [*c]f32) void;
pub extern fn glfwGetMonitorName(monitor: ?*GLFWmonitor) [*c]const u8;
pub extern fn glfwSetMonitorUserPointer(monitor: ?*GLFWmonitor, pointer: ?*anyopaque) void;
pub extern fn glfwGetMonitorUserPointer(monitor: ?*GLFWmonitor) ?*anyopaque;
pub extern fn glfwSetMonitorCallback(callback: GLFWmonitorfun) GLFWmonitorfun;
pub extern fn glfwGetVideoModes(monitor: ?*GLFWmonitor, count: [*c]c_int) [*c]const GLFWvidmode;
pub extern fn glfwGetVideoMode(monitor: ?*GLFWmonitor) [*c]const GLFWvidmode;
pub extern fn glfwSetGamma(monitor: ?*GLFWmonitor, gamma: f32) void;
pub extern fn glfwGetGammaRamp(monitor: ?*GLFWmonitor) [*c]const GLFWgammaramp;
pub extern fn glfwSetGammaRamp(monitor: ?*GLFWmonitor, ramp: [*c]const GLFWgammaramp) void;
pub extern fn glfwDefaultWindowHints() void;
pub extern fn glfwWindowHint(hint: c_int, value: c_int) void;
pub extern fn glfwWindowHintString(hint: c_int, value: [*c]const u8) void;
pub extern fn glfwCreateWindow(width: c_int, height: c_int, title: [*c]const u8, monitor: ?*GLFWmonitor, share: ?*GLFWwindow) ?*GLFWwindow;
pub extern fn glfwDestroyWindow(window: ?*GLFWwindow) void;
pub extern fn glfwWindowShouldClose(window: ?*GLFWwindow) c_int;
pub extern fn glfwSetWindowShouldClose(window: ?*GLFWwindow, value: c_int) void;
pub extern fn glfwSetWindowTitle(window: ?*GLFWwindow, title: [*c]const u8) void;
pub extern fn glfwSetWindowIcon(window: ?*GLFWwindow, count: c_int, images: [*c]const GLFWimage) void;
pub extern fn glfwGetWindowPos(window: ?*GLFWwindow, xpos: [*c]c_int, ypos: [*c]c_int) void;
pub extern fn glfwSetWindowPos(window: ?*GLFWwindow, xpos: c_int, ypos: c_int) void;
pub extern fn glfwGetWindowSize(window: ?*GLFWwindow, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwSetWindowSizeLimits(window: ?*GLFWwindow, minwidth: c_int, minheight: c_int, maxwidth: c_int, maxheight: c_int) void;
pub extern fn glfwSetWindowAspectRatio(window: ?*GLFWwindow, numer: c_int, denom: c_int) void;
pub extern fn glfwSetWindowSize(window: ?*GLFWwindow, width: c_int, height: c_int) void;
pub extern fn glfwGetFramebufferSize(window: ?*GLFWwindow, width: [*c]c_int, height: [*c]c_int) void;
pub extern fn glfwGetWindowFrameSize(window: ?*GLFWwindow, left: [*c]c_int, top: [*c]c_int, right: [*c]c_int, bottom: [*c]c_int) void;
pub extern fn glfwGetWindowContentScale(window: ?*GLFWwindow, xscale: [*c]f32, yscale: [*c]f32) void;
pub extern fn glfwGetWindowOpacity(window: ?*GLFWwindow) f32;
pub extern fn glfwSetWindowOpacity(window: ?*GLFWwindow, opacity: f32) void;
pub extern fn glfwIconifyWindow(window: ?*GLFWwindow) void;
pub extern fn glfwRestoreWindow(window: ?*GLFWwindow) void;
pub extern fn glfwMaximizeWindow(window: ?*GLFWwindow) void;
pub extern fn glfwShowWindow(window: ?*GLFWwindow) void;
pub extern fn glfwHideWindow(window: ?*GLFWwindow) void;
pub extern fn glfwFocusWindow(window: ?*GLFWwindow) void;
pub extern fn glfwRequestWindowAttention(window: ?*GLFWwindow) void;
pub extern fn glfwGetWindowMonitor(window: ?*GLFWwindow) ?*GLFWmonitor;
pub extern fn glfwSetWindowMonitor(window: ?*GLFWwindow, monitor: ?*GLFWmonitor, xpos: c_int, ypos: c_int, width: c_int, height: c_int, refreshRate: c_int) void;
pub extern fn glfwGetWindowAttrib(window: ?*GLFWwindow, attrib: c_int) c_int;
pub extern fn glfwSetWindowAttrib(window: ?*GLFWwindow, attrib: c_int, value: c_int) void;
pub extern fn glfwSetWindowUserPointer(window: ?*GLFWwindow, pointer: ?*anyopaque) void;
pub extern fn glfwGetWindowUserPointer(window: ?*GLFWwindow) ?*anyopaque;
pub extern fn glfwSetWindowPosCallback(window: ?*GLFWwindow, callback: GLFWwindowposfun) GLFWwindowposfun;
pub extern fn glfwSetWindowSizeCallback(window: ?*GLFWwindow, callback: GLFWwindowsizefun) GLFWwindowsizefun;
pub extern fn glfwSetWindowCloseCallback(window: ?*GLFWwindow, callback: GLFWwindowclosefun) GLFWwindowclosefun;
pub extern fn glfwSetWindowRefreshCallback(window: ?*GLFWwindow, callback: GLFWwindowrefreshfun) GLFWwindowrefreshfun;
pub extern fn glfwSetWindowFocusCallback(window: ?*GLFWwindow, callback: GLFWwindowfocusfun) GLFWwindowfocusfun;
pub extern fn glfwSetWindowIconifyCallback(window: ?*GLFWwindow, callback: GLFWwindowiconifyfun) GLFWwindowiconifyfun;
pub extern fn glfwSetWindowMaximizeCallback(window: ?*GLFWwindow, callback: GLFWwindowmaximizefun) GLFWwindowmaximizefun;
pub extern fn glfwSetFramebufferSizeCallback(window: ?*GLFWwindow, callback: GLFWframebuffersizefun) GLFWframebuffersizefun;
pub extern fn glfwSetWindowContentScaleCallback(window: ?*GLFWwindow, callback: GLFWwindowcontentscalefun) GLFWwindowcontentscalefun;
pub extern fn glfwPollEvents() void;
pub extern fn glfwWaitEvents() void;
pub extern fn glfwWaitEventsTimeout(timeout: f64) void;
pub extern fn glfwPostEmptyEvent() void;
pub extern fn glfwGetInputMode(window: ?*GLFWwindow, mode: c_int) c_int;
pub extern fn glfwSetInputMode(window: ?*GLFWwindow, mode: c_int, value: c_int) void;
pub extern fn glfwRawMouseMotionSupported() c_int;
pub extern fn glfwGetKeyName(key: c_int, scancode: c_int) [*c]const u8;
pub extern fn glfwGetKeyScancode(key: c_int) c_int;
pub extern fn glfwGetKey(window: ?*GLFWwindow, key: c_int) c_int;
pub extern fn glfwGetMouseButton(window: ?*GLFWwindow, button: c_int) c_int;
pub extern fn glfwGetCursorPos(window: ?*GLFWwindow, xpos: [*c]f64, ypos: [*c]f64) void;
pub extern fn glfwSetCursorPos(window: ?*GLFWwindow, xpos: f64, ypos: f64) void;
pub extern fn glfwCreateCursor(image: [*c]const GLFWimage, xhot: c_int, yhot: c_int) ?*GLFWcursor;
pub extern fn glfwCreateStandardCursor(shape: c_int) ?*GLFWcursor;
pub extern fn glfwDestroyCursor(cursor: ?*GLFWcursor) void;
pub extern fn glfwSetCursor(window: ?*GLFWwindow, cursor: ?*GLFWcursor) void;
pub extern fn glfwSetKeyCallback(window: ?*GLFWwindow, callback: GLFWkeyfun) GLFWkeyfun;
pub extern fn glfwSetCharCallback(window: ?*GLFWwindow, callback: GLFWcharfun) GLFWcharfun;
pub extern fn glfwSetCharModsCallback(window: ?*GLFWwindow, callback: GLFWcharmodsfun) GLFWcharmodsfun;
pub extern fn glfwSetMouseButtonCallback(window: ?*GLFWwindow, callback: GLFWmousebuttonfun) GLFWmousebuttonfun;
pub extern fn glfwSetCursorPosCallback(window: ?*GLFWwindow, callback: GLFWcursorposfun) GLFWcursorposfun;
pub extern fn glfwSetCursorEnterCallback(window: ?*GLFWwindow, callback: GLFWcursorenterfun) GLFWcursorenterfun;
pub extern fn glfwSetScrollCallback(window: ?*GLFWwindow, callback: GLFWscrollfun) GLFWscrollfun;
pub extern fn glfwSetDropCallback(window: ?*GLFWwindow, callback: GLFWdropfun) GLFWdropfun;
pub extern fn glfwJoystickPresent(jid: c_int) c_int;
pub extern fn glfwGetJoystickAxes(jid: c_int, count: [*c]c_int) [*c]const f32;
pub extern fn glfwGetJoystickButtons(jid: c_int, count: [*c]c_int) [*c]const u8;
pub extern fn glfwGetJoystickHats(jid: c_int, count: [*c]c_int) [*c]const u8;
pub extern fn glfwGetJoystickName(jid: c_int) [*c]const u8;
pub extern fn glfwGetJoystickGUID(jid: c_int) [*c]const u8;
pub extern fn glfwSetJoystickUserPointer(jid: c_int, pointer: ?*anyopaque) void;
pub extern fn glfwGetJoystickUserPointer(jid: c_int) ?*anyopaque;
pub extern fn glfwJoystickIsGamepad(jid: c_int) c_int;
pub extern fn glfwSetJoystickCallback(callback: GLFWjoystickfun) GLFWjoystickfun;
pub extern fn glfwUpdateGamepadMappings(string: [*c]const u8) c_int;
pub extern fn glfwGetGamepadName(jid: c_int) [*c]const u8;
pub extern fn glfwGetGamepadState(jid: c_int, state: [*c]GLFWgamepadstate) c_int;
pub extern fn glfwSetClipboardString(window: ?*GLFWwindow, string: [*c]const u8) void;
pub extern fn glfwGetClipboardString(window: ?*GLFWwindow) [*c]const u8;
pub extern fn glfwGetTime() f64;
pub extern fn glfwSetTime(time: f64) void;
pub extern fn glfwGetTimerValue() u64;
pub extern fn glfwGetTimerFrequency() u64;
pub extern fn glfwMakeContextCurrent(window: ?*GLFWwindow) void;
pub extern fn glfwGetCurrentContext() ?*GLFWwindow;
pub extern fn glfwSwapBuffers(window: ?*GLFWwindow) void;
pub extern fn glfwSwapInterval(interval: c_int) void;
pub extern fn glfwExtensionSupported(extension: [*c]const u8) c_int;
pub extern fn glfwGetProcAddress(procname: [*c]const u8) GLFWglproc;
pub extern fn glfwVulkanSupported() c_int;
pub extern fn glfwGetRequiredInstanceExtensions(count: [*c]u32) [*c][*c]const u8;
pub extern fn glfwGetInstanceProcAddress(instance: VkInstance, procname: [*c]const u8) GLFWvkproc;
pub extern fn glfwGetPhysicalDevicePresentationSupport(instance: VkInstance, device: VkPhysicalDevice, queuefamily: u32) c_int;
pub extern fn glfwCreateWindowSurface(instance: VkInstance, window: ?*GLFWwindow, allocator: [*c]const VkAllocationCallbacks, surface: [*c]VkSurfaceKHR) VkResult;
pub fn _OSSwapInt16(arg__data: u16) callconv(.C) u16 {
    var _data = arg__data;
    return @bitCast(u16, @truncate(c_short, (@bitCast(c_int, @as(c_uint, _data)) << @intCast(@import("std").math.Log2Int(c_int), 8)) | (@bitCast(c_int, @as(c_uint, _data)) >> @intCast(@import("std").math.Log2Int(c_int), 8))));
}
pub fn _OSSwapInt32(arg__data: u32) callconv(.C) u32 {
    var _data = arg__data;
    _data = __builtin_bswap32(_data);
    return _data;
}
pub fn _OSSwapInt64(arg__data: u64) callconv(.C) u64 {
    var _data = arg__data;
    return __builtin_bswap64(_data);
}
pub const struct__OSUnalignedU16 = packed struct {
    __val: u16,
};
pub const struct__OSUnalignedU32 = packed struct {
    __val: u32,
};
pub const struct__OSUnalignedU64 = packed struct {
    __val: u64,
};
pub fn OSReadSwapInt16(arg__base: ?*const volatile anyopaque, arg__offset: usize) callconv(.C) u16 {
    var _base = arg__base;
    var _offset = arg__offset;
    return _OSSwapInt16(@intToPtr([*c]struct__OSUnalignedU16, @intCast(usize, @ptrToInt(_base)) +% _offset).*.__val);
}
pub fn OSReadSwapInt32(arg__base: ?*const volatile anyopaque, arg__offset: usize) callconv(.C) u32 {
    var _base = arg__base;
    var _offset = arg__offset;
    return _OSSwapInt32(@intToPtr([*c]struct__OSUnalignedU32, @intCast(usize, @ptrToInt(_base)) +% _offset).*.__val);
}
pub fn OSReadSwapInt64(arg__base: ?*const volatile anyopaque, arg__offset: usize) callconv(.C) u64 {
    var _base = arg__base;
    var _offset = arg__offset;
    return _OSSwapInt64(@intToPtr([*c]struct__OSUnalignedU64, @intCast(usize, @ptrToInt(_base)) +% _offset).*.__val);
}
pub fn OSWriteSwapInt16(arg__base: ?*volatile anyopaque, arg__offset: usize, arg__data: u16) callconv(.C) void {
    var _base = arg__base;
    var _offset = arg__offset;
    var _data = arg__data;
    @intToPtr([*c]struct__OSUnalignedU16, @intCast(usize, @ptrToInt(_base)) +% _offset).*.__val = _OSSwapInt16(_data);
}
pub fn OSWriteSwapInt32(arg__base: ?*volatile anyopaque, arg__offset: usize, arg__data: u32) callconv(.C) void {
    var _base = arg__base;
    var _offset = arg__offset;
    var _data = arg__data;
    @intToPtr([*c]struct__OSUnalignedU32, @intCast(usize, @ptrToInt(_base)) +% _offset).*.__val = _OSSwapInt32(_data);
}
pub fn OSWriteSwapInt64(arg__base: ?*volatile anyopaque, arg__offset: usize, arg__data: u64) callconv(.C) void {
    var _base = arg__base;
    var _offset = arg__offset;
    var _data = arg__data;
    @intToPtr([*c]struct__OSUnalignedU64, @intCast(usize, @ptrToInt(_base)) +% _offset).*.__val = _OSSwapInt64(_data);
}
pub const u_char = u8;
pub const u_short = c_ushort;
pub const u_int = c_uint;
pub const u_long = c_ulong;
pub const ushort = c_ushort;
pub const uint = c_uint;
pub const u_quad_t = u_int64_t;
pub const quad_t = i64;
pub const qaddr_t = [*c]quad_t;
pub const caddr_t = [*c]u8;
pub const daddr_t = i32;
pub const dev_t = __darwin_dev_t;
pub const fixpt_t = u_int32_t;
pub const blkcnt_t = __darwin_blkcnt_t;
pub const blksize_t = __darwin_blksize_t;
pub const gid_t = __darwin_gid_t;
pub const in_addr_t = __uint32_t;
pub const in_port_t = __uint16_t;
pub const ino_t = __darwin_ino_t;
pub const ino64_t = __darwin_ino64_t;
pub const key_t = __int32_t;
pub const mode_t = __darwin_mode_t;
pub const nlink_t = __uint16_t;
pub const id_t = __darwin_id_t;
pub const pid_t = __darwin_pid_t;
pub const off_t = __darwin_off_t;
pub const segsz_t = i32;
pub const swblk_t = i32;
pub const uid_t = __darwin_uid_t;
pub const clock_t = __darwin_clock_t;
pub const time_t = __darwin_time_t;
pub const useconds_t = __darwin_useconds_t;
pub const suseconds_t = __darwin_suseconds_t;
pub const rsize_t = __darwin_size_t;
pub const errno_t = c_int;
pub const struct_fd_set = extern struct {
    fds_bits: [32]__int32_t,
};
pub const fd_set = struct_fd_set;
pub extern fn __darwin_check_fd_set_overflow(c_int, ?*const anyopaque, c_int) c_int;
pub inline fn __darwin_check_fd_set(arg__a: c_int, arg__b: ?*const anyopaque) c_int {
    var _a = arg__a;
    var _b = arg__b;
    if (@intCast(usize, @ptrToInt(&__darwin_check_fd_set_overflow)) != @bitCast(usize, @as(c_long, @as(c_int, 0)))) {
        return __darwin_check_fd_set_overflow(_a, _b, @as(c_int, 0));
    } else {
        return 1;
    }
    return 0;
}
pub inline fn __darwin_fd_isset(arg__fd: c_int, arg__p: [*c]const struct_fd_set) c_int {
    var _fd = arg__fd;
    var _p = arg__p;
    if (__darwin_check_fd_set(_fd, @ptrCast(?*const anyopaque, _p)) != 0) {
        return _p.*.fds_bits[@bitCast(c_ulong, @as(c_long, _fd)) / (@sizeOf(__int32_t) *% @bitCast(c_ulong, @as(c_long, @as(c_int, 8))))] & @bitCast(__int32_t, @truncate(c_uint, @bitCast(c_ulong, @as(c_long, @as(c_int, 1))) << @intCast(@import("std").math.Log2Int(c_ulong), @bitCast(c_ulong, @as(c_long, _fd)) % (@sizeOf(__int32_t) *% @bitCast(c_ulong, @as(c_long, @as(c_int, 8)))))));
    }
    return 0;
}
pub inline fn __darwin_fd_set(arg__fd: c_int, _p: [*c]struct_fd_set) void {
    var _fd = arg__fd;
    if (__darwin_check_fd_set(_fd, @ptrCast(?*const anyopaque, _p)) != 0) {
        _ = blk: {
            const ref = &_p.*.fds_bits[@bitCast(c_ulong, @as(c_long, _fd)) / (@sizeOf(__int32_t) *% @bitCast(c_ulong, @as(c_long, @as(c_int, 8))))];
            ref.* |= @bitCast(__int32_t, @truncate(c_uint, @bitCast(c_ulong, @as(c_long, @as(c_int, 1))) << @intCast(@import("std").math.Log2Int(c_ulong), @bitCast(c_ulong, @as(c_long, _fd)) % (@sizeOf(__int32_t) *% @bitCast(c_ulong, @as(c_long, @as(c_int, 8)))))));
            break :blk ref.*;
        };
    }
}
pub inline fn __darwin_fd_clr(arg__fd: c_int, _p: [*c]struct_fd_set) void {
    var _fd = arg__fd;
    if (__darwin_check_fd_set(_fd, @ptrCast(?*const anyopaque, _p)) != 0) {
        _ = blk: {
            const ref = &_p.*.fds_bits[@bitCast(c_ulong, @as(c_long, _fd)) / (@sizeOf(__int32_t) *% @bitCast(c_ulong, @as(c_long, @as(c_int, 8))))];
            ref.* &= ~@bitCast(__int32_t, @truncate(c_uint, @bitCast(c_ulong, @as(c_long, @as(c_int, 1))) << @intCast(@import("std").math.Log2Int(c_ulong), @bitCast(c_ulong, @as(c_long, _fd)) % (@sizeOf(__int32_t) *% @bitCast(c_ulong, @as(c_long, @as(c_int, 8)))))));
            break :blk ref.*;
        };
    }
}
pub const fd_mask = __int32_t;
pub const pthread_attr_t = __darwin_pthread_attr_t;
pub const pthread_cond_t = __darwin_pthread_cond_t;
pub const pthread_condattr_t = __darwin_pthread_condattr_t;
pub const pthread_mutex_t = __darwin_pthread_mutex_t;
pub const pthread_mutexattr_t = __darwin_pthread_mutexattr_t;
pub const pthread_once_t = __darwin_pthread_once_t;
pub const pthread_rwlock_t = __darwin_pthread_rwlock_t;
pub const pthread_rwlockattr_t = __darwin_pthread_rwlockattr_t;
pub const pthread_t = __darwin_pthread_t;
pub const pthread_key_t = __darwin_pthread_key_t;
pub const fsblkcnt_t = __darwin_fsblkcnt_t;
pub const fsfilcnt_t = __darwin_fsfilcnt_t;
pub const va_list = __builtin_va_list;
pub const __gnuc_va_list = __builtin_va_list;
pub extern fn __assert_rtn([*c]const u8, [*c]const u8, c_int, [*c]const u8) noreturn;
pub const __darwin_nl_item = c_int;
pub const __darwin_wctrans_t = c_int;
pub const __darwin_wctype_t = __uint32_t;
pub const ct_rune_t = __darwin_ct_rune_t;
pub const rune_t = __darwin_rune_t;
pub const wint_t = __darwin_wint_t;
pub const _RuneEntry = extern struct {
    __min: __darwin_rune_t,
    __max: __darwin_rune_t,
    __map: __darwin_rune_t,
    __types: [*c]__uint32_t,
};
pub const _RuneRange = extern struct {
    __nranges: c_int,
    __ranges: [*c]_RuneEntry,
};
pub const _RuneCharClass = extern struct {
    __name: [14]u8,
    __mask: __uint32_t,
};
pub const _RuneLocale = extern struct {
    __magic: [8]u8,
    __encoding: [32]u8,
    __sgetrune: ?fn ([*c]const u8, __darwin_size_t, [*c][*c]const u8) callconv(.C) __darwin_rune_t,
    __sputrune: ?fn (__darwin_rune_t, [*c]u8, __darwin_size_t, [*c][*c]u8) callconv(.C) c_int,
    __invalid_rune: __darwin_rune_t,
    __runetype: [256]__uint32_t,
    __maplower: [256]__darwin_rune_t,
    __mapupper: [256]__darwin_rune_t,
    __runetype_ext: _RuneRange,
    __maplower_ext: _RuneRange,
    __mapupper_ext: _RuneRange,
    __variable: ?*anyopaque,
    __variable_len: c_int,
    __ncharclasses: c_int,
    __charclasses: [*c]_RuneCharClass,
};
pub extern var _DefaultRuneLocale: _RuneLocale;
pub extern var _CurrentRuneLocale: [*c]_RuneLocale;
pub extern fn ___runetype(__darwin_ct_rune_t) c_ulong;
pub extern fn ___tolower(__darwin_ct_rune_t) __darwin_ct_rune_t;
pub extern fn ___toupper(__darwin_ct_rune_t) __darwin_ct_rune_t;
pub fn isascii(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return @boolToInt((_c & ~@as(c_int, 127)) == @as(c_int, 0));
}
pub extern fn __maskrune(__darwin_ct_rune_t, c_ulong) c_int;
pub fn __istype(arg__c: __darwin_ct_rune_t, arg__f: c_ulong) callconv(.C) c_int {
    var _c = arg__c;
    var _f = arg__f;
    return if (isascii(_c) != 0) @boolToInt(!!((@bitCast(c_ulong, @as(c_ulong, _DefaultRuneLocale.__runetype[@intCast(c_uint, _c)])) & _f) != 0)) else @boolToInt(!!(__maskrune(_c, _f) != 0));
}
pub fn __isctype(arg__c: __darwin_ct_rune_t, arg__f: c_ulong) callconv(.C) __darwin_ct_rune_t {
    var _c = arg__c;
    var _f = arg__f;
    return if ((_c < @as(c_int, 0)) or (_c >= (@as(c_int, 1) << @intCast(@import("std").math.Log2Int(c_int), 8)))) @as(c_int, 0) else @boolToInt(!!((@bitCast(c_ulong, @as(c_ulong, _DefaultRuneLocale.__runetype[@intCast(c_uint, _c)])) & _f) != 0));
}
pub extern fn __toupper(__darwin_ct_rune_t) __darwin_ct_rune_t;
pub extern fn __tolower(__darwin_ct_rune_t) __darwin_ct_rune_t;
pub fn __wcwidth(arg__c: __darwin_ct_rune_t) callconv(.C) c_int {
    var _c = arg__c;
    var _x: c_uint = undefined;
    if (_c == @as(c_int, 0)) return @as(c_int, 0);
    _x = @bitCast(c_uint, __maskrune(_c, @bitCast(c_ulong, @as(c_long, 3758096384) | @as(c_long, 262144))));
    if ((@bitCast(c_long, @as(c_ulong, _x)) & @as(c_long, 3758096384)) != @bitCast(c_long, @as(c_long, @as(c_int, 0)))) return @bitCast(c_int, @truncate(c_int, (@bitCast(c_long, @as(c_ulong, _x)) & @as(c_long, 3758096384)) >> @intCast(@import("std").math.Log2Int(c_long), 30)));
    return if ((@bitCast(c_long, @as(c_ulong, _x)) & @as(c_long, 262144)) != @bitCast(c_long, @as(c_long, @as(c_int, 0)))) @as(c_int, 1) else -@as(c_int, 1);
}
pub fn isalnum(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __istype(_c, @bitCast(c_ulong, @as(c_long, 256) | @as(c_long, 1024)));
}
pub fn isalpha(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __istype(_c, @bitCast(c_ulong, @as(c_long, 256)));
}
pub fn isblank(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __istype(_c, @bitCast(c_ulong, @as(c_long, 131072)));
}
pub fn iscntrl(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __istype(_c, @bitCast(c_ulong, @as(c_long, 512)));
}
pub fn isdigit(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __isctype(_c, @bitCast(c_ulong, @as(c_long, 1024)));
}
pub fn isgraph(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __istype(_c, @bitCast(c_ulong, @as(c_long, 2048)));
}
pub fn islower(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __istype(_c, @bitCast(c_ulong, @as(c_long, 4096)));
}
pub fn isprint(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __istype(_c, @bitCast(c_ulong, @as(c_long, 262144)));
}
pub fn ispunct(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __istype(_c, @bitCast(c_ulong, @as(c_long, 8192)));
}
pub fn isspace(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __istype(_c, @bitCast(c_ulong, @as(c_long, 16384)));
}
pub fn isupper(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __istype(_c, @bitCast(c_ulong, @as(c_long, 32768)));
}
pub fn isxdigit(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __isctype(_c, @bitCast(c_ulong, @as(c_long, 65536)));
}
pub fn toascii(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return _c & @as(c_int, 127);
}
pub fn tolower(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __tolower(_c);
}
pub fn toupper(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __toupper(_c);
}
pub fn digittoint(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __maskrune(_c, @bitCast(c_ulong, @as(c_long, @as(c_int, 15))));
}
pub fn ishexnumber(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __istype(_c, @bitCast(c_ulong, @as(c_long, 65536)));
}
pub fn isideogram(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __istype(_c, @bitCast(c_ulong, @as(c_long, 524288)));
}
pub fn isnumber(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __istype(_c, @bitCast(c_ulong, @as(c_long, 1024)));
}
pub fn isphonogram(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __istype(_c, @bitCast(c_ulong, @as(c_long, 2097152)));
}
pub fn isrune(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __istype(_c, @bitCast(c_ulong, @as(c_long, 4294967280)));
}
pub fn isspecial(arg__c: c_int) callconv(.C) c_int {
    var _c = arg__c;
    return __istype(_c, @bitCast(c_ulong, @as(c_long, 1048576)));
}
pub extern fn __error() [*c]c_int;
pub const struct_lconv = extern struct {
    decimal_point: [*c]u8,
    thousands_sep: [*c]u8,
    grouping: [*c]u8,
    int_curr_symbol: [*c]u8,
    currency_symbol: [*c]u8,
    mon_decimal_point: [*c]u8,
    mon_thousands_sep: [*c]u8,
    mon_grouping: [*c]u8,
    positive_sign: [*c]u8,
    negative_sign: [*c]u8,
    int_frac_digits: u8,
    frac_digits: u8,
    p_cs_precedes: u8,
    p_sep_by_space: u8,
    n_cs_precedes: u8,
    n_sep_by_space: u8,
    p_sign_posn: u8,
    n_sign_posn: u8,
    int_p_cs_precedes: u8,
    int_n_cs_precedes: u8,
    int_p_sep_by_space: u8,
    int_n_sep_by_space: u8,
    int_p_sign_posn: u8,
    int_n_sign_posn: u8,
};
pub extern fn localeconv() [*c]struct_lconv;
pub extern fn setlocale(c_int, [*c]const u8) [*c]u8;
pub const float_t = f32;
pub const double_t = f64;
pub extern fn __math_errhandling() c_int;
pub extern fn __fpclassifyf(f32) c_int;
pub extern fn __fpclassifyd(f64) c_int;
pub extern fn __fpclassifyl(c_longdouble) c_int;
pub inline fn __inline_isfinitef(arg___x: f32) c_int {
    var __x = arg___x;
    return @boolToInt((__x == __x) and (__builtin_fabsf(__x) != __builtin_inff()));
} // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:194:49: warning: TODO implement function '__builtin_inf' in std.zig.c_builtins
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:193:28: warning: unable to translate function, demoted to extern
pub extern fn __inline_isfinited(arg___x: f64) c_int; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:197:26: warning: TODO implement function '__builtin_fabsl' in std.zig.c_builtins
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:196:28: warning: unable to translate function, demoted to extern
pub extern fn __inline_isfinitel(arg___x: c_longdouble) c_int;
pub inline fn __inline_isinff(arg___x: f32) c_int {
    var __x = arg___x;
    return @boolToInt(__builtin_fabsf(__x) == __builtin_inff());
} // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:203:35: warning: TODO implement function '__builtin_inf' in std.zig.c_builtins
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:202:28: warning: unable to translate function, demoted to extern
pub extern fn __inline_isinfd(arg___x: f64) c_int; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:206:12: warning: TODO implement function '__builtin_fabsl' in std.zig.c_builtins
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:205:28: warning: unable to translate function, demoted to extern
pub extern fn __inline_isinfl(arg___x: c_longdouble) c_int;
pub inline fn __inline_isnanf(arg___x: f32) c_int {
    var __x = arg___x;
    return @boolToInt(__x != __x);
}
pub inline fn __inline_isnand(arg___x: f64) c_int {
    var __x = arg___x;
    return @boolToInt(__x != __x);
}
pub inline fn __inline_isnanl(arg___x: c_longdouble) c_int {
    var __x = arg___x;
    return @boolToInt(__x != __x);
}
pub inline fn __inline_isnormalf(arg___x: f32) c_int {
    var __x = arg___x;
    return @boolToInt((__inline_isfinitef(__x) != 0) and (__builtin_fabsf(__x) >= 0.000000000000000000000000000000000000011754943508222875));
}
pub inline fn __inline_isnormald(arg___x: f64) c_int {
    var __x = arg___x;
    return @boolToInt((__inline_isfinited(__x) != 0) and (__builtin_fabs(__x) >= 0.000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000022250738585072014));
} // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:250:39: warning: TODO implement function '__builtin_fabsl' in std.zig.c_builtins
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:249:28: warning: unable to translate function, demoted to extern
pub extern fn __inline_isnormall(arg___x: c_longdouble) c_int;
pub inline fn __inline_signbitf(arg___x: f32) c_int {
    var __x = arg___x;
    const union_unnamed_1 = extern union {
        __f: f32,
        __u: c_uint,
    };
    var __u: union_unnamed_1 = undefined;
    __u.__f = __x;
    return @bitCast(c_int, __u.__u >> @intCast(@import("std").math.Log2Int(c_uint), 31));
}
pub inline fn __inline_signbitd(arg___x: f64) c_int {
    var __x = arg___x;
    const union_unnamed_2 = extern union {
        __f: f64,
        __u: c_ulonglong,
    };
    var __u: union_unnamed_2 = undefined;
    __u.__f = __x;
    return @bitCast(c_int, @truncate(c_uint, __u.__u >> @intCast(@import("std").math.Log2Int(c_ulonglong), 63)));
}
pub inline fn __inline_signbitl(arg___x: c_longdouble) c_int {
    var __x = arg___x;
    const union_unnamed_3 = extern union {
        __f: c_longdouble,
        __u: c_ulonglong,
    };
    var __u: union_unnamed_3 = undefined;
    __u.__f = __x;
    return @bitCast(c_int, @truncate(c_uint, __u.__u >> @intCast(@import("std").math.Log2Int(c_ulonglong), 63)));
}
pub extern fn acosf(f32) f32;
pub extern fn acos(f64) f64;
pub extern fn acosl(c_longdouble) c_longdouble;
pub extern fn asinf(f32) f32;
pub extern fn asin(f64) f64;
pub extern fn asinl(c_longdouble) c_longdouble;
pub extern fn atanf(f32) f32;
pub extern fn atan(f64) f64;
pub extern fn atanl(c_longdouble) c_longdouble;
pub extern fn atan2f(f32, f32) f32;
pub extern fn atan2(f64, f64) f64;
pub extern fn atan2l(c_longdouble, c_longdouble) c_longdouble;
pub extern fn cosf(f32) f32;
pub extern fn cos(f64) f64;
pub extern fn cosl(c_longdouble) c_longdouble;
pub extern fn sinf(f32) f32;
pub extern fn sin(f64) f64;
pub extern fn sinl(c_longdouble) c_longdouble;
pub extern fn tanf(f32) f32;
pub extern fn tan(f64) f64;
pub extern fn tanl(c_longdouble) c_longdouble;
pub extern fn acoshf(f32) f32;
pub extern fn acosh(f64) f64;
pub extern fn acoshl(c_longdouble) c_longdouble;
pub extern fn asinhf(f32) f32;
pub extern fn asinh(f64) f64;
pub extern fn asinhl(c_longdouble) c_longdouble;
pub extern fn atanhf(f32) f32;
pub extern fn atanh(f64) f64;
pub extern fn atanhl(c_longdouble) c_longdouble;
pub extern fn coshf(f32) f32;
pub extern fn cosh(f64) f64;
pub extern fn coshl(c_longdouble) c_longdouble;
pub extern fn sinhf(f32) f32;
pub extern fn sinh(f64) f64;
pub extern fn sinhl(c_longdouble) c_longdouble;
pub extern fn tanhf(f32) f32;
pub extern fn tanh(f64) f64;
pub extern fn tanhl(c_longdouble) c_longdouble;
pub extern fn expf(f32) f32;
pub extern fn exp(f64) f64;
pub extern fn expl(c_longdouble) c_longdouble;
pub extern fn exp2f(f32) f32;
pub extern fn exp2(f64) f64;
pub extern fn exp2l(c_longdouble) c_longdouble;
pub extern fn expm1f(f32) f32;
pub extern fn expm1(f64) f64;
pub extern fn expm1l(c_longdouble) c_longdouble;
pub extern fn logf(f32) f32;
pub extern fn log(f64) f64;
pub extern fn logl(c_longdouble) c_longdouble;
pub extern fn log10f(f32) f32;
pub extern fn log10(f64) f64;
pub extern fn log10l(c_longdouble) c_longdouble;
pub extern fn log2f(f32) f32;
pub extern fn log2(f64) f64;
pub extern fn log2l(c_longdouble) c_longdouble;
pub extern fn log1pf(f32) f32;
pub extern fn log1p(f64) f64;
pub extern fn log1pl(c_longdouble) c_longdouble;
pub extern fn logbf(f32) f32;
pub extern fn logb(f64) f64;
pub extern fn logbl(c_longdouble) c_longdouble;
pub extern fn modff(f32, [*c]f32) f32;
pub extern fn modf(f64, [*c]f64) f64;
pub extern fn modfl(c_longdouble, [*c]c_longdouble) c_longdouble;
pub extern fn ldexpf(f32, c_int) f32;
pub extern fn ldexp(f64, c_int) f64;
pub extern fn ldexpl(c_longdouble, c_int) c_longdouble;
pub extern fn frexpf(f32, [*c]c_int) f32;
pub extern fn frexp(f64, [*c]c_int) f64;
pub extern fn frexpl(c_longdouble, [*c]c_int) c_longdouble;
pub extern fn ilogbf(f32) c_int;
pub extern fn ilogb(f64) c_int;
pub extern fn ilogbl(c_longdouble) c_int;
pub extern fn scalbnf(f32, c_int) f32;
pub extern fn scalbn(f64, c_int) f64;
pub extern fn scalbnl(c_longdouble, c_int) c_longdouble;
pub extern fn scalblnf(f32, c_long) f32;
pub extern fn scalbln(f64, c_long) f64;
pub extern fn scalblnl(c_longdouble, c_long) c_longdouble;
pub extern fn fabsf(f32) f32;
pub extern fn fabs(f64) f64;
pub extern fn fabsl(c_longdouble) c_longdouble;
pub extern fn cbrtf(f32) f32;
pub extern fn cbrt(f64) f64;
pub extern fn cbrtl(c_longdouble) c_longdouble;
pub extern fn hypotf(f32, f32) f32;
pub extern fn hypot(f64, f64) f64;
pub extern fn hypotl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn powf(f32, f32) f32;
pub extern fn pow(f64, f64) f64;
pub extern fn powl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn sqrtf(f32) f32;
pub extern fn sqrt(f64) f64;
pub extern fn sqrtl(c_longdouble) c_longdouble;
pub extern fn erff(f32) f32;
pub extern fn erf(f64) f64;
pub extern fn erfl(c_longdouble) c_longdouble;
pub extern fn erfcf(f32) f32;
pub extern fn erfc(f64) f64;
pub extern fn erfcl(c_longdouble) c_longdouble;
pub extern fn lgammaf(f32) f32;
pub extern fn lgamma(f64) f64;
pub extern fn lgammal(c_longdouble) c_longdouble;
pub extern fn tgammaf(f32) f32;
pub extern fn tgamma(f64) f64;
pub extern fn tgammal(c_longdouble) c_longdouble;
pub extern fn ceilf(f32) f32;
pub extern fn ceil(f64) f64;
pub extern fn ceill(c_longdouble) c_longdouble;
pub extern fn floorf(f32) f32;
pub extern fn floor(f64) f64;
pub extern fn floorl(c_longdouble) c_longdouble;
pub extern fn nearbyintf(f32) f32;
pub extern fn nearbyint(f64) f64;
pub extern fn nearbyintl(c_longdouble) c_longdouble;
pub extern fn rintf(f32) f32;
pub extern fn rint(f64) f64;
pub extern fn rintl(c_longdouble) c_longdouble;
pub extern fn lrintf(f32) c_long;
pub extern fn lrint(f64) c_long;
pub extern fn lrintl(c_longdouble) c_long;
pub extern fn roundf(f32) f32;
pub extern fn round(f64) f64;
pub extern fn roundl(c_longdouble) c_longdouble;
pub extern fn lroundf(f32) c_long;
pub extern fn lround(f64) c_long;
pub extern fn lroundl(c_longdouble) c_long;
pub extern fn llrintf(f32) c_longlong;
pub extern fn llrint(f64) c_longlong;
pub extern fn llrintl(c_longdouble) c_longlong;
pub extern fn llroundf(f32) c_longlong;
pub extern fn llround(f64) c_longlong;
pub extern fn llroundl(c_longdouble) c_longlong;
pub extern fn truncf(f32) f32;
pub extern fn trunc(f64) f64;
pub extern fn truncl(c_longdouble) c_longdouble;
pub extern fn fmodf(f32, f32) f32;
pub extern fn fmod(f64, f64) f64;
pub extern fn fmodl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn remainderf(f32, f32) f32;
pub extern fn remainder(f64, f64) f64;
pub extern fn remainderl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn remquof(f32, f32, [*c]c_int) f32;
pub extern fn remquo(f64, f64, [*c]c_int) f64;
pub extern fn remquol(c_longdouble, c_longdouble, [*c]c_int) c_longdouble;
pub extern fn copysignf(f32, f32) f32;
pub extern fn copysign(f64, f64) f64;
pub extern fn copysignl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn nanf([*c]const u8) f32;
pub extern fn nan([*c]const u8) f64;
pub extern fn nanl([*c]const u8) c_longdouble;
pub extern fn nextafterf(f32, f32) f32;
pub extern fn nextafter(f64, f64) f64;
pub extern fn nextafterl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn nexttoward(f64, c_longdouble) f64;
pub extern fn nexttowardf(f32, c_longdouble) f32;
pub extern fn nexttowardl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fdimf(f32, f32) f32;
pub extern fn fdim(f64, f64) f64;
pub extern fn fdiml(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fmaxf(f32, f32) f32;
pub extern fn fmax(f64, f64) f64;
pub extern fn fmaxl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fminf(f32, f32) f32;
pub extern fn fmin(f64, f64) f64;
pub extern fn fminl(c_longdouble, c_longdouble) c_longdouble;
pub extern fn fmaf(f32, f32, f32) f32;
pub extern fn fma(f64, f64, f64) f64;
pub extern fn fmal(c_longdouble, c_longdouble, c_longdouble) c_longdouble;
pub extern fn __exp10f(f32) f32;
pub extern fn __exp10(f64) f64;
pub const struct___float2 = extern struct {
    __sinval: f32,
    __cosval: f32,
};
pub inline fn __sincosf(arg___x: f32, arg___sinp: [*c]f32, arg___cosp: [*c]f32) void {
    var __x = arg___x;
    var __sinp = arg___sinp;
    var __cosp = arg___cosp;
    const __stret: struct___float2 = __sincosf_stret(__x);
    __sinp.* = __stret.__sinval;
    __cosp.* = __stret.__cosval;
}
pub const struct___double2 = extern struct {
    __sinval: f64,
    __cosval: f64,
};
pub inline fn __sincos(arg___x: f64, arg___sinp: [*c]f64, arg___cosp: [*c]f64) void {
    var __x = arg___x;
    var __sinp = arg___sinp;
    var __cosp = arg___cosp;
    const __stret: struct___double2 = __sincos_stret(__x);
    __sinp.* = __stret.__sinval;
    __cosp.* = __stret.__cosval;
}
pub extern fn __cospif(f32) f32;
pub extern fn __cospi(f64) f64;
pub extern fn __sinpif(f32) f32;
pub extern fn __sinpi(f64) f64;
pub extern fn __tanpif(f32) f32;
pub extern fn __tanpi(f64) f64;
pub inline fn __sincospif(arg___x: f32, arg___sinp: [*c]f32, arg___cosp: [*c]f32) void {
    var __x = arg___x;
    var __sinp = arg___sinp;
    var __cosp = arg___cosp;
    const __stret: struct___float2 = __sincospif_stret(__x);
    __sinp.* = __stret.__sinval;
    __cosp.* = __stret.__cosval;
}
pub inline fn __sincospi(arg___x: f64, arg___sinp: [*c]f64, arg___cosp: [*c]f64) void {
    var __x = arg___x;
    var __sinp = arg___sinp;
    var __cosp = arg___cosp;
    const __stret: struct___double2 = __sincospi_stret(__x);
    __sinp.* = __stret.__sinval;
    __cosp.* = __stret.__cosval;
}
pub extern fn __sincosf_stret(f32) struct___float2;
pub extern fn __sincos_stret(f64) struct___double2;
pub extern fn __sincospif_stret(f32) struct___float2;
pub extern fn __sincospi_stret(f64) struct___double2;
pub extern fn j0(f64) f64;
pub extern fn j1(f64) f64;
pub extern fn jn(c_int, f64) f64;
pub extern fn y0(f64) f64;
pub extern fn y1(f64) f64;
pub extern fn yn(c_int, f64) f64;
pub extern fn scalb(f64, f64) f64;
pub extern var signgam: c_int;
pub const struct_exception = extern struct {
    type: c_int,
    name: [*c]u8,
    arg1: f64,
    arg2: f64,
    retval: f64,
};
pub const jmp_buf = [48]c_int;
pub const sigjmp_buf = [49]c_int;
pub extern fn setjmp([*c]c_int) c_int;
pub extern fn longjmp([*c]c_int, c_int) noreturn;
pub extern fn _setjmp([*c]c_int) c_int;
pub extern fn _longjmp([*c]c_int, c_int) noreturn;
pub extern fn sigsetjmp([*c]c_int, c_int) c_int;
pub extern fn siglongjmp([*c]c_int, c_int) noreturn;
pub extern fn longjmperror() void;
pub const sig_atomic_t = c_int;
pub const struct___darwin_arm_exception_state = extern struct {
    __exception: __uint32_t,
    __fsr: __uint32_t,
    __far: __uint32_t,
};
pub const struct___darwin_arm_exception_state64 = extern struct {
    __far: __uint64_t,
    __esr: __uint32_t,
    __exception: __uint32_t,
};
pub const struct___darwin_arm_thread_state = extern struct {
    __r: [13]__uint32_t,
    __sp: __uint32_t,
    __lr: __uint32_t,
    __pc: __uint32_t,
    __cpsr: __uint32_t,
};
pub const struct___darwin_arm_thread_state64 = extern struct {
    __x: [29]__uint64_t,
    __fp: __uint64_t,
    __lr: __uint64_t,
    __sp: __uint64_t,
    __pc: __uint64_t,
    __cpsr: __uint32_t,
    __pad: __uint32_t,
};
pub const struct___darwin_arm_vfp_state = extern struct {
    __r: [64]__uint32_t,
    __fpscr: __uint32_t,
};
pub const __uint128_t = u128;
pub const struct___darwin_arm_neon_state64 = extern struct {
    __v: [32]__uint128_t,
    __fpsr: __uint32_t,
    __fpcr: __uint32_t,
};
pub const struct___darwin_arm_neon_state = extern struct {
    __v: [16]__uint128_t,
    __fpsr: __uint32_t,
    __fpcr: __uint32_t,
};
pub const struct___arm_pagein_state = extern struct {
    __pagein_error: c_int,
};
pub const struct___arm_legacy_debug_state = extern struct {
    __bvr: [16]__uint32_t,
    __bcr: [16]__uint32_t,
    __wvr: [16]__uint32_t,
    __wcr: [16]__uint32_t,
};
pub const struct___darwin_arm_debug_state32 = extern struct {
    __bvr: [16]__uint32_t,
    __bcr: [16]__uint32_t,
    __wvr: [16]__uint32_t,
    __wcr: [16]__uint32_t,
    __mdscr_el1: __uint64_t,
};
pub const struct___darwin_arm_debug_state64 = extern struct {
    __bvr: [16]__uint64_t,
    __bcr: [16]__uint64_t,
    __wvr: [16]__uint64_t,
    __wcr: [16]__uint64_t,
    __mdscr_el1: __uint64_t,
};
pub const struct___darwin_arm_cpmu_state64 = extern struct {
    __ctrs: [16]__uint64_t,
};
pub const struct___darwin_mcontext32 = extern struct {
    __es: struct___darwin_arm_exception_state,
    __ss: struct___darwin_arm_thread_state,
    __fs: struct___darwin_arm_vfp_state,
};
pub const struct___darwin_mcontext64 = extern struct {
    __es: struct___darwin_arm_exception_state64,
    __ss: struct___darwin_arm_thread_state64,
    __ns: struct___darwin_arm_neon_state64,
};
pub const mcontext_t = [*c]struct___darwin_mcontext64;
pub const struct___darwin_sigaltstack = extern struct {
    ss_sp: ?*anyopaque,
    ss_size: __darwin_size_t,
    ss_flags: c_int,
};
pub const stack_t = struct___darwin_sigaltstack;
pub const struct___darwin_ucontext = extern struct {
    uc_onstack: c_int,
    uc_sigmask: __darwin_sigset_t,
    uc_stack: struct___darwin_sigaltstack,
    uc_link: [*c]struct___darwin_ucontext,
    uc_mcsize: __darwin_size_t,
    uc_mcontext: [*c]struct___darwin_mcontext64,
};
pub const ucontext_t = struct___darwin_ucontext;
pub const sigset_t = __darwin_sigset_t;
pub const union_sigval = extern union {
    sival_int: c_int,
    sival_ptr: ?*anyopaque,
};
pub const struct_sigevent = extern struct {
    sigev_notify: c_int,
    sigev_signo: c_int,
    sigev_value: union_sigval,
    sigev_notify_function: ?fn (union_sigval) callconv(.C) void,
    sigev_notify_attributes: [*c]pthread_attr_t,
};
pub const struct___siginfo = extern struct {
    si_signo: c_int,
    si_errno: c_int,
    si_code: c_int,
    si_pid: pid_t,
    si_uid: uid_t,
    si_status: c_int,
    si_addr: ?*anyopaque,
    si_value: union_sigval,
    si_band: c_long,
    __pad: [7]c_ulong,
};
pub const siginfo_t = struct___siginfo;
pub const union___sigaction_u = extern union {
    __sa_handler: ?fn (c_int) callconv(.C) void,
    __sa_sigaction: ?fn (c_int, [*c]struct___siginfo, ?*anyopaque) callconv(.C) void,
};
pub const struct___sigaction = extern struct {
    __sigaction_u: union___sigaction_u,
    sa_tramp: ?fn (?*anyopaque, c_int, c_int, [*c]siginfo_t, ?*anyopaque) callconv(.C) void,
    sa_mask: sigset_t,
    sa_flags: c_int,
};
pub const struct_sigaction = extern struct {
    __sigaction_u: union___sigaction_u,
    sa_mask: sigset_t,
    sa_flags: c_int,
};
pub const sig_t = ?*const fn (c_int) callconv(.C) void;
pub const struct_sigvec = extern struct {
    sv_handler: ?fn (c_int) callconv(.C) void,
    sv_mask: c_int,
    sv_flags: c_int,
};
pub const struct_sigstack = extern struct {
    ss_sp: [*c]u8,
    ss_onstack: c_int,
};
pub extern fn signal(c_int, ?fn (c_int) callconv(.C) void) ?fn (c_int) callconv(.C) void;
pub extern const sys_signame: [32][*c]const u8;
pub extern const sys_siglist: [32][*c]const u8;
pub extern fn raise(c_int) c_int;
pub extern fn bsd_signal(c_int, ?fn (c_int) callconv(.C) void) ?fn (c_int) callconv(.C) void;
pub extern fn kill(pid_t, c_int) c_int;
pub extern fn killpg(pid_t, c_int) c_int;
pub extern fn pthread_kill(pthread_t, c_int) c_int;
pub extern fn pthread_sigmask(c_int, [*c]const sigset_t, [*c]sigset_t) c_int;
pub extern fn sigaction(c_int, noalias [*c]const struct_sigaction, noalias [*c]struct_sigaction) c_int;
pub extern fn sigaddset([*c]sigset_t, c_int) c_int;
pub extern fn sigaltstack(noalias [*c]const stack_t, noalias [*c]stack_t) c_int;
pub extern fn sigdelset([*c]sigset_t, c_int) c_int;
pub extern fn sigemptyset([*c]sigset_t) c_int;
pub extern fn sigfillset([*c]sigset_t) c_int;
pub extern fn sighold(c_int) c_int;
pub extern fn sigignore(c_int) c_int;
pub extern fn siginterrupt(c_int, c_int) c_int;
pub extern fn sigismember([*c]const sigset_t, c_int) c_int;
pub extern fn sigpause(c_int) c_int;
pub extern fn sigpending([*c]sigset_t) c_int;
pub extern fn sigprocmask(c_int, noalias [*c]const sigset_t, noalias [*c]sigset_t) c_int;
pub extern fn sigrelse(c_int) c_int;
pub extern fn sigset(c_int, ?fn (c_int) callconv(.C) void) ?fn (c_int) callconv(.C) void;
pub extern fn sigsuspend([*c]const sigset_t) c_int;
pub extern fn sigwait(noalias [*c]const sigset_t, noalias [*c]c_int) c_int;
pub extern fn psignal(c_uint, [*c]const u8) void;
pub extern fn sigblock(c_int) c_int;
pub extern fn sigsetmask(c_int) c_int;
pub extern fn sigvec(c_int, [*c]struct_sigvec, [*c]struct_sigvec) c_int;
pub inline fn __sigbits(arg___signo: c_int) c_int {
    var __signo = arg___signo;
    return if (__signo > @as(c_int, 32)) @as(c_int, 0) else @as(c_int, 1) << @intCast(@import("std").math.Log2Int(c_int), __signo - @as(c_int, 1));
}
pub extern fn renameat(c_int, [*c]const u8, c_int, [*c]const u8) c_int;
pub extern fn renamex_np([*c]const u8, [*c]const u8, c_uint) c_int;
pub extern fn renameatx_np(c_int, [*c]const u8, c_int, [*c]const u8, c_uint) c_int;
pub const fpos_t = __darwin_off_t;
pub const struct___sbuf = extern struct {
    _base: [*c]u8,
    _size: c_int,
};
pub const struct___sFILEX = opaque {};
pub const struct___sFILE = extern struct {
    _p: [*c]u8,
    _r: c_int,
    _w: c_int,
    _flags: c_short,
    _file: c_short,
    _bf: struct___sbuf,
    _lbfsize: c_int,
    _cookie: ?*anyopaque,
    _close: ?fn (?*anyopaque) callconv(.C) c_int,
    _read: ?fn (?*anyopaque, [*c]u8, c_int) callconv(.C) c_int,
    _seek: ?fn (?*anyopaque, fpos_t, c_int) callconv(.C) fpos_t,
    _write: ?fn (?*anyopaque, [*c]const u8, c_int) callconv(.C) c_int,
    _ub: struct___sbuf,
    _extra: ?*struct___sFILEX,
    _ur: c_int,
    _ubuf: [3]u8,
    _nbuf: [1]u8,
    _lb: struct___sbuf,
    _blksize: c_int,
    _offset: fpos_t,
};
pub const FILE = struct___sFILE;
pub extern var __stdinp: [*c]FILE;
pub extern var __stdoutp: [*c]FILE;
pub extern var __stderrp: [*c]FILE;
pub extern fn clearerr([*c]FILE) void;
pub extern fn fclose([*c]FILE) c_int;
pub extern fn feof([*c]FILE) c_int;
pub extern fn ferror([*c]FILE) c_int;
pub extern fn fflush([*c]FILE) c_int;
pub extern fn fgetc([*c]FILE) c_int;
pub extern fn fgetpos(noalias [*c]FILE, [*c]fpos_t) c_int;
pub extern fn fgets(noalias [*c]u8, c_int, [*c]FILE) [*c]u8;
pub extern fn fopen(__filename: [*c]const u8, __mode: [*c]const u8) [*c]FILE;
pub extern fn fprintf([*c]FILE, [*c]const u8, ...) c_int;
pub extern fn fputc(c_int, [*c]FILE) c_int;
pub extern fn fputs(noalias [*c]const u8, noalias [*c]FILE) c_int;
pub extern fn fread(__ptr: ?*anyopaque, __size: c_ulong, __nitems: c_ulong, __stream: [*c]FILE) c_ulong;
pub extern fn freopen(noalias [*c]const u8, noalias [*c]const u8, noalias [*c]FILE) [*c]FILE;
pub extern fn fscanf(noalias [*c]FILE, noalias [*c]const u8, ...) c_int;
pub extern fn fseek([*c]FILE, c_long, c_int) c_int;
pub extern fn fsetpos([*c]FILE, [*c]const fpos_t) c_int;
pub extern fn ftell([*c]FILE) c_long;
pub extern fn fwrite(__ptr: ?*const anyopaque, __size: c_ulong, __nitems: c_ulong, __stream: [*c]FILE) c_ulong;
pub extern fn getc([*c]FILE) c_int;
pub extern fn getchar() c_int;
pub extern fn gets([*c]u8) [*c]u8;
pub extern fn perror([*c]const u8) void;
pub extern fn printf([*c]const u8, ...) c_int;
pub extern fn putc(c_int, [*c]FILE) c_int;
pub extern fn putchar(c_int) c_int;
pub extern fn puts([*c]const u8) c_int;
pub extern fn remove([*c]const u8) c_int;
pub extern fn rename(__old: [*c]const u8, __new: [*c]const u8) c_int;
pub extern fn rewind([*c]FILE) void;
pub extern fn scanf(noalias [*c]const u8, ...) c_int;
pub extern fn setbuf(noalias [*c]FILE, noalias [*c]u8) void;
pub extern fn setvbuf(noalias [*c]FILE, noalias [*c]u8, c_int, usize) c_int;
pub extern fn sprintf([*c]u8, [*c]const u8, ...) c_int;
pub extern fn sscanf(noalias [*c]const u8, noalias [*c]const u8, ...) c_int;
pub extern fn tmpfile() [*c]FILE;
pub extern fn tmpnam([*c]u8) [*c]u8;
pub extern fn ungetc(c_int, [*c]FILE) c_int;
pub extern fn vfprintf([*c]FILE, [*c]const u8, __builtin_va_list) c_int;
pub extern fn vprintf([*c]const u8, __builtin_va_list) c_int;
pub extern fn vsprintf([*c]u8, [*c]const u8, __builtin_va_list) c_int;
pub extern fn ctermid([*c]u8) [*c]u8;
pub extern fn fdopen(c_int, [*c]const u8) [*c]FILE;
pub extern fn fileno([*c]FILE) c_int;
pub extern fn pclose([*c]FILE) c_int;
pub extern fn popen([*c]const u8, [*c]const u8) [*c]FILE;
pub extern fn __srget([*c]FILE) c_int;
pub extern fn __svfscanf([*c]FILE, [*c]const u8, va_list) c_int;
pub extern fn __swbuf(c_int, [*c]FILE) c_int;
pub inline fn __sputc(arg__c: c_int, arg__p: [*c]FILE) c_int {
    var _c = arg__c;
    var _p = arg__p;
    if (((blk: {
        const ref = &_p.*._w;
        ref.* -= 1;
        break :blk ref.*;
    }) >= @as(c_int, 0)) or ((_p.*._w >= _p.*._lbfsize) and (@bitCast(c_int, @as(c_uint, @bitCast(u8, @truncate(i8, _c)))) != @as(c_int, '\n')))) return @bitCast(c_int, @as(c_uint, blk: {
        const tmp = @bitCast(u8, @truncate(i8, _c));
        (blk_1: {
            const ref = &_p.*._p;
            const tmp_2 = ref.*;
            ref.* += 1;
            break :blk_1 tmp_2;
        }).* = tmp;
        break :blk tmp;
    })) else return __swbuf(_c, _p);
    return 0;
}
pub extern fn flockfile([*c]FILE) void;
pub extern fn ftrylockfile([*c]FILE) c_int;
pub extern fn funlockfile([*c]FILE) void;
pub extern fn getc_unlocked([*c]FILE) c_int;
pub extern fn getchar_unlocked() c_int;
pub extern fn putc_unlocked(c_int, [*c]FILE) c_int;
pub extern fn putchar_unlocked(c_int) c_int;
pub extern fn getw([*c]FILE) c_int;
pub extern fn putw(c_int, [*c]FILE) c_int;
pub extern fn tempnam(__dir: [*c]const u8, __prefix: [*c]const u8) [*c]u8;
pub extern fn fseeko(__stream: [*c]FILE, __offset: off_t, __whence: c_int) c_int;
pub extern fn ftello(__stream: [*c]FILE) off_t;
pub extern fn snprintf(__str: [*c]u8, __size: c_ulong, __format: [*c]const u8, ...) c_int;
pub extern fn vfscanf(noalias __stream: [*c]FILE, noalias __format: [*c]const u8, __builtin_va_list) c_int;
pub extern fn vscanf(noalias __format: [*c]const u8, __builtin_va_list) c_int;
pub extern fn vsnprintf(__str: [*c]u8, __size: c_ulong, __format: [*c]const u8, __builtin_va_list) c_int;
pub extern fn vsscanf(noalias __str: [*c]const u8, noalias __format: [*c]const u8, __builtin_va_list) c_int;
pub extern fn dprintf(c_int, noalias [*c]const u8, ...) c_int;
pub extern fn vdprintf(c_int, noalias [*c]const u8, va_list) c_int;
pub extern fn getdelim(noalias __linep: [*c][*c]u8, noalias __linecapp: [*c]usize, __delimiter: c_int, noalias __stream: [*c]FILE) isize;
pub extern fn getline(noalias __linep: [*c][*c]u8, noalias __linecapp: [*c]usize, noalias __stream: [*c]FILE) isize;
pub extern fn fmemopen(noalias __buf: ?*anyopaque, __size: usize, noalias __mode: [*c]const u8) [*c]FILE;
pub extern fn open_memstream(__bufp: [*c][*c]u8, __sizep: [*c]usize) [*c]FILE;
pub extern const sys_nerr: c_int;
pub extern const sys_errlist: [*c]const [*c]const u8;
pub extern fn asprintf(noalias [*c][*c]u8, noalias [*c]const u8, ...) c_int;
pub extern fn ctermid_r([*c]u8) [*c]u8;
pub extern fn fgetln([*c]FILE, [*c]usize) [*c]u8;
pub extern fn fmtcheck([*c]const u8, [*c]const u8) [*c]const u8;
pub extern fn fpurge([*c]FILE) c_int;
pub extern fn setbuffer([*c]FILE, [*c]u8, c_int) void;
pub extern fn setlinebuf([*c]FILE) c_int;
pub extern fn vasprintf(noalias [*c][*c]u8, noalias [*c]const u8, va_list) c_int;
pub extern fn funopen(?*const anyopaque, ?fn (?*anyopaque, [*c]u8, c_int) callconv(.C) c_int, ?fn (?*anyopaque, [*c]const u8, c_int) callconv(.C) c_int, ?fn (?*anyopaque, fpos_t, c_int) callconv(.C) fpos_t, ?fn (?*anyopaque) callconv(.C) c_int) [*c]FILE;
pub extern fn __sprintf_chk(noalias [*c]u8, c_int, usize, noalias [*c]const u8, ...) c_int;
pub extern fn __snprintf_chk(noalias [*c]u8, usize, c_int, usize, noalias [*c]const u8, ...) c_int;
pub extern fn __vsprintf_chk(noalias [*c]u8, c_int, usize, noalias [*c]const u8, va_list) c_int;
pub extern fn __vsnprintf_chk(noalias [*c]u8, usize, c_int, usize, noalias [*c]const u8, va_list) c_int;
pub const P_ALL: c_int = 0;
pub const P_PID: c_int = 1;
pub const P_PGID: c_int = 2;
pub const idtype_t = c_uint;
pub const struct_timeval = extern struct {
    tv_sec: __darwin_time_t,
    tv_usec: __darwin_suseconds_t,
};
pub const rlim_t = __uint64_t;
pub const struct_rusage = extern struct {
    ru_utime: struct_timeval,
    ru_stime: struct_timeval,
    ru_maxrss: c_long,
    ru_ixrss: c_long,
    ru_idrss: c_long,
    ru_isrss: c_long,
    ru_minflt: c_long,
    ru_majflt: c_long,
    ru_nswap: c_long,
    ru_inblock: c_long,
    ru_oublock: c_long,
    ru_msgsnd: c_long,
    ru_msgrcv: c_long,
    ru_nsignals: c_long,
    ru_nvcsw: c_long,
    ru_nivcsw: c_long,
};
pub const rusage_info_t = ?*anyopaque;
pub const struct_rusage_info_v0 = extern struct {
    ri_uuid: [16]u8,
    ri_user_time: u64,
    ri_system_time: u64,
    ri_pkg_idle_wkups: u64,
    ri_interrupt_wkups: u64,
    ri_pageins: u64,
    ri_wired_size: u64,
    ri_resident_size: u64,
    ri_phys_footprint: u64,
    ri_proc_start_abstime: u64,
    ri_proc_exit_abstime: u64,
};
pub const struct_rusage_info_v1 = extern struct {
    ri_uuid: [16]u8,
    ri_user_time: u64,
    ri_system_time: u64,
    ri_pkg_idle_wkups: u64,
    ri_interrupt_wkups: u64,
    ri_pageins: u64,
    ri_wired_size: u64,
    ri_resident_size: u64,
    ri_phys_footprint: u64,
    ri_proc_start_abstime: u64,
    ri_proc_exit_abstime: u64,
    ri_child_user_time: u64,
    ri_child_system_time: u64,
    ri_child_pkg_idle_wkups: u64,
    ri_child_interrupt_wkups: u64,
    ri_child_pageins: u64,
    ri_child_elapsed_abstime: u64,
};
pub const struct_rusage_info_v2 = extern struct {
    ri_uuid: [16]u8,
    ri_user_time: u64,
    ri_system_time: u64,
    ri_pkg_idle_wkups: u64,
    ri_interrupt_wkups: u64,
    ri_pageins: u64,
    ri_wired_size: u64,
    ri_resident_size: u64,
    ri_phys_footprint: u64,
    ri_proc_start_abstime: u64,
    ri_proc_exit_abstime: u64,
    ri_child_user_time: u64,
    ri_child_system_time: u64,
    ri_child_pkg_idle_wkups: u64,
    ri_child_interrupt_wkups: u64,
    ri_child_pageins: u64,
    ri_child_elapsed_abstime: u64,
    ri_diskio_bytesread: u64,
    ri_diskio_byteswritten: u64,
};
pub const struct_rusage_info_v3 = extern struct {
    ri_uuid: [16]u8,
    ri_user_time: u64,
    ri_system_time: u64,
    ri_pkg_idle_wkups: u64,
    ri_interrupt_wkups: u64,
    ri_pageins: u64,
    ri_wired_size: u64,
    ri_resident_size: u64,
    ri_phys_footprint: u64,
    ri_proc_start_abstime: u64,
    ri_proc_exit_abstime: u64,
    ri_child_user_time: u64,
    ri_child_system_time: u64,
    ri_child_pkg_idle_wkups: u64,
    ri_child_interrupt_wkups: u64,
    ri_child_pageins: u64,
    ri_child_elapsed_abstime: u64,
    ri_diskio_bytesread: u64,
    ri_diskio_byteswritten: u64,
    ri_cpu_time_qos_default: u64,
    ri_cpu_time_qos_maintenance: u64,
    ri_cpu_time_qos_background: u64,
    ri_cpu_time_qos_utility: u64,
    ri_cpu_time_qos_legacy: u64,
    ri_cpu_time_qos_user_initiated: u64,
    ri_cpu_time_qos_user_interactive: u64,
    ri_billed_system_time: u64,
    ri_serviced_system_time: u64,
};
pub const struct_rusage_info_v4 = extern struct {
    ri_uuid: [16]u8,
    ri_user_time: u64,
    ri_system_time: u64,
    ri_pkg_idle_wkups: u64,
    ri_interrupt_wkups: u64,
    ri_pageins: u64,
    ri_wired_size: u64,
    ri_resident_size: u64,
    ri_phys_footprint: u64,
    ri_proc_start_abstime: u64,
    ri_proc_exit_abstime: u64,
    ri_child_user_time: u64,
    ri_child_system_time: u64,
    ri_child_pkg_idle_wkups: u64,
    ri_child_interrupt_wkups: u64,
    ri_child_pageins: u64,
    ri_child_elapsed_abstime: u64,
    ri_diskio_bytesread: u64,
    ri_diskio_byteswritten: u64,
    ri_cpu_time_qos_default: u64,
    ri_cpu_time_qos_maintenance: u64,
    ri_cpu_time_qos_background: u64,
    ri_cpu_time_qos_utility: u64,
    ri_cpu_time_qos_legacy: u64,
    ri_cpu_time_qos_user_initiated: u64,
    ri_cpu_time_qos_user_interactive: u64,
    ri_billed_system_time: u64,
    ri_serviced_system_time: u64,
    ri_logical_writes: u64,
    ri_lifetime_max_phys_footprint: u64,
    ri_instructions: u64,
    ri_cycles: u64,
    ri_billed_energy: u64,
    ri_serviced_energy: u64,
    ri_interval_max_phys_footprint: u64,
    ri_runnable_time: u64,
};
pub const struct_rusage_info_v5 = extern struct {
    ri_uuid: [16]u8,
    ri_user_time: u64,
    ri_system_time: u64,
    ri_pkg_idle_wkups: u64,
    ri_interrupt_wkups: u64,
    ri_pageins: u64,
    ri_wired_size: u64,
    ri_resident_size: u64,
    ri_phys_footprint: u64,
    ri_proc_start_abstime: u64,
    ri_proc_exit_abstime: u64,
    ri_child_user_time: u64,
    ri_child_system_time: u64,
    ri_child_pkg_idle_wkups: u64,
    ri_child_interrupt_wkups: u64,
    ri_child_pageins: u64,
    ri_child_elapsed_abstime: u64,
    ri_diskio_bytesread: u64,
    ri_diskio_byteswritten: u64,
    ri_cpu_time_qos_default: u64,
    ri_cpu_time_qos_maintenance: u64,
    ri_cpu_time_qos_background: u64,
    ri_cpu_time_qos_utility: u64,
    ri_cpu_time_qos_legacy: u64,
    ri_cpu_time_qos_user_initiated: u64,
    ri_cpu_time_qos_user_interactive: u64,
    ri_billed_system_time: u64,
    ri_serviced_system_time: u64,
    ri_logical_writes: u64,
    ri_lifetime_max_phys_footprint: u64,
    ri_instructions: u64,
    ri_cycles: u64,
    ri_billed_energy: u64,
    ri_serviced_energy: u64,
    ri_interval_max_phys_footprint: u64,
    ri_runnable_time: u64,
    ri_flags: u64,
};
pub const rusage_info_current = struct_rusage_info_v5;
pub const struct_rlimit = extern struct {
    rlim_cur: rlim_t,
    rlim_max: rlim_t,
};
pub const struct_proc_rlimit_control_wakeupmon = extern struct {
    wm_flags: u32,
    wm_rate: i32,
};
pub extern fn getpriority(c_int, id_t) c_int;
pub extern fn getiopolicy_np(c_int, c_int) c_int;
pub extern fn getrlimit(c_int, [*c]struct_rlimit) c_int;
pub extern fn getrusage(c_int, [*c]struct_rusage) c_int;
pub extern fn setpriority(c_int, id_t, c_int) c_int;
pub extern fn setiopolicy_np(c_int, c_int, c_int) c_int;
pub extern fn setrlimit(c_int, [*c]const struct_rlimit) c_int; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/wait.h:201:19: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_4 = opaque {}; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/wait.h:220:19: warning: struct demoted to opaque type - has bitfield
const struct_unnamed_5 = opaque {};
pub const union_wait = extern union {
    w_status: c_int,
    w_T: struct_unnamed_4,
    w_S: struct_unnamed_5,
};
pub extern fn wait([*c]c_int) pid_t;
pub extern fn waitpid(pid_t, [*c]c_int, c_int) pid_t;
pub extern fn waitid(idtype_t, id_t, [*c]siginfo_t, c_int) c_int;
pub extern fn wait3([*c]c_int, c_int, [*c]struct_rusage) pid_t;
pub extern fn wait4(pid_t, [*c]c_int, c_int, [*c]struct_rusage) pid_t;
pub extern fn alloca(c_ulong) ?*anyopaque;
pub const div_t = extern struct {
    quot: c_int,
    rem: c_int,
};
pub const ldiv_t = extern struct {
    quot: c_long,
    rem: c_long,
};
pub const lldiv_t = extern struct {
    quot: c_longlong,
    rem: c_longlong,
};
pub extern var __mb_cur_max: c_int;
pub extern fn malloc(__size: c_ulong) ?*anyopaque;
pub extern fn calloc(__count: c_ulong, __size: c_ulong) ?*anyopaque;
pub extern fn free(?*anyopaque) void;
pub extern fn realloc(__ptr: ?*anyopaque, __size: c_ulong) ?*anyopaque;
pub extern fn valloc(usize) ?*anyopaque;
pub extern fn aligned_alloc(__alignment: c_ulong, __size: c_ulong) ?*anyopaque;
pub extern fn posix_memalign(__memptr: [*c]?*anyopaque, __alignment: usize, __size: usize) c_int;
pub extern fn abort() noreturn;
pub extern fn abs(c_int) c_int;
pub extern fn atexit(?fn () callconv(.C) void) c_int;
pub extern fn atof([*c]const u8) f64;
pub extern fn atoi([*c]const u8) c_int;
pub extern fn atol([*c]const u8) c_long;
pub extern fn atoll([*c]const u8) c_longlong;
pub extern fn bsearch(__key: ?*const anyopaque, __base: ?*const anyopaque, __nel: usize, __width: usize, __compar: ?fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) ?*anyopaque;
pub extern fn div(c_int, c_int) div_t;
pub extern fn exit(c_int) noreturn;
pub extern fn getenv([*c]const u8) [*c]u8;
pub extern fn labs(c_long) c_long;
pub extern fn ldiv(c_long, c_long) ldiv_t;
pub extern fn llabs(c_longlong) c_longlong;
pub extern fn lldiv(c_longlong, c_longlong) lldiv_t;
pub extern fn mblen(__s: [*c]const u8, __n: usize) c_int;
pub extern fn mbstowcs(noalias [*c]wchar_t, noalias [*c]const u8, usize) usize;
pub extern fn mbtowc(noalias [*c]wchar_t, noalias [*c]const u8, usize) c_int;
pub extern fn qsort(__base: ?*anyopaque, __nel: usize, __width: usize, __compar: ?fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) void;
pub extern fn rand() c_int;
pub extern fn srand(c_uint) void;
pub extern fn strtod([*c]const u8, [*c][*c]u8) f64;
pub extern fn strtof([*c]const u8, [*c][*c]u8) f32;
pub extern fn strtol(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_long;
pub extern fn strtold([*c]const u8, [*c][*c]u8) c_longdouble;
pub extern fn strtoll(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtoul(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulong;
pub extern fn strtoull(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern fn system([*c]const u8) c_int;
pub extern fn wcstombs(noalias [*c]u8, noalias [*c]const wchar_t, usize) usize;
pub extern fn wctomb([*c]u8, wchar_t) c_int;
pub extern fn _Exit(c_int) noreturn;
pub extern fn a64l([*c]const u8) c_long;
pub extern fn drand48() f64;
pub extern fn ecvt(f64, c_int, noalias [*c]c_int, noalias [*c]c_int) [*c]u8;
pub extern fn erand48([*c]c_ushort) f64;
pub extern fn fcvt(f64, c_int, noalias [*c]c_int, noalias [*c]c_int) [*c]u8;
pub extern fn gcvt(f64, c_int, [*c]u8) [*c]u8;
pub extern fn getsubopt([*c][*c]u8, [*c]const [*c]u8, [*c][*c]u8) c_int;
pub extern fn grantpt(c_int) c_int;
pub extern fn initstate(c_uint, [*c]u8, usize) [*c]u8;
pub extern fn jrand48([*c]c_ushort) c_long;
pub extern fn l64a(c_long) [*c]u8;
pub extern fn lcong48([*c]c_ushort) void;
pub extern fn lrand48() c_long;
pub extern fn mktemp([*c]u8) [*c]u8;
pub extern fn mkstemp([*c]u8) c_int;
pub extern fn mrand48() c_long;
pub extern fn nrand48([*c]c_ushort) c_long;
pub extern fn posix_openpt(c_int) c_int;
pub extern fn ptsname(c_int) [*c]u8;
pub extern fn ptsname_r(fildes: c_int, buffer: [*c]u8, buflen: usize) c_int;
pub extern fn putenv([*c]u8) c_int;
pub extern fn random() c_long;
pub extern fn rand_r([*c]c_uint) c_int;
pub extern fn realpath(noalias [*c]const u8, noalias [*c]u8) [*c]u8;
pub extern fn seed48([*c]c_ushort) [*c]c_ushort;
pub extern fn setenv(__name: [*c]const u8, __value: [*c]const u8, __overwrite: c_int) c_int;
pub extern fn setkey([*c]const u8) void;
pub extern fn setstate([*c]const u8) [*c]u8;
pub extern fn srand48(c_long) void;
pub extern fn srandom(c_uint) void;
pub extern fn unlockpt(c_int) c_int;
pub extern fn unsetenv([*c]const u8) c_int;
pub extern fn arc4random() u32;
pub extern fn arc4random_addrandom([*c]u8, c_int) void;
pub extern fn arc4random_buf(__buf: ?*anyopaque, __nbytes: usize) void;
pub extern fn arc4random_stir() void;
pub extern fn arc4random_uniform(__upper_bound: u32) u32; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/stdlib.h:268:6: warning: unsupported type: 'BlockPointer'
pub const atexit_b = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/stdlib.h:268:6
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/stdlib.h:277:7: warning: unsupported type: 'BlockPointer'
pub const bsearch_b = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/stdlib.h:277:7
pub extern fn cgetcap([*c]u8, [*c]const u8, c_int) [*c]u8;
pub extern fn cgetclose() c_int;
pub extern fn cgetent([*c][*c]u8, [*c][*c]u8, [*c]const u8) c_int;
pub extern fn cgetfirst([*c][*c]u8, [*c][*c]u8) c_int;
pub extern fn cgetmatch([*c]const u8, [*c]const u8) c_int;
pub extern fn cgetnext([*c][*c]u8, [*c][*c]u8) c_int;
pub extern fn cgetnum([*c]u8, [*c]const u8, [*c]c_long) c_int;
pub extern fn cgetset([*c]const u8) c_int;
pub extern fn cgetstr([*c]u8, [*c]const u8, [*c][*c]u8) c_int;
pub extern fn cgetustr([*c]u8, [*c]const u8, [*c][*c]u8) c_int;
pub extern fn daemon(c_int, c_int) c_int;
pub extern fn devname(dev_t, mode_t) [*c]u8;
pub extern fn devname_r(dev_t, mode_t, buf: [*c]u8, len: c_int) [*c]u8;
pub extern fn getbsize([*c]c_int, [*c]c_long) [*c]u8;
pub extern fn getloadavg([*c]f64, c_int) c_int;
pub extern fn getprogname() [*c]const u8;
pub extern fn setprogname([*c]const u8) void;
pub extern fn heapsort(__base: ?*anyopaque, __nel: usize, __width: usize, __compar: ?fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) c_int; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/stdlib.h:314:6: warning: unsupported type: 'BlockPointer'
pub const heapsort_b = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/stdlib.h:314:6
pub extern fn mergesort(__base: ?*anyopaque, __nel: usize, __width: usize, __compar: ?fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) c_int; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/stdlib.h:321:6: warning: unsupported type: 'BlockPointer'
pub const mergesort_b = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/stdlib.h:321:6
pub extern fn psort(__base: ?*anyopaque, __nel: usize, __width: usize, __compar: ?fn (?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) void; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/stdlib.h:329:7: warning: unsupported type: 'BlockPointer'
pub const psort_b = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/stdlib.h:329:7
pub extern fn psort_r(__base: ?*anyopaque, __nel: usize, __width: usize, ?*anyopaque, __compar: ?fn (?*anyopaque, ?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) void; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/stdlib.h:337:7: warning: unsupported type: 'BlockPointer'
pub const qsort_b = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/stdlib.h:337:7
pub extern fn qsort_r(__base: ?*anyopaque, __nel: usize, __width: usize, ?*anyopaque, __compar: ?fn (?*anyopaque, ?*const anyopaque, ?*const anyopaque) callconv(.C) c_int) void;
pub extern fn radixsort(__base: [*c][*c]const u8, __nel: c_int, __table: [*c]const u8, __endbyte: c_uint) c_int;
pub extern fn rpmatch([*c]const u8) c_int;
pub extern fn sradixsort(__base: [*c][*c]const u8, __nel: c_int, __table: [*c]const u8, __endbyte: c_uint) c_int;
pub extern fn sranddev() void;
pub extern fn srandomdev() void;
pub extern fn reallocf(__ptr: ?*anyopaque, __size: usize) ?*anyopaque;
pub extern fn strtonum(__numstr: [*c]const u8, __minval: c_longlong, __maxval: c_longlong, __errstrp: [*c][*c]const u8) c_longlong;
pub extern fn strtoq(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_longlong;
pub extern fn strtouq(__str: [*c]const u8, __endptr: [*c][*c]u8, __base: c_int) c_ulonglong;
pub extern var suboptarg: [*c]u8;
pub extern fn memchr(__s: ?*const anyopaque, __c: c_int, __n: c_ulong) ?*anyopaque;
pub extern fn memcmp(__s1: ?*const anyopaque, __s2: ?*const anyopaque, __n: c_ulong) c_int;
pub extern fn memcpy(__dst: ?*anyopaque, __src: ?*const anyopaque, __n: c_ulong) ?*anyopaque;
pub extern fn memmove(__dst: ?*anyopaque, __src: ?*const anyopaque, __len: c_ulong) ?*anyopaque;
pub extern fn memset(__b: ?*anyopaque, __c: c_int, __len: c_ulong) ?*anyopaque;
pub extern fn strcat(__s1: [*c]u8, __s2: [*c]const u8) [*c]u8;
pub extern fn strchr(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strcmp(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strcoll(__s1: [*c]const u8, __s2: [*c]const u8) c_int;
pub extern fn strcpy(__dst: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn strcspn(__s: [*c]const u8, __charset: [*c]const u8) c_ulong;
pub extern fn strerror(__errnum: c_int) [*c]u8;
pub extern fn strlen(__s: [*c]const u8) c_ulong;
pub extern fn strncat(__s1: [*c]u8, __s2: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strncmp(__s1: [*c]const u8, __s2: [*c]const u8, __n: c_ulong) c_int;
pub extern fn strncpy(__dst: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strpbrk(__s: [*c]const u8, __charset: [*c]const u8) [*c]u8;
pub extern fn strrchr(__s: [*c]const u8, __c: c_int) [*c]u8;
pub extern fn strspn(__s: [*c]const u8, __charset: [*c]const u8) c_ulong;
pub extern fn strstr(__big: [*c]const u8, __little: [*c]const u8) [*c]u8;
pub extern fn strtok(__str: [*c]u8, __sep: [*c]const u8) [*c]u8;
pub extern fn strxfrm(__s1: [*c]u8, __s2: [*c]const u8, __n: c_ulong) c_ulong;
pub extern fn strtok_r(__str: [*c]u8, __sep: [*c]const u8, __lasts: [*c][*c]u8) [*c]u8;
pub extern fn strerror_r(__errnum: c_int, __strerrbuf: [*c]u8, __buflen: usize) c_int;
pub extern fn strdup(__s1: [*c]const u8) [*c]u8;
pub extern fn memccpy(__dst: ?*anyopaque, __src: ?*const anyopaque, __c: c_int, __n: c_ulong) ?*anyopaque;
pub extern fn stpcpy(__dst: [*c]u8, __src: [*c]const u8) [*c]u8;
pub extern fn stpncpy(__dst: [*c]u8, __src: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strndup(__s1: [*c]const u8, __n: c_ulong) [*c]u8;
pub extern fn strnlen(__s1: [*c]const u8, __n: usize) usize;
pub extern fn strsignal(__sig: c_int) [*c]u8;
pub extern fn memset_s(__s: ?*anyopaque, __smax: rsize_t, __c: c_int, __n: rsize_t) errno_t;
pub extern fn memmem(__big: ?*const anyopaque, __big_len: usize, __little: ?*const anyopaque, __little_len: usize) ?*anyopaque;
pub extern fn memset_pattern4(__b: ?*anyopaque, __pattern4: ?*const anyopaque, __len: usize) void;
pub extern fn memset_pattern8(__b: ?*anyopaque, __pattern8: ?*const anyopaque, __len: usize) void;
pub extern fn memset_pattern16(__b: ?*anyopaque, __pattern16: ?*const anyopaque, __len: usize) void;
pub extern fn strcasestr(__big: [*c]const u8, __little: [*c]const u8) [*c]u8;
pub extern fn strnstr(__big: [*c]const u8, __little: [*c]const u8, __len: usize) [*c]u8;
pub extern fn strlcat(__dst: [*c]u8, __source: [*c]const u8, __size: c_ulong) c_ulong;
pub extern fn strlcpy(__dst: [*c]u8, __source: [*c]const u8, __size: c_ulong) c_ulong;
pub extern fn strmode(__mode: c_int, __bp: [*c]u8) void;
pub extern fn strsep(__stringp: [*c][*c]u8, __delim: [*c]const u8) [*c]u8;
pub extern fn swab(noalias ?*const anyopaque, noalias ?*anyopaque, isize) void;
pub extern fn timingsafe_bcmp(__b1: ?*const anyopaque, __b2: ?*const anyopaque, __len: usize) c_int;
pub extern fn strsignal_r(__sig: c_int, __strsignalbuf: [*c]u8, __buflen: usize) c_int;
pub extern fn bcmp(?*const anyopaque, ?*const anyopaque, c_ulong) c_int;
pub extern fn bcopy(?*const anyopaque, ?*anyopaque, usize) void;
pub extern fn bzero(?*anyopaque, c_ulong) void;
pub extern fn index([*c]const u8, c_int) [*c]u8;
pub extern fn rindex([*c]const u8, c_int) [*c]u8;
pub extern fn ffs(c_int) c_int;
pub extern fn strcasecmp([*c]const u8, [*c]const u8) c_int;
pub extern fn strncasecmp([*c]const u8, [*c]const u8, c_ulong) c_int;
pub extern fn ffsl(c_long) c_int;
pub extern fn ffsll(c_longlong) c_int;
pub extern fn fls(c_int) c_int;
pub extern fn flsl(c_long) c_int;
pub extern fn flsll(c_longlong) c_int;
pub const struct_timespec = extern struct {
    tv_sec: __darwin_time_t,
    tv_nsec: c_long,
};
pub const struct_tm = extern struct {
    tm_sec: c_int,
    tm_min: c_int,
    tm_hour: c_int,
    tm_mday: c_int,
    tm_mon: c_int,
    tm_year: c_int,
    tm_wday: c_int,
    tm_yday: c_int,
    tm_isdst: c_int,
    tm_gmtoff: c_long,
    tm_zone: [*c]u8,
};
pub extern var tzname: [*c][*c]u8;
pub extern var getdate_err: c_int;
pub extern var timezone: c_long;
pub extern var daylight: c_int;
pub extern fn asctime([*c]const struct_tm) [*c]u8;
pub extern fn clock() clock_t;
pub extern fn ctime([*c]const time_t) [*c]u8;
pub extern fn difftime(time_t, time_t) f64;
pub extern fn getdate([*c]const u8) [*c]struct_tm;
pub extern fn gmtime([*c]const time_t) [*c]struct_tm;
pub extern fn localtime([*c]const time_t) [*c]struct_tm;
pub extern fn mktime([*c]struct_tm) time_t;
pub extern fn strftime(noalias [*c]u8, usize, noalias [*c]const u8, noalias [*c]const struct_tm) usize;
pub extern fn strptime(noalias [*c]const u8, noalias [*c]const u8, noalias [*c]struct_tm) [*c]u8;
pub extern fn time([*c]time_t) time_t;
pub extern fn tzset() void;
pub extern fn asctime_r(noalias [*c]const struct_tm, noalias [*c]u8) [*c]u8;
pub extern fn ctime_r([*c]const time_t, [*c]u8) [*c]u8;
pub extern fn gmtime_r(noalias [*c]const time_t, noalias [*c]struct_tm) [*c]struct_tm;
pub extern fn localtime_r(noalias [*c]const time_t, noalias [*c]struct_tm) [*c]struct_tm;
pub extern fn posix2time(time_t) time_t;
pub extern fn tzsetwall() void;
pub extern fn time2posix(time_t) time_t;
pub extern fn timelocal([*c]struct_tm) time_t;
pub extern fn timegm([*c]struct_tm) time_t;
pub extern fn nanosleep(__rqtp: [*c]const struct_timespec, __rmtp: [*c]struct_timespec) c_int;
pub const _CLOCK_REALTIME: c_int = 0;
pub const _CLOCK_MONOTONIC: c_int = 6;
pub const _CLOCK_MONOTONIC_RAW: c_int = 4;
pub const _CLOCK_MONOTONIC_RAW_APPROX: c_int = 5;
pub const _CLOCK_UPTIME_RAW: c_int = 8;
pub const _CLOCK_UPTIME_RAW_APPROX: c_int = 9;
pub const _CLOCK_PROCESS_CPUTIME_ID: c_int = 12;
pub const _CLOCK_THREAD_CPUTIME_ID: c_int = 16;
pub const clockid_t = c_uint;
pub extern fn clock_getres(__clock_id: clockid_t, __res: [*c]struct_timespec) c_int;
pub extern fn clock_gettime(__clock_id: clockid_t, __tp: [*c]struct_timespec) c_int;
pub extern fn clock_gettime_nsec_np(__clock_id: clockid_t) __uint64_t;
pub extern fn clock_settime(__clock_id: clockid_t, __tp: [*c]const struct_timespec) c_int;
pub extern fn timespec_get(ts: [*c]struct_timespec, base: c_int) c_int;
pub extern fn imaxabs(j: intmax_t) intmax_t;
pub const imaxdiv_t = extern struct {
    quot: intmax_t,
    rem: intmax_t,
};
pub extern fn imaxdiv(__numer: intmax_t, __denom: intmax_t) imaxdiv_t;
pub extern fn strtoimax(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) intmax_t;
pub extern fn strtoumax(noalias __nptr: [*c]const u8, noalias __endptr: [*c][*c]u8, __base: c_int) uintmax_t;
pub extern fn wcstoimax(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t, __base: c_int) intmax_t;
pub extern fn wcstoumax(noalias __nptr: [*c]const wchar_t, noalias __endptr: [*c][*c]wchar_t, __base: c_int) uintmax_t;
pub extern fn _Block_copy(aBlock: ?*const anyopaque) ?*anyopaque;
pub extern fn _Block_release(aBlock: ?*const anyopaque) void;
pub extern fn _Block_object_assign(?*anyopaque, ?*const anyopaque, c_int) void;
pub extern fn _Block_object_dispose(?*const anyopaque, c_int) void;
pub extern var _NSConcreteGlobalBlock: [32]?*anyopaque;
pub extern var _NSConcreteStackBlock: [32]?*anyopaque;
pub const UInt8 = u8;
pub const SInt8 = i8;
pub const UInt16 = c_ushort;
pub const SInt16 = c_short;
pub const UInt32 = c_uint;
pub const SInt32 = c_int;
pub const struct_wide = extern struct {
    lo: UInt32,
    hi: SInt32,
};
pub const wide = struct_wide;
pub const struct_UnsignedWide = extern struct {
    lo: UInt32,
    hi: UInt32,
};
pub const UnsignedWide = struct_UnsignedWide;
pub const SInt64 = c_longlong;
pub const UInt64 = c_ulonglong;
pub const Fixed = SInt32;
pub const FixedPtr = [*c]Fixed;
pub const Fract = SInt32;
pub const FractPtr = [*c]Fract;
pub const UnsignedFixed = UInt32;
pub const UnsignedFixedPtr = [*c]UnsignedFixed;
pub const ShortFixed = c_short;
pub const ShortFixedPtr = [*c]ShortFixed;
pub const Float32 = f32;
pub const Float64 = f64;
pub const struct_Float80 = extern struct {
    exp: SInt16,
    man: [4]UInt16,
};
pub const Float80 = struct_Float80;
pub const struct_Float96 = extern struct {
    exp: [2]SInt16,
    man: [4]UInt16,
};
pub const Float96 = struct_Float96;
pub const struct_Float32Point = extern struct {
    x: Float32,
    y: Float32,
};
pub const Float32Point = struct_Float32Point;
pub const Ptr = [*c]u8;
pub const Handle = [*c]Ptr;
pub const Size = c_long;
pub const OSErr = SInt16;
pub const OSStatus = SInt32;
pub const LogicalAddress = ?*anyopaque;
pub const ConstLogicalAddress = ?*const anyopaque;
pub const PhysicalAddress = ?*anyopaque;
pub const BytePtr = [*c]UInt8;
pub const ByteCount = c_ulong;
pub const ByteOffset = c_ulong;
pub const Duration = SInt32;
pub const AbsoluteTime = UnsignedWide;
pub const OptionBits = UInt32;
pub const ItemCount = c_ulong;
pub const PBVersion = UInt32;
pub const ScriptCode = SInt16;
pub const LangCode = SInt16;
pub const RegionCode = SInt16;
pub const FourCharCode = UInt32;
pub const OSType = FourCharCode;
pub const ResType = FourCharCode;
pub const OSTypePtr = [*c]OSType;
pub const ResTypePtr = [*c]ResType;
pub const Boolean = u8;
pub const ProcPtr = ?*const fn () callconv(.C) c_long;
pub const Register68kProcPtr = ?*const fn () callconv(.C) void;
pub const UniversalProcPtr = ProcPtr;
pub const ProcHandle = [*c]ProcPtr;
pub const UniversalProcHandle = [*c]UniversalProcPtr;
pub const PRefCon = ?*anyopaque;
pub const URefCon = ?*anyopaque;
pub const SRefCon = ?*anyopaque;
pub const noErr: c_int = 0;
const enum_unnamed_6 = c_uint;
pub const kNilOptions: c_int = 0;
const enum_unnamed_7 = c_uint;
pub const kVariableLengthArray: c_int = 1;
const enum_unnamed_8 = c_uint;
pub const kUnknownType: c_int = 1061109567;
const enum_unnamed_9 = c_uint;
pub const UnicodeScalarValue = UInt32;
pub const UTF32Char = UInt32;
pub const UniChar = UInt16;
pub const UTF16Char = UInt16;
pub const UTF8Char = UInt8;
pub const UniCharPtr = [*c]UniChar;
pub const UniCharCount = c_ulong;
pub const UniCharCountPtr = [*c]UniCharCount;
pub const Str255 = [256]u8;
pub const Str63 = [64]u8;
pub const Str32 = [33]u8;
pub const Str31 = [32]u8;
pub const Str27 = [28]u8;
pub const Str15 = [16]u8;
pub const Str32Field = [34]u8;
pub const StrFileName = Str63;
pub const StringPtr = [*c]u8;
pub const StringHandle = [*c]StringPtr;
pub const ConstStringPtr = [*c]const u8;
pub const ConstStr255Param = [*c]const u8;
pub const ConstStr63Param = [*c]const u8;
pub const ConstStr32Param = [*c]const u8;
pub const ConstStr31Param = [*c]const u8;
pub const ConstStr27Param = [*c]const u8;
pub const ConstStr15Param = [*c]const u8;
pub const ConstStrFileNameParam = ConstStr63Param;
pub const struct_ProcessSerialNumber = extern struct {
    highLongOfPSN: UInt32,
    lowLongOfPSN: UInt32,
};
pub const ProcessSerialNumber = struct_ProcessSerialNumber;
pub const ProcessSerialNumberPtr = [*c]ProcessSerialNumber;
pub const struct_Point = extern struct {
    v: c_short,
    h: c_short,
};
pub const Point = struct_Point;
pub const PointPtr = [*c]Point;
pub const struct_Rect = extern struct {
    top: c_short,
    left: c_short,
    bottom: c_short,
    right: c_short,
};
pub const Rect = struct_Rect;
pub const RectPtr = [*c]Rect;
pub const struct_FixedPoint = extern struct {
    x: Fixed,
    y: Fixed,
};
pub const FixedPoint = struct_FixedPoint;
pub const struct_FixedRect = extern struct {
    left: Fixed,
    top: Fixed,
    right: Fixed,
    bottom: Fixed,
};
pub const FixedRect = struct_FixedRect;
pub const CharParameter = c_short;
pub const normal: c_int = 0;
pub const bold: c_int = 1;
pub const italic: c_int = 2;
pub const underline: c_int = 4;
pub const outline: c_int = 8;
pub const shadow: c_int = 16;
pub const condense: c_int = 32;
pub const extend: c_int = 64;
const enum_unnamed_10 = c_uint;
pub const Style = u8;
pub const StyleParameter = c_short;
pub const StyleField = Style;
pub const TimeValue = SInt32;
pub const TimeScale = SInt32;
pub const CompTimeValue = wide;
pub const TimeValue64 = SInt64;
pub const struct_TimeBaseRecord = opaque {};
pub const TimeBase = ?*struct_TimeBaseRecord;
pub const struct_TimeRecord = extern struct {
    value: CompTimeValue,
    scale: TimeScale,
    base: TimeBase,
};
pub const TimeRecord = struct_TimeRecord;
pub const struct_NumVersion = extern struct {
    nonRelRev: UInt8,
    stage: UInt8,
    minorAndBugRev: UInt8,
    majorRev: UInt8,
};
pub const NumVersion = struct_NumVersion;
pub const developStage: c_int = 32;
pub const alphaStage: c_int = 64;
pub const betaStage: c_int = 96;
pub const finalStage: c_int = 128;
const enum_unnamed_11 = c_uint;
pub const union_NumVersionVariant = extern union {
    parts: NumVersion,
    whole: UInt32,
};
pub const NumVersionVariant = union_NumVersionVariant;
pub const NumVersionVariantPtr = [*c]NumVersionVariant;
pub const NumVersionVariantHandle = [*c]NumVersionVariantPtr;
pub const struct_VersRec = extern struct {
    numericVersion: NumVersion,
    countryCode: c_short,
    shortVersion: Str255,
    reserved: Str255,
};
pub const VersRec = struct_VersRec;
pub const VersRecPtr = [*c]VersRec;
pub const VersRecHndl = [*c]VersRecPtr;
pub const Byte = UInt8;
pub const SignedByte = SInt8;
pub const WidePtr = [*c]wide;
pub const UnsignedWidePtr = [*c]UnsignedWide;
pub const extended80 = Float80;
pub const extended96 = Float96;
pub const VHSelect = SInt8;
pub extern fn Debugger() void;
pub extern fn DebugStr(debuggerMsg: ConstStr255Param) void;
pub extern fn SysBreak() void;
pub extern fn SysBreakStr(debuggerMsg: ConstStr255Param) void;
pub extern fn SysBreakFunc(debuggerMsg: ConstStr255Param) void;
pub extern var kCFCoreFoundationVersionNumber: f64;
pub const CFTypeID = c_ulong;
pub const CFOptionFlags = c_ulong;
pub const CFHashCode = c_ulong;
pub const CFIndex = c_long;
pub const CFTypeRef = ?*const anyopaque;
pub const struct___CFString = opaque {};
pub const CFStringRef = ?*const struct___CFString;
pub const CFMutableStringRef = ?*struct___CFString;
pub const CFPropertyListRef = CFTypeRef;
pub const CFComparisonResult = CFIndex;
pub const kCFCompareLessThan: c_int = -1;
pub const kCFCompareEqualTo: c_int = 0;
pub const kCFCompareGreaterThan: c_int = 1;
const enum_unnamed_12 = c_int;
pub const CFComparatorFunction = ?*const fn (?*const anyopaque, ?*const anyopaque, ?*anyopaque) callconv(.C) CFComparisonResult;
pub const kCFNotFound: CFIndex = @bitCast(CFIndex, @as(c_long, -@as(c_int, 1)));
pub const CFRange = extern struct {
    location: CFIndex,
    length: CFIndex,
};
pub inline fn CFRangeMake(arg_loc: CFIndex, arg_len: CFIndex) CFRange {
    var loc = arg_loc;
    var len = arg_len;
    var range: CFRange = undefined;
    range.location = loc;
    range.length = len;
    return range;
}
pub extern fn __CFRangeMake(loc: CFIndex, len: CFIndex) CFRange;
pub const struct___CFNull = opaque {};
pub const CFNullRef = ?*const struct___CFNull;
pub extern fn CFNullGetTypeID() CFTypeID;
pub extern const kCFNull: CFNullRef;
pub const struct___CFAllocator = opaque {};
pub const CFAllocatorRef = ?*const struct___CFAllocator;
pub extern const kCFAllocatorDefault: CFAllocatorRef;
pub extern const kCFAllocatorSystemDefault: CFAllocatorRef;
pub extern const kCFAllocatorMalloc: CFAllocatorRef;
pub extern const kCFAllocatorMallocZone: CFAllocatorRef;
pub extern const kCFAllocatorNull: CFAllocatorRef;
pub extern const kCFAllocatorUseContext: CFAllocatorRef;
pub const CFAllocatorRetainCallBack = ?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque;
pub const CFAllocatorReleaseCallBack = ?*const fn (?*const anyopaque) callconv(.C) void;
pub const CFAllocatorCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFStringRef;
pub const CFAllocatorAllocateCallBack = ?*const fn (CFIndex, CFOptionFlags, ?*anyopaque) callconv(.C) ?*anyopaque;
pub const CFAllocatorReallocateCallBack = ?*const fn (?*anyopaque, CFIndex, CFOptionFlags, ?*anyopaque) callconv(.C) ?*anyopaque;
pub const CFAllocatorDeallocateCallBack = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const CFAllocatorPreferredSizeCallBack = ?*const fn (CFIndex, CFOptionFlags, ?*anyopaque) callconv(.C) CFIndex;
pub const CFAllocatorContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: CFAllocatorRetainCallBack,
    release: CFAllocatorReleaseCallBack,
    copyDescription: CFAllocatorCopyDescriptionCallBack,
    allocate: CFAllocatorAllocateCallBack,
    reallocate: CFAllocatorReallocateCallBack,
    deallocate: CFAllocatorDeallocateCallBack,
    preferredSize: CFAllocatorPreferredSizeCallBack,
};
pub extern fn CFAllocatorGetTypeID() CFTypeID;
pub extern fn CFAllocatorSetDefault(allocator: CFAllocatorRef) void;
pub extern fn CFAllocatorGetDefault() CFAllocatorRef;
pub extern fn CFAllocatorCreate(allocator: CFAllocatorRef, context: [*c]CFAllocatorContext) CFAllocatorRef;
pub extern fn CFAllocatorAllocate(allocator: CFAllocatorRef, size: CFIndex, hint: CFOptionFlags) ?*anyopaque;
pub extern fn CFAllocatorReallocate(allocator: CFAllocatorRef, ptr: ?*anyopaque, newsize: CFIndex, hint: CFOptionFlags) ?*anyopaque;
pub extern fn CFAllocatorDeallocate(allocator: CFAllocatorRef, ptr: ?*anyopaque) void;
pub extern fn CFAllocatorGetPreferredSizeForSize(allocator: CFAllocatorRef, size: CFIndex, hint: CFOptionFlags) CFIndex;
pub extern fn CFAllocatorGetContext(allocator: CFAllocatorRef, context: [*c]CFAllocatorContext) void;
pub extern fn CFGetTypeID(cf: CFTypeRef) CFTypeID;
pub extern fn CFCopyTypeIDDescription(type_id: CFTypeID) CFStringRef;
pub extern fn CFRetain(cf: CFTypeRef) CFTypeRef;
pub extern fn CFRelease(cf: CFTypeRef) void;
pub extern fn CFAutorelease(arg: CFTypeRef) CFTypeRef;
pub extern fn CFGetRetainCount(cf: CFTypeRef) CFIndex;
pub extern fn CFEqual(cf1: CFTypeRef, cf2: CFTypeRef) Boolean;
pub extern fn CFHash(cf: CFTypeRef) CFHashCode;
pub extern fn CFCopyDescription(cf: CFTypeRef) CFStringRef;
pub extern fn CFGetAllocator(cf: CFTypeRef) CFAllocatorRef;
pub extern fn CFMakeCollectable(cf: CFTypeRef) CFTypeRef;
pub const CFArrayRetainCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) ?*const anyopaque;
pub const CFArrayReleaseCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) void;
pub const CFArrayCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFStringRef;
pub const CFArrayEqualCallBack = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) Boolean;
pub const CFArrayCallBacks = extern struct {
    version: CFIndex,
    retain: CFArrayRetainCallBack,
    release: CFArrayReleaseCallBack,
    copyDescription: CFArrayCopyDescriptionCallBack,
    equal: CFArrayEqualCallBack,
};
pub extern const kCFTypeArrayCallBacks: CFArrayCallBacks;
pub const CFArrayApplierFunction = ?*const fn (?*const anyopaque, ?*anyopaque) callconv(.C) void;
pub const struct___CFArray = opaque {};
pub const CFArrayRef = ?*const struct___CFArray;
pub const CFMutableArrayRef = ?*struct___CFArray;
pub extern fn CFArrayGetTypeID() CFTypeID;
pub extern fn CFArrayCreate(allocator: CFAllocatorRef, values: [*c]?*const anyopaque, numValues: CFIndex, callBacks: [*c]const CFArrayCallBacks) CFArrayRef;
pub extern fn CFArrayCreateCopy(allocator: CFAllocatorRef, theArray: CFArrayRef) CFArrayRef;
pub extern fn CFArrayCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex, callBacks: [*c]const CFArrayCallBacks) CFMutableArrayRef;
pub extern fn CFArrayCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theArray: CFArrayRef) CFMutableArrayRef;
pub extern fn CFArrayGetCount(theArray: CFArrayRef) CFIndex;
pub extern fn CFArrayGetCountOfValue(theArray: CFArrayRef, range: CFRange, value: ?*const anyopaque) CFIndex;
pub extern fn CFArrayContainsValue(theArray: CFArrayRef, range: CFRange, value: ?*const anyopaque) Boolean;
pub extern fn CFArrayGetValueAtIndex(theArray: CFArrayRef, idx: CFIndex) ?*const anyopaque;
pub extern fn CFArrayGetValues(theArray: CFArrayRef, range: CFRange, values: [*c]?*const anyopaque) void;
pub extern fn CFArrayApplyFunction(theArray: CFArrayRef, range: CFRange, applier: CFArrayApplierFunction, context: ?*anyopaque) void;
pub extern fn CFArrayGetFirstIndexOfValue(theArray: CFArrayRef, range: CFRange, value: ?*const anyopaque) CFIndex;
pub extern fn CFArrayGetLastIndexOfValue(theArray: CFArrayRef, range: CFRange, value: ?*const anyopaque) CFIndex;
pub extern fn CFArrayBSearchValues(theArray: CFArrayRef, range: CFRange, value: ?*const anyopaque, comparator: CFComparatorFunction, context: ?*anyopaque) CFIndex;
pub extern fn CFArrayAppendValue(theArray: CFMutableArrayRef, value: ?*const anyopaque) void;
pub extern fn CFArrayInsertValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex, value: ?*const anyopaque) void;
pub extern fn CFArraySetValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex, value: ?*const anyopaque) void;
pub extern fn CFArrayRemoveValueAtIndex(theArray: CFMutableArrayRef, idx: CFIndex) void;
pub extern fn CFArrayRemoveAllValues(theArray: CFMutableArrayRef) void;
pub extern fn CFArrayReplaceValues(theArray: CFMutableArrayRef, range: CFRange, newValues: [*c]?*const anyopaque, newCount: CFIndex) void;
pub extern fn CFArrayExchangeValuesAtIndices(theArray: CFMutableArrayRef, idx1: CFIndex, idx2: CFIndex) void;
pub extern fn CFArraySortValues(theArray: CFMutableArrayRef, range: CFRange, comparator: CFComparatorFunction, context: ?*anyopaque) void;
pub extern fn CFArrayAppendArray(theArray: CFMutableArrayRef, otherArray: CFArrayRef, otherRange: CFRange) void;
pub const CFBagRetainCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) ?*const anyopaque;
pub const CFBagReleaseCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) void;
pub const CFBagCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFStringRef;
pub const CFBagEqualCallBack = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) Boolean;
pub const CFBagHashCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFHashCode;
pub const CFBagCallBacks = extern struct {
    version: CFIndex,
    retain: CFBagRetainCallBack,
    release: CFBagReleaseCallBack,
    copyDescription: CFBagCopyDescriptionCallBack,
    equal: CFBagEqualCallBack,
    hash: CFBagHashCallBack,
};
pub extern const kCFTypeBagCallBacks: CFBagCallBacks;
pub extern const kCFCopyStringBagCallBacks: CFBagCallBacks;
pub const CFBagApplierFunction = ?*const fn (?*const anyopaque, ?*anyopaque) callconv(.C) void;
pub const struct___CFBag = opaque {};
pub const CFBagRef = ?*const struct___CFBag;
pub const CFMutableBagRef = ?*struct___CFBag;
pub extern fn CFBagGetTypeID() CFTypeID;
pub extern fn CFBagCreate(allocator: CFAllocatorRef, values: [*c]?*const anyopaque, numValues: CFIndex, callBacks: [*c]const CFBagCallBacks) CFBagRef;
pub extern fn CFBagCreateCopy(allocator: CFAllocatorRef, theBag: CFBagRef) CFBagRef;
pub extern fn CFBagCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex, callBacks: [*c]const CFBagCallBacks) CFMutableBagRef;
pub extern fn CFBagCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theBag: CFBagRef) CFMutableBagRef;
pub extern fn CFBagGetCount(theBag: CFBagRef) CFIndex;
pub extern fn CFBagGetCountOfValue(theBag: CFBagRef, value: ?*const anyopaque) CFIndex;
pub extern fn CFBagContainsValue(theBag: CFBagRef, value: ?*const anyopaque) Boolean;
pub extern fn CFBagGetValue(theBag: CFBagRef, value: ?*const anyopaque) ?*const anyopaque;
pub extern fn CFBagGetValueIfPresent(theBag: CFBagRef, candidate: ?*const anyopaque, value: [*c]?*const anyopaque) Boolean;
pub extern fn CFBagGetValues(theBag: CFBagRef, values: [*c]?*const anyopaque) void;
pub extern fn CFBagApplyFunction(theBag: CFBagRef, applier: CFBagApplierFunction, context: ?*anyopaque) void;
pub extern fn CFBagAddValue(theBag: CFMutableBagRef, value: ?*const anyopaque) void;
pub extern fn CFBagReplaceValue(theBag: CFMutableBagRef, value: ?*const anyopaque) void;
pub extern fn CFBagSetValue(theBag: CFMutableBagRef, value: ?*const anyopaque) void;
pub extern fn CFBagRemoveValue(theBag: CFMutableBagRef, value: ?*const anyopaque) void;
pub extern fn CFBagRemoveAllValues(theBag: CFMutableBagRef) void;
pub const CFBinaryHeapCompareContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: ?fn (?*const anyopaque) callconv(.C) ?*const anyopaque,
    release: ?fn (?*const anyopaque) callconv(.C) void,
    copyDescription: ?fn (?*const anyopaque) callconv(.C) CFStringRef,
};
pub const CFBinaryHeapCallBacks = extern struct {
    version: CFIndex,
    retain: ?fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) ?*const anyopaque,
    release: ?fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) void,
    copyDescription: ?fn (?*const anyopaque) callconv(.C) CFStringRef,
    compare: ?fn (?*const anyopaque, ?*const anyopaque, ?*anyopaque) callconv(.C) CFComparisonResult,
};
pub extern const kCFStringBinaryHeapCallBacks: CFBinaryHeapCallBacks;
pub const CFBinaryHeapApplierFunction = ?*const fn (?*const anyopaque, ?*anyopaque) callconv(.C) void;
pub const struct___CFBinaryHeap = opaque {};
pub const CFBinaryHeapRef = ?*struct___CFBinaryHeap;
pub extern fn CFBinaryHeapGetTypeID() CFTypeID;
pub extern fn CFBinaryHeapCreate(allocator: CFAllocatorRef, capacity: CFIndex, callBacks: [*c]const CFBinaryHeapCallBacks, compareContext: [*c]const CFBinaryHeapCompareContext) CFBinaryHeapRef;
pub extern fn CFBinaryHeapCreateCopy(allocator: CFAllocatorRef, capacity: CFIndex, heap: CFBinaryHeapRef) CFBinaryHeapRef;
pub extern fn CFBinaryHeapGetCount(heap: CFBinaryHeapRef) CFIndex;
pub extern fn CFBinaryHeapGetCountOfValue(heap: CFBinaryHeapRef, value: ?*const anyopaque) CFIndex;
pub extern fn CFBinaryHeapContainsValue(heap: CFBinaryHeapRef, value: ?*const anyopaque) Boolean;
pub extern fn CFBinaryHeapGetMinimum(heap: CFBinaryHeapRef) ?*const anyopaque;
pub extern fn CFBinaryHeapGetMinimumIfPresent(heap: CFBinaryHeapRef, value: [*c]?*const anyopaque) Boolean;
pub extern fn CFBinaryHeapGetValues(heap: CFBinaryHeapRef, values: [*c]?*const anyopaque) void;
pub extern fn CFBinaryHeapApplyFunction(heap: CFBinaryHeapRef, applier: CFBinaryHeapApplierFunction, context: ?*anyopaque) void;
pub extern fn CFBinaryHeapAddValue(heap: CFBinaryHeapRef, value: ?*const anyopaque) void;
pub extern fn CFBinaryHeapRemoveMinimumValue(heap: CFBinaryHeapRef) void;
pub extern fn CFBinaryHeapRemoveAllValues(heap: CFBinaryHeapRef) void;
pub const CFBit = UInt32;
pub const struct___CFBitVector = opaque {};
pub const CFBitVectorRef = ?*const struct___CFBitVector;
pub const CFMutableBitVectorRef = ?*struct___CFBitVector;
pub extern fn CFBitVectorGetTypeID() CFTypeID;
pub extern fn CFBitVectorCreate(allocator: CFAllocatorRef, bytes: [*c]const UInt8, numBits: CFIndex) CFBitVectorRef;
pub extern fn CFBitVectorCreateCopy(allocator: CFAllocatorRef, bv: CFBitVectorRef) CFBitVectorRef;
pub extern fn CFBitVectorCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex) CFMutableBitVectorRef;
pub extern fn CFBitVectorCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, bv: CFBitVectorRef) CFMutableBitVectorRef;
pub extern fn CFBitVectorGetCount(bv: CFBitVectorRef) CFIndex;
pub extern fn CFBitVectorGetCountOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) CFIndex;
pub extern fn CFBitVectorContainsBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) Boolean;
pub extern fn CFBitVectorGetBitAtIndex(bv: CFBitVectorRef, idx: CFIndex) CFBit;
pub extern fn CFBitVectorGetBits(bv: CFBitVectorRef, range: CFRange, bytes: [*c]UInt8) void;
pub extern fn CFBitVectorGetFirstIndexOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) CFIndex;
pub extern fn CFBitVectorGetLastIndexOfBit(bv: CFBitVectorRef, range: CFRange, value: CFBit) CFIndex;
pub extern fn CFBitVectorSetCount(bv: CFMutableBitVectorRef, count: CFIndex) void;
pub extern fn CFBitVectorFlipBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex) void;
pub extern fn CFBitVectorFlipBits(bv: CFMutableBitVectorRef, range: CFRange) void;
pub extern fn CFBitVectorSetBitAtIndex(bv: CFMutableBitVectorRef, idx: CFIndex, value: CFBit) void;
pub extern fn CFBitVectorSetBits(bv: CFMutableBitVectorRef, range: CFRange, value: CFBit) void;
pub extern fn CFBitVectorSetAllBits(bv: CFMutableBitVectorRef, value: CFBit) void;
pub const OSUnknownByteOrder: c_int = 0;
pub const OSLittleEndian: c_int = 1;
pub const OSBigEndian: c_int = 2;
const enum_unnamed_13 = c_uint;
pub fn OSHostByteOrder() callconv(.C) i32 {
    return OSLittleEndian;
}
pub fn _OSReadInt16(arg_base: ?*const volatile anyopaque, arg_byteOffset: usize) callconv(.C) u16 {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    return @intToPtr([*c]volatile u16, @intCast(usize, @ptrToInt(base)) +% byteOffset).*;
}
pub fn _OSReadInt32(arg_base: ?*const volatile anyopaque, arg_byteOffset: usize) callconv(.C) u32 {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    return @intToPtr([*c]volatile u32, @intCast(usize, @ptrToInt(base)) +% byteOffset).*;
}
pub fn _OSReadInt64(arg_base: ?*const volatile anyopaque, arg_byteOffset: usize) callconv(.C) u64 {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    return @intToPtr([*c]volatile u64, @intCast(usize, @ptrToInt(base)) +% byteOffset).*;
}
pub fn _OSWriteInt16(arg_base: ?*volatile anyopaque, arg_byteOffset: usize, arg_data: u16) callconv(.C) void {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    var data = arg_data;
    @intToPtr([*c]volatile u16, @intCast(usize, @ptrToInt(base)) +% byteOffset).* = data;
}
pub fn _OSWriteInt32(arg_base: ?*volatile anyopaque, arg_byteOffset: usize, arg_data: u32) callconv(.C) void {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    var data = arg_data;
    @intToPtr([*c]volatile u32, @intCast(usize, @ptrToInt(base)) +% byteOffset).* = data;
}
pub fn _OSWriteInt64(arg_base: ?*volatile anyopaque, arg_byteOffset: usize, arg_data: u64) callconv(.C) void {
    var base = arg_base;
    var byteOffset = arg_byteOffset;
    var data = arg_data;
    @intToPtr([*c]volatile u64, @intCast(usize, @ptrToInt(base)) +% byteOffset).* = data;
}
pub const CFByteOrderUnknown: c_int = 0;
pub const CFByteOrderLittleEndian: c_int = 1;
pub const CFByteOrderBigEndian: c_int = 2;
pub const enum___CFByteOrder = c_uint;
pub const CFByteOrder = CFIndex;
pub inline fn CFByteOrderGetCurrent() CFByteOrder {
    var byteOrder: i32 = OSHostByteOrder();
    while (true) {
        switch (byteOrder) {
            @as(c_int, 1) => return @bitCast(CFByteOrder, @as(c_long, CFByteOrderLittleEndian)),
            @as(c_int, 2) => return @bitCast(CFByteOrder, @as(c_long, CFByteOrderBigEndian)),
            else => break,
        }
        break;
    }
    return @bitCast(CFByteOrder, @as(c_long, CFByteOrderUnknown));
}
pub inline fn CFSwapInt16(arg_arg: u16) u16 {
    var arg = arg_arg;
    return @bitCast(__uint16_t, @truncate(c_short, if (__builtin_constant_p(arg) != 0) @bitCast(c_int, @as(c_uint, @bitCast(__uint16_t, @truncate(c_ushort, ((@bitCast(c_uint, @as(c_uint, @bitCast(__uint16_t, arg))) & @as(c_uint, 65280)) >> @intCast(@import("std").math.Log2Int(c_uint), 8)) | ((@bitCast(c_uint, @as(c_uint, @bitCast(__uint16_t, arg))) & @as(c_uint, 255)) << @intCast(@import("std").math.Log2Int(c_uint), 8)))))) else @bitCast(c_int, @as(c_uint, _OSSwapInt16(arg)))));
}
pub inline fn CFSwapInt32(arg_arg: u32) u32 {
    var arg = arg_arg;
    return if (__builtin_constant_p(arg) != 0) @bitCast(__uint32_t, ((((@bitCast(__uint32_t, arg) & @as(c_uint, 4278190080)) >> @intCast(@import("std").math.Log2Int(c_uint), 24)) | ((@bitCast(__uint32_t, arg) & @as(c_uint, 16711680)) >> @intCast(@import("std").math.Log2Int(c_uint), 8))) | ((@bitCast(__uint32_t, arg) & @as(c_uint, 65280)) << @intCast(@import("std").math.Log2Int(c_uint), 8))) | ((@bitCast(__uint32_t, arg) & @as(c_uint, 255)) << @intCast(@import("std").math.Log2Int(c_uint), 24))) else _OSSwapInt32(arg);
}
pub inline fn CFSwapInt64(arg_arg: u64) u64 {
    var arg = arg_arg;
    return if (__builtin_constant_p(arg) != 0) @bitCast(__uint64_t, ((((((((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 18374686479671623680)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 56)) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 71776119061217280)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 40))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 280375465082880)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 24))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 1095216660480)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 8))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 4278190080)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 8))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 16711680)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 24))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 65280)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 40))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 255)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 56))) else _OSSwapInt64(arg);
}
pub inline fn CFSwapInt16BigToHost(arg_arg: u16) u16 {
    var arg = arg_arg;
    return @bitCast(__uint16_t, @truncate(c_short, if (__builtin_constant_p(arg) != 0) @bitCast(c_int, @as(c_uint, @bitCast(__uint16_t, @truncate(c_ushort, ((@bitCast(c_uint, @as(c_uint, @bitCast(__uint16_t, arg))) & @as(c_uint, 65280)) >> @intCast(@import("std").math.Log2Int(c_uint), 8)) | ((@bitCast(c_uint, @as(c_uint, @bitCast(__uint16_t, arg))) & @as(c_uint, 255)) << @intCast(@import("std").math.Log2Int(c_uint), 8)))))) else @bitCast(c_int, @as(c_uint, _OSSwapInt16(arg)))));
}
pub inline fn CFSwapInt32BigToHost(arg_arg: u32) u32 {
    var arg = arg_arg;
    return if (__builtin_constant_p(arg) != 0) @bitCast(__uint32_t, ((((@bitCast(__uint32_t, arg) & @as(c_uint, 4278190080)) >> @intCast(@import("std").math.Log2Int(c_uint), 24)) | ((@bitCast(__uint32_t, arg) & @as(c_uint, 16711680)) >> @intCast(@import("std").math.Log2Int(c_uint), 8))) | ((@bitCast(__uint32_t, arg) & @as(c_uint, 65280)) << @intCast(@import("std").math.Log2Int(c_uint), 8))) | ((@bitCast(__uint32_t, arg) & @as(c_uint, 255)) << @intCast(@import("std").math.Log2Int(c_uint), 24))) else _OSSwapInt32(arg);
}
pub inline fn CFSwapInt64BigToHost(arg_arg: u64) u64 {
    var arg = arg_arg;
    return if (__builtin_constant_p(arg) != 0) @bitCast(__uint64_t, ((((((((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 18374686479671623680)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 56)) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 71776119061217280)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 40))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 280375465082880)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 24))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 1095216660480)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 8))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 4278190080)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 8))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 16711680)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 24))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 65280)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 40))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 255)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 56))) else _OSSwapInt64(arg);
}
pub inline fn CFSwapInt16HostToBig(arg_arg: u16) u16 {
    var arg = arg_arg;
    return @bitCast(__uint16_t, @truncate(c_short, if (__builtin_constant_p(arg) != 0) @bitCast(c_int, @as(c_uint, @bitCast(__uint16_t, @truncate(c_ushort, ((@bitCast(c_uint, @as(c_uint, @bitCast(__uint16_t, arg))) & @as(c_uint, 65280)) >> @intCast(@import("std").math.Log2Int(c_uint), 8)) | ((@bitCast(c_uint, @as(c_uint, @bitCast(__uint16_t, arg))) & @as(c_uint, 255)) << @intCast(@import("std").math.Log2Int(c_uint), 8)))))) else @bitCast(c_int, @as(c_uint, _OSSwapInt16(arg)))));
}
pub inline fn CFSwapInt32HostToBig(arg_arg: u32) u32 {
    var arg = arg_arg;
    return if (__builtin_constant_p(arg) != 0) @bitCast(__uint32_t, ((((@bitCast(__uint32_t, arg) & @as(c_uint, 4278190080)) >> @intCast(@import("std").math.Log2Int(c_uint), 24)) | ((@bitCast(__uint32_t, arg) & @as(c_uint, 16711680)) >> @intCast(@import("std").math.Log2Int(c_uint), 8))) | ((@bitCast(__uint32_t, arg) & @as(c_uint, 65280)) << @intCast(@import("std").math.Log2Int(c_uint), 8))) | ((@bitCast(__uint32_t, arg) & @as(c_uint, 255)) << @intCast(@import("std").math.Log2Int(c_uint), 24))) else _OSSwapInt32(arg);
}
pub inline fn CFSwapInt64HostToBig(arg_arg: u64) u64 {
    var arg = arg_arg;
    return if (__builtin_constant_p(arg) != 0) @bitCast(__uint64_t, ((((((((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 18374686479671623680)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 56)) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 71776119061217280)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 40))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 280375465082880)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 24))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 1095216660480)) >> @intCast(@import("std").math.Log2Int(c_ulonglong), 8))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 4278190080)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 8))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 16711680)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 24))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 65280)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 40))) | ((@bitCast(__uint64_t, arg) & @as(c_ulonglong, 255)) << @intCast(@import("std").math.Log2Int(c_ulonglong), 56))) else _OSSwapInt64(arg);
}
pub inline fn CFSwapInt16LittleToHost(arg_arg: u16) u16 {
    var arg = arg_arg;
    return arg;
}
pub inline fn CFSwapInt32LittleToHost(arg_arg: u32) u32 {
    var arg = arg_arg;
    return arg;
}
pub inline fn CFSwapInt64LittleToHost(arg_arg: u64) u64 {
    var arg = arg_arg;
    return arg;
}
pub inline fn CFSwapInt16HostToLittle(arg_arg: u16) u16 {
    var arg = arg_arg;
    return arg;
}
pub inline fn CFSwapInt32HostToLittle(arg_arg: u32) u32 {
    var arg = arg_arg;
    return arg;
}
pub inline fn CFSwapInt64HostToLittle(arg_arg: u64) u64 {
    var arg = arg_arg;
    return arg;
}
pub const CFSwappedFloat32 = extern struct {
    v: u32,
};
pub const CFSwappedFloat64 = extern struct {
    v: u64,
};
pub inline fn CFConvertFloat32HostToSwapped(arg_arg: Float32) CFSwappedFloat32 {
    var arg = arg_arg;
    const union_CFSwap = extern union {
        v: Float32,
        sv: CFSwappedFloat32,
    };
    var result: union_CFSwap = undefined;
    result.v = arg;
    result.sv.v = CFSwapInt32(result.sv.v);
    return result.sv;
}
pub inline fn CFConvertFloat32SwappedToHost(arg_arg: CFSwappedFloat32) Float32 {
    var arg = arg_arg;
    const union_CFSwap = extern union {
        v: Float32,
        sv: CFSwappedFloat32,
    };
    var result: union_CFSwap = undefined;
    result.sv = arg;
    result.sv.v = CFSwapInt32(result.sv.v);
    return result.v;
}
pub inline fn CFConvertFloat64HostToSwapped(arg_arg: Float64) CFSwappedFloat64 {
    var arg = arg_arg;
    const union_CFSwap = extern union {
        v: Float64,
        sv: CFSwappedFloat64,
    };
    var result: union_CFSwap = undefined;
    result.v = arg;
    result.sv.v = CFSwapInt64(result.sv.v);
    return result.sv;
}
pub inline fn CFConvertFloat64SwappedToHost(arg_arg: CFSwappedFloat64) Float64 {
    var arg = arg_arg;
    const union_CFSwap = extern union {
        v: Float64,
        sv: CFSwappedFloat64,
    };
    var result: union_CFSwap = undefined;
    result.sv = arg;
    result.sv.v = CFSwapInt64(result.sv.v);
    return result.v;
}
pub inline fn CFConvertFloatHostToSwapped(arg_arg: f32) CFSwappedFloat32 {
    var arg = arg_arg;
    const union_CFSwap = extern union {
        v: f32,
        sv: CFSwappedFloat32,
    };
    var result: union_CFSwap = undefined;
    result.v = arg;
    result.sv.v = CFSwapInt32(result.sv.v);
    return result.sv;
}
pub inline fn CFConvertFloatSwappedToHost(arg_arg: CFSwappedFloat32) f32 {
    var arg = arg_arg;
    const union_CFSwap = extern union {
        v: f32,
        sv: CFSwappedFloat32,
    };
    var result: union_CFSwap = undefined;
    result.sv = arg;
    result.sv.v = CFSwapInt32(result.sv.v);
    return result.v;
}
pub inline fn CFConvertDoubleHostToSwapped(arg_arg: f64) CFSwappedFloat64 {
    var arg = arg_arg;
    const union_CFSwap = extern union {
        v: f64,
        sv: CFSwappedFloat64,
    };
    var result: union_CFSwap = undefined;
    result.v = arg;
    result.sv.v = CFSwapInt64(result.sv.v);
    return result.sv;
}
pub inline fn CFConvertDoubleSwappedToHost(arg_arg: CFSwappedFloat64) f64 {
    var arg = arg_arg;
    const union_CFSwap = extern union {
        v: f64,
        sv: CFSwappedFloat64,
    };
    var result: union_CFSwap = undefined;
    result.sv = arg;
    result.sv.v = CFSwapInt64(result.sv.v);
    return result.v;
}
pub const CFDictionaryRetainCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) ?*const anyopaque;
pub const CFDictionaryReleaseCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) void;
pub const CFDictionaryCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFStringRef;
pub const CFDictionaryEqualCallBack = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) Boolean;
pub const CFDictionaryHashCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFHashCode;
pub const CFDictionaryKeyCallBacks = extern struct {
    version: CFIndex,
    retain: CFDictionaryRetainCallBack,
    release: CFDictionaryReleaseCallBack,
    copyDescription: CFDictionaryCopyDescriptionCallBack,
    equal: CFDictionaryEqualCallBack,
    hash: CFDictionaryHashCallBack,
};
pub extern const kCFTypeDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
pub extern const kCFCopyStringDictionaryKeyCallBacks: CFDictionaryKeyCallBacks;
pub const CFDictionaryValueCallBacks = extern struct {
    version: CFIndex,
    retain: CFDictionaryRetainCallBack,
    release: CFDictionaryReleaseCallBack,
    copyDescription: CFDictionaryCopyDescriptionCallBack,
    equal: CFDictionaryEqualCallBack,
};
pub extern const kCFTypeDictionaryValueCallBacks: CFDictionaryValueCallBacks;
pub const CFDictionaryApplierFunction = ?*const fn (?*const anyopaque, ?*const anyopaque, ?*anyopaque) callconv(.C) void;
pub const struct___CFDictionary = opaque {};
pub const CFDictionaryRef = ?*const struct___CFDictionary;
pub const CFMutableDictionaryRef = ?*struct___CFDictionary;
pub extern fn CFDictionaryGetTypeID() CFTypeID;
pub extern fn CFDictionaryCreate(allocator: CFAllocatorRef, keys: [*c]?*const anyopaque, values: [*c]?*const anyopaque, numValues: CFIndex, keyCallBacks: [*c]const CFDictionaryKeyCallBacks, valueCallBacks: [*c]const CFDictionaryValueCallBacks) CFDictionaryRef;
pub extern fn CFDictionaryCreateCopy(allocator: CFAllocatorRef, theDict: CFDictionaryRef) CFDictionaryRef;
pub extern fn CFDictionaryCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex, keyCallBacks: [*c]const CFDictionaryKeyCallBacks, valueCallBacks: [*c]const CFDictionaryValueCallBacks) CFMutableDictionaryRef;
pub extern fn CFDictionaryCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theDict: CFDictionaryRef) CFMutableDictionaryRef;
pub extern fn CFDictionaryGetCount(theDict: CFDictionaryRef) CFIndex;
pub extern fn CFDictionaryGetCountOfKey(theDict: CFDictionaryRef, key: ?*const anyopaque) CFIndex;
pub extern fn CFDictionaryGetCountOfValue(theDict: CFDictionaryRef, value: ?*const anyopaque) CFIndex;
pub extern fn CFDictionaryContainsKey(theDict: CFDictionaryRef, key: ?*const anyopaque) Boolean;
pub extern fn CFDictionaryContainsValue(theDict: CFDictionaryRef, value: ?*const anyopaque) Boolean;
pub extern fn CFDictionaryGetValue(theDict: CFDictionaryRef, key: ?*const anyopaque) ?*const anyopaque;
pub extern fn CFDictionaryGetValueIfPresent(theDict: CFDictionaryRef, key: ?*const anyopaque, value: [*c]?*const anyopaque) Boolean;
pub extern fn CFDictionaryGetKeysAndValues(theDict: CFDictionaryRef, keys: [*c]?*const anyopaque, values: [*c]?*const anyopaque) void;
pub extern fn CFDictionaryApplyFunction(theDict: CFDictionaryRef, applier: CFDictionaryApplierFunction, context: ?*anyopaque) void;
pub extern fn CFDictionaryAddValue(theDict: CFMutableDictionaryRef, key: ?*const anyopaque, value: ?*const anyopaque) void;
pub extern fn CFDictionarySetValue(theDict: CFMutableDictionaryRef, key: ?*const anyopaque, value: ?*const anyopaque) void;
pub extern fn CFDictionaryReplaceValue(theDict: CFMutableDictionaryRef, key: ?*const anyopaque, value: ?*const anyopaque) void;
pub extern fn CFDictionaryRemoveValue(theDict: CFMutableDictionaryRef, key: ?*const anyopaque) void;
pub extern fn CFDictionaryRemoveAllValues(theDict: CFMutableDictionaryRef) void;
pub const CFNotificationName = CFStringRef;
pub const struct___CFNotificationCenter = opaque {};
pub const CFNotificationCenterRef = ?*struct___CFNotificationCenter;
pub const CFNotificationCallback = ?*const fn (CFNotificationCenterRef, ?*anyopaque, CFNotificationName, ?*const anyopaque, CFDictionaryRef) callconv(.C) void;
pub const CFNotificationSuspensionBehavior = CFIndex;
pub const CFNotificationSuspensionBehaviorDrop: c_int = 1;
pub const CFNotificationSuspensionBehaviorCoalesce: c_int = 2;
pub const CFNotificationSuspensionBehaviorHold: c_int = 3;
pub const CFNotificationSuspensionBehaviorDeliverImmediately: c_int = 4;
const enum_unnamed_14 = c_uint;
pub extern fn CFNotificationCenterGetTypeID() CFTypeID;
pub extern fn CFNotificationCenterGetLocalCenter() CFNotificationCenterRef;
pub extern fn CFNotificationCenterGetDistributedCenter() CFNotificationCenterRef;
pub extern fn CFNotificationCenterGetDarwinNotifyCenter() CFNotificationCenterRef;
pub extern fn CFNotificationCenterAddObserver(center: CFNotificationCenterRef, observer: ?*const anyopaque, callBack: CFNotificationCallback, name: CFStringRef, object: ?*const anyopaque, suspensionBehavior: CFNotificationSuspensionBehavior) void;
pub extern fn CFNotificationCenterRemoveObserver(center: CFNotificationCenterRef, observer: ?*const anyopaque, name: CFNotificationName, object: ?*const anyopaque) void;
pub extern fn CFNotificationCenterRemoveEveryObserver(center: CFNotificationCenterRef, observer: ?*const anyopaque) void;
pub extern fn CFNotificationCenterPostNotification(center: CFNotificationCenterRef, name: CFNotificationName, object: ?*const anyopaque, userInfo: CFDictionaryRef, deliverImmediately: Boolean) void;
pub const kCFNotificationDeliverImmediately: c_int = 1;
pub const kCFNotificationPostToAllSessions: c_int = 2;
const enum_unnamed_15 = c_uint;
pub extern fn CFNotificationCenterPostNotificationWithOptions(center: CFNotificationCenterRef, name: CFNotificationName, object: ?*const anyopaque, userInfo: CFDictionaryRef, options: CFOptionFlags) void;
pub const CFLocaleIdentifier = CFStringRef;
pub const CFLocaleKey = CFStringRef;
pub const struct___CFLocale = opaque {};
pub const CFLocaleRef = ?*const struct___CFLocale;
pub extern fn CFLocaleGetTypeID() CFTypeID;
pub extern fn CFLocaleGetSystem() CFLocaleRef;
pub extern fn CFLocaleCopyCurrent() CFLocaleRef;
pub extern fn CFLocaleCopyAvailableLocaleIdentifiers() CFArrayRef;
pub extern fn CFLocaleCopyISOLanguageCodes() CFArrayRef;
pub extern fn CFLocaleCopyISOCountryCodes() CFArrayRef;
pub extern fn CFLocaleCopyISOCurrencyCodes() CFArrayRef;
pub extern fn CFLocaleCopyCommonISOCurrencyCodes() CFArrayRef;
pub extern fn CFLocaleCopyPreferredLanguages() CFArrayRef;
pub extern fn CFLocaleCreateCanonicalLanguageIdentifierFromString(allocator: CFAllocatorRef, localeIdentifier: CFStringRef) CFLocaleIdentifier;
pub extern fn CFLocaleCreateCanonicalLocaleIdentifierFromString(allocator: CFAllocatorRef, localeIdentifier: CFStringRef) CFLocaleIdentifier;
pub extern fn CFLocaleCreateCanonicalLocaleIdentifierFromScriptManagerCodes(allocator: CFAllocatorRef, lcode: LangCode, rcode: RegionCode) CFLocaleIdentifier;
pub extern fn CFLocaleCreateLocaleIdentifierFromWindowsLocaleCode(allocator: CFAllocatorRef, lcid: u32) CFLocaleIdentifier;
pub extern fn CFLocaleGetWindowsLocaleCodeFromLocaleIdentifier(localeIdentifier: CFLocaleIdentifier) u32;
pub const CFLocaleLanguageDirection = CFIndex;
pub const kCFLocaleLanguageDirectionUnknown: c_int = 0;
pub const kCFLocaleLanguageDirectionLeftToRight: c_int = 1;
pub const kCFLocaleLanguageDirectionRightToLeft: c_int = 2;
pub const kCFLocaleLanguageDirectionTopToBottom: c_int = 3;
pub const kCFLocaleLanguageDirectionBottomToTop: c_int = 4;
const enum_unnamed_16 = c_uint;
pub extern fn CFLocaleGetLanguageCharacterDirection(isoLangCode: CFStringRef) CFLocaleLanguageDirection;
pub extern fn CFLocaleGetLanguageLineDirection(isoLangCode: CFStringRef) CFLocaleLanguageDirection;
pub extern fn CFLocaleCreateComponentsFromLocaleIdentifier(allocator: CFAllocatorRef, localeID: CFLocaleIdentifier) CFDictionaryRef;
pub extern fn CFLocaleCreateLocaleIdentifierFromComponents(allocator: CFAllocatorRef, dictionary: CFDictionaryRef) CFLocaleIdentifier;
pub extern fn CFLocaleCreate(allocator: CFAllocatorRef, localeIdentifier: CFLocaleIdentifier) CFLocaleRef;
pub extern fn CFLocaleCreateCopy(allocator: CFAllocatorRef, locale: CFLocaleRef) CFLocaleRef;
pub extern fn CFLocaleGetIdentifier(locale: CFLocaleRef) CFLocaleIdentifier;
pub extern fn CFLocaleGetValue(locale: CFLocaleRef, key: CFLocaleKey) CFTypeRef;
pub extern fn CFLocaleCopyDisplayNameForPropertyValue(displayLocale: CFLocaleRef, key: CFLocaleKey, value: CFStringRef) CFStringRef;
pub extern const kCFLocaleCurrentLocaleDidChangeNotification: CFNotificationName;
pub extern const kCFLocaleIdentifier: CFLocaleKey;
pub extern const kCFLocaleLanguageCode: CFLocaleKey;
pub extern const kCFLocaleCountryCode: CFLocaleKey;
pub extern const kCFLocaleScriptCode: CFLocaleKey;
pub extern const kCFLocaleVariantCode: CFLocaleKey;
pub extern const kCFLocaleExemplarCharacterSet: CFLocaleKey;
pub extern const kCFLocaleCalendarIdentifier: CFLocaleKey;
pub extern const kCFLocaleCalendar: CFLocaleKey;
pub extern const kCFLocaleCollationIdentifier: CFLocaleKey;
pub extern const kCFLocaleUsesMetricSystem: CFLocaleKey;
pub extern const kCFLocaleMeasurementSystem: CFLocaleKey;
pub extern const kCFLocaleDecimalSeparator: CFLocaleKey;
pub extern const kCFLocaleGroupingSeparator: CFLocaleKey;
pub extern const kCFLocaleCurrencySymbol: CFLocaleKey;
pub extern const kCFLocaleCurrencyCode: CFLocaleKey;
pub extern const kCFLocaleCollatorIdentifier: CFLocaleKey;
pub extern const kCFLocaleQuotationBeginDelimiterKey: CFLocaleKey;
pub extern const kCFLocaleQuotationEndDelimiterKey: CFLocaleKey;
pub extern const kCFLocaleAlternateQuotationBeginDelimiterKey: CFLocaleKey;
pub extern const kCFLocaleAlternateQuotationEndDelimiterKey: CFLocaleKey;
pub const CFCalendarIdentifier = CFStringRef;
pub extern const kCFGregorianCalendar: CFCalendarIdentifier;
pub extern const kCFBuddhistCalendar: CFCalendarIdentifier;
pub extern const kCFChineseCalendar: CFCalendarIdentifier;
pub extern const kCFHebrewCalendar: CFCalendarIdentifier;
pub extern const kCFIslamicCalendar: CFCalendarIdentifier;
pub extern const kCFIslamicCivilCalendar: CFCalendarIdentifier;
pub extern const kCFJapaneseCalendar: CFCalendarIdentifier;
pub extern const kCFRepublicOfChinaCalendar: CFCalendarIdentifier;
pub extern const kCFPersianCalendar: CFCalendarIdentifier;
pub extern const kCFIndianCalendar: CFCalendarIdentifier;
pub extern const kCFISO8601Calendar: CFCalendarIdentifier;
pub extern const kCFIslamicTabularCalendar: CFCalendarIdentifier;
pub extern const kCFIslamicUmmAlQuraCalendar: CFCalendarIdentifier;
pub const CFTimeInterval = f64;
pub const CFAbsoluteTime = CFTimeInterval;
pub extern fn CFAbsoluteTimeGetCurrent() CFAbsoluteTime;
pub extern const kCFAbsoluteTimeIntervalSince1970: CFTimeInterval;
pub extern const kCFAbsoluteTimeIntervalSince1904: CFTimeInterval;
pub const struct___CFDate = opaque {};
pub const CFDateRef = ?*const struct___CFDate;
pub extern fn CFDateGetTypeID() CFTypeID;
pub extern fn CFDateCreate(allocator: CFAllocatorRef, at: CFAbsoluteTime) CFDateRef;
pub extern fn CFDateGetAbsoluteTime(theDate: CFDateRef) CFAbsoluteTime;
pub extern fn CFDateGetTimeIntervalSinceDate(theDate: CFDateRef, otherDate: CFDateRef) CFTimeInterval;
pub extern fn CFDateCompare(theDate: CFDateRef, otherDate: CFDateRef, context: ?*anyopaque) CFComparisonResult;
pub const struct___CFTimeZone = opaque {};
pub const CFTimeZoneRef = ?*const struct___CFTimeZone;
pub const CFGregorianDate = extern struct {
    year: SInt32,
    month: SInt8,
    day: SInt8,
    hour: SInt8,
    minute: SInt8,
    second: f64,
};
pub const CFGregorianUnits = extern struct {
    years: SInt32,
    months: SInt32,
    days: SInt32,
    hours: SInt32,
    minutes: SInt32,
    seconds: f64,
};
pub const CFGregorianUnitFlags = CFOptionFlags;
pub const kCFGregorianUnitsYears: c_int = 1;
pub const kCFGregorianUnitsMonths: c_int = 2;
pub const kCFGregorianUnitsDays: c_int = 4;
pub const kCFGregorianUnitsHours: c_int = 8;
pub const kCFGregorianUnitsMinutes: c_int = 16;
pub const kCFGregorianUnitsSeconds: c_int = 32;
pub const kCFGregorianAllUnits: c_int = 16777215;
const enum_unnamed_17 = c_uint;
pub extern fn CFGregorianDateIsValid(gdate: CFGregorianDate, unitFlags: CFOptionFlags) Boolean;
pub extern fn CFGregorianDateGetAbsoluteTime(gdate: CFGregorianDate, tz: CFTimeZoneRef) CFAbsoluteTime;
pub extern fn CFAbsoluteTimeGetGregorianDate(at: CFAbsoluteTime, tz: CFTimeZoneRef) CFGregorianDate;
pub extern fn CFAbsoluteTimeAddGregorianUnits(at: CFAbsoluteTime, tz: CFTimeZoneRef, units: CFGregorianUnits) CFAbsoluteTime;
pub extern fn CFAbsoluteTimeGetDifferenceAsGregorianUnits(at1: CFAbsoluteTime, at2: CFAbsoluteTime, tz: CFTimeZoneRef, unitFlags: CFOptionFlags) CFGregorianUnits;
pub extern fn CFAbsoluteTimeGetDayOfWeek(at: CFAbsoluteTime, tz: CFTimeZoneRef) SInt32;
pub extern fn CFAbsoluteTimeGetDayOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) SInt32;
pub extern fn CFAbsoluteTimeGetWeekOfYear(at: CFAbsoluteTime, tz: CFTimeZoneRef) SInt32;
pub const struct___CFData = opaque {};
pub const CFDataRef = ?*const struct___CFData;
pub const CFMutableDataRef = ?*struct___CFData;
pub extern fn CFDataGetTypeID() CFTypeID;
pub extern fn CFDataCreate(allocator: CFAllocatorRef, bytes: [*c]const UInt8, length: CFIndex) CFDataRef;
pub extern fn CFDataCreateWithBytesNoCopy(allocator: CFAllocatorRef, bytes: [*c]const UInt8, length: CFIndex, bytesDeallocator: CFAllocatorRef) CFDataRef;
pub extern fn CFDataCreateCopy(allocator: CFAllocatorRef, theData: CFDataRef) CFDataRef;
pub extern fn CFDataCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex) CFMutableDataRef;
pub extern fn CFDataCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theData: CFDataRef) CFMutableDataRef;
pub extern fn CFDataGetLength(theData: CFDataRef) CFIndex;
pub extern fn CFDataGetBytePtr(theData: CFDataRef) [*c]const UInt8;
pub extern fn CFDataGetMutableBytePtr(theData: CFMutableDataRef) [*c]UInt8;
pub extern fn CFDataGetBytes(theData: CFDataRef, range: CFRange, buffer: [*c]UInt8) void;
pub extern fn CFDataSetLength(theData: CFMutableDataRef, length: CFIndex) void;
pub extern fn CFDataIncreaseLength(theData: CFMutableDataRef, extraLength: CFIndex) void;
pub extern fn CFDataAppendBytes(theData: CFMutableDataRef, bytes: [*c]const UInt8, length: CFIndex) void;
pub extern fn CFDataReplaceBytes(theData: CFMutableDataRef, range: CFRange, newBytes: [*c]const UInt8, newLength: CFIndex) void;
pub extern fn CFDataDeleteBytes(theData: CFMutableDataRef, range: CFRange) void;
pub const CFDataSearchFlags = CFOptionFlags;
pub const kCFDataSearchBackwards: c_int = 1;
pub const kCFDataSearchAnchored: c_int = 2;
const enum_unnamed_18 = c_uint;
pub extern fn CFDataFind(theData: CFDataRef, dataToFind: CFDataRef, searchRange: CFRange, compareOptions: CFDataSearchFlags) CFRange;
pub const struct___CFCharacterSet = opaque {};
pub const CFCharacterSetRef = ?*const struct___CFCharacterSet;
pub const CFMutableCharacterSetRef = ?*struct___CFCharacterSet;
pub const CFCharacterSetPredefinedSet = CFIndex;
pub const kCFCharacterSetControl: c_int = 1;
pub const kCFCharacterSetWhitespace: c_int = 2;
pub const kCFCharacterSetWhitespaceAndNewline: c_int = 3;
pub const kCFCharacterSetDecimalDigit: c_int = 4;
pub const kCFCharacterSetLetter: c_int = 5;
pub const kCFCharacterSetLowercaseLetter: c_int = 6;
pub const kCFCharacterSetUppercaseLetter: c_int = 7;
pub const kCFCharacterSetNonBase: c_int = 8;
pub const kCFCharacterSetDecomposable: c_int = 9;
pub const kCFCharacterSetAlphaNumeric: c_int = 10;
pub const kCFCharacterSetPunctuation: c_int = 11;
pub const kCFCharacterSetCapitalizedLetter: c_int = 13;
pub const kCFCharacterSetSymbol: c_int = 14;
pub const kCFCharacterSetNewline: c_int = 15;
pub const kCFCharacterSetIllegal: c_int = 12;
const enum_unnamed_19 = c_uint;
pub extern fn CFCharacterSetGetTypeID() CFTypeID;
pub extern fn CFCharacterSetGetPredefined(theSetIdentifier: CFCharacterSetPredefinedSet) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateWithCharactersInRange(alloc: CFAllocatorRef, theRange: CFRange) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateWithCharactersInString(alloc: CFAllocatorRef, theString: CFStringRef) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateWithBitmapRepresentation(alloc: CFAllocatorRef, theData: CFDataRef) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateInvertedSet(alloc: CFAllocatorRef, theSet: CFCharacterSetRef) CFCharacterSetRef;
pub extern fn CFCharacterSetIsSupersetOfSet(theSet: CFCharacterSetRef, theOtherset: CFCharacterSetRef) Boolean;
pub extern fn CFCharacterSetHasMemberInPlane(theSet: CFCharacterSetRef, thePlane: CFIndex) Boolean;
pub extern fn CFCharacterSetCreateMutable(alloc: CFAllocatorRef) CFMutableCharacterSetRef;
pub extern fn CFCharacterSetCreateCopy(alloc: CFAllocatorRef, theSet: CFCharacterSetRef) CFCharacterSetRef;
pub extern fn CFCharacterSetCreateMutableCopy(alloc: CFAllocatorRef, theSet: CFCharacterSetRef) CFMutableCharacterSetRef;
pub extern fn CFCharacterSetIsCharacterMember(theSet: CFCharacterSetRef, theChar: UniChar) Boolean;
pub extern fn CFCharacterSetIsLongCharacterMember(theSet: CFCharacterSetRef, theChar: UTF32Char) Boolean;
pub extern fn CFCharacterSetCreateBitmapRepresentation(alloc: CFAllocatorRef, theSet: CFCharacterSetRef) CFDataRef;
pub extern fn CFCharacterSetAddCharactersInRange(theSet: CFMutableCharacterSetRef, theRange: CFRange) void;
pub extern fn CFCharacterSetRemoveCharactersInRange(theSet: CFMutableCharacterSetRef, theRange: CFRange) void;
pub extern fn CFCharacterSetAddCharactersInString(theSet: CFMutableCharacterSetRef, theString: CFStringRef) void;
pub extern fn CFCharacterSetRemoveCharactersInString(theSet: CFMutableCharacterSetRef, theString: CFStringRef) void;
pub extern fn CFCharacterSetUnion(theSet: CFMutableCharacterSetRef, theOtherSet: CFCharacterSetRef) void;
pub extern fn CFCharacterSetIntersect(theSet: CFMutableCharacterSetRef, theOtherSet: CFCharacterSetRef) void;
pub extern fn CFCharacterSetInvert(theSet: CFMutableCharacterSetRef) void;
pub const CFStringEncoding = UInt32;
pub const CFStringBuiltInEncodings = CFStringEncoding;
pub const kCFStringEncodingMacRoman: c_int = 0;
pub const kCFStringEncodingWindowsLatin1: c_int = 1280;
pub const kCFStringEncodingISOLatin1: c_int = 513;
pub const kCFStringEncodingNextStepLatin: c_int = 2817;
pub const kCFStringEncodingASCII: c_int = 1536;
pub const kCFStringEncodingUnicode: c_int = 256;
pub const kCFStringEncodingUTF8: c_int = 134217984;
pub const kCFStringEncodingNonLossyASCII: c_int = 3071;
pub const kCFStringEncodingUTF16: c_int = 256;
pub const kCFStringEncodingUTF16BE: c_int = 268435712;
pub const kCFStringEncodingUTF16LE: c_int = 335544576;
pub const kCFStringEncodingUTF32: c_int = 201326848;
pub const kCFStringEncodingUTF32BE: c_int = 402653440;
pub const kCFStringEncodingUTF32LE: c_int = 469762304;
const enum_unnamed_20 = c_uint;
pub extern fn CFStringGetTypeID() CFTypeID;
pub extern fn CFStringCreateWithPascalString(alloc: CFAllocatorRef, pStr: ConstStr255Param, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringCreateWithCString(alloc: CFAllocatorRef, cStr: [*c]const u8, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringCreateWithBytes(alloc: CFAllocatorRef, bytes: [*c]const UInt8, numBytes: CFIndex, encoding: CFStringEncoding, isExternalRepresentation: Boolean) CFStringRef;
pub extern fn CFStringCreateWithCharacters(alloc: CFAllocatorRef, chars: [*c]const UniChar, numChars: CFIndex) CFStringRef;
pub extern fn CFStringCreateWithPascalStringNoCopy(alloc: CFAllocatorRef, pStr: ConstStr255Param, encoding: CFStringEncoding, contentsDeallocator: CFAllocatorRef) CFStringRef;
pub extern fn CFStringCreateWithCStringNoCopy(alloc: CFAllocatorRef, cStr: [*c]const u8, encoding: CFStringEncoding, contentsDeallocator: CFAllocatorRef) CFStringRef;
pub extern fn CFStringCreateWithBytesNoCopy(alloc: CFAllocatorRef, bytes: [*c]const UInt8, numBytes: CFIndex, encoding: CFStringEncoding, isExternalRepresentation: Boolean, contentsDeallocator: CFAllocatorRef) CFStringRef;
pub extern fn CFStringCreateWithCharactersNoCopy(alloc: CFAllocatorRef, chars: [*c]const UniChar, numChars: CFIndex, contentsDeallocator: CFAllocatorRef) CFStringRef;
pub extern fn CFStringCreateWithSubstring(alloc: CFAllocatorRef, str: CFStringRef, range: CFRange) CFStringRef;
pub extern fn CFStringCreateCopy(alloc: CFAllocatorRef, theString: CFStringRef) CFStringRef;
pub extern fn CFStringCreateWithFormat(alloc: CFAllocatorRef, formatOptions: CFDictionaryRef, format: CFStringRef, ...) CFStringRef;
pub extern fn CFStringCreateWithFormatAndArguments(alloc: CFAllocatorRef, formatOptions: CFDictionaryRef, format: CFStringRef, arguments: va_list) CFStringRef;
pub extern fn CFStringCreateMutable(alloc: CFAllocatorRef, maxLength: CFIndex) CFMutableStringRef;
pub extern fn CFStringCreateMutableCopy(alloc: CFAllocatorRef, maxLength: CFIndex, theString: CFStringRef) CFMutableStringRef;
pub extern fn CFStringCreateMutableWithExternalCharactersNoCopy(alloc: CFAllocatorRef, chars: [*c]UniChar, numChars: CFIndex, capacity: CFIndex, externalCharactersAllocator: CFAllocatorRef) CFMutableStringRef;
pub extern fn CFStringGetLength(theString: CFStringRef) CFIndex;
pub extern fn CFStringGetCharacterAtIndex(theString: CFStringRef, idx: CFIndex) UniChar;
pub extern fn CFStringGetCharacters(theString: CFStringRef, range: CFRange, buffer: [*c]UniChar) void;
pub extern fn CFStringGetPascalString(theString: CFStringRef, buffer: StringPtr, bufferSize: CFIndex, encoding: CFStringEncoding) Boolean;
pub extern fn CFStringGetCString(theString: CFStringRef, buffer: [*c]u8, bufferSize: CFIndex, encoding: CFStringEncoding) Boolean;
pub extern fn CFStringGetPascalStringPtr(theString: CFStringRef, encoding: CFStringEncoding) ConstStringPtr;
pub extern fn CFStringGetCStringPtr(theString: CFStringRef, encoding: CFStringEncoding) [*c]const u8;
pub extern fn CFStringGetCharactersPtr(theString: CFStringRef) [*c]const UniChar;
pub extern fn CFStringGetBytes(theString: CFStringRef, range: CFRange, encoding: CFStringEncoding, lossByte: UInt8, isExternalRepresentation: Boolean, buffer: [*c]UInt8, maxBufLen: CFIndex, usedBufLen: [*c]CFIndex) CFIndex;
pub extern fn CFStringCreateFromExternalRepresentation(alloc: CFAllocatorRef, data: CFDataRef, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringCreateExternalRepresentation(alloc: CFAllocatorRef, theString: CFStringRef, encoding: CFStringEncoding, lossByte: UInt8) CFDataRef;
pub extern fn CFStringGetSmallestEncoding(theString: CFStringRef) CFStringEncoding;
pub extern fn CFStringGetFastestEncoding(theString: CFStringRef) CFStringEncoding;
pub extern fn CFStringGetSystemEncoding() CFStringEncoding;
pub extern fn CFStringGetMaximumSizeForEncoding(length: CFIndex, encoding: CFStringEncoding) CFIndex;
pub extern fn CFStringGetFileSystemRepresentation(string: CFStringRef, buffer: [*c]u8, maxBufLen: CFIndex) Boolean;
pub extern fn CFStringGetMaximumSizeOfFileSystemRepresentation(string: CFStringRef) CFIndex;
pub extern fn CFStringCreateWithFileSystemRepresentation(alloc: CFAllocatorRef, buffer: [*c]const u8) CFStringRef;
pub const CFStringCompareFlags = CFOptionFlags;
pub const kCFCompareCaseInsensitive: c_int = 1;
pub const kCFCompareBackwards: c_int = 4;
pub const kCFCompareAnchored: c_int = 8;
pub const kCFCompareNonliteral: c_int = 16;
pub const kCFCompareLocalized: c_int = 32;
pub const kCFCompareNumerically: c_int = 64;
pub const kCFCompareDiacriticInsensitive: c_int = 128;
pub const kCFCompareWidthInsensitive: c_int = 256;
pub const kCFCompareForcedOrdering: c_int = 512;
const enum_unnamed_21 = c_uint;
pub extern fn CFStringCompareWithOptionsAndLocale(theString1: CFStringRef, theString2: CFStringRef, rangeToCompare: CFRange, compareOptions: CFStringCompareFlags, locale: CFLocaleRef) CFComparisonResult;
pub extern fn CFStringCompareWithOptions(theString1: CFStringRef, theString2: CFStringRef, rangeToCompare: CFRange, compareOptions: CFStringCompareFlags) CFComparisonResult;
pub extern fn CFStringCompare(theString1: CFStringRef, theString2: CFStringRef, compareOptions: CFStringCompareFlags) CFComparisonResult;
pub extern fn CFStringFindWithOptionsAndLocale(theString: CFStringRef, stringToFind: CFStringRef, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, locale: CFLocaleRef, result: [*c]CFRange) Boolean;
pub extern fn CFStringFindWithOptions(theString: CFStringRef, stringToFind: CFStringRef, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, result: [*c]CFRange) Boolean;
pub extern fn CFStringCreateArrayWithFindResults(alloc: CFAllocatorRef, theString: CFStringRef, stringToFind: CFStringRef, rangeToSearch: CFRange, compareOptions: CFStringCompareFlags) CFArrayRef;
pub extern fn CFStringFind(theString: CFStringRef, stringToFind: CFStringRef, compareOptions: CFStringCompareFlags) CFRange;
pub extern fn CFStringHasPrefix(theString: CFStringRef, prefix: CFStringRef) Boolean;
pub extern fn CFStringHasSuffix(theString: CFStringRef, suffix: CFStringRef) Boolean;
pub extern fn CFStringGetRangeOfComposedCharactersAtIndex(theString: CFStringRef, theIndex: CFIndex) CFRange;
pub extern fn CFStringFindCharacterFromSet(theString: CFStringRef, theSet: CFCharacterSetRef, rangeToSearch: CFRange, searchOptions: CFStringCompareFlags, result: [*c]CFRange) Boolean;
pub extern fn CFStringGetLineBounds(theString: CFStringRef, range: CFRange, lineBeginIndex: [*c]CFIndex, lineEndIndex: [*c]CFIndex, contentsEndIndex: [*c]CFIndex) void;
pub extern fn CFStringGetParagraphBounds(string: CFStringRef, range: CFRange, parBeginIndex: [*c]CFIndex, parEndIndex: [*c]CFIndex, contentsEndIndex: [*c]CFIndex) void;
pub extern fn CFStringGetHyphenationLocationBeforeIndex(string: CFStringRef, location: CFIndex, limitRange: CFRange, options: CFOptionFlags, locale: CFLocaleRef, character: [*c]UTF32Char) CFIndex;
pub extern fn CFStringIsHyphenationAvailableForLocale(locale: CFLocaleRef) Boolean;
pub extern fn CFStringCreateByCombiningStrings(alloc: CFAllocatorRef, theArray: CFArrayRef, separatorString: CFStringRef) CFStringRef;
pub extern fn CFStringCreateArrayBySeparatingStrings(alloc: CFAllocatorRef, theString: CFStringRef, separatorString: CFStringRef) CFArrayRef;
pub extern fn CFStringGetIntValue(str: CFStringRef) SInt32;
pub extern fn CFStringGetDoubleValue(str: CFStringRef) f64;
pub extern fn CFStringAppend(theString: CFMutableStringRef, appendedString: CFStringRef) void;
pub extern fn CFStringAppendCharacters(theString: CFMutableStringRef, chars: [*c]const UniChar, numChars: CFIndex) void;
pub extern fn CFStringAppendPascalString(theString: CFMutableStringRef, pStr: ConstStr255Param, encoding: CFStringEncoding) void;
pub extern fn CFStringAppendCString(theString: CFMutableStringRef, cStr: [*c]const u8, encoding: CFStringEncoding) void;
pub extern fn CFStringAppendFormat(theString: CFMutableStringRef, formatOptions: CFDictionaryRef, format: CFStringRef, ...) void;
pub extern fn CFStringAppendFormatAndArguments(theString: CFMutableStringRef, formatOptions: CFDictionaryRef, format: CFStringRef, arguments: va_list) void;
pub extern fn CFStringInsert(str: CFMutableStringRef, idx: CFIndex, insertedStr: CFStringRef) void;
pub extern fn CFStringDelete(theString: CFMutableStringRef, range: CFRange) void;
pub extern fn CFStringReplace(theString: CFMutableStringRef, range: CFRange, replacement: CFStringRef) void;
pub extern fn CFStringReplaceAll(theString: CFMutableStringRef, replacement: CFStringRef) void;
pub extern fn CFStringFindAndReplace(theString: CFMutableStringRef, stringToFind: CFStringRef, replacementString: CFStringRef, rangeToSearch: CFRange, compareOptions: CFStringCompareFlags) CFIndex;
pub extern fn CFStringSetExternalCharactersNoCopy(theString: CFMutableStringRef, chars: [*c]UniChar, length: CFIndex, capacity: CFIndex) void;
pub extern fn CFStringPad(theString: CFMutableStringRef, padString: CFStringRef, length: CFIndex, indexIntoPad: CFIndex) void;
pub extern fn CFStringTrim(theString: CFMutableStringRef, trimString: CFStringRef) void;
pub extern fn CFStringTrimWhitespace(theString: CFMutableStringRef) void;
pub extern fn CFStringLowercase(theString: CFMutableStringRef, locale: CFLocaleRef) void;
pub extern fn CFStringUppercase(theString: CFMutableStringRef, locale: CFLocaleRef) void;
pub extern fn CFStringCapitalize(theString: CFMutableStringRef, locale: CFLocaleRef) void;
pub const CFStringNormalizationForm = CFIndex;
pub const kCFStringNormalizationFormD: c_int = 0;
pub const kCFStringNormalizationFormKD: c_int = 1;
pub const kCFStringNormalizationFormC: c_int = 2;
pub const kCFStringNormalizationFormKC: c_int = 3;
const enum_unnamed_22 = c_uint;
pub extern fn CFStringNormalize(theString: CFMutableStringRef, theForm: CFStringNormalizationForm) void;
pub extern fn CFStringFold(theString: CFMutableStringRef, theFlags: CFStringCompareFlags, theLocale: CFLocaleRef) void;
pub extern fn CFStringTransform(string: CFMutableStringRef, range: [*c]CFRange, transform: CFStringRef, reverse: Boolean) Boolean;
pub extern const kCFStringTransformStripCombiningMarks: CFStringRef;
pub extern const kCFStringTransformToLatin: CFStringRef;
pub extern const kCFStringTransformFullwidthHalfwidth: CFStringRef;
pub extern const kCFStringTransformLatinKatakana: CFStringRef;
pub extern const kCFStringTransformLatinHiragana: CFStringRef;
pub extern const kCFStringTransformHiraganaKatakana: CFStringRef;
pub extern const kCFStringTransformMandarinLatin: CFStringRef;
pub extern const kCFStringTransformLatinHangul: CFStringRef;
pub extern const kCFStringTransformLatinArabic: CFStringRef;
pub extern const kCFStringTransformLatinHebrew: CFStringRef;
pub extern const kCFStringTransformLatinThai: CFStringRef;
pub extern const kCFStringTransformLatinCyrillic: CFStringRef;
pub extern const kCFStringTransformLatinGreek: CFStringRef;
pub extern const kCFStringTransformToXMLHex: CFStringRef;
pub extern const kCFStringTransformToUnicodeName: CFStringRef;
pub extern const kCFStringTransformStripDiacritics: CFStringRef;
pub extern fn CFStringIsEncodingAvailable(encoding: CFStringEncoding) Boolean;
pub extern fn CFStringGetListOfAvailableEncodings() [*c]const CFStringEncoding;
pub extern fn CFStringGetNameOfEncoding(encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringConvertEncodingToNSStringEncoding(encoding: CFStringEncoding) c_ulong;
pub extern fn CFStringConvertNSStringEncodingToEncoding(encoding: c_ulong) CFStringEncoding;
pub extern fn CFStringConvertEncodingToWindowsCodepage(encoding: CFStringEncoding) UInt32;
pub extern fn CFStringConvertWindowsCodepageToEncoding(codepage: UInt32) CFStringEncoding;
pub extern fn CFStringConvertIANACharSetNameToEncoding(theString: CFStringRef) CFStringEncoding;
pub extern fn CFStringConvertEncodingToIANACharSetName(encoding: CFStringEncoding) CFStringRef;
pub extern fn CFStringGetMostCompatibleMacStringEncoding(encoding: CFStringEncoding) CFStringEncoding;
pub const CFStringInlineBuffer = extern struct {
    buffer: [64]UniChar,
    theString: CFStringRef,
    directUniCharBuffer: [*c]const UniChar,
    directCStringBuffer: [*c]const u8,
    rangeToBuffer: CFRange,
    bufferedRangeStart: CFIndex,
    bufferedRangeEnd: CFIndex,
};
pub inline fn CFStringInitInlineBuffer(arg_str: CFStringRef, arg_buf: [*c]CFStringInlineBuffer, arg_range: CFRange) void {
    var str = arg_str;
    var buf = arg_buf;
    var range = arg_range;
    buf.*.theString = str;
    buf.*.rangeToBuffer = range;
    buf.*.directCStringBuffer = if ((blk: {
        const tmp = CFStringGetCharactersPtr(str);
        buf.*.directUniCharBuffer = tmp;
        break :blk tmp;
    }) != null) null else CFStringGetCStringPtr(str, @bitCast(CFStringEncoding, kCFStringEncodingASCII));
    buf.*.bufferedRangeStart = blk: {
        const tmp = @bitCast(CFIndex, @as(c_long, @as(c_int, 0)));
        buf.*.bufferedRangeEnd = tmp;
        break :blk tmp;
    };
}
pub inline fn CFStringGetCharacterFromInlineBuffer(arg_buf: [*c]CFStringInlineBuffer, arg_idx: CFIndex) UniChar {
    var buf = arg_buf;
    var idx = arg_idx;
    if ((idx < @bitCast(c_long, @as(c_long, @as(c_int, 0)))) or (idx >= buf.*.rangeToBuffer.length)) return 0;
    if (buf.*.directUniCharBuffer != null) return (blk: {
        const tmp = idx + buf.*.rangeToBuffer.location;
        if (tmp >= 0) break :blk buf.*.directUniCharBuffer + @intCast(usize, tmp) else break :blk buf.*.directUniCharBuffer - ~@bitCast(usize, @intCast(isize, tmp) +% -1);
    }).*;
    if (buf.*.directCStringBuffer != null) return @bitCast(UniChar, @as(c_ushort, (blk: {
        const tmp = idx + buf.*.rangeToBuffer.location;
        if (tmp >= 0) break :blk buf.*.directCStringBuffer + @intCast(usize, tmp) else break :blk buf.*.directCStringBuffer - ~@bitCast(usize, @intCast(isize, tmp) +% -1);
    }).*));
    if ((idx >= buf.*.bufferedRangeEnd) or (idx < buf.*.bufferedRangeStart)) {
        if ((blk: {
            const tmp = idx - @bitCast(c_long, @as(c_long, @as(c_int, 4)));
            buf.*.bufferedRangeStart = tmp;
            break :blk tmp;
        }) < @bitCast(c_long, @as(c_long, @as(c_int, 0)))) {
            buf.*.bufferedRangeStart = 0;
        }
        buf.*.bufferedRangeEnd = buf.*.bufferedRangeStart + @bitCast(c_long, @as(c_long, @as(c_int, 64)));
        if (buf.*.bufferedRangeEnd > buf.*.rangeToBuffer.length) {
            buf.*.bufferedRangeEnd = buf.*.rangeToBuffer.length;
        }
        CFStringGetCharacters(buf.*.theString, CFRangeMake(buf.*.rangeToBuffer.location + buf.*.bufferedRangeStart, buf.*.bufferedRangeEnd - buf.*.bufferedRangeStart), @ptrCast([*c]UniChar, @alignCast(@import("std").meta.alignment([*c]UniChar), &buf.*.buffer)));
    }
    return buf.*.buffer[@intCast(c_ulong, idx - buf.*.bufferedRangeStart)];
}
pub inline fn CFStringIsSurrogateHighCharacter(arg_character: UniChar) Boolean {
    var character = arg_character;
    return @bitCast(Boolean, @truncate(i8, if ((@bitCast(c_ulong, @as(c_ulong, character)) >= @as(c_ulong, 55296)) and (@bitCast(c_ulong, @as(c_ulong, character)) <= @as(c_ulong, 56319))) @as(c_int, 1) else @as(c_int, 0)));
}
pub inline fn CFStringIsSurrogateLowCharacter(arg_character: UniChar) Boolean {
    var character = arg_character;
    return @bitCast(Boolean, @truncate(i8, if ((@bitCast(c_ulong, @as(c_ulong, character)) >= @as(c_ulong, 56320)) and (@bitCast(c_ulong, @as(c_ulong, character)) <= @as(c_ulong, 57343))) @as(c_int, 1) else @as(c_int, 0)));
}
pub inline fn CFStringGetLongCharacterForSurrogatePair(arg_surrogateHigh: UniChar, arg_surrogateLow: UniChar) UTF32Char {
    var surrogateHigh = arg_surrogateHigh;
    var surrogateLow = arg_surrogateLow;
    return @bitCast(UTF32Char, @truncate(c_uint, (((@bitCast(c_ulong, @as(c_ulong, surrogateHigh)) -% @as(c_ulong, 55296)) << @intCast(@import("std").math.Log2Int(c_ulong), 10)) +% (@bitCast(c_ulong, @as(c_ulong, surrogateLow)) -% @as(c_ulong, 56320))) +% @as(c_ulong, 65536)));
}
pub inline fn CFStringGetSurrogatePairForLongCharacter(arg_character: UTF32Char, arg_surrogates: [*c]UniChar) Boolean {
    var character = arg_character;
    var surrogates = arg_surrogates;
    if ((@bitCast(c_ulong, @as(c_ulong, character)) > @as(c_ulong, 65535)) and (@bitCast(c_ulong, @as(c_ulong, character)) < @as(c_ulong, 1114112))) {
        character -%= @bitCast(c_uint, @as(c_int, 65536));
        if (@ptrCast([*c]UniChar, @alignCast(@import("std").meta.alignment([*c]UniChar), @intToPtr(?*anyopaque, @as(c_int, 0)))) != surrogates) {
            surrogates[@intCast(c_uint, @as(c_int, 0))] = @bitCast(UniChar, @truncate(c_ushort, @bitCast(c_ulong, @as(c_ulong, character >> @intCast(@import("std").math.Log2Int(UTF32Char), 10))) +% @as(c_ulong, 55296)));
            surrogates[@intCast(c_uint, @as(c_int, 1))] = @bitCast(UniChar, @truncate(c_ushort, @bitCast(c_ulong, @as(c_ulong, character & @bitCast(c_uint, @as(c_int, 1023)))) +% @as(c_ulong, 56320)));
        }
        return 1;
    } else {
        if (@ptrCast([*c]UniChar, @alignCast(@import("std").meta.alignment([*c]UniChar), @intToPtr(?*anyopaque, @as(c_int, 0)))) != surrogates) {
            surrogates.* = @bitCast(UniChar, @truncate(c_ushort, character));
        }
        return 0;
    }
    return 0;
}
pub extern fn CFShow(obj: CFTypeRef) void;
pub extern fn CFShowStr(str: CFStringRef) void;
pub extern fn __CFStringMakeConstantString(cStr: [*c]const u8) CFStringRef;
pub extern fn CFTimeZoneGetTypeID() CFTypeID;
pub extern fn CFTimeZoneCopySystem() CFTimeZoneRef;
pub extern fn CFTimeZoneResetSystem() void;
pub extern fn CFTimeZoneCopyDefault() CFTimeZoneRef;
pub extern fn CFTimeZoneSetDefault(tz: CFTimeZoneRef) void;
pub extern fn CFTimeZoneCopyKnownNames() CFArrayRef;
pub extern fn CFTimeZoneCopyAbbreviationDictionary() CFDictionaryRef;
pub extern fn CFTimeZoneSetAbbreviationDictionary(dict: CFDictionaryRef) void;
pub extern fn CFTimeZoneCreate(allocator: CFAllocatorRef, name: CFStringRef, data: CFDataRef) CFTimeZoneRef;
pub extern fn CFTimeZoneCreateWithTimeIntervalFromGMT(allocator: CFAllocatorRef, ti: CFTimeInterval) CFTimeZoneRef;
pub extern fn CFTimeZoneCreateWithName(allocator: CFAllocatorRef, name: CFStringRef, tryAbbrev: Boolean) CFTimeZoneRef;
pub extern fn CFTimeZoneGetName(tz: CFTimeZoneRef) CFStringRef;
pub extern fn CFTimeZoneGetData(tz: CFTimeZoneRef) CFDataRef;
pub extern fn CFTimeZoneGetSecondsFromGMT(tz: CFTimeZoneRef, at: CFAbsoluteTime) CFTimeInterval;
pub extern fn CFTimeZoneCopyAbbreviation(tz: CFTimeZoneRef, at: CFAbsoluteTime) CFStringRef;
pub extern fn CFTimeZoneIsDaylightSavingTime(tz: CFTimeZoneRef, at: CFAbsoluteTime) Boolean;
pub extern fn CFTimeZoneGetDaylightSavingTimeOffset(tz: CFTimeZoneRef, at: CFAbsoluteTime) CFTimeInterval;
pub extern fn CFTimeZoneGetNextDaylightSavingTimeTransition(tz: CFTimeZoneRef, at: CFAbsoluteTime) CFAbsoluteTime;
pub const CFTimeZoneNameStyle = CFIndex;
pub const kCFTimeZoneNameStyleStandard: c_int = 0;
pub const kCFTimeZoneNameStyleShortStandard: c_int = 1;
pub const kCFTimeZoneNameStyleDaylightSaving: c_int = 2;
pub const kCFTimeZoneNameStyleShortDaylightSaving: c_int = 3;
pub const kCFTimeZoneNameStyleGeneric: c_int = 4;
pub const kCFTimeZoneNameStyleShortGeneric: c_int = 5;
const enum_unnamed_23 = c_uint;
pub extern fn CFTimeZoneCopyLocalizedName(tz: CFTimeZoneRef, style: CFTimeZoneNameStyle, locale: CFLocaleRef) CFStringRef;
pub extern const kCFTimeZoneSystemTimeZoneDidChangeNotification: CFNotificationName;
pub const struct___CFCalendar = opaque {};
pub const CFCalendarRef = ?*struct___CFCalendar;
pub extern fn CFCalendarGetTypeID() CFTypeID;
pub extern fn CFCalendarCopyCurrent() CFCalendarRef;
pub extern fn CFCalendarCreateWithIdentifier(allocator: CFAllocatorRef, identifier: CFCalendarIdentifier) CFCalendarRef;
pub extern fn CFCalendarGetIdentifier(calendar: CFCalendarRef) CFCalendarIdentifier;
pub extern fn CFCalendarCopyLocale(calendar: CFCalendarRef) CFLocaleRef;
pub extern fn CFCalendarSetLocale(calendar: CFCalendarRef, locale: CFLocaleRef) void;
pub extern fn CFCalendarCopyTimeZone(calendar: CFCalendarRef) CFTimeZoneRef;
pub extern fn CFCalendarSetTimeZone(calendar: CFCalendarRef, tz: CFTimeZoneRef) void;
pub extern fn CFCalendarGetFirstWeekday(calendar: CFCalendarRef) CFIndex;
pub extern fn CFCalendarSetFirstWeekday(calendar: CFCalendarRef, wkdy: CFIndex) void;
pub extern fn CFCalendarGetMinimumDaysInFirstWeek(calendar: CFCalendarRef) CFIndex;
pub extern fn CFCalendarSetMinimumDaysInFirstWeek(calendar: CFCalendarRef, mwd: CFIndex) void;
pub const CFCalendarUnit = CFOptionFlags;
pub const kCFCalendarUnitEra: c_int = 2;
pub const kCFCalendarUnitYear: c_int = 4;
pub const kCFCalendarUnitMonth: c_int = 8;
pub const kCFCalendarUnitDay: c_int = 16;
pub const kCFCalendarUnitHour: c_int = 32;
pub const kCFCalendarUnitMinute: c_int = 64;
pub const kCFCalendarUnitSecond: c_int = 128;
pub const kCFCalendarUnitWeek: c_int = 256;
pub const kCFCalendarUnitWeekday: c_int = 512;
pub const kCFCalendarUnitWeekdayOrdinal: c_int = 1024;
pub const kCFCalendarUnitQuarter: c_int = 2048;
pub const kCFCalendarUnitWeekOfMonth: c_int = 4096;
pub const kCFCalendarUnitWeekOfYear: c_int = 8192;
pub const kCFCalendarUnitYearForWeekOfYear: c_int = 16384;
const enum_unnamed_24 = c_uint;
pub extern fn CFCalendarGetMinimumRangeOfUnit(calendar: CFCalendarRef, unit: CFCalendarUnit) CFRange;
pub extern fn CFCalendarGetMaximumRangeOfUnit(calendar: CFCalendarRef, unit: CFCalendarUnit) CFRange;
pub extern fn CFCalendarGetRangeOfUnit(calendar: CFCalendarRef, smallerUnit: CFCalendarUnit, biggerUnit: CFCalendarUnit, at: CFAbsoluteTime) CFRange;
pub extern fn CFCalendarGetOrdinalityOfUnit(calendar: CFCalendarRef, smallerUnit: CFCalendarUnit, biggerUnit: CFCalendarUnit, at: CFAbsoluteTime) CFIndex;
pub extern fn CFCalendarGetTimeRangeOfUnit(calendar: CFCalendarRef, unit: CFCalendarUnit, at: CFAbsoluteTime, startp: [*c]CFAbsoluteTime, tip: [*c]CFTimeInterval) Boolean;
pub extern fn CFCalendarComposeAbsoluteTime(calendar: CFCalendarRef, at: [*c]CFAbsoluteTime, componentDesc: [*c]const u8, ...) Boolean;
pub extern fn CFCalendarDecomposeAbsoluteTime(calendar: CFCalendarRef, at: CFAbsoluteTime, componentDesc: [*c]const u8, ...) Boolean;
pub const kCFCalendarComponentsWrap: c_int = 1;
const enum_unnamed_25 = c_uint;
pub extern fn CFCalendarAddComponents(calendar: CFCalendarRef, at: [*c]CFAbsoluteTime, options: CFOptionFlags, componentDesc: [*c]const u8, ...) Boolean;
pub extern fn CFCalendarGetComponentDifference(calendar: CFCalendarRef, startingAT: CFAbsoluteTime, resultAT: CFAbsoluteTime, options: CFOptionFlags, componentDesc: [*c]const u8, ...) Boolean;
pub const CFDateFormatterKey = CFStringRef;
pub const struct___CFDateFormatter = opaque {};
pub const CFDateFormatterRef = ?*struct___CFDateFormatter;
pub extern fn CFDateFormatterCreateDateFormatFromTemplate(allocator: CFAllocatorRef, tmplate: CFStringRef, options: CFOptionFlags, locale: CFLocaleRef) CFStringRef;
pub extern fn CFDateFormatterGetTypeID() CFTypeID;
pub const CFDateFormatterStyle = CFIndex;
pub const kCFDateFormatterNoStyle: c_int = 0;
pub const kCFDateFormatterShortStyle: c_int = 1;
pub const kCFDateFormatterMediumStyle: c_int = 2;
pub const kCFDateFormatterLongStyle: c_int = 3;
pub const kCFDateFormatterFullStyle: c_int = 4;
const enum_unnamed_26 = c_uint;
pub const CFISO8601DateFormatOptions = CFOptionFlags;
pub const kCFISO8601DateFormatWithYear: c_int = 1;
pub const kCFISO8601DateFormatWithMonth: c_int = 2;
pub const kCFISO8601DateFormatWithWeekOfYear: c_int = 4;
pub const kCFISO8601DateFormatWithDay: c_int = 16;
pub const kCFISO8601DateFormatWithTime: c_int = 32;
pub const kCFISO8601DateFormatWithTimeZone: c_int = 64;
pub const kCFISO8601DateFormatWithSpaceBetweenDateAndTime: c_int = 128;
pub const kCFISO8601DateFormatWithDashSeparatorInDate: c_int = 256;
pub const kCFISO8601DateFormatWithColonSeparatorInTime: c_int = 512;
pub const kCFISO8601DateFormatWithColonSeparatorInTimeZone: c_int = 1024;
pub const kCFISO8601DateFormatWithFractionalSeconds: c_int = 2048;
pub const kCFISO8601DateFormatWithFullDate: c_int = 275;
pub const kCFISO8601DateFormatWithFullTime: c_int = 1632;
pub const kCFISO8601DateFormatWithInternetDateTime: c_int = 1907;
const enum_unnamed_27 = c_uint;
pub extern fn CFDateFormatterCreateISO8601Formatter(allocator: CFAllocatorRef, formatOptions: CFISO8601DateFormatOptions) CFDateFormatterRef;
pub extern fn CFDateFormatterCreate(allocator: CFAllocatorRef, locale: CFLocaleRef, dateStyle: CFDateFormatterStyle, timeStyle: CFDateFormatterStyle) CFDateFormatterRef;
pub extern fn CFDateFormatterGetLocale(formatter: CFDateFormatterRef) CFLocaleRef;
pub extern fn CFDateFormatterGetDateStyle(formatter: CFDateFormatterRef) CFDateFormatterStyle;
pub extern fn CFDateFormatterGetTimeStyle(formatter: CFDateFormatterRef) CFDateFormatterStyle;
pub extern fn CFDateFormatterGetFormat(formatter: CFDateFormatterRef) CFStringRef;
pub extern fn CFDateFormatterSetFormat(formatter: CFDateFormatterRef, formatString: CFStringRef) void;
pub extern fn CFDateFormatterCreateStringWithDate(allocator: CFAllocatorRef, formatter: CFDateFormatterRef, date: CFDateRef) CFStringRef;
pub extern fn CFDateFormatterCreateStringWithAbsoluteTime(allocator: CFAllocatorRef, formatter: CFDateFormatterRef, at: CFAbsoluteTime) CFStringRef;
pub extern fn CFDateFormatterCreateDateFromString(allocator: CFAllocatorRef, formatter: CFDateFormatterRef, string: CFStringRef, rangep: [*c]CFRange) CFDateRef;
pub extern fn CFDateFormatterGetAbsoluteTimeFromString(formatter: CFDateFormatterRef, string: CFStringRef, rangep: [*c]CFRange, atp: [*c]CFAbsoluteTime) Boolean;
pub extern fn CFDateFormatterSetProperty(formatter: CFDateFormatterRef, key: CFStringRef, value: CFTypeRef) void;
pub extern fn CFDateFormatterCopyProperty(formatter: CFDateFormatterRef, key: CFDateFormatterKey) CFTypeRef;
pub extern const kCFDateFormatterIsLenient: CFDateFormatterKey;
pub extern const kCFDateFormatterTimeZone: CFDateFormatterKey;
pub extern const kCFDateFormatterCalendarName: CFDateFormatterKey;
pub extern const kCFDateFormatterDefaultFormat: CFDateFormatterKey;
pub extern const kCFDateFormatterTwoDigitStartDate: CFDateFormatterKey;
pub extern const kCFDateFormatterDefaultDate: CFDateFormatterKey;
pub extern const kCFDateFormatterCalendar: CFDateFormatterKey;
pub extern const kCFDateFormatterEraSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterAMSymbol: CFDateFormatterKey;
pub extern const kCFDateFormatterPMSymbol: CFDateFormatterKey;
pub extern const kCFDateFormatterLongEraSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterVeryShortMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterStandaloneMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortStandaloneMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterVeryShortStandaloneMonthSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterVeryShortWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterStandaloneWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortStandaloneWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterVeryShortStandaloneWeekdaySymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterQuarterSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortQuarterSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterStandaloneQuarterSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterShortStandaloneQuarterSymbols: CFDateFormatterKey;
pub extern const kCFDateFormatterGregorianStartDate: CFDateFormatterKey;
pub extern const kCFDateFormatterDoesRelativeDateFormattingKey: CFDateFormatterKey;
pub const CFErrorDomain = CFStringRef;
pub const struct___CFError = opaque {};
pub const CFErrorRef = ?*struct___CFError;
pub extern fn CFErrorGetTypeID() CFTypeID;
pub extern const kCFErrorDomainPOSIX: CFErrorDomain;
pub extern const kCFErrorDomainOSStatus: CFErrorDomain;
pub extern const kCFErrorDomainMach: CFErrorDomain;
pub extern const kCFErrorDomainCocoa: CFErrorDomain;
pub extern const kCFErrorLocalizedDescriptionKey: CFStringRef;
pub extern const kCFErrorLocalizedFailureKey: CFStringRef;
pub extern const kCFErrorLocalizedFailureReasonKey: CFStringRef;
pub extern const kCFErrorLocalizedRecoverySuggestionKey: CFStringRef;
pub extern const kCFErrorDescriptionKey: CFStringRef;
pub extern const kCFErrorUnderlyingErrorKey: CFStringRef;
pub extern const kCFErrorURLKey: CFStringRef;
pub extern const kCFErrorFilePathKey: CFStringRef;
pub extern fn CFErrorCreate(allocator: CFAllocatorRef, domain: CFErrorDomain, code: CFIndex, userInfo: CFDictionaryRef) CFErrorRef;
pub extern fn CFErrorCreateWithUserInfoKeysAndValues(allocator: CFAllocatorRef, domain: CFErrorDomain, code: CFIndex, userInfoKeys: [*c]const ?*const anyopaque, userInfoValues: [*c]const ?*const anyopaque, numUserInfoValues: CFIndex) CFErrorRef;
pub extern fn CFErrorGetDomain(err: CFErrorRef) CFErrorDomain;
pub extern fn CFErrorGetCode(err: CFErrorRef) CFIndex;
pub extern fn CFErrorCopyUserInfo(err: CFErrorRef) CFDictionaryRef;
pub extern fn CFErrorCopyDescription(err: CFErrorRef) CFStringRef;
pub extern fn CFErrorCopyFailureReason(err: CFErrorRef) CFStringRef;
pub extern fn CFErrorCopyRecoverySuggestion(err: CFErrorRef) CFStringRef;
pub const struct___CFBoolean = opaque {};
pub const CFBooleanRef = ?*const struct___CFBoolean;
pub extern const kCFBooleanTrue: CFBooleanRef;
pub extern const kCFBooleanFalse: CFBooleanRef;
pub extern fn CFBooleanGetTypeID() CFTypeID;
pub extern fn CFBooleanGetValue(boolean: CFBooleanRef) Boolean;
pub const CFNumberType = CFIndex;
pub const kCFNumberSInt8Type: c_int = 1;
pub const kCFNumberSInt16Type: c_int = 2;
pub const kCFNumberSInt32Type: c_int = 3;
pub const kCFNumberSInt64Type: c_int = 4;
pub const kCFNumberFloat32Type: c_int = 5;
pub const kCFNumberFloat64Type: c_int = 6;
pub const kCFNumberCharType: c_int = 7;
pub const kCFNumberShortType: c_int = 8;
pub const kCFNumberIntType: c_int = 9;
pub const kCFNumberLongType: c_int = 10;
pub const kCFNumberLongLongType: c_int = 11;
pub const kCFNumberFloatType: c_int = 12;
pub const kCFNumberDoubleType: c_int = 13;
pub const kCFNumberCFIndexType: c_int = 14;
pub const kCFNumberNSIntegerType: c_int = 15;
pub const kCFNumberCGFloatType: c_int = 16;
pub const kCFNumberMaxType: c_int = 16;
const enum_unnamed_28 = c_uint;
pub const struct___CFNumber = opaque {};
pub const CFNumberRef = ?*const struct___CFNumber;
pub extern const kCFNumberPositiveInfinity: CFNumberRef;
pub extern const kCFNumberNegativeInfinity: CFNumberRef;
pub extern const kCFNumberNaN: CFNumberRef;
pub extern fn CFNumberGetTypeID() CFTypeID;
pub extern fn CFNumberCreate(allocator: CFAllocatorRef, theType: CFNumberType, valuePtr: ?*const anyopaque) CFNumberRef;
pub extern fn CFNumberGetType(number: CFNumberRef) CFNumberType;
pub extern fn CFNumberGetByteSize(number: CFNumberRef) CFIndex;
pub extern fn CFNumberIsFloatType(number: CFNumberRef) Boolean;
pub extern fn CFNumberGetValue(number: CFNumberRef, theType: CFNumberType, valuePtr: ?*anyopaque) Boolean;
pub extern fn CFNumberCompare(number: CFNumberRef, otherNumber: CFNumberRef, context: ?*anyopaque) CFComparisonResult;
pub const CFNumberFormatterKey = CFStringRef;
pub const struct___CFNumberFormatter = opaque {};
pub const CFNumberFormatterRef = ?*struct___CFNumberFormatter;
pub extern fn CFNumberFormatterGetTypeID() CFTypeID;
pub const CFNumberFormatterStyle = CFIndex;
pub const kCFNumberFormatterNoStyle: c_int = 0;
pub const kCFNumberFormatterDecimalStyle: c_int = 1;
pub const kCFNumberFormatterCurrencyStyle: c_int = 2;
pub const kCFNumberFormatterPercentStyle: c_int = 3;
pub const kCFNumberFormatterScientificStyle: c_int = 4;
pub const kCFNumberFormatterSpellOutStyle: c_int = 5;
pub const kCFNumberFormatterOrdinalStyle: c_int = 6;
pub const kCFNumberFormatterCurrencyISOCodeStyle: c_int = 8;
pub const kCFNumberFormatterCurrencyPluralStyle: c_int = 9;
pub const kCFNumberFormatterCurrencyAccountingStyle: c_int = 10;
const enum_unnamed_29 = c_uint;
pub extern fn CFNumberFormatterCreate(allocator: CFAllocatorRef, locale: CFLocaleRef, style: CFNumberFormatterStyle) CFNumberFormatterRef;
pub extern fn CFNumberFormatterGetLocale(formatter: CFNumberFormatterRef) CFLocaleRef;
pub extern fn CFNumberFormatterGetStyle(formatter: CFNumberFormatterRef) CFNumberFormatterStyle;
pub extern fn CFNumberFormatterGetFormat(formatter: CFNumberFormatterRef) CFStringRef;
pub extern fn CFNumberFormatterSetFormat(formatter: CFNumberFormatterRef, formatString: CFStringRef) void;
pub extern fn CFNumberFormatterCreateStringWithNumber(allocator: CFAllocatorRef, formatter: CFNumberFormatterRef, number: CFNumberRef) CFStringRef;
pub extern fn CFNumberFormatterCreateStringWithValue(allocator: CFAllocatorRef, formatter: CFNumberFormatterRef, numberType: CFNumberType, valuePtr: ?*const anyopaque) CFStringRef;
pub const CFNumberFormatterOptionFlags = CFOptionFlags;
pub const kCFNumberFormatterParseIntegersOnly: c_int = 1;
const enum_unnamed_30 = c_uint;
pub extern fn CFNumberFormatterCreateNumberFromString(allocator: CFAllocatorRef, formatter: CFNumberFormatterRef, string: CFStringRef, rangep: [*c]CFRange, options: CFOptionFlags) CFNumberRef;
pub extern fn CFNumberFormatterGetValueFromString(formatter: CFNumberFormatterRef, string: CFStringRef, rangep: [*c]CFRange, numberType: CFNumberType, valuePtr: ?*anyopaque) Boolean;
pub extern fn CFNumberFormatterSetProperty(formatter: CFNumberFormatterRef, key: CFNumberFormatterKey, value: CFTypeRef) void;
pub extern fn CFNumberFormatterCopyProperty(formatter: CFNumberFormatterRef, key: CFNumberFormatterKey) CFTypeRef;
pub extern const kCFNumberFormatterCurrencyCode: CFNumberFormatterKey;
pub extern const kCFNumberFormatterDecimalSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterCurrencyDecimalSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterAlwaysShowDecimalSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterGroupingSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterUseGroupingSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPercentSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterZeroSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterNaNSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterInfinitySymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinusSign: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPlusSign: CFNumberFormatterKey;
pub extern const kCFNumberFormatterCurrencySymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterExponentSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinIntegerDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMaxIntegerDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinFractionDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMaxFractionDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterGroupingSize: CFNumberFormatterKey;
pub extern const kCFNumberFormatterSecondaryGroupingSize: CFNumberFormatterKey;
pub extern const kCFNumberFormatterRoundingMode: CFNumberFormatterKey;
pub extern const kCFNumberFormatterRoundingIncrement: CFNumberFormatterKey;
pub extern const kCFNumberFormatterFormatWidth: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPaddingPosition: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPaddingCharacter: CFNumberFormatterKey;
pub extern const kCFNumberFormatterDefaultFormat: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMultiplier: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPositivePrefix: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPositiveSuffix: CFNumberFormatterKey;
pub extern const kCFNumberFormatterNegativePrefix: CFNumberFormatterKey;
pub extern const kCFNumberFormatterNegativeSuffix: CFNumberFormatterKey;
pub extern const kCFNumberFormatterPerMillSymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterInternationalCurrencySymbol: CFNumberFormatterKey;
pub extern const kCFNumberFormatterCurrencyGroupingSeparator: CFNumberFormatterKey;
pub extern const kCFNumberFormatterIsLenient: CFNumberFormatterKey;
pub extern const kCFNumberFormatterUseSignificantDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMinSignificantDigits: CFNumberFormatterKey;
pub extern const kCFNumberFormatterMaxSignificantDigits: CFNumberFormatterKey;
pub const CFNumberFormatterRoundingMode = CFIndex;
pub const kCFNumberFormatterRoundCeiling: c_int = 0;
pub const kCFNumberFormatterRoundFloor: c_int = 1;
pub const kCFNumberFormatterRoundDown: c_int = 2;
pub const kCFNumberFormatterRoundUp: c_int = 3;
pub const kCFNumberFormatterRoundHalfEven: c_int = 4;
pub const kCFNumberFormatterRoundHalfDown: c_int = 5;
pub const kCFNumberFormatterRoundHalfUp: c_int = 6;
const enum_unnamed_31 = c_uint;
pub const CFNumberFormatterPadPosition = CFIndex;
pub const kCFNumberFormatterPadBeforePrefix: c_int = 0;
pub const kCFNumberFormatterPadAfterPrefix: c_int = 1;
pub const kCFNumberFormatterPadBeforeSuffix: c_int = 2;
pub const kCFNumberFormatterPadAfterSuffix: c_int = 3;
const enum_unnamed_32 = c_uint;
pub extern fn CFNumberFormatterGetDecimalInfoForCurrencyCode(currencyCode: CFStringRef, defaultFractionDigits: [*c]i32, roundingIncrement: [*c]f64) Boolean;
pub extern const kCFPreferencesAnyApplication: CFStringRef;
pub extern const kCFPreferencesCurrentApplication: CFStringRef;
pub extern const kCFPreferencesAnyHost: CFStringRef;
pub extern const kCFPreferencesCurrentHost: CFStringRef;
pub extern const kCFPreferencesAnyUser: CFStringRef;
pub extern const kCFPreferencesCurrentUser: CFStringRef;
pub extern fn CFPreferencesCopyAppValue(key: CFStringRef, applicationID: CFStringRef) CFPropertyListRef;
pub extern fn CFPreferencesGetAppBooleanValue(key: CFStringRef, applicationID: CFStringRef, keyExistsAndHasValidFormat: [*c]Boolean) Boolean;
pub extern fn CFPreferencesGetAppIntegerValue(key: CFStringRef, applicationID: CFStringRef, keyExistsAndHasValidFormat: [*c]Boolean) CFIndex;
pub extern fn CFPreferencesSetAppValue(key: CFStringRef, value: CFPropertyListRef, applicationID: CFStringRef) void;
pub extern fn CFPreferencesAddSuitePreferencesToApp(applicationID: CFStringRef, suiteID: CFStringRef) void;
pub extern fn CFPreferencesRemoveSuitePreferencesFromApp(applicationID: CFStringRef, suiteID: CFStringRef) void;
pub extern fn CFPreferencesAppSynchronize(applicationID: CFStringRef) Boolean;
pub extern fn CFPreferencesCopyValue(key: CFStringRef, applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) CFPropertyListRef;
pub extern fn CFPreferencesCopyMultiple(keysToFetch: CFArrayRef, applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) CFDictionaryRef;
pub extern fn CFPreferencesSetValue(key: CFStringRef, value: CFPropertyListRef, applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) void;
pub extern fn CFPreferencesSetMultiple(keysToSet: CFDictionaryRef, keysToRemove: CFArrayRef, applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) void;
pub extern fn CFPreferencesSynchronize(applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) Boolean;
pub extern fn CFPreferencesCopyApplicationList(userName: CFStringRef, hostName: CFStringRef) CFArrayRef;
pub extern fn CFPreferencesCopyKeyList(applicationID: CFStringRef, userName: CFStringRef, hostName: CFStringRef) CFArrayRef;
pub extern fn CFPreferencesAppValueIsForced(key: CFStringRef, applicationID: CFStringRef) Boolean;
pub const CFURLPathStyle = CFIndex;
pub const kCFURLPOSIXPathStyle: c_int = 0;
pub const kCFURLHFSPathStyle: c_int = 1;
pub const kCFURLWindowsPathStyle: c_int = 2;
const enum_unnamed_33 = c_uint;
pub const struct___CFURL = opaque {};
pub const CFURLRef = ?*const struct___CFURL;
pub extern fn CFURLGetTypeID() CFTypeID;
pub extern fn CFURLCreateWithBytes(allocator: CFAllocatorRef, URLBytes: [*c]const UInt8, length: CFIndex, encoding: CFStringEncoding, baseURL: CFURLRef) CFURLRef;
pub extern fn CFURLCreateData(allocator: CFAllocatorRef, url: CFURLRef, encoding: CFStringEncoding, escapeWhitespace: Boolean) CFDataRef;
pub extern fn CFURLCreateWithString(allocator: CFAllocatorRef, URLString: CFStringRef, baseURL: CFURLRef) CFURLRef;
pub extern fn CFURLCreateAbsoluteURLWithBytes(alloc: CFAllocatorRef, relativeURLBytes: [*c]const UInt8, length: CFIndex, encoding: CFStringEncoding, baseURL: CFURLRef, useCompatibilityMode: Boolean) CFURLRef;
pub extern fn CFURLCreateWithFileSystemPath(allocator: CFAllocatorRef, filePath: CFStringRef, pathStyle: CFURLPathStyle, isDirectory: Boolean) CFURLRef;
pub extern fn CFURLCreateFromFileSystemRepresentation(allocator: CFAllocatorRef, buffer: [*c]const UInt8, bufLen: CFIndex, isDirectory: Boolean) CFURLRef;
pub extern fn CFURLCreateWithFileSystemPathRelativeToBase(allocator: CFAllocatorRef, filePath: CFStringRef, pathStyle: CFURLPathStyle, isDirectory: Boolean, baseURL: CFURLRef) CFURLRef;
pub extern fn CFURLCreateFromFileSystemRepresentationRelativeToBase(allocator: CFAllocatorRef, buffer: [*c]const UInt8, bufLen: CFIndex, isDirectory: Boolean, baseURL: CFURLRef) CFURLRef;
pub extern fn CFURLGetFileSystemRepresentation(url: CFURLRef, resolveAgainstBase: Boolean, buffer: [*c]UInt8, maxBufLen: CFIndex) Boolean;
pub extern fn CFURLCopyAbsoluteURL(relativeURL: CFURLRef) CFURLRef;
pub extern fn CFURLGetString(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLGetBaseURL(anURL: CFURLRef) CFURLRef;
pub extern fn CFURLCanBeDecomposed(anURL: CFURLRef) Boolean;
pub extern fn CFURLCopyScheme(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyNetLocation(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyPath(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyStrictPath(anURL: CFURLRef, isAbsolute: [*c]Boolean) CFStringRef;
pub extern fn CFURLCopyFileSystemPath(anURL: CFURLRef, pathStyle: CFURLPathStyle) CFStringRef;
pub extern fn CFURLHasDirectoryPath(anURL: CFURLRef) Boolean;
pub extern fn CFURLCopyResourceSpecifier(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyHostName(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLGetPortNumber(anURL: CFURLRef) SInt32;
pub extern fn CFURLCopyUserName(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyPassword(anURL: CFURLRef) CFStringRef;
pub extern fn CFURLCopyParameterString(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef) CFStringRef;
pub extern fn CFURLCopyQueryString(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef) CFStringRef;
pub extern fn CFURLCopyFragment(anURL: CFURLRef, charactersToLeaveEscaped: CFStringRef) CFStringRef;
pub extern fn CFURLCopyLastPathComponent(url: CFURLRef) CFStringRef;
pub extern fn CFURLCopyPathExtension(url: CFURLRef) CFStringRef;
pub extern fn CFURLCreateCopyAppendingPathComponent(allocator: CFAllocatorRef, url: CFURLRef, pathComponent: CFStringRef, isDirectory: Boolean) CFURLRef;
pub extern fn CFURLCreateCopyDeletingLastPathComponent(allocator: CFAllocatorRef, url: CFURLRef) CFURLRef;
pub extern fn CFURLCreateCopyAppendingPathExtension(allocator: CFAllocatorRef, url: CFURLRef, extension: CFStringRef) CFURLRef;
pub extern fn CFURLCreateCopyDeletingPathExtension(allocator: CFAllocatorRef, url: CFURLRef) CFURLRef;
pub extern fn CFURLGetBytes(url: CFURLRef, buffer: [*c]UInt8, bufferLength: CFIndex) CFIndex;
pub const CFURLComponentType = CFIndex;
pub const kCFURLComponentScheme: c_int = 1;
pub const kCFURLComponentNetLocation: c_int = 2;
pub const kCFURLComponentPath: c_int = 3;
pub const kCFURLComponentResourceSpecifier: c_int = 4;
pub const kCFURLComponentUser: c_int = 5;
pub const kCFURLComponentPassword: c_int = 6;
pub const kCFURLComponentUserInfo: c_int = 7;
pub const kCFURLComponentHost: c_int = 8;
pub const kCFURLComponentPort: c_int = 9;
pub const kCFURLComponentParameterString: c_int = 10;
pub const kCFURLComponentQuery: c_int = 11;
pub const kCFURLComponentFragment: c_int = 12;
const enum_unnamed_34 = c_uint;
pub extern fn CFURLGetByteRangeForComponent(url: CFURLRef, component: CFURLComponentType, rangeIncludingSeparators: [*c]CFRange) CFRange;
pub extern fn CFURLCreateStringByReplacingPercentEscapes(allocator: CFAllocatorRef, originalString: CFStringRef, charactersToLeaveEscaped: CFStringRef) CFStringRef;
pub extern fn CFURLCreateStringByReplacingPercentEscapesUsingEncoding(allocator: CFAllocatorRef, origString: CFStringRef, charsToLeaveEscaped: CFStringRef, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFURLCreateStringByAddingPercentEscapes(allocator: CFAllocatorRef, originalString: CFStringRef, charactersToLeaveUnescaped: CFStringRef, legalURLCharactersToBeEscaped: CFStringRef, encoding: CFStringEncoding) CFStringRef;
pub extern fn CFURLIsFileReferenceURL(url: CFURLRef) Boolean;
pub extern fn CFURLCreateFileReferenceURL(allocator: CFAllocatorRef, url: CFURLRef, @"error": [*c]CFErrorRef) CFURLRef;
pub extern fn CFURLCreateFilePathURL(allocator: CFAllocatorRef, url: CFURLRef, @"error": [*c]CFErrorRef) CFURLRef;
pub const struct_FSRef = extern struct {
    hidden: [80]UInt8,
};
pub extern fn CFURLCreateFromFSRef(allocator: CFAllocatorRef, fsRef: [*c]const struct_FSRef) CFURLRef;
pub extern fn CFURLGetFSRef(url: CFURLRef, fsRef: [*c]struct_FSRef) Boolean;
pub extern fn CFURLCopyResourcePropertyForKey(url: CFURLRef, key: CFStringRef, propertyValueTypeRefPtr: ?*anyopaque, @"error": [*c]CFErrorRef) Boolean;
pub extern fn CFURLCopyResourcePropertiesForKeys(url: CFURLRef, keys: CFArrayRef, @"error": [*c]CFErrorRef) CFDictionaryRef;
pub extern fn CFURLSetResourcePropertyForKey(url: CFURLRef, key: CFStringRef, propertyValue: CFTypeRef, @"error": [*c]CFErrorRef) Boolean;
pub extern fn CFURLSetResourcePropertiesForKeys(url: CFURLRef, keyedPropertyValues: CFDictionaryRef, @"error": [*c]CFErrorRef) Boolean;
pub extern const kCFURLKeysOfUnsetValuesKey: CFStringRef;
pub extern fn CFURLClearResourcePropertyCacheForKey(url: CFURLRef, key: CFStringRef) void;
pub extern fn CFURLClearResourcePropertyCache(url: CFURLRef) void;
pub extern fn CFURLSetTemporaryResourcePropertyForKey(url: CFURLRef, key: CFStringRef, propertyValue: CFTypeRef) void;
pub extern fn CFURLResourceIsReachable(url: CFURLRef, @"error": [*c]CFErrorRef) Boolean;
pub extern const kCFURLNameKey: CFStringRef;
pub extern const kCFURLLocalizedNameKey: CFStringRef;
pub extern const kCFURLIsRegularFileKey: CFStringRef;
pub extern const kCFURLIsDirectoryKey: CFStringRef;
pub extern const kCFURLIsSymbolicLinkKey: CFStringRef;
pub extern const kCFURLIsVolumeKey: CFStringRef;
pub extern const kCFURLIsPackageKey: CFStringRef;
pub extern const kCFURLIsApplicationKey: CFStringRef;
pub extern const kCFURLApplicationIsScriptableKey: CFStringRef;
pub extern const kCFURLIsSystemImmutableKey: CFStringRef;
pub extern const kCFURLIsUserImmutableKey: CFStringRef;
pub extern const kCFURLIsHiddenKey: CFStringRef;
pub extern const kCFURLHasHiddenExtensionKey: CFStringRef;
pub extern const kCFURLCreationDateKey: CFStringRef;
pub extern const kCFURLContentAccessDateKey: CFStringRef;
pub extern const kCFURLContentModificationDateKey: CFStringRef;
pub extern const kCFURLAttributeModificationDateKey: CFStringRef;
pub extern const kCFURLFileContentIdentifierKey: CFStringRef;
pub extern const kCFURLMayShareFileContentKey: CFStringRef;
pub extern const kCFURLMayHaveExtendedAttributesKey: CFStringRef;
pub extern const kCFURLIsPurgeableKey: CFStringRef;
pub extern const kCFURLIsSparseKey: CFStringRef;
pub extern const kCFURLLinkCountKey: CFStringRef;
pub extern const kCFURLParentDirectoryURLKey: CFStringRef;
pub extern const kCFURLVolumeURLKey: CFStringRef;
pub extern const kCFURLTypeIdentifierKey: CFStringRef;
pub extern const kCFURLLocalizedTypeDescriptionKey: CFStringRef;
pub extern const kCFURLLabelNumberKey: CFStringRef;
pub extern const kCFURLLabelColorKey: CFStringRef;
pub extern const kCFURLLocalizedLabelKey: CFStringRef;
pub extern const kCFURLEffectiveIconKey: CFStringRef;
pub extern const kCFURLCustomIconKey: CFStringRef;
pub extern const kCFURLFileResourceIdentifierKey: CFStringRef;
pub extern const kCFURLVolumeIdentifierKey: CFStringRef;
pub extern const kCFURLPreferredIOBlockSizeKey: CFStringRef;
pub extern const kCFURLIsReadableKey: CFStringRef;
pub extern const kCFURLIsWritableKey: CFStringRef;
pub extern const kCFURLIsExecutableKey: CFStringRef;
pub extern const kCFURLFileSecurityKey: CFStringRef;
pub extern const kCFURLIsExcludedFromBackupKey: CFStringRef;
pub extern const kCFURLTagNamesKey: CFStringRef;
pub extern const kCFURLPathKey: CFStringRef;
pub extern const kCFURLCanonicalPathKey: CFStringRef;
pub extern const kCFURLIsMountTriggerKey: CFStringRef;
pub extern const kCFURLGenerationIdentifierKey: CFStringRef;
pub extern const kCFURLDocumentIdentifierKey: CFStringRef;
pub extern const kCFURLAddedToDirectoryDateKey: CFStringRef;
pub extern const kCFURLQuarantinePropertiesKey: CFStringRef;
pub extern const kCFURLFileResourceTypeKey: CFStringRef;
pub extern const kCFURLFileResourceTypeNamedPipe: CFStringRef;
pub extern const kCFURLFileResourceTypeCharacterSpecial: CFStringRef;
pub extern const kCFURLFileResourceTypeDirectory: CFStringRef;
pub extern const kCFURLFileResourceTypeBlockSpecial: CFStringRef;
pub extern const kCFURLFileResourceTypeRegular: CFStringRef;
pub extern const kCFURLFileResourceTypeSymbolicLink: CFStringRef;
pub extern const kCFURLFileResourceTypeSocket: CFStringRef;
pub extern const kCFURLFileResourceTypeUnknown: CFStringRef;
pub extern const kCFURLFileSizeKey: CFStringRef;
pub extern const kCFURLFileAllocatedSizeKey: CFStringRef;
pub extern const kCFURLTotalFileSizeKey: CFStringRef;
pub extern const kCFURLTotalFileAllocatedSizeKey: CFStringRef;
pub extern const kCFURLIsAliasFileKey: CFStringRef;
pub extern const kCFURLFileProtectionKey: CFStringRef;
pub extern const kCFURLFileProtectionNone: CFStringRef;
pub extern const kCFURLFileProtectionComplete: CFStringRef;
pub extern const kCFURLFileProtectionCompleteUnlessOpen: CFStringRef;
pub extern const kCFURLFileProtectionCompleteUntilFirstUserAuthentication: CFStringRef;
pub extern const kCFURLVolumeLocalizedFormatDescriptionKey: CFStringRef;
pub extern const kCFURLVolumeTotalCapacityKey: CFStringRef;
pub extern const kCFURLVolumeAvailableCapacityKey: CFStringRef;
pub extern const kCFURLVolumeAvailableCapacityForImportantUsageKey: CFStringRef;
pub extern const kCFURLVolumeAvailableCapacityForOpportunisticUsageKey: CFStringRef;
pub extern const kCFURLVolumeResourceCountKey: CFStringRef;
pub extern const kCFURLVolumeSupportsPersistentIDsKey: CFStringRef;
pub extern const kCFURLVolumeSupportsSymbolicLinksKey: CFStringRef;
pub extern const kCFURLVolumeSupportsHardLinksKey: CFStringRef;
pub extern const kCFURLVolumeSupportsJournalingKey: CFStringRef;
pub extern const kCFURLVolumeIsJournalingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsSparseFilesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsZeroRunsKey: CFStringRef;
pub extern const kCFURLVolumeSupportsCaseSensitiveNamesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsCasePreservedNamesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsRootDirectoryDatesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsVolumeSizesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsRenamingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsAdvisoryFileLockingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsExtendedSecurityKey: CFStringRef;
pub extern const kCFURLVolumeIsBrowsableKey: CFStringRef;
pub extern const kCFURLVolumeMaximumFileSizeKey: CFStringRef;
pub extern const kCFURLVolumeIsEjectableKey: CFStringRef;
pub extern const kCFURLVolumeIsRemovableKey: CFStringRef;
pub extern const kCFURLVolumeIsInternalKey: CFStringRef;
pub extern const kCFURLVolumeIsAutomountedKey: CFStringRef;
pub extern const kCFURLVolumeIsLocalKey: CFStringRef;
pub extern const kCFURLVolumeIsReadOnlyKey: CFStringRef;
pub extern const kCFURLVolumeCreationDateKey: CFStringRef;
pub extern const kCFURLVolumeURLForRemountingKey: CFStringRef;
pub extern const kCFURLVolumeUUIDStringKey: CFStringRef;
pub extern const kCFURLVolumeNameKey: CFStringRef;
pub extern const kCFURLVolumeLocalizedNameKey: CFStringRef;
pub extern const kCFURLVolumeIsEncryptedKey: CFStringRef;
pub extern const kCFURLVolumeIsRootFileSystemKey: CFStringRef;
pub extern const kCFURLVolumeSupportsCompressionKey: CFStringRef;
pub extern const kCFURLVolumeSupportsFileCloningKey: CFStringRef;
pub extern const kCFURLVolumeSupportsSwapRenamingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsExclusiveRenamingKey: CFStringRef;
pub extern const kCFURLVolumeSupportsImmutableFilesKey: CFStringRef;
pub extern const kCFURLVolumeSupportsAccessPermissionsKey: CFStringRef;
pub extern const kCFURLVolumeSupportsFileProtectionKey: CFStringRef;
pub extern const kCFURLIsUbiquitousItemKey: CFStringRef;
pub extern const kCFURLUbiquitousItemHasUnresolvedConflictsKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsDownloadedKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsDownloadingKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsUploadedKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsUploadingKey: CFStringRef;
pub extern const kCFURLUbiquitousItemPercentDownloadedKey: CFStringRef;
pub extern const kCFURLUbiquitousItemPercentUploadedKey: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingStatusKey: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingErrorKey: CFStringRef;
pub extern const kCFURLUbiquitousItemUploadingErrorKey: CFStringRef;
pub extern const kCFURLUbiquitousItemIsExcludedFromSyncKey: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingStatusNotDownloaded: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingStatusDownloaded: CFStringRef;
pub extern const kCFURLUbiquitousItemDownloadingStatusCurrent: CFStringRef;
pub const CFURLBookmarkCreationOptions = CFOptionFlags;
pub const kCFURLBookmarkCreationMinimalBookmarkMask: c_int = 512;
pub const kCFURLBookmarkCreationSuitableForBookmarkFile: c_int = 1024;
pub const kCFURLBookmarkCreationWithSecurityScope: c_int = 2048;
pub const kCFURLBookmarkCreationSecurityScopeAllowOnlyReadAccess: c_int = 4096;
pub const kCFURLBookmarkCreationWithoutImplicitSecurityScope: c_int = 536870912;
pub const kCFURLBookmarkCreationPreferFileIDResolutionMask: c_int = 256;
const enum_unnamed_35 = c_uint;
pub const CFURLBookmarkResolutionOptions = CFOptionFlags;
pub const kCFURLBookmarkResolutionWithoutUIMask: c_int = 256;
pub const kCFURLBookmarkResolutionWithoutMountingMask: c_int = 512;
pub const kCFURLBookmarkResolutionWithSecurityScope: c_int = 1024;
pub const kCFURLBookmarkResolutionWithoutImplicitStartAccessing: c_int = 32768;
pub const kCFBookmarkResolutionWithoutUIMask: c_int = 256;
pub const kCFBookmarkResolutionWithoutMountingMask: c_int = 512;
const enum_unnamed_36 = c_uint;
pub const CFURLBookmarkFileCreationOptions = CFOptionFlags;
pub extern fn CFURLCreateBookmarkData(allocator: CFAllocatorRef, url: CFURLRef, options: CFURLBookmarkCreationOptions, resourcePropertiesToInclude: CFArrayRef, relativeToURL: CFURLRef, @"error": [*c]CFErrorRef) CFDataRef;
pub extern fn CFURLCreateByResolvingBookmarkData(allocator: CFAllocatorRef, bookmark: CFDataRef, options: CFURLBookmarkResolutionOptions, relativeToURL: CFURLRef, resourcePropertiesToInclude: CFArrayRef, isStale: [*c]Boolean, @"error": [*c]CFErrorRef) CFURLRef;
pub extern fn CFURLCreateResourcePropertiesForKeysFromBookmarkData(allocator: CFAllocatorRef, resourcePropertiesToReturn: CFArrayRef, bookmark: CFDataRef) CFDictionaryRef;
pub extern fn CFURLCreateResourcePropertyForKeyFromBookmarkData(allocator: CFAllocatorRef, resourcePropertyKey: CFStringRef, bookmark: CFDataRef) CFTypeRef;
pub extern fn CFURLCreateBookmarkDataFromFile(allocator: CFAllocatorRef, fileURL: CFURLRef, errorRef: [*c]CFErrorRef) CFDataRef;
pub extern fn CFURLWriteBookmarkDataToFile(bookmarkRef: CFDataRef, fileURL: CFURLRef, options: CFURLBookmarkFileCreationOptions, errorRef: [*c]CFErrorRef) Boolean;
pub extern fn CFURLCreateBookmarkDataFromAliasRecord(allocatorRef: CFAllocatorRef, aliasRecordDataRef: CFDataRef) CFDataRef;
pub extern fn CFURLStartAccessingSecurityScopedResource(url: CFURLRef) Boolean;
pub extern fn CFURLStopAccessingSecurityScopedResource(url: CFURLRef) void;
pub const boolean_t = c_int;
pub const natural_t = __darwin_natural_t;
pub const integer_t = c_int;
pub const vm_offset_t = usize;
pub const vm_size_t = usize;
pub const mach_vm_address_t = u64;
pub const mach_vm_offset_t = u64;
pub const mach_vm_size_t = u64;
pub const vm_map_offset_t = u64;
pub const vm_map_address_t = u64;
pub const vm_map_size_t = u64;
pub const vm32_offset_t = u32;
pub const vm32_address_t = u32;
pub const vm32_size_t = u32;
pub const mach_port_context_t = vm_offset_t;
pub const mach_port_name_t = natural_t;
pub const mach_port_name_array_t = [*c]mach_port_name_t;
pub const mach_port_t = __darwin_mach_port_t;
pub const mach_port_array_t = [*c]mach_port_t;
pub const mach_port_right_t = natural_t;
pub const mach_port_type_t = natural_t;
pub const mach_port_type_array_t = [*c]mach_port_type_t;
pub const mach_port_urefs_t = natural_t;
pub const mach_port_delta_t = integer_t;
pub const mach_port_seqno_t = natural_t;
pub const mach_port_mscount_t = natural_t;
pub const mach_port_msgcount_t = natural_t;
pub const mach_port_rights_t = natural_t;
pub const mach_port_srights_t = c_uint;
pub const struct_mach_port_status = extern struct {
    mps_pset: mach_port_rights_t,
    mps_seqno: mach_port_seqno_t,
    mps_mscount: mach_port_mscount_t,
    mps_qlimit: mach_port_msgcount_t,
    mps_msgcount: mach_port_msgcount_t,
    mps_sorights: mach_port_rights_t,
    mps_srights: boolean_t,
    mps_pdrequest: boolean_t,
    mps_nsrequest: boolean_t,
    mps_flags: natural_t,
};
pub const mach_port_status_t = struct_mach_port_status;
pub const struct_mach_port_limits = extern struct {
    mpl_qlimit: mach_port_msgcount_t,
};
pub const mach_port_limits_t = struct_mach_port_limits;
pub const struct_mach_port_info_ext = extern struct {
    mpie_status: mach_port_status_t,
    mpie_boost_cnt: mach_port_msgcount_t,
    reserved: [6]u32,
};
pub const mach_port_info_ext_t = struct_mach_port_info_ext;
pub const struct_mach_port_guard_info = extern struct {
    mpgi_guard: u64,
};
pub const mach_port_guard_info_t = struct_mach_port_guard_info;
pub const mach_port_info_t = [*c]integer_t;
pub const mach_port_flavor_t = c_int; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/port.h:327:26: warning: struct demoted to opaque type - has bitfield
pub const struct_mach_port_qos = opaque {};
pub const mach_port_qos_t = struct_mach_port_qos;
pub const struct_mach_service_port_info = extern struct {
    mspi_string_name: [255]u8,
    mspi_domain_type: u8,
};
pub const mach_service_port_info_data_t = struct_mach_service_port_info;
pub const mach_service_port_info_t = [*c]struct_mach_service_port_info;
const union_unnamed_37 = extern union {
    reserved: [2]u64,
    work_interval_port: mach_port_name_t,
    service_port_info: mach_service_port_info_t,
    service_port_name: mach_port_name_t,
};
pub const struct_mach_port_options = extern struct {
    flags: u32,
    mpl: mach_port_limits_t,
    unnamed_0: union_unnamed_37,
};
pub const mach_port_options_t = struct_mach_port_options;
pub const mach_port_options_ptr_t = [*c]mach_port_options_t;
pub const kGUARD_EXC_DESTROY: c_int = 1;
pub const kGUARD_EXC_MOD_REFS: c_int = 2;
pub const kGUARD_EXC_SET_CONTEXT: c_int = 4;
pub const kGUARD_EXC_UNGUARDED: c_int = 8;
pub const kGUARD_EXC_INCORRECT_GUARD: c_int = 16;
pub const kGUARD_EXC_IMMOVABLE: c_int = 32;
pub const kGUARD_EXC_STRICT_REPLY: c_int = 64;
pub const kGUARD_EXC_MSG_FILTERED: c_int = 128;
pub const kGUARD_EXC_INVALID_RIGHT: c_int = 256;
pub const kGUARD_EXC_INVALID_NAME: c_int = 512;
pub const kGUARD_EXC_INVALID_VALUE: c_int = 1024;
pub const kGUARD_EXC_INVALID_ARGUMENT: c_int = 2048;
pub const kGUARD_EXC_RIGHT_EXISTS: c_int = 4096;
pub const kGUARD_EXC_KERN_NO_SPACE: c_int = 8192;
pub const kGUARD_EXC_KERN_FAILURE: c_int = 16384;
pub const kGUARD_EXC_KERN_RESOURCE: c_int = 32768;
pub const kGUARD_EXC_SEND_INVALID_REPLY: c_int = 65536;
pub const kGUARD_EXC_SEND_INVALID_VOUCHER: c_int = 131072;
pub const kGUARD_EXC_SEND_INVALID_RIGHT: c_int = 262144;
pub const kGUARD_EXC_RCV_INVALID_NAME: c_int = 524288;
pub const kGUARD_EXC_RCV_GUARDED_DESC: c_int = 1048576;
pub const kGUARD_EXC_MOD_REFS_NON_FATAL: c_int = 2097152;
pub const kGUARD_EXC_IMMOVABLE_NON_FATAL: c_int = 4194304;
pub const enum_mach_port_guard_exception_codes = c_uint;
pub const CFRunLoopMode = CFStringRef;
pub const struct___CFRunLoop = opaque {};
pub const CFRunLoopRef = ?*struct___CFRunLoop;
pub const struct___CFRunLoopSource = opaque {};
pub const CFRunLoopSourceRef = ?*struct___CFRunLoopSource;
pub const struct___CFRunLoopObserver = opaque {};
pub const CFRunLoopObserverRef = ?*struct___CFRunLoopObserver;
pub const struct___CFRunLoopTimer = opaque {};
pub const CFRunLoopTimerRef = ?*struct___CFRunLoopTimer;
pub const CFRunLoopRunResult = SInt32;
pub const kCFRunLoopRunFinished: c_int = 1;
pub const kCFRunLoopRunStopped: c_int = 2;
pub const kCFRunLoopRunTimedOut: c_int = 3;
pub const kCFRunLoopRunHandledSource: c_int = 4;
const enum_unnamed_38 = c_uint;
pub const CFRunLoopActivity = CFOptionFlags;
pub const kCFRunLoopEntry: c_int = 1;
pub const kCFRunLoopBeforeTimers: c_int = 2;
pub const kCFRunLoopBeforeSources: c_int = 4;
pub const kCFRunLoopBeforeWaiting: c_int = 32;
pub const kCFRunLoopAfterWaiting: c_int = 64;
pub const kCFRunLoopExit: c_int = 128;
pub const kCFRunLoopAllActivities: c_int = 268435455;
const enum_unnamed_39 = c_uint;
pub extern const kCFRunLoopDefaultMode: CFRunLoopMode;
pub extern const kCFRunLoopCommonModes: CFRunLoopMode;
pub extern fn CFRunLoopGetTypeID() CFTypeID;
pub extern fn CFRunLoopGetCurrent() CFRunLoopRef;
pub extern fn CFRunLoopGetMain() CFRunLoopRef;
pub extern fn CFRunLoopCopyCurrentMode(rl: CFRunLoopRef) CFRunLoopMode;
pub extern fn CFRunLoopCopyAllModes(rl: CFRunLoopRef) CFArrayRef;
pub extern fn CFRunLoopAddCommonMode(rl: CFRunLoopRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopGetNextTimerFireDate(rl: CFRunLoopRef, mode: CFRunLoopMode) CFAbsoluteTime;
pub extern fn CFRunLoopRun() void;
pub extern fn CFRunLoopRunInMode(mode: CFRunLoopMode, seconds: CFTimeInterval, returnAfterSourceHandled: Boolean) CFRunLoopRunResult;
pub extern fn CFRunLoopIsWaiting(rl: CFRunLoopRef) Boolean;
pub extern fn CFRunLoopWakeUp(rl: CFRunLoopRef) void;
pub extern fn CFRunLoopStop(rl: CFRunLoopRef) void; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:76:16: warning: unsupported type: 'BlockPointer'
pub const CFRunLoopPerformBlock = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:76:16
pub extern fn CFRunLoopContainsSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode) Boolean;
pub extern fn CFRunLoopAddSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopRemoveSource(rl: CFRunLoopRef, source: CFRunLoopSourceRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopContainsObserver(rl: CFRunLoopRef, observer: CFRunLoopObserverRef, mode: CFRunLoopMode) Boolean;
pub extern fn CFRunLoopAddObserver(rl: CFRunLoopRef, observer: CFRunLoopObserverRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopRemoveObserver(rl: CFRunLoopRef, observer: CFRunLoopObserverRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopContainsTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode) Boolean;
pub extern fn CFRunLoopAddTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode) void;
pub extern fn CFRunLoopRemoveTimer(rl: CFRunLoopRef, timer: CFRunLoopTimerRef, mode: CFRunLoopMode) void;
pub const CFRunLoopSourceContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: ?fn (?*const anyopaque) callconv(.C) ?*const anyopaque,
    release: ?fn (?*const anyopaque) callconv(.C) void,
    copyDescription: ?fn (?*const anyopaque) callconv(.C) CFStringRef,
    equal: ?fn (?*const anyopaque, ?*const anyopaque) callconv(.C) Boolean,
    hash: ?fn (?*const anyopaque) callconv(.C) CFHashCode,
    schedule: ?fn (?*anyopaque, CFRunLoopRef, CFRunLoopMode) callconv(.C) void,
    cancel: ?fn (?*anyopaque, CFRunLoopRef, CFRunLoopMode) callconv(.C) void,
    perform: ?fn (?*anyopaque) callconv(.C) void,
};
pub const CFRunLoopSourceContext1 = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: ?fn (?*const anyopaque) callconv(.C) ?*const anyopaque,
    release: ?fn (?*const anyopaque) callconv(.C) void,
    copyDescription: ?fn (?*const anyopaque) callconv(.C) CFStringRef,
    equal: ?fn (?*const anyopaque, ?*const anyopaque) callconv(.C) Boolean,
    hash: ?fn (?*const anyopaque) callconv(.C) CFHashCode,
    getPort: ?fn (?*anyopaque) callconv(.C) mach_port_t,
    perform: ?fn (?*anyopaque, CFIndex, CFAllocatorRef, ?*anyopaque) callconv(.C) ?*anyopaque,
};
pub extern fn CFRunLoopSourceGetTypeID() CFTypeID;
pub extern fn CFRunLoopSourceCreate(allocator: CFAllocatorRef, order: CFIndex, context: [*c]CFRunLoopSourceContext) CFRunLoopSourceRef;
pub extern fn CFRunLoopSourceGetOrder(source: CFRunLoopSourceRef) CFIndex;
pub extern fn CFRunLoopSourceInvalidate(source: CFRunLoopSourceRef) void;
pub extern fn CFRunLoopSourceIsValid(source: CFRunLoopSourceRef) Boolean;
pub extern fn CFRunLoopSourceGetContext(source: CFRunLoopSourceRef, context: [*c]CFRunLoopSourceContext) void;
pub extern fn CFRunLoopSourceSignal(source: CFRunLoopSourceRef) void;
pub const CFRunLoopObserverContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: ?fn (?*const anyopaque) callconv(.C) ?*const anyopaque,
    release: ?fn (?*const anyopaque) callconv(.C) void,
    copyDescription: ?fn (?*const anyopaque) callconv(.C) CFStringRef,
};
pub const CFRunLoopObserverCallBack = ?*const fn (CFRunLoopObserverRef, CFRunLoopActivity, ?*anyopaque) callconv(.C) void;
pub extern fn CFRunLoopObserverGetTypeID() CFTypeID;
pub extern fn CFRunLoopObserverCreate(allocator: CFAllocatorRef, activities: CFOptionFlags, repeats: Boolean, order: CFIndex, callout: CFRunLoopObserverCallBack, context: [*c]CFRunLoopObserverContext) CFRunLoopObserverRef; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:145:32: warning: unsupported type: 'BlockPointer'
pub const CFRunLoopObserverCreateWithHandler = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:145:32
pub extern fn CFRunLoopObserverGetActivities(observer: CFRunLoopObserverRef) CFOptionFlags;
pub extern fn CFRunLoopObserverDoesRepeat(observer: CFRunLoopObserverRef) Boolean;
pub extern fn CFRunLoopObserverGetOrder(observer: CFRunLoopObserverRef) CFIndex;
pub extern fn CFRunLoopObserverInvalidate(observer: CFRunLoopObserverRef) void;
pub extern fn CFRunLoopObserverIsValid(observer: CFRunLoopObserverRef) Boolean;
pub extern fn CFRunLoopObserverGetContext(observer: CFRunLoopObserverRef, context: [*c]CFRunLoopObserverContext) void;
pub const CFRunLoopTimerContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: ?fn (?*const anyopaque) callconv(.C) ?*const anyopaque,
    release: ?fn (?*const anyopaque) callconv(.C) void,
    copyDescription: ?fn (?*const anyopaque) callconv(.C) CFStringRef,
};
pub const CFRunLoopTimerCallBack = ?*const fn (CFRunLoopTimerRef, ?*anyopaque) callconv(.C) void;
pub extern fn CFRunLoopTimerGetTypeID() CFTypeID;
pub extern fn CFRunLoopTimerCreate(allocator: CFAllocatorRef, fireDate: CFAbsoluteTime, interval: CFTimeInterval, flags: CFOptionFlags, order: CFIndex, callout: CFRunLoopTimerCallBack, context: [*c]CFRunLoopTimerContext) CFRunLoopTimerRef; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:169:29: warning: unsupported type: 'BlockPointer'
pub const CFRunLoopTimerCreateWithHandler = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFRunLoop.h:169:29
pub extern fn CFRunLoopTimerGetNextFireDate(timer: CFRunLoopTimerRef) CFAbsoluteTime;
pub extern fn CFRunLoopTimerSetNextFireDate(timer: CFRunLoopTimerRef, fireDate: CFAbsoluteTime) void;
pub extern fn CFRunLoopTimerGetInterval(timer: CFRunLoopTimerRef) CFTimeInterval;
pub extern fn CFRunLoopTimerDoesRepeat(timer: CFRunLoopTimerRef) Boolean;
pub extern fn CFRunLoopTimerGetOrder(timer: CFRunLoopTimerRef) CFIndex;
pub extern fn CFRunLoopTimerInvalidate(timer: CFRunLoopTimerRef) void;
pub extern fn CFRunLoopTimerIsValid(timer: CFRunLoopTimerRef) Boolean;
pub extern fn CFRunLoopTimerGetContext(timer: CFRunLoopTimerRef, context: [*c]CFRunLoopTimerContext) void;
pub extern fn CFRunLoopTimerGetTolerance(timer: CFRunLoopTimerRef) CFTimeInterval;
pub extern fn CFRunLoopTimerSetTolerance(timer: CFRunLoopTimerRef, tolerance: CFTimeInterval) void;
pub const struct___CFSocket = opaque {};
pub const CFSocketRef = ?*struct___CFSocket;
pub const CFSocketError = CFIndex;
pub const kCFSocketSuccess: c_int = 0;
pub const kCFSocketError: c_int = -1;
pub const kCFSocketTimeout: c_int = -2;
const enum_unnamed_40 = c_int;
pub const CFSocketSignature = extern struct {
    protocolFamily: SInt32,
    socketType: SInt32,
    protocol: SInt32,
    address: CFDataRef,
};
pub const CFSocketCallBackType = CFOptionFlags;
pub const kCFSocketNoCallBack: c_int = 0;
pub const kCFSocketReadCallBack: c_int = 1;
pub const kCFSocketAcceptCallBack: c_int = 2;
pub const kCFSocketDataCallBack: c_int = 3;
pub const kCFSocketConnectCallBack: c_int = 4;
pub const kCFSocketWriteCallBack: c_int = 8;
const enum_unnamed_41 = c_uint;
pub const kCFSocketAutomaticallyReenableReadCallBack: c_int = 1;
pub const kCFSocketAutomaticallyReenableAcceptCallBack: c_int = 2;
pub const kCFSocketAutomaticallyReenableDataCallBack: c_int = 3;
pub const kCFSocketAutomaticallyReenableWriteCallBack: c_int = 8;
pub const kCFSocketLeaveErrors: c_int = 64;
pub const kCFSocketCloseOnInvalidate: c_int = 128;
const enum_unnamed_42 = c_uint;
pub const CFSocketCallBack = ?*const fn (CFSocketRef, CFSocketCallBackType, CFDataRef, ?*const anyopaque, ?*anyopaque) callconv(.C) void;
pub const CFSocketContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: ?fn (?*const anyopaque) callconv(.C) ?*const anyopaque,
    release: ?fn (?*const anyopaque) callconv(.C) void,
    copyDescription: ?fn (?*const anyopaque) callconv(.C) CFStringRef,
};
pub const CFSocketNativeHandle = c_int;
pub extern fn CFSocketGetTypeID() CFTypeID;
pub extern fn CFSocketCreate(allocator: CFAllocatorRef, protocolFamily: SInt32, socketType: SInt32, protocol: SInt32, callBackTypes: CFOptionFlags, callout: CFSocketCallBack, context: [*c]const CFSocketContext) CFSocketRef;
pub extern fn CFSocketCreateWithNative(allocator: CFAllocatorRef, sock: CFSocketNativeHandle, callBackTypes: CFOptionFlags, callout: CFSocketCallBack, context: [*c]const CFSocketContext) CFSocketRef;
pub extern fn CFSocketCreateWithSocketSignature(allocator: CFAllocatorRef, signature: [*c]const CFSocketSignature, callBackTypes: CFOptionFlags, callout: CFSocketCallBack, context: [*c]const CFSocketContext) CFSocketRef;
pub extern fn CFSocketCreateConnectedToSocketSignature(allocator: CFAllocatorRef, signature: [*c]const CFSocketSignature, callBackTypes: CFOptionFlags, callout: CFSocketCallBack, context: [*c]const CFSocketContext, timeout: CFTimeInterval) CFSocketRef;
pub extern fn CFSocketSetAddress(s: CFSocketRef, address: CFDataRef) CFSocketError;
pub extern fn CFSocketConnectToAddress(s: CFSocketRef, address: CFDataRef, timeout: CFTimeInterval) CFSocketError;
pub extern fn CFSocketInvalidate(s: CFSocketRef) void;
pub extern fn CFSocketIsValid(s: CFSocketRef) Boolean;
pub extern fn CFSocketCopyAddress(s: CFSocketRef) CFDataRef;
pub extern fn CFSocketCopyPeerAddress(s: CFSocketRef) CFDataRef;
pub extern fn CFSocketGetContext(s: CFSocketRef, context: [*c]CFSocketContext) void;
pub extern fn CFSocketGetNative(s: CFSocketRef) CFSocketNativeHandle;
pub extern fn CFSocketCreateRunLoopSource(allocator: CFAllocatorRef, s: CFSocketRef, order: CFIndex) CFRunLoopSourceRef;
pub extern fn CFSocketGetSocketFlags(s: CFSocketRef) CFOptionFlags;
pub extern fn CFSocketSetSocketFlags(s: CFSocketRef, flags: CFOptionFlags) void;
pub extern fn CFSocketDisableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags) void;
pub extern fn CFSocketEnableCallBacks(s: CFSocketRef, callBackTypes: CFOptionFlags) void;
pub extern fn CFSocketSendData(s: CFSocketRef, address: CFDataRef, data: CFDataRef, timeout: CFTimeInterval) CFSocketError;
pub extern fn CFSocketRegisterValue(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef, value: CFPropertyListRef) CFSocketError;
pub extern fn CFSocketCopyRegisteredValue(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef, value: [*c]CFPropertyListRef, nameServerAddress: [*c]CFDataRef) CFSocketError;
pub extern fn CFSocketRegisterSocketSignature(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef, signature: [*c]const CFSocketSignature) CFSocketError;
pub extern fn CFSocketCopyRegisteredSocketSignature(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef, signature: [*c]CFSocketSignature, nameServerAddress: [*c]CFDataRef) CFSocketError;
pub extern fn CFSocketUnregister(nameServerSignature: [*c]const CFSocketSignature, timeout: CFTimeInterval, name: CFStringRef) CFSocketError;
pub extern fn CFSocketSetDefaultNameRegistryPortNumber(port: UInt16) void;
pub extern fn CFSocketGetDefaultNameRegistryPortNumber() UInt16;
pub extern const kCFSocketCommandKey: CFStringRef;
pub extern const kCFSocketNameKey: CFStringRef;
pub extern const kCFSocketValueKey: CFStringRef;
pub extern const kCFSocketResultKey: CFStringRef;
pub extern const kCFSocketErrorKey: CFStringRef;
pub extern const kCFSocketRegisterCommand: CFStringRef;
pub extern const kCFSocketRetrieveCommand: CFStringRef;
pub const os_function_t = ?*const fn (?*anyopaque) callconv(.C) void; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:323:16: warning: unsupported type: 'BlockPointer'
pub const os_block_t = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:323:16
pub const struct_accessx_descriptor = extern struct {
    ad_name_offset: c_uint,
    ad_flags: c_int,
    ad_pad: [2]c_int,
};
pub extern fn getattrlistbulk(c_int, ?*anyopaque, ?*anyopaque, usize, u64) c_int;
pub extern fn getattrlistat(c_int, [*c]const u8, ?*anyopaque, ?*anyopaque, usize, c_ulong) c_int;
pub extern fn setattrlistat(c_int, [*c]const u8, ?*anyopaque, ?*anyopaque, usize, u32) c_int;
pub extern fn faccessat(c_int, [*c]const u8, c_int, c_int) c_int;
pub extern fn fchownat(c_int, [*c]const u8, uid_t, gid_t, c_int) c_int;
pub extern fn linkat(c_int, [*c]const u8, c_int, [*c]const u8, c_int) c_int;
pub extern fn readlinkat(c_int, [*c]const u8, [*c]u8, usize) isize;
pub extern fn symlinkat([*c]const u8, c_int, [*c]const u8) c_int;
pub extern fn unlinkat(c_int, [*c]const u8, c_int) c_int;
pub extern fn _exit(c_int) noreturn;
pub extern fn access([*c]const u8, c_int) c_int;
pub extern fn alarm(c_uint) c_uint;
pub extern fn chdir([*c]const u8) c_int;
pub extern fn chown([*c]const u8, uid_t, gid_t) c_int;
pub extern fn close(c_int) c_int;
pub extern fn dup(c_int) c_int;
pub extern fn dup2(c_int, c_int) c_int;
pub extern fn execl(__path: [*c]const u8, __arg0: [*c]const u8, ...) c_int;
pub extern fn execle(__path: [*c]const u8, __arg0: [*c]const u8, ...) c_int;
pub extern fn execlp(__file: [*c]const u8, __arg0: [*c]const u8, ...) c_int;
pub extern fn execv(__path: [*c]const u8, __argv: [*c]const [*c]u8) c_int;
pub extern fn execve(__file: [*c]const u8, __argv: [*c]const [*c]u8, __envp: [*c]const [*c]u8) c_int;
pub extern fn execvp(__file: [*c]const u8, __argv: [*c]const [*c]u8) c_int;
pub extern fn fork() pid_t;
pub extern fn fpathconf(c_int, c_int) c_long;
pub extern fn getcwd([*c]u8, usize) [*c]u8;
pub extern fn getegid() gid_t;
pub extern fn geteuid() uid_t;
pub extern fn getgid() gid_t;
pub extern fn getgroups(c_int, [*c]gid_t) c_int;
pub extern fn getlogin() [*c]u8;
pub extern fn getpgrp() pid_t;
pub extern fn getpid() pid_t;
pub extern fn getppid() pid_t;
pub extern fn getuid() uid_t;
pub extern fn isatty(c_int) c_int;
pub extern fn link([*c]const u8, [*c]const u8) c_int;
pub extern fn lseek(c_int, off_t, c_int) off_t;
pub extern fn pathconf([*c]const u8, c_int) c_long;
pub extern fn pause() c_int;
pub extern fn pipe([*c]c_int) c_int;
pub extern fn read(c_int, ?*anyopaque, usize) isize;
pub extern fn rmdir([*c]const u8) c_int;
pub extern fn setgid(gid_t) c_int;
pub extern fn setpgid(pid_t, pid_t) c_int;
pub extern fn setsid() pid_t;
pub extern fn setuid(uid_t) c_int;
pub extern fn sleep(c_uint) c_uint;
pub extern fn sysconf(c_int) c_long;
pub extern fn tcgetpgrp(c_int) pid_t;
pub extern fn tcsetpgrp(c_int, pid_t) c_int;
pub extern fn ttyname(c_int) [*c]u8;
pub extern fn ttyname_r(c_int, [*c]u8, usize) c_int;
pub extern fn unlink([*c]const u8) c_int;
pub extern fn write(__fd: c_int, __buf: ?*const anyopaque, __nbyte: usize) isize;
pub extern fn confstr(c_int, [*c]u8, usize) usize;
pub extern fn getopt(c_int, [*c]const [*c]u8, [*c]const u8) c_int;
pub extern var optarg: [*c]u8;
pub extern var optind: c_int;
pub extern var opterr: c_int;
pub extern var optopt: c_int;
pub extern fn brk(?*const anyopaque) ?*anyopaque;
pub extern fn chroot([*c]const u8) c_int;
pub extern fn crypt([*c]const u8, [*c]const u8) [*c]u8;
pub extern fn encrypt([*c]u8, c_int) void;
pub extern fn fchdir(c_int) c_int;
pub extern fn gethostid() c_long;
pub extern fn getpgid(pid_t) pid_t;
pub extern fn getsid(pid_t) pid_t;
pub extern fn getdtablesize() c_int;
pub extern fn getpagesize() c_int;
pub extern fn getpass([*c]const u8) [*c]u8;
pub extern fn getwd([*c]u8) [*c]u8;
pub extern fn lchown([*c]const u8, uid_t, gid_t) c_int;
pub extern fn lockf(c_int, c_int, off_t) c_int;
pub extern fn nice(c_int) c_int;
pub extern fn pread(__fd: c_int, __buf: ?*anyopaque, __nbyte: usize, __offset: off_t) isize;
pub extern fn pwrite(__fd: c_int, __buf: ?*const anyopaque, __nbyte: usize, __offset: off_t) isize;
pub extern fn sbrk(c_int) ?*anyopaque;
pub extern fn setpgrp() pid_t;
pub extern fn setregid(gid_t, gid_t) c_int;
pub extern fn setreuid(uid_t, uid_t) c_int;
pub extern fn sync() void;
pub extern fn truncate([*c]const u8, off_t) c_int;
pub extern fn ualarm(useconds_t, useconds_t) useconds_t;
pub extern fn usleep(useconds_t) c_int;
pub extern fn vfork() c_int;
pub extern fn fsync(c_int) c_int;
pub extern fn ftruncate(c_int, off_t) c_int;
pub extern fn getlogin_r([*c]u8, usize) c_int;
pub extern fn fchown(c_int, uid_t, gid_t) c_int;
pub extern fn gethostname([*c]u8, usize) c_int;
pub extern fn readlink(noalias [*c]const u8, noalias [*c]u8, usize) isize;
pub extern fn setegid(gid_t) c_int;
pub extern fn seteuid(uid_t) c_int;
pub extern fn symlink([*c]const u8, [*c]const u8) c_int;
pub extern fn pselect(c_int, noalias [*c]fd_set, noalias [*c]fd_set, noalias [*c]fd_set, noalias [*c]const struct_timespec, noalias [*c]const sigset_t) c_int;
pub extern fn select(c_int, noalias [*c]fd_set, noalias [*c]fd_set, noalias [*c]fd_set, noalias [*c]struct_timeval) c_int;
pub const uuid_t = __darwin_uuid_t;
pub extern fn accessx_np([*c]const struct_accessx_descriptor, usize, [*c]c_int, uid_t) c_int;
pub extern fn acct([*c]const u8) c_int;
pub extern fn add_profil([*c]u8, usize, c_ulong, c_uint) c_int;
pub extern fn endusershell() void;
pub extern fn execvP(__file: [*c]const u8, __searchpath: [*c]const u8, __argv: [*c]const [*c]u8) c_int;
pub extern fn fflagstostr(c_ulong) [*c]u8;
pub extern fn getdomainname([*c]u8, c_int) c_int;
pub extern fn getgrouplist([*c]const u8, c_int, [*c]c_int, [*c]c_int) c_int;
pub extern fn gethostuuid([*c]u8, [*c]const struct_timespec) c_int;
pub extern fn getmode(?*const anyopaque, mode_t) mode_t;
pub extern fn getpeereid(c_int, [*c]uid_t, [*c]gid_t) c_int;
pub extern fn getsgroups_np([*c]c_int, [*c]u8) c_int;
pub extern fn getusershell() [*c]u8;
pub extern fn getwgroups_np([*c]c_int, [*c]u8) c_int;
pub extern fn initgroups([*c]const u8, c_int) c_int;
pub extern fn issetugid() c_int;
pub extern fn mkdtemp([*c]u8) [*c]u8;
pub extern fn mknod([*c]const u8, mode_t, dev_t) c_int;
pub extern fn mkpath_np(path: [*c]const u8, omode: mode_t) c_int;
pub extern fn mkpathat_np(dfd: c_int, path: [*c]const u8, omode: mode_t) c_int;
pub extern fn mkstemps([*c]u8, c_int) c_int;
pub extern fn mkostemp(path: [*c]u8, oflags: c_int) c_int;
pub extern fn mkostemps(path: [*c]u8, slen: c_int, oflags: c_int) c_int;
pub extern fn mkstemp_dprotected_np(path: [*c]u8, dpclass: c_int, dpflags: c_int) c_int;
pub extern fn mkdtempat_np(dfd: c_int, path: [*c]u8) [*c]u8;
pub extern fn mkstempsat_np(dfd: c_int, path: [*c]u8, slen: c_int) c_int;
pub extern fn mkostempsat_np(dfd: c_int, path: [*c]u8, slen: c_int, oflags: c_int) c_int;
pub extern fn nfssvc(c_int, ?*anyopaque) c_int;
pub extern fn profil([*c]u8, usize, c_ulong, c_uint) c_int;
pub extern fn pthread_setugid_np(uid_t, gid_t) c_int;
pub extern fn pthread_getugid_np([*c]uid_t, [*c]gid_t) c_int;
pub extern fn reboot(c_int) c_int;
pub extern fn revoke([*c]const u8) c_int;
pub extern fn rcmd([*c][*c]u8, c_int, [*c]const u8, [*c]const u8, [*c]const u8, [*c]c_int) c_int;
pub extern fn rcmd_af([*c][*c]u8, c_int, [*c]const u8, [*c]const u8, [*c]const u8, [*c]c_int, c_int) c_int;
pub extern fn rresvport([*c]c_int) c_int;
pub extern fn rresvport_af([*c]c_int, c_int) c_int;
pub extern fn iruserok(c_ulong, c_int, [*c]const u8, [*c]const u8) c_int;
pub extern fn iruserok_sa(?*const anyopaque, c_int, c_int, [*c]const u8, [*c]const u8) c_int;
pub extern fn ruserok([*c]const u8, c_int, [*c]const u8, [*c]const u8) c_int;
pub extern fn setdomainname([*c]const u8, c_int) c_int;
pub extern fn setgroups(c_int, [*c]const gid_t) c_int;
pub extern fn sethostid(c_long) void;
pub extern fn sethostname([*c]const u8, c_int) c_int;
pub extern fn setlogin([*c]const u8) c_int;
pub extern fn setmode([*c]const u8) ?*anyopaque;
pub extern fn setrgid(gid_t) c_int;
pub extern fn setruid(uid_t) c_int;
pub extern fn setsgroups_np(c_int, [*c]const u8) c_int;
pub extern fn setusershell() void;
pub extern fn setwgroups_np(c_int, [*c]const u8) c_int;
pub extern fn strtofflags([*c][*c]u8, [*c]c_ulong, [*c]c_ulong) c_int;
pub extern fn swapon([*c]const u8) c_int;
pub extern fn ttyslot() c_int;
pub extern fn undelete([*c]const u8) c_int;
pub extern fn unwhiteout([*c]const u8) c_int;
pub extern fn syscall(c_int, ...) c_int;
pub extern fn fgetattrlist(c_int, ?*anyopaque, ?*anyopaque, usize, c_uint) c_int;
pub extern fn fsetattrlist(c_int, ?*anyopaque, ?*anyopaque, usize, c_uint) c_int;
pub extern fn getattrlist([*c]const u8, ?*anyopaque, ?*anyopaque, usize, c_uint) c_int;
pub extern fn setattrlist([*c]const u8, ?*anyopaque, ?*anyopaque, usize, c_uint) c_int;
pub extern fn exchangedata([*c]const u8, [*c]const u8, c_uint) c_int;
pub extern fn getdirentriesattr(c_int, ?*anyopaque, ?*anyopaque, usize, [*c]c_uint, [*c]c_uint, [*c]c_uint, c_uint) c_int;
pub const struct_fssearchblock = opaque {};
pub const struct_searchstate = opaque {};
pub extern fn searchfs([*c]const u8, ?*struct_fssearchblock, [*c]c_ulong, c_uint, c_uint, ?*struct_searchstate) c_int;
pub extern fn fsctl([*c]const u8, c_ulong, ?*anyopaque, c_uint) c_int;
pub extern fn ffsctl(c_int, c_ulong, ?*anyopaque, c_uint) c_int;
pub extern fn fsync_volume_np(c_int, c_int) c_int;
pub extern fn sync_volume_np([*c]const u8, c_int) c_int;
pub extern var optreset: c_int;
pub const struct_flock = extern struct {
    l_start: off_t,
    l_len: off_t,
    l_pid: pid_t,
    l_type: c_short,
    l_whence: c_short,
};
pub const struct_flocktimeout = extern struct {
    fl: struct_flock,
    timeout: struct_timespec,
};
pub const struct_radvisory = extern struct {
    ra_offset: off_t,
    ra_count: c_int,
};
pub const struct_fsignatures = extern struct {
    fs_file_start: off_t,
    fs_blob_start: ?*anyopaque,
    fs_blob_size: usize,
    fs_fsignatures_size: usize,
    fs_cdhash: [20]u8,
    fs_hash_type: c_int,
};
pub const fsignatures_t = struct_fsignatures;
pub const struct_fsupplement = extern struct {
    fs_file_start: off_t,
    fs_blob_start: off_t,
    fs_blob_size: usize,
    fs_orig_fd: c_int,
};
pub const fsupplement_t = struct_fsupplement;
pub const struct_fchecklv = extern struct {
    lv_file_start: off_t,
    lv_error_message_size: usize,
    lv_error_message: ?*anyopaque,
};
pub const fchecklv_t = struct_fchecklv;
pub const struct_fgetsigsinfo = extern struct {
    fg_file_start: off_t,
    fg_info_request: c_int,
    fg_sig_is_platform: c_int,
};
pub const fgetsigsinfo_t = struct_fgetsigsinfo;
pub const struct_fstore = extern struct {
    fst_flags: c_uint,
    fst_posmode: c_int,
    fst_offset: off_t,
    fst_length: off_t,
    fst_bytesalloc: off_t,
};
pub const fstore_t = struct_fstore;
pub const struct_fpunchhole = extern struct {
    fp_flags: c_uint,
    reserved: c_uint,
    fp_offset: off_t,
    fp_length: off_t,
};
pub const fpunchhole_t = struct_fpunchhole;
pub const struct_ftrimactivefile = extern struct {
    fta_offset: off_t,
    fta_length: off_t,
};
pub const ftrimactivefile_t = struct_ftrimactivefile;
pub const struct_fspecread = extern struct {
    fsr_flags: c_uint,
    reserved: c_uint,
    fsr_offset: off_t,
    fsr_length: off_t,
};
pub const fspecread_t = struct_fspecread;
pub const struct_fbootstraptransfer = extern struct {
    fbt_offset: off_t,
    fbt_length: usize,
    fbt_buffer: ?*anyopaque,
};
pub const fbootstraptransfer_t = struct_fbootstraptransfer;
pub const struct_log2phys = extern struct {
    l2p_flags: c_uint,
    l2p_contigbytes: off_t,
    l2p_devoffset: off_t,
};
pub const struct__filesec = opaque {};
pub const filesec_t = ?*struct__filesec;
pub const FILESEC_OWNER: c_int = 1;
pub const FILESEC_GROUP: c_int = 2;
pub const FILESEC_UUID: c_int = 3;
pub const FILESEC_MODE: c_int = 4;
pub const FILESEC_ACL: c_int = 5;
pub const FILESEC_GRPUUID: c_int = 6;
pub const FILESEC_ACL_RAW: c_int = 100;
pub const FILESEC_ACL_ALLOCSIZE: c_int = 101;
pub const filesec_property_t = c_uint;
pub extern fn open([*c]const u8, c_int, ...) c_int;
pub extern fn openat(c_int, [*c]const u8, c_int, ...) c_int;
pub extern fn creat([*c]const u8, mode_t) c_int;
pub extern fn fcntl(c_int, c_int, ...) c_int;
pub extern fn openx_np([*c]const u8, c_int, filesec_t) c_int;
pub extern fn open_dprotected_np([*c]const u8, c_int, c_int, c_int, ...) c_int;
pub extern fn flock(c_int, c_int) c_int;
pub extern fn filesec_init() filesec_t;
pub extern fn filesec_dup(filesec_t) filesec_t;
pub extern fn filesec_free(filesec_t) void;
pub extern fn filesec_get_property(filesec_t, filesec_property_t, ?*anyopaque) c_int;
pub extern fn filesec_query_property(filesec_t, filesec_property_t, [*c]c_int) c_int;
pub extern fn filesec_set_property(filesec_t, filesec_property_t, ?*const anyopaque) c_int;
pub extern fn filesec_unset_property(filesec_t, filesec_property_t) c_int;
pub extern fn os_retain(object: ?*anyopaque) ?*anyopaque;
pub extern fn os_release(object: ?*anyopaque) void;
pub const OS_CLOCK_MACH_ABSOLUTE_TIME: u32 = 32;
pub const os_clockid_t = u32;
pub const struct_os_workgroup_attr_opaque_s = extern struct {
    sig: u32,
    @"opaque": [60]u8,
};
pub const struct_os_workgroup_interval_data_opaque_s = extern struct {
    sig: u32,
    @"opaque": [56]u8,
};
pub const struct_os_workgroup_join_token_opaque_s = extern struct {
    sig: u32,
    @"opaque": [36]u8,
};
pub const struct_os_workgroup_s = opaque {};
pub const os_workgroup_t = ?*struct_os_workgroup_s;
pub const os_workgroup_attr_s = struct_os_workgroup_attr_opaque_s;
pub const os_workgroup_attr_t = [*c]struct_os_workgroup_attr_opaque_s;
pub extern fn os_workgroup_copy_port(wg: os_workgroup_t, mach_port_out: [*c]mach_port_t) c_int;
pub extern fn os_workgroup_create_with_port(name: [*c]const u8, mach_port: mach_port_t) os_workgroup_t;
pub extern fn os_workgroup_create_with_workgroup(name: [*c]const u8, wg: os_workgroup_t) os_workgroup_t;
pub const os_workgroup_join_token_s = struct_os_workgroup_join_token_opaque_s;
pub const os_workgroup_join_token_t = [*c]struct_os_workgroup_join_token_opaque_s;
pub extern fn os_workgroup_join(wg: os_workgroup_t, token_out: os_workgroup_join_token_t) c_int;
pub extern fn os_workgroup_leave(wg: os_workgroup_t, token: os_workgroup_join_token_t) void;
pub const os_workgroup_index = u32;
pub const os_workgroup_working_arena_destructor_t = ?*const fn (?*anyopaque) callconv(.C) void;
pub extern fn os_workgroup_set_working_arena(wg: os_workgroup_t, arena: ?*anyopaque, max_workers: u32, destructor: os_workgroup_working_arena_destructor_t) c_int;
pub extern fn os_workgroup_get_working_arena(wg: os_workgroup_t, index_out: [*c]os_workgroup_index) ?*anyopaque;
pub extern fn os_workgroup_cancel(wg: os_workgroup_t) void;
pub extern fn os_workgroup_testcancel(wg: os_workgroup_t) bool;
pub const struct_os_workgroup_max_parallel_threads_attr_s = opaque {};
pub const os_workgroup_mpt_attr_s = struct_os_workgroup_max_parallel_threads_attr_s;
pub const os_workgroup_mpt_attr_t = ?*struct_os_workgroup_max_parallel_threads_attr_s;
pub extern fn os_workgroup_max_parallel_threads(wg: os_workgroup_t, attr: os_workgroup_mpt_attr_t) c_int;
pub const os_workgroup_interval_t = os_workgroup_t;
pub const os_workgroup_interval_data_s = struct_os_workgroup_interval_data_opaque_s;
pub const os_workgroup_interval_data_t = [*c]struct_os_workgroup_interval_data_opaque_s;
pub extern fn os_workgroup_interval_start(wg: os_workgroup_interval_t, start: u64, deadline: u64, data: os_workgroup_interval_data_t) c_int;
pub extern fn os_workgroup_interval_update(wg: os_workgroup_interval_t, deadline: u64, data: os_workgroup_interval_data_t) c_int;
pub extern fn os_workgroup_interval_finish(wg: os_workgroup_interval_t, data: os_workgroup_interval_data_t) c_int;
pub const os_workgroup_parallel_t = os_workgroup_t;
pub extern fn os_workgroup_parallel_create(name: [*c]const u8, attr: os_workgroup_attr_t) os_workgroup_parallel_t;
pub const dispatch_function_t = ?*const fn (?*anyopaque) callconv(.C) void;
pub const struct_time_value = extern struct {
    seconds: integer_t,
    microseconds: integer_t,
};
pub const time_value_t = struct_time_value;
pub const alarm_type_t = c_int;
pub const sleep_type_t = c_int;
pub const clock_id_t = c_int;
pub const clock_flavor_t = c_int;
pub const clock_attr_t = [*c]c_int;
pub const clock_res_t = c_int;
pub const struct_mach_timespec = extern struct {
    tv_sec: c_uint,
    tv_nsec: clock_res_t,
};
pub const mach_timespec_t = struct_mach_timespec;
pub const dispatch_time_t = u64;
pub const DISPATCH_WALLTIME_NOW: c_ulong = 18446744073709551614;
const enum_unnamed_43 = c_ulong;
pub extern fn dispatch_time(when: dispatch_time_t, delta: i64) dispatch_time_t;
pub extern fn dispatch_walltime(when: [*c]const struct_timespec, delta: i64) dispatch_time_t;
pub const QOS_CLASS_USER_INTERACTIVE: c_int = 33;
pub const QOS_CLASS_USER_INITIATED: c_int = 25;
pub const QOS_CLASS_DEFAULT: c_int = 21;
pub const QOS_CLASS_UTILITY: c_int = 17;
pub const QOS_CLASS_BACKGROUND: c_int = 9;
pub const QOS_CLASS_UNSPECIFIED: c_int = 0;
const enum_unnamed_44 = c_uint;
pub const qos_class_t = c_uint;
pub extern fn qos_class_self() qos_class_t;
pub extern fn qos_class_main() qos_class_t;
pub const struct__os_object_s = opaque {};
pub const struct_dispatch_object_s = opaque {};
pub const struct_dispatch_queue_s = opaque {};
pub const struct_dispatch_queue_attr_s = opaque {};
pub const struct_dispatch_group_s = opaque {};
pub const struct_dispatch_source_s = opaque {};
pub const struct_dispatch_channel_s = opaque {};
pub const struct_dispatch_mach_s = opaque {};
pub const struct_dispatch_mach_msg_s = opaque {};
pub const struct_dispatch_semaphore_s = opaque {};
pub const struct_dispatch_data_s = opaque {};
pub const struct_dispatch_io_s = opaque {};
pub const dispatch_object_t = extern union {
    _os_obj: ?*struct__os_object_s,
    _do: ?*struct_dispatch_object_s,
    _dq: ?*struct_dispatch_queue_s,
    _dqa: ?*struct_dispatch_queue_attr_s,
    _dg: ?*struct_dispatch_group_s,
    _ds: ?*struct_dispatch_source_s,
    _dch: ?*struct_dispatch_channel_s,
    _dm: ?*struct_dispatch_mach_s,
    _dmsg: ?*struct_dispatch_mach_msg_s,
    _dsema: ?*struct_dispatch_semaphore_s,
    _ddata: ?*struct_dispatch_data_s,
    _dchannel: ?*struct_dispatch_io_s,
}; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/object.h:179:16: warning: unsupported type: 'BlockPointer'
pub const dispatch_block_t = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/object.h:179:16
pub const dispatch_qos_class_t = qos_class_t;
pub extern fn dispatch_retain(object: dispatch_object_t) void;
pub extern fn dispatch_release(object: dispatch_object_t) void;
pub extern fn dispatch_get_context(object: dispatch_object_t) ?*anyopaque;
pub extern fn dispatch_set_context(object: dispatch_object_t, context: ?*anyopaque) void;
pub extern fn dispatch_set_finalizer_f(object: dispatch_object_t, finalizer: dispatch_function_t) void;
pub extern fn dispatch_activate(object: dispatch_object_t) void;
pub extern fn dispatch_suspend(object: dispatch_object_t) void;
pub extern fn dispatch_resume(object: dispatch_object_t) void;
pub extern fn dispatch_set_qos_class_floor(object: dispatch_object_t, qos_class: dispatch_qos_class_t, relative_priority: c_int) void;
pub extern fn dispatch_wait(object: ?*anyopaque, timeout: dispatch_time_t) isize;
pub extern fn dispatch_notify(object: ?*anyopaque, queue: dispatch_object_t, notification_block: dispatch_block_t) void;
pub extern fn dispatch_cancel(object: ?*anyopaque) void;
pub extern fn dispatch_testcancel(object: ?*anyopaque) isize;
pub extern fn dispatch_debug(object: dispatch_object_t, message: [*c]const u8, ...) void;
pub extern fn dispatch_debugv(object: dispatch_object_t, message: [*c]const u8, ap: va_list) void;
pub const dispatch_queue_t = ?*struct_dispatch_queue_s;
pub const dispatch_queue_global_t = dispatch_queue_t;
pub const dispatch_queue_serial_t = dispatch_queue_t;
pub const dispatch_queue_main_t = dispatch_queue_serial_t;
pub const dispatch_queue_concurrent_t = dispatch_queue_t;
pub extern fn dispatch_async(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_async_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_sync(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_sync_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_async_and_wait(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_async_and_wait_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/queue.h:481:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_apply = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/queue.h:481:1
pub extern fn dispatch_apply_f(iterations: usize, queue: dispatch_queue_t, context: ?*anyopaque, work: ?fn (?*anyopaque, usize) callconv(.C) void) void;
pub extern fn dispatch_get_current_queue() dispatch_queue_t;
pub extern var _dispatch_main_q: struct_dispatch_queue_s;
pub inline fn dispatch_get_main_queue() dispatch_queue_main_t {
    return @ptrCast(dispatch_queue_main_t, &_dispatch_main_q);
}
pub const dispatch_queue_priority_t = c_long;
pub extern fn dispatch_get_global_queue(identifier: isize, flags: usize) dispatch_queue_global_t;
pub const dispatch_queue_attr_t = ?*struct_dispatch_queue_attr_s;
pub extern var _dispatch_queue_attr_concurrent: struct_dispatch_queue_attr_s;
pub extern fn dispatch_queue_attr_make_initially_inactive(attr: dispatch_queue_attr_t) dispatch_queue_attr_t;
pub const DISPATCH_AUTORELEASE_FREQUENCY_INHERIT: c_ulong = 0;
pub const DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM: c_ulong = 1;
pub const DISPATCH_AUTORELEASE_FREQUENCY_NEVER: c_ulong = 2;
pub const dispatch_autorelease_frequency_t = c_ulong;
pub extern fn dispatch_queue_attr_make_with_autorelease_frequency(attr: dispatch_queue_attr_t, frequency: dispatch_autorelease_frequency_t) dispatch_queue_attr_t;
pub extern fn dispatch_queue_attr_make_with_qos_class(attr: dispatch_queue_attr_t, qos_class: dispatch_qos_class_t, relative_priority: c_int) dispatch_queue_attr_t;
pub extern fn dispatch_queue_create_with_target(label: [*c]const u8, attr: dispatch_queue_attr_t, target: dispatch_queue_t) dispatch_queue_t;
pub extern fn dispatch_queue_create(label: [*c]const u8, attr: dispatch_queue_attr_t) dispatch_queue_t;
pub extern fn dispatch_queue_get_label(queue: dispatch_queue_t) [*c]const u8;
pub extern fn dispatch_queue_get_qos_class(queue: dispatch_queue_t, relative_priority_ptr: [*c]c_int) dispatch_qos_class_t;
pub extern fn dispatch_set_target_queue(object: dispatch_object_t, queue: dispatch_queue_t) void;
pub extern fn dispatch_main() noreturn;
pub extern fn dispatch_after(when: dispatch_time_t, queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_after_f(when: dispatch_time_t, queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_barrier_async(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_barrier_async_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_barrier_sync(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_barrier_sync_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_barrier_async_and_wait(queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_barrier_async_and_wait_f(queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_queue_set_specific(queue: dispatch_queue_t, key: ?*const anyopaque, context: ?*anyopaque, destructor: dispatch_function_t) void;
pub extern fn dispatch_queue_get_specific(queue: dispatch_queue_t, key: ?*const anyopaque) ?*anyopaque;
pub extern fn dispatch_get_specific(key: ?*const anyopaque) ?*anyopaque;
pub extern fn dispatch_assert_queue(queue: dispatch_queue_t) void;
pub extern fn dispatch_assert_queue_barrier(queue: dispatch_queue_t) void;
pub extern fn dispatch_assert_queue_not(queue: dispatch_queue_t) void;
pub const DISPATCH_BLOCK_BARRIER: c_ulong = 1;
pub const DISPATCH_BLOCK_DETACHED: c_ulong = 2;
pub const DISPATCH_BLOCK_ASSIGN_CURRENT: c_ulong = 4;
pub const DISPATCH_BLOCK_NO_QOS_CLASS: c_ulong = 8;
pub const DISPATCH_BLOCK_INHERIT_QOS_CLASS: c_ulong = 16;
pub const DISPATCH_BLOCK_ENFORCE_QOS_CLASS: c_ulong = 32;
pub const dispatch_block_flags_t = c_ulong;
pub const dispatch_block_create = @compileError("unable to resolve function type clang.TypeClass.MacroQualified"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/block.h:172:1
pub const dispatch_block_create_with_qos_class = @compileError("unable to resolve function type clang.TypeClass.MacroQualified"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/block.h:244:1
pub extern fn dispatch_block_perform(flags: dispatch_block_flags_t, block: dispatch_block_t) void;
pub extern fn dispatch_block_wait(block: dispatch_block_t, timeout: dispatch_time_t) isize;
pub extern fn dispatch_block_notify(block: dispatch_block_t, queue: dispatch_queue_t, notification_block: dispatch_block_t) void;
pub extern fn dispatch_block_cancel(block: dispatch_block_t) void;
pub extern fn dispatch_block_testcancel(block: dispatch_block_t) isize;
pub const kern_return_t = c_int;
pub const mach_msg_timeout_t = natural_t;
pub const mach_msg_bits_t = c_uint;
pub const mach_msg_size_t = natural_t;
pub const mach_msg_id_t = integer_t;
pub const mach_msg_priority_t = c_uint;
pub const mach_msg_type_name_t = c_uint;
pub const mach_msg_copy_options_t = c_uint;
pub const mach_msg_guard_flags_t = c_uint;
pub const mach_msg_descriptor_type_t = c_uint; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/message.h:286:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_type_descriptor_t = opaque {}; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/message.h:294:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_port_descriptor_t = opaque {}; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/message.h:303:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_descriptor32_t = opaque {}; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/message.h:311:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_descriptor64_t = opaque {}; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/message.h:323:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_descriptor_t = opaque {}; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/message.h:335:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_ports_descriptor32_t = opaque {}; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/message.h:343:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_ports_descriptor64_t = opaque {}; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/message.h:355:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_ool_ports_descriptor_t = opaque {}; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/message.h:367:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_guarded_port_descriptor32_t = opaque {}; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/message.h:374:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_guarded_port_descriptor64_t = opaque {}; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/message.h:385:32: warning: struct demoted to opaque type - has bitfield
pub const mach_msg_guarded_port_descriptor_t = opaque {};
pub const mach_msg_descriptor_t = extern union {
    port: mach_msg_port_descriptor_t,
    out_of_line: mach_msg_ool_descriptor_t,
    ool_ports: mach_msg_ool_ports_descriptor_t,
    type: mach_msg_type_descriptor_t,
    guarded_port: mach_msg_guarded_port_descriptor_t,
};
pub const mach_msg_body_t = extern struct {
    msgh_descriptor_count: mach_msg_size_t,
};
pub const mach_msg_header_t = extern struct {
    msgh_bits: mach_msg_bits_t,
    msgh_size: mach_msg_size_t,
    msgh_remote_port: mach_port_t,
    msgh_local_port: mach_port_t,
    msgh_voucher_port: mach_port_name_t,
    msgh_id: mach_msg_id_t,
};
pub const mach_msg_base_t = extern struct {
    header: mach_msg_header_t,
    body: mach_msg_body_t,
};
pub const mach_msg_trailer_type_t = c_uint;
pub const mach_msg_trailer_size_t = c_uint;
pub const mach_msg_trailer_info_t = [*c]u8;
pub const mach_msg_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t,
    msgh_trailer_size: mach_msg_trailer_size_t,
};
pub const mach_msg_seqno_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t,
    msgh_trailer_size: mach_msg_trailer_size_t,
    msgh_seqno: mach_port_seqno_t,
};
pub const security_token_t = extern struct {
    val: [2]c_uint,
};
pub const mach_msg_security_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t,
    msgh_trailer_size: mach_msg_trailer_size_t,
    msgh_seqno: mach_port_seqno_t,
    msgh_sender: security_token_t,
};
pub const audit_token_t = extern struct {
    val: [8]c_uint,
};
pub const mach_msg_audit_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t,
    msgh_trailer_size: mach_msg_trailer_size_t,
    msgh_seqno: mach_port_seqno_t,
    msgh_sender: security_token_t,
    msgh_audit: audit_token_t,
};
pub const mach_msg_context_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t,
    msgh_trailer_size: mach_msg_trailer_size_t,
    msgh_seqno: mach_port_seqno_t,
    msgh_sender: security_token_t,
    msgh_audit: audit_token_t,
    msgh_context: mach_port_context_t,
};
pub const msg_labels_t = extern struct {
    sender: mach_port_name_t,
};
pub const mach_msg_filter_id = c_int;
pub const mach_msg_mac_trailer_t = extern struct {
    msgh_trailer_type: mach_msg_trailer_type_t,
    msgh_trailer_size: mach_msg_trailer_size_t,
    msgh_seqno: mach_port_seqno_t,
    msgh_sender: security_token_t,
    msgh_audit: audit_token_t,
    msgh_context: mach_port_context_t,
    msgh_ad: mach_msg_filter_id,
    msgh_labels: msg_labels_t,
};
pub const mach_msg_max_trailer_t = mach_msg_mac_trailer_t;
pub const mach_msg_format_0_trailer_t = mach_msg_security_trailer_t;
pub extern const KERNEL_SECURITY_TOKEN: security_token_t;
pub extern const KERNEL_AUDIT_TOKEN: audit_token_t;
pub const mach_msg_options_t = integer_t;
pub const mach_msg_empty_send_t = extern struct {
    header: mach_msg_header_t,
};
pub const mach_msg_empty_rcv_t = extern struct {
    header: mach_msg_header_t,
    trailer: mach_msg_trailer_t,
};
pub const mach_msg_empty_t = extern union {
    send: mach_msg_empty_send_t,
    rcv: mach_msg_empty_rcv_t,
};
pub const mach_msg_type_size_t = natural_t;
pub const mach_msg_type_number_t = natural_t;
pub const mach_msg_option_t = integer_t;
pub const mach_msg_return_t = kern_return_t;
pub extern fn mach_msg_overwrite(msg: [*c]mach_msg_header_t, option: mach_msg_option_t, send_size: mach_msg_size_t, rcv_size: mach_msg_size_t, rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t, notify: mach_port_name_t, rcv_msg: [*c]mach_msg_header_t, rcv_limit: mach_msg_size_t) mach_msg_return_t;
pub extern fn mach_msg(msg: [*c]mach_msg_header_t, option: mach_msg_option_t, send_size: mach_msg_size_t, rcv_size: mach_msg_size_t, rcv_name: mach_port_name_t, timeout: mach_msg_timeout_t, notify: mach_port_name_t) mach_msg_return_t;
pub extern fn mach_voucher_deallocate(voucher: mach_port_name_t) kern_return_t;
pub const dispatch_source_t = ?*struct_dispatch_source_s;
pub const struct_dispatch_source_type_s = opaque {};
pub const dispatch_source_type_t = ?*const struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_data_add: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_data_or: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_data_replace: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_mach_send: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_mach_recv: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_memorypressure: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_proc: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_read: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_signal: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_timer: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_vnode: struct_dispatch_source_type_s;
pub extern const _dispatch_source_type_write: struct_dispatch_source_type_s;
pub const dispatch_source_mach_send_flags_t = c_ulong;
pub const dispatch_source_mach_recv_flags_t = c_ulong;
pub const dispatch_source_memorypressure_flags_t = c_ulong;
pub const dispatch_source_proc_flags_t = c_ulong;
pub const dispatch_source_vnode_flags_t = c_ulong;
pub const dispatch_source_timer_flags_t = c_ulong;
pub extern fn dispatch_source_create(@"type": dispatch_source_type_t, handle: usize, mask: usize, queue: dispatch_queue_t) dispatch_source_t;
pub extern fn dispatch_source_set_event_handler(source: dispatch_source_t, handler: dispatch_block_t) void;
pub extern fn dispatch_source_set_event_handler_f(source: dispatch_source_t, handler: dispatch_function_t) void;
pub extern fn dispatch_source_set_cancel_handler(source: dispatch_source_t, handler: dispatch_block_t) void;
pub extern fn dispatch_source_set_cancel_handler_f(source: dispatch_source_t, handler: dispatch_function_t) void;
pub extern fn dispatch_source_cancel(source: dispatch_source_t) void;
pub extern fn dispatch_source_testcancel(source: dispatch_source_t) isize;
pub extern fn dispatch_source_get_handle(source: dispatch_source_t) usize;
pub extern fn dispatch_source_get_mask(source: dispatch_source_t) usize;
pub extern fn dispatch_source_get_data(source: dispatch_source_t) usize;
pub extern fn dispatch_source_merge_data(source: dispatch_source_t, value: usize) void;
pub extern fn dispatch_source_set_timer(source: dispatch_source_t, start: dispatch_time_t, interval: u64, leeway: u64) void;
pub extern fn dispatch_source_set_registration_handler(source: dispatch_source_t, handler: dispatch_block_t) void;
pub extern fn dispatch_source_set_registration_handler_f(source: dispatch_source_t, handler: dispatch_function_t) void;
pub const dispatch_group_t = ?*struct_dispatch_group_s;
pub extern fn dispatch_group_create() dispatch_group_t;
pub extern fn dispatch_group_async(group: dispatch_group_t, queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_group_async_f(group: dispatch_group_t, queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_group_wait(group: dispatch_group_t, timeout: dispatch_time_t) isize;
pub extern fn dispatch_group_notify(group: dispatch_group_t, queue: dispatch_queue_t, block: dispatch_block_t) void;
pub extern fn dispatch_group_notify_f(group: dispatch_group_t, queue: dispatch_queue_t, context: ?*anyopaque, work: dispatch_function_t) void;
pub extern fn dispatch_group_enter(group: dispatch_group_t) void;
pub extern fn dispatch_group_leave(group: dispatch_group_t) void;
pub const dispatch_semaphore_t = ?*struct_dispatch_semaphore_s;
pub extern fn dispatch_semaphore_create(value: isize) dispatch_semaphore_t;
pub extern fn dispatch_semaphore_wait(dsema: dispatch_semaphore_t, timeout: dispatch_time_t) isize;
pub extern fn dispatch_semaphore_signal(dsema: dispatch_semaphore_t) isize;
pub const dispatch_once_t = isize;
pub extern fn dispatch_once(predicate: [*c]dispatch_once_t, block: dispatch_block_t) void; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:168:38: warning: TODO implement translation of stmt class GCCAsmStmtClass
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/once.h:80:1: warning: unable to translate function, demoted to extern
pub extern fn _dispatch_once(arg_predicate: [*c]dispatch_once_t, arg_block: dispatch_block_t) void;
pub extern fn dispatch_once_f(predicate: [*c]dispatch_once_t, context: ?*anyopaque, function: dispatch_function_t) void; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:168:38: warning: TODO implement translation of stmt class GCCAsmStmtClass
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/once.h:107:1: warning: unable to translate function, demoted to extern
pub extern fn _dispatch_once_f(arg_predicate: [*c]dispatch_once_t, arg_context: ?*anyopaque, arg_function: dispatch_function_t) void;
pub const dispatch_data_t = ?*struct_dispatch_data_s;
pub extern var _dispatch_data_empty: struct_dispatch_data_s;
pub extern const _dispatch_data_destructor_free: dispatch_block_t;
pub extern const _dispatch_data_destructor_munmap: dispatch_block_t;
pub extern fn dispatch_data_create(buffer: ?*const anyopaque, size: usize, queue: dispatch_queue_t, destructor: dispatch_block_t) dispatch_data_t;
pub extern fn dispatch_data_get_size(data: dispatch_data_t) usize;
pub extern fn dispatch_data_create_map(data: dispatch_data_t, buffer_ptr: [*c]?*const anyopaque, size_ptr: [*c]usize) dispatch_data_t;
pub extern fn dispatch_data_create_concat(data1: dispatch_data_t, data2: dispatch_data_t) dispatch_data_t;
pub extern fn dispatch_data_create_subrange(data: dispatch_data_t, offset: usize, length: usize) dispatch_data_t; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/data.h:220:16: warning: unsupported type: 'BlockPointer'
pub const dispatch_data_applier_t = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/data.h:220:16
pub extern fn dispatch_data_apply(data: dispatch_data_t, applier: dispatch_data_applier_t) bool;
pub extern fn dispatch_data_copy_region(data: dispatch_data_t, location: usize, offset_ptr: [*c]usize) dispatch_data_t;
pub const dispatch_fd_t = c_int; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/io.h:112:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_read = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/io.h:112:1
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/io.h:151:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_write = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/io.h:151:1
pub const dispatch_io_t = ?*struct_dispatch_io_s;
pub const dispatch_io_type_t = c_ulong; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/io.h:222:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_io_create = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/io.h:222:1
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/io.h:258:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_io_create_with_path = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/io.h:258:1
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/io.h:298:1: warning: unsupported type: 'BlockPointer'
pub const dispatch_io_create_with_io = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/io.h:298:1
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/io.h:311:16: warning: unsupported type: 'BlockPointer'
pub const dispatch_io_handler_t = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/io.h:311:16
pub extern fn dispatch_io_read(channel: dispatch_io_t, offset: off_t, length: usize, queue: dispatch_queue_t, io_handler: dispatch_io_handler_t) void;
pub extern fn dispatch_io_write(channel: dispatch_io_t, offset: off_t, data: dispatch_data_t, queue: dispatch_queue_t, io_handler: dispatch_io_handler_t) void;
pub const dispatch_io_close_flags_t = c_ulong;
pub extern fn dispatch_io_close(channel: dispatch_io_t, flags: dispatch_io_close_flags_t) void;
pub extern fn dispatch_io_barrier(channel: dispatch_io_t, barrier: dispatch_block_t) void;
pub extern fn dispatch_io_get_descriptor(channel: dispatch_io_t) dispatch_fd_t;
pub extern fn dispatch_io_set_high_water(channel: dispatch_io_t, high_water: usize) void;
pub extern fn dispatch_io_set_low_water(channel: dispatch_io_t, low_water: usize) void;
pub const dispatch_io_interval_flags_t = c_ulong;
pub extern fn dispatch_io_set_interval(channel: dispatch_io_t, interval: u64, flags: dispatch_io_interval_flags_t) void;
pub const dispatch_workloop_t = dispatch_queue_t;
pub extern fn dispatch_workloop_create(label: [*c]const u8) dispatch_workloop_t;
pub extern fn dispatch_workloop_create_inactive(label: [*c]const u8) dispatch_workloop_t;
pub extern fn dispatch_workloop_set_autorelease_frequency(workloop: dispatch_workloop_t, frequency: dispatch_autorelease_frequency_t) void;
pub extern fn dispatch_workloop_set_os_workgroup(workloop: dispatch_workloop_t, workgroup: os_workgroup_t) void;
pub const CFStreamError = extern struct {
    domain: CFIndex,
    @"error": SInt32,
};
pub const CFStreamPropertyKey = CFStringRef;
pub const CFStreamStatus = CFIndex;
pub const kCFStreamStatusNotOpen: c_int = 0;
pub const kCFStreamStatusOpening: c_int = 1;
pub const kCFStreamStatusOpen: c_int = 2;
pub const kCFStreamStatusReading: c_int = 3;
pub const kCFStreamStatusWriting: c_int = 4;
pub const kCFStreamStatusAtEnd: c_int = 5;
pub const kCFStreamStatusClosed: c_int = 6;
pub const kCFStreamStatusError: c_int = 7;
const enum_unnamed_45 = c_uint;
pub const CFStreamEventType = CFOptionFlags;
pub const kCFStreamEventNone: c_int = 0;
pub const kCFStreamEventOpenCompleted: c_int = 1;
pub const kCFStreamEventHasBytesAvailable: c_int = 2;
pub const kCFStreamEventCanAcceptBytes: c_int = 4;
pub const kCFStreamEventErrorOccurred: c_int = 8;
pub const kCFStreamEventEndEncountered: c_int = 16;
const enum_unnamed_46 = c_uint;
pub const CFStreamClientContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: ?fn (?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?fn (?*anyopaque) callconv(.C) void,
    copyDescription: ?fn (?*anyopaque) callconv(.C) CFStringRef,
};
pub const struct___CFReadStream = opaque {};
pub const CFReadStreamRef = ?*struct___CFReadStream;
pub const struct___CFWriteStream = opaque {};
pub const CFWriteStreamRef = ?*struct___CFWriteStream;
pub const CFReadStreamClientCallBack = ?*const fn (CFReadStreamRef, CFStreamEventType, ?*anyopaque) callconv(.C) void;
pub const CFWriteStreamClientCallBack = ?*const fn (CFWriteStreamRef, CFStreamEventType, ?*anyopaque) callconv(.C) void;
pub extern fn CFReadStreamGetTypeID() CFTypeID;
pub extern fn CFWriteStreamGetTypeID() CFTypeID;
pub extern const kCFStreamPropertyDataWritten: CFStreamPropertyKey;
pub extern fn CFReadStreamCreateWithBytesNoCopy(alloc: CFAllocatorRef, bytes: [*c]const UInt8, length: CFIndex, bytesDeallocator: CFAllocatorRef) CFReadStreamRef;
pub extern fn CFWriteStreamCreateWithBuffer(alloc: CFAllocatorRef, buffer: [*c]UInt8, bufferCapacity: CFIndex) CFWriteStreamRef;
pub extern fn CFWriteStreamCreateWithAllocatedBuffers(alloc: CFAllocatorRef, bufferAllocator: CFAllocatorRef) CFWriteStreamRef;
pub extern fn CFReadStreamCreateWithFile(alloc: CFAllocatorRef, fileURL: CFURLRef) CFReadStreamRef;
pub extern fn CFWriteStreamCreateWithFile(alloc: CFAllocatorRef, fileURL: CFURLRef) CFWriteStreamRef;
pub extern fn CFStreamCreateBoundPair(alloc: CFAllocatorRef, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef, transferBufferSize: CFIndex) void;
pub extern const kCFStreamPropertyAppendToFile: CFStreamPropertyKey;
pub extern const kCFStreamPropertyFileCurrentOffset: CFStreamPropertyKey;
pub extern const kCFStreamPropertySocketNativeHandle: CFStreamPropertyKey;
pub extern const kCFStreamPropertySocketRemoteHostName: CFStreamPropertyKey;
pub extern const kCFStreamPropertySocketRemotePortNumber: CFStreamPropertyKey;
pub extern const kCFStreamErrorDomainSOCKS: c_int;
pub extern const kCFStreamPropertySOCKSProxy: CFStringRef;
pub extern const kCFStreamPropertySOCKSProxyHost: CFStringRef;
pub extern const kCFStreamPropertySOCKSProxyPort: CFStringRef;
pub extern const kCFStreamPropertySOCKSVersion: CFStringRef;
pub extern const kCFStreamSocketSOCKSVersion4: CFStringRef;
pub extern const kCFStreamSocketSOCKSVersion5: CFStringRef;
pub extern const kCFStreamPropertySOCKSUser: CFStringRef;
pub extern const kCFStreamPropertySOCKSPassword: CFStringRef;
pub extern const kCFStreamErrorDomainSSL: c_int;
pub extern const kCFStreamPropertySocketSecurityLevel: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelNone: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelSSLv2: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelSSLv3: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelTLSv1: CFStringRef;
pub extern const kCFStreamSocketSecurityLevelNegotiatedSSL: CFStringRef;
pub extern const kCFStreamPropertyShouldCloseNativeSocket: CFStringRef;
pub extern fn CFStreamCreatePairWithSocket(alloc: CFAllocatorRef, sock: CFSocketNativeHandle, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef) void;
pub extern fn CFStreamCreatePairWithSocketToHost(alloc: CFAllocatorRef, host: CFStringRef, port: UInt32, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef) void;
pub extern fn CFStreamCreatePairWithPeerSocketSignature(alloc: CFAllocatorRef, signature: [*c]const CFSocketSignature, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef) void;
pub extern fn CFReadStreamGetStatus(stream: CFReadStreamRef) CFStreamStatus;
pub extern fn CFWriteStreamGetStatus(stream: CFWriteStreamRef) CFStreamStatus;
pub extern fn CFReadStreamCopyError(stream: CFReadStreamRef) CFErrorRef;
pub extern fn CFWriteStreamCopyError(stream: CFWriteStreamRef) CFErrorRef;
pub extern fn CFReadStreamOpen(stream: CFReadStreamRef) Boolean;
pub extern fn CFWriteStreamOpen(stream: CFWriteStreamRef) Boolean;
pub extern fn CFReadStreamClose(stream: CFReadStreamRef) void;
pub extern fn CFWriteStreamClose(stream: CFWriteStreamRef) void;
pub extern fn CFReadStreamHasBytesAvailable(stream: CFReadStreamRef) Boolean;
pub extern fn CFReadStreamRead(stream: CFReadStreamRef, buffer: [*c]UInt8, bufferLength: CFIndex) CFIndex;
pub extern fn CFReadStreamGetBuffer(stream: CFReadStreamRef, maxBytesToRead: CFIndex, numBytesRead: [*c]CFIndex) [*c]const UInt8;
pub extern fn CFWriteStreamCanAcceptBytes(stream: CFWriteStreamRef) Boolean;
pub extern fn CFWriteStreamWrite(stream: CFWriteStreamRef, buffer: [*c]const UInt8, bufferLength: CFIndex) CFIndex;
pub extern fn CFReadStreamCopyProperty(stream: CFReadStreamRef, propertyName: CFStreamPropertyKey) CFTypeRef;
pub extern fn CFWriteStreamCopyProperty(stream: CFWriteStreamRef, propertyName: CFStreamPropertyKey) CFTypeRef;
pub extern fn CFReadStreamSetProperty(stream: CFReadStreamRef, propertyName: CFStreamPropertyKey, propertyValue: CFTypeRef) Boolean;
pub extern fn CFWriteStreamSetProperty(stream: CFWriteStreamRef, propertyName: CFStreamPropertyKey, propertyValue: CFTypeRef) Boolean;
pub extern fn CFReadStreamSetClient(stream: CFReadStreamRef, streamEvents: CFOptionFlags, clientCB: CFReadStreamClientCallBack, clientContext: [*c]CFStreamClientContext) Boolean;
pub extern fn CFWriteStreamSetClient(stream: CFWriteStreamRef, streamEvents: CFOptionFlags, clientCB: CFWriteStreamClientCallBack, clientContext: [*c]CFStreamClientContext) Boolean;
pub extern fn CFReadStreamScheduleWithRunLoop(stream: CFReadStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFRunLoopMode) void;
pub extern fn CFWriteStreamScheduleWithRunLoop(stream: CFWriteStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFRunLoopMode) void;
pub extern fn CFReadStreamUnscheduleFromRunLoop(stream: CFReadStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFRunLoopMode) void;
pub extern fn CFWriteStreamUnscheduleFromRunLoop(stream: CFWriteStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFRunLoopMode) void;
pub extern fn CFReadStreamSetDispatchQueue(stream: CFReadStreamRef, q: dispatch_queue_t) void;
pub extern fn CFWriteStreamSetDispatchQueue(stream: CFWriteStreamRef, q: dispatch_queue_t) void;
pub extern fn CFReadStreamCopyDispatchQueue(stream: CFReadStreamRef) dispatch_queue_t;
pub extern fn CFWriteStreamCopyDispatchQueue(stream: CFWriteStreamRef) dispatch_queue_t;
pub const CFStreamErrorDomain = CFIndex;
pub const kCFStreamErrorDomainCustom: c_int = -1;
pub const kCFStreamErrorDomainPOSIX: c_int = 1;
pub const kCFStreamErrorDomainMacOSStatus: c_int = 2;
const enum_unnamed_47 = c_int;
pub extern fn CFReadStreamGetError(stream: CFReadStreamRef) CFStreamError;
pub extern fn CFWriteStreamGetError(stream: CFWriteStreamRef) CFStreamError;
pub const CFPropertyListMutabilityOptions = CFOptionFlags;
pub const kCFPropertyListImmutable: c_int = 0;
pub const kCFPropertyListMutableContainers: c_int = 1;
pub const kCFPropertyListMutableContainersAndLeaves: c_int = 2;
const enum_unnamed_48 = c_uint;
pub extern fn CFPropertyListCreateFromXMLData(allocator: CFAllocatorRef, xmlData: CFDataRef, mutabilityOption: CFOptionFlags, errorString: [*c]CFStringRef) CFPropertyListRef;
pub extern fn CFPropertyListCreateXMLData(allocator: CFAllocatorRef, propertyList: CFPropertyListRef) CFDataRef;
pub extern fn CFPropertyListCreateDeepCopy(allocator: CFAllocatorRef, propertyList: CFPropertyListRef, mutabilityOption: CFOptionFlags) CFPropertyListRef;
pub const CFPropertyListFormat = CFIndex;
pub const kCFPropertyListOpenStepFormat: c_int = 1;
pub const kCFPropertyListXMLFormat_v1_0: c_int = 100;
pub const kCFPropertyListBinaryFormat_v1_0: c_int = 200;
const enum_unnamed_49 = c_uint;
pub extern fn CFPropertyListIsValid(plist: CFPropertyListRef, format: CFPropertyListFormat) Boolean;
pub extern fn CFPropertyListWriteToStream(propertyList: CFPropertyListRef, stream: CFWriteStreamRef, format: CFPropertyListFormat, errorString: [*c]CFStringRef) CFIndex;
pub extern fn CFPropertyListCreateFromStream(allocator: CFAllocatorRef, stream: CFReadStreamRef, streamLength: CFIndex, mutabilityOption: CFOptionFlags, format: [*c]CFPropertyListFormat, errorString: [*c]CFStringRef) CFPropertyListRef;
pub const kCFPropertyListReadCorruptError: c_int = 3840;
pub const kCFPropertyListReadUnknownVersionError: c_int = 3841;
pub const kCFPropertyListReadStreamError: c_int = 3842;
pub const kCFPropertyListWriteStreamError: c_int = 3851;
const enum_unnamed_50 = c_uint;
pub extern fn CFPropertyListCreateWithData(allocator: CFAllocatorRef, data: CFDataRef, options: CFOptionFlags, format: [*c]CFPropertyListFormat, @"error": [*c]CFErrorRef) CFPropertyListRef;
pub extern fn CFPropertyListCreateWithStream(allocator: CFAllocatorRef, stream: CFReadStreamRef, streamLength: CFIndex, options: CFOptionFlags, format: [*c]CFPropertyListFormat, @"error": [*c]CFErrorRef) CFPropertyListRef;
pub extern fn CFPropertyListWrite(propertyList: CFPropertyListRef, stream: CFWriteStreamRef, format: CFPropertyListFormat, options: CFOptionFlags, @"error": [*c]CFErrorRef) CFIndex;
pub extern fn CFPropertyListCreateData(allocator: CFAllocatorRef, propertyList: CFPropertyListRef, format: CFPropertyListFormat, options: CFOptionFlags, @"error": [*c]CFErrorRef) CFDataRef;
pub const CFSetRetainCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) ?*const anyopaque;
pub const CFSetReleaseCallBack = ?*const fn (CFAllocatorRef, ?*const anyopaque) callconv(.C) void;
pub const CFSetCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFStringRef;
pub const CFSetEqualCallBack = ?*const fn (?*const anyopaque, ?*const anyopaque) callconv(.C) Boolean;
pub const CFSetHashCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFHashCode;
pub const CFSetCallBacks = extern struct {
    version: CFIndex,
    retain: CFSetRetainCallBack,
    release: CFSetReleaseCallBack,
    copyDescription: CFSetCopyDescriptionCallBack,
    equal: CFSetEqualCallBack,
    hash: CFSetHashCallBack,
};
pub extern const kCFTypeSetCallBacks: CFSetCallBacks;
pub extern const kCFCopyStringSetCallBacks: CFSetCallBacks;
pub const CFSetApplierFunction = ?*const fn (?*const anyopaque, ?*anyopaque) callconv(.C) void;
pub const struct___CFSet = opaque {};
pub const CFSetRef = ?*const struct___CFSet;
pub const CFMutableSetRef = ?*struct___CFSet;
pub extern fn CFSetGetTypeID() CFTypeID;
pub extern fn CFSetCreate(allocator: CFAllocatorRef, values: [*c]?*const anyopaque, numValues: CFIndex, callBacks: [*c]const CFSetCallBacks) CFSetRef;
pub extern fn CFSetCreateCopy(allocator: CFAllocatorRef, theSet: CFSetRef) CFSetRef;
pub extern fn CFSetCreateMutable(allocator: CFAllocatorRef, capacity: CFIndex, callBacks: [*c]const CFSetCallBacks) CFMutableSetRef;
pub extern fn CFSetCreateMutableCopy(allocator: CFAllocatorRef, capacity: CFIndex, theSet: CFSetRef) CFMutableSetRef;
pub extern fn CFSetGetCount(theSet: CFSetRef) CFIndex;
pub extern fn CFSetGetCountOfValue(theSet: CFSetRef, value: ?*const anyopaque) CFIndex;
pub extern fn CFSetContainsValue(theSet: CFSetRef, value: ?*const anyopaque) Boolean;
pub extern fn CFSetGetValue(theSet: CFSetRef, value: ?*const anyopaque) ?*const anyopaque;
pub extern fn CFSetGetValueIfPresent(theSet: CFSetRef, candidate: ?*const anyopaque, value: [*c]?*const anyopaque) Boolean;
pub extern fn CFSetGetValues(theSet: CFSetRef, values: [*c]?*const anyopaque) void;
pub extern fn CFSetApplyFunction(theSet: CFSetRef, applier: CFSetApplierFunction, context: ?*anyopaque) void;
pub extern fn CFSetAddValue(theSet: CFMutableSetRef, value: ?*const anyopaque) void;
pub extern fn CFSetReplaceValue(theSet: CFMutableSetRef, value: ?*const anyopaque) void;
pub extern fn CFSetSetValue(theSet: CFMutableSetRef, value: ?*const anyopaque) void;
pub extern fn CFSetRemoveValue(theSet: CFMutableSetRef, value: ?*const anyopaque) void;
pub extern fn CFSetRemoveAllValues(theSet: CFMutableSetRef) void;
pub const CFStringEncodings = CFIndex;
pub const kCFStringEncodingMacJapanese: c_int = 1;
pub const kCFStringEncodingMacChineseTrad: c_int = 2;
pub const kCFStringEncodingMacKorean: c_int = 3;
pub const kCFStringEncodingMacArabic: c_int = 4;
pub const kCFStringEncodingMacHebrew: c_int = 5;
pub const kCFStringEncodingMacGreek: c_int = 6;
pub const kCFStringEncodingMacCyrillic: c_int = 7;
pub const kCFStringEncodingMacDevanagari: c_int = 9;
pub const kCFStringEncodingMacGurmukhi: c_int = 10;
pub const kCFStringEncodingMacGujarati: c_int = 11;
pub const kCFStringEncodingMacOriya: c_int = 12;
pub const kCFStringEncodingMacBengali: c_int = 13;
pub const kCFStringEncodingMacTamil: c_int = 14;
pub const kCFStringEncodingMacTelugu: c_int = 15;
pub const kCFStringEncodingMacKannada: c_int = 16;
pub const kCFStringEncodingMacMalayalam: c_int = 17;
pub const kCFStringEncodingMacSinhalese: c_int = 18;
pub const kCFStringEncodingMacBurmese: c_int = 19;
pub const kCFStringEncodingMacKhmer: c_int = 20;
pub const kCFStringEncodingMacThai: c_int = 21;
pub const kCFStringEncodingMacLaotian: c_int = 22;
pub const kCFStringEncodingMacGeorgian: c_int = 23;
pub const kCFStringEncodingMacArmenian: c_int = 24;
pub const kCFStringEncodingMacChineseSimp: c_int = 25;
pub const kCFStringEncodingMacTibetan: c_int = 26;
pub const kCFStringEncodingMacMongolian: c_int = 27;
pub const kCFStringEncodingMacEthiopic: c_int = 28;
pub const kCFStringEncodingMacCentralEurRoman: c_int = 29;
pub const kCFStringEncodingMacVietnamese: c_int = 30;
pub const kCFStringEncodingMacExtArabic: c_int = 31;
pub const kCFStringEncodingMacSymbol: c_int = 33;
pub const kCFStringEncodingMacDingbats: c_int = 34;
pub const kCFStringEncodingMacTurkish: c_int = 35;
pub const kCFStringEncodingMacCroatian: c_int = 36;
pub const kCFStringEncodingMacIcelandic: c_int = 37;
pub const kCFStringEncodingMacRomanian: c_int = 38;
pub const kCFStringEncodingMacCeltic: c_int = 39;
pub const kCFStringEncodingMacGaelic: c_int = 40;
pub const kCFStringEncodingMacFarsi: c_int = 140;
pub const kCFStringEncodingMacUkrainian: c_int = 152;
pub const kCFStringEncodingMacInuit: c_int = 236;
pub const kCFStringEncodingMacVT100: c_int = 252;
pub const kCFStringEncodingMacHFS: c_int = 255;
pub const kCFStringEncodingISOLatin2: c_int = 514;
pub const kCFStringEncodingISOLatin3: c_int = 515;
pub const kCFStringEncodingISOLatin4: c_int = 516;
pub const kCFStringEncodingISOLatinCyrillic: c_int = 517;
pub const kCFStringEncodingISOLatinArabic: c_int = 518;
pub const kCFStringEncodingISOLatinGreek: c_int = 519;
pub const kCFStringEncodingISOLatinHebrew: c_int = 520;
pub const kCFStringEncodingISOLatin5: c_int = 521;
pub const kCFStringEncodingISOLatin6: c_int = 522;
pub const kCFStringEncodingISOLatinThai: c_int = 523;
pub const kCFStringEncodingISOLatin7: c_int = 525;
pub const kCFStringEncodingISOLatin8: c_int = 526;
pub const kCFStringEncodingISOLatin9: c_int = 527;
pub const kCFStringEncodingISOLatin10: c_int = 528;
pub const kCFStringEncodingDOSLatinUS: c_int = 1024;
pub const kCFStringEncodingDOSGreek: c_int = 1029;
pub const kCFStringEncodingDOSBalticRim: c_int = 1030;
pub const kCFStringEncodingDOSLatin1: c_int = 1040;
pub const kCFStringEncodingDOSGreek1: c_int = 1041;
pub const kCFStringEncodingDOSLatin2: c_int = 1042;
pub const kCFStringEncodingDOSCyrillic: c_int = 1043;
pub const kCFStringEncodingDOSTurkish: c_int = 1044;
pub const kCFStringEncodingDOSPortuguese: c_int = 1045;
pub const kCFStringEncodingDOSIcelandic: c_int = 1046;
pub const kCFStringEncodingDOSHebrew: c_int = 1047;
pub const kCFStringEncodingDOSCanadianFrench: c_int = 1048;
pub const kCFStringEncodingDOSArabic: c_int = 1049;
pub const kCFStringEncodingDOSNordic: c_int = 1050;
pub const kCFStringEncodingDOSRussian: c_int = 1051;
pub const kCFStringEncodingDOSGreek2: c_int = 1052;
pub const kCFStringEncodingDOSThai: c_int = 1053;
pub const kCFStringEncodingDOSJapanese: c_int = 1056;
pub const kCFStringEncodingDOSChineseSimplif: c_int = 1057;
pub const kCFStringEncodingDOSKorean: c_int = 1058;
pub const kCFStringEncodingDOSChineseTrad: c_int = 1059;
pub const kCFStringEncodingWindowsLatin2: c_int = 1281;
pub const kCFStringEncodingWindowsCyrillic: c_int = 1282;
pub const kCFStringEncodingWindowsGreek: c_int = 1283;
pub const kCFStringEncodingWindowsLatin5: c_int = 1284;
pub const kCFStringEncodingWindowsHebrew: c_int = 1285;
pub const kCFStringEncodingWindowsArabic: c_int = 1286;
pub const kCFStringEncodingWindowsBalticRim: c_int = 1287;
pub const kCFStringEncodingWindowsVietnamese: c_int = 1288;
pub const kCFStringEncodingWindowsKoreanJohab: c_int = 1296;
pub const kCFStringEncodingANSEL: c_int = 1537;
pub const kCFStringEncodingJIS_X0201_76: c_int = 1568;
pub const kCFStringEncodingJIS_X0208_83: c_int = 1569;
pub const kCFStringEncodingJIS_X0208_90: c_int = 1570;
pub const kCFStringEncodingJIS_X0212_90: c_int = 1571;
pub const kCFStringEncodingJIS_C6226_78: c_int = 1572;
pub const kCFStringEncodingShiftJIS_X0213: c_int = 1576;
pub const kCFStringEncodingShiftJIS_X0213_MenKuTen: c_int = 1577;
pub const kCFStringEncodingGB_2312_80: c_int = 1584;
pub const kCFStringEncodingGBK_95: c_int = 1585;
pub const kCFStringEncodingGB_18030_2000: c_int = 1586;
pub const kCFStringEncodingKSC_5601_87: c_int = 1600;
pub const kCFStringEncodingKSC_5601_92_Johab: c_int = 1601;
pub const kCFStringEncodingCNS_11643_92_P1: c_int = 1617;
pub const kCFStringEncodingCNS_11643_92_P2: c_int = 1618;
pub const kCFStringEncodingCNS_11643_92_P3: c_int = 1619;
pub const kCFStringEncodingISO_2022_JP: c_int = 2080;
pub const kCFStringEncodingISO_2022_JP_2: c_int = 2081;
pub const kCFStringEncodingISO_2022_JP_1: c_int = 2082;
pub const kCFStringEncodingISO_2022_JP_3: c_int = 2083;
pub const kCFStringEncodingISO_2022_CN: c_int = 2096;
pub const kCFStringEncodingISO_2022_CN_EXT: c_int = 2097;
pub const kCFStringEncodingISO_2022_KR: c_int = 2112;
pub const kCFStringEncodingEUC_JP: c_int = 2336;
pub const kCFStringEncodingEUC_CN: c_int = 2352;
pub const kCFStringEncodingEUC_TW: c_int = 2353;
pub const kCFStringEncodingEUC_KR: c_int = 2368;
pub const kCFStringEncodingShiftJIS: c_int = 2561;
pub const kCFStringEncodingKOI8_R: c_int = 2562;
pub const kCFStringEncodingBig5: c_int = 2563;
pub const kCFStringEncodingMacRomanLatin1: c_int = 2564;
pub const kCFStringEncodingHZ_GB_2312: c_int = 2565;
pub const kCFStringEncodingBig5_HKSCS_1999: c_int = 2566;
pub const kCFStringEncodingVISCII: c_int = 2567;
pub const kCFStringEncodingKOI8_U: c_int = 2568;
pub const kCFStringEncodingBig5_E: c_int = 2569;
pub const kCFStringEncodingNextStepJapanese: c_int = 2818;
pub const kCFStringEncodingEBCDIC_US: c_int = 3073;
pub const kCFStringEncodingEBCDIC_CP037: c_int = 3074;
pub const kCFStringEncodingUTF7: c_int = 67109120;
pub const kCFStringEncodingUTF7_IMAP: c_int = 2576;
pub const kCFStringEncodingShiftJIS_X0213_00: c_int = 1576;
const enum_unnamed_51 = c_uint;
pub const CFTreeRetainCallBack = ?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque;
pub const CFTreeReleaseCallBack = ?*const fn (?*const anyopaque) callconv(.C) void;
pub const CFTreeCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFStringRef;
pub const CFTreeContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: CFTreeRetainCallBack,
    release: CFTreeReleaseCallBack,
    copyDescription: CFTreeCopyDescriptionCallBack,
};
pub const CFTreeApplierFunction = ?*const fn (?*const anyopaque, ?*anyopaque) callconv(.C) void;
pub const struct___CFTree = opaque {};
pub const CFTreeRef = ?*struct___CFTree;
pub extern fn CFTreeGetTypeID() CFTypeID;
pub extern fn CFTreeCreate(allocator: CFAllocatorRef, context: [*c]const CFTreeContext) CFTreeRef;
pub extern fn CFTreeGetParent(tree: CFTreeRef) CFTreeRef;
pub extern fn CFTreeGetNextSibling(tree: CFTreeRef) CFTreeRef;
pub extern fn CFTreeGetFirstChild(tree: CFTreeRef) CFTreeRef;
pub extern fn CFTreeGetContext(tree: CFTreeRef, context: [*c]CFTreeContext) void;
pub extern fn CFTreeGetChildCount(tree: CFTreeRef) CFIndex;
pub extern fn CFTreeGetChildAtIndex(tree: CFTreeRef, idx: CFIndex) CFTreeRef;
pub extern fn CFTreeGetChildren(tree: CFTreeRef, children: [*c]CFTreeRef) void;
pub extern fn CFTreeApplyFunctionToChildren(tree: CFTreeRef, applier: CFTreeApplierFunction, context: ?*anyopaque) void;
pub extern fn CFTreeFindRoot(tree: CFTreeRef) CFTreeRef;
pub extern fn CFTreeSetContext(tree: CFTreeRef, context: [*c]const CFTreeContext) void;
pub extern fn CFTreePrependChild(tree: CFTreeRef, newChild: CFTreeRef) void;
pub extern fn CFTreeAppendChild(tree: CFTreeRef, newChild: CFTreeRef) void;
pub extern fn CFTreeInsertSibling(tree: CFTreeRef, newSibling: CFTreeRef) void;
pub extern fn CFTreeRemove(tree: CFTreeRef) void;
pub extern fn CFTreeRemoveAllChildren(tree: CFTreeRef) void;
pub extern fn CFTreeSortChildren(tree: CFTreeRef, comparator: CFComparatorFunction, context: ?*anyopaque) void;
pub extern fn CFURLCreateDataAndPropertiesFromResource(alloc: CFAllocatorRef, url: CFURLRef, resourceData: [*c]CFDataRef, properties: [*c]CFDictionaryRef, desiredProperties: CFArrayRef, errorCode: [*c]SInt32) Boolean;
pub extern fn CFURLWriteDataAndPropertiesToResource(url: CFURLRef, dataToWrite: CFDataRef, propertiesToWrite: CFDictionaryRef, errorCode: [*c]SInt32) Boolean;
pub extern fn CFURLDestroyResource(url: CFURLRef, errorCode: [*c]SInt32) Boolean;
pub extern fn CFURLCreatePropertyFromResource(alloc: CFAllocatorRef, url: CFURLRef, property: CFStringRef, errorCode: [*c]SInt32) CFTypeRef;
pub const CFURLError = CFIndex;
pub const kCFURLUnknownError: c_int = -10;
pub const kCFURLUnknownSchemeError: c_int = -11;
pub const kCFURLResourceNotFoundError: c_int = -12;
pub const kCFURLResourceAccessViolationError: c_int = -13;
pub const kCFURLRemoteHostUnavailableError: c_int = -14;
pub const kCFURLImproperArgumentsError: c_int = -15;
pub const kCFURLUnknownPropertyKeyError: c_int = -16;
pub const kCFURLPropertyKeyUnavailableError: c_int = -17;
pub const kCFURLTimeoutError: c_int = -18;
const enum_unnamed_52 = c_int;
pub extern const kCFURLFileExists: CFStringRef;
pub extern const kCFURLFileDirectoryContents: CFStringRef;
pub extern const kCFURLFileLength: CFStringRef;
pub extern const kCFURLFileLastModificationTime: CFStringRef;
pub extern const kCFURLFilePOSIXMode: CFStringRef;
pub extern const kCFURLFileOwnerID: CFStringRef;
pub extern const kCFURLHTTPStatusCode: CFStringRef;
pub extern const kCFURLHTTPStatusLine: CFStringRef;
pub const struct___CFUUID = opaque {};
pub const CFUUIDRef = ?*const struct___CFUUID;
pub const CFUUIDBytes = extern struct {
    byte0: UInt8,
    byte1: UInt8,
    byte2: UInt8,
    byte3: UInt8,
    byte4: UInt8,
    byte5: UInt8,
    byte6: UInt8,
    byte7: UInt8,
    byte8: UInt8,
    byte9: UInt8,
    byte10: UInt8,
    byte11: UInt8,
    byte12: UInt8,
    byte13: UInt8,
    byte14: UInt8,
    byte15: UInt8,
};
pub extern fn CFUUIDGetTypeID() CFTypeID;
pub extern fn CFUUIDCreate(alloc: CFAllocatorRef) CFUUIDRef;
pub extern fn CFUUIDCreateWithBytes(alloc: CFAllocatorRef, byte0: UInt8, byte1: UInt8, byte2: UInt8, byte3: UInt8, byte4: UInt8, byte5: UInt8, byte6: UInt8, byte7: UInt8, byte8: UInt8, byte9: UInt8, byte10: UInt8, byte11: UInt8, byte12: UInt8, byte13: UInt8, byte14: UInt8, byte15: UInt8) CFUUIDRef;
pub extern fn CFUUIDCreateFromString(alloc: CFAllocatorRef, uuidStr: CFStringRef) CFUUIDRef;
pub extern fn CFUUIDCreateString(alloc: CFAllocatorRef, uuid: CFUUIDRef) CFStringRef;
pub extern fn CFUUIDGetConstantUUIDWithBytes(alloc: CFAllocatorRef, byte0: UInt8, byte1: UInt8, byte2: UInt8, byte3: UInt8, byte4: UInt8, byte5: UInt8, byte6: UInt8, byte7: UInt8, byte8: UInt8, byte9: UInt8, byte10: UInt8, byte11: UInt8, byte12: UInt8, byte13: UInt8, byte14: UInt8, byte15: UInt8) CFUUIDRef;
pub extern fn CFUUIDGetUUIDBytes(uuid: CFUUIDRef) CFUUIDBytes;
pub extern fn CFUUIDCreateFromUUIDBytes(alloc: CFAllocatorRef, bytes: CFUUIDBytes) CFUUIDRef;
pub extern fn CFCopyHomeDirectoryURL() CFURLRef;
pub const cpu_type_t = integer_t;
pub const cpu_subtype_t = integer_t;
pub const cpu_threadtype_t = integer_t;
pub const struct___CFBundle = opaque {};
pub const CFBundleRef = ?*struct___CFBundle;
pub const CFPlugInRef = ?*struct___CFBundle;
pub extern const kCFBundleInfoDictionaryVersionKey: CFStringRef;
pub extern const kCFBundleExecutableKey: CFStringRef;
pub extern const kCFBundleIdentifierKey: CFStringRef;
pub extern const kCFBundleVersionKey: CFStringRef;
pub extern const kCFBundleDevelopmentRegionKey: CFStringRef;
pub extern const kCFBundleNameKey: CFStringRef;
pub extern const kCFBundleLocalizationsKey: CFStringRef;
pub extern fn CFBundleGetMainBundle() CFBundleRef;
pub extern fn CFBundleGetBundleWithIdentifier(bundleID: CFStringRef) CFBundleRef;
pub extern fn CFBundleGetAllBundles() CFArrayRef;
pub extern fn CFBundleGetTypeID() CFTypeID;
pub extern fn CFBundleCreate(allocator: CFAllocatorRef, bundleURL: CFURLRef) CFBundleRef;
pub extern fn CFBundleCreateBundlesFromDirectory(allocator: CFAllocatorRef, directoryURL: CFURLRef, bundleType: CFStringRef) CFArrayRef;
pub extern fn CFBundleCopyBundleURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleGetValueForInfoDictionaryKey(bundle: CFBundleRef, key: CFStringRef) CFTypeRef;
pub extern fn CFBundleGetInfoDictionary(bundle: CFBundleRef) CFDictionaryRef;
pub extern fn CFBundleGetLocalInfoDictionary(bundle: CFBundleRef) CFDictionaryRef;
pub extern fn CFBundleGetPackageInfo(bundle: CFBundleRef, packageType: [*c]UInt32, packageCreator: [*c]UInt32) void;
pub extern fn CFBundleGetIdentifier(bundle: CFBundleRef) CFStringRef;
pub extern fn CFBundleGetVersionNumber(bundle: CFBundleRef) UInt32;
pub extern fn CFBundleGetDevelopmentRegion(bundle: CFBundleRef) CFStringRef;
pub extern fn CFBundleCopySupportFilesDirectoryURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopyResourcesDirectoryURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopyPrivateFrameworksURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopySharedFrameworksURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopySharedSupportURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopyBuiltInPlugInsURL(bundle: CFBundleRef) CFURLRef;
pub extern fn CFBundleCopyInfoDictionaryInDirectory(bundleURL: CFURLRef) CFDictionaryRef;
pub extern fn CFBundleGetPackageInfoInDirectory(url: CFURLRef, packageType: [*c]UInt32, packageCreator: [*c]UInt32) Boolean;
pub extern fn CFBundleCopyResourceURL(bundle: CFBundleRef, resourceName: CFStringRef, resourceType: CFStringRef, subDirName: CFStringRef) CFURLRef;
pub extern fn CFBundleCopyResourceURLsOfType(bundle: CFBundleRef, resourceType: CFStringRef, subDirName: CFStringRef) CFArrayRef;
pub extern fn CFBundleCopyLocalizedString(bundle: CFBundleRef, key: CFStringRef, value: CFStringRef, tableName: CFStringRef) CFStringRef;
pub extern fn CFBundleCopyResourceURLInDirectory(bundleURL: CFURLRef, resourceName: CFStringRef, resourceType: CFStringRef, subDirName: CFStringRef) CFURLRef;
pub extern fn CFBundleCopyResourceURLsOfTypeInDirectory(bundleURL: CFURLRef, resourceType: CFStringRef, subDirName: CFStringRef) CFArrayRef;
pub extern fn CFBundleCopyBundleLocalizations(bundle: CFBundleRef) CFArrayRef;
pub extern fn CFBundleCopyPreferredLocalizationsFromArray(locArray: CFArrayRef) CFArrayRef;
pub extern fn CFBundleCopyLocalizationsForPreferences(locArray: CFArrayRef, prefArray: CFArrayRef) CFArrayRef;
pub extern fn CFBundleCopyResourceURLForLocalization(bundle: CFBundleRef, resourceName: CFStringRef, resourceType: CFStringRef, subDirName: CFStringRef, localizationName: CFStringRef) CFURLRef;
pub extern fn CFBundleCopyResourceURLsOfTypeForLocalization(bundle: CFBundleRef, resourceType: CFStringRef, subDirName: CFStringRef, localizationName: CFStringRef) CFArrayRef;
pub extern fn CFBundleCopyInfoDictionaryForURL(url: CFURLRef) CFDictionaryRef;
pub extern fn CFBundleCopyLocalizationsForURL(url: CFURLRef) CFArrayRef;
pub extern fn CFBundleCopyExecutableArchitecturesForURL(url: CFURLRef) CFArrayRef;
pub extern fn CFBundleCopyExecutableURL(bundle: CFBundleRef) CFURLRef;
pub const kCFBundleExecutableArchitectureI386: c_int = 7;
pub const kCFBundleExecutableArchitecturePPC: c_int = 18;
pub const kCFBundleExecutableArchitectureX86_64: c_int = 16777223;
pub const kCFBundleExecutableArchitecturePPC64: c_int = 16777234;
pub const kCFBundleExecutableArchitectureARM64: c_int = 16777228;
const enum_unnamed_53 = c_uint;
pub extern fn CFBundleCopyExecutableArchitectures(bundle: CFBundleRef) CFArrayRef;
pub extern fn CFBundlePreflightExecutable(bundle: CFBundleRef, @"error": [*c]CFErrorRef) Boolean;
pub extern fn CFBundleLoadExecutableAndReturnError(bundle: CFBundleRef, @"error": [*c]CFErrorRef) Boolean;
pub extern fn CFBundleLoadExecutable(bundle: CFBundleRef) Boolean;
pub extern fn CFBundleIsExecutableLoaded(bundle: CFBundleRef) Boolean;
pub extern fn CFBundleUnloadExecutable(bundle: CFBundleRef) void;
pub extern fn CFBundleGetFunctionPointerForName(bundle: CFBundleRef, functionName: CFStringRef) ?*anyopaque;
pub extern fn CFBundleGetFunctionPointersForNames(bundle: CFBundleRef, functionNames: CFArrayRef, ftbl: [*c]?*anyopaque) void;
pub extern fn CFBundleGetDataPointerForName(bundle: CFBundleRef, symbolName: CFStringRef) ?*anyopaque;
pub extern fn CFBundleGetDataPointersForNames(bundle: CFBundleRef, symbolNames: CFArrayRef, stbl: [*c]?*anyopaque) void;
pub extern fn CFBundleCopyAuxiliaryExecutableURL(bundle: CFBundleRef, executableName: CFStringRef) CFURLRef;
pub extern fn CFBundleIsExecutableLoadable(bundle: CFBundleRef) Boolean;
pub extern fn CFBundleIsExecutableLoadableForURL(url: CFURLRef) Boolean;
pub extern fn CFBundleIsArchitectureLoadable(arch: cpu_type_t) Boolean;
pub extern fn CFBundleGetPlugIn(bundle: CFBundleRef) CFPlugInRef;
pub const CFBundleRefNum = c_int;
pub extern fn CFBundleOpenBundleResourceMap(bundle: CFBundleRef) CFBundleRefNum;
pub extern fn CFBundleOpenBundleResourceFiles(bundle: CFBundleRef, refNum: [*c]CFBundleRefNum, localizedRefNum: [*c]CFBundleRefNum) SInt32;
pub extern fn CFBundleCloseBundleResourceMap(bundle: CFBundleRef, refNum: CFBundleRefNum) void;
pub const struct___CFMessagePort = opaque {};
pub const CFMessagePortRef = ?*struct___CFMessagePort;
pub const kCFMessagePortSuccess: c_int = 0;
pub const kCFMessagePortSendTimeout: c_int = -1;
pub const kCFMessagePortReceiveTimeout: c_int = -2;
pub const kCFMessagePortIsInvalid: c_int = -3;
pub const kCFMessagePortTransportError: c_int = -4;
pub const kCFMessagePortBecameInvalidError: c_int = -5;
const enum_unnamed_54 = c_int;
pub const CFMessagePortContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: ?fn (?*const anyopaque) callconv(.C) ?*const anyopaque,
    release: ?fn (?*const anyopaque) callconv(.C) void,
    copyDescription: ?fn (?*const anyopaque) callconv(.C) CFStringRef,
};
pub const CFMessagePortCallBack = ?*const fn (CFMessagePortRef, SInt32, CFDataRef, ?*anyopaque) callconv(.C) CFDataRef;
pub const CFMessagePortInvalidationCallBack = ?*const fn (CFMessagePortRef, ?*anyopaque) callconv(.C) void;
pub extern fn CFMessagePortGetTypeID() CFTypeID;
pub extern fn CFMessagePortCreateLocal(allocator: CFAllocatorRef, name: CFStringRef, callout: CFMessagePortCallBack, context: [*c]CFMessagePortContext, shouldFreeInfo: [*c]Boolean) CFMessagePortRef;
pub extern fn CFMessagePortCreateRemote(allocator: CFAllocatorRef, name: CFStringRef) CFMessagePortRef;
pub extern fn CFMessagePortIsRemote(ms: CFMessagePortRef) Boolean;
pub extern fn CFMessagePortGetName(ms: CFMessagePortRef) CFStringRef;
pub extern fn CFMessagePortSetName(ms: CFMessagePortRef, newName: CFStringRef) Boolean;
pub extern fn CFMessagePortGetContext(ms: CFMessagePortRef, context: [*c]CFMessagePortContext) void;
pub extern fn CFMessagePortInvalidate(ms: CFMessagePortRef) void;
pub extern fn CFMessagePortIsValid(ms: CFMessagePortRef) Boolean;
pub extern fn CFMessagePortGetInvalidationCallBack(ms: CFMessagePortRef) CFMessagePortInvalidationCallBack;
pub extern fn CFMessagePortSetInvalidationCallBack(ms: CFMessagePortRef, callout: CFMessagePortInvalidationCallBack) void;
pub extern fn CFMessagePortSendRequest(remote: CFMessagePortRef, msgid: SInt32, data: CFDataRef, sendTimeout: CFTimeInterval, rcvTimeout: CFTimeInterval, replyMode: CFStringRef, returnData: [*c]CFDataRef) SInt32;
pub extern fn CFMessagePortCreateRunLoopSource(allocator: CFAllocatorRef, local: CFMessagePortRef, order: CFIndex) CFRunLoopSourceRef;
pub extern fn CFMessagePortSetDispatchQueue(ms: CFMessagePortRef, queue: dispatch_queue_t) void;
pub extern const kCFPlugInDynamicRegistrationKey: CFStringRef;
pub extern const kCFPlugInDynamicRegisterFunctionKey: CFStringRef;
pub extern const kCFPlugInUnloadFunctionKey: CFStringRef;
pub extern const kCFPlugInFactoriesKey: CFStringRef;
pub extern const kCFPlugInTypesKey: CFStringRef;
pub const CFPlugInDynamicRegisterFunction = ?*const fn (CFPlugInRef) callconv(.C) void;
pub const CFPlugInUnloadFunction = ?*const fn (CFPlugInRef) callconv(.C) void;
pub const CFPlugInFactoryFunction = ?*const fn (CFAllocatorRef, CFUUIDRef) callconv(.C) ?*anyopaque;
pub extern fn CFPlugInGetTypeID() CFTypeID;
pub extern fn CFPlugInCreate(allocator: CFAllocatorRef, plugInURL: CFURLRef) CFPlugInRef;
pub extern fn CFPlugInGetBundle(plugIn: CFPlugInRef) CFBundleRef;
pub extern fn CFPlugInSetLoadOnDemand(plugIn: CFPlugInRef, flag: Boolean) void;
pub extern fn CFPlugInIsLoadOnDemand(plugIn: CFPlugInRef) Boolean;
pub extern fn CFPlugInFindFactoriesForPlugInType(typeUUID: CFUUIDRef) CFArrayRef;
pub extern fn CFPlugInFindFactoriesForPlugInTypeInPlugIn(typeUUID: CFUUIDRef, plugIn: CFPlugInRef) CFArrayRef;
pub extern fn CFPlugInInstanceCreate(allocator: CFAllocatorRef, factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) ?*anyopaque;
pub extern fn CFPlugInRegisterFactoryFunction(factoryUUID: CFUUIDRef, func: CFPlugInFactoryFunction) Boolean;
pub extern fn CFPlugInRegisterFactoryFunctionByName(factoryUUID: CFUUIDRef, plugIn: CFPlugInRef, functionName: CFStringRef) Boolean;
pub extern fn CFPlugInUnregisterFactory(factoryUUID: CFUUIDRef) Boolean;
pub extern fn CFPlugInRegisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) Boolean;
pub extern fn CFPlugInUnregisterPlugInType(factoryUUID: CFUUIDRef, typeUUID: CFUUIDRef) Boolean;
pub extern fn CFPlugInAddInstanceForFactory(factoryID: CFUUIDRef) void;
pub extern fn CFPlugInRemoveInstanceForFactory(factoryID: CFUUIDRef) void;
pub const struct___CFPlugInInstance = opaque {};
pub const CFPlugInInstanceRef = ?*struct___CFPlugInInstance;
pub const CFPlugInInstanceGetInterfaceFunction = ?*const fn (CFPlugInInstanceRef, CFStringRef, [*c]?*anyopaque) callconv(.C) Boolean;
pub const CFPlugInInstanceDeallocateInstanceDataFunction = ?*const fn (?*anyopaque) callconv(.C) void;
pub extern fn CFPlugInInstanceGetInterfaceFunctionTable(instance: CFPlugInInstanceRef, interfaceName: CFStringRef, ftbl: [*c]?*anyopaque) Boolean;
pub extern fn CFPlugInInstanceGetFactoryName(instance: CFPlugInInstanceRef) CFStringRef;
pub extern fn CFPlugInInstanceGetInstanceData(instance: CFPlugInInstanceRef) ?*anyopaque;
pub extern fn CFPlugInInstanceGetTypeID() CFTypeID;
pub extern fn CFPlugInInstanceCreateWithInstanceDataSize(allocator: CFAllocatorRef, instanceDataSize: CFIndex, deallocateInstanceFunction: CFPlugInInstanceDeallocateInstanceDataFunction, factoryName: CFStringRef, getInterfaceFunction: CFPlugInInstanceGetInterfaceFunction) CFPlugInInstanceRef;
pub const struct___CFMachPort = opaque {};
pub const CFMachPortRef = ?*struct___CFMachPort;
pub const CFMachPortContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: ?fn (?*const anyopaque) callconv(.C) ?*const anyopaque,
    release: ?fn (?*const anyopaque) callconv(.C) void,
    copyDescription: ?fn (?*const anyopaque) callconv(.C) CFStringRef,
};
pub const CFMachPortCallBack = ?*const fn (CFMachPortRef, ?*anyopaque, CFIndex, ?*anyopaque) callconv(.C) void;
pub const CFMachPortInvalidationCallBack = ?*const fn (CFMachPortRef, ?*anyopaque) callconv(.C) void;
pub extern fn CFMachPortGetTypeID() CFTypeID;
pub extern fn CFMachPortCreate(allocator: CFAllocatorRef, callout: CFMachPortCallBack, context: [*c]CFMachPortContext, shouldFreeInfo: [*c]Boolean) CFMachPortRef;
pub extern fn CFMachPortCreateWithPort(allocator: CFAllocatorRef, portNum: mach_port_t, callout: CFMachPortCallBack, context: [*c]CFMachPortContext, shouldFreeInfo: [*c]Boolean) CFMachPortRef;
pub extern fn CFMachPortGetPort(port: CFMachPortRef) mach_port_t;
pub extern fn CFMachPortGetContext(port: CFMachPortRef, context: [*c]CFMachPortContext) void;
pub extern fn CFMachPortInvalidate(port: CFMachPortRef) void;
pub extern fn CFMachPortIsValid(port: CFMachPortRef) Boolean;
pub extern fn CFMachPortGetInvalidationCallBack(port: CFMachPortRef) CFMachPortInvalidationCallBack;
pub extern fn CFMachPortSetInvalidationCallBack(port: CFMachPortRef, callout: CFMachPortInvalidationCallBack) void;
pub extern fn CFMachPortCreateRunLoopSource(allocator: CFAllocatorRef, port: CFMachPortRef, order: CFIndex) CFRunLoopSourceRef;
pub const struct___CFAttributedString = opaque {};
pub const CFAttributedStringRef = ?*const struct___CFAttributedString;
pub const CFMutableAttributedStringRef = ?*struct___CFAttributedString;
pub extern fn CFAttributedStringGetTypeID() CFTypeID;
pub extern fn CFAttributedStringCreate(alloc: CFAllocatorRef, str: CFStringRef, attributes: CFDictionaryRef) CFAttributedStringRef;
pub extern fn CFAttributedStringCreateWithSubstring(alloc: CFAllocatorRef, aStr: CFAttributedStringRef, range: CFRange) CFAttributedStringRef;
pub extern fn CFAttributedStringCreateCopy(alloc: CFAllocatorRef, aStr: CFAttributedStringRef) CFAttributedStringRef;
pub extern fn CFAttributedStringGetString(aStr: CFAttributedStringRef) CFStringRef;
pub extern fn CFAttributedStringGetLength(aStr: CFAttributedStringRef) CFIndex;
pub extern fn CFAttributedStringGetAttributes(aStr: CFAttributedStringRef, loc: CFIndex, effectiveRange: [*c]CFRange) CFDictionaryRef;
pub extern fn CFAttributedStringGetAttribute(aStr: CFAttributedStringRef, loc: CFIndex, attrName: CFStringRef, effectiveRange: [*c]CFRange) CFTypeRef;
pub extern fn CFAttributedStringGetAttributesAndLongestEffectiveRange(aStr: CFAttributedStringRef, loc: CFIndex, inRange: CFRange, longestEffectiveRange: [*c]CFRange) CFDictionaryRef;
pub extern fn CFAttributedStringGetAttributeAndLongestEffectiveRange(aStr: CFAttributedStringRef, loc: CFIndex, attrName: CFStringRef, inRange: CFRange, longestEffectiveRange: [*c]CFRange) CFTypeRef;
pub extern fn CFAttributedStringCreateMutableCopy(alloc: CFAllocatorRef, maxLength: CFIndex, aStr: CFAttributedStringRef) CFMutableAttributedStringRef;
pub extern fn CFAttributedStringCreateMutable(alloc: CFAllocatorRef, maxLength: CFIndex) CFMutableAttributedStringRef;
pub extern fn CFAttributedStringReplaceString(aStr: CFMutableAttributedStringRef, range: CFRange, replacement: CFStringRef) void;
pub extern fn CFAttributedStringGetMutableString(aStr: CFMutableAttributedStringRef) CFMutableStringRef;
pub extern fn CFAttributedStringSetAttributes(aStr: CFMutableAttributedStringRef, range: CFRange, replacement: CFDictionaryRef, clearOtherAttributes: Boolean) void;
pub extern fn CFAttributedStringSetAttribute(aStr: CFMutableAttributedStringRef, range: CFRange, attrName: CFStringRef, value: CFTypeRef) void;
pub extern fn CFAttributedStringRemoveAttribute(aStr: CFMutableAttributedStringRef, range: CFRange, attrName: CFStringRef) void;
pub extern fn CFAttributedStringReplaceAttributedString(aStr: CFMutableAttributedStringRef, range: CFRange, replacement: CFAttributedStringRef) void;
pub extern fn CFAttributedStringBeginEditing(aStr: CFMutableAttributedStringRef) void;
pub extern fn CFAttributedStringEndEditing(aStr: CFMutableAttributedStringRef) void;
pub const struct___CFURLEnumerator = opaque {};
pub const CFURLEnumeratorRef = ?*const struct___CFURLEnumerator;
pub extern fn CFURLEnumeratorGetTypeID() CFTypeID;
pub const CFURLEnumeratorOptions = CFOptionFlags;
pub const kCFURLEnumeratorDefaultBehavior: c_int = 0;
pub const kCFURLEnumeratorDescendRecursively: c_int = 1;
pub const kCFURLEnumeratorSkipInvisibles: c_int = 2;
pub const kCFURLEnumeratorGenerateFileReferenceURLs: c_int = 4;
pub const kCFURLEnumeratorSkipPackageContents: c_int = 8;
pub const kCFURLEnumeratorIncludeDirectoriesPreOrder: c_int = 16;
pub const kCFURLEnumeratorIncludeDirectoriesPostOrder: c_int = 32;
pub const kCFURLEnumeratorGenerateRelativePathURLs: c_int = 64;
const enum_unnamed_55 = c_uint;
pub extern fn CFURLEnumeratorCreateForDirectoryURL(alloc: CFAllocatorRef, directoryURL: CFURLRef, option: CFURLEnumeratorOptions, propertyKeys: CFArrayRef) CFURLEnumeratorRef;
pub extern fn CFURLEnumeratorCreateForMountedVolumes(alloc: CFAllocatorRef, option: CFURLEnumeratorOptions, propertyKeys: CFArrayRef) CFURLEnumeratorRef;
pub const CFURLEnumeratorResult = CFIndex;
pub const kCFURLEnumeratorSuccess: c_int = 1;
pub const kCFURLEnumeratorEnd: c_int = 2;
pub const kCFURLEnumeratorError: c_int = 3;
pub const kCFURLEnumeratorDirectoryPostOrderSuccess: c_int = 4;
const enum_unnamed_56 = c_uint;
pub extern fn CFURLEnumeratorGetNextURL(enumerator: CFURLEnumeratorRef, url: [*c]CFURLRef, @"error": [*c]CFErrorRef) CFURLEnumeratorResult;
pub extern fn CFURLEnumeratorSkipDescendents(enumerator: CFURLEnumeratorRef) void;
pub extern fn CFURLEnumeratorGetDescendentLevel(enumerator: CFURLEnumeratorRef) CFIndex;
pub extern fn CFURLEnumeratorGetSourceDidChange(enumerator: CFURLEnumeratorRef) Boolean;
pub const guid_t = extern union {
    g_guid: [16]u8,
    g_guid_asint: [4]c_uint,
};
pub const ntsid_t = extern struct {
    sid_kind: u_int8_t,
    sid_authcount: u_int8_t,
    sid_authority: [6]u_int8_t,
    sid_authorities: [16]u_int32_t,
};
pub const struct_kauth_identity_extlookup = extern struct {
    el_seqno: u_int32_t,
    el_result: u_int32_t,
    el_flags: u_int32_t,
    el_info_pid: __darwin_pid_t,
    el_extend: u_int64_t,
    el_info_reserved_1: u_int32_t,
    el_uid: uid_t,
    el_uguid: guid_t,
    el_uguid_valid: u_int32_t,
    el_usid: ntsid_t,
    el_usid_valid: u_int32_t,
    el_gid: gid_t,
    el_gguid: guid_t,
    el_gguid_valid: u_int32_t,
    el_gsid: ntsid_t,
    el_gsid_valid: u_int32_t,
    el_member_valid: u_int32_t,
    el_sup_grp_cnt: u_int32_t,
    el_sup_groups: [16]gid_t,
};
pub const struct_kauth_cache_sizes = extern struct {
    kcs_group_size: u_int32_t,
    kcs_id_size: u_int32_t,
};
pub const kauth_ace_rights_t = u_int32_t;
pub const struct_kauth_ace = extern struct {
    ace_applicable: guid_t,
    ace_flags: u_int32_t,
    ace_rights: kauth_ace_rights_t,
};
pub const kauth_ace_t = [*c]struct_kauth_ace;
pub const struct_kauth_acl = extern struct {
    acl_entrycount: u_int32_t,
    acl_flags: u_int32_t,
    acl_ace: [1]struct_kauth_ace,
};
pub const kauth_acl_t = [*c]struct_kauth_acl;
pub const struct_kauth_filesec = extern struct {
    fsec_magic: u_int32_t,
    fsec_owner: guid_t,
    fsec_group: guid_t,
    fsec_acl: struct_kauth_acl,
};
pub const kauth_filesec_t = [*c]struct_kauth_filesec;
pub const ACL_READ_DATA: c_int = 2;
pub const ACL_LIST_DIRECTORY: c_int = 2;
pub const ACL_WRITE_DATA: c_int = 4;
pub const ACL_ADD_FILE: c_int = 4;
pub const ACL_EXECUTE: c_int = 8;
pub const ACL_SEARCH: c_int = 8;
pub const ACL_DELETE: c_int = 16;
pub const ACL_APPEND_DATA: c_int = 32;
pub const ACL_ADD_SUBDIRECTORY: c_int = 32;
pub const ACL_DELETE_CHILD: c_int = 64;
pub const ACL_READ_ATTRIBUTES: c_int = 128;
pub const ACL_WRITE_ATTRIBUTES: c_int = 256;
pub const ACL_READ_EXTATTRIBUTES: c_int = 512;
pub const ACL_WRITE_EXTATTRIBUTES: c_int = 1024;
pub const ACL_READ_SECURITY: c_int = 2048;
pub const ACL_WRITE_SECURITY: c_int = 4096;
pub const ACL_CHANGE_OWNER: c_int = 8192;
pub const ACL_SYNCHRONIZE: c_int = 1048576;
pub const acl_perm_t = c_uint;
pub const ACL_UNDEFINED_TAG: c_int = 0;
pub const ACL_EXTENDED_ALLOW: c_int = 1;
pub const ACL_EXTENDED_DENY: c_int = 2;
pub const acl_tag_t = c_uint;
pub const ACL_TYPE_EXTENDED: c_int = 256;
pub const ACL_TYPE_ACCESS: c_int = 0;
pub const ACL_TYPE_DEFAULT: c_int = 1;
pub const ACL_TYPE_AFS: c_int = 2;
pub const ACL_TYPE_CODA: c_int = 3;
pub const ACL_TYPE_NTFS: c_int = 4;
pub const ACL_TYPE_NWFS: c_int = 5;
pub const acl_type_t = c_uint;
pub const ACL_FIRST_ENTRY: c_int = 0;
pub const ACL_NEXT_ENTRY: c_int = -1;
pub const ACL_LAST_ENTRY: c_int = -2;
pub const acl_entry_id_t = c_int;
pub const ACL_FLAG_DEFER_INHERIT: c_int = 1;
pub const ACL_FLAG_NO_INHERIT: c_int = 131072;
pub const ACL_ENTRY_INHERITED: c_int = 16;
pub const ACL_ENTRY_FILE_INHERIT: c_int = 32;
pub const ACL_ENTRY_DIRECTORY_INHERIT: c_int = 64;
pub const ACL_ENTRY_LIMIT_INHERIT: c_int = 128;
pub const ACL_ENTRY_ONLY_INHERIT: c_int = 256;
pub const acl_flag_t = c_uint;
pub const struct__acl = opaque {};
pub const struct__acl_entry = opaque {};
pub const struct__acl_permset = opaque {};
pub const struct__acl_flagset = opaque {};
pub const acl_t = ?*struct__acl;
pub const acl_entry_t = ?*struct__acl_entry;
pub const acl_permset_t = ?*struct__acl_permset;
pub const acl_flagset_t = ?*struct__acl_flagset;
pub const acl_permset_mask_t = u_int64_t;
pub extern fn acl_dup(acl: acl_t) acl_t;
pub extern fn acl_free(obj_p: ?*anyopaque) c_int;
pub extern fn acl_init(count: c_int) acl_t;
pub extern fn acl_copy_entry(dest_d: acl_entry_t, src_d: acl_entry_t) c_int;
pub extern fn acl_create_entry(acl_p: [*c]acl_t, entry_p: [*c]acl_entry_t) c_int;
pub extern fn acl_create_entry_np(acl_p: [*c]acl_t, entry_p: [*c]acl_entry_t, entry_index: c_int) c_int;
pub extern fn acl_delete_entry(acl: acl_t, entry_d: acl_entry_t) c_int;
pub extern fn acl_get_entry(acl: acl_t, entry_id: c_int, entry_p: [*c]acl_entry_t) c_int;
pub extern fn acl_valid(acl: acl_t) c_int;
pub extern fn acl_valid_fd_np(fd: c_int, @"type": acl_type_t, acl: acl_t) c_int;
pub extern fn acl_valid_file_np(path: [*c]const u8, @"type": acl_type_t, acl: acl_t) c_int;
pub extern fn acl_valid_link_np(path: [*c]const u8, @"type": acl_type_t, acl: acl_t) c_int;
pub extern fn acl_add_perm(permset_d: acl_permset_t, perm: acl_perm_t) c_int;
pub extern fn acl_calc_mask(acl_p: [*c]acl_t) c_int;
pub extern fn acl_clear_perms(permset_d: acl_permset_t) c_int;
pub extern fn acl_delete_perm(permset_d: acl_permset_t, perm: acl_perm_t) c_int;
pub extern fn acl_get_perm_np(permset_d: acl_permset_t, perm: acl_perm_t) c_int;
pub extern fn acl_get_permset(entry_d: acl_entry_t, permset_p: [*c]acl_permset_t) c_int;
pub extern fn acl_set_permset(entry_d: acl_entry_t, permset_d: acl_permset_t) c_int;
pub extern fn acl_maximal_permset_mask_np(mask_p: [*c]acl_permset_mask_t) c_int;
pub extern fn acl_get_permset_mask_np(entry_d: acl_entry_t, mask_p: [*c]acl_permset_mask_t) c_int;
pub extern fn acl_set_permset_mask_np(entry_d: acl_entry_t, mask: acl_permset_mask_t) c_int;
pub extern fn acl_add_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) c_int;
pub extern fn acl_clear_flags_np(flagset_d: acl_flagset_t) c_int;
pub extern fn acl_delete_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) c_int;
pub extern fn acl_get_flag_np(flagset_d: acl_flagset_t, flag: acl_flag_t) c_int;
pub extern fn acl_get_flagset_np(obj_p: ?*anyopaque, flagset_p: [*c]acl_flagset_t) c_int;
pub extern fn acl_set_flagset_np(obj_p: ?*anyopaque, flagset_d: acl_flagset_t) c_int;
pub extern fn acl_get_qualifier(entry_d: acl_entry_t) ?*anyopaque;
pub extern fn acl_get_tag_type(entry_d: acl_entry_t, tag_type_p: [*c]acl_tag_t) c_int;
pub extern fn acl_set_qualifier(entry_d: acl_entry_t, tag_qualifier_p: ?*const anyopaque) c_int;
pub extern fn acl_set_tag_type(entry_d: acl_entry_t, tag_type: acl_tag_t) c_int;
pub extern fn acl_delete_def_file(path_p: [*c]const u8) c_int;
pub extern fn acl_get_fd(fd: c_int) acl_t;
pub extern fn acl_get_fd_np(fd: c_int, @"type": acl_type_t) acl_t;
pub extern fn acl_get_file(path_p: [*c]const u8, @"type": acl_type_t) acl_t;
pub extern fn acl_get_link_np(path_p: [*c]const u8, @"type": acl_type_t) acl_t;
pub extern fn acl_set_fd(fd: c_int, acl: acl_t) c_int;
pub extern fn acl_set_fd_np(fd: c_int, acl: acl_t, acl_type: acl_type_t) c_int;
pub extern fn acl_set_file(path_p: [*c]const u8, @"type": acl_type_t, acl: acl_t) c_int;
pub extern fn acl_set_link_np(path_p: [*c]const u8, @"type": acl_type_t, acl: acl_t) c_int;
pub extern fn acl_copy_ext(buf_p: ?*anyopaque, acl: acl_t, size: isize) isize;
pub extern fn acl_copy_ext_native(buf_p: ?*anyopaque, acl: acl_t, size: isize) isize;
pub extern fn acl_copy_int(buf_p: ?*const anyopaque) acl_t;
pub extern fn acl_copy_int_native(buf_p: ?*const anyopaque) acl_t;
pub extern fn acl_from_text(buf_p: [*c]const u8) acl_t;
pub extern fn acl_size(acl: acl_t) isize;
pub extern fn acl_to_text(acl: acl_t, len_p: [*c]isize) [*c]u8;
pub const struct___CFFileSecurity = opaque {};
pub const CFFileSecurityRef = ?*struct___CFFileSecurity;
pub extern fn CFFileSecurityGetTypeID() CFTypeID;
pub extern fn CFFileSecurityCreate(allocator: CFAllocatorRef) CFFileSecurityRef;
pub extern fn CFFileSecurityCreateCopy(allocator: CFAllocatorRef, fileSec: CFFileSecurityRef) CFFileSecurityRef;
pub extern fn CFFileSecurityCopyOwnerUUID(fileSec: CFFileSecurityRef, ownerUUID: [*c]CFUUIDRef) Boolean;
pub extern fn CFFileSecuritySetOwnerUUID(fileSec: CFFileSecurityRef, ownerUUID: CFUUIDRef) Boolean;
pub extern fn CFFileSecurityCopyGroupUUID(fileSec: CFFileSecurityRef, groupUUID: [*c]CFUUIDRef) Boolean;
pub extern fn CFFileSecuritySetGroupUUID(fileSec: CFFileSecurityRef, groupUUID: CFUUIDRef) Boolean;
pub extern fn CFFileSecurityCopyAccessControlList(fileSec: CFFileSecurityRef, accessControlList: [*c]acl_t) Boolean;
pub extern fn CFFileSecuritySetAccessControlList(fileSec: CFFileSecurityRef, accessControlList: acl_t) Boolean;
pub extern fn CFFileSecurityGetOwner(fileSec: CFFileSecurityRef, owner: [*c]uid_t) Boolean;
pub extern fn CFFileSecuritySetOwner(fileSec: CFFileSecurityRef, owner: uid_t) Boolean;
pub extern fn CFFileSecurityGetGroup(fileSec: CFFileSecurityRef, group: [*c]gid_t) Boolean;
pub extern fn CFFileSecuritySetGroup(fileSec: CFFileSecurityRef, group: gid_t) Boolean;
pub extern fn CFFileSecurityGetMode(fileSec: CFFileSecurityRef, mode: [*c]mode_t) Boolean;
pub extern fn CFFileSecuritySetMode(fileSec: CFFileSecurityRef, mode: mode_t) Boolean;
pub const CFFileSecurityClearOptions = CFOptionFlags;
pub const kCFFileSecurityClearOwner: c_int = 1;
pub const kCFFileSecurityClearGroup: c_int = 2;
pub const kCFFileSecurityClearMode: c_int = 4;
pub const kCFFileSecurityClearOwnerUUID: c_int = 8;
pub const kCFFileSecurityClearGroupUUID: c_int = 16;
pub const kCFFileSecurityClearAccessControlList: c_int = 32;
const enum_unnamed_57 = c_uint;
pub extern fn CFFileSecurityClearProperties(fileSec: CFFileSecurityRef, clearPropertyMask: CFFileSecurityClearOptions) Boolean;
pub extern fn CFStringTokenizerCopyBestStringLanguage(string: CFStringRef, range: CFRange) CFStringRef;
pub const struct___CFStringTokenizer = opaque {};
pub const CFStringTokenizerRef = ?*struct___CFStringTokenizer;
pub const kCFStringTokenizerUnitWord: c_int = 0;
pub const kCFStringTokenizerUnitSentence: c_int = 1;
pub const kCFStringTokenizerUnitParagraph: c_int = 2;
pub const kCFStringTokenizerUnitLineBreak: c_int = 3;
pub const kCFStringTokenizerUnitWordBoundary: c_int = 4;
pub const kCFStringTokenizerAttributeLatinTranscription: c_int = 65536;
pub const kCFStringTokenizerAttributeLanguage: c_int = 131072;
const enum_unnamed_58 = c_uint;
pub const CFStringTokenizerTokenType = CFOptionFlags;
pub const kCFStringTokenizerTokenNone: c_int = 0;
pub const kCFStringTokenizerTokenNormal: c_int = 1;
pub const kCFStringTokenizerTokenHasSubTokensMask: c_int = 2;
pub const kCFStringTokenizerTokenHasDerivedSubTokensMask: c_int = 4;
pub const kCFStringTokenizerTokenHasHasNumbersMask: c_int = 8;
pub const kCFStringTokenizerTokenHasNonLettersMask: c_int = 16;
pub const kCFStringTokenizerTokenIsCJWordMask: c_int = 32;
const enum_unnamed_59 = c_uint;
pub extern fn CFStringTokenizerGetTypeID() CFTypeID;
pub extern fn CFStringTokenizerCreate(alloc: CFAllocatorRef, string: CFStringRef, range: CFRange, options: CFOptionFlags, locale: CFLocaleRef) CFStringTokenizerRef;
pub extern fn CFStringTokenizerSetString(tokenizer: CFStringTokenizerRef, string: CFStringRef, range: CFRange) void;
pub extern fn CFStringTokenizerGoToTokenAtIndex(tokenizer: CFStringTokenizerRef, index: CFIndex) CFStringTokenizerTokenType;
pub extern fn CFStringTokenizerAdvanceToNextToken(tokenizer: CFStringTokenizerRef) CFStringTokenizerTokenType;
pub extern fn CFStringTokenizerGetCurrentTokenRange(tokenizer: CFStringTokenizerRef) CFRange;
pub extern fn CFStringTokenizerCopyCurrentTokenAttribute(tokenizer: CFStringTokenizerRef, attribute: CFOptionFlags) CFTypeRef;
pub extern fn CFStringTokenizerGetCurrentSubTokens(tokenizer: CFStringTokenizerRef, ranges: [*c]CFRange, maxRangeLength: CFIndex, derivedSubTokens: CFMutableArrayRef) CFIndex;
pub const CFFileDescriptorNativeDescriptor = c_int;
pub const struct___CFFileDescriptor = opaque {};
pub const CFFileDescriptorRef = ?*struct___CFFileDescriptor;
pub const kCFFileDescriptorReadCallBack: c_int = 1;
pub const kCFFileDescriptorWriteCallBack: c_int = 2;
const enum_unnamed_60 = c_uint;
pub const CFFileDescriptorCallBack = ?*const fn (CFFileDescriptorRef, CFOptionFlags, ?*anyopaque) callconv(.C) void;
pub const CFFileDescriptorContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: ?fn (?*anyopaque) callconv(.C) ?*anyopaque,
    release: ?fn (?*anyopaque) callconv(.C) void,
    copyDescription: ?fn (?*anyopaque) callconv(.C) CFStringRef,
};
pub extern fn CFFileDescriptorGetTypeID() CFTypeID;
pub extern fn CFFileDescriptorCreate(allocator: CFAllocatorRef, fd: CFFileDescriptorNativeDescriptor, closeOnInvalidate: Boolean, callout: CFFileDescriptorCallBack, context: [*c]const CFFileDescriptorContext) CFFileDescriptorRef;
pub extern fn CFFileDescriptorGetNativeDescriptor(f: CFFileDescriptorRef) CFFileDescriptorNativeDescriptor;
pub extern fn CFFileDescriptorGetContext(f: CFFileDescriptorRef, context: [*c]CFFileDescriptorContext) void;
pub extern fn CFFileDescriptorEnableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags) void;
pub extern fn CFFileDescriptorDisableCallBacks(f: CFFileDescriptorRef, callBackTypes: CFOptionFlags) void;
pub extern fn CFFileDescriptorInvalidate(f: CFFileDescriptorRef) void;
pub extern fn CFFileDescriptorIsValid(f: CFFileDescriptorRef) Boolean;
pub extern fn CFFileDescriptorCreateRunLoopSource(allocator: CFAllocatorRef, f: CFFileDescriptorRef, order: CFIndex) CFRunLoopSourceRef;
pub const struct___CFUserNotification = opaque {};
pub const CFUserNotificationRef = ?*struct___CFUserNotification;
pub const CFUserNotificationCallBack = ?*const fn (CFUserNotificationRef, CFOptionFlags) callconv(.C) void;
pub extern fn CFUserNotificationGetTypeID() CFTypeID;
pub extern fn CFUserNotificationCreate(allocator: CFAllocatorRef, timeout: CFTimeInterval, flags: CFOptionFlags, @"error": [*c]SInt32, dictionary: CFDictionaryRef) CFUserNotificationRef;
pub extern fn CFUserNotificationReceiveResponse(userNotification: CFUserNotificationRef, timeout: CFTimeInterval, responseFlags: [*c]CFOptionFlags) SInt32;
pub extern fn CFUserNotificationGetResponseValue(userNotification: CFUserNotificationRef, key: CFStringRef, idx: CFIndex) CFStringRef;
pub extern fn CFUserNotificationGetResponseDictionary(userNotification: CFUserNotificationRef) CFDictionaryRef;
pub extern fn CFUserNotificationUpdate(userNotification: CFUserNotificationRef, timeout: CFTimeInterval, flags: CFOptionFlags, dictionary: CFDictionaryRef) SInt32;
pub extern fn CFUserNotificationCancel(userNotification: CFUserNotificationRef) SInt32;
pub extern fn CFUserNotificationCreateRunLoopSource(allocator: CFAllocatorRef, userNotification: CFUserNotificationRef, callout: CFUserNotificationCallBack, order: CFIndex) CFRunLoopSourceRef;
pub extern fn CFUserNotificationDisplayNotice(timeout: CFTimeInterval, flags: CFOptionFlags, iconURL: CFURLRef, soundURL: CFURLRef, localizationURL: CFURLRef, alertHeader: CFStringRef, alertMessage: CFStringRef, defaultButtonTitle: CFStringRef) SInt32;
pub extern fn CFUserNotificationDisplayAlert(timeout: CFTimeInterval, flags: CFOptionFlags, iconURL: CFURLRef, soundURL: CFURLRef, localizationURL: CFURLRef, alertHeader: CFStringRef, alertMessage: CFStringRef, defaultButtonTitle: CFStringRef, alternateButtonTitle: CFStringRef, otherButtonTitle: CFStringRef, responseFlags: [*c]CFOptionFlags) SInt32;
pub const kCFUserNotificationStopAlertLevel: c_int = 0;
pub const kCFUserNotificationNoteAlertLevel: c_int = 1;
pub const kCFUserNotificationCautionAlertLevel: c_int = 2;
pub const kCFUserNotificationPlainAlertLevel: c_int = 3;
const enum_unnamed_61 = c_uint;
pub const kCFUserNotificationDefaultResponse: c_int = 0;
pub const kCFUserNotificationAlternateResponse: c_int = 1;
pub const kCFUserNotificationOtherResponse: c_int = 2;
pub const kCFUserNotificationCancelResponse: c_int = 3;
const enum_unnamed_62 = c_uint;
pub const kCFUserNotificationNoDefaultButtonFlag: c_int = 32;
pub const kCFUserNotificationUseRadioButtonsFlag: c_int = 64;
const enum_unnamed_63 = c_uint;
pub inline fn CFUserNotificationCheckBoxChecked(arg_i: CFIndex) CFOptionFlags {
    var i = arg_i;
    return @bitCast(CFOptionFlags, @as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), @bitCast(c_long, @as(c_long, @as(c_int, 8))) + i));
}
pub inline fn CFUserNotificationSecureTextField(arg_i: CFIndex) CFOptionFlags {
    var i = arg_i;
    return @bitCast(CFOptionFlags, @as(c_ulong, 1) << @intCast(@import("std").math.Log2Int(c_ulong), @bitCast(c_long, @as(c_long, @as(c_int, 16))) + i));
}
pub inline fn CFUserNotificationPopUpSelection(arg_n: CFIndex) CFOptionFlags {
    var n = arg_n;
    return @bitCast(CFOptionFlags, n << @intCast(@import("std").math.Log2Int(CFIndex), 24));
}
pub extern const kCFUserNotificationIconURLKey: CFStringRef;
pub extern const kCFUserNotificationSoundURLKey: CFStringRef;
pub extern const kCFUserNotificationLocalizationURLKey: CFStringRef;
pub extern const kCFUserNotificationAlertHeaderKey: CFStringRef;
pub extern const kCFUserNotificationAlertMessageKey: CFStringRef;
pub extern const kCFUserNotificationDefaultButtonTitleKey: CFStringRef;
pub extern const kCFUserNotificationAlternateButtonTitleKey: CFStringRef;
pub extern const kCFUserNotificationOtherButtonTitleKey: CFStringRef;
pub extern const kCFUserNotificationProgressIndicatorValueKey: CFStringRef;
pub extern const kCFUserNotificationPopUpTitlesKey: CFStringRef;
pub extern const kCFUserNotificationTextFieldTitlesKey: CFStringRef;
pub extern const kCFUserNotificationCheckBoxTitlesKey: CFStringRef;
pub extern const kCFUserNotificationTextFieldValuesKey: CFStringRef;
pub extern const kCFUserNotificationPopUpSelectionKey: CFStringRef;
pub extern const kCFUserNotificationAlertTopMostKey: CFStringRef;
pub extern const kCFUserNotificationKeyboardTypesKey: CFStringRef;
pub const kCFXMLNodeCurrentVersion: c_int = 1;
const enum_unnamed_64 = c_uint;
pub const struct___CFXMLNode = opaque {};
pub const CFXMLNodeRef = ?*const struct___CFXMLNode;
pub const CFXMLTreeRef = CFTreeRef;
pub const CFXMLNodeTypeCode = CFIndex;
pub const kCFXMLNodeTypeDocument: c_int = 1;
pub const kCFXMLNodeTypeElement: c_int = 2;
pub const kCFXMLNodeTypeAttribute: c_int = 3;
pub const kCFXMLNodeTypeProcessingInstruction: c_int = 4;
pub const kCFXMLNodeTypeComment: c_int = 5;
pub const kCFXMLNodeTypeText: c_int = 6;
pub const kCFXMLNodeTypeCDATASection: c_int = 7;
pub const kCFXMLNodeTypeDocumentFragment: c_int = 8;
pub const kCFXMLNodeTypeEntity: c_int = 9;
pub const kCFXMLNodeTypeEntityReference: c_int = 10;
pub const kCFXMLNodeTypeDocumentType: c_int = 11;
pub const kCFXMLNodeTypeWhitespace: c_int = 12;
pub const kCFXMLNodeTypeNotation: c_int = 13;
pub const kCFXMLNodeTypeElementTypeDeclaration: c_int = 14;
pub const kCFXMLNodeTypeAttributeListDeclaration: c_int = 15;
const enum_unnamed_65 = c_uint;
pub const CFXMLElementInfo = extern struct {
    attributes: CFDictionaryRef,
    attributeOrder: CFArrayRef,
    isEmpty: Boolean,
    _reserved: [3]u8,
};
pub const CFXMLProcessingInstructionInfo = extern struct {
    dataString: CFStringRef,
};
pub const CFXMLDocumentInfo = extern struct {
    sourceURL: CFURLRef,
    encoding: CFStringEncoding,
};
pub const CFXMLExternalID = extern struct {
    systemID: CFURLRef,
    publicID: CFStringRef,
};
pub const CFXMLDocumentTypeInfo = extern struct {
    externalID: CFXMLExternalID,
};
pub const CFXMLNotationInfo = extern struct {
    externalID: CFXMLExternalID,
};
pub const CFXMLElementTypeDeclarationInfo = extern struct {
    contentDescription: CFStringRef,
};
pub const CFXMLAttributeDeclarationInfo = extern struct {
    attributeName: CFStringRef,
    typeString: CFStringRef,
    defaultString: CFStringRef,
};
pub const CFXMLAttributeListDeclarationInfo = extern struct {
    numberOfAttributes: CFIndex,
    attributes: [*c]CFXMLAttributeDeclarationInfo,
};
pub const CFXMLEntityTypeCode = CFIndex;
pub const kCFXMLEntityTypeParameter: c_int = 0;
pub const kCFXMLEntityTypeParsedInternal: c_int = 1;
pub const kCFXMLEntityTypeParsedExternal: c_int = 2;
pub const kCFXMLEntityTypeUnparsed: c_int = 3;
pub const kCFXMLEntityTypeCharacter: c_int = 4;
const enum_unnamed_66 = c_uint;
pub const CFXMLEntityInfo = extern struct {
    entityType: CFXMLEntityTypeCode,
    replacementText: CFStringRef,
    entityID: CFXMLExternalID,
    notationName: CFStringRef,
};
pub const CFXMLEntityReferenceInfo = extern struct {
    entityType: CFXMLEntityTypeCode,
};
pub extern fn CFXMLNodeGetTypeID() CFTypeID;
pub extern fn CFXMLNodeCreate(alloc: CFAllocatorRef, xmlType: CFXMLNodeTypeCode, dataString: CFStringRef, additionalInfoPtr: ?*const anyopaque, version: CFIndex) CFXMLNodeRef;
pub extern fn CFXMLNodeCreateCopy(alloc: CFAllocatorRef, origNode: CFXMLNodeRef) CFXMLNodeRef;
pub extern fn CFXMLNodeGetTypeCode(node: CFXMLNodeRef) CFXMLNodeTypeCode;
pub extern fn CFXMLNodeGetString(node: CFXMLNodeRef) CFStringRef;
pub extern fn CFXMLNodeGetInfoPtr(node: CFXMLNodeRef) ?*const anyopaque;
pub extern fn CFXMLNodeGetVersion(node: CFXMLNodeRef) CFIndex;
pub extern fn CFXMLTreeCreateWithNode(allocator: CFAllocatorRef, node: CFXMLNodeRef) CFXMLTreeRef;
pub extern fn CFXMLTreeGetNode(xmlTree: CFXMLTreeRef) CFXMLNodeRef;
pub const struct___CFXMLParser = opaque {};
pub const CFXMLParserRef = ?*struct___CFXMLParser;
pub const CFXMLParserOptions = CFOptionFlags;
pub const kCFXMLParserValidateDocument: c_int = 1;
pub const kCFXMLParserSkipMetaData: c_int = 2;
pub const kCFXMLParserReplacePhysicalEntities: c_int = 4;
pub const kCFXMLParserSkipWhitespace: c_int = 8;
pub const kCFXMLParserResolveExternalEntities: c_int = 16;
pub const kCFXMLParserAddImpliedAttributes: c_int = 32;
pub const kCFXMLParserAllOptions: c_int = 16777215;
pub const kCFXMLParserNoOptions: c_int = 0;
const enum_unnamed_67 = c_uint;
pub const CFXMLParserStatusCode = CFIndex;
pub const kCFXMLStatusParseNotBegun: c_int = -2;
pub const kCFXMLStatusParseInProgress: c_int = -1;
pub const kCFXMLStatusParseSuccessful: c_int = 0;
pub const kCFXMLErrorUnexpectedEOF: c_int = 1;
pub const kCFXMLErrorUnknownEncoding: c_int = 2;
pub const kCFXMLErrorEncodingConversionFailure: c_int = 3;
pub const kCFXMLErrorMalformedProcessingInstruction: c_int = 4;
pub const kCFXMLErrorMalformedDTD: c_int = 5;
pub const kCFXMLErrorMalformedName: c_int = 6;
pub const kCFXMLErrorMalformedCDSect: c_int = 7;
pub const kCFXMLErrorMalformedCloseTag: c_int = 8;
pub const kCFXMLErrorMalformedStartTag: c_int = 9;
pub const kCFXMLErrorMalformedDocument: c_int = 10;
pub const kCFXMLErrorElementlessDocument: c_int = 11;
pub const kCFXMLErrorMalformedComment: c_int = 12;
pub const kCFXMLErrorMalformedCharacterReference: c_int = 13;
pub const kCFXMLErrorMalformedParsedCharacterData: c_int = 14;
pub const kCFXMLErrorNoData: c_int = 15;
const enum_unnamed_68 = c_int;
pub const CFXMLParserCreateXMLStructureCallBack = ?*const fn (CFXMLParserRef, CFXMLNodeRef, ?*anyopaque) callconv(.C) ?*anyopaque;
pub const CFXMLParserAddChildCallBack = ?*const fn (CFXMLParserRef, ?*anyopaque, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const CFXMLParserEndXMLStructureCallBack = ?*const fn (CFXMLParserRef, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const CFXMLParserResolveExternalEntityCallBack = ?*const fn (CFXMLParserRef, [*c]CFXMLExternalID, ?*anyopaque) callconv(.C) CFDataRef;
pub const CFXMLParserHandleErrorCallBack = ?*const fn (CFXMLParserRef, CFXMLParserStatusCode, ?*anyopaque) callconv(.C) Boolean;
pub const CFXMLParserCallBacks = extern struct {
    version: CFIndex,
    createXMLStructure: CFXMLParserCreateXMLStructureCallBack,
    addChild: CFXMLParserAddChildCallBack,
    endXMLStructure: CFXMLParserEndXMLStructureCallBack,
    resolveExternalEntity: CFXMLParserResolveExternalEntityCallBack,
    handleError: CFXMLParserHandleErrorCallBack,
};
pub const CFXMLParserRetainCallBack = ?*const fn (?*const anyopaque) callconv(.C) ?*const anyopaque;
pub const CFXMLParserReleaseCallBack = ?*const fn (?*const anyopaque) callconv(.C) void;
pub const CFXMLParserCopyDescriptionCallBack = ?*const fn (?*const anyopaque) callconv(.C) CFStringRef;
pub const CFXMLParserContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: CFXMLParserRetainCallBack,
    release: CFXMLParserReleaseCallBack,
    copyDescription: CFXMLParserCopyDescriptionCallBack,
};
pub extern fn CFXMLParserGetTypeID() CFTypeID;
pub extern fn CFXMLParserCreate(allocator: CFAllocatorRef, xmlData: CFDataRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex, callBacks: [*c]CFXMLParserCallBacks, context: [*c]CFXMLParserContext) CFXMLParserRef;
pub extern fn CFXMLParserCreateWithDataFromURL(allocator: CFAllocatorRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex, callBacks: [*c]CFXMLParserCallBacks, context: [*c]CFXMLParserContext) CFXMLParserRef;
pub extern fn CFXMLParserGetContext(parser: CFXMLParserRef, context: [*c]CFXMLParserContext) void;
pub extern fn CFXMLParserGetCallBacks(parser: CFXMLParserRef, callBacks: [*c]CFXMLParserCallBacks) void;
pub extern fn CFXMLParserGetSourceURL(parser: CFXMLParserRef) CFURLRef;
pub extern fn CFXMLParserGetLocation(parser: CFXMLParserRef) CFIndex;
pub extern fn CFXMLParserGetLineNumber(parser: CFXMLParserRef) CFIndex;
pub extern fn CFXMLParserGetDocument(parser: CFXMLParserRef) ?*anyopaque;
pub extern fn CFXMLParserGetStatusCode(parser: CFXMLParserRef) CFXMLParserStatusCode;
pub extern fn CFXMLParserCopyErrorDescription(parser: CFXMLParserRef) CFStringRef;
pub extern fn CFXMLParserAbort(parser: CFXMLParserRef, errorCode: CFXMLParserStatusCode, errorDescription: CFStringRef) void;
pub extern fn CFXMLParserParse(parser: CFXMLParserRef) Boolean;
pub extern fn CFXMLTreeCreateFromData(allocator: CFAllocatorRef, xmlData: CFDataRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex) CFXMLTreeRef;
pub extern fn CFXMLTreeCreateFromDataWithError(allocator: CFAllocatorRef, xmlData: CFDataRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex, errorDict: [*c]CFDictionaryRef) CFXMLTreeRef;
pub extern fn CFXMLTreeCreateWithDataFromURL(allocator: CFAllocatorRef, dataSource: CFURLRef, parseOptions: CFOptionFlags, versionOfNodes: CFIndex) CFXMLTreeRef;
pub extern fn CFXMLTreeCreateXMLData(allocator: CFAllocatorRef, xmlTree: CFXMLTreeRef) CFDataRef;
pub extern fn CFXMLCreateStringByEscapingEntities(allocator: CFAllocatorRef, string: CFStringRef, entitiesDictionary: CFDictionaryRef) CFStringRef;
pub extern fn CFXMLCreateStringByUnescapingEntities(allocator: CFAllocatorRef, string: CFStringRef, entitiesDictionary: CFDictionaryRef) CFStringRef;
pub extern const kCFXMLTreeErrorDescription: CFStringRef;
pub extern const kCFXMLTreeErrorLineNumber: CFStringRef;
pub extern const kCFXMLTreeErrorLocation: CFStringRef;
pub extern const kCFXMLTreeErrorStatusCode: CFStringRef;
pub const kClippingCreator: c_int = 1685217639;
pub const kClippingPictureType: c_int = 1668051056;
pub const kClippingTextType: c_int = 1668051060;
pub const kClippingSoundType: c_int = 1668051059;
pub const kClippingUnknownType: c_int = 1668051061;
const enum_unnamed_69 = c_uint;
pub const kInternetLocationCreator: c_int = 1685217639;
pub const kInternetLocationHTTP: c_int = 1768712308;
pub const kInternetLocationFTP: c_int = 1768711796;
pub const kInternetLocationFile: c_int = 1768711785;
pub const kInternetLocationMail: c_int = 1768713569;
pub const kInternetLocationNNTP: c_int = 1768713847;
pub const kInternetLocationAFP: c_int = 1768710502;
pub const kInternetLocationAppleTalk: c_int = 1768710516;
pub const kInternetLocationNSL: c_int = 1768713843;
pub const kInternetLocationGeneric: c_int = 1768712037;
const enum_unnamed_70 = c_uint;
pub const kCustomIconResource: c_int = -16455;
const enum_unnamed_71 = c_int;
pub const kCustomBadgeResourceType: c_int = 1650549863;
pub const kCustomBadgeResourceID: c_int = -16455;
pub const kCustomBadgeResourceVersion: c_int = 0;
const enum_unnamed_72 = c_int;
pub const struct_CustomBadgeResource = extern struct {
    version: SInt16,
    customBadgeResourceID: SInt16,
    customBadgeType: OSType,
    customBadgeCreator: OSType,
    windowBadgeType: OSType,
    windowBadgeCreator: OSType,
    overrideType: OSType,
    overrideCreator: OSType,
};
pub const CustomBadgeResource = struct_CustomBadgeResource;
pub const CustomBadgeResourcePtr = [*c]CustomBadgeResource;
pub const CustomBadgeResourceHandle = [*c]CustomBadgeResourcePtr;
pub const kRoutingResourceType: c_int = 1919907188;
pub const kRoutingResourceID: c_int = 0;
const enum_unnamed_73 = c_uint;
pub const struct_RoutingResourceEntry = extern struct {
    creator: OSType,
    fileType: OSType,
    targetFolder: OSType,
    destinationFolder: OSType,
    reservedField: OSType,
};
pub const RoutingResourceEntry = struct_RoutingResourceEntry;
pub const RoutingResourcePtr = [*c]RoutingResourceEntry;
pub const RoutingResourceHandle = [*c]RoutingResourcePtr;
pub const kContainerFolderAliasType: c_int = 1717858928;
pub const kContainerTrashAliasType: c_int = 1953657704;
pub const kContainerHardDiskAliasType: c_int = 1751413611;
pub const kContainerFloppyAliasType: c_int = 1718382713;
pub const kContainerServerAliasType: c_int = 1936881266;
pub const kApplicationAliasType: c_int = 1633972848;
pub const kContainerAliasType: c_int = 1685221232;
pub const kDesktopPrinterAliasType: c_int = 1685352545;
pub const kContainerCDROMAliasType: c_int = 1667523698;
pub const kApplicationCPAliasType: c_int = 1633903728;
pub const kApplicationDAAliasType: c_int = 1633969264;
pub const kPackageAliasType: c_int = 1718643553;
pub const kAppPackageAliasType: c_int = 1717661793;
const enum_unnamed_74 = c_uint;
pub const kSystemFolderAliasType: c_int = 1717662585;
pub const kAppleMenuFolderAliasType: c_int = 1717657965;
pub const kStartupFolderAliasType: c_int = 1717662580;
pub const kPrintMonitorDocsFolderAliasType: c_int = 1717661806;
pub const kPreferencesFolderAliasType: c_int = 1717661798;
pub const kControlPanelFolderAliasType: c_int = 1717658484;
pub const kExtensionFolderAliasType: c_int = 1717659000;
const enum_unnamed_75 = c_uint;
pub const kExportedFolderAliasType: c_int = 1717658996;
pub const kDropFolderAliasType: c_int = 1717658738;
pub const kSharedFolderAliasType: c_int = 1717662568;
pub const kMountedFolderAliasType: c_int = 1717661038;
const enum_unnamed_76 = c_uint;
pub const kIsOnDesk: c_int = 1;
pub const kColor: c_int = 14;
pub const kIsShared: c_int = 64;
pub const kHasNoINITs: c_int = 128;
pub const kHasBeenInited: c_int = 256;
pub const kHasCustomIcon: c_int = 1024;
pub const kIsStationery: c_int = 2048;
pub const kNameLocked: c_int = 4096;
pub const kHasBundle: c_int = 8192;
pub const kIsInvisible: c_int = 16384;
pub const kIsAlias: c_int = 32768;
const enum_unnamed_77 = c_uint;
pub const fOnDesk: c_int = 1;
pub const fHasBundle: c_int = 8192;
pub const fInvisible: c_int = 16384;
const enum_unnamed_78 = c_uint;
pub const fTrash: c_int = -3;
pub const fDesktop: c_int = -2;
pub const fDisk: c_int = 0;
const enum_unnamed_79 = c_int;
pub const kExtendedFlagsAreInvalid: c_int = 32768;
pub const kExtendedFlagHasCustomBadge: c_int = 256;
pub const kExtendedFlagObjectIsBusy: c_int = 128;
pub const kExtendedFlagHasRoutingInfo: c_int = 4;
const enum_unnamed_80 = c_uint;
pub const kFirstMagicBusyFiletype: c_int = 1652193568;
pub const kLastMagicBusyFiletype: c_int = 1652193599;
const enum_unnamed_81 = c_uint;
pub const kMagicBusyCreationDate: c_int = 1329266096;
const enum_unnamed_82 = c_uint;
pub const struct_FileInfo = extern struct {
    fileType: OSType,
    fileCreator: OSType,
    finderFlags: UInt16,
    location: Point,
    reservedField: UInt16,
};
pub const FileInfo = struct_FileInfo;
pub const struct_FolderInfo = extern struct {
    windowBounds: Rect,
    finderFlags: UInt16,
    location: Point,
    reservedField: UInt16,
};
pub const FolderInfo = struct_FolderInfo;
pub const struct_ExtendedFileInfo = extern struct {
    reserved1: [4]SInt16,
    extendedFinderFlags: UInt16,
    reserved2: SInt16,
    putAwayFolderID: SInt32,
};
pub const ExtendedFileInfo = struct_ExtendedFileInfo;
pub const struct_ExtendedFolderInfo = extern struct {
    scrollPosition: Point,
    reserved1: SInt32,
    extendedFinderFlags: UInt16,
    reserved2: SInt16,
    putAwayFolderID: SInt32,
};
pub const ExtendedFolderInfo = struct_ExtendedFolderInfo;
pub const struct_FInfo = extern struct {
    fdType: OSType,
    fdCreator: OSType,
    fdFlags: UInt16,
    fdLocation: Point,
    fdFldr: SInt16,
};
pub const FInfo = struct_FInfo;
pub const struct_FXInfo = extern struct {
    fdIconID: SInt16,
    fdReserved: [3]SInt16,
    fdScript: SInt8,
    fdXFlags: SInt8,
    fdComment: SInt16,
    fdPutAway: SInt32,
};
pub const FXInfo = struct_FXInfo;
pub const struct_DInfo = extern struct {
    frRect: Rect,
    frFlags: UInt16,
    frLocation: Point,
    frView: SInt16,
};
pub const DInfo = struct_DInfo;
pub const struct_DXInfo = extern struct {
    frScroll: Point,
    frOpenChain: SInt32,
    frScript: SInt8,
    frXFlags: SInt8,
    frComment: SInt16,
    frPutAway: SInt32,
};
pub const DXInfo = struct_DXInfo;
pub extern fn FixRatio(numer: c_short, denom: c_short) Fixed;
pub extern fn FixMul(a: Fixed, b: Fixed) Fixed;
pub extern fn FixRound(x: Fixed) c_short;
pub extern fn Fix2Frac(x: Fixed) Fract;
pub extern fn Fix2Long(x: Fixed) SInt32;
pub extern fn Long2Fix(x: SInt32) Fixed;
pub extern fn Frac2Fix(x: Fract) Fixed;
pub extern fn FracMul(x: Fract, y: Fract) Fract;
pub extern fn FixDiv(x: Fixed, y: Fixed) Fixed;
pub extern fn FracDiv(x: Fract, y: Fract) Fract;
pub extern fn FracSqrt(x: Fract) Fract;
pub extern fn FracSin(x: Fixed) Fract;
pub extern fn FracCos(x: Fixed) Fract;
pub extern fn FixATan2(x: SInt32, y: SInt32) Fixed;
pub extern fn Frac2X(x: Fract) f64;
pub extern fn Fix2X(x: Fixed) f64;
pub extern fn X2Fix(x: f64) Fixed;
pub extern fn X2Frac(x: f64) Fract;
pub extern fn WideCompare(target: [*c]const wide, source: [*c]const wide) c_short;
pub extern fn WideAdd(target: [*c]wide, source: [*c]const wide) [*c]wide;
pub extern fn WideSubtract(target: [*c]wide, source: [*c]const wide) [*c]wide;
pub extern fn WideNegate(target: [*c]wide) [*c]wide;
pub extern fn WideShift(target: [*c]wide, shift: SInt32) [*c]wide;
pub extern fn WideSquareRoot(source: [*c]const wide) UInt32;
pub extern fn WideMultiply(multiplicand: SInt32, multiplier: SInt32, target: [*c]wide) [*c]wide;
pub extern fn WideDivide(dividend: [*c]const wide, divisor: SInt32, remainder: [*c]SInt32) SInt32;
pub extern fn WideWideDivide(dividend: [*c]wide, divisor: SInt32, remainder: [*c]SInt32) [*c]wide;
pub extern fn WideBitShift(target: [*c]wide, shift: SInt32) [*c]wide;
pub extern fn UnsignedFixedMulDiv(value: UnsignedFixed, multiplier: UnsignedFixed, divisor: UnsignedFixed) UnsignedFixed;
pub const itlcShowIcon: c_int = 7;
pub const itlcDualCaret: c_int = 6;
pub const itlcSysDirection: c_int = 15;
const enum_unnamed_83 = c_uint;
pub const itlcDisableKeyScriptSync: c_int = 3;
const enum_unnamed_84 = c_uint;
pub const itlcDisableKeyScriptSyncMask: c_int = 8;
const enum_unnamed_85 = c_uint;
pub const tokLeftQuote: c_int = 1;
pub const tokRightQuote: c_int = 2;
pub const tokLeadPlacer: c_int = 3;
pub const tokLeader: c_int = 4;
pub const tokNonLeader: c_int = 5;
pub const tokZeroLead: c_int = 6;
pub const tokPercent: c_int = 7;
pub const tokPlusSign: c_int = 8;
pub const tokMinusSign: c_int = 9;
pub const tokThousands: c_int = 10;
pub const tokReserved: c_int = 11;
pub const tokSeparator: c_int = 12;
pub const tokEscape: c_int = 13;
pub const tokDecPoint: c_int = 14;
pub const tokEPlus: c_int = 15;
pub const tokEMinus: c_int = 16;
pub const tokMaxSymbols: c_int = 31;
pub const curNumberPartsVersion: c_int = 1;
const enum_unnamed_86 = c_uint;
pub const currSymLead: c_int = 16;
pub const currNegSym: c_int = 32;
pub const currTrailingZ: c_int = 64;
pub const currLeadingZ: c_int = 128;
const enum_unnamed_87 = c_uint;
pub const mdy: c_int = 0;
pub const dmy: c_int = 1;
pub const ymd: c_int = 2;
pub const myd: c_int = 3;
pub const dym: c_int = 4;
pub const ydm: c_int = 5;
const enum_unnamed_88 = c_uint;
pub const DateOrders = SInt8;
pub const timeCycle24: c_int = 0;
pub const timeCycleZero: c_int = 1;
pub const timeCycle12: c_int = 255;
pub const zeroCycle: c_int = 1;
pub const longDay: c_int = 0;
pub const longWeek: c_int = 1;
pub const longMonth: c_int = 2;
pub const longYear: c_int = 3;
pub const supDay: c_int = 1;
pub const supWeek: c_int = 2;
pub const supMonth: c_int = 4;
pub const supYear: c_int = 8;
pub const dayLdingZ: c_int = 32;
pub const mntLdingZ: c_int = 64;
pub const century: c_int = 128;
pub const secLeadingZ: c_int = 32;
pub const minLeadingZ: c_int = 64;
pub const hrLeadingZ: c_int = 128;
const enum_unnamed_89 = c_uint;
pub const struct_OffPair = extern struct {
    offFirst: c_short,
    offSecond: c_short,
};
pub const OffPair = struct_OffPair;
pub const OffsetTable = [3]OffPair;
pub const struct_Intl0Rec = extern struct {
    decimalPt: u8,
    thousSep: u8,
    listSep: u8,
    currSym1: u8,
    currSym2: u8,
    currSym3: u8,
    currFmt: UInt8,
    dateOrder: UInt8,
    shrtDateFmt: UInt8,
    dateSep: u8,
    timeCycle: UInt8,
    timeFmt: UInt8,
    mornStr: [4]u8,
    eveStr: [4]u8,
    timeSep: u8,
    time1Suff: u8,
    time2Suff: u8,
    time3Suff: u8,
    time4Suff: u8,
    time5Suff: u8,
    time6Suff: u8,
    time7Suff: u8,
    time8Suff: u8,
    metricSys: UInt8,
    intl0Vers: c_short,
};
pub const Intl0Rec = struct_Intl0Rec;
pub const Intl0Ptr = [*c]Intl0Rec;
pub const Intl0Hndl = [*c]Intl0Ptr;
pub const struct_Intl1Rec = extern struct {
    days: [7]Str15,
    months: [12]Str15,
    suppressDay: UInt8,
    lngDateFmt: UInt8,
    dayLeading0: UInt8,
    abbrLen: UInt8,
    st0: [4]u8,
    st1: [4]u8,
    st2: [4]u8,
    st3: [4]u8,
    st4: [4]u8,
    intl1Vers: c_short,
    localRtn: [1]c_short,
};
pub const Intl1Rec = struct_Intl1Rec;
pub const Intl1Ptr = [*c]Intl1Rec;
pub const Intl1Hndl = [*c]Intl1Ptr;
pub const struct_Itl1ExtRec = extern struct {
    base: Intl1Rec,
    version: c_short,
    format: c_short,
    calendarCode: c_short,
    extraDaysTableOffset: SInt32,
    extraDaysTableLength: SInt32,
    extraMonthsTableOffset: SInt32,
    extraMonthsTableLength: SInt32,
    abbrevDaysTableOffset: SInt32,
    abbrevDaysTableLength: SInt32,
    abbrevMonthsTableOffset: SInt32,
    abbrevMonthsTableLength: SInt32,
    extraSepsTableOffset: SInt32,
    extraSepsTableLength: SInt32,
    tables: [1]c_short,
};
pub const Itl1ExtRec = struct_Itl1ExtRec;
pub const struct_UntokenTable = extern struct {
    len: c_short,
    lastToken: c_short,
    index: [256]c_short,
};
pub const UntokenTable = struct_UntokenTable;
pub const UntokenTablePtr = [*c]UntokenTable;
pub const UntokenTableHandle = [*c]UntokenTablePtr;
const struct_unnamed_90 = extern struct {
    lo: u8,
    hi: u8,
};
pub const union_WideChar = extern union {
    a: struct_unnamed_90,
    b: c_short,
};
pub const WideChar = union_WideChar;
pub const struct_WideCharArr = extern struct {
    size: c_short,
    data: [10]WideChar,
};
pub const WideCharArr = struct_WideCharArr;
pub const struct_NumberParts = extern struct {
    version: c_short,
    data: [31]WideChar,
    pePlus: WideCharArr,
    peMinus: WideCharArr,
    peMinusPlus: WideCharArr,
    altNumTable: WideCharArr,
    reserved: [20]u8,
};
pub const NumberParts = struct_NumberParts;
pub const NumberPartsPtr = [*c]NumberParts;
pub const struct_Itl4Rec = extern struct {
    flags: c_short,
    resourceType: SInt32,
    resourceNum: c_short,
    version: c_short,
    resHeader1: SInt32,
    resHeader2: SInt32,
    numTables: c_short,
    mapOffset: SInt32,
    strOffset: SInt32,
    fetchOffset: SInt32,
    unTokenOffset: SInt32,
    defPartsOffset: SInt32,
    resOffset6: SInt32,
    resOffset7: SInt32,
    resOffset8: SInt32,
};
pub const Itl4Rec = struct_Itl4Rec;
pub const Itl4Ptr = [*c]Itl4Rec;
pub const Itl4Handle = [*c]Itl4Ptr;
pub const struct_NItl4Rec = extern struct {
    flags: c_short,
    resourceType: SInt32,
    resourceNum: c_short,
    version: c_short,
    format: c_short,
    resHeader: c_short,
    resHeader2: SInt32,
    numTables: c_short,
    mapOffset: SInt32,
    strOffset: SInt32,
    fetchOffset: SInt32,
    unTokenOffset: SInt32,
    defPartsOffset: SInt32,
    whtSpListOffset: SInt32,
    resOffset7: SInt32,
    resOffset8: SInt32,
    resLength1: c_short,
    resLength2: c_short,
    resLength3: c_short,
    unTokenLength: c_short,
    defPartsLength: c_short,
    whtSpListLength: c_short,
    resLength7: c_short,
    resLength8: c_short,
};
pub const NItl4Rec = struct_NItl4Rec;
pub const NItl4Ptr = [*c]NItl4Rec;
pub const NItl4Handle = [*c]NItl4Ptr;
pub const struct_TableDirectoryRecord = extern struct {
    tableSignature: OSType,
    reserved: UInt32,
    tableStartOffset: UInt32,
    tableSize: UInt32,
};
pub const TableDirectoryRecord = struct_TableDirectoryRecord;
pub const struct_Itl5Record = extern struct {
    versionNumber: Fixed,
    numberOfTables: c_ushort,
    reserved: [3]c_ushort,
    tableDirectory: [1]TableDirectoryRecord,
};
pub const Itl5Record = struct_Itl5Record;
pub const struct_RuleBasedTrslRecord = extern struct {
    sourceType: c_short,
    targetType: c_short,
    formatNumber: c_short,
    propertyFlag: c_short,
    numberOfRules: c_short,
};
pub const RuleBasedTrslRecord = struct_RuleBasedTrslRecord;
pub const struct_ItlcRecord = extern struct {
    itlcSystem: c_short,
    itlcReserved: c_short,
    itlcFontForce: SInt8,
    itlcIntlForce: SInt8,
    itlcOldKybd: SInt8,
    itlcFlags: SInt8,
    itlcIconOffset: c_short,
    itlcIconSide: SInt8,
    itlcIconRsvd: SInt8,
    itlcRegionCode: c_short,
    itlcSysFlags: c_short,
    itlcReserved4: [32]SInt8,
};
pub const ItlcRecord = struct_ItlcRecord;
pub const struct_ItlbRecord = extern struct {
    itlbNumber: c_short,
    itlbDate: c_short,
    itlbSort: c_short,
    itlbFlags: c_short,
    itlbToken: c_short,
    itlbEncoding: c_short,
    itlbLang: c_short,
    itlbNumRep: SInt8,
    itlbDateRep: SInt8,
    itlbKeys: c_short,
    itlbIcon: c_short,
};
pub const ItlbRecord = struct_ItlbRecord;
pub const struct_ItlbExtRecord = extern struct {
    base: ItlbRecord,
    itlbLocalSize: SInt32,
    itlbMonoFond: c_short,
    itlbMonoSize: c_short,
    itlbPrefFond: c_short,
    itlbPrefSize: c_short,
    itlbSmallFond: c_short,
    itlbSmallSize: c_short,
    itlbSysFond: c_short,
    itlbSysSize: c_short,
    itlbAppFond: c_short,
    itlbAppSize: c_short,
    itlbHelpFond: c_short,
    itlbHelpSize: c_short,
    itlbValidStyles: Style,
    itlbAliasStyle: Style,
};
pub const ItlbExtRecord = struct_ItlbExtRecord;
pub const smSystemScript: c_int = -1;
pub const smCurrentScript: c_int = -2;
pub const smAllScripts: c_int = -3;
const enum_unnamed_91 = c_int;
pub const smRoman: c_int = 0;
pub const smJapanese: c_int = 1;
pub const smTradChinese: c_int = 2;
pub const smKorean: c_int = 3;
pub const smArabic: c_int = 4;
pub const smHebrew: c_int = 5;
pub const smGreek: c_int = 6;
pub const smCyrillic: c_int = 7;
pub const smRSymbol: c_int = 8;
pub const smDevanagari: c_int = 9;
pub const smGurmukhi: c_int = 10;
pub const smGujarati: c_int = 11;
pub const smOriya: c_int = 12;
pub const smBengali: c_int = 13;
pub const smTamil: c_int = 14;
pub const smTelugu: c_int = 15;
pub const smKannada: c_int = 16;
pub const smMalayalam: c_int = 17;
pub const smSinhalese: c_int = 18;
pub const smBurmese: c_int = 19;
pub const smKhmer: c_int = 20;
pub const smThai: c_int = 21;
pub const smLao: c_int = 22;
pub const smGeorgian: c_int = 23;
pub const smArmenian: c_int = 24;
pub const smSimpChinese: c_int = 25;
pub const smTibetan: c_int = 26;
pub const smMongolian: c_int = 27;
pub const smEthiopic: c_int = 28;
pub const smGeez: c_int = 28;
pub const smCentralEuroRoman: c_int = 29;
pub const smVietnamese: c_int = 30;
pub const smExtArabic: c_int = 31;
pub const smUninterp: c_int = 32;
const enum_unnamed_92 = c_uint;
pub const smUnicodeScript: c_int = 126;
const enum_unnamed_93 = c_uint;
pub const smChinese: c_int = 2;
pub const smRussian: c_int = 7;
pub const smLaotian: c_int = 22;
pub const smAmharic: c_int = 28;
pub const smSlavic: c_int = 29;
pub const smEastEurRoman: c_int = 29;
pub const smSindhi: c_int = 31;
pub const smKlingon: c_int = 32;
const enum_unnamed_94 = c_uint;
pub const langEnglish: c_int = 0;
pub const langFrench: c_int = 1;
pub const langGerman: c_int = 2;
pub const langItalian: c_int = 3;
pub const langDutch: c_int = 4;
pub const langSwedish: c_int = 5;
pub const langSpanish: c_int = 6;
pub const langDanish: c_int = 7;
pub const langPortuguese: c_int = 8;
pub const langNorwegian: c_int = 9;
pub const langHebrew: c_int = 10;
pub const langJapanese: c_int = 11;
pub const langArabic: c_int = 12;
pub const langFinnish: c_int = 13;
pub const langGreek: c_int = 14;
pub const langIcelandic: c_int = 15;
pub const langMaltese: c_int = 16;
pub const langTurkish: c_int = 17;
pub const langCroatian: c_int = 18;
pub const langTradChinese: c_int = 19;
pub const langUrdu: c_int = 20;
pub const langHindi: c_int = 21;
pub const langThai: c_int = 22;
pub const langKorean: c_int = 23;
const enum_unnamed_95 = c_uint;
pub const langLithuanian: c_int = 24;
pub const langPolish: c_int = 25;
pub const langHungarian: c_int = 26;
pub const langEstonian: c_int = 27;
pub const langLatvian: c_int = 28;
pub const langSami: c_int = 29;
pub const langFaroese: c_int = 30;
pub const langFarsi: c_int = 31;
pub const langPersian: c_int = 31;
pub const langRussian: c_int = 32;
pub const langSimpChinese: c_int = 33;
pub const langFlemish: c_int = 34;
pub const langIrishGaelic: c_int = 35;
pub const langAlbanian: c_int = 36;
pub const langRomanian: c_int = 37;
pub const langCzech: c_int = 38;
pub const langSlovak: c_int = 39;
pub const langSlovenian: c_int = 40;
pub const langYiddish: c_int = 41;
pub const langSerbian: c_int = 42;
pub const langMacedonian: c_int = 43;
pub const langBulgarian: c_int = 44;
pub const langUkrainian: c_int = 45;
pub const langByelorussian: c_int = 46;
pub const langBelorussian: c_int = 46;
const enum_unnamed_96 = c_uint;
pub const langUzbek: c_int = 47;
pub const langKazakh: c_int = 48;
pub const langAzerbaijani: c_int = 49;
pub const langAzerbaijanAr: c_int = 50;
pub const langArmenian: c_int = 51;
pub const langGeorgian: c_int = 52;
pub const langMoldavian: c_int = 53;
pub const langKirghiz: c_int = 54;
pub const langTajiki: c_int = 55;
pub const langTurkmen: c_int = 56;
pub const langMongolian: c_int = 57;
pub const langMongolianCyr: c_int = 58;
pub const langPashto: c_int = 59;
pub const langKurdish: c_int = 60;
pub const langKashmiri: c_int = 61;
pub const langSindhi: c_int = 62;
pub const langTibetan: c_int = 63;
pub const langNepali: c_int = 64;
pub const langSanskrit: c_int = 65;
pub const langMarathi: c_int = 66;
pub const langBengali: c_int = 67;
pub const langAssamese: c_int = 68;
pub const langGujarati: c_int = 69;
pub const langPunjabi: c_int = 70;
const enum_unnamed_97 = c_uint;
pub const langOriya: c_int = 71;
pub const langMalayalam: c_int = 72;
pub const langKannada: c_int = 73;
pub const langTamil: c_int = 74;
pub const langTelugu: c_int = 75;
pub const langSinhalese: c_int = 76;
pub const langBurmese: c_int = 77;
pub const langKhmer: c_int = 78;
pub const langLao: c_int = 79;
pub const langVietnamese: c_int = 80;
pub const langIndonesian: c_int = 81;
pub const langTagalog: c_int = 82;
pub const langMalayRoman: c_int = 83;
pub const langMalayArabic: c_int = 84;
pub const langAmharic: c_int = 85;
pub const langTigrinya: c_int = 86;
pub const langOromo: c_int = 87;
pub const langSomali: c_int = 88;
pub const langSwahili: c_int = 89;
pub const langKinyarwanda: c_int = 90;
pub const langRuanda: c_int = 90;
pub const langRundi: c_int = 91;
pub const langNyanja: c_int = 92;
pub const langChewa: c_int = 92;
pub const langMalagasy: c_int = 93;
pub const langEsperanto: c_int = 94;
const enum_unnamed_98 = c_uint;
pub const langWelsh: c_int = 128;
pub const langBasque: c_int = 129;
pub const langCatalan: c_int = 130;
pub const langLatin: c_int = 131;
pub const langQuechua: c_int = 132;
pub const langGuarani: c_int = 133;
pub const langAymara: c_int = 134;
pub const langTatar: c_int = 135;
pub const langUighur: c_int = 136;
pub const langDzongkha: c_int = 137;
pub const langJavaneseRom: c_int = 138;
pub const langSundaneseRom: c_int = 139;
pub const langGalician: c_int = 140;
pub const langAfrikaans: c_int = 141;
const enum_unnamed_99 = c_uint;
pub const langBreton: c_int = 142;
pub const langInuktitut: c_int = 143;
pub const langScottishGaelic: c_int = 144;
pub const langManxGaelic: c_int = 145;
pub const langIrishGaelicScript: c_int = 146;
pub const langTongan: c_int = 147;
pub const langGreekAncient: c_int = 148;
pub const langGreenlandic: c_int = 149;
pub const langAzerbaijanRoman: c_int = 150;
pub const langNynorsk: c_int = 151;
const enum_unnamed_100 = c_uint;
pub const langUnspecified: c_int = 32767;
const enum_unnamed_101 = c_uint;
pub const langPortugese: c_int = 8;
pub const langMalta: c_int = 16;
pub const langYugoslavian: c_int = 18;
pub const langChinese: c_int = 19;
pub const langLettish: c_int = 28;
pub const langLapponian: c_int = 29;
pub const langLappish: c_int = 29;
pub const langSaamisk: c_int = 29;
pub const langFaeroese: c_int = 30;
pub const langIrish: c_int = 35;
pub const langGalla: c_int = 87;
pub const langAfricaans: c_int = 141;
pub const langGreekPoly: c_int = 148;
const enum_unnamed_102 = c_uint;
pub const verUS: c_int = 0;
pub const verFrance: c_int = 1;
pub const verBritain: c_int = 2;
pub const verGermany: c_int = 3;
pub const verItaly: c_int = 4;
pub const verNetherlands: c_int = 5;
pub const verFlemish: c_int = 6;
pub const verSweden: c_int = 7;
pub const verSpain: c_int = 8;
pub const verDenmark: c_int = 9;
pub const verPortugal: c_int = 10;
pub const verFrCanada: c_int = 11;
pub const verNorway: c_int = 12;
pub const verIsrael: c_int = 13;
pub const verJapan: c_int = 14;
pub const verAustralia: c_int = 15;
pub const verArabic: c_int = 16;
pub const verFinland: c_int = 17;
pub const verFrSwiss: c_int = 18;
pub const verGrSwiss: c_int = 19;
pub const verGreece: c_int = 20;
pub const verIceland: c_int = 21;
pub const verMalta: c_int = 22;
pub const verCyprus: c_int = 23;
pub const verTurkey: c_int = 24;
pub const verYugoCroatian: c_int = 25;
const enum_unnamed_103 = c_uint;
pub const verNetherlandsComma: c_int = 26;
pub const verFlemishPoint: c_int = 27;
pub const verCanadaComma: c_int = 28;
pub const verCanadaPoint: c_int = 29;
pub const vervariantPortugal: c_int = 30;
pub const vervariantNorway: c_int = 31;
pub const vervariantDenmark: c_int = 32;
const enum_unnamed_104 = c_uint;
pub const verIndiaHindi: c_int = 33;
pub const verPakistanUrdu: c_int = 34;
pub const verTurkishModified: c_int = 35;
pub const verItalianSwiss: c_int = 36;
pub const verInternational: c_int = 37;
pub const verRomania: c_int = 39;
pub const verGreekAncient: c_int = 40;
pub const verLithuania: c_int = 41;
pub const verPoland: c_int = 42;
pub const verHungary: c_int = 43;
pub const verEstonia: c_int = 44;
pub const verLatvia: c_int = 45;
pub const verSami: c_int = 46;
pub const verFaroeIsl: c_int = 47;
pub const verIran: c_int = 48;
pub const verRussia: c_int = 49;
pub const verIreland: c_int = 50;
pub const verKorea: c_int = 51;
pub const verChina: c_int = 52;
pub const verTaiwan: c_int = 53;
pub const verThailand: c_int = 54;
pub const verScriptGeneric: c_int = 55;
pub const verCzech: c_int = 56;
pub const verSlovak: c_int = 57;
pub const verEastAsiaGeneric: c_int = 58;
pub const verMagyar: c_int = 59;
pub const verBengali: c_int = 60;
pub const verBelarus: c_int = 61;
const enum_unnamed_105 = c_uint;
pub const verUkraine: c_int = 62;
pub const verGreeceAlt: c_int = 64;
pub const verSerbian: c_int = 65;
pub const verSlovenian: c_int = 66;
pub const verMacedonian: c_int = 67;
pub const verCroatia: c_int = 68;
pub const verGermanReformed: c_int = 70;
pub const verBrazil: c_int = 71;
pub const verBulgaria: c_int = 72;
pub const verCatalonia: c_int = 73;
pub const verMultilingual: c_int = 74;
pub const verScottishGaelic: c_int = 75;
pub const verManxGaelic: c_int = 76;
pub const verBreton: c_int = 77;
pub const verNunavut: c_int = 78;
pub const verWelsh: c_int = 79;
pub const verIrishGaelicScript: c_int = 81;
pub const verEngCanada: c_int = 82;
pub const verBhutan: c_int = 83;
pub const verArmenian: c_int = 84;
pub const verGeorgian: c_int = 85;
pub const verSpLatinAmerica: c_int = 86;
pub const verTonga: c_int = 88;
pub const verFrenchUniversal: c_int = 91;
pub const verAustria: c_int = 92;
pub const verGujarati: c_int = 94;
pub const verPunjabi: c_int = 95;
pub const verIndiaUrdu: c_int = 96;
pub const verVietnam: c_int = 97;
const enum_unnamed_106 = c_uint;
pub const verFrBelgium: c_int = 98;
pub const verUzbek: c_int = 99;
pub const verSingapore: c_int = 100;
pub const verNynorsk: c_int = 101;
pub const verAfrikaans: c_int = 102;
pub const verEsperanto: c_int = 103;
pub const verMarathi: c_int = 104;
pub const verTibetan: c_int = 105;
pub const verNepal: c_int = 106;
pub const verGreenland: c_int = 107;
pub const verIrelandEnglish: c_int = 108;
const enum_unnamed_107 = c_uint;
pub const verFrBelgiumLux: c_int = 6;
pub const verBelgiumLux: c_int = 6;
pub const verArabia: c_int = 16;
pub const verYugoslavia: c_int = 25;
pub const verBelgiumLuxPoint: c_int = 27;
pub const verIndia: c_int = 33;
pub const verPakistan: c_int = 34;
pub const verRumania: c_int = 39;
pub const verGreecePoly: c_int = 40;
pub const verLapland: c_int = 46;
pub const verFaeroeIsl: c_int = 47;
pub const verGenericFE: c_int = 58;
pub const verFarEastGeneric: c_int = 58;
pub const verByeloRussian: c_int = 61;
pub const verUkrania: c_int = 62;
pub const verAlternateGr: c_int = 64;
pub const verSerbia: c_int = 65;
pub const verSlovenia: c_int = 66;
pub const verMacedonia: c_int = 67;
pub const verBrittany: c_int = 77;
pub const verWales: c_int = 79;
pub const verArmenia: c_int = 84;
pub const verGeorgia: c_int = 85;
pub const verAustriaGerman: c_int = 92;
pub const verTibet: c_int = 105;
const enum_unnamed_108 = c_uint;
pub const minCountry: c_int = 0;
pub const maxCountry: c_int = 108;
const enum_unnamed_109 = c_uint;
pub const calGregorian: c_int = 0;
pub const calArabicCivil: c_int = 1;
pub const calArabicLunar: c_int = 2;
pub const calJapanese: c_int = 3;
pub const calJewish: c_int = 4;
pub const calCoptic: c_int = 5;
pub const calPersian: c_int = 6;
const enum_unnamed_110 = c_uint;
pub const intWestern: c_int = 0;
pub const intArabic: c_int = 1;
pub const intRoman: c_int = 2;
pub const intJapanese: c_int = 3;
pub const intEuropean: c_int = 4;
pub const intOutputMask: c_int = 32768;
const enum_unnamed_111 = c_uint;
pub const smSingleByte: c_int = 0;
pub const smFirstByte: c_int = -1;
pub const smLastByte: c_int = 1;
pub const smMiddleByte: c_int = 2;
const enum_unnamed_112 = c_int;
pub const smcTypeMask: c_int = 15;
pub const smcReserved: c_int = 240;
pub const smcClassMask: c_int = 3840;
pub const smcOrientationMask: c_int = 4096;
pub const smcRightMask: c_int = 8192;
pub const smcUpperMask: c_int = 16384;
pub const smcDoubleMask: c_int = 32768;
const enum_unnamed_113 = c_uint;
pub const smCharPunct: c_int = 0;
pub const smCharAscii: c_int = 1;
pub const smCharEuro: c_int = 7;
pub const smCharExtAscii: c_int = 7;
pub const smCharKatakana: c_int = 2;
pub const smCharHiragana: c_int = 3;
pub const smCharIdeographic: c_int = 4;
pub const smCharTwoByteGreek: c_int = 5;
pub const smCharTwoByteRussian: c_int = 6;
pub const smCharBidirect: c_int = 8;
pub const smCharContextualLR: c_int = 9;
pub const smCharNonContextualLR: c_int = 10;
pub const smCharHangul: c_int = 12;
pub const smCharJamo: c_int = 13;
pub const smCharBopomofo: c_int = 14;
pub const smCharGanaKana: c_int = 15;
pub const smCharFISKana: c_int = 2;
pub const smCharFISGana: c_int = 3;
pub const smCharFISIdeo: c_int = 4;
const enum_unnamed_114 = c_uint;
pub const smCharFISGreek: c_int = 5;
pub const smCharFISRussian: c_int = 6;
pub const smPunctNormal: c_int = 0;
pub const smPunctNumber: c_int = 256;
pub const smPunctSymbol: c_int = 512;
pub const smPunctBlank: c_int = 768;
pub const smPunctRepeat: c_int = 1024;
pub const smPunctGraphic: c_int = 1280;
pub const smKanaSmall: c_int = 256;
pub const smKanaHardOK: c_int = 512;
pub const smKanaSoftOK: c_int = 768;
pub const smIdeographicLevel1: c_int = 0;
pub const smIdeographicLevel2: c_int = 256;
pub const smIdeographicUser: c_int = 512;
pub const smFISClassLvl1: c_int = 0;
pub const smFISClassLvl2: c_int = 256;
pub const smFISClassUser: c_int = 512;
pub const smJamoJaeum: c_int = 0;
pub const smJamoBogJaeum: c_int = 256;
pub const smJamoMoeum: c_int = 512;
pub const smJamoBogMoeum: c_int = 768;
const enum_unnamed_115 = c_uint;
pub const smCharHorizontal: c_int = 0;
pub const smCharVertical: c_int = 4096;
pub const smCharLeft: c_int = 0;
pub const smCharRight: c_int = 8192;
pub const smCharLower: c_int = 0;
pub const smCharUpper: c_int = 16384;
pub const smChar1byte: c_int = 0;
pub const smChar2byte: c_int = 32768;
const enum_unnamed_116 = c_uint;
pub const smTransAscii: c_int = 0;
pub const smTransNative: c_int = 1;
pub const smTransCase: c_int = 254;
pub const smTransSystem: c_int = 255;
pub const smTransAscii1: c_int = 2;
pub const smTransAscii2: c_int = 3;
pub const smTransKana1: c_int = 4;
pub const smTransKana2: c_int = 5;
const enum_unnamed_117 = c_uint;
pub const smTransGana2: c_int = 7;
pub const smTransHangul2: c_int = 8;
pub const smTransJamo2: c_int = 9;
pub const smTransBopomofo2: c_int = 10;
pub const smTransLower: c_int = 16384;
pub const smTransUpper: c_int = 32768;
pub const smTransRuleBaseFormat: c_int = 1;
pub const smTransHangulFormat: c_int = 2;
pub const smTransPreDoubleByting: c_int = 1;
pub const smTransPreLowerCasing: c_int = 2;
const enum_unnamed_118 = c_uint;
pub const smMaskAll: c_int = -1;
pub const smMaskAscii: c_int = 1;
pub const smMaskNative: c_int = 2;
pub const smMaskAscii1: c_int = 4;
pub const smMaskAscii2: c_int = 8;
pub const smMaskKana1: c_int = 16;
pub const smMaskKana2: c_int = 32;
pub const smMaskGana2: c_int = 128;
pub const smMaskHangul2: c_int = 256;
pub const smMaskJamo2: c_int = 512;
pub const smMaskBopomofo2: c_int = 1024;
const enum_unnamed_119 = c_int;
pub const iuSystemScript: c_int = -1;
pub const iuCurrentScript: c_int = -2;
const enum_unnamed_120 = c_int;
pub const smKeyNextScript: c_int = -1;
pub const smKeySysScript: c_int = -2;
pub const smKeySwapScript: c_int = -3;
pub const smKeyNextKybd: c_int = -4;
pub const smKeySwapKybd: c_int = -5;
pub const smKeyDisableKybds: c_int = -6;
pub const smKeyEnableKybds: c_int = -7;
pub const smKeyToggleInline: c_int = -8;
pub const smKeyToggleDirection: c_int = -9;
pub const smKeyNextInputMethod: c_int = -10;
pub const smKeySwapInputMethod: c_int = -11;
pub const smKeyDisableKybdSwitch: c_int = -12;
pub const smKeySetDirLeftRight: c_int = -15;
pub const smKeySetDirRightLeft: c_int = -16;
pub const smKeyRoman: c_int = -17;
const enum_unnamed_121 = c_int;
pub const smKeyForceKeyScriptBit: c_int = 7;
pub const smKeyForceKeyScriptMask: c_int = 128;
const enum_unnamed_122 = c_uint;
pub const romanSysFond: c_int = 16383;
pub const romanAppFond: c_int = 3;
pub const romanFlags: c_int = 7;
pub const smFondStart: c_int = 16384;
pub const smFondEnd: c_int = 49152;
pub const smUprHalfCharSet: c_int = 128;
const enum_unnamed_123 = c_uint;
pub const diaeresisUprY: c_int = 217;
pub const fraction: c_int = 218;
pub const intlCurrency: c_int = 219;
pub const leftSingGuillemet: c_int = 220;
pub const rightSingGuillemet: c_int = 221;
pub const fiLigature: c_int = 222;
pub const flLigature: c_int = 223;
pub const dblDagger: c_int = 224;
pub const centeredDot: c_int = 225;
pub const baseSingQuote: c_int = 226;
pub const baseDblQuote: c_int = 227;
pub const perThousand: c_int = 228;
pub const circumflexUprA: c_int = 229;
pub const circumflexUprE: c_int = 230;
pub const acuteUprA: c_int = 231;
pub const diaeresisUprE: c_int = 232;
pub const graveUprE: c_int = 233;
pub const acuteUprI: c_int = 234;
pub const circumflexUprI: c_int = 235;
pub const diaeresisUprI: c_int = 236;
pub const graveUprI: c_int = 237;
pub const acuteUprO: c_int = 238;
pub const circumflexUprO: c_int = 239;
pub const appleLogo: c_int = 240;
pub const graveUprO: c_int = 241;
pub const acuteUprU: c_int = 242;
pub const circumflexUprU: c_int = 243;
pub const graveUprU: c_int = 244;
pub const dotlessLwrI: c_int = 245;
pub const circumflex: c_int = 246;
pub const tilde: c_int = 247;
pub const macron: c_int = 248;
pub const breveMark: c_int = 249;
pub const overDot: c_int = 250;
pub const ringMark: c_int = 251;
pub const cedilla: c_int = 252;
pub const doubleAcute: c_int = 253;
pub const ogonek: c_int = 254;
pub const hachek: c_int = 255;
const enum_unnamed_124 = c_uint;
pub const tokenIntl: c_int = 4;
pub const tokenEmpty: c_int = -1;
const enum_unnamed_125 = c_int;
pub const tokenUnknown: c_int = 0;
pub const tokenWhite: c_int = 1;
pub const tokenLeftLit: c_int = 2;
pub const tokenRightLit: c_int = 3;
pub const tokenAlpha: c_int = 4;
pub const tokenNumeric: c_int = 5;
pub const tokenNewLine: c_int = 6;
pub const tokenLeftComment: c_int = 7;
pub const tokenRightComment: c_int = 8;
pub const tokenLiteral: c_int = 9;
pub const tokenEscape: c_int = 10;
pub const tokenAltNum: c_int = 11;
pub const tokenRealNum: c_int = 12;
pub const tokenAltReal: c_int = 13;
pub const tokenReserve1: c_int = 14;
pub const tokenReserve2: c_int = 15;
pub const tokenLeftParen: c_int = 16;
pub const tokenRightParen: c_int = 17;
pub const tokenLeftBracket: c_int = 18;
pub const tokenRightBracket: c_int = 19;
const enum_unnamed_126 = c_uint;
pub const tokenLeftCurly: c_int = 20;
pub const tokenRightCurly: c_int = 21;
pub const tokenLeftEnclose: c_int = 22;
pub const tokenRightEnclose: c_int = 23;
pub const tokenPlus: c_int = 24;
pub const tokenMinus: c_int = 25;
pub const tokenAsterisk: c_int = 26;
pub const tokenDivide: c_int = 27;
pub const tokenPlusMinus: c_int = 28;
pub const tokenSlash: c_int = 29;
pub const tokenBackSlash: c_int = 30;
pub const tokenLess: c_int = 31;
pub const tokenGreat: c_int = 32;
pub const tokenEqual: c_int = 33;
pub const tokenLessEqual2: c_int = 34;
pub const tokenLessEqual1: c_int = 35;
pub const tokenGreatEqual2: c_int = 36;
pub const tokenGreatEqual1: c_int = 37;
pub const token2Equal: c_int = 38;
pub const tokenColonEqual: c_int = 39;
const enum_unnamed_127 = c_uint;
pub const tokenNotEqual: c_int = 40;
pub const tokenLessGreat: c_int = 41;
pub const tokenExclamEqual: c_int = 42;
pub const tokenExclam: c_int = 43;
pub const tokenTilde: c_int = 44;
pub const tokenComma: c_int = 45;
pub const tokenPeriod: c_int = 46;
pub const tokenLeft2Quote: c_int = 47;
pub const tokenRight2Quote: c_int = 48;
pub const tokenLeft1Quote: c_int = 49;
pub const tokenRight1Quote: c_int = 50;
pub const token2Quote: c_int = 51;
pub const token1Quote: c_int = 52;
pub const tokenSemicolon: c_int = 53;
pub const tokenPercent: c_int = 54;
pub const tokenCaret: c_int = 55;
pub const tokenUnderline: c_int = 56;
pub const tokenAmpersand: c_int = 57;
pub const tokenAtSign: c_int = 58;
pub const tokenBar: c_int = 59;
const enum_unnamed_128 = c_uint;
pub const tokenQuestion: c_int = 60;
pub const tokenPi: c_int = 61;
pub const tokenRoot: c_int = 62;
pub const tokenSigma: c_int = 63;
pub const tokenIntegral: c_int = 64;
pub const tokenMicro: c_int = 65;
pub const tokenCapPi: c_int = 66;
pub const tokenInfinity: c_int = 67;
pub const tokenColon: c_int = 68;
pub const tokenHash: c_int = 69;
pub const tokenDollar: c_int = 70;
pub const tokenNoBreakSpace: c_int = 71;
pub const tokenFraction: c_int = 72;
pub const tokenIntlCurrency: c_int = 73;
pub const tokenLeftSingGuillemet: c_int = 74;
pub const tokenRightSingGuillemet: c_int = 75;
pub const tokenPerThousand: c_int = 76;
pub const tokenEllipsis: c_int = 77;
pub const tokenCenterDot: c_int = 78;
pub const tokenNil: c_int = 127;
const enum_unnamed_129 = c_uint;
pub const delimPad: c_int = -2;
pub const tokenTilda: c_int = 44;
pub const tokenCarat: c_int = 55;
const enum_unnamed_130 = c_int;
pub const smWordSelectTable: c_int = 0;
pub const smWordWrapTable: c_int = 1;
pub const smNumberPartsTable: c_int = 2;
pub const smUnTokenTable: c_int = 3;
pub const smWhiteSpaceList: c_int = 4;
pub const iuWordSelectTable: c_int = 0;
pub const iuWordWrapTable: c_int = 1;
pub const iuNumberPartsTable: c_int = 2;
pub const iuUnTokenTable: c_int = 3;
pub const iuWhiteSpaceList: c_int = 4;
const enum_unnamed_131 = c_uint;
pub const tokenOK: c_int = 0;
pub const tokenOverflow: c_int = 1;
pub const stringOverflow: c_int = 2;
pub const badDelim: c_int = 3;
pub const badEnding: c_int = 4;
pub const crash: c_int = 5;
const enum_unnamed_132 = c_uint;
pub const TokenResults = SInt8;
pub const CharByteTable = [256]u8;
pub const ScriptTokenType = c_short;
pub const DelimType = [2]ScriptTokenType;
pub const CommentType = [4]ScriptTokenType;
pub const struct_TokenRec = extern struct {
    theToken: ScriptTokenType,
    position: Ptr,
    length: c_long,
    stringPosition: StringPtr,
};
pub const TokenRec = struct_TokenRec;
pub const TokenRecPtr = [*c]TokenRec;
pub const struct_TokenBlock = extern struct {
    source: Ptr,
    sourceLength: c_long,
    tokenList: Ptr,
    tokenLength: c_long,
    tokenCount: c_long,
    stringList: Ptr,
    stringLength: c_long,
    stringCount: c_long,
    doString: Boolean,
    doAppend: Boolean,
    doAlphanumeric: Boolean,
    doNest: Boolean,
    leftDelims: [2]ScriptTokenType,
    rightDelims: [2]ScriptTokenType,
    leftComment: [4]ScriptTokenType,
    rightComment: [4]ScriptTokenType,
    escapeCode: ScriptTokenType,
    decimalCode: ScriptTokenType,
    itlResource: Handle,
    reserved: [8]c_long,
};
pub const TokenBlock = struct_TokenBlock;
pub const TokenBlockPtr = [*c]TokenBlock;
pub const smNotInstalled: c_int = 0;
pub const smBadVerb: c_int = -1;
pub const smBadScript: c_int = -2;
const enum_unnamed_133 = c_int;
pub const smfShowIcon: c_int = 31;
pub const smfDualCaret: c_int = 30;
pub const smfNameTagEnab: c_int = 29;
pub const smfUseAssocFontInfo: c_int = 28;
pub const smfDisableKeyScriptSync: c_int = 27;
const enum_unnamed_134 = c_uint;
pub const smfDisableKeyScriptSyncMask: c_int = 134217728;
const enum_unnamed_135 = c_uint;
pub const smSysScript: c_int = 18;
pub const smKeyScript: c_int = 22;
pub const smKCHRCache: c_int = 38;
pub const smRegionCode: c_int = 40;
const enum_unnamed_136 = c_uint;
pub extern fn GetScriptManagerVariable(selector: c_short) c_long;
pub extern fn SetScriptManagerVariable(selector: c_short, param: c_long) OSErr;
pub const smsfIntellCP: c_int = 0;
pub const smsfSingByte: c_int = 1;
pub const smsfNatCase: c_int = 2;
pub const smsfContext: c_int = 3;
pub const smsfNoForceFont: c_int = 4;
pub const smsfB0Digits: c_int = 5;
pub const smsfAutoInit: c_int = 6;
pub const smsfUnivExt: c_int = 7;
pub const smsfSynchUnstyledTE: c_int = 8;
pub const smsfForms: c_int = 13;
pub const smsfLigatures: c_int = 14;
pub const smsfReverse: c_int = 15;
const enum_unnamed_137 = c_uint;
pub const paramErr: c_int = -50;
pub const noHardwareErr: c_int = -200;
pub const notEnoughHardwareErr: c_int = -201;
pub const userCanceledErr: c_int = -128;
pub const qErr: c_int = -1;
pub const vTypErr: c_int = -2;
pub const corErr: c_int = -3;
pub const unimpErr: c_int = -4;
pub const SlpTypeErr: c_int = -5;
pub const seNoDB: c_int = -8;
pub const controlErr: c_int = -17;
pub const statusErr: c_int = -18;
pub const readErr: c_int = -19;
pub const writErr: c_int = -20;
pub const badUnitErr: c_int = -21;
pub const unitEmptyErr: c_int = -22;
pub const openErr: c_int = -23;
pub const closErr: c_int = -24;
pub const dRemovErr: c_int = -25;
pub const dInstErr: c_int = -26;
const enum_unnamed_138 = c_int;
pub const abortErr: c_int = -27;
pub const iIOAbortErr: c_int = -27;
pub const notOpenErr: c_int = -28;
pub const unitTblFullErr: c_int = -29;
pub const dceExtErr: c_int = -30;
pub const slotNumErr: c_int = -360;
pub const gcrOnMFMErr: c_int = -400;
pub const dirFulErr: c_int = -33;
pub const dskFulErr: c_int = -34;
pub const nsvErr: c_int = -35;
pub const ioErr: c_int = -36;
pub const bdNamErr: c_int = -37;
pub const fnOpnErr: c_int = -38;
pub const eofErr: c_int = -39;
pub const posErr: c_int = -40;
pub const mFulErr: c_int = -41;
pub const tmfoErr: c_int = -42;
pub const fnfErr: c_int = -43;
pub const wPrErr: c_int = -44;
pub const fLckdErr: c_int = -45;
const enum_unnamed_139 = c_int;
pub const vLckdErr: c_int = -46;
pub const fBsyErr: c_int = -47;
pub const dupFNErr: c_int = -48;
pub const opWrErr: c_int = -49;
pub const rfNumErr: c_int = -51;
pub const gfpErr: c_int = -52;
pub const volOffLinErr: c_int = -53;
pub const permErr: c_int = -54;
pub const volOnLinErr: c_int = -55;
pub const nsDrvErr: c_int = -56;
pub const noMacDskErr: c_int = -57;
pub const extFSErr: c_int = -58;
pub const fsRnErr: c_int = -59;
pub const badMDBErr: c_int = -60;
pub const wrPermErr: c_int = -61;
pub const dirNFErr: c_int = -120;
pub const tmwdoErr: c_int = -121;
pub const badMovErr: c_int = -122;
pub const wrgVolTypErr: c_int = -123;
pub const volGoneErr: c_int = -124;
const enum_unnamed_140 = c_int;
pub const fidNotFound: c_int = -1300;
pub const fidExists: c_int = -1301;
pub const notAFileErr: c_int = -1302;
pub const diffVolErr: c_int = -1303;
pub const catChangedErr: c_int = -1304;
pub const desktopDamagedErr: c_int = -1305;
pub const sameFileErr: c_int = -1306;
pub const badFidErr: c_int = -1307;
pub const notARemountErr: c_int = -1308;
pub const fileBoundsErr: c_int = -1309;
pub const fsDataTooBigErr: c_int = -1310;
pub const volVMBusyErr: c_int = -1311;
pub const badFCBErr: c_int = -1327;
pub const errFSUnknownCall: c_int = -1400;
pub const errFSBadFSRef: c_int = -1401;
pub const errFSBadForkName: c_int = -1402;
pub const errFSBadBuffer: c_int = -1403;
pub const errFSBadForkRef: c_int = -1404;
pub const errFSBadInfoBitmap: c_int = -1405;
pub const errFSMissingCatInfo: c_int = -1406;
pub const errFSNotAFolder: c_int = -1407;
pub const errFSForkNotFound: c_int = -1409;
pub const errFSNameTooLong: c_int = -1410;
pub const errFSMissingName: c_int = -1411;
pub const errFSBadPosMode: c_int = -1412;
pub const errFSBadAllocFlags: c_int = -1413;
pub const errFSNoMoreItems: c_int = -1417;
pub const errFSBadItemCount: c_int = -1418;
pub const errFSBadSearchParams: c_int = -1419;
pub const errFSRefsDifferent: c_int = -1420;
pub const errFSForkExists: c_int = -1421;
pub const errFSBadIteratorFlags: c_int = -1422;
pub const errFSIteratorNotFound: c_int = -1423;
pub const errFSIteratorNotSupported: c_int = -1424;
pub const errFSQuotaExceeded: c_int = -1425;
pub const errFSOperationNotSupported: c_int = -1426;
pub const errFSAttributeNotFound: c_int = -1427;
pub const errFSPropertyNotValid: c_int = -1428;
pub const errFSNotEnoughSpaceForOperation: c_int = -1429;
pub const envNotPresent: c_int = -5500;
pub const envBadVers: c_int = -5501;
pub const envVersTooBig: c_int = -5502;
pub const fontDecError: c_int = -64;
pub const fontNotDeclared: c_int = -65;
pub const fontSubErr: c_int = -66;
pub const fontNotOutlineErr: c_int = -32615;
pub const firstDskErr: c_int = -84;
pub const lastDskErr: c_int = -64;
pub const noDriveErr: c_int = -64;
pub const offLinErr: c_int = -65;
pub const noNybErr: c_int = -66;
const enum_unnamed_141 = c_int;
pub const noAdrMkErr: c_int = -67;
pub const dataVerErr: c_int = -68;
pub const badCksmErr: c_int = -69;
pub const badBtSlpErr: c_int = -70;
pub const noDtaMkErr: c_int = -71;
pub const badDCksum: c_int = -72;
pub const badDBtSlp: c_int = -73;
pub const wrUnderrun: c_int = -74;
pub const cantStepErr: c_int = -75;
pub const tk0BadErr: c_int = -76;
pub const initIWMErr: c_int = -77;
pub const twoSideErr: c_int = -78;
pub const spdAdjErr: c_int = -79;
pub const seekErr: c_int = -80;
pub const sectNFErr: c_int = -81;
pub const fmt1Err: c_int = -82;
pub const fmt2Err: c_int = -83;
pub const verErr: c_int = -84;
pub const clkRdErr: c_int = -85;
pub const clkWrErr: c_int = -86;
pub const prWrErr: c_int = -87;
pub const prInitErr: c_int = -88;
pub const rcvrErr: c_int = -89;
pub const breakRecd: c_int = -90;
const enum_unnamed_142 = c_int;
pub const noScrapErr: c_int = -100;
pub const noTypeErr: c_int = -102;
const enum_unnamed_143 = c_int;
pub const eLenErr: c_int = -92;
pub const eMultiErr: c_int = -91;
const enum_unnamed_144 = c_int;
pub const ddpSktErr: c_int = -91;
pub const ddpLenErr: c_int = -92;
pub const noBridgeErr: c_int = -93;
pub const lapProtErr: c_int = -94;
pub const excessCollsns: c_int = -95;
pub const portNotPwr: c_int = -96;
pub const portInUse: c_int = -97;
pub const portNotCf: c_int = -98;
const enum_unnamed_145 = c_int;
pub const memROZWarn: c_int = -99;
pub const memROZError: c_int = -99;
pub const memROZErr: c_int = -99;
pub const memFullErr: c_int = -108;
pub const nilHandleErr: c_int = -109;
pub const memWZErr: c_int = -111;
pub const memPurErr: c_int = -112;
pub const memAdrErr: c_int = -110;
pub const memAZErr: c_int = -113;
pub const memPCErr: c_int = -114;
pub const memBCErr: c_int = -115;
pub const memSCErr: c_int = -116;
pub const memLockedErr: c_int = -117;
const enum_unnamed_146 = c_int;
pub const iMemFullErr: c_int = -108;
pub const iIOAbort: c_int = -27;
const enum_unnamed_147 = c_int;
pub const resourceInMemory: c_int = -188;
pub const writingPastEnd: c_int = -189;
pub const inputOutOfBounds: c_int = -190;
pub const resNotFound: c_int = -192;
pub const resFNotFound: c_int = -193;
pub const addResFailed: c_int = -194;
pub const addRefFailed: c_int = -195;
pub const rmvResFailed: c_int = -196;
pub const rmvRefFailed: c_int = -197;
pub const resAttrErr: c_int = -198;
pub const mapReadErr: c_int = -199;
pub const CantDecompress: c_int = -186;
pub const badExtResource: c_int = -185;
pub const noMemForPictPlaybackErr: c_int = -145;
pub const rgnOverflowErr: c_int = -147;
pub const rgnTooBigError: c_int = -147;
pub const pixMapTooDeepErr: c_int = -148;
pub const insufficientStackErr: c_int = -149;
pub const nsStackErr: c_int = -149;
const enum_unnamed_148 = c_int;
pub const evtNotEnb: c_int = 1;
const enum_unnamed_149 = c_uint;
pub const cMatchErr: c_int = -150;
pub const cTempMemErr: c_int = -151;
pub const cNoMemErr: c_int = -152;
pub const cRangeErr: c_int = -153;
pub const cProtectErr: c_int = -154;
pub const cDevErr: c_int = -155;
pub const cResErr: c_int = -156;
pub const cDepthErr: c_int = -157;
pub const rgnTooBigErr: c_int = -500;
pub const updPixMemErr: c_int = -125;
pub const pictInfoVersionErr: c_int = -11000;
pub const pictInfoIDErr: c_int = -11001;
pub const pictInfoVerbErr: c_int = -11002;
pub const cantLoadPickMethodErr: c_int = -11003;
pub const colorsRequestedErr: c_int = -11004;
pub const pictureDataErr: c_int = -11005;
const enum_unnamed_150 = c_int;
pub const cmProfileError: c_int = -170;
pub const cmMethodError: c_int = -171;
pub const cmMethodNotFound: c_int = -175;
pub const cmProfileNotFound: c_int = -176;
pub const cmProfilesIdentical: c_int = -177;
pub const cmCantConcatenateError: c_int = -178;
pub const cmCantXYZ: c_int = -179;
pub const cmCantDeleteProfile: c_int = -180;
pub const cmUnsupportedDataType: c_int = -181;
pub const cmNoCurrentProfile: c_int = -182;
const enum_unnamed_151 = c_int;
pub const noHardware: c_int = -200;
pub const notEnoughHardware: c_int = -201;
pub const queueFull: c_int = -203;
pub const resProblem: c_int = -204;
pub const badChannel: c_int = -205;
pub const badFormat: c_int = -206;
pub const notEnoughBufferSpace: c_int = -207;
pub const badFileFormat: c_int = -208;
pub const channelBusy: c_int = -209;
pub const buffersTooSmall: c_int = -210;
pub const channelNotBusy: c_int = -211;
pub const noMoreRealTime: c_int = -212;
pub const siVBRCompressionNotSupported: c_int = -213;
pub const siNoSoundInHardware: c_int = -220;
pub const siBadSoundInDevice: c_int = -221;
pub const siNoBufferSpecified: c_int = -222;
pub const siInvalidCompression: c_int = -223;
pub const siHardDriveTooSlow: c_int = -224;
pub const siInvalidSampleRate: c_int = -225;
pub const siInvalidSampleSize: c_int = -226;
pub const siDeviceBusyErr: c_int = -227;
pub const siBadDeviceName: c_int = -228;
pub const siBadRefNum: c_int = -229;
pub const siInputDeviceErr: c_int = -230;
pub const siUnknownInfoType: c_int = -231;
pub const siUnknownQuality: c_int = -232;
const enum_unnamed_152 = c_int;
pub const noSynthFound: c_int = -240;
pub const synthOpenFailed: c_int = -241;
pub const synthNotReady: c_int = -242;
pub const bufTooSmall: c_int = -243;
pub const voiceNotFound: c_int = -244;
pub const incompatibleVoice: c_int = -245;
pub const badDictFormat: c_int = -246;
pub const badInputText: c_int = -247;
const enum_unnamed_153 = c_int;
pub const midiNoClientErr: c_int = -250;
pub const midiNoPortErr: c_int = -251;
pub const midiTooManyPortsErr: c_int = -252;
pub const midiTooManyConsErr: c_int = -253;
pub const midiVConnectErr: c_int = -254;
pub const midiVConnectMade: c_int = -255;
pub const midiVConnectRmvd: c_int = -256;
pub const midiNoConErr: c_int = -257;
pub const midiWriteErr: c_int = -258;
pub const midiNameLenErr: c_int = -259;
pub const midiDupIDErr: c_int = -260;
pub const midiInvalidCmdErr: c_int = -261;
const enum_unnamed_154 = c_int;
pub const nmTypErr: c_int = -299;
const enum_unnamed_155 = c_int;
pub const siInitSDTblErr: c_int = 1;
pub const siInitVBLQsErr: c_int = 2;
pub const siInitSPTblErr: c_int = 3;
pub const sdmJTInitErr: c_int = 10;
pub const sdmInitErr: c_int = 11;
pub const sdmSRTInitErr: c_int = 12;
pub const sdmPRAMInitErr: c_int = 13;
pub const sdmPriInitErr: c_int = 14;
const enum_unnamed_156 = c_uint;
pub const smSDMInitErr: c_int = -290;
pub const smSRTInitErr: c_int = -291;
pub const smPRAMInitErr: c_int = -292;
pub const smPriInitErr: c_int = -293;
pub const smEmptySlot: c_int = -300;
pub const smCRCFail: c_int = -301;
pub const smFormatErr: c_int = -302;
pub const smRevisionErr: c_int = -303;
pub const smNoDir: c_int = -304;
pub const smDisabledSlot: c_int = -305;
pub const smNosInfoArray: c_int = -306;
const enum_unnamed_157 = c_int;
pub const smResrvErr: c_int = -307;
pub const smUnExBusErr: c_int = -308;
pub const smBLFieldBad: c_int = -309;
pub const smFHBlockRdErr: c_int = -310;
pub const smFHBlkDispErr: c_int = -311;
pub const smDisposePErr: c_int = -312;
pub const smNoBoardSRsrc: c_int = -313;
pub const smGetPRErr: c_int = -314;
pub const smNoBoardId: c_int = -315;
pub const smInitStatVErr: c_int = -316;
pub const smInitTblVErr: c_int = -317;
pub const smNoJmpTbl: c_int = -318;
pub const smReservedSlot: c_int = -318;
pub const smBadBoardId: c_int = -319;
pub const smBusErrTO: c_int = -320;
pub const svTempDisable: c_int = -32768;
pub const svDisabled: c_int = -32640;
pub const smBadRefId: c_int = -330;
pub const smBadsList: c_int = -331;
pub const smReservedErr: c_int = -332;
pub const smCodeRevErr: c_int = -333;
const enum_unnamed_158 = c_int;
pub const smCPUErr: c_int = -334;
pub const smsPointerNil: c_int = -335;
pub const smNilsBlockErr: c_int = -336;
pub const smSlotOOBErr: c_int = -337;
pub const smSelOOBErr: c_int = -338;
pub const smNewPErr: c_int = -339;
pub const smBlkMoveErr: c_int = -340;
pub const smCkStatusErr: c_int = -341;
pub const smGetDrvrNamErr: c_int = -342;
pub const smDisDrvrNamErr: c_int = -343;
pub const smNoMoresRsrcs: c_int = -344;
pub const smsGetDrvrErr: c_int = -345;
pub const smBadsPtrErr: c_int = -346;
pub const smByteLanesErr: c_int = -347;
pub const smOffsetErr: c_int = -348;
pub const smNoGoodOpens: c_int = -349;
pub const smSRTOvrFlErr: c_int = -350;
pub const smRecNotFnd: c_int = -351;
const enum_unnamed_159 = c_int;
pub const notBTree: c_int = -410;
pub const btNoSpace: c_int = -413;
pub const btDupRecErr: c_int = -414;
pub const btRecNotFnd: c_int = -415;
pub const btKeyLenErr: c_int = -416;
pub const btKeyAttrErr: c_int = -417;
pub const unknownInsertModeErr: c_int = -20000;
pub const recordDataTooBigErr: c_int = -20001;
pub const invalidIndexErr: c_int = -20002;
const enum_unnamed_160 = c_int;
pub const fsmFFSNotFoundErr: c_int = -431;
pub const fsmBusyFFSErr: c_int = -432;
pub const fsmBadFFSNameErr: c_int = -433;
pub const fsmBadFSDLenErr: c_int = -434;
pub const fsmDuplicateFSIDErr: c_int = -435;
pub const fsmBadFSDVersionErr: c_int = -436;
pub const fsmNoAlternateStackErr: c_int = -437;
pub const fsmUnknownFSMMessageErr: c_int = -438;
const enum_unnamed_161 = c_int;
pub const editionMgrInitErr: c_int = -450;
pub const badSectionErr: c_int = -451;
pub const notRegisteredSectionErr: c_int = -452;
pub const badEditionFileErr: c_int = -453;
pub const badSubPartErr: c_int = -454;
pub const multiplePublisherWrn: c_int = -460;
pub const containerNotFoundWrn: c_int = -461;
pub const containerAlreadyOpenWrn: c_int = -462;
pub const notThePublisherWrn: c_int = -463;
const enum_unnamed_162 = c_int;
pub const teScrapSizeErr: c_int = -501;
pub const hwParamErr: c_int = -502;
pub const driverHardwareGoneErr: c_int = -503;
const enum_unnamed_163 = c_int;
pub const procNotFound: c_int = -600;
pub const memFragErr: c_int = -601;
pub const appModeErr: c_int = -602;
pub const protocolErr: c_int = -603;
pub const hardwareConfigErr: c_int = -604;
pub const appMemFullErr: c_int = -605;
pub const appIsDaemon: c_int = -606;
pub const bufferIsSmall: c_int = -607;
pub const noOutstandingHLE: c_int = -608;
pub const connectionInvalid: c_int = -609;
pub const noUserInteractionAllowed: c_int = -610;
const enum_unnamed_164 = c_int;
pub const wrongApplicationPlatform: c_int = -875;
pub const appVersionTooOld: c_int = -876;
pub const notAppropriateForClassic: c_int = -877;
const enum_unnamed_165 = c_int;
pub const threadTooManyReqsErr: c_int = -617;
pub const threadNotFoundErr: c_int = -618;
pub const threadProtocolErr: c_int = -619;
const enum_unnamed_166 = c_int;
pub const threadBadAppContextErr: c_int = -616;
const enum_unnamed_167 = c_int;
pub const notEnoughMemoryErr: c_int = -620;
pub const notHeldErr: c_int = -621;
pub const cannotMakeContiguousErr: c_int = -622;
pub const notLockedErr: c_int = -623;
pub const interruptsMaskedErr: c_int = -624;
pub const cannotDeferErr: c_int = -625;
pub const noMMUErr: c_int = -626;
const enum_unnamed_168 = c_int;
pub const vmMorePhysicalThanVirtualErr: c_int = -628;
pub const vmKernelMMUInitErr: c_int = -629;
pub const vmOffErr: c_int = -630;
pub const vmMemLckdErr: c_int = -631;
pub const vmBadDriver: c_int = -632;
pub const vmNoVectorErr: c_int = -633;
const enum_unnamed_169 = c_int;
pub const vmInvalidBackingFileIDErr: c_int = -640;
pub const vmMappingPrivilegesErr: c_int = -641;
pub const vmBusyBackingFileErr: c_int = -642;
pub const vmNoMoreBackingFilesErr: c_int = -643;
pub const vmInvalidFileViewIDErr: c_int = -644;
pub const vmFileViewAccessErr: c_int = -645;
pub const vmNoMoreFileViewsErr: c_int = -646;
pub const vmAddressNotInFileViewErr: c_int = -647;
pub const vmInvalidOwningProcessErr: c_int = -648;
const enum_unnamed_170 = c_int;
pub const rcDBNull: c_int = -800;
pub const rcDBValue: c_int = -801;
pub const rcDBError: c_int = -802;
pub const rcDBBadType: c_int = -803;
pub const rcDBBreak: c_int = -804;
pub const rcDBExec: c_int = -805;
pub const rcDBBadSessID: c_int = -806;
pub const rcDBBadSessNum: c_int = -807;
pub const rcDBBadDDEV: c_int = -808;
pub const rcDBAsyncNotSupp: c_int = -809;
pub const rcDBBadAsyncPB: c_int = -810;
pub const rcDBNoHandler: c_int = -811;
pub const rcDBWrongVersion: c_int = -812;
pub const rcDBPackNotInited: c_int = -813;
const enum_unnamed_171 = c_int;
pub const hmHelpDisabled: c_int = -850;
pub const hmBalloonAborted: c_int = -853;
pub const hmSameAsLastBalloon: c_int = -854;
pub const hmHelpManagerNotInited: c_int = -855;
pub const hmSkippedBalloon: c_int = -857;
pub const hmWrongVersion: c_int = -858;
pub const hmUnknownHelpType: c_int = -859;
pub const hmOperationUnsupported: c_int = -861;
pub const hmNoBalloonUp: c_int = -862;
pub const hmCloseViewActive: c_int = -863;
const enum_unnamed_172 = c_int;
pub const notInitErr: c_int = -900;
pub const nameTypeErr: c_int = -902;
pub const noPortErr: c_int = -903;
pub const noGlobalsErr: c_int = -904;
pub const localOnlyErr: c_int = -905;
pub const destPortErr: c_int = -906;
pub const sessTableErr: c_int = -907;
pub const noSessionErr: c_int = -908;
pub const badReqErr: c_int = -909;
pub const portNameExistsErr: c_int = -910;
pub const noUserNameErr: c_int = -911;
pub const userRejectErr: c_int = -912;
pub const noMachineNameErr: c_int = -913;
pub const noToolboxNameErr: c_int = -914;
pub const noResponseErr: c_int = -915;
pub const portClosedErr: c_int = -916;
pub const sessClosedErr: c_int = -917;
pub const badPortNameErr: c_int = -919;
pub const noDefaultUserErr: c_int = -922;
pub const notLoggedInErr: c_int = -923;
pub const noUserRefErr: c_int = -924;
pub const networkErr: c_int = -925;
pub const noInformErr: c_int = -926;
pub const authFailErr: c_int = -927;
pub const noUserRecErr: c_int = -928;
pub const badServiceMethodErr: c_int = -930;
pub const badLocNameErr: c_int = -931;
pub const guestNotAllowedErr: c_int = -932;
const enum_unnamed_173 = c_int;
pub const kFMIterationCompleted: c_int = -980;
pub const kFMInvalidFontFamilyErr: c_int = -981;
pub const kFMInvalidFontErr: c_int = -982;
pub const kFMIterationScopeModifiedErr: c_int = -983;
pub const kFMFontTableAccessErr: c_int = -984;
pub const kFMFontContainerAccessErr: c_int = -985;
const enum_unnamed_174 = c_int;
pub const noMaskFoundErr: c_int = -1000;
const enum_unnamed_175 = c_int;
pub const nbpBuffOvr: c_int = -1024;
pub const nbpNoConfirm: c_int = -1025;
pub const nbpConfDiff: c_int = -1026;
pub const nbpDuplicate: c_int = -1027;
pub const nbpNotFound: c_int = -1028;
pub const nbpNISErr: c_int = -1029;
const enum_unnamed_176 = c_int;
pub const aspBadVersNum: c_int = -1066;
pub const aspBufTooSmall: c_int = -1067;
pub const aspNoMoreSess: c_int = -1068;
pub const aspNoServers: c_int = -1069;
pub const aspParamErr: c_int = -1070;
pub const aspServerBusy: c_int = -1071;
pub const aspSessClosed: c_int = -1072;
pub const aspSizeErr: c_int = -1073;
pub const aspTooMany: c_int = -1074;
pub const aspNoAck: c_int = -1075;
const enum_unnamed_177 = c_int;
pub const reqFailed: c_int = -1096;
pub const tooManyReqs: c_int = -1097;
pub const tooManySkts: c_int = -1098;
pub const badATPSkt: c_int = -1099;
pub const badBuffNum: c_int = -1100;
pub const noRelErr: c_int = -1101;
pub const cbNotFound: c_int = -1102;
pub const noSendResp: c_int = -1103;
pub const noDataArea: c_int = -1104;
pub const reqAborted: c_int = -1105;
const enum_unnamed_178 = c_int;
pub const errRefNum: c_int = -1280;
pub const errAborted: c_int = -1279;
pub const errState: c_int = -1278;
pub const errOpening: c_int = -1277;
pub const errAttention: c_int = -1276;
pub const errFwdReset: c_int = -1275;
pub const errDSPQueueSize: c_int = -1274;
pub const errOpenDenied: c_int = -1273;
const enum_unnamed_179 = c_int;
pub const errAECoercionFail: c_int = -1700;
pub const errAEDescNotFound: c_int = -1701;
pub const errAECorruptData: c_int = -1702;
pub const errAEWrongDataType: c_int = -1703;
pub const errAENotAEDesc: c_int = -1704;
pub const errAEBadListItem: c_int = -1705;
pub const errAENewerVersion: c_int = -1706;
pub const errAENotAppleEvent: c_int = -1707;
pub const errAEEventNotHandled: c_int = -1708;
pub const errAEReplyNotValid: c_int = -1709;
pub const errAEUnknownSendMode: c_int = -1710;
pub const errAEWaitCanceled: c_int = -1711;
pub const errAETimeout: c_int = -1712;
pub const errAENoUserInteraction: c_int = -1713;
pub const errAENotASpecialFunction: c_int = -1714;
pub const errAEParamMissed: c_int = -1715;
pub const errAEUnknownAddressType: c_int = -1716;
pub const errAEHandlerNotFound: c_int = -1717;
pub const errAEReplyNotArrived: c_int = -1718;
pub const errAEIllegalIndex: c_int = -1719;
pub const errAEImpossibleRange: c_int = -1720;
pub const errAEWrongNumberArgs: c_int = -1721;
pub const errAEAccessorNotFound: c_int = -1723;
pub const errAENoSuchLogical: c_int = -1725;
pub const errAEBadTestKey: c_int = -1726;
pub const errAENotAnObjSpec: c_int = -1727;
pub const errAENoSuchObject: c_int = -1728;
pub const errAENegativeCount: c_int = -1729;
pub const errAEEmptyListContainer: c_int = -1730;
pub const errAEUnknownObjectType: c_int = -1731;
pub const errAERecordingIsAlreadyOn: c_int = -1732;
pub const errAEReceiveTerminate: c_int = -1733;
pub const errAEReceiveEscapeCurrent: c_int = -1734;
pub const errAEEventFiltered: c_int = -1735;
pub const errAEDuplicateHandler: c_int = -1736;
pub const errAEStreamBadNesting: c_int = -1737;
pub const errAEStreamAlreadyConverted: c_int = -1738;
pub const errAEDescIsNull: c_int = -1739;
pub const errAEBuildSyntaxError: c_int = -1740;
pub const errAEBufferTooSmall: c_int = -1741;
const enum_unnamed_180 = c_int;
pub const errOSASystemError: c_int = -1750;
pub const errOSAInvalidID: c_int = -1751;
pub const errOSABadStorageType: c_int = -1752;
pub const errOSAScriptError: c_int = -1753;
pub const errOSABadSelector: c_int = -1754;
pub const errOSASourceNotAvailable: c_int = -1756;
pub const errOSANoSuchDialect: c_int = -1757;
pub const errOSADataFormatObsolete: c_int = -1758;
pub const errOSADataFormatTooNew: c_int = -1759;
pub const errOSACorruptData: c_int = -1702;
pub const errOSARecordingIsAlreadyOn: c_int = -1732;
pub const errOSAComponentMismatch: c_int = -1761;
pub const errOSACantOpenComponent: c_int = -1762;
pub const errOSACantStorePointers: c_int = -1763;
const enum_unnamed_181 = c_int;
pub const errOffsetInvalid: c_int = -1800;
pub const errOffsetIsOutsideOfView: c_int = -1801;
pub const errTopOfDocument: c_int = -1810;
pub const errTopOfBody: c_int = -1811;
pub const errEndOfDocument: c_int = -1812;
pub const errEndOfBody: c_int = -1813;
const enum_unnamed_182 = c_int;
pub const badDragRefErr: c_int = -1850;
pub const badDragItemErr: c_int = -1851;
pub const badDragFlavorErr: c_int = -1852;
pub const duplicateFlavorErr: c_int = -1853;
pub const cantGetFlavorErr: c_int = -1854;
pub const duplicateHandlerErr: c_int = -1855;
pub const handlerNotFoundErr: c_int = -1856;
pub const dragNotAcceptedErr: c_int = -1857;
pub const unsupportedForPlatformErr: c_int = -1858;
pub const noSuitableDisplaysErr: c_int = -1859;
pub const badImageRgnErr: c_int = -1860;
pub const badImageErr: c_int = -1861;
pub const nonDragOriginatorErr: c_int = -1862;
const enum_unnamed_183 = c_int;
pub const couldNotResolveDataRef: c_int = -2000;
pub const badImageDescription: c_int = -2001;
pub const badPublicMovieAtom: c_int = -2002;
pub const cantFindHandler: c_int = -2003;
pub const cantOpenHandler: c_int = -2004;
pub const badComponentType: c_int = -2005;
pub const noMediaHandler: c_int = -2006;
pub const noDataHandler: c_int = -2007;
pub const invalidMedia: c_int = -2008;
pub const invalidTrack: c_int = -2009;
pub const invalidMovie: c_int = -2010;
pub const invalidSampleTable: c_int = -2011;
pub const invalidDataRef: c_int = -2012;
pub const invalidHandler: c_int = -2013;
pub const invalidDuration: c_int = -2014;
pub const invalidTime: c_int = -2015;
pub const cantPutPublicMovieAtom: c_int = -2016;
pub const badEditList: c_int = -2017;
pub const mediaTypesDontMatch: c_int = -2018;
pub const progressProcAborted: c_int = -2019;
pub const movieToolboxUninitialized: c_int = -2020;
pub const noRecordOfApp: c_int = -2020;
pub const wfFileNotFound: c_int = -2021;
pub const cantCreateSingleForkFile: c_int = -2022;
pub const invalidEditState: c_int = -2023;
pub const nonMatchingEditState: c_int = -2024;
pub const staleEditState: c_int = -2025;
pub const userDataItemNotFound: c_int = -2026;
pub const maxSizeToGrowTooSmall: c_int = -2027;
pub const badTrackIndex: c_int = -2028;
pub const trackIDNotFound: c_int = -2029;
pub const trackNotInMovie: c_int = -2030;
pub const timeNotInTrack: c_int = -2031;
pub const timeNotInMedia: c_int = -2032;
pub const badEditIndex: c_int = -2033;
pub const internalQuickTimeError: c_int = -2034;
pub const cantEnableTrack: c_int = -2035;
pub const invalidRect: c_int = -2036;
pub const invalidSampleNum: c_int = -2037;
pub const invalidChunkNum: c_int = -2038;
pub const invalidSampleDescIndex: c_int = -2039;
pub const invalidChunkCache: c_int = -2040;
pub const invalidSampleDescription: c_int = -2041;
pub const dataNotOpenForRead: c_int = -2042;
pub const dataNotOpenForWrite: c_int = -2043;
pub const dataAlreadyOpenForWrite: c_int = -2044;
pub const dataAlreadyClosed: c_int = -2045;
pub const endOfDataReached: c_int = -2046;
pub const dataNoDataRef: c_int = -2047;
pub const noMovieFound: c_int = -2048;
pub const invalidDataRefContainer: c_int = -2049;
pub const badDataRefIndex: c_int = -2050;
pub const noDefaultDataRef: c_int = -2051;
pub const couldNotUseAnExistingSample: c_int = -2052;
pub const featureUnsupported: c_int = -2053;
pub const noVideoTrackInMovieErr: c_int = -2054;
pub const noSoundTrackInMovieErr: c_int = -2055;
pub const soundSupportNotAvailableErr: c_int = -2056;
pub const unsupportedAuxiliaryImportData: c_int = -2057;
pub const auxiliaryExportDataUnavailable: c_int = -2058;
pub const samplesAlreadyInMediaErr: c_int = -2059;
pub const noSourceTreeFoundErr: c_int = -2060;
pub const sourceNotFoundErr: c_int = -2061;
pub const movieTextNotFoundErr: c_int = -2062;
pub const missingRequiredParameterErr: c_int = -2063;
pub const invalidSpriteWorldPropertyErr: c_int = -2064;
pub const invalidSpritePropertyErr: c_int = -2065;
pub const gWorldsNotSameDepthAndSizeErr: c_int = -2066;
pub const invalidSpriteIndexErr: c_int = -2067;
pub const invalidImageIndexErr: c_int = -2068;
pub const invalidSpriteIDErr: c_int = -2069;
const enum_unnamed_184 = c_int;
pub const internalComponentErr: c_int = -2070;
pub const notImplementedMusicOSErr: c_int = -2071;
pub const cantSendToSynthesizerOSErr: c_int = -2072;
pub const cantReceiveFromSynthesizerOSErr: c_int = -2073;
pub const illegalVoiceAllocationOSErr: c_int = -2074;
pub const illegalPartOSErr: c_int = -2075;
pub const illegalChannelOSErr: c_int = -2076;
pub const illegalKnobOSErr: c_int = -2077;
pub const illegalKnobValueOSErr: c_int = -2078;
pub const illegalInstrumentOSErr: c_int = -2079;
pub const illegalControllerOSErr: c_int = -2080;
pub const midiManagerAbsentOSErr: c_int = -2081;
pub const synthesizerNotRespondingOSErr: c_int = -2082;
pub const synthesizerOSErr: c_int = -2083;
pub const illegalNoteChannelOSErr: c_int = -2084;
pub const noteChannelNotAllocatedOSErr: c_int = -2085;
pub const tunePlayerFullOSErr: c_int = -2086;
pub const tuneParseOSErr: c_int = -2087;
pub const noExportProcAvailableErr: c_int = -2089;
pub const videoOutputInUseErr: c_int = -2090;
const enum_unnamed_185 = c_int;
pub const componentDllLoadErr: c_int = -2091;
pub const componentDllEntryNotFoundErr: c_int = -2092;
pub const qtmlDllLoadErr: c_int = -2093;
pub const qtmlDllEntryNotFoundErr: c_int = -2094;
pub const qtmlUninitialized: c_int = -2095;
pub const unsupportedOSErr: c_int = -2096;
pub const unsupportedProcessorErr: c_int = -2097;
pub const componentNotThreadSafeErr: c_int = -2098;
const enum_unnamed_186 = c_int;
pub const cannotFindAtomErr: c_int = -2101;
pub const notLeafAtomErr: c_int = -2102;
pub const atomsNotOfSameTypeErr: c_int = -2103;
pub const atomIndexInvalidErr: c_int = -2104;
pub const duplicateAtomTypeAndIDErr: c_int = -2105;
pub const invalidAtomErr: c_int = -2106;
pub const invalidAtomContainerErr: c_int = -2107;
pub const invalidAtomTypeErr: c_int = -2108;
pub const cannotBeLeafAtomErr: c_int = -2109;
pub const pathTooLongErr: c_int = -2110;
pub const emptyPathErr: c_int = -2111;
pub const noPathMappingErr: c_int = -2112;
pub const pathNotVerifiedErr: c_int = -2113;
pub const unknownFormatErr: c_int = -2114;
pub const wackBadFileErr: c_int = -2115;
pub const wackForkNotFoundErr: c_int = -2116;
pub const wackBadMetaDataErr: c_int = -2117;
pub const qfcbNotFoundErr: c_int = -2118;
pub const qfcbNotCreatedErr: c_int = -2119;
pub const AAPNotCreatedErr: c_int = -2120;
pub const AAPNotFoundErr: c_int = -2121;
pub const ASDBadHeaderErr: c_int = -2122;
pub const ASDBadForkErr: c_int = -2123;
pub const ASDEntryNotFoundErr: c_int = -2124;
pub const fileOffsetTooBigErr: c_int = -2125;
pub const notAllowedToSaveMovieErr: c_int = -2126;
pub const qtNetworkAlreadyAllocatedErr: c_int = -2127;
pub const urlDataHHTTPProtocolErr: c_int = -2129;
pub const urlDataHHTTPNoNetDriverErr: c_int = -2130;
pub const urlDataHHTTPURLErr: c_int = -2131;
pub const urlDataHHTTPRedirectErr: c_int = -2132;
pub const urlDataHFTPProtocolErr: c_int = -2133;
pub const urlDataHFTPShutdownErr: c_int = -2134;
pub const urlDataHFTPBadUserErr: c_int = -2135;
pub const urlDataHFTPBadPasswordErr: c_int = -2136;
pub const urlDataHFTPServerErr: c_int = -2137;
pub const urlDataHFTPDataConnectionErr: c_int = -2138;
pub const urlDataHFTPNoDirectoryErr: c_int = -2139;
pub const urlDataHFTPQuotaErr: c_int = -2140;
pub const urlDataHFTPPermissionsErr: c_int = -2141;
pub const urlDataHFTPFilenameErr: c_int = -2142;
pub const urlDataHFTPNoNetDriverErr: c_int = -2143;
pub const urlDataHFTPBadNameListErr: c_int = -2144;
pub const urlDataHFTPNeedPasswordErr: c_int = -2145;
pub const urlDataHFTPNoPasswordErr: c_int = -2146;
pub const urlDataHFTPServerDisconnectedErr: c_int = -2147;
pub const urlDataHFTPURLErr: c_int = -2148;
pub const notEnoughDataErr: c_int = -2149;
pub const qtActionNotHandledErr: c_int = -2157;
pub const qtXMLParseErr: c_int = -2158;
pub const qtXMLApplicationErr: c_int = -2159;
const enum_unnamed_187 = c_int;
pub const digiUnimpErr: c_int = -2201;
pub const qtParamErr: c_int = -2202;
pub const matrixErr: c_int = -2203;
pub const notExactMatrixErr: c_int = -2204;
pub const noMoreKeyColorsErr: c_int = -2205;
pub const notExactSizeErr: c_int = -2206;
pub const badDepthErr: c_int = -2207;
pub const noDMAErr: c_int = -2208;
pub const badCallOrderErr: c_int = -2209;
const enum_unnamed_188 = c_int;
pub const kernelIncompleteErr: c_int = -2401;
pub const kernelCanceledErr: c_int = -2402;
pub const kernelOptionsErr: c_int = -2403;
pub const kernelPrivilegeErr: c_int = -2404;
pub const kernelUnsupportedErr: c_int = -2405;
pub const kernelObjectExistsErr: c_int = -2406;
pub const kernelWritePermissionErr: c_int = -2407;
pub const kernelReadPermissionErr: c_int = -2408;
pub const kernelExecutePermissionErr: c_int = -2409;
pub const kernelDeletePermissionErr: c_int = -2410;
pub const kernelExecutionLevelErr: c_int = -2411;
pub const kernelAttributeErr: c_int = -2412;
pub const kernelAsyncSendLimitErr: c_int = -2413;
pub const kernelAsyncReceiveLimitErr: c_int = -2414;
pub const kernelTimeoutErr: c_int = -2415;
pub const kernelInUseErr: c_int = -2416;
pub const kernelTerminatedErr: c_int = -2417;
pub const kernelExceptionErr: c_int = -2418;
pub const kernelIDErr: c_int = -2419;
pub const kernelAlreadyFreeErr: c_int = -2421;
pub const kernelReturnValueErr: c_int = -2422;
pub const kernelUnrecoverableErr: c_int = -2499;
const enum_unnamed_189 = c_int;
pub const tsmComponentNoErr: c_int = 0;
pub const tsmUnsupScriptLanguageErr: c_int = -2500;
pub const tsmInputMethodNotFoundErr: c_int = -2501;
pub const tsmNotAnAppErr: c_int = -2502;
pub const tsmAlreadyRegisteredErr: c_int = -2503;
pub const tsmNeverRegisteredErr: c_int = -2504;
pub const tsmInvalidDocIDErr: c_int = -2505;
pub const tsmTSMDocBusyErr: c_int = -2506;
pub const tsmDocNotActiveErr: c_int = -2507;
pub const tsmNoOpenTSErr: c_int = -2508;
pub const tsmCantOpenComponentErr: c_int = -2509;
pub const tsmTextServiceNotFoundErr: c_int = -2510;
pub const tsmDocumentOpenErr: c_int = -2511;
pub const tsmUseInputWindowErr: c_int = -2512;
pub const tsmTSHasNoMenuErr: c_int = -2513;
pub const tsmTSNotOpenErr: c_int = -2514;
pub const tsmComponentAlreadyOpenErr: c_int = -2515;
pub const tsmInputMethodIsOldErr: c_int = -2516;
pub const tsmScriptHasNoIMErr: c_int = -2517;
pub const tsmUnsupportedTypeErr: c_int = -2518;
pub const tsmUnknownErr: c_int = -2519;
pub const tsmInvalidContext: c_int = -2520;
pub const tsmNoHandler: c_int = -2521;
pub const tsmNoMoreTokens: c_int = -2522;
pub const tsmNoStem: c_int = -2523;
pub const tsmDefaultIsNotInputMethodErr: c_int = -2524;
pub const tsmDocPropertyNotFoundErr: c_int = -2528;
pub const tsmDocPropertyBufferTooSmallErr: c_int = -2529;
pub const tsmCantChangeForcedClassStateErr: c_int = -2530;
pub const tsmComponentPropertyUnsupportedErr: c_int = -2531;
pub const tsmComponentPropertyNotFoundErr: c_int = -2532;
pub const tsmInputModeChangeFailedErr: c_int = -2533;
const enum_unnamed_190 = c_int;
pub const mmInternalError: c_int = -2526;
const enum_unnamed_191 = c_int;
pub const nrLockedErr: c_int = -2536;
pub const nrNotEnoughMemoryErr: c_int = -2537;
pub const nrInvalidNodeErr: c_int = -2538;
pub const nrNotFoundErr: c_int = -2539;
pub const nrNotCreatedErr: c_int = -2540;
pub const nrNameErr: c_int = -2541;
pub const nrNotSlotDeviceErr: c_int = -2542;
pub const nrDataTruncatedErr: c_int = -2543;
pub const nrPowerErr: c_int = -2544;
pub const nrPowerSwitchAbortErr: c_int = -2545;
pub const nrTypeMismatchErr: c_int = -2546;
pub const nrNotModifiedErr: c_int = -2547;
pub const nrOverrunErr: c_int = -2548;
pub const nrResultCodeBase: c_int = -2549;
pub const nrPathNotFound: c_int = -2550;
pub const nrPathBufferTooSmall: c_int = -2551;
pub const nrInvalidEntryIterationOp: c_int = -2552;
pub const nrPropertyAlreadyExists: c_int = -2553;
pub const nrIterationDone: c_int = -2554;
pub const nrExitedIteratorScope: c_int = -2555;
pub const nrTransactionAborted: c_int = -2556;
pub const nrCallNotSupported: c_int = -2557;
const enum_unnamed_192 = c_int;
pub const invalidIconRefErr: c_int = -2580;
pub const noSuchIconErr: c_int = -2581;
pub const noIconDataAvailableErr: c_int = -2582;
const enum_unnamed_193 = c_int;
pub const errOSACantCoerce: c_int = -1700;
pub const errOSACantAccess: c_int = -1728;
pub const errOSACantAssign: c_int = -10006;
pub const errOSAGeneralError: c_int = -2700;
pub const errOSADivideByZero: c_int = -2701;
pub const errOSANumericOverflow: c_int = -2702;
pub const errOSACantLaunch: c_int = -2703;
pub const errOSAAppNotHighLevelEventAware: c_int = -2704;
pub const errOSACorruptTerminology: c_int = -2705;
pub const errOSAStackOverflow: c_int = -2706;
pub const errOSAInternalTableOverflow: c_int = -2707;
pub const errOSADataBlockTooLarge: c_int = -2708;
pub const errOSACantGetTerminology: c_int = -2709;
pub const errOSACantCreate: c_int = -2710;
const enum_unnamed_194 = c_int;
pub const errOSATypeError: c_int = -1703;
pub const OSAMessageNotUnderstood: c_int = -1708;
pub const OSAUndefinedHandler: c_int = -1717;
pub const OSAIllegalAccess: c_int = -1723;
pub const OSAIllegalIndex: c_int = -1719;
pub const OSAIllegalRange: c_int = -1720;
pub const OSAIllegalAssign: c_int = -10003;
pub const OSASyntaxError: c_int = -2740;
pub const OSASyntaxTypeError: c_int = -2741;
pub const OSATokenTooLong: c_int = -2742;
pub const OSAMissingParameter: c_int = -1701;
pub const OSAParameterMismatch: c_int = -1721;
pub const OSADuplicateParameter: c_int = -2750;
pub const OSADuplicateProperty: c_int = -2751;
pub const OSADuplicateHandler: c_int = -2752;
pub const OSAUndefinedVariable: c_int = -2753;
pub const OSAInconsistentDeclarations: c_int = -2754;
pub const OSAControlFlowError: c_int = -2755;
const enum_unnamed_195 = c_int;
pub const errASCantConsiderAndIgnore: c_int = -2720;
pub const errASCantCompareMoreThan32k: c_int = -2721;
pub const errASTerminologyNestingTooDeep: c_int = -2760;
pub const errASIllegalFormalParameter: c_int = -2761;
pub const errASParameterNotForEvent: c_int = -2762;
pub const errASNoResultReturned: c_int = -2763;
pub const errASInconsistentNames: c_int = -2780;
const enum_unnamed_196 = c_int;
pub const cfragFirstErrCode: c_int = -2800;
pub const cfragContextIDErr: c_int = -2800;
pub const cfragConnectionIDErr: c_int = -2801;
pub const cfragNoSymbolErr: c_int = -2802;
pub const cfragNoSectionErr: c_int = -2803;
pub const cfragNoLibraryErr: c_int = -2804;
pub const cfragDupRegistrationErr: c_int = -2805;
pub const cfragFragmentFormatErr: c_int = -2806;
pub const cfragUnresolvedErr: c_int = -2807;
pub const cfragNoPositionErr: c_int = -2808;
pub const cfragNoPrivateMemErr: c_int = -2809;
pub const cfragNoClientMemErr: c_int = -2810;
pub const cfragNoIDsErr: c_int = -2811;
pub const cfragInitOrderErr: c_int = -2812;
pub const cfragImportTooOldErr: c_int = -2813;
pub const cfragImportTooNewErr: c_int = -2814;
pub const cfragInitLoopErr: c_int = -2815;
pub const cfragInitAtBootErr: c_int = -2816;
pub const cfragLibConnErr: c_int = -2817;
pub const cfragCFMStartupErr: c_int = -2818;
pub const cfragCFMInternalErr: c_int = -2819;
pub const cfragFragmentCorruptErr: c_int = -2820;
pub const cfragInitFunctionErr: c_int = -2821;
pub const cfragNoApplicationErr: c_int = -2822;
pub const cfragArchitectureErr: c_int = -2823;
pub const cfragFragmentUsageErr: c_int = -2824;
pub const cfragFileSizeErr: c_int = -2825;
pub const cfragNotClosureErr: c_int = -2826;
pub const cfragNoRegistrationErr: c_int = -2827;
pub const cfragContainerIDErr: c_int = -2828;
pub const cfragClosureIDErr: c_int = -2829;
pub const cfragAbortClosureErr: c_int = -2830;
pub const cfragOutputLengthErr: c_int = -2831;
pub const cfragMapFileErr: c_int = -2851;
pub const cfragExecFileRefErr: c_int = -2854;
pub const cfragStdFolderErr: c_int = -2855;
pub const cfragRsrcForkErr: c_int = -2856;
pub const cfragCFragRsrcErr: c_int = -2857;
pub const cfragLastErrCode: c_int = -2899;
const enum_unnamed_197 = c_int;
pub const cfragFirstReservedCode: c_int = -2897;
pub const cfragReservedCode_3: c_int = -2897;
pub const cfragReservedCode_2: c_int = -2898;
pub const cfragReservedCode_1: c_int = -2899;
const enum_unnamed_198 = c_int;
pub const invalidComponentID: c_int = -3000;
pub const validInstancesExist: c_int = -3001;
pub const componentNotCaptured: c_int = -3002;
pub const componentDontRegister: c_int = -3003;
pub const unresolvedComponentDLLErr: c_int = -3004;
pub const retryComponentRegistrationErr: c_int = -3005;
const enum_unnamed_199 = c_int;
pub const invalidTranslationPathErr: c_int = -3025;
pub const couldNotParseSourceFileErr: c_int = -3026;
pub const noTranslationPathErr: c_int = -3030;
pub const badTranslationSpecErr: c_int = -3031;
pub const noPrefAppErr: c_int = -3032;
const enum_unnamed_200 = c_int;
pub const buf2SmallErr: c_int = -3101;
pub const noMPPErr: c_int = -3102;
pub const ckSumErr: c_int = -3103;
pub const extractErr: c_int = -3104;
pub const readQErr: c_int = -3105;
pub const atpLenErr: c_int = -3106;
pub const atpBadRsp: c_int = -3107;
pub const recNotFnd: c_int = -3108;
pub const sktClosedErr: c_int = -3109;
const enum_unnamed_201 = c_int;
pub const kOTNoError: c_int = 0;
pub const kOTOutOfMemoryErr: c_int = -3211;
pub const kOTNotFoundErr: c_int = -3201;
pub const kOTDuplicateFoundErr: c_int = -3216;
pub const kOTBadAddressErr: c_int = -3150;
pub const kOTBadOptionErr: c_int = -3151;
pub const kOTAccessErr: c_int = -3152;
pub const kOTBadReferenceErr: c_int = -3153;
pub const kOTNoAddressErr: c_int = -3154;
pub const kOTOutStateErr: c_int = -3155;
pub const kOTBadSequenceErr: c_int = -3156;
pub const kOTSysErrorErr: c_int = -3157;
pub const kOTLookErr: c_int = -3158;
pub const kOTBadDataErr: c_int = -3159;
pub const kOTBufferOverflowErr: c_int = -3160;
pub const kOTFlowErr: c_int = -3161;
pub const kOTNoDataErr: c_int = -3162;
pub const kOTNoDisconnectErr: c_int = -3163;
pub const kOTNoUDErrErr: c_int = -3164;
pub const kOTBadFlagErr: c_int = -3165;
pub const kOTNoReleaseErr: c_int = -3166;
pub const kOTNotSupportedErr: c_int = -3167;
pub const kOTStateChangeErr: c_int = -3168;
pub const kOTNoStructureTypeErr: c_int = -3169;
pub const kOTBadNameErr: c_int = -3170;
pub const kOTBadQLenErr: c_int = -3171;
pub const kOTAddressBusyErr: c_int = -3172;
pub const kOTIndOutErr: c_int = -3173;
pub const kOTProviderMismatchErr: c_int = -3174;
pub const kOTResQLenErr: c_int = -3175;
pub const kOTResAddressErr: c_int = -3176;
pub const kOTQFullErr: c_int = -3177;
pub const kOTProtocolErr: c_int = -3178;
pub const kOTBadSyncErr: c_int = -3179;
pub const kOTCanceledErr: c_int = -3180;
pub const kEPERMErr: c_int = -3200;
pub const kENOENTErr: c_int = -3201;
pub const kENORSRCErr: c_int = -3202;
pub const kEINTRErr: c_int = -3203;
pub const kEIOErr: c_int = -3204;
pub const kENXIOErr: c_int = -3205;
pub const kEBADFErr: c_int = -3208;
pub const kEAGAINErr: c_int = -3210;
pub const kENOMEMErr: c_int = -3211;
pub const kEACCESErr: c_int = -3212;
pub const kEFAULTErr: c_int = -3213;
pub const kEBUSYErr: c_int = -3215;
pub const kEEXISTErr: c_int = -3216;
pub const kENODEVErr: c_int = -3218;
pub const kEINVALErr: c_int = -3221;
pub const kENOTTYErr: c_int = -3224;
pub const kEPIPEErr: c_int = -3231;
pub const kERANGEErr: c_int = -3233;
pub const kEWOULDBLOCKErr: c_int = -3234;
pub const kEDEADLKErr: c_int = -3234;
pub const kEALREADYErr: c_int = -3236;
pub const kENOTSOCKErr: c_int = -3237;
pub const kEDESTADDRREQErr: c_int = -3238;
pub const kEMSGSIZEErr: c_int = -3239;
pub const kEPROTOTYPEErr: c_int = -3240;
pub const kENOPROTOOPTErr: c_int = -3241;
pub const kEPROTONOSUPPORTErr: c_int = -3242;
pub const kESOCKTNOSUPPORTErr: c_int = -3243;
pub const kEOPNOTSUPPErr: c_int = -3244;
pub const kEADDRINUSEErr: c_int = -3247;
pub const kEADDRNOTAVAILErr: c_int = -3248;
pub const kENETDOWNErr: c_int = -3249;
pub const kENETUNREACHErr: c_int = -3250;
pub const kENETRESETErr: c_int = -3251;
pub const kECONNABORTEDErr: c_int = -3252;
pub const kECONNRESETErr: c_int = -3253;
pub const kENOBUFSErr: c_int = -3254;
pub const kEISCONNErr: c_int = -3255;
pub const kENOTCONNErr: c_int = -3256;
pub const kESHUTDOWNErr: c_int = -3257;
pub const kETOOMANYREFSErr: c_int = -3258;
pub const kETIMEDOUTErr: c_int = -3259;
pub const kECONNREFUSEDErr: c_int = -3260;
pub const kEHOSTDOWNErr: c_int = -3263;
pub const kEHOSTUNREACHErr: c_int = -3264;
pub const kEPROTOErr: c_int = -3269;
pub const kETIMEErr: c_int = -3270;
pub const kENOSRErr: c_int = -3271;
pub const kEBADMSGErr: c_int = -3272;
pub const kECANCELErr: c_int = -3273;
pub const kENOSTRErr: c_int = -3274;
pub const kENODATAErr: c_int = -3275;
pub const kEINPROGRESSErr: c_int = -3276;
pub const kESRCHErr: c_int = -3277;
pub const kENOMSGErr: c_int = -3278;
pub const kOTClientNotInittedErr: c_int = -3279;
pub const kOTPortHasDiedErr: c_int = -3280;
pub const kOTPortWasEjectedErr: c_int = -3281;
pub const kOTBadConfigurationErr: c_int = -3282;
pub const kOTConfigurationChangedErr: c_int = -3283;
pub const kOTUserRequestedErr: c_int = -3284;
pub const kOTPortLostConnection: c_int = -3285;
const enum_unnamed_202 = c_int;
pub const kQDNoPalette: c_int = -3950;
pub const kQDNoColorHWCursorSupport: c_int = -3951;
pub const kQDCursorAlreadyRegistered: c_int = -3952;
pub const kQDCursorNotRegistered: c_int = -3953;
pub const kQDCorruptPICTDataErr: c_int = -3954;
const enum_unnamed_203 = c_int;
pub const firstPickerError: c_int = -4000;
pub const invalidPickerType: c_int = -4000;
pub const requiredFlagsDontMatch: c_int = -4001;
pub const pickerResourceError: c_int = -4002;
pub const cantLoadPicker: c_int = -4003;
pub const cantCreatePickerWindow: c_int = -4004;
pub const cantLoadPackage: c_int = -4005;
pub const pickerCantLive: c_int = -4006;
pub const colorSyncNotInstalled: c_int = -4007;
pub const badProfileError: c_int = -4008;
pub const noHelpForItem: c_int = -4009;
const enum_unnamed_204 = c_int;
pub const kNSL68kContextNotSupported: c_int = -4170;
pub const kNSLSchedulerError: c_int = -4171;
pub const kNSLBadURLSyntax: c_int = -4172;
pub const kNSLNoCarbonLib: c_int = -4173;
pub const kNSLUILibraryNotAvailable: c_int = -4174;
pub const kNSLNotImplementedYet: c_int = -4175;
pub const kNSLErrNullPtrError: c_int = -4176;
pub const kNSLSomePluginsFailedToLoad: c_int = -4177;
pub const kNSLNullNeighborhoodPtr: c_int = -4178;
pub const kNSLNoPluginsForSearch: c_int = -4179;
pub const kNSLSearchAlreadyInProgress: c_int = -4180;
pub const kNSLNoPluginsFound: c_int = -4181;
pub const kNSLPluginLoadFailed: c_int = -4182;
pub const kNSLBadProtocolTypeErr: c_int = -4183;
pub const kNSLNullListPtr: c_int = -4184;
pub const kNSLBadClientInfoPtr: c_int = -4185;
pub const kNSLCannotContinueLookup: c_int = -4186;
pub const kNSLBufferTooSmallForData: c_int = -4187;
pub const kNSLNoContextAvailable: c_int = -4188;
pub const kNSLRequestBufferAlreadyInList: c_int = -4189;
pub const kNSLInvalidPluginSpec: c_int = -4190;
pub const kNSLNoSupportForService: c_int = -4191;
pub const kNSLBadNetConnection: c_int = -4192;
pub const kNSLBadDataTypeErr: c_int = -4193;
pub const kNSLBadServiceTypeErr: c_int = -4194;
pub const kNSLBadReferenceErr: c_int = -4195;
pub const kNSLNoElementsInList: c_int = -4196;
pub const kNSLInsufficientOTVer: c_int = -4197;
pub const kNSLInsufficientSysVer: c_int = -4198;
pub const kNSLNotInitialized: c_int = -4199;
pub const kNSLInitializationFailed: c_int = -4200;
const enum_unnamed_205 = c_int;
pub const kDTPHoldJobErr: c_int = -4200;
pub const kDTPStopQueueErr: c_int = -4201;
pub const kDTPTryAgainErr: c_int = -4202;
pub const kDTPAbortJobErr: c_int = 128;
const enum_unnamed_206 = c_int;
pub const cmElementTagNotFound: c_int = -4200;
pub const cmIndexRangeErr: c_int = -4201;
pub const cmCantDeleteElement: c_int = -4202;
pub const cmFatalProfileErr: c_int = -4203;
pub const cmInvalidProfile: c_int = -4204;
pub const cmInvalidProfileLocation: c_int = -4205;
pub const cmCantCopyModifiedV1Profile: c_int = -4215;
pub const cmInvalidSearch: c_int = -4206;
pub const cmSearchError: c_int = -4207;
pub const cmErrIncompatibleProfile: c_int = -4208;
pub const cmInvalidColorSpace: c_int = -4209;
pub const cmInvalidSrcMap: c_int = -4210;
pub const cmInvalidDstMap: c_int = -4211;
pub const cmNoGDevicesError: c_int = -4212;
pub const cmInvalidProfileComment: c_int = -4213;
pub const cmRangeOverFlow: c_int = -4214;
pub const cmNamedColorNotFound: c_int = -4216;
pub const cmCantGamutCheckError: c_int = -4217;
const enum_unnamed_207 = c_int;
pub const badFolderDescErr: c_int = -4270;
pub const duplicateFolderDescErr: c_int = -4271;
pub const noMoreFolderDescErr: c_int = -4272;
pub const invalidFolderTypeErr: c_int = -4273;
pub const duplicateRoutingErr: c_int = -4274;
pub const routingNotFoundErr: c_int = -4275;
pub const badRoutingSizeErr: c_int = -4276;
const enum_unnamed_208 = c_int;
pub const coreFoundationUnknownErr: c_int = -4960;
const enum_unnamed_209 = c_int;
pub const errCoreEndianDataTooShortForFormat: c_int = -4940;
pub const errCoreEndianDataTooLongForFormat: c_int = -4941;
pub const errCoreEndianDataDoesNotMatchFormat: c_int = -4942;
const enum_unnamed_210 = c_int;
pub const internalScrapErr: c_int = -4988;
pub const duplicateScrapFlavorErr: c_int = -4989;
pub const badScrapRefErr: c_int = -4990;
pub const processStateIncorrectErr: c_int = -4991;
pub const scrapPromiseNotKeptErr: c_int = -4992;
pub const noScrapPromiseKeeperErr: c_int = -4993;
pub const nilScrapFlavorDataErr: c_int = -4994;
pub const scrapFlavorFlagsMismatchErr: c_int = -4995;
pub const scrapFlavorSizeMismatchErr: c_int = -4996;
pub const illegalScrapFlavorFlagsErr: c_int = -4997;
pub const illegalScrapFlavorTypeErr: c_int = -4998;
pub const illegalScrapFlavorSizeErr: c_int = -4999;
pub const scrapFlavorNotFoundErr: c_int = -102;
pub const needClearScrapErr: c_int = -100;
const enum_unnamed_211 = c_int;
pub const afpAccessDenied: c_int = -5000;
pub const afpAuthContinue: c_int = -5001;
pub const afpBadUAM: c_int = -5002;
pub const afpBadVersNum: c_int = -5003;
pub const afpBitmapErr: c_int = -5004;
pub const afpCantMove: c_int = -5005;
pub const afpDenyConflict: c_int = -5006;
pub const afpDirNotEmpty: c_int = -5007;
pub const afpDiskFull: c_int = -5008;
pub const afpEofError: c_int = -5009;
pub const afpFileBusy: c_int = -5010;
pub const afpFlatVol: c_int = -5011;
pub const afpItemNotFound: c_int = -5012;
pub const afpLockErr: c_int = -5013;
pub const afpMiscErr: c_int = -5014;
pub const afpNoMoreLocks: c_int = -5015;
pub const afpNoServer: c_int = -5016;
pub const afpObjectExists: c_int = -5017;
pub const afpObjectNotFound: c_int = -5018;
pub const afpParmErr: c_int = -5019;
pub const afpRangeNotLocked: c_int = -5020;
pub const afpRangeOverlap: c_int = -5021;
pub const afpSessClosed: c_int = -5022;
pub const afpUserNotAuth: c_int = -5023;
pub const afpCallNotSupported: c_int = -5024;
pub const afpObjectTypeErr: c_int = -5025;
pub const afpTooManyFilesOpen: c_int = -5026;
pub const afpServerGoingDown: c_int = -5027;
pub const afpCantRename: c_int = -5028;
pub const afpDirNotFound: c_int = -5029;
pub const afpIconTypeError: c_int = -5030;
pub const afpVolLocked: c_int = -5031;
pub const afpObjectLocked: c_int = -5032;
pub const afpContainsSharedErr: c_int = -5033;
pub const afpIDNotFound: c_int = -5034;
pub const afpIDExists: c_int = -5035;
pub const afpDiffVolErr: c_int = -5036;
pub const afpCatalogChanged: c_int = -5037;
pub const afpSameObjectErr: c_int = -5038;
pub const afpBadIDErr: c_int = -5039;
pub const afpPwdSameErr: c_int = -5040;
pub const afpPwdTooShortErr: c_int = -5041;
pub const afpPwdExpiredErr: c_int = -5042;
pub const afpInsideSharedErr: c_int = -5043;
pub const afpInsideTrashErr: c_int = -5044;
pub const afpPwdNeedsChangeErr: c_int = -5045;
pub const afpPwdPolicyErr: c_int = -5046;
pub const afpAlreadyLoggedInErr: c_int = -5047;
pub const afpCallNotAllowed: c_int = -5048;
const enum_unnamed_212 = c_int;
pub const afpBadDirIDType: c_int = -5060;
pub const afpCantMountMoreSrvre: c_int = -5061;
pub const afpAlreadyMounted: c_int = -5062;
pub const afpSameNodeErr: c_int = -5063;
const enum_unnamed_213 = c_int;
pub const numberFormattingNotANumberErr: c_int = -5200;
pub const numberFormattingOverflowInDestinationErr: c_int = -5201;
pub const numberFormattingBadNumberFormattingObjectErr: c_int = -5202;
pub const numberFormattingSpuriousCharErr: c_int = -5203;
pub const numberFormattingLiteralMissingErr: c_int = -5204;
pub const numberFormattingDelimiterMissingErr: c_int = -5205;
pub const numberFormattingEmptyFormatErr: c_int = -5206;
pub const numberFormattingBadFormatErr: c_int = -5207;
pub const numberFormattingBadOptionsErr: c_int = -5208;
pub const numberFormattingBadTokenErr: c_int = -5209;
pub const numberFormattingUnOrderedCurrencyRangeErr: c_int = -5210;
pub const numberFormattingBadCurrencyPositionErr: c_int = -5211;
pub const numberFormattingNotADigitErr: c_int = -5212;
pub const numberFormattingUnOrdredCurrencyRangeErr: c_int = -5210;
pub const numberFortmattingNotADigitErr: c_int = -5212;
const enum_unnamed_214 = c_int;
pub const textParserBadParamErr: c_int = -5220;
pub const textParserObjectNotFoundErr: c_int = -5221;
pub const textParserBadTokenValueErr: c_int = -5222;
pub const textParserBadParserObjectErr: c_int = -5223;
pub const textParserParamErr: c_int = -5224;
pub const textParserNoMoreTextErr: c_int = -5225;
pub const textParserBadTextLanguageErr: c_int = -5226;
pub const textParserBadTextEncodingErr: c_int = -5227;
pub const textParserNoSuchTokenFoundErr: c_int = -5228;
pub const textParserNoMoreTokensErr: c_int = -5229;
const enum_unnamed_215 = c_int;
pub const errUnknownAttributeTag: c_int = -5240;
pub const errMarginWilllNotFit: c_int = -5241;
pub const errNotInImagingMode: c_int = -5242;
pub const errAlreadyInImagingMode: c_int = -5243;
pub const errEngineNotFound: c_int = -5244;
pub const errIteratorReachedEnd: c_int = -5245;
pub const errInvalidRange: c_int = -5246;
pub const errOffsetNotOnElementBounday: c_int = -5247;
pub const errNoHiliteText: c_int = -5248;
pub const errEmptyScrap: c_int = -5249;
pub const errReadOnlyText: c_int = -5250;
pub const errUnknownElement: c_int = -5251;
pub const errNonContiuousAttribute: c_int = -5252;
pub const errCannotUndo: c_int = -5253;
const enum_unnamed_216 = c_int;
pub const hrHTMLRenderingLibNotInstalledErr: c_int = -5360;
pub const hrMiscellaneousExceptionErr: c_int = -5361;
pub const hrUnableToResizeHandleErr: c_int = -5362;
pub const hrURLNotHandledErr: c_int = -5363;
const enum_unnamed_217 = c_int;
pub const errIANoErr: c_int = 0;
pub const errIAUnknownErr: c_int = -5380;
pub const errIAAllocationErr: c_int = -5381;
pub const errIAParamErr: c_int = -5382;
pub const errIANoMoreItems: c_int = -5383;
pub const errIABufferTooSmall: c_int = -5384;
pub const errIACanceled: c_int = -5385;
pub const errIAInvalidDocument: c_int = -5386;
pub const errIATextExtractionErr: c_int = -5387;
pub const errIAEndOfTextRun: c_int = -5388;
const enum_unnamed_218 = c_int;
pub const qtsBadSelectorErr: c_int = -5400;
pub const qtsBadStateErr: c_int = -5401;
pub const qtsBadDataErr: c_int = -5402;
pub const qtsUnsupportedDataTypeErr: c_int = -5403;
pub const qtsUnsupportedRateErr: c_int = -5404;
pub const qtsUnsupportedFeatureErr: c_int = -5405;
pub const qtsTooMuchDataErr: c_int = -5406;
pub const qtsUnknownValueErr: c_int = -5407;
pub const qtsTimeoutErr: c_int = -5408;
pub const qtsConnectionFailedErr: c_int = -5420;
pub const qtsAddressBusyErr: c_int = -5421;
const enum_unnamed_219 = c_int;
pub const gestaltUnknownErr: c_int = -5550;
pub const gestaltUndefSelectorErr: c_int = -5551;
pub const gestaltDupSelectorErr: c_int = -5552;
pub const gestaltLocationErr: c_int = -5553;
const enum_unnamed_220 = c_int;
pub const menuPropertyInvalidErr: c_int = -5603;
pub const menuPropertyInvalid: c_int = -5603;
pub const menuPropertyNotFoundErr: c_int = -5604;
pub const menuNotFoundErr: c_int = -5620;
pub const menuUsesSystemDefErr: c_int = -5621;
pub const menuItemNotFoundErr: c_int = -5622;
pub const menuInvalidErr: c_int = -5623;
const enum_unnamed_221 = c_int;
pub const errInvalidWindowPtr: c_int = -5600;
pub const errInvalidWindowRef: c_int = -5600;
pub const errUnsupportedWindowAttributesForClass: c_int = -5601;
pub const errWindowDoesNotHaveProxy: c_int = -5602;
pub const errInvalidWindowProperty: c_int = -5603;
pub const errWindowPropertyNotFound: c_int = -5604;
pub const errUnrecognizedWindowClass: c_int = -5605;
pub const errCorruptWindowDescription: c_int = -5606;
pub const errUserWantsToDragWindow: c_int = -5607;
pub const errWindowsAlreadyInitialized: c_int = -5608;
pub const errFloatingWindowsNotInitialized: c_int = -5609;
pub const errWindowNotFound: c_int = -5610;
pub const errWindowDoesNotFitOnscreen: c_int = -5611;
pub const windowAttributeImmutableErr: c_int = -5612;
pub const windowAttributesConflictErr: c_int = -5613;
pub const windowManagerInternalErr: c_int = -5614;
pub const windowWrongStateErr: c_int = -5615;
pub const windowGroupInvalidErr: c_int = -5616;
pub const windowAppModalStateAlreadyExistsErr: c_int = -5617;
pub const windowNoAppModalStateErr: c_int = -5618;
pub const errWindowDoesntSupportFocus: c_int = -30583;
pub const errWindowRegionCodeInvalid: c_int = -30593;
const enum_unnamed_222 = c_int;
pub const dialogNoTimeoutErr: c_int = -5640;
const enum_unnamed_223 = c_int;
pub const kNavWrongDialogStateErr: c_int = -5694;
pub const kNavWrongDialogClassErr: c_int = -5695;
pub const kNavInvalidSystemConfigErr: c_int = -5696;
pub const kNavCustomControlMessageFailedErr: c_int = -5697;
pub const kNavInvalidCustomControlMessageErr: c_int = -5698;
pub const kNavMissingKindStringErr: c_int = -5699;
const enum_unnamed_224 = c_int;
pub const collectionItemLockedErr: c_int = -5750;
pub const collectionItemNotFoundErr: c_int = -5751;
pub const collectionIndexRangeErr: c_int = -5752;
pub const collectionVersionErr: c_int = -5753;
const enum_unnamed_225 = c_int;
pub const kQTSSUnknownErr: c_int = -6150;
const enum_unnamed_226 = c_int;
pub const kDMGenErr: c_int = -6220;
pub const kDMMirroringOnAlready: c_int = -6221;
pub const kDMWrongNumberOfDisplays: c_int = -6222;
pub const kDMMirroringBlocked: c_int = -6223;
pub const kDMCantBlock: c_int = -6224;
pub const kDMMirroringNotOn: c_int = -6225;
pub const kSysSWTooOld: c_int = -6226;
pub const kDMSWNotInitializedErr: c_int = -6227;
pub const kDMDriverNotDisplayMgrAwareErr: c_int = -6228;
pub const kDMDisplayNotFoundErr: c_int = -6229;
pub const kDMNotFoundErr: c_int = -6229;
pub const kDMDisplayAlreadyInstalledErr: c_int = -6230;
pub const kDMMainDisplayCannotMoveErr: c_int = -6231;
pub const kDMNoDeviceTableclothErr: c_int = -6231;
pub const kDMFoundErr: c_int = -6232;
const enum_unnamed_227 = c_int;
pub const laTooSmallBufferErr: c_int = -6984;
pub const laEnvironmentBusyErr: c_int = -6985;
pub const laEnvironmentNotFoundErr: c_int = -6986;
pub const laEnvironmentExistErr: c_int = -6987;
pub const laInvalidPathErr: c_int = -6988;
pub const laNoMoreMorphemeErr: c_int = -6989;
pub const laFailAnalysisErr: c_int = -6990;
pub const laTextOverFlowErr: c_int = -6991;
pub const laDictionaryNotOpenedErr: c_int = -6992;
pub const laDictionaryUnknownErr: c_int = -6993;
pub const laDictionaryTooManyErr: c_int = -6994;
pub const laPropertyValueErr: c_int = -6995;
pub const laPropertyUnknownErr: c_int = -6996;
pub const laPropertyIsReadOnlyErr: c_int = -6997;
pub const laPropertyNotFoundErr: c_int = -6998;
pub const laPropertyErr: c_int = -6999;
pub const laEngineNotFoundErr: c_int = -7000;
const enum_unnamed_228 = c_int;
pub const kUSBNoErr: c_int = 0;
pub const kUSBNoTran: c_int = 0;
pub const kUSBNoDelay: c_int = 0;
pub const kUSBPending: c_int = 1;
const enum_unnamed_229 = c_uint;
pub const kUSBNotSent2Err: c_int = -6901;
pub const kUSBNotSent1Err: c_int = -6902;
pub const kUSBBufUnderRunErr: c_int = -6903;
pub const kUSBBufOvrRunErr: c_int = -6904;
pub const kUSBRes2Err: c_int = -6905;
pub const kUSBRes1Err: c_int = -6906;
pub const kUSBUnderRunErr: c_int = -6907;
pub const kUSBOverRunErr: c_int = -6908;
pub const kUSBWrongPIDErr: c_int = -6909;
pub const kUSBPIDCheckErr: c_int = -6910;
pub const kUSBNotRespondingErr: c_int = -6911;
pub const kUSBEndpointStallErr: c_int = -6912;
pub const kUSBDataToggleErr: c_int = -6913;
pub const kUSBBitstufErr: c_int = -6914;
pub const kUSBCRCErr: c_int = -6915;
pub const kUSBLinkErr: c_int = -6916;
const enum_unnamed_230 = c_int;
pub const kUSBQueueFull: c_int = -6948;
pub const kUSBNotHandled: c_int = -6987;
pub const kUSBUnknownNotification: c_int = -6949;
pub const kUSBBadDispatchTable: c_int = -6950;
const enum_unnamed_231 = c_int;
pub const kUSBInternalReserved10: c_int = -6951;
pub const kUSBInternalReserved9: c_int = -6952;
pub const kUSBInternalReserved8: c_int = -6953;
pub const kUSBInternalReserved7: c_int = -6954;
pub const kUSBInternalReserved6: c_int = -6955;
pub const kUSBInternalReserved5: c_int = -6956;
pub const kUSBInternalReserved4: c_int = -6957;
pub const kUSBInternalReserved3: c_int = -6958;
pub const kUSBInternalReserved2: c_int = -6959;
pub const kUSBInternalReserved1: c_int = -6960;
const enum_unnamed_232 = c_int;
pub const kUSBPortDisabled: c_int = -6969;
pub const kUSBQueueAborted: c_int = -6970;
pub const kUSBTimedOut: c_int = -6971;
pub const kUSBDeviceDisconnected: c_int = -6972;
pub const kUSBDeviceNotSuspended: c_int = -6973;
pub const kUSBDeviceSuspended: c_int = -6974;
pub const kUSBInvalidBuffer: c_int = -6975;
pub const kUSBDevicePowerProblem: c_int = -6976;
pub const kUSBDeviceBusy: c_int = -6977;
pub const kUSBUnknownInterfaceErr: c_int = -6978;
pub const kUSBPipeStalledError: c_int = -6979;
pub const kUSBPipeIdleError: c_int = -6980;
pub const kUSBNoBandwidthError: c_int = -6981;
pub const kUSBAbortedError: c_int = -6982;
pub const kUSBFlagsError: c_int = -6983;
pub const kUSBCompletionError: c_int = -6984;
pub const kUSBPBLengthError: c_int = -6985;
pub const kUSBPBVersionError: c_int = -6986;
pub const kUSBNotFound: c_int = -6987;
pub const kUSBOutOfMemoryErr: c_int = -6988;
pub const kUSBDeviceErr: c_int = -6989;
pub const kUSBNoDeviceErr: c_int = -6990;
pub const kUSBAlreadyOpenErr: c_int = -6991;
pub const kUSBTooManyTransactionsErr: c_int = -6992;
pub const kUSBUnknownRequestErr: c_int = -6993;
pub const kUSBRqErr: c_int = -6994;
pub const kUSBIncorrectTypeErr: c_int = -6995;
pub const kUSBTooManyPipesErr: c_int = -6996;
pub const kUSBUnknownPipeErr: c_int = -6997;
pub const kUSBUnknownDeviceErr: c_int = -6998;
pub const kUSBInternalErr: c_int = -6999;
const enum_unnamed_233 = c_int;
pub const dcmParamErr: c_int = -7100;
pub const dcmNotDictionaryErr: c_int = -7101;
pub const dcmBadDictionaryErr: c_int = -7102;
pub const dcmPermissionErr: c_int = -7103;
pub const dcmDictionaryNotOpenErr: c_int = -7104;
pub const dcmDictionaryBusyErr: c_int = -7105;
pub const dcmBlockFullErr: c_int = -7107;
pub const dcmNoRecordErr: c_int = -7108;
pub const dcmDupRecordErr: c_int = -7109;
pub const dcmNecessaryFieldErr: c_int = -7110;
pub const dcmBadFieldInfoErr: c_int = -7111;
pub const dcmBadFieldTypeErr: c_int = -7112;
pub const dcmNoFieldErr: c_int = -7113;
pub const dcmBadKeyErr: c_int = -7115;
pub const dcmTooManyKeyErr: c_int = -7116;
pub const dcmBadDataSizeErr: c_int = -7117;
pub const dcmBadFindMethodErr: c_int = -7118;
pub const dcmBadPropertyErr: c_int = -7119;
pub const dcmProtectedErr: c_int = -7121;
pub const dcmNoAccessMethodErr: c_int = -7122;
pub const dcmBadFeatureErr: c_int = -7124;
pub const dcmIterationCompleteErr: c_int = -7126;
pub const dcmBufferOverflowErr: c_int = -7127;
const enum_unnamed_234 = c_int;
pub const kRAInvalidParameter: c_int = -7100;
pub const kRAInvalidPort: c_int = -7101;
pub const kRAStartupFailed: c_int = -7102;
pub const kRAPortSetupFailed: c_int = -7103;
pub const kRAOutOfMemory: c_int = -7104;
pub const kRANotSupported: c_int = -7105;
pub const kRAMissingResources: c_int = -7106;
pub const kRAIncompatiblePrefs: c_int = -7107;
pub const kRANotConnected: c_int = -7108;
pub const kRAConnectionCanceled: c_int = -7109;
pub const kRAUnknownUser: c_int = -7110;
pub const kRAInvalidPassword: c_int = -7111;
pub const kRAInternalError: c_int = -7112;
pub const kRAInstallationDamaged: c_int = -7113;
pub const kRAPortBusy: c_int = -7114;
pub const kRAUnknownPortState: c_int = -7115;
pub const kRAInvalidPortState: c_int = -7116;
pub const kRAInvalidSerialProtocol: c_int = -7117;
pub const kRAUserLoginDisabled: c_int = -7118;
pub const kRAUserPwdChangeRequired: c_int = -7119;
pub const kRAUserPwdEntryRequired: c_int = -7120;
pub const kRAUserInteractionRequired: c_int = -7121;
pub const kRAInitOpenTransportFailed: c_int = -7122;
pub const kRARemoteAccessNotReady: c_int = -7123;
pub const kRATCPIPInactive: c_int = -7124;
pub const kRATCPIPNotConfigured: c_int = -7125;
pub const kRANotPrimaryInterface: c_int = -7126;
pub const kRAConfigurationDBInitErr: c_int = -7127;
pub const kRAPPPProtocolRejected: c_int = -7128;
pub const kRAPPPAuthenticationFailed: c_int = -7129;
pub const kRAPPPNegotiationFailed: c_int = -7130;
pub const kRAPPPUserDisconnected: c_int = -7131;
pub const kRAPPPPeerDisconnected: c_int = -7132;
pub const kRAPeerNotResponding: c_int = -7133;
pub const kRAATalkInactive: c_int = -7134;
pub const kRAExtAuthenticationFailed: c_int = -7135;
pub const kRANCPRejectedbyPeer: c_int = -7136;
pub const kRADuplicateIPAddr: c_int = -7137;
pub const kRACallBackFailed: c_int = -7138;
pub const kRANotEnabled: c_int = -7139;
const enum_unnamed_235 = c_int;
pub const kATSUInvalidTextLayoutErr: c_int = -8790;
pub const kATSUInvalidStyleErr: c_int = -8791;
pub const kATSUInvalidTextRangeErr: c_int = -8792;
pub const kATSUFontsMatched: c_int = -8793;
pub const kATSUFontsNotMatched: c_int = -8794;
pub const kATSUNoCorrespondingFontErr: c_int = -8795;
pub const kATSUInvalidFontErr: c_int = -8796;
pub const kATSUInvalidAttributeValueErr: c_int = -8797;
pub const kATSUInvalidAttributeSizeErr: c_int = -8798;
pub const kATSUInvalidAttributeTagErr: c_int = -8799;
pub const kATSUInvalidCacheErr: c_int = -8800;
pub const kATSUNotSetErr: c_int = -8801;
pub const kATSUNoStyleRunsAssignedErr: c_int = -8802;
pub const kATSUQuickDrawTextErr: c_int = -8803;
pub const kATSULowLevelErr: c_int = -8804;
pub const kATSUNoFontCmapAvailableErr: c_int = -8805;
pub const kATSUNoFontScalerAvailableErr: c_int = -8806;
pub const kATSUCoordinateOverflowErr: c_int = -8807;
pub const kATSULineBreakInWord: c_int = -8808;
pub const kATSUBusyObjectErr: c_int = -8809;
const enum_unnamed_236 = c_int;
pub const kTextUnsupportedEncodingErr: c_int = -8738;
pub const kTextMalformedInputErr: c_int = -8739;
pub const kTextUndefinedElementErr: c_int = -8740;
pub const kTECMissingTableErr: c_int = -8745;
pub const kTECTableChecksumErr: c_int = -8746;
pub const kTECTableFormatErr: c_int = -8747;
pub const kTECCorruptConverterErr: c_int = -8748;
pub const kTECNoConversionPathErr: c_int = -8749;
pub const kTECBufferBelowMinimumSizeErr: c_int = -8750;
pub const kTECArrayFullErr: c_int = -8751;
pub const kTECBadTextRunErr: c_int = -8752;
pub const kTECPartialCharErr: c_int = -8753;
pub const kTECUnmappableElementErr: c_int = -8754;
pub const kTECIncompleteElementErr: c_int = -8755;
pub const kTECDirectionErr: c_int = -8756;
pub const kTECGlobalsUnavailableErr: c_int = -8770;
pub const kTECItemUnavailableErr: c_int = -8771;
pub const kTECUsedFallbacksStatus: c_int = -8783;
pub const kTECNeedFlushStatus: c_int = -8784;
pub const kTECOutputBufferFullStatus: c_int = -8785;
pub const unicodeChecksumErr: c_int = -8769;
pub const unicodeNoTableErr: c_int = -8768;
pub const unicodeVariantErr: c_int = -8767;
pub const unicodeFallbacksErr: c_int = -8766;
pub const unicodePartConvertErr: c_int = -8765;
pub const unicodeBufErr: c_int = -8764;
pub const unicodeCharErr: c_int = -8763;
pub const unicodeElementErr: c_int = -8762;
pub const unicodeNotFoundErr: c_int = -8761;
pub const unicodeTableFormatErr: c_int = -8760;
pub const unicodeDirectionErr: c_int = -8759;
pub const unicodeContextualErr: c_int = -8758;
pub const unicodeTextEncodingDataErr: c_int = -8757;
const enum_unnamed_237 = c_int;
pub const kUTCUnderflowErr: c_int = -8850;
pub const kUTCOverflowErr: c_int = -8851;
pub const kIllegalClockValueErr: c_int = -8852;
const enum_unnamed_238 = c_int;
pub const kATSUInvalidFontFallbacksErr: c_int = -8900;
pub const kATSUUnsupportedStreamFormatErr: c_int = -8901;
pub const kATSUBadStreamErr: c_int = -8902;
pub const kATSUOutputBufferTooSmallErr: c_int = -8903;
pub const kATSUInvalidCallInsideCallbackErr: c_int = -8904;
pub const kATSUNoFontNameErr: c_int = -8905;
pub const kATSULastErr: c_int = -8959;
const enum_unnamed_239 = c_int;
pub const codecErr: c_int = -8960;
pub const noCodecErr: c_int = -8961;
pub const codecUnimpErr: c_int = -8962;
pub const codecSizeErr: c_int = -8963;
pub const codecScreenBufErr: c_int = -8964;
pub const codecImageBufErr: c_int = -8965;
pub const codecSpoolErr: c_int = -8966;
pub const codecAbortErr: c_int = -8967;
pub const codecWouldOffscreenErr: c_int = -8968;
pub const codecBadDataErr: c_int = -8969;
pub const codecDataVersErr: c_int = -8970;
pub const codecExtensionNotFoundErr: c_int = -8971;
pub const scTypeNotFoundErr: c_int = -8971;
pub const codecConditionErr: c_int = -8972;
pub const codecOpenErr: c_int = -8973;
pub const codecCantWhenErr: c_int = -8974;
pub const codecCantQueueErr: c_int = -8975;
pub const codecNothingToBlitErr: c_int = -8976;
pub const codecNoMemoryPleaseWaitErr: c_int = -8977;
pub const codecDisabledErr: c_int = -8978;
pub const codecNeedToFlushChainErr: c_int = -8979;
pub const lockPortBitsBadSurfaceErr: c_int = -8980;
pub const lockPortBitsWindowMovedErr: c_int = -8981;
pub const lockPortBitsWindowResizedErr: c_int = -8982;
pub const lockPortBitsWindowClippedErr: c_int = -8983;
pub const lockPortBitsBadPortErr: c_int = -8984;
pub const lockPortBitsSurfaceLostErr: c_int = -8985;
pub const codecParameterDialogConfirm: c_int = -8986;
pub const codecNeedAccessKeyErr: c_int = -8987;
pub const codecOffscreenFailedErr: c_int = -8988;
pub const codecDroppedFrameErr: c_int = -8989;
pub const directXObjectAlreadyExists: c_int = -8990;
pub const lockPortBitsWrongGDeviceErr: c_int = -8991;
pub const codecOffscreenFailedPleaseRetryErr: c_int = -8992;
pub const badCodecCharacterizationErr: c_int = -8993;
pub const noThumbnailFoundErr: c_int = -8994;
const enum_unnamed_240 = c_int;
pub const kBadAdapterErr: c_int = -9050;
pub const kBadAttributeErr: c_int = -9051;
pub const kBadBaseErr: c_int = -9052;
pub const kBadEDCErr: c_int = -9053;
pub const kBadIRQErr: c_int = -9054;
pub const kBadOffsetErr: c_int = -9055;
pub const kBadPageErr: c_int = -9056;
pub const kBadSizeErr: c_int = -9057;
pub const kBadSocketErr: c_int = -9058;
pub const kBadTypeErr: c_int = -9059;
pub const kBadVccErr: c_int = -9060;
pub const kBadVppErr: c_int = -9061;
pub const kBadWindowErr: c_int = -9062;
pub const kBadArgLengthErr: c_int = -9063;
pub const kBadArgsErr: c_int = -9064;
pub const kBadHandleErr: c_int = -9065;
pub const kBadCISErr: c_int = -9066;
pub const kBadSpeedErr: c_int = -9067;
pub const kReadFailureErr: c_int = -9068;
pub const kWriteFailureErr: c_int = -9069;
pub const kGeneralFailureErr: c_int = -9070;
pub const kNoCardErr: c_int = -9071;
pub const kUnsupportedFunctionErr: c_int = -9072;
pub const kUnsupportedModeErr: c_int = -9073;
pub const kBusyErr: c_int = -9074;
pub const kWriteProtectedErr: c_int = -9075;
pub const kConfigurationLockedErr: c_int = -9076;
pub const kInUseErr: c_int = -9077;
pub const kNoMoreItemsErr: c_int = -9078;
pub const kOutOfResourceErr: c_int = -9079;
pub const kNoCardSevicesSocketsErr: c_int = -9080;
pub const kInvalidRegEntryErr: c_int = -9081;
pub const kBadLinkErr: c_int = -9082;
pub const kBadDeviceErr: c_int = -9083;
pub const k16BitCardErr: c_int = -9084;
pub const kCardBusCardErr: c_int = -9085;
pub const kPassCallToChainErr: c_int = -9086;
pub const kCantConfigureCardErr: c_int = -9087;
pub const kPostCardEventErr: c_int = -9088;
pub const kInvalidDeviceNumber: c_int = -9089;
pub const kUnsupportedVsErr: c_int = -9090;
pub const kInvalidCSClientErr: c_int = -9091;
pub const kBadTupleDataErr: c_int = -9092;
pub const kBadCustomIFIDErr: c_int = -9093;
pub const kNoIOWindowRequestedErr: c_int = -9094;
pub const kNoMoreTimerClientsErr: c_int = -9095;
pub const kNoMoreInterruptSlotsErr: c_int = -9096;
pub const kNoClientTableErr: c_int = -9097;
pub const kUnsupportedCardErr: c_int = -9098;
pub const kNoCardEnablersFoundErr: c_int = -9099;
pub const kNoEnablerForCardErr: c_int = -9100;
pub const kNoCompatibleNameErr: c_int = -9101;
pub const kClientRequestDenied: c_int = -9102;
pub const kNotReadyErr: c_int = -9103;
pub const kTooManyIOWindowsErr: c_int = -9104;
pub const kAlreadySavedStateErr: c_int = -9105;
pub const kAttemptDupCardEntryErr: c_int = -9106;
pub const kCardPowerOffErr: c_int = -9107;
pub const kNotZVCapableErr: c_int = -9108;
pub const kNoCardBusCISErr: c_int = -9109;
const enum_unnamed_241 = c_int;
pub const noDeviceForChannel: c_int = -9400;
pub const grabTimeComplete: c_int = -9401;
pub const cantDoThatInCurrentMode: c_int = -9402;
pub const notEnoughMemoryToGrab: c_int = -9403;
pub const notEnoughDiskSpaceToGrab: c_int = -9404;
pub const couldntGetRequiredComponent: c_int = -9405;
pub const badSGChannel: c_int = -9406;
pub const seqGrabInfoNotAvailable: c_int = -9407;
pub const deviceCantMeetRequest: c_int = -9408;
pub const badControllerHeight: c_int = -9994;
pub const editingNotAllowed: c_int = -9995;
pub const controllerBoundsNotExact: c_int = -9996;
pub const cannotSetWidthOfAttachedController: c_int = -9997;
pub const controllerHasFixedHeight: c_int = -9998;
pub const cannotMoveAttachedController: c_int = -9999;
const enum_unnamed_242 = c_int;
pub const errAEBadKeyForm: c_int = -10002;
pub const errAECantHandleClass: c_int = -10010;
pub const errAECantSupplyType: c_int = -10009;
pub const errAECantUndo: c_int = -10015;
pub const errAEEventFailed: c_int = -10000;
pub const errAEIndexTooLarge: c_int = -10007;
pub const errAEInTransaction: c_int = -10011;
pub const errAELocalOnly: c_int = -10016;
pub const errAENoSuchTransaction: c_int = -10012;
pub const errAENotAnElement: c_int = -10008;
pub const errAENotASingleObject: c_int = -10014;
pub const errAENotModifiable: c_int = -10003;
pub const errAENoUserSelection: c_int = -10013;
pub const errAEPrivilegeError: c_int = -10004;
pub const errAEReadDenied: c_int = -10005;
pub const errAETypeError: c_int = -10001;
pub const errAEWriteDenied: c_int = -10006;
pub const errAENotAnEnumMember: c_int = -10023;
pub const errAECantPutThatThere: c_int = -10024;
pub const errAEPropertiesClash: c_int = -10025;
const enum_unnamed_243 = c_int;
pub const telGenericError: c_int = -1;
pub const telNoErr: c_int = 0;
pub const telNoTools: c_int = 8;
pub const telBadTermErr: c_int = -10001;
pub const telBadDNErr: c_int = -10002;
pub const telBadCAErr: c_int = -10003;
pub const telBadHandErr: c_int = -10004;
pub const telBadProcErr: c_int = -10005;
pub const telCAUnavail: c_int = -10006;
pub const telNoMemErr: c_int = -10007;
pub const telNoOpenErr: c_int = -10008;
pub const telBadHTypeErr: c_int = -10010;
pub const telHTypeNotSupp: c_int = -10011;
pub const telBadLevelErr: c_int = -10012;
pub const telBadVTypeErr: c_int = -10013;
pub const telVTypeNotSupp: c_int = -10014;
pub const telBadAPattErr: c_int = -10015;
pub const telAPattNotSupp: c_int = -10016;
pub const telBadIndex: c_int = -10017;
pub const telIndexNotSupp: c_int = -10018;
pub const telBadStateErr: c_int = -10019;
pub const telStateNotSupp: c_int = -10020;
pub const telBadIntExt: c_int = -10021;
pub const telIntExtNotSupp: c_int = -10022;
pub const telBadDNDType: c_int = -10023;
pub const telDNDTypeNotSupp: c_int = -10024;
pub const telFeatNotSub: c_int = -10030;
pub const telFeatNotAvail: c_int = -10031;
pub const telFeatActive: c_int = -10032;
pub const telFeatNotSupp: c_int = -10033;
pub const telConfLimitErr: c_int = -10040;
pub const telConfNoLimit: c_int = -10041;
pub const telConfErr: c_int = -10042;
pub const telConfRej: c_int = -10043;
pub const telTransferErr: c_int = -10044;
pub const telTransferRej: c_int = -10045;
pub const telCBErr: c_int = -10046;
pub const telConfLimitExceeded: c_int = -10047;
pub const telBadDNType: c_int = -10050;
pub const telBadPageID: c_int = -10051;
pub const telBadIntercomID: c_int = -10052;
pub const telBadFeatureID: c_int = -10053;
pub const telBadFwdType: c_int = -10054;
pub const telBadPickupGroupID: c_int = -10055;
pub const telBadParkID: c_int = -10056;
pub const telBadSelect: c_int = -10057;
pub const telBadBearerType: c_int = -10058;
pub const telBadRate: c_int = -10059;
pub const telDNTypeNotSupp: c_int = -10060;
pub const telFwdTypeNotSupp: c_int = -10061;
pub const telBadDisplayMode: c_int = -10062;
pub const telDisplayModeNotSupp: c_int = -10063;
pub const telNoCallbackRef: c_int = -10064;
pub const telAlreadyOpen: c_int = -10070;
pub const telStillNeeded: c_int = -10071;
pub const telTermNotOpen: c_int = -10072;
pub const telCANotAcceptable: c_int = -10080;
pub const telCANotRejectable: c_int = -10081;
pub const telCANotDeflectable: c_int = -10082;
pub const telPBErr: c_int = -10090;
pub const telBadFunction: c_int = -10091;
pub const telNoSuchTool: c_int = -10102;
pub const telUnknownErr: c_int = -10103;
pub const telNoCommFolder: c_int = -10106;
pub const telInitFailed: c_int = -10107;
pub const telBadCodeResource: c_int = -10108;
pub const telDeviceNotFound: c_int = -10109;
pub const telBadProcID: c_int = -10110;
pub const telValidateFailed: c_int = -10111;
pub const telAutoAnsNotOn: c_int = -10112;
pub const telDetAlreadyOn: c_int = -10113;
pub const telBadSWErr: c_int = -10114;
pub const telBadSampleRate: c_int = -10115;
pub const telNotEnoughdspBW: c_int = -10116;
const enum_unnamed_244 = c_int;
pub const errTaskNotFound: c_int = -10780;
const enum_unnamed_245 = c_int;
pub const pmBusyErr: c_int = -13000;
pub const pmReplyTOErr: c_int = -13001;
pub const pmSendStartErr: c_int = -13002;
pub const pmSendEndErr: c_int = -13003;
pub const pmRecvStartErr: c_int = -13004;
pub const pmRecvEndErr: c_int = -13005;
const enum_unnamed_246 = c_int;
pub const kPowerHandlerExistsForDeviceErr: c_int = -13006;
pub const kPowerHandlerNotFoundForDeviceErr: c_int = -13007;
pub const kPowerHandlerNotFoundForProcErr: c_int = -13008;
pub const kPowerMgtMessageNotHandled: c_int = -13009;
pub const kPowerMgtRequestDenied: c_int = -13010;
pub const kCantReportProcessorTemperatureErr: c_int = -13013;
pub const kProcessorTempRoutineRequiresMPLib2: c_int = -13014;
pub const kNoSuchPowerSource: c_int = -13020;
pub const kBridgeSoftwareRunningCantSleep: c_int = -13038;
const enum_unnamed_247 = c_int;
pub const debuggingExecutionContextErr: c_int = -13880;
pub const debuggingDuplicateSignatureErr: c_int = -13881;
pub const debuggingDuplicateOptionErr: c_int = -13882;
pub const debuggingInvalidSignatureErr: c_int = -13883;
pub const debuggingInvalidOptionErr: c_int = -13884;
pub const debuggingInvalidNameErr: c_int = -13885;
pub const debuggingNoCallbackErr: c_int = -13886;
pub const debuggingNoMatchErr: c_int = -13887;
const enum_unnamed_248 = c_int;
pub const kHIDVersionIncompatibleErr: c_int = -13909;
pub const kHIDDeviceNotReady: c_int = -13910;
const enum_unnamed_249 = c_int;
pub const kHIDSuccess: c_int = 0;
pub const kHIDInvalidRangePageErr: c_int = -13923;
pub const kHIDReportIDZeroErr: c_int = -13924;
pub const kHIDReportCountZeroErr: c_int = -13925;
pub const kHIDReportSizeZeroErr: c_int = -13926;
pub const kHIDUnmatchedDesignatorRangeErr: c_int = -13927;
pub const kHIDUnmatchedStringRangeErr: c_int = -13928;
pub const kHIDInvertedUsageRangeErr: c_int = -13929;
pub const kHIDUnmatchedUsageRangeErr: c_int = -13930;
pub const kHIDInvertedPhysicalRangeErr: c_int = -13931;
pub const kHIDInvertedLogicalRangeErr: c_int = -13932;
pub const kHIDBadLogicalMaximumErr: c_int = -13933;
pub const kHIDBadLogicalMinimumErr: c_int = -13934;
pub const kHIDUsagePageZeroErr: c_int = -13935;
pub const kHIDEndOfDescriptorErr: c_int = -13936;
pub const kHIDNotEnoughMemoryErr: c_int = -13937;
pub const kHIDBadParameterErr: c_int = -13938;
pub const kHIDNullPointerErr: c_int = -13939;
pub const kHIDInvalidReportLengthErr: c_int = -13940;
pub const kHIDInvalidReportTypeErr: c_int = -13941;
pub const kHIDBadLogPhysValuesErr: c_int = -13942;
pub const kHIDIncompatibleReportErr: c_int = -13943;
pub const kHIDInvalidPreparsedDataErr: c_int = -13944;
pub const kHIDNotValueArrayErr: c_int = -13945;
pub const kHIDUsageNotFoundErr: c_int = -13946;
pub const kHIDValueOutOfRangeErr: c_int = -13947;
pub const kHIDBufferTooSmallErr: c_int = -13948;
pub const kHIDNullStateErr: c_int = -13949;
pub const kHIDBaseError: c_int = -13950;
const enum_unnamed_250 = c_int;
pub const kModemOutOfMemory: c_int = -14000;
pub const kModemPreferencesMissing: c_int = -14001;
pub const kModemScriptMissing: c_int = -14002;
const enum_unnamed_251 = c_int;
pub const kTXNEndIterationErr: c_int = -22000;
pub const kTXNCannotAddFrameErr: c_int = -22001;
pub const kTXNInvalidFrameIDErr: c_int = -22002;
pub const kTXNIllegalToCrossDataBoundariesErr: c_int = -22003;
pub const kTXNUserCanceledOperationErr: c_int = -22004;
pub const kTXNBadDefaultFileTypeWarning: c_int = -22005;
pub const kTXNCannotSetAutoIndentErr: c_int = -22006;
pub const kTXNRunIndexOutofBoundsErr: c_int = -22007;
pub const kTXNNoMatchErr: c_int = -22008;
pub const kTXNAttributeTagInvalidForRunErr: c_int = -22009;
pub const kTXNSomeOrAllTagsInvalidForRunErr: c_int = -22010;
pub const kTXNInvalidRunIndex: c_int = -22011;
pub const kTXNAlreadyInitializedErr: c_int = -22012;
pub const kTXNCannotTurnTSMOffWhenUsingUnicodeErr: c_int = -22013;
pub const kTXNCopyNotAllowedInEchoModeErr: c_int = -22014;
pub const kTXNDataTypeNotAllowedErr: c_int = -22015;
pub const kTXNATSUIIsNotInstalledErr: c_int = -22016;
pub const kTXNOutsideOfLineErr: c_int = -22017;
pub const kTXNOutsideOfFrameErr: c_int = -22018;
const enum_unnamed_252 = c_int;
pub const printerStatusOpCodeNotSupportedErr: c_int = -25280;
const enum_unnamed_253 = c_int;
pub const errKCNotAvailable: c_int = -25291;
pub const errKCReadOnly: c_int = -25292;
pub const errKCAuthFailed: c_int = -25293;
pub const errKCNoSuchKeychain: c_int = -25294;
pub const errKCInvalidKeychain: c_int = -25295;
pub const errKCDuplicateKeychain: c_int = -25296;
pub const errKCDuplicateCallback: c_int = -25297;
pub const errKCInvalidCallback: c_int = -25298;
pub const errKCDuplicateItem: c_int = -25299;
pub const errKCItemNotFound: c_int = -25300;
pub const errKCBufferTooSmall: c_int = -25301;
pub const errKCDataTooLarge: c_int = -25302;
pub const errKCNoSuchAttr: c_int = -25303;
pub const errKCInvalidItemRef: c_int = -25304;
pub const errKCInvalidSearchRef: c_int = -25305;
pub const errKCNoSuchClass: c_int = -25306;
pub const errKCNoDefaultKeychain: c_int = -25307;
pub const errKCInteractionNotAllowed: c_int = -25308;
pub const errKCReadOnlyAttr: c_int = -25309;
pub const errKCWrongKCVersion: c_int = -25310;
pub const errKCKeySizeNotAllowed: c_int = -25311;
pub const errKCNoStorageModule: c_int = -25312;
pub const errKCNoCertificateModule: c_int = -25313;
pub const errKCNoPolicyModule: c_int = -25314;
pub const errKCInteractionRequired: c_int = -25315;
pub const errKCDataNotAvailable: c_int = -25316;
pub const errKCDataNotModifiable: c_int = -25317;
pub const errKCCreateChainFailed: c_int = -25318;
const enum_unnamed_254 = c_int;
pub const kUCOutputBufferTooSmall: c_int = -25340;
pub const kUCTextBreakLocatorMissingType: c_int = -25341;
const enum_unnamed_255 = c_int;
pub const kUCTSNoKeysAddedToObjectErr: c_int = -25342;
pub const kUCTSSearchListErr: c_int = -25343;
const enum_unnamed_256 = c_int;
pub const kUCTokenizerIterationFinished: c_int = -25344;
pub const kUCTokenizerUnknownLang: c_int = -25345;
pub const kUCTokenNotFound: c_int = -25346;
const enum_unnamed_257 = c_int;
pub const kMPIterationEndErr: c_int = -29275;
pub const kMPPrivilegedErr: c_int = -29276;
pub const kMPProcessCreatedErr: c_int = -29288;
pub const kMPProcessTerminatedErr: c_int = -29289;
pub const kMPTaskCreatedErr: c_int = -29290;
pub const kMPTaskBlockedErr: c_int = -29291;
pub const kMPTaskStoppedErr: c_int = -29292;
pub const kMPBlueBlockingErr: c_int = -29293;
pub const kMPDeletedErr: c_int = -29295;
pub const kMPTimeoutErr: c_int = -29296;
pub const kMPTaskAbortedErr: c_int = -29297;
pub const kMPInsufficientResourcesErr: c_int = -29298;
pub const kMPInvalidIDErr: c_int = -29299;
const enum_unnamed_258 = c_int;
pub const kMPNanokernelNeedsMemoryErr: c_int = -29294;
const enum_unnamed_259 = c_int;
pub const kCollateAttributesNotFoundErr: c_int = -29500;
pub const kCollateInvalidOptions: c_int = -29501;
pub const kCollateMissingUnicodeTableErr: c_int = -29502;
pub const kCollateUnicodeConvertFailedErr: c_int = -29503;
pub const kCollatePatternNotFoundErr: c_int = -29504;
pub const kCollateInvalidChar: c_int = -29505;
pub const kCollateBufferTooSmall: c_int = -29506;
pub const kCollateInvalidCollationRef: c_int = -29507;
const enum_unnamed_260 = c_int;
pub const kFNSInvalidReferenceErr: c_int = -29580;
pub const kFNSBadReferenceVersionErr: c_int = -29581;
pub const kFNSInvalidProfileErr: c_int = -29582;
pub const kFNSBadProfileVersionErr: c_int = -29583;
pub const kFNSDuplicateReferenceErr: c_int = -29584;
pub const kFNSMismatchErr: c_int = -29585;
pub const kFNSInsufficientDataErr: c_int = -29586;
pub const kFNSBadFlattenedSizeErr: c_int = -29587;
pub const kFNSNameNotFoundErr: c_int = -29589;
const enum_unnamed_261 = c_int;
pub const kLocalesBufferTooSmallErr: c_int = -30001;
pub const kLocalesTableFormatErr: c_int = -30002;
pub const kLocalesDefaultDisplayStatus: c_int = -30029;
const enum_unnamed_262 = c_int;
pub const kALMInternalErr: c_int = -30049;
pub const kALMGroupNotFoundErr: c_int = -30048;
pub const kALMNoSuchModuleErr: c_int = -30047;
pub const kALMModuleCommunicationErr: c_int = -30046;
pub const kALMDuplicateModuleErr: c_int = -30045;
pub const kALMInstallationErr: c_int = -30044;
pub const kALMDeferSwitchErr: c_int = -30043;
pub const kALMRebootFlagsLevelErr: c_int = -30042;
const enum_unnamed_263 = c_int;
pub const kALMLocationNotFoundErr: c_int = -30048;
const enum_unnamed_264 = c_int;
pub const kSSpInternalErr: c_int = -30340;
pub const kSSpVersionErr: c_int = -30341;
pub const kSSpCantInstallErr: c_int = -30342;
pub const kSSpParallelUpVectorErr: c_int = -30343;
pub const kSSpScaleToZeroErr: c_int = -30344;
const enum_unnamed_265 = c_int;
pub const kNSpInitializationFailedErr: c_int = -30360;
pub const kNSpAlreadyInitializedErr: c_int = -30361;
pub const kNSpTopologyNotSupportedErr: c_int = -30362;
pub const kNSpPipeFullErr: c_int = -30364;
pub const kNSpHostFailedErr: c_int = -30365;
pub const kNSpProtocolNotAvailableErr: c_int = -30366;
pub const kNSpInvalidGameRefErr: c_int = -30367;
pub const kNSpInvalidParameterErr: c_int = -30369;
pub const kNSpOTNotPresentErr: c_int = -30370;
pub const kNSpOTVersionTooOldErr: c_int = -30371;
pub const kNSpMemAllocationErr: c_int = -30373;
pub const kNSpAlreadyAdvertisingErr: c_int = -30374;
pub const kNSpNotAdvertisingErr: c_int = -30376;
pub const kNSpInvalidAddressErr: c_int = -30377;
pub const kNSpFreeQExhaustedErr: c_int = -30378;
pub const kNSpRemovePlayerFailedErr: c_int = -30379;
pub const kNSpAddressInUseErr: c_int = -30380;
pub const kNSpFeatureNotImplementedErr: c_int = -30381;
pub const kNSpNameRequiredErr: c_int = -30382;
pub const kNSpInvalidPlayerIDErr: c_int = -30383;
pub const kNSpInvalidGroupIDErr: c_int = -30384;
pub const kNSpNoPlayersErr: c_int = -30385;
pub const kNSpNoGroupsErr: c_int = -30386;
pub const kNSpNoHostVolunteersErr: c_int = -30387;
pub const kNSpCreateGroupFailedErr: c_int = -30388;
pub const kNSpAddPlayerFailedErr: c_int = -30389;
pub const kNSpInvalidDefinitionErr: c_int = -30390;
pub const kNSpInvalidProtocolRefErr: c_int = -30391;
pub const kNSpInvalidProtocolListErr: c_int = -30392;
pub const kNSpTimeoutErr: c_int = -30393;
pub const kNSpGameTerminatedErr: c_int = -30394;
pub const kNSpConnectFailedErr: c_int = -30395;
pub const kNSpSendFailedErr: c_int = -30396;
pub const kNSpMessageTooBigErr: c_int = -30397;
pub const kNSpCantBlockErr: c_int = -30398;
pub const kNSpJoinFailedErr: c_int = -30399;
const enum_unnamed_266 = c_int;
pub const kISpInternalErr: c_int = -30420;
pub const kISpSystemListErr: c_int = -30421;
pub const kISpBufferToSmallErr: c_int = -30422;
pub const kISpElementInListErr: c_int = -30423;
pub const kISpElementNotInListErr: c_int = -30424;
pub const kISpSystemInactiveErr: c_int = -30425;
pub const kISpDeviceInactiveErr: c_int = -30426;
pub const kISpSystemActiveErr: c_int = -30427;
pub const kISpDeviceActiveErr: c_int = -30428;
pub const kISpListBusyErr: c_int = -30429;
const enum_unnamed_267 = c_int;
pub const kDSpNotInitializedErr: c_int = -30440;
pub const kDSpSystemSWTooOldErr: c_int = -30441;
pub const kDSpInvalidContextErr: c_int = -30442;
pub const kDSpInvalidAttributesErr: c_int = -30443;
pub const kDSpContextAlreadyReservedErr: c_int = -30444;
pub const kDSpContextNotReservedErr: c_int = -30445;
pub const kDSpContextNotFoundErr: c_int = -30446;
pub const kDSpFrameRateNotReadyErr: c_int = -30447;
pub const kDSpConfirmSwitchWarning: c_int = -30448;
pub const kDSpInternalErr: c_int = -30449;
pub const kDSpStereoContextErr: c_int = -30450;
const enum_unnamed_268 = c_int;
pub const kFBCvTwinExceptionErr: c_int = -30500;
pub const kFBCnoIndexesFound: c_int = -30501;
pub const kFBCallocFailed: c_int = -30502;
pub const kFBCbadParam: c_int = -30503;
pub const kFBCfileNotIndexed: c_int = -30504;
pub const kFBCbadIndexFile: c_int = -30505;
pub const kFBCcompactionFailed: c_int = -30506;
pub const kFBCvalidationFailed: c_int = -30507;
pub const kFBCindexingFailed: c_int = -30508;
pub const kFBCcommitFailed: c_int = -30509;
pub const kFBCdeletionFailed: c_int = -30510;
pub const kFBCmoveFailed: c_int = -30511;
pub const kFBCtokenizationFailed: c_int = -30512;
pub const kFBCmergingFailed: c_int = -30513;
pub const kFBCindexCreationFailed: c_int = -30514;
pub const kFBCaccessorStoreFailed: c_int = -30515;
pub const kFBCaddDocFailed: c_int = -30516;
pub const kFBCflushFailed: c_int = -30517;
pub const kFBCindexNotFound: c_int = -30518;
pub const kFBCnoSearchSession: c_int = -30519;
pub const kFBCindexingCanceled: c_int = -30520;
pub const kFBCaccessCanceled: c_int = -30521;
pub const kFBCindexFileDestroyed: c_int = -30522;
pub const kFBCindexNotAvailable: c_int = -30523;
pub const kFBCsearchFailed: c_int = -30524;
pub const kFBCsomeFilesNotIndexed: c_int = -30525;
pub const kFBCillegalSessionChange: c_int = -30526;
pub const kFBCanalysisNotAvailable: c_int = -30527;
pub const kFBCbadIndexFileVersion: c_int = -30528;
pub const kFBCsummarizationCanceled: c_int = -30529;
pub const kFBCindexDiskIOFailed: c_int = -30530;
pub const kFBCbadSearchSession: c_int = -30531;
pub const kFBCnoSuchHit: c_int = -30532;
const enum_unnamed_269 = c_int;
pub const notAQTVRMovieErr: c_int = -30540;
pub const constraintReachedErr: c_int = -30541;
pub const callNotSupportedByNodeErr: c_int = -30542;
pub const selectorNotSupportedByNodeErr: c_int = -30543;
pub const invalidNodeIDErr: c_int = -30544;
pub const invalidViewStateErr: c_int = -30545;
pub const timeNotInViewErr: c_int = -30546;
pub const propertyNotSupportedByNodeErr: c_int = -30547;
pub const settingNotSupportedByNodeErr: c_int = -30548;
pub const limitReachedErr: c_int = -30549;
pub const invalidNodeFormatErr: c_int = -30550;
pub const invalidHotSpotIDErr: c_int = -30551;
pub const noMemoryNodeFailedInitialize: c_int = -30552;
pub const streamingNodeNotReadyErr: c_int = -30553;
pub const qtvrLibraryLoadErr: c_int = -30554;
pub const qtvrUninitialized: c_int = -30555;
const enum_unnamed_270 = c_int;
pub const themeInvalidBrushErr: c_int = -30560;
pub const themeProcessRegisteredErr: c_int = -30561;
pub const themeProcessNotRegisteredErr: c_int = -30562;
pub const themeBadTextColorErr: c_int = -30563;
pub const themeHasNoAccentsErr: c_int = -30564;
pub const themeBadCursorIndexErr: c_int = -30565;
pub const themeScriptFontNotFoundErr: c_int = -30566;
pub const themeMonitorDepthNotSupportedErr: c_int = -30567;
pub const themeNoAppropriateBrushErr: c_int = -30568;
const enum_unnamed_271 = c_int;
pub const errMessageNotSupported: c_int = -30580;
pub const errDataNotSupported: c_int = -30581;
pub const errControlDoesntSupportFocus: c_int = -30582;
pub const errUnknownControl: c_int = -30584;
pub const errCouldntSetFocus: c_int = -30585;
pub const errNoRootControl: c_int = -30586;
pub const errRootAlreadyExists: c_int = -30587;
pub const errInvalidPartCode: c_int = -30588;
pub const errControlsAlreadyExist: c_int = -30589;
pub const errControlIsNotEmbedder: c_int = -30590;
pub const errDataSizeMismatch: c_int = -30591;
pub const errControlHiddenOrDisabled: c_int = -30592;
pub const errCantEmbedIntoSelf: c_int = -30594;
pub const errCantEmbedRoot: c_int = -30595;
pub const errItemNotControl: c_int = -30596;
pub const controlInvalidDataVersionErr: c_int = -30597;
pub const controlPropertyInvalid: c_int = -5603;
pub const controlPropertyNotFoundErr: c_int = -5604;
pub const controlHandleInvalidErr: c_int = -30599;
const enum_unnamed_272 = c_int;
pub const kURLInvalidURLReferenceError: c_int = -30770;
pub const kURLProgressAlreadyDisplayedError: c_int = -30771;
pub const kURLDestinationExistsError: c_int = -30772;
pub const kURLInvalidURLError: c_int = -30773;
pub const kURLUnsupportedSchemeError: c_int = -30774;
pub const kURLServerBusyError: c_int = -30775;
pub const kURLAuthenticationError: c_int = -30776;
pub const kURLPropertyNotYetKnownError: c_int = -30777;
pub const kURLUnknownPropertyError: c_int = -30778;
pub const kURLPropertyBufferTooSmallError: c_int = -30779;
pub const kURLUnsettablePropertyError: c_int = -30780;
pub const kURLInvalidCallError: c_int = -30781;
pub const kURLFileEmptyError: c_int = -30783;
pub const kURLExtensionFailureError: c_int = -30785;
pub const kURLInvalidConfigurationError: c_int = -30786;
pub const kURLAccessNotAvailableError: c_int = -30787;
pub const kURL68kNotSupportedError: c_int = -30788;
const enum_unnamed_273 = c_int;
pub const errCppGeneral: c_int = -32000;
pub const errCppbad_alloc: c_int = -32001;
pub const errCppbad_cast: c_int = -32002;
pub const errCppbad_exception: c_int = -32003;
pub const errCppbad_typeid: c_int = -32004;
pub const errCpplogic_error: c_int = -32005;
pub const errCppdomain_error: c_int = -32006;
pub const errCppinvalid_argument: c_int = -32007;
pub const errCpplength_error: c_int = -32008;
pub const errCppout_of_range: c_int = -32009;
pub const errCppruntime_error: c_int = -32010;
pub const errCppoverflow_error: c_int = -32011;
pub const errCpprange_error: c_int = -32012;
pub const errCppunderflow_error: c_int = -32013;
pub const errCppios_base_failure: c_int = -32014;
pub const errCppLastSystemDefinedError: c_int = -32020;
pub const errCppLastUserDefinedError: c_int = -32049;
const enum_unnamed_274 = c_int;
pub const badComponentInstance: c_int = -2147450879;
pub const badComponentSelector: c_int = -2147450878;
const enum_unnamed_275 = c_int;
pub const dsBusError: c_int = 1;
pub const dsAddressErr: c_int = 2;
pub const dsIllInstErr: c_int = 3;
pub const dsZeroDivErr: c_int = 4;
pub const dsChkErr: c_int = 5;
pub const dsOvflowErr: c_int = 6;
pub const dsPrivErr: c_int = 7;
pub const dsTraceErr: c_int = 8;
pub const dsLineAErr: c_int = 9;
pub const dsLineFErr: c_int = 10;
pub const dsMiscErr: c_int = 11;
pub const dsCoreErr: c_int = 12;
pub const dsIrqErr: c_int = 13;
pub const dsIOCoreErr: c_int = 14;
pub const dsLoadErr: c_int = 15;
pub const dsFPErr: c_int = 16;
pub const dsNoPackErr: c_int = 17;
pub const dsNoPk1: c_int = 18;
pub const dsNoPk2: c_int = 19;
const enum_unnamed_276 = c_uint;
pub const dsNoPk3: c_int = 20;
pub const dsNoPk4: c_int = 21;
pub const dsNoPk5: c_int = 22;
pub const dsNoPk6: c_int = 23;
pub const dsNoPk7: c_int = 24;
pub const dsMemFullErr: c_int = 25;
pub const dsBadLaunch: c_int = 26;
pub const dsFSErr: c_int = 27;
pub const dsStknHeap: c_int = 28;
pub const negZcbFreeErr: c_int = 33;
pub const dsFinderErr: c_int = 41;
pub const dsBadSlotInt: c_int = 51;
pub const dsBadSANEOpcode: c_int = 81;
pub const dsBadPatchHeader: c_int = 83;
pub const menuPrgErr: c_int = 84;
pub const dsMBarNFnd: c_int = 85;
pub const dsHMenuFindErr: c_int = 86;
pub const dsWDEFNotFound: c_int = 87;
pub const dsCDEFNotFound: c_int = 88;
pub const dsMDEFNotFound: c_int = 89;
const enum_unnamed_277 = c_uint;
pub const dsNoFPU: c_int = 90;
pub const dsNoPatch: c_int = 98;
pub const dsBadPatch: c_int = 99;
pub const dsParityErr: c_int = 101;
pub const dsOldSystem: c_int = 102;
pub const ds32BitMode: c_int = 103;
pub const dsNeedToWriteBootBlocks: c_int = 104;
pub const dsNotEnoughRAMToBoot: c_int = 105;
pub const dsBufPtrTooLow: c_int = 106;
pub const dsVMDeferredFuncTableFull: c_int = 112;
pub const dsVMBadBackingStore: c_int = 113;
pub const dsCantHoldSystemHeap: c_int = 114;
pub const dsSystemRequiresPowerPC: c_int = 116;
pub const dsGibblyMovedToDisabledFolder: c_int = 117;
pub const dsUnBootableSystem: c_int = 118;
pub const dsMustUseFCBAccessors: c_int = 119;
pub const dsMacOSROMVersionTooOld: c_int = 120;
pub const dsLostConnectionToNetworkDisk: c_int = 121;
pub const dsRAMDiskTooBig: c_int = 122;
pub const dsWriteToSupervisorStackGuardPage: c_int = 128;
pub const dsReinsert: c_int = 30;
pub const shutDownAlert: c_int = 42;
pub const dsShutDownOrRestart: c_int = 20000;
pub const dsSwitchOffOrRestart: c_int = 20001;
pub const dsForcedQuit: c_int = 20002;
pub const dsRemoveDisk: c_int = 20003;
pub const dsDirtyDisk: c_int = 20004;
pub const dsShutDownOrResume: c_int = 20109;
pub const dsSCSIWarn: c_int = 20010;
pub const dsMBSysError: c_int = 29200;
pub const dsMBFlpySysError: c_int = 29201;
pub const dsMBATASysError: c_int = 29202;
pub const dsMBATAPISysError: c_int = 29203;
pub const dsMBExternFlpySysError: c_int = 29204;
pub const dsPCCardATASysError: c_int = 29205;
const enum_unnamed_278 = c_uint;
pub const dsNoExtsMacsBug: c_int = -1;
pub const dsNoExtsDisassembler: c_int = -2;
pub const dsMacsBugInstalled: c_int = -10;
pub const dsDisassemblerInstalled: c_int = -11;
pub const dsExtensionsDisabled: c_int = -13;
pub const dsGreeting: c_int = 40;
pub const dsSysErr: c_int = 32767;
pub const WDEFNFnd: c_int = 87;
const enum_unnamed_279 = c_int;
pub const CDEFNFnd: c_int = 88;
pub const dsNotThe1: c_int = 31;
pub const dsBadStartupDisk: c_int = 42;
pub const dsSystemFileErr: c_int = 43;
pub const dsHD20Installed: c_int = -12;
pub const mBarNFnd: c_int = -126;
pub const fsDSIntErr: c_int = -127;
pub const hMenuFindErr: c_int = -127;
pub const userBreak: c_int = -490;
pub const strUserBreak: c_int = -491;
pub const exUserBreak: c_int = -492;
const enum_unnamed_280 = c_int;
pub const dsBadLibrary: c_int = 1010;
pub const dsMixedModeFailure: c_int = 1011;
const enum_unnamed_281 = c_uint;
pub const kPOSIXErrorBase: c_int = 100000;
pub const kPOSIXErrorEPERM: c_int = 100001;
pub const kPOSIXErrorENOENT: c_int = 100002;
pub const kPOSIXErrorESRCH: c_int = 100003;
pub const kPOSIXErrorEINTR: c_int = 100004;
pub const kPOSIXErrorEIO: c_int = 100005;
pub const kPOSIXErrorENXIO: c_int = 100006;
pub const kPOSIXErrorE2BIG: c_int = 100007;
pub const kPOSIXErrorENOEXEC: c_int = 100008;
pub const kPOSIXErrorEBADF: c_int = 100009;
pub const kPOSIXErrorECHILD: c_int = 100010;
pub const kPOSIXErrorEDEADLK: c_int = 100011;
pub const kPOSIXErrorENOMEM: c_int = 100012;
pub const kPOSIXErrorEACCES: c_int = 100013;
pub const kPOSIXErrorEFAULT: c_int = 100014;
pub const kPOSIXErrorENOTBLK: c_int = 100015;
pub const kPOSIXErrorEBUSY: c_int = 100016;
pub const kPOSIXErrorEEXIST: c_int = 100017;
pub const kPOSIXErrorEXDEV: c_int = 100018;
pub const kPOSIXErrorENODEV: c_int = 100019;
pub const kPOSIXErrorENOTDIR: c_int = 100020;
pub const kPOSIXErrorEISDIR: c_int = 100021;
pub const kPOSIXErrorEINVAL: c_int = 100022;
pub const kPOSIXErrorENFILE: c_int = 100023;
pub const kPOSIXErrorEMFILE: c_int = 100024;
pub const kPOSIXErrorENOTTY: c_int = 100025;
pub const kPOSIXErrorETXTBSY: c_int = 100026;
pub const kPOSIXErrorEFBIG: c_int = 100027;
pub const kPOSIXErrorENOSPC: c_int = 100028;
pub const kPOSIXErrorESPIPE: c_int = 100029;
pub const kPOSIXErrorEROFS: c_int = 100030;
pub const kPOSIXErrorEMLINK: c_int = 100031;
pub const kPOSIXErrorEPIPE: c_int = 100032;
pub const kPOSIXErrorEDOM: c_int = 100033;
pub const kPOSIXErrorERANGE: c_int = 100034;
pub const kPOSIXErrorEAGAIN: c_int = 100035;
pub const kPOSIXErrorEINPROGRESS: c_int = 100036;
pub const kPOSIXErrorEALREADY: c_int = 100037;
pub const kPOSIXErrorENOTSOCK: c_int = 100038;
pub const kPOSIXErrorEDESTADDRREQ: c_int = 100039;
pub const kPOSIXErrorEMSGSIZE: c_int = 100040;
pub const kPOSIXErrorEPROTOTYPE: c_int = 100041;
pub const kPOSIXErrorENOPROTOOPT: c_int = 100042;
pub const kPOSIXErrorEPROTONOSUPPORT: c_int = 100043;
pub const kPOSIXErrorESOCKTNOSUPPORT: c_int = 100044;
pub const kPOSIXErrorENOTSUP: c_int = 100045;
pub const kPOSIXErrorEPFNOSUPPORT: c_int = 100046;
pub const kPOSIXErrorEAFNOSUPPORT: c_int = 100047;
pub const kPOSIXErrorEADDRINUSE: c_int = 100048;
pub const kPOSIXErrorEADDRNOTAVAIL: c_int = 100049;
pub const kPOSIXErrorENETDOWN: c_int = 100050;
pub const kPOSIXErrorENETUNREACH: c_int = 100051;
pub const kPOSIXErrorENETRESET: c_int = 100052;
pub const kPOSIXErrorECONNABORTED: c_int = 100053;
pub const kPOSIXErrorECONNRESET: c_int = 100054;
pub const kPOSIXErrorENOBUFS: c_int = 100055;
pub const kPOSIXErrorEISCONN: c_int = 100056;
pub const kPOSIXErrorENOTCONN: c_int = 100057;
pub const kPOSIXErrorESHUTDOWN: c_int = 100058;
pub const kPOSIXErrorETOOMANYREFS: c_int = 100059;
pub const kPOSIXErrorETIMEDOUT: c_int = 100060;
pub const kPOSIXErrorECONNREFUSED: c_int = 100061;
pub const kPOSIXErrorELOOP: c_int = 100062;
pub const kPOSIXErrorENAMETOOLONG: c_int = 100063;
pub const kPOSIXErrorEHOSTDOWN: c_int = 100064;
pub const kPOSIXErrorEHOSTUNREACH: c_int = 100065;
pub const kPOSIXErrorENOTEMPTY: c_int = 100066;
pub const kPOSIXErrorEPROCLIM: c_int = 100067;
pub const kPOSIXErrorEUSERS: c_int = 100068;
pub const kPOSIXErrorEDQUOT: c_int = 100069;
pub const kPOSIXErrorESTALE: c_int = 100070;
pub const kPOSIXErrorEREMOTE: c_int = 100071;
pub const kPOSIXErrorEBADRPC: c_int = 100072;
pub const kPOSIXErrorERPCMISMATCH: c_int = 100073;
pub const kPOSIXErrorEPROGUNAVAIL: c_int = 100074;
pub const kPOSIXErrorEPROGMISMATCH: c_int = 100075;
pub const kPOSIXErrorEPROCUNAVAIL: c_int = 100076;
pub const kPOSIXErrorENOLCK: c_int = 100077;
pub const kPOSIXErrorENOSYS: c_int = 100078;
pub const kPOSIXErrorEFTYPE: c_int = 100079;
pub const kPOSIXErrorEAUTH: c_int = 100080;
pub const kPOSIXErrorENEEDAUTH: c_int = 100081;
pub const kPOSIXErrorEPWROFF: c_int = 100082;
pub const kPOSIXErrorEDEVERR: c_int = 100083;
pub const kPOSIXErrorEOVERFLOW: c_int = 100084;
pub const kPOSIXErrorEBADEXEC: c_int = 100085;
pub const kPOSIXErrorEBADARCH: c_int = 100086;
pub const kPOSIXErrorESHLIBVERS: c_int = 100087;
pub const kPOSIXErrorEBADMACHO: c_int = 100088;
pub const kPOSIXErrorECANCELED: c_int = 100089;
pub const kPOSIXErrorEIDRM: c_int = 100090;
pub const kPOSIXErrorENOMSG: c_int = 100091;
pub const kPOSIXErrorEILSEQ: c_int = 100092;
pub const kPOSIXErrorENOATTR: c_int = 100093;
pub const kPOSIXErrorEBADMSG: c_int = 100094;
pub const kPOSIXErrorEMULTIHOP: c_int = 100095;
pub const kPOSIXErrorENODATA: c_int = 100096;
pub const kPOSIXErrorENOLINK: c_int = 100097;
pub const kPOSIXErrorENOSR: c_int = 100098;
pub const kPOSIXErrorENOSTR: c_int = 100099;
pub const kPOSIXErrorEPROTO: c_int = 100100;
pub const kPOSIXErrorETIME: c_int = 100101;
pub const kPOSIXErrorEOPNOTSUPP: c_int = 100102;
const enum_unnamed_282 = c_uint;
pub extern fn SysError(errorCode: c_short) void;
pub const kUTCDefaultOptions: c_int = 0;
const enum_unnamed_283 = c_uint;
pub const struct_UTCDateTime = extern struct {
    highSeconds: UInt16,
    lowSeconds: UInt32,
    fraction: UInt16,
};
pub const UTCDateTime = struct_UTCDateTime;
pub const UTCDateTimePtr = [*c]UTCDateTime;
pub const UTCDateTimeHandle = [*c]UTCDateTimePtr;
pub const struct_LocalDateTime = extern struct {
    highSeconds: UInt16,
    lowSeconds: UInt32,
    fraction: UInt16,
};
pub const LocalDateTime = struct_LocalDateTime;
pub const LocalDateTimePtr = [*c]LocalDateTime;
pub const LocalDateTimeHandle = [*c]LocalDateTimePtr;
pub const kTextFlushDefault: c_int = 0;
pub const kTextCenter: c_int = 1;
pub const kTextFlushRight: c_int = -1;
pub const kTextFlushLeft: c_int = -2;
const enum_unnamed_284 = c_int;
pub const TextEncodingBase = UInt32;
pub const kTextEncodingMacRoman: c_int = 0;
pub const kTextEncodingMacJapanese: c_int = 1;
pub const kTextEncodingMacChineseTrad: c_int = 2;
pub const kTextEncodingMacKorean: c_int = 3;
pub const kTextEncodingMacArabic: c_int = 4;
pub const kTextEncodingMacHebrew: c_int = 5;
pub const kTextEncodingMacGreek: c_int = 6;
pub const kTextEncodingMacCyrillic: c_int = 7;
pub const kTextEncodingMacDevanagari: c_int = 9;
pub const kTextEncodingMacGurmukhi: c_int = 10;
pub const kTextEncodingMacGujarati: c_int = 11;
pub const kTextEncodingMacOriya: c_int = 12;
pub const kTextEncodingMacBengali: c_int = 13;
pub const kTextEncodingMacTamil: c_int = 14;
pub const kTextEncodingMacTelugu: c_int = 15;
pub const kTextEncodingMacKannada: c_int = 16;
pub const kTextEncodingMacMalayalam: c_int = 17;
pub const kTextEncodingMacSinhalese: c_int = 18;
pub const kTextEncodingMacBurmese: c_int = 19;
pub const kTextEncodingMacKhmer: c_int = 20;
pub const kTextEncodingMacThai: c_int = 21;
pub const kTextEncodingMacLaotian: c_int = 22;
pub const kTextEncodingMacGeorgian: c_int = 23;
pub const kTextEncodingMacArmenian: c_int = 24;
pub const kTextEncodingMacChineseSimp: c_int = 25;
pub const kTextEncodingMacTibetan: c_int = 26;
pub const kTextEncodingMacMongolian: c_int = 27;
pub const kTextEncodingMacEthiopic: c_int = 28;
pub const kTextEncodingMacCentralEurRoman: c_int = 29;
pub const kTextEncodingMacVietnamese: c_int = 30;
pub const kTextEncodingMacExtArabic: c_int = 31;
pub const kTextEncodingMacSymbol: c_int = 33;
pub const kTextEncodingMacDingbats: c_int = 34;
pub const kTextEncodingMacTurkish: c_int = 35;
pub const kTextEncodingMacCroatian: c_int = 36;
pub const kTextEncodingMacIcelandic: c_int = 37;
pub const kTextEncodingMacRomanian: c_int = 38;
pub const kTextEncodingMacCeltic: c_int = 39;
pub const kTextEncodingMacGaelic: c_int = 40;
pub const kTextEncodingMacKeyboardGlyphs: c_int = 41;
const enum_unnamed_285 = c_uint;
pub const kTextEncodingMacTradChinese: c_int = 2;
pub const kTextEncodingMacRSymbol: c_int = 8;
pub const kTextEncodingMacSimpChinese: c_int = 25;
pub const kTextEncodingMacGeez: c_int = 28;
pub const kTextEncodingMacEastEurRoman: c_int = 29;
pub const kTextEncodingMacUninterp: c_int = 32;
const enum_unnamed_286 = c_uint;
pub const kTextEncodingMacUnicode: c_int = 126;
const enum_unnamed_287 = c_uint;
pub const kTextEncodingMacFarsi: c_int = 140;
pub const kTextEncodingMacUkrainian: c_int = 152;
pub const kTextEncodingMacInuit: c_int = 236;
pub const kTextEncodingMacVT100: c_int = 252;
const enum_unnamed_288 = c_uint;
pub const kTextEncodingMacHFS: c_int = 255;
const enum_unnamed_289 = c_uint;
pub const kTextEncodingUnicodeDefault: c_int = 256;
pub const kTextEncodingUnicodeV1_1: c_int = 257;
pub const kTextEncodingISO10646_1993: c_int = 257;
pub const kTextEncodingUnicodeV2_0: c_int = 259;
pub const kTextEncodingUnicodeV2_1: c_int = 259;
pub const kTextEncodingUnicodeV3_0: c_int = 260;
pub const kTextEncodingUnicodeV3_1: c_int = 261;
pub const kTextEncodingUnicodeV3_2: c_int = 262;
pub const kTextEncodingUnicodeV4_0: c_int = 264;
pub const kTextEncodingUnicodeV5_0: c_int = 266;
pub const kTextEncodingUnicodeV5_1: c_int = 267;
pub const kTextEncodingUnicodeV6_0: c_int = 269;
pub const kTextEncodingUnicodeV6_1: c_int = 270;
pub const kTextEncodingUnicodeV6_3: c_int = 272;
pub const kTextEncodingUnicodeV7_0: c_int = 273;
pub const kTextEncodingUnicodeV8_0: c_int = 274;
pub const kTextEncodingUnicodeV9_0: c_int = 275;
pub const kTextEncodingUnicodeV10_0: c_int = 276;
pub const kTextEncodingUnicodeV11_0: c_int = 277;
pub const kTextEncodingUnicodeV12_1: c_int = 278;
pub const kTextEncodingUnicodeV13_0: c_int = 279;
const enum_unnamed_290 = c_uint;
pub const kTextEncodingISOLatin1: c_int = 513;
pub const kTextEncodingISOLatin2: c_int = 514;
pub const kTextEncodingISOLatin3: c_int = 515;
pub const kTextEncodingISOLatin4: c_int = 516;
pub const kTextEncodingISOLatinCyrillic: c_int = 517;
pub const kTextEncodingISOLatinArabic: c_int = 518;
pub const kTextEncodingISOLatinGreek: c_int = 519;
pub const kTextEncodingISOLatinHebrew: c_int = 520;
pub const kTextEncodingISOLatin5: c_int = 521;
pub const kTextEncodingISOLatin6: c_int = 522;
pub const kTextEncodingISOLatin7: c_int = 525;
pub const kTextEncodingISOLatin8: c_int = 526;
pub const kTextEncodingISOLatin9: c_int = 527;
pub const kTextEncodingISOLatin10: c_int = 528;
const enum_unnamed_291 = c_uint;
pub const kTextEncodingDOSLatinUS: c_int = 1024;
pub const kTextEncodingDOSGreek: c_int = 1029;
pub const kTextEncodingDOSBalticRim: c_int = 1030;
pub const kTextEncodingDOSLatin1: c_int = 1040;
pub const kTextEncodingDOSGreek1: c_int = 1041;
pub const kTextEncodingDOSLatin2: c_int = 1042;
pub const kTextEncodingDOSCyrillic: c_int = 1043;
pub const kTextEncodingDOSTurkish: c_int = 1044;
pub const kTextEncodingDOSPortuguese: c_int = 1045;
pub const kTextEncodingDOSIcelandic: c_int = 1046;
pub const kTextEncodingDOSHebrew: c_int = 1047;
pub const kTextEncodingDOSCanadianFrench: c_int = 1048;
pub const kTextEncodingDOSArabic: c_int = 1049;
pub const kTextEncodingDOSNordic: c_int = 1050;
pub const kTextEncodingDOSRussian: c_int = 1051;
pub const kTextEncodingDOSGreek2: c_int = 1052;
pub const kTextEncodingDOSThai: c_int = 1053;
pub const kTextEncodingDOSJapanese: c_int = 1056;
pub const kTextEncodingDOSChineseSimplif: c_int = 1057;
pub const kTextEncodingDOSKorean: c_int = 1058;
pub const kTextEncodingDOSChineseTrad: c_int = 1059;
pub const kTextEncodingWindowsLatin1: c_int = 1280;
pub const kTextEncodingWindowsANSI: c_int = 1280;
pub const kTextEncodingWindowsLatin2: c_int = 1281;
pub const kTextEncodingWindowsCyrillic: c_int = 1282;
pub const kTextEncodingWindowsGreek: c_int = 1283;
pub const kTextEncodingWindowsLatin5: c_int = 1284;
pub const kTextEncodingWindowsHebrew: c_int = 1285;
pub const kTextEncodingWindowsArabic: c_int = 1286;
pub const kTextEncodingWindowsBalticRim: c_int = 1287;
pub const kTextEncodingWindowsVietnamese: c_int = 1288;
pub const kTextEncodingWindowsKoreanJohab: c_int = 1296;
const enum_unnamed_292 = c_uint;
pub const kTextEncodingUS_ASCII: c_int = 1536;
pub const kTextEncodingANSEL: c_int = 1537;
pub const kTextEncodingJIS_X0201_76: c_int = 1568;
pub const kTextEncodingJIS_X0208_83: c_int = 1569;
pub const kTextEncodingJIS_X0208_90: c_int = 1570;
pub const kTextEncodingJIS_X0212_90: c_int = 1571;
pub const kTextEncodingJIS_C6226_78: c_int = 1572;
pub const kTextEncodingShiftJIS_X0213: c_int = 1576;
pub const kTextEncodingJIS_X0213_MenKuTen: c_int = 1577;
pub const kTextEncodingGB_2312_80: c_int = 1584;
pub const kTextEncodingGBK_95: c_int = 1585;
pub const kTextEncodingGB_18030_2000: c_int = 1586;
pub const kTextEncodingGB_18030_2005: c_int = 1586;
pub const kTextEncodingKSC_5601_87: c_int = 1600;
pub const kTextEncodingKSC_5601_92_Johab: c_int = 1601;
pub const kTextEncodingCNS_11643_92_P1: c_int = 1617;
pub const kTextEncodingCNS_11643_92_P2: c_int = 1618;
pub const kTextEncodingCNS_11643_92_P3: c_int = 1619;
const enum_unnamed_293 = c_uint;
pub const kTextEncodingISO_2022_JP: c_int = 2080;
pub const kTextEncodingISO_2022_JP_2: c_int = 2081;
pub const kTextEncodingISO_2022_JP_1: c_int = 2082;
pub const kTextEncodingISO_2022_JP_3: c_int = 2083;
pub const kTextEncodingISO_2022_CN: c_int = 2096;
pub const kTextEncodingISO_2022_CN_EXT: c_int = 2097;
pub const kTextEncodingISO_2022_KR: c_int = 2112;
const enum_unnamed_294 = c_uint;
pub const kTextEncodingEUC_JP: c_int = 2336;
pub const kTextEncodingEUC_CN: c_int = 2352;
pub const kTextEncodingEUC_TW: c_int = 2353;
pub const kTextEncodingEUC_KR: c_int = 2368;
const enum_unnamed_295 = c_uint;
pub const kTextEncodingShiftJIS: c_int = 2561;
pub const kTextEncodingKOI8_R: c_int = 2562;
pub const kTextEncodingBig5: c_int = 2563;
pub const kTextEncodingMacRomanLatin1: c_int = 2564;
pub const kTextEncodingHZ_GB_2312: c_int = 2565;
pub const kTextEncodingBig5_HKSCS_1999: c_int = 2566;
pub const kTextEncodingVISCII: c_int = 2567;
pub const kTextEncodingKOI8_U: c_int = 2568;
pub const kTextEncodingBig5_E: c_int = 2569;
const enum_unnamed_296 = c_uint;
pub const kTextEncodingNextStepLatin: c_int = 2817;
pub const kTextEncodingNextStepJapanese: c_int = 2818;
const enum_unnamed_297 = c_uint;
pub const kTextEncodingEBCDIC_LatinCore: c_int = 3073;
pub const kTextEncodingEBCDIC_CP037: c_int = 3074;
const enum_unnamed_298 = c_uint;
pub const kTextEncodingMultiRun: c_int = 4095;
pub const kTextEncodingUnknown: c_int = 65535;
const enum_unnamed_299 = c_uint;
pub const kTextEncodingEBCDIC_US: c_int = 3073;
const enum_unnamed_300 = c_uint;
pub const TextEncodingVariant = UInt32;
pub const kTextEncodingDefaultVariant: c_int = 0;
const enum_unnamed_301 = c_uint;
pub const kMacRomanDefaultVariant: c_int = 0;
pub const kMacRomanCurrencySignVariant: c_int = 1;
pub const kMacRomanEuroSignVariant: c_int = 2;
const enum_unnamed_302 = c_uint;
pub const kMacCyrillicDefaultVariant: c_int = 0;
pub const kMacCyrillicCurrSignStdVariant: c_int = 1;
pub const kMacCyrillicCurrSignUkrVariant: c_int = 2;
pub const kMacCyrillicEuroSignVariant: c_int = 3;
const enum_unnamed_303 = c_uint;
pub const kMacIcelandicStdDefaultVariant: c_int = 0;
pub const kMacIcelandicTTDefaultVariant: c_int = 1;
pub const kMacIcelandicStdCurrSignVariant: c_int = 2;
pub const kMacIcelandicTTCurrSignVariant: c_int = 3;
pub const kMacIcelandicStdEuroSignVariant: c_int = 4;
pub const kMacIcelandicTTEuroSignVariant: c_int = 5;
const enum_unnamed_304 = c_uint;
pub const kMacCroatianDefaultVariant: c_int = 0;
pub const kMacCroatianCurrencySignVariant: c_int = 1;
pub const kMacCroatianEuroSignVariant: c_int = 2;
const enum_unnamed_305 = c_uint;
pub const kMacRomanianDefaultVariant: c_int = 0;
pub const kMacRomanianCurrencySignVariant: c_int = 1;
pub const kMacRomanianEuroSignVariant: c_int = 2;
const enum_unnamed_306 = c_uint;
pub const kMacJapaneseStandardVariant: c_int = 0;
pub const kMacJapaneseStdNoVerticalsVariant: c_int = 1;
pub const kMacJapaneseBasicVariant: c_int = 2;
pub const kMacJapanesePostScriptScrnVariant: c_int = 3;
pub const kMacJapanesePostScriptPrintVariant: c_int = 4;
pub const kMacJapaneseVertAtKuPlusTenVariant: c_int = 5;
const enum_unnamed_307 = c_uint;
pub const kMacArabicStandardVariant: c_int = 0;
pub const kMacArabicTrueTypeVariant: c_int = 1;
pub const kMacArabicThuluthVariant: c_int = 2;
pub const kMacArabicAlBayanVariant: c_int = 3;
const enum_unnamed_308 = c_uint;
pub const kMacFarsiStandardVariant: c_int = 0;
pub const kMacFarsiTrueTypeVariant: c_int = 1;
const enum_unnamed_309 = c_uint;
pub const kMacHebrewStandardVariant: c_int = 0;
pub const kMacHebrewFigureSpaceVariant: c_int = 1;
const enum_unnamed_310 = c_uint;
pub const kMacGreekDefaultVariant: c_int = 0;
pub const kMacGreekNoEuroSignVariant: c_int = 1;
pub const kMacGreekEuroSignVariant: c_int = 2;
const enum_unnamed_311 = c_uint;
pub const kMacVT100DefaultVariant: c_int = 0;
pub const kMacVT100CurrencySignVariant: c_int = 1;
pub const kMacVT100EuroSignVariant: c_int = 2;
const enum_unnamed_312 = c_uint;
pub const kUnicodeNoSubset: c_int = 0;
pub const kUnicodeNormalizationFormD: c_int = 5;
pub const kUnicodeNormalizationFormC: c_int = 3;
pub const kUnicodeHFSPlusDecompVariant: c_int = 8;
pub const kUnicodeHFSPlusCompVariant: c_int = 9;
const enum_unnamed_313 = c_uint;
pub const kISOLatin1StandardVariant: c_int = 0;
pub const kISOLatin1MusicCDVariant: c_int = 1;
const enum_unnamed_314 = c_uint;
pub const kISOLatinArabicImplicitOrderVariant: c_int = 0;
pub const kISOLatinArabicVisualOrderVariant: c_int = 1;
pub const kISOLatinArabicExplicitOrderVariant: c_int = 2;
const enum_unnamed_315 = c_uint;
pub const kISOLatinHebrewImplicitOrderVariant: c_int = 0;
pub const kISOLatinHebrewVisualOrderVariant: c_int = 1;
pub const kISOLatinHebrewExplicitOrderVariant: c_int = 2;
const enum_unnamed_316 = c_uint;
pub const kWindowsLatin1StandardVariant: c_int = 0;
pub const kWindowsLatin1PalmVariant: c_int = 1;
const enum_unnamed_317 = c_uint;
pub const kDOSJapaneseStandardVariant: c_int = 0;
pub const kDOSJapanesePalmVariant: c_int = 1;
const enum_unnamed_318 = c_uint;
pub const kEUC_CN_BasicVariant: c_int = 0;
pub const kEUC_CN_DOSVariant: c_int = 1;
const enum_unnamed_319 = c_uint;
pub const kEUC_KR_BasicVariant: c_int = 0;
pub const kEUC_KR_DOSVariant: c_int = 1;
const enum_unnamed_320 = c_uint;
pub const kShiftJIS_BasicVariant: c_int = 0;
pub const kShiftJIS_DOSVariant: c_int = 1;
pub const kShiftJIS_MusicCDVariant: c_int = 2;
const enum_unnamed_321 = c_uint;
pub const kBig5_BasicVariant: c_int = 0;
pub const kBig5_StandardVariant: c_int = 1;
pub const kBig5_ETenVariant: c_int = 2;
pub const kBig5_DOSVariant: c_int = 3;
const enum_unnamed_322 = c_uint;
pub const kMacRomanLatin1DefaultVariant: c_int = 0;
pub const kMacRomanLatin1StandardVariant: c_int = 2;
pub const kMacRomanLatin1TurkishVariant: c_int = 6;
pub const kMacRomanLatin1CroatianVariant: c_int = 8;
pub const kMacRomanLatin1IcelandicVariant: c_int = 11;
pub const kMacRomanLatin1RomanianVariant: c_int = 14;
const enum_unnamed_323 = c_uint;
pub const kUnicodeNoCompatibilityVariant: c_int = 1;
pub const kUnicodeNoCorporateVariant: c_int = 4;
const enum_unnamed_324 = c_uint;
pub const kMacRomanStandardVariant: c_int = 0;
pub const kMacIcelandicStandardVariant: c_int = 0;
pub const kMacIcelandicTrueTypeVariant: c_int = 1;
pub const kJapaneseStandardVariant: c_int = 0;
pub const kJapaneseStdNoVerticalsVariant: c_int = 1;
pub const kJapaneseBasicVariant: c_int = 2;
pub const kJapanesePostScriptScrnVariant: c_int = 3;
pub const kJapanesePostScriptPrintVariant: c_int = 4;
pub const kJapaneseVertAtKuPlusTenVariant: c_int = 5;
pub const kTextEncodingShiftJIS_X0213_00: c_int = 1576;
pub const kHebrewStandardVariant: c_int = 0;
pub const kHebrewFigureSpaceVariant: c_int = 1;
pub const kUnicodeCanonicalDecompVariant: c_int = 2;
pub const kUnicodeMaxDecomposedVariant: c_int = 2;
pub const kUnicodeCanonicalCompVariant: c_int = 3;
pub const kUnicodeNoComposedVariant: c_int = 3;
const enum_unnamed_325 = c_uint;
pub const TextEncodingFormat = UInt32;
pub const kTextEncodingDefaultFormat: c_int = 0;
pub const kUnicodeUTF16Format: c_int = 0;
pub const kUnicodeUTF7Format: c_int = 1;
pub const kUnicodeUTF8Format: c_int = 2;
pub const kUnicodeUTF32Format: c_int = 3;
pub const kUnicodeUTF16BEFormat: c_int = 4;
pub const kUnicodeUTF16LEFormat: c_int = 5;
pub const kUnicodeUTF32BEFormat: c_int = 6;
pub const kUnicodeUTF32LEFormat: c_int = 7;
pub const kUnicodeSCSUFormat: c_int = 8;
pub const kUnicode16BitFormat: c_int = 0;
pub const kUnicode32BitFormat: c_int = 3;
const enum_unnamed_326 = c_uint;
pub const TextEncoding = UInt32;
pub const TextEncodingNameSelector = UInt32;
pub const kTextEncodingFullName: c_int = 0;
pub const kTextEncodingBaseName: c_int = 1;
pub const kTextEncodingVariantName: c_int = 2;
pub const kTextEncodingFormatName: c_int = 3;
const enum_unnamed_327 = c_uint;
pub const struct_TextEncodingRun = extern struct {
    offset: ByteOffset,
    textEncoding: TextEncoding,
};
pub const TextEncodingRun = struct_TextEncodingRun;
pub const TextEncodingRunPtr = [*c]TextEncodingRun;
pub const ConstTextEncodingRunPtr = [*c]const TextEncodingRun;
pub const struct_ScriptCodeRun = extern struct {
    offset: ByteOffset,
    script: ScriptCode,
};
pub const ScriptCodeRun = struct_ScriptCodeRun;
pub const ScriptCodeRunPtr = [*c]ScriptCodeRun;
pub const ConstScriptCodeRunPtr = [*c]const ScriptCodeRun;
pub const TextPtr = [*c]UInt8;
pub const ConstTextPtr = [*c]const UInt8;
pub const UniCharArrayPtr = [*c]UniChar;
pub const ConstUniCharArrayPtr = [*c]const UniChar;
pub const UniCharArrayHandle = [*c]UniCharArrayPtr;
pub const UniCharArrayOffset = c_ulong;
pub const kTextScriptDontCare: c_int = -128;
pub const kTextLanguageDontCare: c_int = -128;
pub const kTextRegionDontCare: c_int = -128;
const enum_unnamed_328 = c_int;
pub const struct_TECInfo = extern struct {
    format: UInt16,
    tecVersion: UInt16,
    tecTextConverterFeatures: UInt32,
    tecUnicodeConverterFeatures: UInt32,
    tecTextCommonFeatures: UInt32,
    tecTextEncodingsFolderName: Str31,
    tecExtensionFileName: Str31,
    tecLowestTEFileVersion: UInt16,
    tecHighestTEFileVersion: UInt16,
};
pub const TECInfo = struct_TECInfo;
pub const TECInfoPtr = [*c]TECInfo;
pub const TECInfoHandle = [*c]TECInfoPtr;
pub const kTECInfoCurrentFormat: c_int = 2;
const enum_unnamed_329 = c_uint;
pub const kTECKeepInfoFixBit: c_int = 0;
pub const kTECFallbackTextLengthFixBit: c_int = 1;
pub const kTECTextRunBitClearFixBit: c_int = 2;
pub const kTECTextToUnicodeScanFixBit: c_int = 3;
pub const kTECAddForceASCIIChangesBit: c_int = 4;
pub const kTECPreferredEncodingFixBit: c_int = 5;
pub const kTECAddTextRunHeuristicsBit: c_int = 6;
pub const kTECAddFallbackInterruptBit: c_int = 7;
const enum_unnamed_330 = c_uint;
pub const kTECKeepInfoFixMask: c_int = 1;
pub const kTECFallbackTextLengthFixMask: c_int = 2;
pub const kTECTextRunBitClearFixMask: c_int = 4;
pub const kTECTextToUnicodeScanFixMask: c_int = 8;
pub const kTECAddForceASCIIChangesMask: c_int = 16;
pub const kTECPreferredEncodingFixMask: c_int = 32;
pub const kTECAddTextRunHeuristicsMask: c_int = 64;
pub const kTECAddFallbackInterruptMask: c_int = 128;
const enum_unnamed_331 = c_uint;
pub const kUnicodeByteOrderMark: c_int = 65279;
pub const kUnicodeObjectReplacement: c_int = 65532;
pub const kUnicodeReplacementChar: c_int = 65533;
pub const kUnicodeSwappedByteOrderMark: c_int = 65534;
pub const kUnicodeNotAChar: c_int = 65535;
const enum_unnamed_332 = c_uint;
pub const UCCharPropertyType = SInt32;
pub const kUCCharPropTypeGenlCategory: c_int = 1;
pub const kUCCharPropTypeCombiningClass: c_int = 2;
pub const kUCCharPropTypeBidiCategory: c_int = 3;
pub const kUCCharPropTypeDecimalDigitValue: c_int = 4;
const enum_unnamed_333 = c_uint;
pub const UCCharPropertyValue = UInt32;
pub const kUCGenlCatOtherNotAssigned: c_int = 0;
pub const kUCGenlCatOtherControl: c_int = 1;
pub const kUCGenlCatOtherFormat: c_int = 2;
pub const kUCGenlCatOtherSurrogate: c_int = 3;
pub const kUCGenlCatOtherPrivateUse: c_int = 4;
pub const kUCGenlCatMarkNonSpacing: c_int = 5;
pub const kUCGenlCatMarkSpacingCombining: c_int = 6;
pub const kUCGenlCatMarkEnclosing: c_int = 7;
pub const kUCGenlCatNumberDecimalDigit: c_int = 8;
pub const kUCGenlCatNumberLetter: c_int = 9;
pub const kUCGenlCatNumberOther: c_int = 10;
pub const kUCGenlCatSeparatorSpace: c_int = 11;
pub const kUCGenlCatSeparatorLine: c_int = 12;
pub const kUCGenlCatSeparatorParagraph: c_int = 13;
pub const kUCGenlCatLetterUppercase: c_int = 14;
pub const kUCGenlCatLetterLowercase: c_int = 15;
pub const kUCGenlCatLetterTitlecase: c_int = 16;
pub const kUCGenlCatLetterModifier: c_int = 17;
pub const kUCGenlCatLetterOther: c_int = 18;
pub const kUCGenlCatPunctConnector: c_int = 20;
pub const kUCGenlCatPunctDash: c_int = 21;
pub const kUCGenlCatPunctOpen: c_int = 22;
pub const kUCGenlCatPunctClose: c_int = 23;
pub const kUCGenlCatPunctInitialQuote: c_int = 24;
pub const kUCGenlCatPunctFinalQuote: c_int = 25;
pub const kUCGenlCatPunctOther: c_int = 26;
pub const kUCGenlCatSymbolMath: c_int = 28;
pub const kUCGenlCatSymbolCurrency: c_int = 29;
pub const kUCGenlCatSymbolModifier: c_int = 30;
pub const kUCGenlCatSymbolOther: c_int = 31;
const enum_unnamed_334 = c_uint;
pub const kUCBidiCatNotApplicable: c_int = 0;
pub const kUCBidiCatLeftRight: c_int = 1;
pub const kUCBidiCatRightLeft: c_int = 2;
pub const kUCBidiCatEuroNumber: c_int = 3;
pub const kUCBidiCatEuroNumberSeparator: c_int = 4;
pub const kUCBidiCatEuroNumberTerminator: c_int = 5;
pub const kUCBidiCatArabicNumber: c_int = 6;
pub const kUCBidiCatCommonNumberSeparator: c_int = 7;
pub const kUCBidiCatBlockSeparator: c_int = 8;
pub const kUCBidiCatSegmentSeparator: c_int = 9;
pub const kUCBidiCatWhitespace: c_int = 10;
pub const kUCBidiCatOtherNeutral: c_int = 11;
pub const kUCBidiCatRightLeftArabic: c_int = 12;
pub const kUCBidiCatLeftRightEmbedding: c_int = 13;
pub const kUCBidiCatRightLeftEmbedding: c_int = 14;
pub const kUCBidiCatLeftRightOverride: c_int = 15;
pub const kUCBidiCatRightLeftOverride: c_int = 16;
pub const kUCBidiCatPopDirectionalFormat: c_int = 17;
pub const kUCBidiCatNonSpacingMark: c_int = 18;
pub const kUCBidiCatBoundaryNeutral: c_int = 19;
pub const kUCBidiCatLeftRightIsolate: c_int = 20;
pub const kUCBidiCatRightLeftIsolate: c_int = 21;
pub const kUCBidiCatFirstStrongIsolate: c_int = 22;
pub const kUCBidiCatPopDirectionalIsolate: c_int = 23;
const enum_unnamed_335 = c_uint;
pub extern fn CreateTextEncoding(encodingBase: TextEncodingBase, encodingVariant: TextEncodingVariant, encodingFormat: TextEncodingFormat) TextEncoding;
pub extern fn GetTextEncodingBase(encoding: TextEncoding) TextEncodingBase;
pub extern fn GetTextEncodingVariant(encoding: TextEncoding) TextEncodingVariant;
pub extern fn GetTextEncodingFormat(encoding: TextEncoding) TextEncodingFormat;
pub extern fn ResolveDefaultTextEncoding(encoding: TextEncoding) TextEncoding;
pub extern fn GetTextEncodingName(iEncoding: TextEncoding, iNamePartSelector: TextEncodingNameSelector, iPreferredRegion: RegionCode, iPreferredEncoding: TextEncoding, iOutputBufLen: ByteCount, oNameLength: [*c]ByteCount, oActualRegion: [*c]RegionCode, oActualEncoding: [*c]TextEncoding, oEncodingName: TextPtr) OSStatus;
pub extern fn TECGetInfo(tecInfo: [*c]TECInfoHandle) OSStatus;
pub extern fn UpgradeScriptInfoToTextEncoding(iTextScriptID: ScriptCode, iTextLanguageID: LangCode, iRegionID: RegionCode, iTextFontname: ConstStr255Param, oEncoding: [*c]TextEncoding) OSStatus;
pub extern fn RevertTextEncodingToScriptInfo(iEncoding: TextEncoding, oTextScriptID: [*c]ScriptCode, oTextLanguageID: [*c]LangCode, oTextFontname: [*c]u8) OSStatus;
pub extern fn GetTextEncodingFromScriptInfo(iTextScriptID: ScriptCode, iTextLanguageID: LangCode, iTextRegionID: RegionCode, oEncoding: [*c]TextEncoding) OSStatus;
pub extern fn GetScriptInfoFromTextEncoding(iEncoding: TextEncoding, oTextScriptID: [*c]ScriptCode, oTextLanguageID: [*c]LangCode) OSStatus;
pub extern fn NearestMacTextEncodings(generalEncoding: TextEncoding, bestMacEncoding: [*c]TextEncoding, alternateMacEncoding: [*c]TextEncoding) OSStatus;
pub extern fn UCGetCharProperty(charPtr: [*c]const UniChar, textLength: UniCharCount, propType: UCCharPropertyType, propValue: [*c]UCCharPropertyValue) OSStatus;
pub const kUCHighSurrogateRangeStart: c_int = 55296;
pub const kUCHighSurrogateRangeEnd: c_int = 56319;
pub const kUCLowSurrogateRangeStart: c_int = 56320;
pub const kUCLowSurrogateRangeEnd: c_int = 57343;
const enum_unnamed_336 = c_uint;
pub fn UCIsSurrogateHighCharacter(arg_character: UniChar) callconv(.C) Boolean {
    var character = arg_character;
    return @bitCast(Boolean, @truncate(i8, @boolToInt((@bitCast(c_int, @as(c_uint, character)) & @as(c_int, 64512)) == kUCHighSurrogateRangeStart)));
}
pub fn UCIsSurrogateLowCharacter(arg_character: UniChar) callconv(.C) Boolean {
    var character = arg_character;
    return @bitCast(Boolean, @truncate(i8, @boolToInt((@bitCast(c_int, @as(c_uint, character)) & @as(c_int, 64512)) == kUCLowSurrogateRangeStart)));
}
pub fn UCGetUnicodeScalarValueForSurrogatePair(arg_surrogateHigh: UniChar, arg_surrogateLow: UniChar) callconv(.C) UnicodeScalarValue {
    var surrogateHigh = arg_surrogateHigh;
    var surrogateLow = arg_surrogateLow;
    return ((@bitCast(UnicodeScalarValue, @bitCast(c_int, @as(c_uint, surrogateHigh)) - kUCHighSurrogateRangeStart) << @intCast(@import("std").math.Log2Int(UnicodeScalarValue), 10)) +% @bitCast(c_uint, @bitCast(c_int, @as(c_uint, surrogateLow)) - kUCLowSurrogateRangeStart)) +% @bitCast(c_uint, @as(c_int, 65536));
}
pub const kRoutineDescriptorVersion: c_int = 7;
const enum_unnamed_337 = c_uint;
pub const _MixedModeMagic: c_int = 43774;
const enum_unnamed_338 = c_uint;
pub const kCurrentMixedModeStateRecord: c_int = 1;
const enum_unnamed_339 = c_uint;
pub const CallingConventionType = c_ushort;
pub const kPascalStackBased: c_int = 0;
pub const kCStackBased: c_int = 1;
pub const kRegisterBased: c_int = 2;
pub const kD0DispatchedPascalStackBased: c_int = 8;
pub const kD1DispatchedPascalStackBased: c_int = 12;
pub const kD0DispatchedCStackBased: c_int = 9;
pub const kStackDispatchedPascalStackBased: c_int = 14;
pub const kThinkCStackBased: c_int = 5;
const enum_unnamed_340 = c_uint;
pub const ISAType = SInt8;
pub const kM68kISA: c_int = 0;
pub const kPowerPCISA: c_int = 1;
const enum_unnamed_341 = c_uint;
pub const kX86ISA: c_int = 2;
const enum_unnamed_342 = c_uint;
pub const RTAType = SInt8;
pub const kOld68kRTA: c_int = 0;
pub const kPowerPCRTA: c_int = 0;
pub const kCFM68kRTA: c_int = 16;
const enum_unnamed_343 = c_uint;
pub const kX86RTA: c_int = 32;
const enum_unnamed_344 = c_uint;
pub const kRegisterD0: c_int = 0;
pub const kRegisterD1: c_int = 1;
pub const kRegisterD2: c_int = 2;
pub const kRegisterD3: c_int = 3;
pub const kRegisterD4: c_int = 8;
pub const kRegisterD5: c_int = 9;
pub const kRegisterD6: c_int = 10;
pub const kRegisterD7: c_int = 11;
pub const kRegisterA0: c_int = 4;
pub const kRegisterA1: c_int = 5;
pub const kRegisterA2: c_int = 6;
pub const kRegisterA3: c_int = 7;
pub const kRegisterA4: c_int = 12;
pub const kRegisterA5: c_int = 13;
pub const kRegisterA6: c_int = 14;
pub const kCCRegisterCBit: c_int = 16;
pub const kCCRegisterVBit: c_int = 17;
pub const kCCRegisterZBit: c_int = 18;
pub const kCCRegisterNBit: c_int = 19;
pub const kCCRegisterXBit: c_int = 20;
const enum_unnamed_345 = c_uint;
pub const registerSelectorType = c_ushort;
pub const kNoByteCode: c_int = 0;
pub const kOneByteCode: c_int = 1;
pub const kTwoByteCode: c_int = 2;
pub const kFourByteCode: c_int = 3;
const enum_unnamed_346 = c_uint;
pub const ProcInfoType = c_ulong;
pub const RoutineFlagsType = c_ushort;
pub const kProcDescriptorIsAbsolute: c_int = 0;
pub const kProcDescriptorIsRelative: c_int = 1;
const enum_unnamed_347 = c_uint;
pub const kFragmentIsPrepared: c_int = 0;
pub const kFragmentNeedsPreparing: c_int = 2;
const enum_unnamed_348 = c_uint;
pub const kUseCurrentISA: c_int = 0;
pub const kUseNativeISA: c_int = 4;
const enum_unnamed_349 = c_uint;
pub const kPassSelector: c_int = 0;
pub const kDontPassSelector: c_int = 8;
const enum_unnamed_350 = c_uint;
pub const kRoutineIsNotDispatchedDefaultRoutine: c_int = 0;
pub const kRoutineIsDispatchedDefaultRoutine: c_int = 16;
const enum_unnamed_351 = c_uint;
pub const kProcDescriptorIsProcPtr: c_int = 0;
pub const kProcDescriptorIsIndex: c_int = 32;
const enum_unnamed_352 = c_uint;
pub const struct_RoutineRecord = extern struct {
    procInfo: ProcInfoType,
    reserved1: SInt8,
    ISA: ISAType,
    routineFlags: RoutineFlagsType,
    procDescriptor: ProcPtr,
    reserved2: UInt32,
    selector: UInt32,
};
pub const RoutineRecord = struct_RoutineRecord;
pub const RoutineRecordPtr = [*c]RoutineRecord;
pub const RoutineRecordHandle = [*c]RoutineRecordPtr;
pub const RDFlagsType = UInt8;
pub const kSelectorsAreNotIndexable: c_int = 0;
pub const kSelectorsAreIndexable: c_int = 1;
const enum_unnamed_353 = c_uint;
pub const struct_RoutineDescriptor = extern struct {
    goMixedModeTrap: UInt16,
    version: SInt8,
    routineDescriptorFlags: RDFlagsType,
    reserved1: UInt32,
    reserved2: UInt8,
    selectorInfo: UInt8,
    routineCount: UInt16,
    routineRecords: [1]RoutineRecord,
};
pub const RoutineDescriptor = struct_RoutineDescriptor;
pub const RoutineDescriptorPtr = [*c]RoutineDescriptor;
pub const RoutineDescriptorHandle = [*c]RoutineDescriptorPtr;
pub const struct_MixedModeStateRecord = extern struct {
    state1: UInt32,
    state2: UInt32,
    state3: UInt32,
    state4: UInt32,
};
pub const MixedModeStateRecord = struct_MixedModeStateRecord;
pub const kCallingConventionWidth: c_int = 4;
pub const kCallingConventionPhase: c_int = 0;
pub const kCallingConventionMask: c_int = 15;
pub const kResultSizeWidth: c_int = 2;
pub const kResultSizePhase: c_int = 4;
pub const kResultSizeMask: c_int = 48;
pub const kStackParameterWidth: c_int = 2;
pub const kStackParameterPhase: c_int = 6;
pub const kStackParameterMask: c_int = -64;
pub const kRegisterResultLocationWidth: c_int = 5;
pub const kRegisterResultLocationPhase: c_int = 6;
pub const kRegisterParameterWidth: c_int = 5;
pub const kRegisterParameterPhase: c_int = 11;
pub const kRegisterParameterMask: c_int = 2147481600;
pub const kRegisterParameterSizePhase: c_int = 0;
pub const kRegisterParameterSizeWidth: c_int = 2;
pub const kRegisterParameterWhichPhase: c_int = 2;
pub const kRegisterParameterWhichWidth: c_int = 3;
pub const kDispatchedSelectorSizeWidth: c_int = 2;
pub const kDispatchedSelectorSizePhase: c_int = 6;
pub const kDispatchedParameterPhase: c_int = 8;
pub const kSpecialCaseSelectorWidth: c_int = 6;
pub const kSpecialCaseSelectorPhase: c_int = 4;
pub const kSpecialCaseSelectorMask: c_int = 1008;
const enum_unnamed_354 = c_int;
pub const kSpecialCase: c_int = 15;
const enum_unnamed_355 = c_uint;
pub const kSpecialCaseHighHook: c_int = 0;
pub const kSpecialCaseCaretHook: c_int = 0;
pub const kSpecialCaseEOLHook: c_int = 1;
pub const kSpecialCaseWidthHook: c_int = 2;
pub const kSpecialCaseTextWidthHook: c_int = 2;
pub const kSpecialCaseNWidthHook: c_int = 3;
pub const kSpecialCaseDrawHook: c_int = 4;
pub const kSpecialCaseHitTestHook: c_int = 5;
pub const kSpecialCaseTEFindWord: c_int = 6;
pub const kSpecialCaseProtocolHandler: c_int = 7;
pub const kSpecialCaseSocketListener: c_int = 8;
pub const kSpecialCaseTERecalc: c_int = 9;
pub const kSpecialCaseTEDoText: c_int = 10;
pub const kSpecialCaseGNEFilterProc: c_int = 11;
pub const kSpecialCaseMBarHook: c_int = 12;
const enum_unnamed_356 = c_uint;
pub const kCollectionDontWantTag: c_int = 0;
pub const kCollectionDontWantId: c_int = 0;
pub const kCollectionDontWantSize: c_int = 0;
pub const kCollectionDontWantAttributes: c_int = 0;
pub const kCollectionDontWantIndex: c_int = 0;
pub const kCollectionDontWantData: c_int = 0;
const enum_unnamed_357 = c_uint;
pub const kCollectionNoAttributes: c_int = 0;
pub const kCollectionAllAttributes: c_int = -1;
pub const kCollectionUserAttributes: c_int = 65535;
pub const kCollectionDefaultAttributes: c_int = 1073741824;
const enum_unnamed_358 = c_int;
pub const kCollectionUser0Bit: c_int = 0;
pub const kCollectionUser1Bit: c_int = 1;
pub const kCollectionUser2Bit: c_int = 2;
pub const kCollectionUser3Bit: c_int = 3;
pub const kCollectionUser4Bit: c_int = 4;
pub const kCollectionUser5Bit: c_int = 5;
pub const kCollectionUser6Bit: c_int = 6;
pub const kCollectionUser7Bit: c_int = 7;
pub const kCollectionUser8Bit: c_int = 8;
pub const kCollectionUser9Bit: c_int = 9;
pub const kCollectionUser10Bit: c_int = 10;
pub const kCollectionUser11Bit: c_int = 11;
pub const kCollectionUser12Bit: c_int = 12;
pub const kCollectionUser13Bit: c_int = 13;
pub const kCollectionUser14Bit: c_int = 14;
pub const kCollectionUser15Bit: c_int = 15;
pub const kCollectionReserved0Bit: c_int = 16;
pub const kCollectionReserved1Bit: c_int = 17;
pub const kCollectionReserved2Bit: c_int = 18;
pub const kCollectionReserved3Bit: c_int = 19;
pub const kCollectionReserved4Bit: c_int = 20;
pub const kCollectionReserved5Bit: c_int = 21;
pub const kCollectionReserved6Bit: c_int = 22;
pub const kCollectionReserved7Bit: c_int = 23;
pub const kCollectionReserved8Bit: c_int = 24;
pub const kCollectionReserved9Bit: c_int = 25;
pub const kCollectionReserved10Bit: c_int = 26;
pub const kCollectionReserved11Bit: c_int = 27;
pub const kCollectionReserved12Bit: c_int = 28;
pub const kCollectionReserved13Bit: c_int = 29;
pub const kCollectionPersistenceBit: c_int = 30;
pub const kCollectionLockBit: c_int = 31;
const enum_unnamed_359 = c_uint;
pub const kCollectionUser0Mask: c_int = 1;
pub const kCollectionUser1Mask: c_int = 2;
pub const kCollectionUser2Mask: c_int = 4;
pub const kCollectionUser3Mask: c_int = 8;
pub const kCollectionUser4Mask: c_int = 16;
pub const kCollectionUser5Mask: c_int = 32;
pub const kCollectionUser6Mask: c_int = 64;
pub const kCollectionUser7Mask: c_int = 128;
pub const kCollectionUser8Mask: c_int = 256;
pub const kCollectionUser9Mask: c_int = 512;
pub const kCollectionUser10Mask: c_int = 1024;
pub const kCollectionUser11Mask: c_int = 2048;
pub const kCollectionUser12Mask: c_int = 4096;
pub const kCollectionUser13Mask: c_int = 8192;
pub const kCollectionUser14Mask: c_int = 16384;
pub const kCollectionUser15Mask: c_int = 32768;
pub const kCollectionReserved0Mask: c_int = 65536;
pub const kCollectionReserved1Mask: c_int = 131072;
pub const kCollectionReserved2Mask: c_int = 262144;
pub const kCollectionReserved3Mask: c_int = 524288;
pub const kCollectionReserved4Mask: c_int = 1048576;
pub const kCollectionReserved5Mask: c_int = 2097152;
pub const kCollectionReserved6Mask: c_int = 4194304;
pub const kCollectionReserved7Mask: c_int = 8388608;
pub const kCollectionReserved8Mask: c_int = 16777216;
pub const kCollectionReserved9Mask: c_int = 33554432;
pub const kCollectionReserved10Mask: c_int = 67108864;
pub const kCollectionReserved11Mask: c_int = 134217728;
pub const kCollectionReserved12Mask: c_int = 268435456;
pub const kCollectionReserved13Mask: c_int = 536870912;
pub const kCollectionPersistenceMask: c_int = 1073741824;
pub const kCollectionLockMask: c_uint = 2147483648;
const enum_unnamed_360 = c_uint;
pub const struct_OpaqueCollection = opaque {};
pub const Collection = ?*struct_OpaqueCollection;
pub const CollectionTag = FourCharCode;
pub const CollectionFlattenProcPtr = ?*const fn (SInt32, ?*anyopaque, ?*anyopaque) callconv(.C) OSErr;
pub const CollectionExceptionProcPtr = ?*const fn (Collection, OSErr) callconv(.C) OSErr;
pub const CollectionFlattenUPP = CollectionFlattenProcPtr;
pub const CollectionExceptionUPP = CollectionExceptionProcPtr;
pub extern fn NewCollectionFlattenUPP(userRoutine: CollectionFlattenProcPtr) CollectionFlattenUPP;
pub extern fn NewCollectionExceptionUPP(userRoutine: CollectionExceptionProcPtr) CollectionExceptionUPP;
pub extern fn DisposeCollectionFlattenUPP(userUPP: CollectionFlattenUPP) void;
pub extern fn DisposeCollectionExceptionUPP(userUPP: CollectionExceptionUPP) void;
pub extern fn InvokeCollectionFlattenUPP(size: SInt32, data: ?*anyopaque, refCon: ?*anyopaque, userUPP: CollectionFlattenUPP) OSErr;
pub extern fn InvokeCollectionExceptionUPP(c: Collection, status: OSErr, userUPP: CollectionExceptionUPP) OSErr;
pub extern fn NewCollection() Collection;
pub extern fn DisposeCollection(c: Collection) void;
pub extern fn CloneCollection(c: Collection) Collection;
pub extern fn CountCollectionOwners(c: Collection) SInt32;
pub extern fn RetainCollection(c: Collection) OSStatus;
pub extern fn ReleaseCollection(c: Collection) OSStatus;
pub extern fn GetCollectionRetainCount(c: Collection) ItemCount;
pub extern fn CopyCollection(srcCollection: Collection, dstCollection: Collection) Collection;
pub extern fn GetCollectionDefaultAttributes(c: Collection) SInt32;
pub extern fn SetCollectionDefaultAttributes(c: Collection, whichAttributes: SInt32, newAttributes: SInt32) void;
pub extern fn CountCollectionItems(c: Collection) SInt32;
pub extern fn AddCollectionItem(c: Collection, tag: CollectionTag, id: SInt32, itemSize: SInt32, itemData: ?*const anyopaque) OSErr;
pub extern fn GetCollectionItem(c: Collection, tag: CollectionTag, id: SInt32, itemSize: [*c]SInt32, itemData: ?*anyopaque) OSErr;
pub extern fn RemoveCollectionItem(c: Collection, tag: CollectionTag, id: SInt32) OSErr;
pub extern fn SetCollectionItemInfo(c: Collection, tag: CollectionTag, id: SInt32, whichAttributes: SInt32, newAttributes: SInt32) OSErr;
pub extern fn GetCollectionItemInfo(c: Collection, tag: CollectionTag, id: SInt32, itemIndex: [*c]SInt32, itemSize: [*c]SInt32, attributes: [*c]SInt32) OSErr;
pub extern fn ReplaceIndexedCollectionItem(c: Collection, itemIndex: SInt32, itemSize: SInt32, itemData: ?*const anyopaque) OSErr;
pub extern fn GetIndexedCollectionItem(c: Collection, itemIndex: SInt32, itemSize: [*c]SInt32, itemData: ?*anyopaque) OSErr;
pub extern fn RemoveIndexedCollectionItem(c: Collection, itemIndex: SInt32) OSErr;
pub extern fn SetIndexedCollectionItemInfo(c: Collection, itemIndex: SInt32, whichAttributes: SInt32, newAttributes: SInt32) OSErr;
pub extern fn GetIndexedCollectionItemInfo(c: Collection, itemIndex: SInt32, tag: [*c]CollectionTag, id: [*c]SInt32, itemSize: [*c]SInt32, attributes: [*c]SInt32) OSErr;
pub extern fn CollectionTagExists(c: Collection, tag: CollectionTag) Boolean;
pub extern fn CountCollectionTags(c: Collection) SInt32;
pub extern fn GetIndexedCollectionTag(c: Collection, tagIndex: SInt32, tag: [*c]CollectionTag) OSErr;
pub extern fn CountTaggedCollectionItems(c: Collection, tag: CollectionTag) SInt32;
pub extern fn GetTaggedCollectionItem(c: Collection, tag: CollectionTag, whichItem: SInt32, itemSize: [*c]SInt32, itemData: ?*anyopaque) OSErr;
pub extern fn GetTaggedCollectionItemInfo(c: Collection, tag: CollectionTag, whichItem: SInt32, id: [*c]SInt32, itemIndex: [*c]SInt32, itemSize: [*c]SInt32, attributes: [*c]SInt32) OSErr;
pub extern fn PurgeCollection(c: Collection, whichAttributes: SInt32, matchingAttributes: SInt32) void;
pub extern fn PurgeCollectionTag(c: Collection, tag: CollectionTag) void;
pub extern fn EmptyCollection(c: Collection) void;
pub extern fn FlattenCollection(c: Collection, flattenProc: CollectionFlattenUPP, refCon: ?*anyopaque) OSErr;
pub extern fn FlattenPartialCollection(c: Collection, flattenProc: CollectionFlattenUPP, refCon: ?*anyopaque, whichAttributes: SInt32, matchingAttributes: SInt32) OSErr;
pub extern fn UnflattenCollection(c: Collection, flattenProc: CollectionFlattenUPP, refCon: ?*anyopaque) OSErr;
pub extern fn GetCollectionExceptionProc(c: Collection) CollectionExceptionUPP;
pub extern fn SetCollectionExceptionProc(c: Collection, exceptionProc: CollectionExceptionUPP) void;
pub extern fn GetNewCollection(collectionID: SInt16) Collection;
pub extern fn AddCollectionItemHdl(aCollection: Collection, tag: CollectionTag, id: SInt32, itemData: Handle) OSErr;
pub extern fn GetCollectionItemHdl(aCollection: Collection, tag: CollectionTag, id: SInt32, itemData: Handle) OSErr;
pub extern fn ReplaceIndexedCollectionItemHdl(aCollection: Collection, itemIndex: SInt32, itemData: Handle) OSErr;
pub extern fn GetIndexedCollectionItemHdl(aCollection: Collection, itemIndex: SInt32, itemData: Handle) OSErr;
pub extern fn FlattenCollectionToHdl(aCollection: Collection, flattened: Handle) OSErr;
pub extern fn UnflattenCollectionFromHdl(aCollection: Collection, flattened: Handle) OSErr;
pub const struct_BigEndianUInt32 = extern struct {
    bigEndianValue: UInt32,
};
pub const BigEndianUInt32 = struct_BigEndianUInt32;
pub const struct_BigEndianLong = extern struct {
    bigEndianValue: c_long,
};
pub const BigEndianLong = struct_BigEndianLong;
pub const struct_BigEndianUnsignedLong = extern struct {
    bigEndianValue: c_ulong,
};
pub const BigEndianUnsignedLong = struct_BigEndianUnsignedLong;
pub const struct_BigEndianShort = extern struct {
    bigEndianValue: c_short,
};
pub const BigEndianShort = struct_BigEndianShort;
pub const struct_BigEndianUnsignedShort = extern struct {
    bigEndianValue: c_ushort,
};
pub const BigEndianUnsignedShort = struct_BigEndianUnsignedShort;
pub const struct_BigEndianFixed = extern struct {
    bigEndianValue: Fixed,
};
pub const BigEndianFixed = struct_BigEndianFixed;
pub const struct_BigEndianUnsignedFixed = extern struct {
    bigEndianValue: UnsignedFixed,
};
pub const BigEndianUnsignedFixed = struct_BigEndianUnsignedFixed;
pub const struct_BigEndianOSType = extern struct {
    bigEndianValue: OSType,
};
pub const BigEndianOSType = struct_BigEndianOSType;
pub const kCoreEndianResourceManagerDomain: c_int = 1920168547;
pub const kCoreEndianAppleEventManagerDomain: c_int = 1634039412;
const enum_unnamed_361 = c_uint;
pub const CoreEndianFlipProc = ?*const fn (OSType, OSType, SInt16, ?*anyopaque, ByteCount, Boolean, ?*anyopaque) callconv(.C) OSStatus;
pub extern fn CoreEndianInstallFlipper(dataDomain: OSType, dataType: OSType, proc: CoreEndianFlipProc, refcon: ?*anyopaque) OSStatus;
pub extern fn CoreEndianGetFlipper(dataDomain: OSType, dataType: OSType, proc: [*c]CoreEndianFlipProc, refcon: [*c]?*anyopaque) OSStatus;
pub extern fn CoreEndianFlipData(dataDomain: OSType, dataType: OSType, id: SInt16, data: ?*anyopaque, dataLen: ByteCount, currentlyNative: Boolean) OSStatus;
pub const SelectorFunctionProcPtr = ?*const fn (OSType, [*c]SInt32) callconv(.C) OSErr;
pub const SelectorFunctionUPP = SelectorFunctionProcPtr;
pub extern fn Gestalt(selector: OSType, response: [*c]SInt32) OSErr;
pub extern fn NewGestaltValue(selector: OSType, newValue: SInt32) OSErr;
pub extern fn ReplaceGestaltValue(selector: OSType, replacementValue: SInt32) OSErr;
pub extern fn SetGestaltValue(selector: OSType, newValue: SInt32) OSErr;
pub extern fn DeleteGestaltValue(selector: OSType) OSErr;
pub extern fn NewSelectorFunctionUPP(userRoutine: SelectorFunctionProcPtr) SelectorFunctionUPP;
pub extern fn DisposeSelectorFunctionUPP(userUPP: SelectorFunctionUPP) void;
pub extern fn InvokeSelectorFunctionUPP(selector: OSType, response: [*c]SInt32, userUPP: SelectorFunctionUPP) OSErr;
pub const gestaltAddressingModeAttr: c_int = 1633969266;
pub const gestalt32BitAddressing: c_int = 0;
pub const gestalt32BitSysZone: c_int = 1;
pub const gestalt32BitCapable: c_int = 2;
const enum_unnamed_362 = c_uint;
pub const gestaltAFPClient: c_int = 1634103411;
pub const gestaltAFPClientVersionMask: c_int = 65535;
pub const gestaltAFPClient3_5: c_int = 1;
pub const gestaltAFPClient3_6: c_int = 2;
pub const gestaltAFPClient3_6_1: c_int = 3;
pub const gestaltAFPClient3_6_2: c_int = 4;
pub const gestaltAFPClient3_6_3: c_int = 5;
pub const gestaltAFPClient3_7: c_int = 6;
pub const gestaltAFPClient3_7_2: c_int = 7;
pub const gestaltAFPClient3_8: c_int = 8;
pub const gestaltAFPClient3_8_1: c_int = 9;
pub const gestaltAFPClient3_8_3: c_int = 10;
pub const gestaltAFPClient3_8_4: c_int = 11;
pub const gestaltAFPClientAttributeMask: c_int = -65536;
pub const gestaltAFPClientCfgRsrc: c_int = 16;
pub const gestaltAFPClientSupportsIP: c_int = 29;
pub const gestaltAFPClientVMUI: c_int = 30;
pub const gestaltAFPClientMultiReq: c_int = 31;
const enum_unnamed_363 = c_int;
pub const gestaltAliasMgrAttr: c_int = 1634494835;
pub const gestaltAliasMgrPresent: c_int = 0;
pub const gestaltAliasMgrSupportsRemoteAppletalk: c_int = 1;
pub const gestaltAliasMgrSupportsAOCEKeychain: c_int = 2;
pub const gestaltAliasMgrResolveAliasFileWithMountOptions: c_int = 3;
pub const gestaltAliasMgrFollowsAliasesWhenResolving: c_int = 4;
pub const gestaltAliasMgrSupportsExtendedCalls: c_int = 5;
pub const gestaltAliasMgrSupportsFSCalls: c_int = 6;
pub const gestaltAliasMgrPrefersPath: c_int = 7;
pub const gestaltAliasMgrRequiresAccessors: c_int = 8;
const enum_unnamed_364 = c_uint;
pub const gestaltAppearanceAttr: c_int = 1634758770;
pub const gestaltAppearanceExists: c_int = 0;
pub const gestaltAppearanceCompatMode: c_int = 1;
const enum_unnamed_365 = c_uint;
pub const gestaltAppearanceVersion: c_int = 1634760306;
const enum_unnamed_366 = c_uint;
pub const gestaltArbitorAttr: c_int = 1634886176;
pub const gestaltSerialArbitrationExists: c_int = 0;
const enum_unnamed_367 = c_uint;
pub const gestaltAppleScriptVersion: c_int = 1634952054;
const enum_unnamed_368 = c_uint;
pub const gestaltAppleScriptAttr: c_int = 1634952050;
pub const gestaltAppleScriptPresent: c_int = 0;
pub const gestaltAppleScriptPowerPCSupport: c_int = 1;
const enum_unnamed_369 = c_uint;
pub const gestaltATAAttr: c_int = 1635016992;
pub const gestaltATAPresent: c_int = 0;
const enum_unnamed_370 = c_uint;
pub const gestaltATalkVersion: c_int = 1635019638;
const enum_unnamed_371 = c_uint;
pub const gestaltAppleTalkVersion: c_int = 1635019883;
const enum_unnamed_372 = c_uint;
pub const gestaltAUXVersion: c_int = 1630500216;
const enum_unnamed_373 = c_uint;
pub const gestaltMacOSCompatibilityBoxAttr: c_int = 1650618232;
pub const gestaltMacOSCompatibilityBoxPresent: c_int = 0;
pub const gestaltMacOSCompatibilityBoxHasSerial: c_int = 1;
pub const gestaltMacOSCompatibilityBoxless: c_int = 2;
const enum_unnamed_374 = c_uint;
pub const gestaltBusClkSpeed: c_int = 1650682987;
const enum_unnamed_375 = c_uint;
pub const gestaltBusClkSpeedMHz: c_int = 1650682989;
const enum_unnamed_376 = c_uint;
pub const gestaltCloseViewAttr: c_int = 1112753249;
pub const gestaltCloseViewEnabled: c_int = 0;
pub const gestaltCloseViewDisplayMgrFriendly: c_int = 1;
const enum_unnamed_377 = c_uint;
pub const gestaltCarbonVersion: c_int = 1667395438;
const enum_unnamed_378 = c_uint;
pub const gestaltCFMAttr: c_int = 1667658343;
pub const gestaltCFMPresent: c_int = 0;
pub const gestaltCFMPresentMask: c_int = 1;
pub const gestaltCFM99Present: c_int = 2;
pub const gestaltCFM99PresentMask: c_int = 4;
const enum_unnamed_379 = c_uint;
pub const gestaltProcessorCacheLineSize: c_int = 1668508026;
const enum_unnamed_380 = c_uint;
pub const gestaltCollectionMgrVersion: c_int = 1668052078;
const enum_unnamed_381 = c_uint;
pub const gestaltColorMatchingAttr: c_int = 1668117601;
pub const gestaltHighLevelMatching: c_int = 0;
pub const gestaltColorMatchingLibLoaded: c_int = 1;
const enum_unnamed_382 = c_uint;
pub const gestaltColorMatchingVersion: c_int = 1668117603;
pub const gestaltColorSync10: c_int = 256;
pub const gestaltColorSync11: c_int = 272;
pub const gestaltColorSync104: c_int = 260;
pub const gestaltColorSync105: c_int = 261;
pub const gestaltColorSync20: c_int = 512;
pub const gestaltColorSync21: c_int = 528;
pub const gestaltColorSync211: c_int = 529;
pub const gestaltColorSync212: c_int = 530;
pub const gestaltColorSync213: c_int = 531;
pub const gestaltColorSync25: c_int = 592;
pub const gestaltColorSync26: c_int = 608;
pub const gestaltColorSync261: c_int = 609;
pub const gestaltColorSync30: c_int = 768;
const enum_unnamed_383 = c_uint;
pub const gestaltControlMgrVersion: c_int = 1668118130;
const enum_unnamed_384 = c_uint;
pub const gestaltControlMgrAttr: c_int = 1668183148;
pub const gestaltControlMgrPresent: c_int = 1;
pub const gestaltControlMgrPresentBit: c_int = 0;
pub const gestaltControlMsgPresentMask: c_int = 1;
const enum_unnamed_385 = c_uint;
pub const gestaltConnMgrAttr: c_int = 1668247150;
pub const gestaltConnMgrPresent: c_int = 0;
pub const gestaltConnMgrCMSearchFix: c_int = 1;
pub const gestaltConnMgrErrorString: c_int = 2;
pub const gestaltConnMgrMultiAsyncIO: c_int = 3;
const enum_unnamed_386 = c_uint;
pub const gestaltColorPickerVersion: c_int = 1668311922;
pub const gestaltColorPicker: c_int = 1668311922;
const enum_unnamed_387 = c_uint;
pub const gestaltComponentMgr: c_int = 1668312692;
pub const gestaltComponentPlatform: c_int = 1668247660;
const enum_unnamed_388 = c_uint;
pub const gestaltNativeCPUtype: c_int = 1668314484;
pub const gestaltNativeCPUfamily: c_int = 1668314470;
pub const gestaltCPU68000: c_int = 0;
pub const gestaltCPU68010: c_int = 1;
pub const gestaltCPU68020: c_int = 2;
pub const gestaltCPU68030: c_int = 3;
pub const gestaltCPU68040: c_int = 4;
pub const gestaltCPU601: c_int = 257;
pub const gestaltCPU603: c_int = 259;
pub const gestaltCPU604: c_int = 260;
pub const gestaltCPU603e: c_int = 262;
pub const gestaltCPU603ev: c_int = 263;
pub const gestaltCPU750: c_int = 264;
pub const gestaltCPU604e: c_int = 265;
pub const gestaltCPU604ev: c_int = 266;
pub const gestaltCPUG4: c_int = 268;
pub const gestaltCPUG47450: c_int = 272;
const enum_unnamed_389 = c_uint;
pub const gestaltCPUApollo: c_int = 273;
pub const gestaltCPUG47447: c_int = 274;
pub const gestaltCPU750FX: c_int = 288;
pub const gestaltCPU970: c_int = 313;
pub const gestaltCPU970FX: c_int = 316;
pub const gestaltCPU970MP: c_int = 324;
const enum_unnamed_390 = c_uint;
pub const gestaltCPU486: c_int = 1765029942;
pub const gestaltCPUPentium: c_int = 1765095478;
pub const gestaltCPUPentiumPro: c_int = 1765109874;
pub const gestaltCPUPentiumII: c_int = 1765108073;
pub const gestaltCPUX86: c_int = 1769502840;
pub const gestaltCPUPentium4: c_int = 1765108086;
const enum_unnamed_391 = c_uint;
pub const gestaltCPUARMFamily: c_int = 1634888992;
pub const gestaltCPUARM64: c_int = 1635268148;
const enum_unnamed_392 = c_uint;
pub const gestaltCRMAttr: c_int = 1668443424;
pub const gestaltCRMPresent: c_int = 0;
pub const gestaltCRMPersistentFix: c_int = 1;
pub const gestaltCRMToolRsrcCalls: c_int = 2;
const enum_unnamed_393 = c_uint;
pub const gestaltControlStripVersion: c_int = 1668511346;
const enum_unnamed_394 = c_uint;
pub const gestaltCountOfCPUs: c_int = 1668314483;
const enum_unnamed_395 = c_uint;
pub const gestaltCTBVersion: c_int = 1668571766;
const enum_unnamed_396 = c_uint;
pub const gestaltDBAccessMgrAttr: c_int = 1684169059;
pub const gestaltDBAccessMgrPresent: c_int = 0;
const enum_unnamed_397 = c_uint;
pub const gestaltDiskCacheSize: c_int = 1684239226;
const enum_unnamed_398 = c_uint;
pub const gestaltSDPFindVersion: c_int = 1684434532;
const enum_unnamed_399 = c_uint;
pub const gestaltDictionaryMgrAttr: c_int = 1684628340;
pub const gestaltDictionaryMgrPresent: c_int = 0;
const enum_unnamed_400 = c_uint;
pub const gestaltDITLExtAttr: c_int = 1684632684;
pub const gestaltDITLExtPresent: c_int = 0;
pub const gestaltDITLExtSupportsIctb: c_int = 1;
const enum_unnamed_401 = c_uint;
pub const gestaltDialogMgrAttr: c_int = 1684828007;
pub const gestaltDialogMgrPresent: c_int = 1;
pub const gestaltDialogMgrPresentBit: c_int = 0;
pub const gestaltDialogMgrHasAquaAlertBit: c_int = 2;
pub const gestaltDialogMgrPresentMask: c_int = 1;
pub const gestaltDialogMgrHasAquaAlertMask: c_int = 4;
pub const gestaltDialogMsgPresentMask: c_int = 1;
const enum_unnamed_402 = c_uint;
pub const gestaltDesktopPicturesAttr: c_int = 1684762744;
pub const gestaltDesktopPicturesInstalled: c_int = 0;
pub const gestaltDesktopPicturesDisplayed: c_int = 1;
const enum_unnamed_403 = c_uint;
pub const gestaltDisplayMgrVers: c_int = 1685089398;
const enum_unnamed_404 = c_uint;
pub const gestaltDisplayMgrAttr: c_int = 1685089401;
pub const gestaltDisplayMgrPresent: c_int = 0;
pub const gestaltDisplayMgrCanSwitchMirrored: c_int = 2;
pub const gestaltDisplayMgrSetDepthNotifies: c_int = 3;
pub const gestaltDisplayMgrCanConfirm: c_int = 4;
pub const gestaltDisplayMgrColorSyncAware: c_int = 5;
pub const gestaltDisplayMgrGeneratesProfiles: c_int = 6;
pub const gestaltDisplayMgrSleepNotifies: c_int = 7;
const enum_unnamed_405 = c_uint;
pub const gestaltDragMgrAttr: c_int = 1685217639;
pub const gestaltDragMgrPresent: c_int = 0;
pub const gestaltDragMgrFloatingWind: c_int = 1;
pub const gestaltPPCDragLibPresent: c_int = 2;
pub const gestaltDragMgrHasImageSupport: c_int = 3;
pub const gestaltCanStartDragInFloatWindow: c_int = 4;
pub const gestaltSetDragImageUpdates: c_int = 5;
const enum_unnamed_406 = c_uint;
pub const gestaltDrawSprocketVersion: c_int = 1685287030;
const enum_unnamed_407 = c_uint;
pub const gestaltDigitalSignatureVersion: c_int = 1685285223;
const enum_unnamed_408 = c_uint;
pub const gestaltDTPFeatures: c_int = 1685352550;
pub const kDTPThirdPartySupported: c_int = 4;
const enum_unnamed_409 = c_uint;
pub const gestaltDTPInfo: c_int = 1685352568;
const enum_unnamed_410 = c_uint;
pub const gestaltEasyAccessAttr: c_int = 1700885369;
pub const gestaltEasyAccessOff: c_int = 0;
pub const gestaltEasyAccessOn: c_int = 1;
pub const gestaltEasyAccessSticky: c_int = 2;
pub const gestaltEasyAccessLocked: c_int = 3;
const enum_unnamed_411 = c_uint;
pub const gestaltEditionMgrAttr: c_int = 1701082222;
pub const gestaltEditionMgrPresent: c_int = 0;
pub const gestaltEditionMgrTranslationAware: c_int = 1;
const enum_unnamed_412 = c_uint;
pub const gestaltAppleEventsAttr: c_int = 1702260340;
pub const gestaltAppleEventsPresent: c_int = 0;
pub const gestaltScriptingSupport: c_int = 1;
pub const gestaltOSLInSystem: c_int = 2;
pub const gestaltSupportsApplicationURL: c_int = 4;
const enum_unnamed_413 = c_uint;
pub const gestaltExtensionTableVersion: c_int = 1702126188;
const enum_unnamed_414 = c_uint;
pub const gestaltFBCIndexingState: c_int = 1717724009;
pub const gestaltFBCindexingSafe: c_int = 0;
pub const gestaltFBCindexingCritical: c_int = 1;
const enum_unnamed_415 = c_uint;
pub const gestaltFBCVersion: c_int = 1717724022;
pub const gestaltFBCCurrentVersion: c_int = 17;
pub const gestaltOSXFBCCurrentVersion: c_int = 256;
const enum_unnamed_416 = c_uint;
pub const gestaltFileMappingAttr: c_int = 1718381936;
pub const gestaltFileMappingPresent: c_int = 0;
pub const gestaltFileMappingMultipleFilesFix: c_int = 1;
const enum_unnamed_417 = c_uint;
pub const gestaltFloppyAttr: c_int = 1718382713;
pub const gestaltFloppyIsMFMOnly: c_int = 0;
pub const gestaltFloppyIsManualEject: c_int = 1;
pub const gestaltFloppyUsesDiskInPlace: c_int = 2;
const enum_unnamed_418 = c_uint;
pub const gestaltFinderAttr: c_int = 1718510706;
pub const gestaltFinderDropEvent: c_int = 0;
pub const gestaltFinderMagicPlacement: c_int = 1;
pub const gestaltFinderCallsAEProcess: c_int = 2;
pub const gestaltOSLCompliantFinder: c_int = 3;
pub const gestaltFinderSupports4GBVolumes: c_int = 4;
pub const gestaltFinderHasClippings: c_int = 6;
pub const gestaltFinderFullDragManagerSupport: c_int = 7;
pub const gestaltFinderFloppyRootComments: c_int = 8;
pub const gestaltFinderLargeAndNotSavedFlavorsOK: c_int = 9;
pub const gestaltFinderUsesExtensibleFolderManager: c_int = 10;
pub const gestaltFinderUnderstandsRedirectedDesktopFolder: c_int = 11;
const enum_unnamed_419 = c_uint;
pub const gestaltFindFolderAttr: c_int = 1718578276;
pub const gestaltFindFolderPresent: c_int = 0;
pub const gestaltFolderDescSupport: c_int = 1;
pub const gestaltFolderMgrFollowsAliasesWhenResolving: c_int = 2;
pub const gestaltFolderMgrSupportsExtendedCalls: c_int = 3;
pub const gestaltFolderMgrSupportsDomains: c_int = 4;
pub const gestaltFolderMgrSupportsFSCalls: c_int = 5;
const enum_unnamed_420 = c_uint;
pub const gestaltFindFolderRedirectionAttr: c_int = 1718578277;
const enum_unnamed_421 = c_uint;
pub const gestaltFontMgrAttr: c_int = 1718578804;
pub const gestaltOutlineFonts: c_int = 0;
const enum_unnamed_422 = c_uint;
pub const gestaltFPUType: c_int = 1718646048;
pub const gestaltNoFPU: c_int = 0;
pub const gestalt68881: c_int = 1;
pub const gestalt68882: c_int = 2;
pub const gestalt68040FPU: c_int = 3;
const enum_unnamed_423 = c_uint;
pub const gestaltFSAttr: c_int = 1718820896;
pub const gestaltFullExtFSDispatching: c_int = 0;
pub const gestaltHasFSSpecCalls: c_int = 1;
pub const gestaltHasFileSystemManager: c_int = 2;
pub const gestaltFSMDoesDynamicLoad: c_int = 3;
pub const gestaltFSSupports4GBVols: c_int = 4;
pub const gestaltFSSupports2TBVols: c_int = 5;
pub const gestaltHasExtendedDiskInit: c_int = 6;
pub const gestaltDTMgrSupportsFSM: c_int = 7;
pub const gestaltFSNoMFSVols: c_int = 8;
pub const gestaltFSSupportsHFSPlusVols: c_int = 9;
pub const gestaltFSIncompatibleDFA82: c_int = 10;
const enum_unnamed_424 = c_uint;
pub const gestaltFSSupportsDirectIO: c_int = 11;
const enum_unnamed_425 = c_uint;
pub const gestaltHasHFSPlusAPIs: c_int = 12;
pub const gestaltMustUseFCBAccessors: c_int = 13;
pub const gestaltFSUsesPOSIXPathsForConversion: c_int = 14;
pub const gestaltFSSupportsExclusiveLocks: c_int = 15;
pub const gestaltFSSupportsHardLinkDetection: c_int = 16;
pub const gestaltFSAllowsConcurrentAsyncIO: c_int = 17;
const enum_unnamed_426 = c_uint;
pub const gestaltAdminFeaturesFlagsAttr: c_int = 1718773092;
pub const gestaltFinderUsesSpecialOpenFoldersFile: c_int = 0;
const enum_unnamed_427 = c_uint;
pub const gestaltFSMVersion: c_int = 1718840608;
const enum_unnamed_428 = c_uint;
pub const gestaltFXfrMgrAttr: c_int = 1719166578;
pub const gestaltFXfrMgrPresent: c_int = 0;
pub const gestaltFXfrMgrMultiFile: c_int = 1;
pub const gestaltFXfrMgrErrorString: c_int = 2;
pub const gestaltFXfrMgrAsync: c_int = 3;
const enum_unnamed_429 = c_uint;
pub const gestaltGraphicsAttr: c_int = 1734768737;
pub const gestaltGraphicsIsDebugging: c_int = 1;
pub const gestaltGraphicsIsLoaded: c_int = 2;
pub const gestaltGraphicsIsPowerPC: c_int = 4;
const enum_unnamed_430 = c_uint;
pub const gestaltGraphicsVersion: c_int = 1735550584;
pub const gestaltCurrentGraphicsVersion: c_int = 66048;
const enum_unnamed_431 = c_uint;
pub const gestaltHardwareAttr: c_int = 1751414642;
pub const gestaltHasVIA1: c_int = 0;
pub const gestaltHasVIA2: c_int = 1;
pub const gestaltHasASC: c_int = 3;
pub const gestaltHasSCC: c_int = 4;
pub const gestaltHasSCSI: c_int = 7;
pub const gestaltHasSoftPowerOff: c_int = 19;
pub const gestaltHasSCSI961: c_int = 21;
pub const gestaltHasSCSI962: c_int = 22;
pub const gestaltHasUniversalROM: c_int = 24;
pub const gestaltHasEnhancedLtalk: c_int = 30;
const enum_unnamed_432 = c_uint;
pub const gestaltHelpMgrAttr: c_int = 1751477360;
pub const gestaltHelpMgrPresent: c_int = 0;
pub const gestaltHelpMgrExtensions: c_int = 1;
pub const gestaltAppleGuideIsDebug: c_int = 30;
pub const gestaltAppleGuidePresent: c_int = 31;
const enum_unnamed_433 = c_uint;
pub const gestaltHardwareVendorCode: c_int = 1752326500;
pub const gestaltHardwareVendorApple: c_int = 1097887852;
const enum_unnamed_434 = c_uint;
pub const gestaltCompressionMgr: c_int = 1768123760;
const enum_unnamed_435 = c_uint;
pub const gestaltIconUtilitiesAttr: c_int = 1768124270;
pub const gestaltIconUtilitiesPresent: c_int = 0;
pub const gestaltIconUtilitiesHas48PixelIcons: c_int = 1;
pub const gestaltIconUtilitiesHas32BitIcons: c_int = 2;
pub const gestaltIconUtilitiesHas8BitDeepMasks: c_int = 3;
pub const gestaltIconUtilitiesHasIconServices: c_int = 4;
const enum_unnamed_436 = c_uint;
pub const gestaltInternalDisplay: c_int = 1768190832;
const enum_unnamed_437 = c_uint;
pub const gestaltKeyboardType: c_int = 1801610272;
pub const gestaltMacKbd: c_int = 1;
pub const gestaltMacAndPad: c_int = 2;
pub const gestaltMacPlusKbd: c_int = 3;
pub const gestaltUnknownThirdPartyKbd: c_int = 3;
pub const gestaltExtADBKbd: c_int = 4;
pub const gestaltStdADBKbd: c_int = 5;
pub const gestaltPrtblADBKbd: c_int = 6;
pub const gestaltPrtblISOKbd: c_int = 7;
pub const gestaltStdISOADBKbd: c_int = 8;
pub const gestaltExtISOADBKbd: c_int = 9;
pub const gestaltADBKbdII: c_int = 10;
pub const gestaltADBISOKbdII: c_int = 11;
pub const gestaltPwrBookADBKbd: c_int = 12;
pub const gestaltPwrBookISOADBKbd: c_int = 13;
pub const gestaltAppleAdjustKeypad: c_int = 14;
pub const gestaltAppleAdjustADBKbd: c_int = 15;
pub const gestaltAppleAdjustISOKbd: c_int = 16;
pub const gestaltJapanAdjustADBKbd: c_int = 17;
pub const gestaltPwrBkExtISOKbd: c_int = 20;
pub const gestaltPwrBkExtJISKbd: c_int = 21;
pub const gestaltPwrBkExtADBKbd: c_int = 24;
pub const gestaltPS2Keyboard: c_int = 27;
pub const gestaltPwrBkSubDomKbd: c_int = 28;
pub const gestaltPwrBkSubISOKbd: c_int = 29;
pub const gestaltPwrBkSubJISKbd: c_int = 30;
pub const gestaltPortableUSBANSIKbd: c_int = 37;
pub const gestaltPortableUSBISOKbd: c_int = 38;
pub const gestaltPortableUSBJISKbd: c_int = 39;
pub const gestaltThirdPartyANSIKbd: c_int = 40;
pub const gestaltThirdPartyISOKbd: c_int = 41;
pub const gestaltThirdPartyJISKbd: c_int = 42;
pub const gestaltPwrBkEKDomKbd: c_int = 195;
pub const gestaltPwrBkEKISOKbd: c_int = 196;
pub const gestaltPwrBkEKJISKbd: c_int = 197;
pub const gestaltUSBCosmoANSIKbd: c_int = 198;
pub const gestaltUSBCosmoISOKbd: c_int = 199;
pub const gestaltUSBCosmoJISKbd: c_int = 200;
pub const gestaltPwrBk99JISKbd: c_int = 201;
pub const gestaltUSBAndyANSIKbd: c_int = 204;
pub const gestaltUSBAndyISOKbd: c_int = 205;
pub const gestaltUSBAndyJISKbd: c_int = 206;
const enum_unnamed_438 = c_uint;
pub const gestaltPortable2001ANSIKbd: c_int = 202;
pub const gestaltPortable2001ISOKbd: c_int = 203;
pub const gestaltPortable2001JISKbd: c_int = 207;
const enum_unnamed_439 = c_uint;
pub const gestaltUSBProF16ANSIKbd: c_int = 34;
pub const gestaltUSBProF16ISOKbd: c_int = 35;
pub const gestaltUSBProF16JISKbd: c_int = 36;
pub const gestaltProF16ANSIKbd: c_int = 31;
pub const gestaltProF16ISOKbd: c_int = 32;
pub const gestaltProF16JISKbd: c_int = 33;
const enum_unnamed_440 = c_uint;
pub const gestaltUDFSupport: c_int = 1802855526;
const enum_unnamed_441 = c_uint;
pub const gestaltLowMemorySize: c_int = 1819108717;
const enum_unnamed_442 = c_uint;
pub const gestaltLogicalRAMSize: c_int = 1819435373;
const enum_unnamed_443 = c_uint;
pub const gestaltMachineType: c_int = 1835098984;
pub const gestaltClassic: c_int = 1;
pub const gestaltMacXL: c_int = 2;
pub const gestaltMac512KE: c_int = 3;
pub const gestaltMacPlus: c_int = 4;
pub const gestaltMacSE: c_int = 5;
pub const gestaltMacII: c_int = 6;
pub const gestaltMacIIx: c_int = 7;
pub const gestaltMacIIcx: c_int = 8;
pub const gestaltMacSE030: c_int = 9;
pub const gestaltPortable: c_int = 10;
pub const gestaltMacIIci: c_int = 11;
pub const gestaltPowerMac8100_120: c_int = 12;
pub const gestaltMacIIfx: c_int = 13;
pub const gestaltMacClassic: c_int = 17;
pub const gestaltMacIIsi: c_int = 18;
pub const gestaltMacLC: c_int = 19;
pub const gestaltMacQuadra900: c_int = 20;
pub const gestaltPowerBook170: c_int = 21;
pub const gestaltMacQuadra700: c_int = 22;
pub const gestaltClassicII: c_int = 23;
pub const gestaltPowerBook100: c_int = 24;
pub const gestaltPowerBook140: c_int = 25;
pub const gestaltMacQuadra950: c_int = 26;
pub const gestaltMacLCIII: c_int = 27;
pub const gestaltPerforma450: c_int = 27;
pub const gestaltPowerBookDuo210: c_int = 29;
pub const gestaltMacCentris650: c_int = 30;
pub const gestaltPowerBookDuo230: c_int = 32;
pub const gestaltPowerBook180: c_int = 33;
pub const gestaltPowerBook160: c_int = 34;
pub const gestaltMacQuadra800: c_int = 35;
pub const gestaltMacQuadra650: c_int = 36;
pub const gestaltMacLCII: c_int = 37;
pub const gestaltPowerBookDuo250: c_int = 38;
pub const gestaltAWS9150_80: c_int = 39;
pub const gestaltPowerMac8100_110: c_int = 40;
pub const gestaltAWS8150_110: c_int = 40;
pub const gestaltPowerMac5200: c_int = 41;
pub const gestaltPowerMac5260: c_int = 41;
pub const gestaltPerforma5300: c_int = 41;
pub const gestaltPowerMac6200: c_int = 42;
pub const gestaltPerforma6300: c_int = 42;
pub const gestaltMacIIvi: c_int = 44;
pub const gestaltMacIIvm: c_int = 45;
pub const gestaltPerforma600: c_int = 45;
pub const gestaltPowerMac7100_80: c_int = 47;
pub const gestaltMacIIvx: c_int = 48;
pub const gestaltMacColorClassic: c_int = 49;
pub const gestaltPerforma250: c_int = 49;
pub const gestaltPowerBook165c: c_int = 50;
pub const gestaltMacCentris610: c_int = 52;
pub const gestaltMacQuadra610: c_int = 53;
pub const gestaltPowerBook145: c_int = 54;
pub const gestaltPowerMac8100_100: c_int = 55;
pub const gestaltMacLC520: c_int = 56;
pub const gestaltAWS9150_120: c_int = 57;
pub const gestaltPowerMac6400: c_int = 58;
pub const gestaltPerforma6400: c_int = 58;
pub const gestaltPerforma6360: c_int = 58;
pub const gestaltMacCentris660AV: c_int = 60;
pub const gestaltMacQuadra660AV: c_int = 60;
pub const gestaltPerforma46x: c_int = 62;
pub const gestaltPowerMac8100_80: c_int = 65;
pub const gestaltAWS8150_80: c_int = 65;
pub const gestaltPowerMac9500: c_int = 67;
pub const gestaltPowerMac9600: c_int = 67;
pub const gestaltPowerMac7500: c_int = 68;
pub const gestaltPowerMac7600: c_int = 68;
pub const gestaltPowerMac8500: c_int = 69;
pub const gestaltPowerMac8600: c_int = 69;
pub const gestaltAWS8550: c_int = 68;
pub const gestaltPowerBook180c: c_int = 71;
pub const gestaltPowerBook520: c_int = 72;
pub const gestaltPowerBook520c: c_int = 72;
pub const gestaltPowerBook540: c_int = 72;
pub const gestaltPowerBook540c: c_int = 72;
pub const gestaltPowerMac5400: c_int = 74;
pub const gestaltPowerMac6100_60: c_int = 75;
pub const gestaltAWS6150_60: c_int = 75;
pub const gestaltPowerBookDuo270c: c_int = 77;
pub const gestaltMacQuadra840AV: c_int = 78;
pub const gestaltPerforma550: c_int = 80;
pub const gestaltPowerBook165: c_int = 84;
pub const gestaltPowerBook190: c_int = 85;
pub const gestaltMacTV: c_int = 88;
pub const gestaltMacLC475: c_int = 89;
pub const gestaltPerforma47x: c_int = 89;
pub const gestaltMacLC575: c_int = 92;
pub const gestaltMacQuadra605: c_int = 94;
pub const gestaltMacQuadra630: c_int = 98;
pub const gestaltMacLC580: c_int = 99;
pub const gestaltPerforma580: c_int = 99;
pub const gestaltPowerMac6100_66: c_int = 100;
pub const gestaltAWS6150_66: c_int = 100;
pub const gestaltPowerBookDuo280: c_int = 102;
pub const gestaltPowerBookDuo280c: c_int = 103;
pub const gestaltPowerMacLC475: c_int = 104;
pub const gestaltPowerMacPerforma47x: c_int = 104;
pub const gestaltPowerMacLC575: c_int = 105;
pub const gestaltPowerMacPerforma57x: c_int = 105;
pub const gestaltPowerMacQuadra630: c_int = 106;
pub const gestaltPowerMacLC630: c_int = 106;
pub const gestaltPowerMacPerforma63x: c_int = 106;
pub const gestaltPowerMac7200: c_int = 108;
pub const gestaltPowerMac7300: c_int = 109;
pub const gestaltPowerMac7100_66: c_int = 112;
pub const gestaltPowerBook150: c_int = 115;
pub const gestaltPowerMacQuadra700: c_int = 116;
pub const gestaltPowerMacQuadra900: c_int = 117;
pub const gestaltPowerMacQuadra950: c_int = 118;
pub const gestaltPowerMacCentris610: c_int = 119;
pub const gestaltPowerMacCentris650: c_int = 120;
pub const gestaltPowerMacQuadra610: c_int = 121;
pub const gestaltPowerMacQuadra650: c_int = 122;
pub const gestaltPowerMacQuadra800: c_int = 123;
pub const gestaltPowerBookDuo2300: c_int = 124;
pub const gestaltPowerBook500PPCUpgrade: c_int = 126;
pub const gestaltPowerBook5300: c_int = 128;
pub const gestaltPowerBook1400: c_int = 310;
pub const gestaltPowerBook3400: c_int = 306;
pub const gestaltPowerBook2400: c_int = 307;
pub const gestaltPowerBookG3Series: c_int = 312;
pub const gestaltPowerBookG3: c_int = 313;
pub const gestaltPowerBookG3Series2: c_int = 314;
pub const gestaltPowerMacNewWorld: c_int = 406;
pub const gestaltPowerMacG3: c_int = 510;
pub const gestaltPowerMac5500: c_int = 512;
pub const gestalt20thAnniversary: c_int = 512;
pub const gestaltPowerMac6500: c_int = 513;
pub const gestaltPowerMac4400_160: c_int = 514;
pub const gestaltPowerMac4400: c_int = 515;
pub const gestaltMacOSCompatibility: c_int = 1206;
const enum_unnamed_444 = c_uint;
pub const gestaltQuadra605: c_int = 94;
pub const gestaltQuadra610: c_int = 53;
pub const gestaltQuadra630: c_int = 98;
pub const gestaltQuadra650: c_int = 36;
pub const gestaltQuadra660AV: c_int = 60;
pub const gestaltQuadra700: c_int = 22;
pub const gestaltQuadra800: c_int = 35;
pub const gestaltQuadra840AV: c_int = 78;
pub const gestaltQuadra900: c_int = 20;
pub const gestaltQuadra950: c_int = 26;
const enum_unnamed_445 = c_uint;
pub const kMachineNameStrID: c_int = -16395;
const enum_unnamed_446 = c_int;
pub const gestaltSMPMailerVersion: c_int = 1835101298;
const enum_unnamed_447 = c_uint;
pub const gestaltMediaBay: c_int = 1835165032;
pub const gestaltMBLegacy: c_int = 0;
pub const gestaltMBSingleBay: c_int = 1;
pub const gestaltMBMultipleBays: c_int = 2;
const enum_unnamed_448 = c_uint;
pub const gestaltMessageMgrVersion: c_int = 1835365235;
const enum_unnamed_449 = c_uint;
pub const gestaltMenuMgrAttr: c_int = 1835363957;
pub const gestaltMenuMgrPresent: c_int = 1;
pub const gestaltMenuMgrPresentBit: c_int = 0;
pub const gestaltMenuMgrAquaLayoutBit: c_int = 1;
pub const gestaltMenuMgrMultipleItemsWithCommandIDBit: c_int = 2;
pub const gestaltMenuMgrRetainsIconRefBit: c_int = 3;
pub const gestaltMenuMgrSendsMenuBoundsToDefProcBit: c_int = 4;
pub const gestaltMenuMgrMoreThanFiveMenusDeepBit: c_int = 5;
pub const gestaltMenuMgrCGImageMenuTitleBit: c_int = 6;
pub const gestaltMenuMgrPresentMask: c_int = 1;
pub const gestaltMenuMgrAquaLayoutMask: c_int = 2;
pub const gestaltMenuMgrMultipleItemsWithCommandIDMask: c_int = 4;
pub const gestaltMenuMgrRetainsIconRefMask: c_int = 8;
pub const gestaltMenuMgrSendsMenuBoundsToDefProcMask: c_int = 16;
pub const gestaltMenuMgrMoreThanFiveMenusDeepMask: c_int = 32;
pub const gestaltMenuMgrCGImageMenuTitleMask: c_int = 64;
const enum_unnamed_450 = c_uint;
pub const gestaltMultipleUsersState: c_int = 1835426930;
const enum_unnamed_451 = c_uint;
pub const gestaltMachineIcon: c_int = 1835623278;
const enum_unnamed_452 = c_uint;
pub const gestaltMiscAttr: c_int = 1835627363;
pub const gestaltScrollingThrottle: c_int = 0;
pub const gestaltSquareMenuBar: c_int = 2;
const enum_unnamed_453 = c_uint;
pub const gestaltMixedModeVersion: c_int = 1835628644;
const enum_unnamed_454 = c_uint;
pub const gestaltMixedModeAttr: c_int = 1835628644;
pub const gestaltMixedModePowerPC: c_int = 0;
pub const gestaltPowerPCAware: c_int = 0;
pub const gestaltMixedModeCFM68K: c_int = 1;
pub const gestaltMixedModeCFM68KHasTrap: c_int = 2;
pub const gestaltMixedModeCFM68KHasState: c_int = 3;
const enum_unnamed_455 = c_uint;
pub const gestaltQuickTimeConferencing: c_int = 1836346475;
const enum_unnamed_456 = c_uint;
pub const gestaltMemoryMapAttr: c_int = 1835884912;
pub const gestaltMemoryMapSparse: c_int = 0;
const enum_unnamed_457 = c_uint;
pub const gestaltMMUType: c_int = 1835889952;
pub const gestaltNoMMU: c_int = 0;
pub const gestaltAMU: c_int = 1;
pub const gestalt68851: c_int = 2;
pub const gestalt68030MMU: c_int = 3;
pub const gestalt68040MMU: c_int = 4;
pub const gestaltEMMU1: c_int = 5;
const enum_unnamed_458 = c_uint;
pub const gestaltUserVisibleMachineName: c_int = 1835950445;
const enum_unnamed_459 = c_uint;
pub const gestaltMPCallableAPIsAttr: c_int = 1836086115;
pub const gestaltMPFileManager: c_int = 0;
pub const gestaltMPDeviceManager: c_int = 1;
pub const gestaltMPTrapCalls: c_int = 2;
const enum_unnamed_460 = c_uint;
pub const gestaltStdNBPAttr: c_int = 1852601712;
pub const gestaltStdNBPPresent: c_int = 0;
pub const gestaltStdNBPSupportsAutoPosition: c_int = 1;
const enum_unnamed_461 = c_uint;
pub const gestaltNotificationMgrAttr: c_int = 1852663666;
pub const gestaltNotificationPresent: c_int = 0;
const enum_unnamed_462 = c_uint;
pub const gestaltNameRegistryVersion: c_int = 1852990823;
const enum_unnamed_463 = c_uint;
pub const gestaltNuBusSlotCount: c_int = 1853186675;
const enum_unnamed_464 = c_uint;
pub const gestaltOCEToolboxVersion: c_int = 1868785012;
pub const gestaltOCETB: c_int = 258;
pub const gestaltSFServer: c_int = 256;
const enum_unnamed_465 = c_uint;
pub const gestaltOCEToolboxAttr: c_int = 1868785013;
pub const gestaltOCETBPresent: c_int = 1;
pub const gestaltOCETBAvailable: c_int = 2;
pub const gestaltOCESFServerAvailable: c_int = 4;
pub const gestaltOCETBNativeGlueAvailable: c_int = 16;
const enum_unnamed_466 = c_uint;
pub const gestaltOpenFirmwareInfo: c_int = 1869637239;
const enum_unnamed_467 = c_uint;
pub const gestaltOSAttr: c_int = 1869815840;
pub const gestaltSysZoneGrowable: c_int = 0;
pub const gestaltLaunchCanReturn: c_int = 1;
pub const gestaltLaunchFullFileSpec: c_int = 2;
pub const gestaltLaunchControl: c_int = 3;
pub const gestaltTempMemSupport: c_int = 4;
pub const gestaltRealTempMemory: c_int = 5;
pub const gestaltTempMemTracked: c_int = 6;
pub const gestaltIPCSupport: c_int = 7;
pub const gestaltSysDebuggerSupport: c_int = 8;
pub const gestaltNativeProcessMgrBit: c_int = 19;
pub const gestaltAltivecRegistersSwappedCorrectlyBit: c_int = 20;
const enum_unnamed_468 = c_uint;
pub const gestaltOSTable: c_int = 1869837428;
const enum_unnamed_469 = c_uint;
pub const gestaltOpenTptNetworkSetup: c_int = 1869898598;
pub const gestaltOpenTptNetworkSetupLegacyImport: c_int = 0;
pub const gestaltOpenTptNetworkSetupLegacyExport: c_int = 1;
pub const gestaltOpenTptNetworkSetupSupportsMultihoming: c_int = 2;
const enum_unnamed_470 = c_uint;
pub const gestaltOpenTptNetworkSetupVersion: c_int = 1869898614;
const enum_unnamed_471 = c_uint;
pub const gestaltOpenTptRemoteAccess: c_int = 1869902433;
pub const gestaltOpenTptRemoteAccessPresent: c_int = 0;
pub const gestaltOpenTptRemoteAccessLoaded: c_int = 1;
pub const gestaltOpenTptRemoteAccessClientOnly: c_int = 2;
pub const gestaltOpenTptRemoteAccessPServer: c_int = 3;
pub const gestaltOpenTptRemoteAccessMPServer: c_int = 4;
pub const gestaltOpenTptPPPPresent: c_int = 5;
pub const gestaltOpenTptARAPPresent: c_int = 6;
const enum_unnamed_472 = c_uint;
pub const gestaltOpenTptRemoteAccessVersion: c_int = 1869902454;
const enum_unnamed_473 = c_uint;
pub const gestaltOpenTptVersions: c_int = 1869903474;
const enum_unnamed_474 = c_uint;
pub const gestaltOpenTpt: c_int = 1869898094;
pub const gestaltOpenTptPresentMask: c_int = 1;
pub const gestaltOpenTptLoadedMask: c_int = 2;
pub const gestaltOpenTptAppleTalkPresentMask: c_int = 4;
pub const gestaltOpenTptAppleTalkLoadedMask: c_int = 8;
pub const gestaltOpenTptTCPPresentMask: c_int = 16;
pub const gestaltOpenTptTCPLoadedMask: c_int = 32;
pub const gestaltOpenTptIPXSPXPresentMask: c_int = 64;
pub const gestaltOpenTptIPXSPXLoadedMask: c_int = 128;
pub const gestaltOpenTptPresentBit: c_int = 0;
pub const gestaltOpenTptLoadedBit: c_int = 1;
pub const gestaltOpenTptAppleTalkPresentBit: c_int = 2;
pub const gestaltOpenTptAppleTalkLoadedBit: c_int = 3;
pub const gestaltOpenTptTCPPresentBit: c_int = 4;
pub const gestaltOpenTptTCPLoadedBit: c_int = 5;
pub const gestaltOpenTptIPXSPXPresentBit: c_int = 6;
pub const gestaltOpenTptIPXSPXLoadedBit: c_int = 7;
const enum_unnamed_475 = c_uint;
pub const gestaltPCCard: c_int = 1885561700;
pub const gestaltCardServicesPresent: c_int = 0;
pub const gestaltPCCardFamilyPresent: c_int = 1;
pub const gestaltPCCardHasPowerControl: c_int = 2;
pub const gestaltPCCardSupportsCardBus: c_int = 3;
const enum_unnamed_476 = c_uint;
pub const gestaltProcClkSpeed: c_int = 1885564011;
const enum_unnamed_477 = c_uint;
pub const gestaltProcClkSpeedMHz: c_int = 1835232363;
const enum_unnamed_478 = c_uint;
pub const gestaltPCXAttr: c_int = 1885567079;
pub const gestaltPCXHas8and16BitFAT: c_int = 0;
pub const gestaltPCXHasProDOS: c_int = 1;
pub const gestaltPCXNewUI: c_int = 2;
pub const gestaltPCXUseICMapping: c_int = 3;
const enum_unnamed_479 = c_uint;
pub const gestaltLogicalPageSize: c_int = 1885827962;
const enum_unnamed_480 = c_uint;
pub const gestaltScreenCaptureMain: c_int = 1885954865;
pub const gestaltScreenCaptureDir: c_int = 1885954866;
const enum_unnamed_481 = c_uint;
pub const gestaltGXPrintingMgrVersion: c_int = 1886218098;
const enum_unnamed_482 = c_uint;
pub const gestaltPopupAttr: c_int = 1886351393;
pub const gestaltPopupPresent: c_int = 0;
const enum_unnamed_483 = c_uint;
pub const gestaltPowerMgrAttr: c_int = 1886353266;
pub const gestaltPMgrExists: c_int = 0;
pub const gestaltPMgrCPUIdle: c_int = 1;
pub const gestaltPMgrSCC: c_int = 2;
pub const gestaltPMgrSound: c_int = 3;
pub const gestaltPMgrDispatchExists: c_int = 4;
pub const gestaltPMgrSupportsAVPowerStateAtSleepWake: c_int = 5;
const enum_unnamed_484 = c_uint;
pub const gestaltPowerMgrVers: c_int = 1886876278;
const enum_unnamed_485 = c_uint;
pub const gestaltPPCToolboxAttr: c_int = 1886413600;
pub const gestaltPPCToolboxPresent: c_int = 0;
pub const gestaltPPCSupportsRealTime: c_int = 4096;
pub const gestaltPPCSupportsIncoming: c_int = 1;
pub const gestaltPPCSupportsOutGoing: c_int = 2;
pub const gestaltPPCSupportsTCP_IP: c_int = 4;
pub const gestaltPPCSupportsIncomingAppleTalk: c_int = 16;
pub const gestaltPPCSupportsIncomingTCP_IP: c_int = 32;
pub const gestaltPPCSupportsOutgoingAppleTalk: c_int = 256;
pub const gestaltPPCSupportsOutgoingTCP_IP: c_int = 512;
const enum_unnamed_486 = c_uint;
pub const gestaltPowerPCProcessorFeatures: c_int = 1886413670;
pub const gestaltPowerPCHasGraphicsInstructions: c_int = 0;
pub const gestaltPowerPCHasSTFIWXInstruction: c_int = 1;
pub const gestaltPowerPCHasSquareRootInstructions: c_int = 2;
pub const gestaltPowerPCHasDCBAInstruction: c_int = 3;
pub const gestaltPowerPCHasVectorInstructions: c_int = 4;
pub const gestaltPowerPCHasDataStreams: c_int = 5;
pub const gestaltPowerPCHas64BitSupport: c_int = 6;
pub const gestaltPowerPCHasDCBTStreams: c_int = 7;
pub const gestaltPowerPCASArchitecture: c_int = 8;
pub const gestaltPowerPCIgnoresDCBST: c_int = 9;
const enum_unnamed_487 = c_uint;
pub const gestaltProcessorType: c_int = 1886547811;
pub const gestalt68000: c_int = 1;
pub const gestalt68010: c_int = 2;
pub const gestalt68020: c_int = 3;
pub const gestalt68030: c_int = 4;
pub const gestalt68040: c_int = 5;
const enum_unnamed_488 = c_uint;
pub const gestaltSDPPromptVersion: c_int = 1886548086;
const enum_unnamed_489 = c_uint;
pub const gestaltParityAttr: c_int = 1886549113;
pub const gestaltHasParityCapability: c_int = 0;
pub const gestaltParityEnabled: c_int = 1;
const enum_unnamed_490 = c_uint;
pub const gestaltQD3DVersion: c_int = 1899197984;
const enum_unnamed_491 = c_uint;
pub const gestaltQD3DViewer: c_int = 1899198051;
pub const gestaltQD3DViewerPresent: c_int = 0;
const enum_unnamed_492 = c_uint;
pub const gestaltQuickdrawVersion: c_int = 1902387232;
pub const gestaltOriginalQD: c_int = 0;
pub const gestalt8BitQD: c_int = 256;
pub const gestalt32BitQD: c_int = 512;
pub const gestalt32BitQD11: c_int = 513;
pub const gestalt32BitQD12: c_int = 544;
pub const gestalt32BitQD13: c_int = 560;
pub const gestaltAllegroQD: c_int = 592;
pub const gestaltMacOSXQD: c_int = 768;
const enum_unnamed_493 = c_uint;
pub const gestaltQD3D: c_int = 1902392164;
pub const gestaltQD3DPresent: c_int = 0;
const enum_unnamed_494 = c_uint;
pub const gestaltGXVersion: c_int = 1902405496;
const enum_unnamed_495 = c_uint;
pub const gestaltQuickdrawFeatures: c_int = 1902408311;
pub const gestaltHasColor: c_int = 0;
pub const gestaltHasDeepGWorlds: c_int = 1;
pub const gestaltHasDirectPixMaps: c_int = 2;
pub const gestaltHasGrayishTextOr: c_int = 3;
pub const gestaltSupportsMirroring: c_int = 4;
pub const gestaltQDHasLongRowBytes: c_int = 5;
const enum_unnamed_496 = c_uint;
pub const gestaltQDTextVersion: c_int = 1902408824;
pub const gestaltOriginalQDText: c_int = 0;
pub const gestaltAllegroQDText: c_int = 256;
pub const gestaltMacOSXQDText: c_int = 512;
const enum_unnamed_497 = c_uint;
pub const gestaltQDTextFeatures: c_int = 1902408806;
pub const gestaltWSIISupport: c_int = 0;
pub const gestaltSbitFontSupport: c_int = 1;
pub const gestaltAntiAliasedTextAvailable: c_int = 2;
pub const gestaltOFA2available: c_int = 3;
pub const gestaltCreatesAliasFontRsrc: c_int = 4;
pub const gestaltNativeType1FontSupport: c_int = 5;
pub const gestaltCanUseCGTextRendering: c_int = 6;
const enum_unnamed_498 = c_uint;
pub const gestaltQuickTimeConferencingInfo: c_int = 1903453033;
const enum_unnamed_499 = c_uint;
pub const gestaltQuickTimeVersion: c_int = 1903454573;
pub const gestaltQuickTime: c_int = 1903454573;
const enum_unnamed_500 = c_uint;
pub const gestaltQuickTimeFeatures: c_int = 1903456883;
pub const gestaltPPCQuickTimeLibPresent: c_int = 0;
const enum_unnamed_501 = c_uint;
pub const gestaltQuickTimeStreamingFeatures: c_int = 1903457126;
const enum_unnamed_502 = c_uint;
pub const gestaltQuickTimeStreamingVersion: c_int = 1903457140;
const enum_unnamed_503 = c_uint;
pub const gestaltQuickTimeThreadSafeFeaturesAttr: c_int = 1903457384;
pub const gestaltQuickTimeThreadSafeICM: c_int = 0;
pub const gestaltQuickTimeThreadSafeMovieToolbox: c_int = 1;
pub const gestaltQuickTimeThreadSafeMovieImport: c_int = 2;
pub const gestaltQuickTimeThreadSafeMovieExport: c_int = 3;
pub const gestaltQuickTimeThreadSafeGraphicsImport: c_int = 4;
pub const gestaltQuickTimeThreadSafeGraphicsExport: c_int = 5;
pub const gestaltQuickTimeThreadSafeMoviePlayback: c_int = 6;
const enum_unnamed_504 = c_uint;
pub const gestaltQTVRMgrAttr: c_int = 1903457906;
pub const gestaltQTVRMgrPresent: c_int = 0;
pub const gestaltQTVRObjMoviesPresent: c_int = 1;
pub const gestaltQTVRCylinderPanosPresent: c_int = 2;
pub const gestaltQTVRCubicPanosPresent: c_int = 3;
const enum_unnamed_505 = c_uint;
pub const gestaltQTVRMgrVers: c_int = 1903457910;
const enum_unnamed_506 = c_uint;
pub const gestaltPhysicalRAMSize: c_int = 1918987552;
const enum_unnamed_507 = c_uint;
pub const gestaltPhysicalRAMSizeInMegabytes: c_int = 1918987629;
const enum_unnamed_508 = c_uint;
pub const gestaltRBVAddr: c_int = 1919055392;
const enum_unnamed_509 = c_uint;
pub const gestaltROMSize: c_int = 1919905056;
const enum_unnamed_510 = c_uint;
pub const gestaltROMVersion: c_int = 1919905142;
const enum_unnamed_511 = c_uint;
pub const gestaltResourceMgrAttr: c_int = 1920168547;
pub const gestaltPartialRsrcs: c_int = 0;
pub const gestaltHasResourceOverrides: c_int = 1;
const enum_unnamed_512 = c_uint;
pub const gestaltResourceMgrBugFixesAttrs: c_int = 1919771239;
pub const gestaltRMForceSysHeapRolledIn: c_int = 0;
pub const gestaltRMFakeAppleMenuItemsRolledIn: c_int = 1;
pub const gestaltSanityCheckResourceFiles: c_int = 2;
pub const gestaltSupportsFSpResourceFileAlreadyOpenBit: c_int = 3;
pub const gestaltRMSupportsFSCalls: c_int = 4;
pub const gestaltRMTypeIndexOrderingReverse: c_int = 8;
const enum_unnamed_513 = c_uint;
pub const gestaltRealtimeMgrAttr: c_int = 1920232818;
pub const gestaltRealtimeMgrPresent: c_int = 0;
const enum_unnamed_514 = c_uint;
pub const gestaltSafeOFAttr: c_int = 1935763045;
pub const gestaltVMZerosPagesBit: c_int = 0;
pub const gestaltInitHeapZerosOutHeapsBit: c_int = 1;
pub const gestaltNewHandleReturnsZeroedMemoryBit: c_int = 2;
pub const gestaltNewPtrReturnsZeroedMemoryBit: c_int = 3;
pub const gestaltFileAllocationZeroedBlocksBit: c_int = 4;
const enum_unnamed_515 = c_uint;
pub const gestaltSCCReadAddr: c_int = 1935893362;
const enum_unnamed_516 = c_uint;
pub const gestaltSCCWriteAddr: c_int = 1935893367;
const enum_unnamed_517 = c_uint;
pub const gestaltScrapMgrAttr: c_int = 1935897185;
pub const gestaltScrapMgrTranslationAware: c_int = 0;
const enum_unnamed_518 = c_uint;
pub const gestaltScriptMgrVersion: c_int = 1935897193;
const enum_unnamed_519 = c_uint;
pub const gestaltScriptCount: c_int = 1935897123;
const enum_unnamed_520 = c_uint;
pub const gestaltSCSI: c_int = 1935897449;
pub const gestaltAsyncSCSI: c_int = 0;
pub const gestaltAsyncSCSIINROM: c_int = 1;
pub const gestaltSCSISlotBoot: c_int = 2;
pub const gestaltSCSIPollSIH: c_int = 3;
const enum_unnamed_521 = c_uint;
pub const gestaltControlStripAttr: c_int = 1935959414;
pub const gestaltControlStripExists: c_int = 0;
pub const gestaltControlStripVersionFixed: c_int = 1;
pub const gestaltControlStripUserFont: c_int = 2;
pub const gestaltControlStripUserHotKey: c_int = 3;
const enum_unnamed_522 = c_uint;
pub const gestaltSDPStandardDirectoryVersion: c_int = 1935963762;
const enum_unnamed_523 = c_uint;
pub const gestaltSerialAttr: c_int = 1936028192;
pub const gestaltHasGPIaToDCDa: c_int = 0;
pub const gestaltHasGPIaToRTxCa: c_int = 1;
pub const gestaltHasGPIbToDCDb: c_int = 2;
pub const gestaltHidePortA: c_int = 3;
pub const gestaltHidePortB: c_int = 4;
pub const gestaltPortADisabled: c_int = 5;
pub const gestaltPortBDisabled: c_int = 6;
const enum_unnamed_524 = c_uint;
pub const gestaltShutdownAttributes: c_int = 1936225652;
pub const gestaltShutdownHassdOnBootVolUnmount: c_int = 0;
const enum_unnamed_525 = c_uint;
pub const gestaltNuBusConnectors: c_int = 1936487523;
const enum_unnamed_526 = c_uint;
pub const gestaltSlotAttr: c_int = 1936486260;
pub const gestaltSlotMgrExists: c_int = 0;
pub const gestaltNuBusPresent: c_int = 1;
pub const gestaltSESlotPresent: c_int = 2;
pub const gestaltSE30SlotPresent: c_int = 3;
pub const gestaltPortableSlotPresent: c_int = 4;
const enum_unnamed_527 = c_uint;
pub const gestaltFirstSlotNumber: c_int = 1936487473;
const enum_unnamed_528 = c_uint;
pub const gestaltSoundAttr: c_int = 1936614432;
pub const gestaltStereoCapability: c_int = 0;
pub const gestaltStereoMixing: c_int = 1;
pub const gestaltSoundIOMgrPresent: c_int = 3;
pub const gestaltBuiltInSoundInput: c_int = 4;
pub const gestaltHasSoundInputDevice: c_int = 5;
pub const gestaltPlayAndRecord: c_int = 6;
pub const gestalt16BitSoundIO: c_int = 7;
pub const gestaltStereoInput: c_int = 8;
pub const gestaltLineLevelInput: c_int = 9;
pub const gestaltSndPlayDoubleBuffer: c_int = 10;
pub const gestaltMultiChannels: c_int = 11;
pub const gestalt16BitAudioSupport: c_int = 12;
const enum_unnamed_529 = c_uint;
pub const gestaltSplitOSAttr: c_int = 1936748403;
pub const gestaltSplitOSBootDriveIsNetworkVolume: c_int = 0;
pub const gestaltSplitOSAware: c_int = 1;
pub const gestaltSplitOSEnablerVolumeIsDifferentFromBootVolume: c_int = 2;
pub const gestaltSplitOSMachineNameSetToNetworkNameTemp: c_int = 3;
pub const gestaltSplitOSMachineNameStartupDiskIsNonPersistent: c_int = 5;
const enum_unnamed_530 = c_uint;
pub const gestaltSMPSPSendLetterVersion: c_int = 1936749420;
const enum_unnamed_531 = c_uint;
pub const gestaltSpeechRecognitionAttr: c_int = 1936880737;
pub const gestaltDesktopSpeechRecognition: c_int = 1;
pub const gestaltTelephoneSpeechRecognition: c_int = 2;
const enum_unnamed_532 = c_uint;
pub const gestaltSpeechRecognitionVersion: c_int = 1936880738;
const enum_unnamed_533 = c_uint;
pub const gestaltSoftwareVendorCode: c_int = 1936875876;
pub const gestaltSoftwareVendorApple: c_int = 1097887852;
pub const gestaltSoftwareVendorLicensee: c_int = 1281584755;
const enum_unnamed_534 = c_uint;
pub const gestaltStandardFileAttr: c_int = 1937007718;
pub const gestaltStandardFile58: c_int = 0;
pub const gestaltStandardFileTranslationAware: c_int = 1;
pub const gestaltStandardFileHasColorIcons: c_int = 2;
pub const gestaltStandardFileUseGenericIcons: c_int = 3;
pub const gestaltStandardFileHasDynamicVolumeAllocation: c_int = 4;
const enum_unnamed_535 = c_uint;
pub const gestaltSysArchitecture: c_int = 1937339233;
pub const gestalt68k: c_int = 1;
pub const gestaltPowerPC: c_int = 2;
pub const gestaltIntel: c_int = 10;
pub const gestaltArm: c_int = 20;
const enum_unnamed_536 = c_uint;
pub const gestaltSystemUpdateVersion: c_int = 1937339253;
const enum_unnamed_537 = c_uint;
pub const gestaltSystemVersion: c_int = 1937339254;
pub const gestaltSystemVersionMajor: c_int = 1937339185;
pub const gestaltSystemVersionMinor: c_int = 1937339186;
pub const gestaltSystemVersionBugFix: c_int = 1937339187;
const enum_unnamed_538 = c_uint;
pub const gestaltToolboxTable: c_int = 1952609396;
const enum_unnamed_539 = c_uint;
pub const gestaltTextEditVersion: c_int = 1952784416;
pub const gestaltTE1: c_int = 1;
pub const gestaltTE2: c_int = 2;
pub const gestaltTE3: c_int = 3;
pub const gestaltTE4: c_int = 4;
pub const gestaltTE5: c_int = 5;
const enum_unnamed_540 = c_uint;
pub const gestaltTE6: c_int = 6;
const enum_unnamed_541 = c_uint;
pub const gestaltTEAttr: c_int = 1952801140;
pub const gestaltTEHasGetHiliteRgn: c_int = 0;
pub const gestaltTESupportsInlineInput: c_int = 1;
pub const gestaltTESupportsTextObjects: c_int = 2;
pub const gestaltTEHasWhiteBackground: c_int = 3;
const enum_unnamed_542 = c_uint;
pub const gestaltTeleMgrAttr: c_int = 1952803941;
pub const gestaltTeleMgrPresent: c_int = 0;
pub const gestaltTeleMgrPowerPCSupport: c_int = 1;
pub const gestaltTeleMgrSoundStreams: c_int = 2;
pub const gestaltTeleMgrAutoAnswer: c_int = 3;
pub const gestaltTeleMgrIndHandset: c_int = 4;
pub const gestaltTeleMgrSilenceDetect: c_int = 5;
pub const gestaltTeleMgrNewTELNewSupport: c_int = 6;
const enum_unnamed_543 = c_uint;
pub const gestaltTermMgrAttr: c_int = 1952805485;
pub const gestaltTermMgrPresent: c_int = 0;
pub const gestaltTermMgrErrorString: c_int = 2;
const enum_unnamed_544 = c_uint;
pub const gestaltThreadMgrAttr: c_int = 1952998515;
pub const gestaltThreadMgrPresent: c_int = 0;
pub const gestaltSpecificMatchSupport: c_int = 1;
pub const gestaltThreadsLibraryPresent: c_int = 2;
const enum_unnamed_545 = c_uint;
pub const gestaltTimeMgrVersion: c_int = 1953326962;
pub const gestaltStandardTimeMgr: c_int = 1;
pub const gestaltRevisedTimeMgr: c_int = 2;
pub const gestaltExtendedTimeMgr: c_int = 3;
pub const gestaltNativeTimeMgr: c_int = 4;
const enum_unnamed_546 = c_uint;
pub const gestaltTSMTEVersion: c_int = 1953322070;
pub const gestaltTSMTE1: c_int = 256;
pub const gestaltTSMTE15: c_int = 336;
pub const gestaltTSMTE152: c_int = 338;
const enum_unnamed_547 = c_uint;
pub const gestaltTSMTEAttr: c_int = 1953322053;
pub const gestaltTSMTEPresent: c_int = 0;
pub const gestaltTSMTE: c_int = 0;
const enum_unnamed_548 = c_uint;
pub const gestaltAVLTreeAttr: c_int = 1953654117;
pub const gestaltAVLTreePresentBit: c_int = 0;
pub const gestaltAVLTreeSupportsHandleBasedTreeBit: c_int = 1;
pub const gestaltAVLTreeSupportsTreeLockingBit: c_int = 2;
const enum_unnamed_549 = c_uint;
pub const gestaltALMAttr: c_int = 1953655152;
pub const gestaltALMPresent: c_int = 0;
pub const gestaltALMHasSFGroup: c_int = 1;
pub const gestaltALMHasCFMSupport: c_int = 2;
pub const gestaltALMHasRescanNotifiers: c_int = 3;
const enum_unnamed_550 = c_uint;
pub const gestaltALMHasSFLocation: c_int = 1;
const enum_unnamed_551 = c_uint;
pub const gestaltTSMgrVersion: c_int = 1953721718;
pub const gestaltTSMgr15: c_int = 336;
pub const gestaltTSMgr20: c_int = 512;
pub const gestaltTSMgr22: c_int = 544;
pub const gestaltTSMgr23: c_int = 560;
const enum_unnamed_552 = c_uint;
pub const gestaltTSMgrAttr: c_int = 1953721697;
pub const gestaltTSMDisplayMgrAwareBit: c_int = 0;
pub const gestaltTSMdoesTSMTEBit: c_int = 1;
const enum_unnamed_553 = c_uint;
pub const gestaltSpeechAttr: c_int = 1953788771;
pub const gestaltSpeechMgrPresent: c_int = 0;
pub const gestaltSpeechHasPPCGlue: c_int = 1;
const enum_unnamed_554 = c_uint;
pub const gestaltTVAttr: c_int = 1953898528;
pub const gestaltHasTVTuner: c_int = 0;
pub const gestaltHasSoundFader: c_int = 1;
pub const gestaltHasHWClosedCaptioning: c_int = 2;
pub const gestaltHasIRRemote: c_int = 3;
pub const gestaltHasVidDecoderScaler: c_int = 4;
pub const gestaltHasStereoDecoder: c_int = 5;
pub const gestaltHasSerialFader: c_int = 6;
pub const gestaltHasFMTuner: c_int = 7;
pub const gestaltHasSystemIRFunction: c_int = 8;
pub const gestaltIRDisabled: c_int = 9;
pub const gestaltINeedIRPowerOffConfirm: c_int = 10;
pub const gestaltHasZoomedVideo: c_int = 11;
const enum_unnamed_555 = c_uint;
pub const gestaltATSUVersion: c_int = 1969845110;
pub const gestaltOriginalATSUVersion: c_int = 65536;
pub const gestaltATSUUpdate1: c_int = 131072;
pub const gestaltATSUUpdate2: c_int = 196608;
pub const gestaltATSUUpdate3: c_int = 262144;
pub const gestaltATSUUpdate4: c_int = 327680;
pub const gestaltATSUUpdate5: c_int = 393216;
pub const gestaltATSUUpdate6: c_int = 458752;
pub const gestaltATSUUpdate7: c_int = 524288;
const enum_unnamed_556 = c_uint;
pub const gestaltATSUFeatures: c_int = 1969845094;
pub const gestaltATSUTrackingFeature: c_int = 1;
pub const gestaltATSUMemoryFeature: c_int = 1;
pub const gestaltATSUFallbacksFeature: c_int = 1;
pub const gestaltATSUGlyphBoundsFeature: c_int = 1;
pub const gestaltATSULineControlFeature: c_int = 1;
pub const gestaltATSULayoutCreateAndCopyFeature: c_int = 1;
pub const gestaltATSULayoutCacheClearFeature: c_int = 1;
pub const gestaltATSUTextLocatorUsageFeature: c_int = 2;
pub const gestaltATSULowLevelOrigFeatures: c_int = 4;
pub const gestaltATSUFallbacksObjFeatures: c_int = 8;
pub const gestaltATSUIgnoreLeadingFeature: c_int = 8;
pub const gestaltATSUByCharacterClusterFeature: c_int = 16;
pub const gestaltATSUAscentDescentControlsFeature: c_int = 16;
pub const gestaltATSUHighlightInactiveTextFeature: c_int = 16;
pub const gestaltATSUPositionToCursorFeature: c_int = 16;
pub const gestaltATSUBatchBreakLinesFeature: c_int = 16;
pub const gestaltATSUTabSupportFeature: c_int = 16;
pub const gestaltATSUDirectAccess: c_int = 16;
pub const gestaltATSUDecimalTabFeature: c_int = 32;
pub const gestaltATSUBiDiCursorPositionFeature: c_int = 32;
pub const gestaltATSUNearestCharLineBreakFeature: c_int = 32;
pub const gestaltATSUHighlightColorControlFeature: c_int = 32;
pub const gestaltATSUUnderlineOptionsStyleFeature: c_int = 32;
pub const gestaltATSUStrikeThroughStyleFeature: c_int = 32;
pub const gestaltATSUDropShadowStyleFeature: c_int = 32;
const enum_unnamed_557 = c_uint;
pub const gestaltUSBAttr: c_int = 1970496032;
pub const gestaltUSBPresent: c_int = 0;
pub const gestaltUSBHasIsoch: c_int = 1;
const enum_unnamed_558 = c_uint;
pub const gestaltUSBVersion: c_int = 1970496118;
const enum_unnamed_559 = c_uint;
pub const gestaltVersion: c_int = 1986359923;
pub const gestaltValueImplementedVers: c_int = 5;
const enum_unnamed_560 = c_uint;
pub const gestaltVIA1Addr: c_int = 1986617649;
const enum_unnamed_561 = c_uint;
pub const gestaltVIA2Addr: c_int = 1986617650;
const enum_unnamed_562 = c_uint;
pub const gestaltVMAttr: c_int = 1986863136;
pub const gestaltVMPresent: c_int = 0;
pub const gestaltVMHasLockMemoryForOutput: c_int = 1;
pub const gestaltVMFilemappingOn: c_int = 3;
pub const gestaltVMHasPagingControl: c_int = 4;
const enum_unnamed_563 = c_uint;
pub const gestaltVMInfoType: c_int = 1986881902;
pub const gestaltVMInfoSizeStorageType: c_int = 0;
pub const gestaltVMInfoSizeType: c_int = 1;
pub const gestaltVMInfoSimpleType: c_int = 2;
pub const gestaltVMInfoNoneType: c_int = 3;
const enum_unnamed_564 = c_uint;
pub const gestaltVMBackingStoreFileRefNum: c_int = 1986880115;
const enum_unnamed_565 = c_uint;
pub const gestaltALMVers: c_int = 2002873451;
const enum_unnamed_566 = c_uint;
pub const gestaltWindowMgrAttr: c_int = 2003398244;
pub const gestaltWindowMgrPresent: c_int = 1;
pub const gestaltWindowMgrPresentBit: c_int = 0;
pub const gestaltExtendedWindowAttributes: c_int = 1;
pub const gestaltExtendedWindowAttributesBit: c_int = 1;
pub const gestaltHasFloatingWindows: c_int = 2;
pub const gestaltHasFloatingWindowsBit: c_int = 2;
pub const gestaltHasWindowBuffering: c_int = 3;
pub const gestaltHasWindowBufferingBit: c_int = 3;
pub const gestaltWindowLiveResizeBit: c_int = 4;
pub const gestaltWindowMinimizeToDockBit: c_int = 5;
pub const gestaltHasWindowShadowsBit: c_int = 6;
pub const gestaltSheetsAreWindowModalBit: c_int = 7;
pub const gestaltFrontWindowMayBeHiddenBit: c_int = 8;
pub const gestaltWindowMgrPresentMask: c_int = 1;
pub const gestaltExtendedWindowAttributesMask: c_int = 2;
pub const gestaltHasFloatingWindowsMask: c_int = 4;
pub const gestaltHasWindowBufferingMask: c_int = 8;
pub const gestaltWindowLiveResizeMask: c_int = 16;
pub const gestaltWindowMinimizeToDockMask: c_int = 32;
pub const gestaltHasWindowShadowsMask: c_int = 64;
pub const gestaltSheetsAreWindowModalMask: c_int = 128;
pub const gestaltFrontWindowMayBeHiddenMask: c_int = 256;
const enum_unnamed_567 = c_uint;
pub const gestaltHasSingleWindowModeBit: c_int = 8;
pub const gestaltHasSingleWindowModeMask: c_int = 256;
const enum_unnamed_568 = c_uint;
pub const gestaltX86Features: c_int = 2016949862;
pub const gestaltX86HasFPU: c_int = 0;
pub const gestaltX86HasVME: c_int = 1;
pub const gestaltX86HasDE: c_int = 2;
pub const gestaltX86HasPSE: c_int = 3;
pub const gestaltX86HasTSC: c_int = 4;
pub const gestaltX86HasMSR: c_int = 5;
pub const gestaltX86HasPAE: c_int = 6;
pub const gestaltX86HasMCE: c_int = 7;
pub const gestaltX86HasCX8: c_int = 8;
pub const gestaltX86HasAPIC: c_int = 9;
pub const gestaltX86HasSEP: c_int = 11;
pub const gestaltX86HasMTRR: c_int = 12;
pub const gestaltX86HasPGE: c_int = 13;
pub const gestaltX86HasMCA: c_int = 14;
pub const gestaltX86HasCMOV: c_int = 15;
pub const gestaltX86HasPAT: c_int = 16;
pub const gestaltX86HasPSE36: c_int = 17;
pub const gestaltX86HasPSN: c_int = 18;
pub const gestaltX86HasCLFSH: c_int = 19;
pub const gestaltX86Serviced20: c_int = 20;
pub const gestaltX86HasDS: c_int = 21;
pub const gestaltX86ResACPI: c_int = 22;
pub const gestaltX86HasMMX: c_int = 23;
pub const gestaltX86HasFXSR: c_int = 24;
pub const gestaltX86HasSSE: c_int = 25;
pub const gestaltX86HasSSE2: c_int = 26;
pub const gestaltX86HasSS: c_int = 27;
pub const gestaltX86HasHTT: c_int = 28;
pub const gestaltX86HasTM: c_int = 29;
const enum_unnamed_569 = c_uint;
pub const gestaltX86AdditionalFeatures: c_int = 2016949857;
pub const gestaltX86HasSSE3: c_int = 0;
pub const gestaltX86HasMONITOR: c_int = 3;
pub const gestaltX86HasDSCPL: c_int = 4;
pub const gestaltX86HasVMX: c_int = 5;
pub const gestaltX86HasSMX: c_int = 6;
pub const gestaltX86HasEST: c_int = 7;
pub const gestaltX86HasTM2: c_int = 8;
pub const gestaltX86HasSupplementalSSE3: c_int = 9;
pub const gestaltX86HasCID: c_int = 10;
pub const gestaltX86HasCX16: c_int = 13;
pub const gestaltX86HasxTPR: c_int = 14;
const enum_unnamed_570 = c_uint;
pub const gestaltTranslationAttr: c_int = 2020368756;
pub const gestaltTranslationMgrExists: c_int = 0;
pub const gestaltTranslationMgrHintOrder: c_int = 1;
pub const gestaltTranslationPPCAvail: c_int = 2;
pub const gestaltTranslationGetPathAPIAvail: c_int = 3;
const enum_unnamed_571 = c_uint;
pub const gestaltExtToolboxTable: c_int = 2020897908;
const enum_unnamed_572 = c_uint;
pub const gestaltUSBPrinterSharingVersion: c_int = 2053204768;
pub const gestaltUSBPrinterSharingVersionMask: c_int = 65535;
pub const gestaltUSBPrinterSharingAttr: c_int = 2053204768;
pub const gestaltUSBPrinterSharingAttrMask: c_int = -65536;
pub const gestaltUSBPrinterSharingAttrRunning: c_int = -2147483648;
pub const gestaltUSBPrinterSharingAttrBooted: c_int = 1073741824;
const enum_unnamed_573 = c_int;
pub const gestaltWorldScriptIIVersion: c_int = 1685026146;
pub const gestaltWorldScriptIIAttr: c_int = 2004050292;
pub const gestaltWSIICanPrintWithoutPrGeneralBit: c_int = 0;
const enum_unnamed_574 = c_uint;
pub const kMacMemoryMaximumMemoryManagerBlockSize: c_int = 2147483632;
const enum_unnamed_575 = c_uint;
pub const defaultPhysicalEntryCount: c_int = 8;
const enum_unnamed_576 = c_uint;
pub const kPageInMemory: c_int = 0;
pub const kPageOnDisk: c_int = 1;
pub const kNotPaged: c_int = 2;
const enum_unnamed_577 = c_uint;
pub const k32BitHeap: c_int = 1;
pub const kNewStyleHeap: c_int = 2;
pub const kNewDebugHeap: c_int = 4;
const enum_unnamed_578 = c_uint;
pub const kHandleIsResourceBit: c_int = 5;
pub const kHandlePurgeableBit: c_int = 6;
pub const kHandleLockedBit: c_int = 7;
const enum_unnamed_579 = c_uint;
pub const kHandleIsResourceMask: c_int = 32;
pub const kHandlePurgeableMask: c_int = 64;
pub const kHandleLockedMask: c_int = 128;
const enum_unnamed_580 = c_uint;
pub extern fn MemError() OSErr;
pub extern fn LMGetMemErr() SInt16;
pub extern fn LMSetMemErr(value: SInt16) void;
pub extern fn NewHandle(byteCount: Size) Handle;
pub extern fn NewHandleClear(byteCount: Size) Handle;
pub extern fn RecoverHandle(p: Ptr) Handle;
pub extern fn NewPtr(byteCount: Size) Ptr;
pub extern fn NewPtrClear(byteCount: Size) Ptr;
pub extern fn NewEmptyHandle() Handle;
pub extern fn HLock(h: Handle) void;
pub extern fn HLockHi(h: Handle) void;
pub extern fn HUnlock(h: Handle) void;
pub extern fn TempNewHandle(logicalSize: Size, resultCode: [*c]OSErr) Handle;
pub extern fn DisposePtr(p: Ptr) void;
pub extern fn GetPtrSize(p: Ptr) Size;
pub extern fn SetPtrSize(p: Ptr, newSize: Size) void;
pub extern fn DisposeHandle(h: Handle) void;
pub extern fn SetHandleSize(h: Handle, newSize: Size) void;
pub extern fn GetHandleSize(h: Handle) Size;
pub extern fn ReallocateHandle(h: Handle, byteCount: Size) void;
pub extern fn EmptyHandle(h: Handle) void;
pub extern fn HSetRBit(h: Handle) void;
pub extern fn HClrRBit(h: Handle) void;
pub extern fn HGetState(h: Handle) SInt8;
pub extern fn HSetState(h: Handle, flags: SInt8) void;
pub extern fn HandToHand(theHndl: [*c]Handle) OSErr;
pub extern fn PtrToXHand(srcPtr: ?*const anyopaque, dstHndl: Handle, size: c_long) OSErr;
pub extern fn PtrToHand(srcPtr: ?*const anyopaque, dstHndl: [*c]Handle, size: c_long) OSErr;
pub extern fn HandAndHand(hand1: Handle, hand2: Handle) OSErr;
pub extern fn PtrAndHand(ptr1: ?*const anyopaque, hand2: Handle, size: c_long) OSErr;
pub extern fn IsHeapValid() Boolean;
pub extern fn IsHandleValid(h: Handle) Boolean;
pub extern fn IsPointerValid(p: Ptr) Boolean;
pub extern fn S64Max() SInt64;
pub extern fn S64Min() SInt64;
pub extern fn S64Add(left: SInt64, right: SInt64) SInt64;
pub extern fn S64Subtract(left: SInt64, right: SInt64) SInt64;
pub extern fn S64Negate(value: SInt64) SInt64;
pub extern fn S64Multiply(left: SInt64, right: SInt64) SInt64;
pub extern fn S64Mod(dividend: SInt64, divisor: SInt64) SInt64;
pub extern fn S64Divide(dividend: SInt64, divisor: SInt64, remainder: [*c]SInt64) SInt64;
pub extern fn S64Div(dividend: SInt64, divisor: SInt64) SInt64;
pub extern fn S64Set(value: SInt32) SInt64;
pub extern fn S64SetU(value: UInt32) SInt64;
pub extern fn S32Set(value: SInt64) SInt32;
pub extern fn S64And(left: SInt64, right: SInt64) Boolean;
pub extern fn S64Or(left: SInt64, right: SInt64) Boolean;
pub extern fn S64Eor(left: SInt64, right: SInt64) Boolean;
pub extern fn S64Not(value: SInt64) Boolean;
pub extern fn S64Compare(left: SInt64, right: SInt64) SInt32;
pub extern fn S64BitwiseAnd(left: SInt64, right: SInt64) SInt64;
pub extern fn S64BitwiseOr(left: SInt64, right: SInt64) SInt64;
pub extern fn S64BitwiseEor(left: SInt64, right: SInt64) SInt64;
pub extern fn S64BitwiseNot(value: SInt64) SInt64;
pub extern fn S64ShiftRight(value: SInt64, shift: UInt32) SInt64;
pub extern fn S64ShiftLeft(value: SInt64, shift: UInt32) SInt64;
pub extern fn SInt64ToLongDouble(value: SInt64) c_longdouble;
pub extern fn LongDoubleToSInt64(value: c_longdouble) SInt64;
pub extern fn U64Max() UInt64;
pub extern fn U64Add(left: UInt64, right: UInt64) UInt64;
pub extern fn U64Subtract(left: UInt64, right: UInt64) UInt64;
pub extern fn U64Multiply(left: UInt64, right: UInt64) UInt64;
pub extern fn U64Mod(dividend: UInt64, divisor: UInt64) UInt64;
pub extern fn U64Divide(dividend: UInt64, divisor: UInt64, remainder: [*c]UInt64) UInt64;
pub extern fn U64Div(dividend: UInt64, divisor: UInt64) UInt64;
pub extern fn U64Set(value: SInt32) UInt64;
pub extern fn U64SetU(value: UInt32) UInt64;
pub extern fn U32SetU(value: UInt64) UInt32;
pub extern fn U64And(left: UInt64, right: UInt64) Boolean;
pub extern fn U64Or(left: UInt64, right: UInt64) Boolean;
pub extern fn U64Eor(left: UInt64, right: UInt64) Boolean;
pub extern fn U64Not(value: UInt64) Boolean;
pub extern fn U64Compare(left: UInt64, right: UInt64) SInt32;
pub extern fn U64BitwiseAnd(left: UInt64, right: UInt64) UInt64;
pub extern fn U64BitwiseOr(left: UInt64, right: UInt64) UInt64;
pub extern fn U64BitwiseEor(left: UInt64, right: UInt64) UInt64;
pub extern fn U64BitwiseNot(value: UInt64) UInt64;
pub extern fn U64ShiftRight(value: UInt64, shift: UInt32) UInt64;
pub extern fn U64ShiftLeft(value: UInt64, shift: UInt32) UInt64;
pub extern fn UInt64ToLongDouble(value: UInt64) c_longdouble;
pub extern fn LongDoubleToUInt64(value: c_longdouble) UInt64;
pub extern fn UInt64ToSInt64(value: UInt64) SInt64;
pub extern fn SInt64ToUInt64(value: SInt64) UInt64;
pub fn SInt64ToWide(arg_s: SInt64) callconv(.C) wide {
    var s = arg_s;
    var result: wide = undefined;
    result.hi = @bitCast(SInt32, @truncate(c_uint, (@bitCast(UInt64, s) >> @intCast(@import("std").math.Log2Int(UInt64), 32)) & @bitCast(c_ulonglong, @as(c_ulonglong, @as(c_ulong, 4294967295)))));
    result.lo = @bitCast(UInt32, @truncate(c_uint, @bitCast(UInt64, s) & @bitCast(c_ulonglong, @as(c_ulonglong, @as(c_ulong, 4294967295)))));
    return result;
}
pub fn WideToSInt64(arg_w: wide) callconv(.C) SInt64 {
    var w = arg_w;
    var result: SInt64 = @bitCast(SInt64, @as(c_longlong, w.hi));
    result = (result << @intCast(@import("std").math.Log2Int(SInt64), 32)) | @bitCast(c_longlong, @as(c_ulonglong, w.lo));
    return result;
}
pub fn UInt64ToUnsignedWide(arg_u: UInt64) callconv(.C) UnsignedWide {
    var u = arg_u;
    var result: UnsignedWide = undefined;
    result.hi = @bitCast(UInt32, @truncate(c_uint, (u >> @intCast(@import("std").math.Log2Int(UInt64), 32)) & @bitCast(c_ulonglong, @as(c_ulonglong, @as(c_ulong, 4294967295)))));
    result.lo = @bitCast(UInt32, @truncate(c_uint, u & @bitCast(c_ulonglong, @as(c_ulonglong, @as(c_ulong, 4294967295)))));
    return result;
}
pub fn UnsignedWideToUInt64(arg_uw: UnsignedWide) callconv(.C) UInt64 {
    var uw = arg_uw;
    var result: UInt64 = @bitCast(UInt64, @as(c_ulonglong, uw.hi));
    result = (result << @intCast(@import("std").math.Log2Int(UInt64), 32)) | @bitCast(c_ulonglong, @as(c_ulonglong, uw.lo));
    return result;
}
pub extern fn CSBackupSetItemExcluded(item: CFURLRef, exclude: Boolean, excludeByPath: Boolean) OSStatus;
pub extern fn CSBackupIsItemExcluded(item: CFURLRef, excludeByPath: [*c]Boolean) Boolean;
pub const kCSDiskSpaceRecoveryOptionNoUI: c_int = 1;
const enum_unnamed_581 = c_uint;
pub const CSDiskSpaceRecoveryOptions = c_int; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/DiskSpaceRecovery.h:52:16: warning: unsupported type: 'BlockPointer'
pub const CSDiskSpaceRecoveryCallback = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/DiskSpaceRecovery.h:52:16
pub extern fn CSDiskSpaceStartRecovery(volumeURL: CFURLRef, bytesNeeded: UInt64, options: CSDiskSpaceRecoveryOptions, outOperationUUID: [*c]CFUUIDRef, callbackQueue: dispatch_queue_t, callback: CSDiskSpaceRecoveryCallback) void;
pub extern fn CSDiskSpaceCancelRecovery(operationUUID: CFUUIDRef) void;
pub extern fn CSDiskSpaceGetRecoveryEstimate(volumeURL: CFURLRef) UInt64;
pub const ToggleResults = SInt16;
pub const toggleUndefined: c_int = 0;
pub const toggleOK: c_int = 1;
pub const toggleBadField: c_int = 2;
pub const toggleBadDelta: c_int = 3;
pub const toggleBadChar: c_int = 4;
pub const toggleUnknown: c_int = 5;
pub const toggleBadNum: c_int = 6;
pub const toggleOutOfRange: c_int = 7;
pub const toggleErr3: c_int = 7;
pub const toggleErr4: c_int = 8;
pub const toggleErr5: c_int = 9;
const enum_unnamed_582 = c_uint;
pub const smallDateBit: c_int = 31;
pub const togChar12HourBit: c_int = 30;
pub const togCharZCycleBit: c_int = 29;
pub const togDelta12HourBit: c_int = 28;
pub const genCdevRangeBit: c_int = 27;
pub const validDateFields: c_int = -1;
pub const maxDateField: c_int = 10;
const enum_unnamed_583 = c_int;
pub const eraMask: c_int = 1;
pub const yearMask: c_int = 2;
pub const monthMask: c_int = 4;
pub const dayMask: c_int = 8;
pub const hourMask: c_int = 16;
pub const minuteMask: c_int = 32;
pub const secondMask: c_int = 64;
pub const dayOfWeekMask: c_int = 128;
pub const dayOfYearMask: c_int = 256;
pub const weekOfYearMask: c_int = 512;
pub const pmMask: c_int = 1024;
pub const dateStdMask: c_int = 127;
const enum_unnamed_584 = c_uint;
pub const LongDateField = SInt8;
pub const eraField: c_int = 0;
pub const yearField: c_int = 1;
pub const monthField: c_int = 2;
pub const dayField: c_int = 3;
pub const hourField: c_int = 4;
pub const minuteField: c_int = 5;
pub const secondField: c_int = 6;
pub const dayOfWeekField: c_int = 7;
pub const dayOfYearField: c_int = 8;
pub const weekOfYearField: c_int = 9;
pub const pmField: c_int = 10;
pub const res1Field: c_int = 11;
pub const res2Field: c_int = 12;
pub const res3Field: c_int = 13;
const enum_unnamed_585 = c_uint;
pub const DateForm = SInt8;
pub const shortDate: c_int = 0;
pub const longDate: c_int = 1;
pub const abbrevDate: c_int = 2;
const enum_unnamed_586 = c_uint;
pub const fatalDateTime: c_int = 32768;
pub const longDateFound: c_int = 1;
pub const leftOverChars: c_int = 2;
pub const sepNotIntlSep: c_int = 4;
pub const fieldOrderNotIntl: c_int = 8;
pub const extraneousStrings: c_int = 16;
pub const tooManySeps: c_int = 32;
pub const sepNotConsistent: c_int = 64;
pub const tokenErr: c_int = 33024;
pub const cantReadUtilities: c_int = 33280;
pub const dateTimeNotFound: c_int = 33792;
pub const dateTimeInvalid: c_int = 34816;
const enum_unnamed_587 = c_uint;
pub const StringToDateStatus = c_short;
pub const String2DateStatus = StringToDateStatus;
pub const struct_DateCacheRecord = extern struct {
    hidden: [256]c_short,
};
pub const DateCacheRecord = struct_DateCacheRecord;
pub const DateCachePtr = [*c]DateCacheRecord;
pub const struct_DateTimeRec = extern struct {
    year: c_short,
    month: c_short,
    day: c_short,
    hour: c_short,
    minute: c_short,
    second: c_short,
    dayOfWeek: c_short,
};
pub const DateTimeRec = struct_DateTimeRec;
pub const LongDateTime = SInt64;
const struct_unnamed_588 = extern struct {
    lLow: UInt32,
    lHigh: UInt32,
};
pub const union_LongDateCvt = extern union {
    c: SInt64,
    hl: struct_unnamed_588,
};
pub const LongDateCvt = union_LongDateCvt;
const struct_unnamed_589 = extern struct {
    era: c_short,
    year: c_short,
    month: c_short,
    day: c_short,
    hour: c_short,
    minute: c_short,
    second: c_short,
    dayOfWeek: c_short,
    dayOfYear: c_short,
    weekOfYear: c_short,
    pm: c_short,
    res1: c_short,
    res2: c_short,
    res3: c_short,
};
const struct_unnamed_590 = extern struct {
    eraAlt: c_short,
    oldDate: DateTimeRec,
};
pub const union_LongDateRec = extern union {
    ld: struct_unnamed_589,
    list: [14]c_short,
    od: struct_unnamed_590,
};
pub const LongDateRec = union_LongDateRec;
pub const DateDelta = SInt8;
pub const struct_TogglePB = extern struct {
    togFlags: c_long,
    amChars: ResType,
    pmChars: ResType,
    reserved: [4]c_long,
};
pub const TogglePB = struct_TogglePB;
pub extern fn UCConvertUTCDateTimeToCFAbsoluteTime(iUTCDate: [*c]const UTCDateTime, oCFTime: [*c]CFAbsoluteTime) OSStatus;
pub extern fn UCConvertSecondsToCFAbsoluteTime(iSeconds: UInt32, oCFTime: [*c]CFAbsoluteTime) OSStatus;
pub extern fn UCConvertLongDateTimeToCFAbsoluteTime(iLongTime: LongDateTime, oCFTime: [*c]CFAbsoluteTime) OSStatus;
pub extern fn UCConvertCFAbsoluteTimeToUTCDateTime(iCFTime: CFAbsoluteTime, oUTCDate: [*c]UTCDateTime) OSStatus;
pub extern fn UCConvertCFAbsoluteTimeToSeconds(iCFTime: CFAbsoluteTime, oSeconds: [*c]UInt32) OSStatus;
pub extern fn UCConvertCFAbsoluteTimeToLongDateTime(iCFTime: CFAbsoluteTime, oLongDate: [*c]LongDateTime) OSStatus;
pub const sortsBefore: c_int = -1;
pub const sortsEqual: c_int = 0;
pub const sortsAfter: c_int = 1;
const enum_unnamed_591 = c_int;
pub const dummyType: c_int = 0;
pub const vType: c_int = 1;
pub const ioQType: c_int = 2;
pub const drvQType: c_int = 3;
pub const evType: c_int = 4;
pub const fsQType: c_int = 5;
pub const sIQType: c_int = 6;
pub const dtQType: c_int = 7;
pub const nmType: c_int = 8;
const enum_unnamed_592 = c_uint;
pub const QTypes = SignedByte;
pub const struct_QElem = extern struct {
    qLink: [*c]struct_QElem,
    qType: c_short,
    qData: [1]c_short,
};
pub const QElem = struct_QElem;
pub const QElemPtr = [*c]QElem;
pub const struct_QHdr = extern struct {
    qFlags: c_short,
    qHead: QElemPtr,
    qTail: QElemPtr,
};
pub const QHdr = struct_QHdr;
pub const QHdrPtr = [*c]QHdr;
const struct_unnamed_594 = extern struct {
    pad: [3]SInt8,
    Delta: SInt8,
};
const union_unnamed_593 = extern union {
    gmtDelta: c_long,
    dls: struct_unnamed_594,
};
pub const struct_MachineLocation = extern struct {
    latitude: Fract,
    longitude: Fract,
    u: union_unnamed_593,
};
pub const MachineLocation = struct_MachineLocation;
pub extern fn IsMetric() Boolean;
pub extern fn Delay(numTicks: c_ulong, finalTicks: [*c]c_ulong) void;
pub extern fn Enqueue(qElement: QElemPtr, qHeader: QHdrPtr) void;
pub extern fn Dequeue(qElement: QElemPtr, qHeader: QHdrPtr) OSErr;
pub extern fn ReadLocation(loc: [*c]MachineLocation) void;
pub extern fn TickCount() UInt32;
pub extern fn CSCopyUserName(useShortName: Boolean) CFStringRef;
pub extern fn CSCopyMachineName() CFStringRef;
pub const useFree: c_int = 0;
pub const useATalk: c_int = 1;
pub const useAsync: c_int = 2;
pub const useExtClk: c_int = 3;
pub const useMIDI: c_int = 4;
const enum_unnamed_595 = c_uint;
pub const false32b: c_int = 0;
pub const true32b: c_int = 1;
const enum_unnamed_596 = c_uint;
pub const SysPPtr = ?*anyopaque;
pub const DeferredTaskProcPtr = ?*const fn (c_long) callconv(.C) void;
pub const DeferredTaskUPP = DeferredTaskProcPtr;
pub extern fn NewDeferredTaskUPP(userRoutine: DeferredTaskProcPtr) DeferredTaskUPP;
pub extern fn DisposeDeferredTaskUPP(userUPP: DeferredTaskUPP) void;
pub extern fn InvokeDeferredTaskUPP(dtParam: c_long, userUPP: DeferredTaskUPP) void;
pub const struct_DeferredTask = extern struct {
    qLink: QElemPtr,
    qType: c_short,
    dtFlags: c_short,
    dtAddr: DeferredTaskUPP,
    dtParam: c_long,
    dtReserved: c_long,
};
pub const DeferredTask = struct_DeferredTask;
pub const DeferredTaskPtr = [*c]DeferredTask;
pub const struct_vm_statistics = extern struct {
    free_count: natural_t,
    active_count: natural_t,
    inactive_count: natural_t,
    wire_count: natural_t,
    zero_fill_count: natural_t,
    reactivations: natural_t,
    pageins: natural_t,
    pageouts: natural_t,
    faults: natural_t,
    cow_faults: natural_t,
    lookups: natural_t,
    hits: natural_t,
    purgeable_count: natural_t,
    purges: natural_t,
    speculative_count: natural_t,
};
pub const vm_statistics_t = [*c]struct_vm_statistics;
pub const vm_statistics_data_t = struct_vm_statistics;
pub const struct_vm_statistics64 = extern struct {
    free_count: natural_t,
    active_count: natural_t,
    inactive_count: natural_t,
    wire_count: natural_t,
    zero_fill_count: u64,
    reactivations: u64,
    pageins: u64,
    pageouts: u64,
    faults: u64,
    cow_faults: u64,
    lookups: u64,
    hits: u64,
    purges: u64,
    purgeable_count: natural_t,
    speculative_count: natural_t,
    decompressions: u64,
    compressions: u64,
    swapins: u64,
    swapouts: u64,
    compressor_page_count: natural_t,
    throttled_count: natural_t,
    external_page_count: natural_t,
    internal_page_count: natural_t,
    total_uncompressed_pages_in_compressor: u64,
};
pub const vm_statistics64_t = [*c]struct_vm_statistics64;
pub const vm_statistics64_data_t = struct_vm_statistics64;
pub extern fn vm_stats(info: ?*anyopaque, count: [*c]c_uint) kern_return_t;
pub const struct_vm_extmod_statistics = extern struct {
    task_for_pid_count: i64,
    task_for_pid_caller_count: i64,
    thread_creation_count: i64,
    thread_creation_caller_count: i64,
    thread_set_state_count: i64,
    thread_set_state_caller_count: i64,
};
pub const vm_extmod_statistics_t = [*c]struct_vm_extmod_statistics;
pub const vm_extmod_statistics_data_t = struct_vm_extmod_statistics;
pub const struct_vm_purgeable_stat = extern struct {
    count: u64,
    size: u64,
};
pub const vm_purgeable_stat_t = struct_vm_purgeable_stat;
pub const struct_vm_purgeable_info = extern struct {
    fifo_data: [8]vm_purgeable_stat_t,
    obsolete_data: vm_purgeable_stat_t,
    lifo_data: [8]vm_purgeable_stat_t,
};
pub const vm_purgeable_info_t = [*c]struct_vm_purgeable_info;
pub const kGUARD_EXC_DEALLOC_GAP: c_int = 1;
pub const enum_virtual_memory_guard_exception_codes = c_uint;
pub const host_info_t = [*c]integer_t;
pub const host_info64_t = [*c]integer_t;
pub const host_info_data_t = [1024]integer_t;
pub const kernel_version_t = [512]u8;
pub const kernel_boot_info_t = [4096]u8;
pub const host_flavor_t = integer_t;
pub const struct_host_can_has_debugger_info = extern struct {
    can_has_debugger: boolean_t,
};
pub const host_can_has_debugger_info_data_t = struct_host_can_has_debugger_info;
pub const host_can_has_debugger_info_t = [*c]struct_host_can_has_debugger_info;
pub const struct_host_basic_info = extern struct {
    max_cpus: integer_t,
    avail_cpus: integer_t,
    memory_size: natural_t,
    cpu_type: cpu_type_t,
    cpu_subtype: cpu_subtype_t,
    cpu_threadtype: cpu_threadtype_t,
    physical_cpu: integer_t,
    physical_cpu_max: integer_t,
    logical_cpu: integer_t,
    logical_cpu_max: integer_t,
    max_mem: u64,
};
pub const host_basic_info_data_t = struct_host_basic_info;
pub const host_basic_info_t = [*c]struct_host_basic_info;
pub const struct_host_sched_info = extern struct {
    min_timeout: integer_t,
    min_quantum: integer_t,
};
pub const host_sched_info_data_t = struct_host_sched_info;
pub const host_sched_info_t = [*c]struct_host_sched_info;
pub const struct_kernel_resource_sizes = extern struct {
    task: natural_t,
    thread: natural_t,
    port: natural_t,
    memory_region: natural_t,
    memory_object: natural_t,
};
pub const kernel_resource_sizes_data_t = struct_kernel_resource_sizes;
pub const kernel_resource_sizes_t = [*c]struct_kernel_resource_sizes;
pub const struct_host_priority_info = extern struct {
    kernel_priority: integer_t,
    system_priority: integer_t,
    server_priority: integer_t,
    user_priority: integer_t,
    depress_priority: integer_t,
    idle_priority: integer_t,
    minimum_priority: integer_t,
    maximum_priority: integer_t,
};
pub const host_priority_info_data_t = struct_host_priority_info;
pub const host_priority_info_t = [*c]struct_host_priority_info;
pub const struct_host_load_info = extern struct {
    avenrun: [3]integer_t,
    mach_factor: [3]integer_t,
};
pub const host_load_info_data_t = struct_host_load_info;
pub const host_load_info_t = [*c]struct_host_load_info;
pub const host_purgable_info_data_t = struct_vm_purgeable_info;
pub const host_purgable_info_t = [*c]struct_vm_purgeable_info;
pub const struct_host_cpu_load_info = extern struct {
    cpu_ticks: [4]natural_t,
};
pub const host_cpu_load_info_data_t = struct_host_cpu_load_info;
pub const host_cpu_load_info_t = [*c]struct_host_cpu_load_info;
pub const struct_host_preferred_user_arch = extern struct {
    cpu_type: cpu_type_t,
    cpu_subtype: cpu_subtype_t,
};
pub const host_preferred_user_arch_data_t = struct_host_preferred_user_arch;
pub const host_preferred_user_arch_t = [*c]struct_host_preferred_user_arch;
pub const vm_prot_t = c_int;
pub const vm_sync_t = c_uint;
pub const pointer_t = vm_offset_t;
pub const vm_address_t = vm_offset_t;
pub const addr64_t = u64;
pub const reg64_t = u32;
pub const ppnum_t = u32;
pub const vm_map_t = mach_port_t;
pub const vm_map_read_t = mach_port_t;
pub const vm_map_inspect_t = mach_port_t;
pub const vm_object_offset_t = u64;
pub const vm_object_size_t = u64;
pub const upl_t = mach_port_t;
pub const vm_named_entry_t = mach_port_t;
pub const memory_object_offset_t = c_ulonglong;
pub const memory_object_size_t = c_ulonglong;
pub const memory_object_cluster_size_t = natural_t;
pub const memory_object_fault_info_t = [*c]natural_t;
pub const vm_object_id_t = c_ulonglong;
pub const memory_object_t = mach_port_t;
pub const memory_object_control_t = mach_port_t;
pub const memory_object_array_t = [*c]memory_object_t;
pub const memory_object_name_t = mach_port_t;
pub const memory_object_default_t = mach_port_t;
pub const memory_object_copy_strategy_t = c_int;
pub const memory_object_return_t = c_int;
pub const memory_object_info_t = [*c]c_int;
pub const memory_object_flavor_t = c_int;
pub const memory_object_info_data_t = [1024]c_int;
pub const struct_memory_object_perf_info = extern struct {
    cluster_size: memory_object_cluster_size_t,
    may_cache: boolean_t,
};
pub const struct_memory_object_attr_info = extern struct {
    copy_strategy: memory_object_copy_strategy_t,
    cluster_size: memory_object_cluster_size_t,
    may_cache_object: boolean_t,
    temporary: boolean_t,
};
pub const struct_memory_object_behave_info = extern struct {
    copy_strategy: memory_object_copy_strategy_t,
    temporary: boolean_t,
    invalidate: boolean_t,
    silent_overwrite: boolean_t,
    advisory_pageout: boolean_t,
};
pub const memory_object_behave_info_t = [*c]struct_memory_object_behave_info;
pub const memory_object_behave_info_data_t = struct_memory_object_behave_info;
pub const memory_object_perf_info_t = [*c]struct_memory_object_perf_info;
pub const memory_object_perf_info_data_t = struct_memory_object_perf_info;
pub const memory_object_attr_info_t = [*c]struct_memory_object_attr_info;
pub const memory_object_attr_info_data_t = struct_memory_object_attr_info;
pub const struct_arm_state_hdr = extern struct {
    flavor: u32,
    count: u32,
};
pub const arm_state_hdr_t = struct_arm_state_hdr;
pub const arm_thread_state_t = struct___darwin_arm_thread_state;
pub const arm_thread_state32_t = struct___darwin_arm_thread_state;
pub const arm_thread_state64_t = struct___darwin_arm_thread_state64;
const union_unnamed_597 = extern union {
    ts_32: arm_thread_state32_t,
    ts_64: arm_thread_state64_t,
};
pub const struct_arm_unified_thread_state = extern struct {
    ash: arm_state_hdr_t,
    uts: union_unnamed_597,
};
pub const arm_unified_thread_state_t = struct_arm_unified_thread_state;
pub const arm_vfp_state_t = struct___darwin_arm_vfp_state;
pub const arm_neon_state_t = struct___darwin_arm_neon_state;
pub const arm_neon_state32_t = struct___darwin_arm_neon_state;
pub const arm_neon_state64_t = struct___darwin_arm_neon_state64;
pub const arm_exception_state_t = struct___darwin_arm_exception_state;
pub const arm_exception_state32_t = struct___darwin_arm_exception_state;
pub const arm_exception_state64_t = struct___darwin_arm_exception_state64;
pub const arm_debug_state32_t = struct___darwin_arm_debug_state32;
pub const arm_debug_state64_t = struct___darwin_arm_debug_state64;
pub const arm_pagein_state_t = struct___arm_pagein_state;
pub const arm_debug_state_t = struct___arm_legacy_debug_state;
pub const thread_state_t = [*c]natural_t;
pub const thread_state_data_t = [1296]natural_t;
pub const thread_state_flavor_t = c_int;
pub const thread_state_flavor_array_t = [*c]thread_state_flavor_t;
pub const struct_ipc_info_space = extern struct {
    iis_genno_mask: natural_t,
    iis_table_size: natural_t,
    iis_table_next: natural_t,
    iis_tree_size: natural_t,
    iis_tree_small: natural_t,
    iis_tree_hash: natural_t,
};
pub const ipc_info_space_t = struct_ipc_info_space;
pub const struct_ipc_info_space_basic = extern struct {
    iisb_genno_mask: natural_t,
    iisb_table_size: natural_t,
    iisb_table_next: natural_t,
    iisb_table_inuse: natural_t,
    iisb_reserved: [2]natural_t,
};
pub const ipc_info_space_basic_t = struct_ipc_info_space_basic;
pub const struct_ipc_info_name = extern struct {
    iin_name: mach_port_name_t,
    iin_collision: integer_t,
    iin_type: mach_port_type_t,
    iin_urefs: mach_port_urefs_t,
    iin_object: natural_t,
    iin_next: natural_t,
    iin_hash: natural_t,
};
pub const ipc_info_name_t = struct_ipc_info_name;
pub const ipc_info_name_array_t = [*c]ipc_info_name_t;
pub const struct_ipc_info_tree_name = extern struct {
    iitn_name: ipc_info_name_t,
    iitn_lchild: mach_port_name_t,
    iitn_rchild: mach_port_name_t,
};
pub const ipc_info_tree_name_t = struct_ipc_info_tree_name;
pub const ipc_info_tree_name_array_t = [*c]ipc_info_tree_name_t;
pub const struct_ipc_info_port = extern struct {
    iip_port_object: natural_t,
    iip_receiver_object: natural_t,
};
pub const ipc_info_port_t = struct_ipc_info_port;
pub const exception_handler_info_array_t = [*c]ipc_info_port_t;
pub const exception_type_t = c_int;
pub const exception_data_type_t = integer_t;
pub const mach_exception_data_type_t = i64;
pub const exception_behavior_t = c_int;
pub const exception_data_t = [*c]exception_data_type_t;
pub const mach_exception_data_t = [*c]mach_exception_data_type_t;
pub const exception_mask_t = c_uint;
pub const exception_mask_array_t = [*c]exception_mask_t;
pub const exception_behavior_array_t = [*c]exception_behavior_t;
pub const exception_flavor_array_t = [*c]thread_state_flavor_t;
pub const exception_port_array_t = [*c]mach_port_t;
pub const exception_port_info_array_t = [*c]ipc_info_port_t;
pub const mach_exception_code_t = mach_exception_data_type_t;
pub const mach_exception_subcode_t = mach_exception_data_type_t;
pub const mach_voucher_t = mach_port_t;
pub const mach_voucher_name_t = mach_port_name_t;
pub const mach_voucher_name_array_t = [*c]mach_voucher_name_t;
pub const ipc_voucher_t = mach_voucher_t;
pub const mach_voucher_selector_t = u32;
pub const mach_voucher_attr_key_t = u32;
pub const mach_voucher_attr_key_array_t = [*c]mach_voucher_attr_key_t;
pub const mach_voucher_attr_content_t = [*c]u8;
pub const mach_voucher_attr_content_size_t = u32;
pub const mach_voucher_attr_command_t = u32;
pub const mach_voucher_attr_recipe_command_t = u32;
pub const mach_voucher_attr_recipe_command_array_t = [*c]mach_voucher_attr_recipe_command_t;
pub const struct_mach_voucher_attr_recipe_data = extern struct {
    key: mach_voucher_attr_key_t align(1),
    command: mach_voucher_attr_recipe_command_t,
    previous_voucher: mach_voucher_name_t,
    content_size: mach_voucher_attr_content_size_t,
    pub fn content(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        return @ptrCast(ReturnType, @alignCast(@alignOf(u8), @ptrCast(Intermediate, self) + 16));
    }
};
pub const mach_voucher_attr_recipe_data_t = struct_mach_voucher_attr_recipe_data;
pub const mach_voucher_attr_recipe_t = [*c]mach_voucher_attr_recipe_data_t;
pub const mach_voucher_attr_recipe_size_t = mach_msg_type_number_t;
pub const mach_voucher_attr_raw_recipe_t = [*c]u8;
pub const mach_voucher_attr_raw_recipe_array_t = mach_voucher_attr_raw_recipe_t;
pub const mach_voucher_attr_raw_recipe_size_t = mach_msg_type_number_t;
pub const mach_voucher_attr_raw_recipe_array_size_t = mach_msg_type_number_t;
pub const mach_voucher_attr_manager_t = mach_port_t;
pub const mach_voucher_attr_control_t = mach_port_t;
pub const ipc_voucher_attr_manager_t = mach_port_t;
pub const ipc_voucher_attr_control_t = mach_port_t;
pub const mach_voucher_attr_value_handle_t = u64;
pub const mach_voucher_attr_value_handle_array_t = [*c]mach_voucher_attr_value_handle_t;
pub const mach_voucher_attr_value_handle_array_size_t = mach_msg_type_number_t;
pub const mach_voucher_attr_value_reference_t = u32;
pub const mach_voucher_attr_value_flags_t = u32;
pub const mach_voucher_attr_control_flags_t = u32;
pub const mach_voucher_attr_importance_refs = u32;
pub const struct_processor_cpu_stat = extern struct {
    irq_ex_cnt: u32,
    ipi_cnt: u32,
    timer_cnt: u32,
    undef_ex_cnt: u32,
    unaligned_cnt: u32,
    vfp_cnt: u32,
    vfp_shortv_cnt: u32,
    data_ex_cnt: u32,
    instr_ex_cnt: u32,
};
pub const processor_cpu_stat_data_t = struct_processor_cpu_stat;
pub const processor_cpu_stat_t = [*c]struct_processor_cpu_stat;
pub const struct_processor_cpu_stat64 = packed struct {
    irq_ex_cnt: u64,
    ipi_cnt: u64,
    timer_cnt: u64,
    undef_ex_cnt: u64,
    unaligned_cnt: u64,
    vfp_cnt: u64,
    vfp_shortv_cnt: u64,
    data_ex_cnt: u64,
    instr_ex_cnt: u64,
    pmi_cnt: u64,
};
pub const processor_cpu_stat64_data_t = struct_processor_cpu_stat64;
pub const processor_cpu_stat64_t = [*c]struct_processor_cpu_stat64;
pub const processor_info_t = [*c]integer_t;
pub const processor_info_array_t = [*c]integer_t;
pub const processor_info_data_t = [1024]integer_t;
pub const processor_set_info_t = [*c]integer_t;
pub const processor_set_info_data_t = [1024]integer_t;
pub const processor_flavor_t = c_int;
pub const struct_processor_basic_info = extern struct {
    cpu_type: cpu_type_t,
    cpu_subtype: cpu_subtype_t,
    running: boolean_t,
    slot_num: c_int,
    is_master: boolean_t,
};
pub const processor_basic_info_data_t = struct_processor_basic_info;
pub const processor_basic_info_t = [*c]struct_processor_basic_info;
pub const struct_processor_cpu_load_info = extern struct {
    cpu_ticks: [4]c_uint,
};
pub const processor_cpu_load_info_data_t = struct_processor_cpu_load_info;
pub const processor_cpu_load_info_t = [*c]struct_processor_cpu_load_info;
pub const processor_set_flavor_t = c_int;
pub const struct_processor_set_basic_info = extern struct {
    processor_count: c_int,
    default_policy: c_int,
};
pub const processor_set_basic_info_data_t = struct_processor_set_basic_info;
pub const processor_set_basic_info_t = [*c]struct_processor_set_basic_info;
pub const struct_processor_set_load_info = extern struct {
    task_count: c_int,
    thread_count: c_int,
    load_average: integer_t,
    mach_factor: integer_t,
};
pub const processor_set_load_info_data_t = struct_processor_set_load_info;
pub const processor_set_load_info_t = [*c]struct_processor_set_load_info;
pub const policy_t = c_int;
pub const policy_info_t = [*c]integer_t;
pub const policy_base_t = [*c]integer_t;
pub const policy_limit_t = [*c]integer_t;
pub const struct_policy_timeshare_base = extern struct {
    base_priority: integer_t,
};
pub const struct_policy_timeshare_limit = extern struct {
    max_priority: integer_t,
};
pub const struct_policy_timeshare_info = extern struct {
    max_priority: integer_t,
    base_priority: integer_t,
    cur_priority: integer_t,
    depressed: boolean_t,
    depress_priority: integer_t,
};
pub const policy_timeshare_base_t = [*c]struct_policy_timeshare_base;
pub const policy_timeshare_limit_t = [*c]struct_policy_timeshare_limit;
pub const policy_timeshare_info_t = [*c]struct_policy_timeshare_info;
pub const policy_timeshare_base_data_t = struct_policy_timeshare_base;
pub const policy_timeshare_limit_data_t = struct_policy_timeshare_limit;
pub const policy_timeshare_info_data_t = struct_policy_timeshare_info;
pub const struct_policy_rr_base = extern struct {
    base_priority: integer_t,
    quantum: integer_t,
};
pub const struct_policy_rr_limit = extern struct {
    max_priority: integer_t,
};
pub const struct_policy_rr_info = extern struct {
    max_priority: integer_t,
    base_priority: integer_t,
    quantum: integer_t,
    depressed: boolean_t,
    depress_priority: integer_t,
};
pub const policy_rr_base_t = [*c]struct_policy_rr_base;
pub const policy_rr_limit_t = [*c]struct_policy_rr_limit;
pub const policy_rr_info_t = [*c]struct_policy_rr_info;
pub const policy_rr_base_data_t = struct_policy_rr_base;
pub const policy_rr_limit_data_t = struct_policy_rr_limit;
pub const policy_rr_info_data_t = struct_policy_rr_info;
pub const struct_policy_fifo_base = extern struct {
    base_priority: integer_t,
};
pub const struct_policy_fifo_limit = extern struct {
    max_priority: integer_t,
};
pub const struct_policy_fifo_info = extern struct {
    max_priority: integer_t,
    base_priority: integer_t,
    depressed: boolean_t,
    depress_priority: integer_t,
};
pub const policy_fifo_base_t = [*c]struct_policy_fifo_base;
pub const policy_fifo_limit_t = [*c]struct_policy_fifo_limit;
pub const policy_fifo_info_t = [*c]struct_policy_fifo_info;
pub const policy_fifo_base_data_t = struct_policy_fifo_base;
pub const policy_fifo_limit_data_t = struct_policy_fifo_limit;
pub const policy_fifo_info_data_t = struct_policy_fifo_info;
pub const struct_policy_bases = extern struct {
    ts: policy_timeshare_base_data_t,
    rr: policy_rr_base_data_t,
    fifo: policy_fifo_base_data_t,
};
pub const struct_policy_limits = extern struct {
    ts: policy_timeshare_limit_data_t,
    rr: policy_rr_limit_data_t,
    fifo: policy_fifo_limit_data_t,
};
pub const struct_policy_infos = extern struct {
    ts: policy_timeshare_info_data_t,
    rr: policy_rr_info_data_t,
    fifo: policy_fifo_info_data_t,
};
pub const policy_base_data_t = struct_policy_bases;
pub const policy_limit_data_t = struct_policy_limits;
pub const policy_info_data_t = struct_policy_infos;
pub const task_flavor_t = natural_t;
pub const task_info_t = [*c]integer_t;
pub const task_info_data_t = [1024]integer_t;
pub const struct_task_basic_info_32 = extern struct {
    suspend_count: integer_t,
    virtual_size: natural_t,
    resident_size: natural_t,
    user_time: time_value_t,
    system_time: time_value_t,
    policy: policy_t,
};
pub const task_basic_info_32_data_t = struct_task_basic_info_32;
pub const task_basic_info_32_t = [*c]struct_task_basic_info_32;
pub const struct_task_basic_info_64 = extern struct {
    suspend_count: integer_t,
    virtual_size: mach_vm_size_t,
    resident_size: mach_vm_size_t,
    user_time: time_value_t,
    system_time: time_value_t,
    policy: policy_t,
};
pub const task_basic_info_64_data_t = struct_task_basic_info_64;
pub const task_basic_info_64_t = [*c]struct_task_basic_info_64;
pub const struct_task_basic_info = extern struct {
    suspend_count: integer_t,
    virtual_size: vm_size_t,
    resident_size: vm_size_t,
    user_time: time_value_t,
    system_time: time_value_t,
    policy: policy_t,
};
pub const task_basic_info_data_t = struct_task_basic_info;
pub const task_basic_info_t = [*c]struct_task_basic_info;
pub const struct_task_events_info = extern struct {
    faults: integer_t,
    pageins: integer_t,
    cow_faults: integer_t,
    messages_sent: integer_t,
    messages_received: integer_t,
    syscalls_mach: integer_t,
    syscalls_unix: integer_t,
    csw: integer_t,
};
pub const task_events_info_data_t = struct_task_events_info;
pub const task_events_info_t = [*c]struct_task_events_info;
pub const struct_task_thread_times_info = extern struct {
    user_time: time_value_t,
    system_time: time_value_t,
};
pub const task_thread_times_info_data_t = struct_task_thread_times_info;
pub const task_thread_times_info_t = [*c]struct_task_thread_times_info;
pub const struct_task_absolutetime_info = extern struct {
    total_user: u64,
    total_system: u64,
    threads_user: u64,
    threads_system: u64,
};
pub const task_absolutetime_info_data_t = struct_task_absolutetime_info;
pub const task_absolutetime_info_t = [*c]struct_task_absolutetime_info;
pub const struct_task_kernelmemory_info = extern struct {
    total_palloc: u64,
    total_pfree: u64,
    total_salloc: u64,
    total_sfree: u64,
};
pub const task_kernelmemory_info_data_t = struct_task_kernelmemory_info;
pub const task_kernelmemory_info_t = [*c]struct_task_kernelmemory_info;
pub const struct_task_affinity_tag_info = extern struct {
    set_count: integer_t,
    min: integer_t,
    max: integer_t,
    task_count: integer_t,
};
pub const task_affinity_tag_info_data_t = struct_task_affinity_tag_info;
pub const task_affinity_tag_info_t = [*c]struct_task_affinity_tag_info;
pub const struct_task_dyld_info = extern struct {
    all_image_info_addr: mach_vm_address_t,
    all_image_info_size: mach_vm_size_t,
    all_image_info_format: integer_t,
};
pub const task_dyld_info_data_t = struct_task_dyld_info;
pub const task_dyld_info_t = [*c]struct_task_dyld_info;
pub const struct_task_basic_info_64_2 = extern struct {
    suspend_count: integer_t,
    virtual_size: mach_vm_size_t,
    resident_size: mach_vm_size_t,
    user_time: time_value_t,
    system_time: time_value_t,
    policy: policy_t,
};
pub const task_basic_info_64_2_data_t = struct_task_basic_info_64_2;
pub const task_basic_info_64_2_t = [*c]struct_task_basic_info_64_2;
pub const struct_task_extmod_info = extern struct {
    task_uuid: [16]u8,
    extmod_statistics: vm_extmod_statistics_data_t,
};
pub const task_extmod_info_data_t = struct_task_extmod_info;
pub const task_extmod_info_t = [*c]struct_task_extmod_info;
pub const struct_mach_task_basic_info = extern struct {
    virtual_size: mach_vm_size_t,
    resident_size: mach_vm_size_t,
    resident_size_max: mach_vm_size_t,
    user_time: time_value_t,
    system_time: time_value_t,
    policy: policy_t,
    suspend_count: integer_t,
};
pub const mach_task_basic_info_data_t = struct_mach_task_basic_info;
pub const mach_task_basic_info_t = [*c]struct_mach_task_basic_info;
pub const struct_task_power_info = extern struct {
    total_user: u64,
    total_system: u64,
    task_interrupt_wakeups: u64,
    task_platform_idle_wakeups: u64,
    task_timer_wakeups_bin_1: u64,
    task_timer_wakeups_bin_2: u64,
};
pub const task_power_info_data_t = struct_task_power_info;
pub const task_power_info_t = [*c]struct_task_power_info;
pub const struct_task_vm_info = extern struct {
    virtual_size: mach_vm_size_t,
    region_count: integer_t,
    page_size: integer_t,
    resident_size: mach_vm_size_t,
    resident_size_peak: mach_vm_size_t,
    device: mach_vm_size_t,
    device_peak: mach_vm_size_t,
    internal: mach_vm_size_t,
    internal_peak: mach_vm_size_t,
    external: mach_vm_size_t,
    external_peak: mach_vm_size_t,
    reusable: mach_vm_size_t,
    reusable_peak: mach_vm_size_t,
    purgeable_volatile_pmap: mach_vm_size_t,
    purgeable_volatile_resident: mach_vm_size_t,
    purgeable_volatile_virtual: mach_vm_size_t,
    compressed: mach_vm_size_t,
    compressed_peak: mach_vm_size_t,
    compressed_lifetime: mach_vm_size_t,
    phys_footprint: mach_vm_size_t,
    min_address: mach_vm_address_t,
    max_address: mach_vm_address_t,
    ledger_phys_footprint_peak: i64,
    ledger_purgeable_nonvolatile: i64,
    ledger_purgeable_novolatile_compressed: i64,
    ledger_purgeable_volatile: i64,
    ledger_purgeable_volatile_compressed: i64,
    ledger_tag_network_nonvolatile: i64,
    ledger_tag_network_nonvolatile_compressed: i64,
    ledger_tag_network_volatile: i64,
    ledger_tag_network_volatile_compressed: i64,
    ledger_tag_media_footprint: i64,
    ledger_tag_media_footprint_compressed: i64,
    ledger_tag_media_nofootprint: i64,
    ledger_tag_media_nofootprint_compressed: i64,
    ledger_tag_graphics_footprint: i64,
    ledger_tag_graphics_footprint_compressed: i64,
    ledger_tag_graphics_nofootprint: i64,
    ledger_tag_graphics_nofootprint_compressed: i64,
    ledger_tag_neural_footprint: i64,
    ledger_tag_neural_footprint_compressed: i64,
    ledger_tag_neural_nofootprint: i64,
    ledger_tag_neural_nofootprint_compressed: i64,
    limit_bytes_remaining: u64,
    decompressions: integer_t,
};
pub const task_vm_info_data_t = struct_task_vm_info;
pub const task_vm_info_t = [*c]struct_task_vm_info;
pub const task_purgable_info_t = struct_vm_purgeable_info;
pub const struct_task_trace_memory_info = extern struct {
    user_memory_address: u64,
    buffer_size: u64,
    mailbox_array_size: u64,
};
pub const task_trace_memory_info_data_t = struct_task_trace_memory_info;
pub const task_trace_memory_info_t = [*c]struct_task_trace_memory_info;
pub const struct_task_wait_state_info = extern struct {
    total_wait_state_time: u64,
    total_wait_sfi_state_time: u64,
    _reserved: [4]u32,
};
pub const task_wait_state_info_data_t = struct_task_wait_state_info;
pub const task_wait_state_info_t = [*c]struct_task_wait_state_info;
pub const gpu_energy_data = extern struct {
    task_gpu_utilisation: u64,
    task_gpu_stat_reserved0: u64,
    task_gpu_stat_reserved1: u64,
    task_gpu_stat_reserved2: u64,
};
pub const gpu_energy_data_t = [*c]gpu_energy_data;
pub const struct_task_power_info_v2 = extern struct {
    cpu_energy: task_power_info_data_t,
    gpu_energy: gpu_energy_data,
    task_energy: u64,
    task_ptime: u64,
    task_pset_switches: u64,
};
pub const task_power_info_v2_data_t = struct_task_power_info_v2;
pub const task_power_info_v2_t = [*c]struct_task_power_info_v2;
pub const struct_task_flags_info = extern struct {
    flags: u32,
};
pub const task_flags_info_data_t = struct_task_flags_info;
pub const task_flags_info_t = [*c]struct_task_flags_info;
pub const task_exc_guard_behavior_t = u32;
pub const task_corpse_forking_behavior_t = u32;
pub const task_inspect_flavor_t = natural_t;
pub const TASK_INSPECT_BASIC_COUNTS: c_int = 1;
pub const enum_task_inspect_flavor = c_uint;
pub const struct_task_inspect_basic_counts = extern struct {
    instructions: u64,
    cycles: u64,
};
pub const task_inspect_basic_counts_data_t = struct_task_inspect_basic_counts;
pub const task_inspect_basic_counts_t = [*c]struct_task_inspect_basic_counts;
pub const task_inspect_info_t = [*c]integer_t;
pub const task_policy_flavor_t = natural_t;
pub const task_policy_t = [*c]integer_t;
pub const TASK_RENICED: c_int = -1;
pub const TASK_UNSPECIFIED: c_int = 0;
pub const TASK_FOREGROUND_APPLICATION: c_int = 1;
pub const TASK_BACKGROUND_APPLICATION: c_int = 2;
pub const TASK_CONTROL_APPLICATION: c_int = 3;
pub const TASK_GRAPHICS_SERVER: c_int = 4;
pub const TASK_THROTTLE_APPLICATION: c_int = 5;
pub const TASK_NONUI_APPLICATION: c_int = 6;
pub const TASK_DEFAULT_APPLICATION: c_int = 7;
pub const TASK_DARWINBG_APPLICATION: c_int = 8;
pub const enum_task_role = c_int;
pub const task_role_t = enum_task_role;
pub const struct_task_category_policy = extern struct {
    role: task_role_t,
};
pub const task_category_policy_data_t = struct_task_category_policy;
pub const task_category_policy_t = [*c]struct_task_category_policy;
pub const LATENCY_QOS_TIER_UNSPECIFIED: c_int = 0;
pub const LATENCY_QOS_TIER_0: c_int = 16711681;
pub const LATENCY_QOS_TIER_1: c_int = 16711682;
pub const LATENCY_QOS_TIER_2: c_int = 16711683;
pub const LATENCY_QOS_TIER_3: c_int = 16711684;
pub const LATENCY_QOS_TIER_4: c_int = 16711685;
pub const LATENCY_QOS_TIER_5: c_int = 16711686;
pub const enum_task_latency_qos = c_uint;
pub const task_latency_qos_t = integer_t;
pub const THROUGHPUT_QOS_TIER_UNSPECIFIED: c_int = 0;
pub const THROUGHPUT_QOS_TIER_0: c_int = 16646145;
pub const THROUGHPUT_QOS_TIER_1: c_int = 16646146;
pub const THROUGHPUT_QOS_TIER_2: c_int = 16646147;
pub const THROUGHPUT_QOS_TIER_3: c_int = 16646148;
pub const THROUGHPUT_QOS_TIER_4: c_int = 16646149;
pub const THROUGHPUT_QOS_TIER_5: c_int = 16646150;
pub const enum_task_throughput_qos = c_uint;
pub const task_throughput_qos_t = integer_t;
pub const struct_task_qos_policy = extern struct {
    task_latency_qos_tier: task_latency_qos_t,
    task_throughput_qos_tier: task_throughput_qos_t,
};
pub const task_qos_policy_t = [*c]struct_task_qos_policy;
pub const task_special_port_t = c_int;
pub const thread_flavor_t = natural_t;
pub const thread_info_t = [*c]integer_t;
pub const thread_info_data_t = [32]integer_t;
pub const struct_thread_basic_info = extern struct {
    user_time: time_value_t,
    system_time: time_value_t,
    cpu_usage: integer_t,
    policy: policy_t,
    run_state: integer_t,
    flags: integer_t,
    suspend_count: integer_t,
    sleep_time: integer_t,
};
pub const thread_basic_info_data_t = struct_thread_basic_info;
pub const thread_basic_info_t = [*c]struct_thread_basic_info;
pub const struct_thread_identifier_info = extern struct {
    thread_id: u64,
    thread_handle: u64,
    dispatch_qaddr: u64,
};
pub const thread_identifier_info_data_t = struct_thread_identifier_info;
pub const thread_identifier_info_t = [*c]struct_thread_identifier_info;
pub const struct_thread_extended_info = extern struct {
    pth_user_time: u64,
    pth_system_time: u64,
    pth_cpu_usage: i32,
    pth_policy: i32,
    pth_run_state: i32,
    pth_flags: i32,
    pth_sleep_time: i32,
    pth_curpri: i32,
    pth_priority: i32,
    pth_maxpriority: i32,
    pth_name: [64]u8,
};
pub const thread_extended_info_data_t = struct_thread_extended_info;
pub const thread_extended_info_t = [*c]struct_thread_extended_info;
pub const struct_io_stat_entry = extern struct {
    count: u64,
    size: u64,
};
pub const struct_io_stat_info = extern struct {
    disk_reads: struct_io_stat_entry,
    io_priority: [4]struct_io_stat_entry,
    paging: struct_io_stat_entry,
    metadata: struct_io_stat_entry,
    total_io: struct_io_stat_entry,
};
pub const io_stat_info_t = [*c]struct_io_stat_info;
pub const thread_policy_flavor_t = natural_t;
pub const thread_policy_t = [*c]integer_t;
pub const struct_thread_standard_policy = extern struct {
    no_data: natural_t,
};
pub const thread_standard_policy_data_t = struct_thread_standard_policy;
pub const thread_standard_policy_t = [*c]struct_thread_standard_policy;
pub const struct_thread_extended_policy = extern struct {
    timeshare: boolean_t,
};
pub const thread_extended_policy_data_t = struct_thread_extended_policy;
pub const thread_extended_policy_t = [*c]struct_thread_extended_policy;
pub const struct_thread_time_constraint_policy = extern struct {
    period: u32,
    computation: u32,
    constraint: u32,
    preemptible: boolean_t,
};
pub const thread_time_constraint_policy_data_t = struct_thread_time_constraint_policy;
pub const thread_time_constraint_policy_t = [*c]struct_thread_time_constraint_policy;
pub const struct_thread_precedence_policy = extern struct {
    importance: integer_t,
};
pub const thread_precedence_policy_data_t = struct_thread_precedence_policy;
pub const thread_precedence_policy_t = [*c]struct_thread_precedence_policy;
pub const struct_thread_affinity_policy = extern struct {
    affinity_tag: integer_t,
};
pub const thread_affinity_policy_data_t = struct_thread_affinity_policy;
pub const thread_affinity_policy_t = [*c]struct_thread_affinity_policy;
pub const struct_thread_background_policy = extern struct {
    priority: integer_t,
};
pub const thread_background_policy_data_t = struct_thread_background_policy;
pub const thread_background_policy_t = [*c]struct_thread_background_policy;
pub const thread_latency_qos_t = integer_t;
pub const struct_thread_latency_qos_policy = extern struct {
    thread_latency_qos_tier: thread_latency_qos_t,
};
pub const thread_latency_qos_policy_data_t = struct_thread_latency_qos_policy;
pub const thread_latency_qos_policy_t = [*c]struct_thread_latency_qos_policy;
pub const thread_throughput_qos_t = integer_t;
pub const struct_thread_throughput_qos_policy = extern struct {
    thread_throughput_qos_tier: thread_throughput_qos_t,
};
pub const thread_throughput_qos_policy_data_t = struct_thread_throughput_qos_policy;
pub const thread_throughput_qos_policy_t = [*c]struct_thread_throughput_qos_policy;
pub const vm_machine_attribute_t = c_uint;
pub const vm_machine_attribute_val_t = c_int;
pub const vm_inherit_t = c_uint;
pub const vm_purgable_t = c_int;
pub const vm_behavior_t = c_int;
pub extern var vm_page_size: vm_size_t;
pub extern var vm_page_mask: vm_size_t;
pub extern var vm_page_shift: c_int;
pub extern var vm_kernel_page_size: vm_size_t;
pub extern var vm_kernel_page_mask: vm_size_t;
pub extern var vm_kernel_page_shift: c_int;
pub const vm32_object_id_t = u32;
pub const vm_region_info_t = [*c]c_int;
pub const vm_region_info_64_t = [*c]c_int;
pub const vm_region_recurse_info_t = [*c]c_int;
pub const vm_region_recurse_info_64_t = [*c]c_int;
pub const vm_region_flavor_t = c_int;
pub const vm_region_info_data_t = [1024]c_int;
pub const struct_vm_region_basic_info_64 = extern struct {
    protection: vm_prot_t,
    max_protection: vm_prot_t,
    inheritance: vm_inherit_t,
    shared: boolean_t,
    reserved: boolean_t,
    offset: memory_object_offset_t,
    behavior: vm_behavior_t,
    user_wired_count: c_ushort,
};
pub const vm_region_basic_info_64_t = [*c]struct_vm_region_basic_info_64;
pub const vm_region_basic_info_data_64_t = struct_vm_region_basic_info_64;
pub const struct_vm_region_basic_info = extern struct {
    protection: vm_prot_t,
    max_protection: vm_prot_t,
    inheritance: vm_inherit_t,
    shared: boolean_t,
    reserved: boolean_t,
    offset: u32,
    behavior: vm_behavior_t,
    user_wired_count: c_ushort,
};
pub const vm_region_basic_info_t = [*c]struct_vm_region_basic_info;
pub const vm_region_basic_info_data_t = struct_vm_region_basic_info;
pub const struct_vm_region_extended_info = extern struct {
    protection: vm_prot_t,
    user_tag: c_uint,
    pages_resident: c_uint,
    pages_shared_now_private: c_uint,
    pages_swapped_out: c_uint,
    pages_dirtied: c_uint,
    ref_count: c_uint,
    shadow_depth: c_ushort,
    external_pager: u8,
    share_mode: u8,
    pages_reusable: c_uint,
};
pub const vm_region_extended_info_t = [*c]struct_vm_region_extended_info;
pub const vm_region_extended_info_data_t = struct_vm_region_extended_info;
pub const struct_vm_region_top_info = extern struct {
    obj_id: c_uint,
    ref_count: c_uint,
    private_pages_resident: c_uint,
    shared_pages_resident: c_uint,
    share_mode: u8,
};
pub const vm_region_top_info_t = [*c]struct_vm_region_top_info;
pub const vm_region_top_info_data_t = struct_vm_region_top_info;
pub const struct_vm_region_submap_info = extern struct {
    protection: vm_prot_t,
    max_protection: vm_prot_t,
    inheritance: vm_inherit_t,
    offset: u32,
    user_tag: c_uint,
    pages_resident: c_uint,
    pages_shared_now_private: c_uint,
    pages_swapped_out: c_uint,
    pages_dirtied: c_uint,
    ref_count: c_uint,
    shadow_depth: c_ushort,
    external_pager: u8,
    share_mode: u8,
    is_submap: boolean_t,
    behavior: vm_behavior_t,
    object_id: vm32_object_id_t,
    user_wired_count: c_ushort,
};
pub const vm_region_submap_info_t = [*c]struct_vm_region_submap_info;
pub const vm_region_submap_info_data_t = struct_vm_region_submap_info;
pub const struct_vm_region_submap_info_64 = extern struct {
    protection: vm_prot_t,
    max_protection: vm_prot_t,
    inheritance: vm_inherit_t,
    offset: memory_object_offset_t,
    user_tag: c_uint,
    pages_resident: c_uint,
    pages_shared_now_private: c_uint,
    pages_swapped_out: c_uint,
    pages_dirtied: c_uint,
    ref_count: c_uint,
    shadow_depth: c_ushort,
    external_pager: u8,
    share_mode: u8,
    is_submap: boolean_t,
    behavior: vm_behavior_t,
    object_id: vm32_object_id_t,
    user_wired_count: c_ushort,
    pages_reusable: c_uint,
    object_id_full: vm_object_id_t,
};
pub const vm_region_submap_info_64_t = [*c]struct_vm_region_submap_info_64;
pub const vm_region_submap_info_data_64_t = struct_vm_region_submap_info_64;
pub const struct_vm_region_submap_short_info_64 = extern struct {
    protection: vm_prot_t,
    max_protection: vm_prot_t,
    inheritance: vm_inherit_t,
    offset: memory_object_offset_t,
    user_tag: c_uint,
    ref_count: c_uint,
    shadow_depth: c_ushort,
    external_pager: u8,
    share_mode: u8,
    is_submap: boolean_t,
    behavior: vm_behavior_t,
    object_id: vm32_object_id_t,
    user_wired_count: c_ushort,
};
pub const vm_region_submap_short_info_64_t = [*c]struct_vm_region_submap_short_info_64;
pub const vm_region_submap_short_info_data_64_t = struct_vm_region_submap_short_info_64;
pub const struct_mach_vm_read_entry = extern struct {
    address: mach_vm_address_t,
    size: mach_vm_size_t,
};
pub const struct_vm_read_entry = extern struct {
    address: vm_address_t,
    size: vm_size_t,
};
pub const mach_vm_read_entry_t = [256]struct_mach_vm_read_entry;
pub const vm_read_entry_t = [256]struct_vm_read_entry;
pub const vm_page_info_t = [*c]c_int;
pub const vm_page_info_data_t = [*c]c_int;
pub const vm_page_info_flavor_t = c_int;
pub const struct_vm_page_info_basic = extern struct {
    disposition: c_int,
    ref_count: c_int,
    object_id: vm_object_id_t,
    offset: memory_object_offset_t,
    depth: c_int,
    __pad: c_int,
};
pub const vm_page_info_basic_t = [*c]struct_vm_page_info_basic;
pub const vm_page_info_basic_data_t = struct_vm_page_info_basic;
pub const kmod_t = c_int;
pub const struct_kmod_reference = extern struct {
    next: [*c]struct_kmod_reference,
    info: [*c]struct_kmod_info,
};
pub const kmod_reference_t = struct_kmod_reference;
pub const kmod_start_func_t = fn ([*c]struct_kmod_info, ?*anyopaque) callconv(.C) kern_return_t;
pub const kmod_stop_func_t = fn ([*c]struct_kmod_info, ?*anyopaque) callconv(.C) kern_return_t;
pub const struct_kmod_info = extern struct {
    next: [*c]struct_kmod_info,
    info_version: i32,
    id: u32,
    name: [64]u8,
    version: [64]u8,
    reference_count: i32,
    reference_list: [*c]kmod_reference_t,
    address: vm_address_t,
    size: vm_size_t,
    hdr_size: vm_size_t,
    start: ?kmod_start_func_t,
    stop: ?kmod_stop_func_t,
};
pub const kmod_info_t = struct_kmod_info;
pub const struct_kmod_info_32_v1 = extern struct {
    next_addr: u32,
    info_version: i32,
    id: u32,
    name: [64]u8,
    version: [64]u8,
    reference_count: i32,
    reference_list_addr: u32,
    address: u32,
    size: u32,
    hdr_size: u32,
    start_addr: u32,
    stop_addr: u32,
};
pub const kmod_info_32_v1_t = struct_kmod_info_32_v1;
pub const struct_kmod_info_64_v1 = extern struct {
    next_addr: u64,
    info_version: i32,
    id: u32,
    name: [64]u8,
    version: [64]u8,
    reference_count: i32,
    reference_list_addr: u64,
    address: u64,
    size: u64,
    hdr_size: u64,
    start_addr: u64,
    stop_addr: u64,
};
pub const kmod_info_64_v1_t = struct_kmod_info_64_v1;
pub const kmod_args_t = ?*anyopaque;
pub const kmod_control_flavor_t = c_int;
pub const kmod_info_array_t = [*c]kmod_info_t;
pub const struct_fsid = extern struct {
    val: [2]i32,
};
pub const fsid_t = struct_fsid;
pub const struct_fsobj_id = extern struct {
    fid_objno: u_int32_t,
    fid_generation: u_int32_t,
};
pub const fsobj_id_t = struct_fsobj_id;
pub const struct_dyld_kernel_image_info = extern struct {
    uuid: uuid_t,
    fsobjid: fsobj_id_t,
    fsid: fsid_t,
    load_addr: u64,
};
pub const struct_dyld_kernel_process_info = extern struct {
    cache_image_info: struct_dyld_kernel_image_info,
    timestamp: u64,
    imageCount: u32,
    initialImageCount: u32,
    dyldState: u8,
    no_cache: boolean_t,
    private_cache: boolean_t,
};
pub const dyld_kernel_image_info_t = struct_dyld_kernel_image_info;
pub const dyld_kernel_process_info_t = struct_dyld_kernel_process_info;
pub const dyld_kernel_image_info_array_t = [*c]dyld_kernel_image_info_t;
pub const task_t = mach_port_t;
pub const task_name_t = mach_port_t;
pub const task_policy_set_t = mach_port_t;
pub const task_policy_get_t = mach_port_t;
pub const task_inspect_t = mach_port_t;
pub const task_read_t = mach_port_t;
pub const task_suspension_token_t = mach_port_t;
pub const thread_t = mach_port_t;
pub const thread_act_t = mach_port_t;
pub const thread_inspect_t = mach_port_t;
pub const thread_read_t = mach_port_t;
pub const ipc_space_t = mach_port_t;
pub const ipc_space_read_t = mach_port_t;
pub const ipc_space_inspect_t = mach_port_t;
pub const coalition_t = mach_port_t;
pub const host_t = mach_port_t;
pub const host_priv_t = mach_port_t;
pub const host_security_t = mach_port_t;
pub const processor_t = mach_port_t;
pub const processor_set_t = mach_port_t;
pub const processor_set_control_t = mach_port_t;
pub const semaphore_t = mach_port_t;
pub const lock_set_t = mach_port_t;
pub const ledger_t = mach_port_t;
pub const alarm_t = mach_port_t;
pub const clock_serv_t = mach_port_t;
pub const clock_ctrl_t = mach_port_t;
pub const arcade_register_t = mach_port_t;
pub const ipc_eventlink_t = mach_port_t;
pub const eventlink_port_pair_t = [2]mach_port_t;
pub const suid_cred_t = mach_port_t;
pub const task_id_token_t = mach_port_t;
pub const processor_set_name_t = processor_set_t;
pub const clock_reply_t = mach_port_t;
pub const bootstrap_t = mach_port_t;
pub const mem_entry_name_port_t = mach_port_t;
pub const exception_handler_t = mach_port_t;
pub const exception_handler_array_t = [*c]exception_handler_t;
pub const vm_task_entry_t = mach_port_t;
pub const io_master_t = mach_port_t;
pub const UNDServerRef = mach_port_t;
pub const mach_eventlink_t = mach_port_t;
pub const exception_handler_info_t = ipc_info_port_t;
pub const task_array_t = [*c]task_t;
pub const thread_array_t = [*c]thread_t;
pub const processor_set_array_t = [*c]processor_set_t;
pub const processor_set_name_array_t = [*c]processor_set_t;
pub const processor_array_t = [*c]processor_t;
pub const thread_act_array_t = [*c]thread_act_t;
pub const ledger_array_t = [*c]ledger_t;
pub const task_port_t = task_t;
pub const task_port_array_t = task_array_t;
pub const thread_port_t = thread_t;
pub const thread_port_array_t = thread_array_t;
pub const ipc_space_port_t = ipc_space_t;
pub const host_name_t = host_t;
pub const host_name_port_t = host_t;
pub const processor_set_port_t = processor_set_t;
pub const processor_set_name_port_t = processor_set_t;
pub const processor_set_name_port_array_t = processor_set_array_t;
pub const processor_set_control_port_t = processor_set_t;
pub const processor_port_t = processor_t;
pub const processor_port_array_t = processor_array_t;
pub const thread_act_port_t = thread_act_t;
pub const thread_act_port_array_t = thread_act_array_t;
pub const semaphore_port_t = semaphore_t;
pub const lock_set_port_t = lock_set_t;
pub const ledger_port_t = ledger_t;
pub const ledger_port_array_t = ledger_array_t;
pub const alarm_port_t = alarm_t;
pub const clock_serv_port_t = clock_serv_t;
pub const clock_ctrl_port_t = clock_ctrl_t;
pub const exception_port_t = exception_handler_t;
pub const exception_port_arrary_t = exception_handler_array_t;
pub const vfs_path_t = [4096]u8;
pub const nspace_path_t = [1024]u8;
pub const nspace_name_t = [1024]u8;
pub const suid_cred_path_t = [1024]u8;
pub const suid_cred_uid_t = u32;
pub const mach_task_flavor_t = c_uint;
pub const mach_thread_flavor_t = c_uint;
pub const ledger_item_t = natural_t;
pub const ledger_amount_t = i64;
pub const emulation_vector_t = [*c]mach_vm_offset_t;
pub const user_subsystem_t = [*c]u8;
pub const labelstr_t = [*c]u8;
pub extern fn mach_host_self() mach_port_t;
pub extern fn mach_thread_self() mach_port_t;
pub extern fn mach_task_is_self(task: task_name_t) boolean_t;
pub extern fn host_page_size(host_t, [*c]vm_size_t) kern_return_t;
pub extern var mach_task_self_: mach_port_t;
pub extern fn clock_sleep_trap(clock_name: mach_port_name_t, sleep_type: sleep_type_t, sleep_sec: c_int, sleep_nsec: c_int, wakeup_time: [*c]mach_timespec_t) kern_return_t;
pub extern fn _kernelrpc_mach_vm_allocate_trap(target: mach_port_name_t, addr: [*c]mach_vm_offset_t, size: mach_vm_size_t, flags: c_int) kern_return_t;
pub extern fn _kernelrpc_mach_vm_deallocate_trap(target: mach_port_name_t, address: mach_vm_address_t, size: mach_vm_size_t) kern_return_t;
pub extern fn task_dyld_process_info_notify_get(names_addr: mach_port_name_array_t, names_count_addr: [*c]natural_t) kern_return_t;
pub extern fn _kernelrpc_mach_vm_protect_trap(target: mach_port_name_t, address: mach_vm_address_t, size: mach_vm_size_t, set_maximum: boolean_t, new_protection: vm_prot_t) kern_return_t;
pub extern fn _kernelrpc_mach_vm_map_trap(target: mach_port_name_t, address: [*c]mach_vm_offset_t, size: mach_vm_size_t, mask: mach_vm_offset_t, flags: c_int, cur_protection: vm_prot_t) kern_return_t;
pub extern fn _kernelrpc_mach_vm_purgable_control_trap(target: mach_port_name_t, address: mach_vm_offset_t, control: vm_purgable_t, state: [*c]c_int) kern_return_t;
pub extern fn _kernelrpc_mach_port_allocate_trap(target: mach_port_name_t, right: mach_port_right_t, name: [*c]mach_port_name_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_deallocate_trap(target: mach_port_name_t, name: mach_port_name_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_mod_refs_trap(target: mach_port_name_t, name: mach_port_name_t, right: mach_port_right_t, delta: mach_port_delta_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_move_member_trap(target: mach_port_name_t, member: mach_port_name_t, after: mach_port_name_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_insert_right_trap(target: mach_port_name_t, name: mach_port_name_t, poly: mach_port_name_t, polyPoly: mach_msg_type_name_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_get_attributes_trap(target: mach_port_name_t, name: mach_port_name_t, flavor: mach_port_flavor_t, port_info_out: mach_port_info_t, port_info_outCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_insert_member_trap(target: mach_port_name_t, name: mach_port_name_t, pset: mach_port_name_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_extract_member_trap(target: mach_port_name_t, name: mach_port_name_t, pset: mach_port_name_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_construct_trap(target: mach_port_name_t, options: [*c]mach_port_options_t, context: u64, name: [*c]mach_port_name_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_destruct_trap(target: mach_port_name_t, name: mach_port_name_t, srdelta: mach_port_delta_t, guard: u64) kern_return_t;
pub extern fn _kernelrpc_mach_port_guard_trap(target: mach_port_name_t, name: mach_port_name_t, guard: u64, strict: boolean_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_unguard_trap(target: mach_port_name_t, name: mach_port_name_t, guard: u64) kern_return_t;
pub extern fn mach_generate_activity_id(target: mach_port_name_t, count: c_int, activity_id: [*c]u64) kern_return_t;
pub extern fn macx_swapon(filename: u64, flags: c_int, size: c_int, priority: c_int) kern_return_t;
pub extern fn macx_swapoff(filename: u64, flags: c_int) kern_return_t;
pub extern fn macx_triggers(hi_water: c_int, low_water: c_int, flags: c_int, alert_port: mach_port_t) kern_return_t;
pub extern fn macx_backing_store_suspend(@"suspend": boolean_t) kern_return_t;
pub extern fn macx_backing_store_recovery(pid: c_int) kern_return_t;
pub extern fn swtch_pri(pri: c_int) boolean_t;
pub extern fn swtch() boolean_t;
pub extern fn thread_switch(thread_name: mach_port_name_t, option: c_int, option_time: mach_msg_timeout_t) kern_return_t;
pub extern fn task_self_trap() mach_port_name_t;
pub extern fn host_create_mach_voucher_trap(host: mach_port_name_t, recipes: mach_voucher_attr_raw_recipe_array_t, recipes_size: c_int, voucher: [*c]mach_port_name_t) kern_return_t;
pub extern fn mach_voucher_extract_attr_recipe_trap(voucher_name: mach_port_name_t, key: mach_voucher_attr_key_t, recipe: mach_voucher_attr_raw_recipe_t, recipe_size: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_type_trap(task: ipc_space_t, name: mach_port_name_t, ptype: [*c]mach_port_type_t) kern_return_t;
pub extern fn _kernelrpc_mach_port_request_notification_trap(task: ipc_space_t, name: mach_port_name_t, msgid: mach_msg_id_t, sync: mach_port_mscount_t, notify: mach_port_name_t, notifyPoly: mach_msg_type_name_t, previous: [*c]mach_port_name_t) kern_return_t;
pub extern fn task_for_pid(target_tport: mach_port_name_t, pid: c_int, t: [*c]mach_port_name_t) kern_return_t;
pub extern fn task_name_for_pid(target_tport: mach_port_name_t, pid: c_int, tn: [*c]mach_port_name_t) kern_return_t;
pub extern fn pid_for_task(t: mach_port_name_t, x: [*c]c_int) kern_return_t;
pub extern fn debug_control_port_for_pid(target_tport: mach_port_name_t, pid: c_int, t: [*c]mach_port_name_t) kern_return_t;
pub extern var bootstrap_port: mach_port_t;
pub extern var vprintf_stderr_func: ?fn ([*c]const u8, va_list) callconv(.C) c_int;
pub const mach_error_t = kern_return_t;
pub const mach_error_fn_t = ?*const fn () callconv(.C) mach_error_t;
pub const IOReturn = kern_return_t;
pub const UInt = c_uint;
pub const SInt = c_int;
pub const IOOptionBits = UInt32;
pub const IOFixed = SInt32;
pub const IOVersion = UInt32;
pub const IOItemCount = UInt32;
pub const IOCacheMode = UInt32;
pub const IOByteCount32 = UInt32;
pub const IOByteCount64 = UInt64;
pub const IOPhysicalAddress32 = UInt32;
pub const IOPhysicalAddress64 = UInt64;
pub const IOPhysicalLength32 = UInt32;
pub const IOPhysicalLength64 = UInt64;
pub const IOVirtualAddress = mach_vm_address_t;
pub const IOByteCount = IOByteCount64;
pub const IOLogicalAddress = IOVirtualAddress;
pub const IOPhysicalAddress = IOPhysicalAddress64;
pub const IOPhysicalLength = IOPhysicalLength64;
pub const IOPhysicalRange = extern struct {
    address: IOPhysicalAddress,
    length: IOByteCount,
};
pub const IOVirtualRange = extern struct {
    address: IOVirtualAddress,
    length: IOByteCount,
};
pub const IOAddressRange = IOVirtualRange;
pub const IONamedValue = extern struct {
    value: c_int,
    name: [*c]const u8,
};
pub const IOAlignment = c_uint;
pub const io_object_t = mach_port_t;
pub const io_buf_ptr_t = [*c]u8;
pub const io_name_t = [128]u8;
pub const io_string_t = [512]u8;
pub const io_string_inband_t = [4096]u8;
pub const io_struct_inband_t = [4096]u8;
pub const io_user_scalar_t = u64;
pub const io_user_reference_t = u64;
pub const io_scalar_inband_t = [16]io_user_scalar_t;
pub const io_async_ref_t = [8]io_user_reference_t;
pub const io_scalar_inband64_t = [16]io_user_scalar_t;
pub const io_async_ref64_t = [8]io_user_reference_t;
pub const io_connect_t = io_object_t;
pub const io_enumerator_t = io_object_t;
pub const io_ident_t = io_object_t;
pub const io_iterator_t = io_object_t;
pub const io_registry_entry_t = io_object_t;
pub const io_service_t = io_object_t;
pub const uext_object_t = io_object_t;
pub const kIODefaultMemoryType: c_int = 0;
const enum_unnamed_598 = c_uint;
pub const kIODefaultCache: c_int = 0;
pub const kIOInhibitCache: c_int = 1;
pub const kIOWriteThruCache: c_int = 2;
pub const kIOCopybackCache: c_int = 3;
pub const kIOWriteCombineCache: c_int = 4;
pub const kIOCopybackInnerCache: c_int = 5;
pub const kIOPostedWrite: c_int = 6;
pub const kIORealTimeCache: c_int = 7;
pub const kIOPostedReordered: c_int = 8;
pub const kIOPostedCombinedReordered: c_int = 9;
const enum_unnamed_599 = c_uint;
pub const kIOMapAnywhere: c_int = 1;
pub const kIOMapCacheMask: c_int = 3840;
pub const kIOMapCacheShift: c_int = 8;
pub const kIOMapDefaultCache: c_int = 0;
pub const kIOMapInhibitCache: c_int = 256;
pub const kIOMapWriteThruCache: c_int = 512;
pub const kIOMapCopybackCache: c_int = 768;
pub const kIOMapWriteCombineCache: c_int = 1024;
pub const kIOMapCopybackInnerCache: c_int = 1280;
pub const kIOMapPostedWrite: c_int = 1536;
pub const kIOMapRealTimeCache: c_int = 1792;
pub const kIOMapPostedReordered: c_int = 2048;
pub const kIOMapPostedCombinedReordered: c_int = 2304;
pub const kIOMapUserOptionsMask: c_int = 4095;
pub const kIOMapReadOnly: c_int = 4096;
pub const kIOMapStatic: c_int = 16777216;
pub const kIOMapReference: c_int = 33554432;
pub const kIOMapUnique: c_int = 67108864;
pub const kIOMapPrefault: c_int = 268435456;
pub const kIOMapOverwrite: c_int = 536870912;
pub const kIOMapGuardedMask: c_uint = 3221225472;
pub const kIOMapGuardedSmall: c_int = 1073741824;
pub const kIOMapGuardedLarge: c_uint = 2147483648;
const enum_unnamed_600 = c_uint;
pub const kNanosecondScale: c_int = 1;
pub const kMicrosecondScale: c_int = 1000;
pub const kMillisecondScale: c_int = 1000000;
pub const kSecondScale: c_int = 1000000000;
pub const kTickScale: c_int = 10000000;
const enum_unnamed_601 = c_uint;
pub const kIOConnectMethodVarOutputSize: c_int = -3;
const enum_unnamed_602 = c_int;
pub const IODeviceNumber = c_uint;
pub const kIOMaxBusStall40usec: c_int = 40000;
pub const kIOMaxBusStall30usec: c_int = 30000;
pub const kIOMaxBusStall25usec: c_int = 25000;
pub const kIOMaxBusStall20usec: c_int = 20000;
pub const kIOMaxBusStall10usec: c_int = 10000;
pub const kIOMaxBusStall5usec: c_int = 5000;
pub const kIOMaxBusStallNone: c_int = 0;
const enum_unnamed_603 = c_uint;
pub const kFirstIOKitNotificationType: c_int = 100;
pub const kIOServicePublishNotificationType: c_int = 100;
pub const kIOServiceMatchedNotificationType: c_int = 101;
pub const kIOServiceTerminatedNotificationType: c_int = 102;
pub const kIOAsyncCompletionNotificationType: c_int = 150;
pub const kIOServiceMessageNotificationType: c_int = 160;
pub const kLastIOKitNotificationType: c_int = 199;
pub const kIOKitNoticationTypeMask: c_int = 4095;
pub const kIOKitNoticationTypeSizeAdjShift: c_int = 30;
pub const kIOKitNoticationMsgSizeMask: c_int = 3;
const enum_unnamed_604 = c_uint;
pub const kOSNotificationMessageID: c_int = 53;
pub const kOSAsyncCompleteMessageID: c_int = 57;
pub const kMaxAsyncArgs: c_int = 16;
const enum_unnamed_605 = c_uint;
pub const kIOAsyncReservedIndex: c_int = 0;
pub const kIOAsyncReservedCount: c_int = 1;
pub const kIOAsyncCalloutFuncIndex: c_int = 1;
pub const kIOAsyncCalloutRefconIndex: c_int = 2;
pub const kIOAsyncCalloutCount: c_int = 3;
pub const kIOMatchingCalloutFuncIndex: c_int = 1;
pub const kIOMatchingCalloutRefconIndex: c_int = 2;
pub const kIOMatchingCalloutCount: c_int = 3;
pub const kIOInterestCalloutFuncIndex: c_int = 1;
pub const kIOInterestCalloutRefconIndex: c_int = 2;
pub const kIOInterestCalloutServiceIndex: c_int = 3;
pub const kIOInterestCalloutCount: c_int = 4;
const enum_unnamed_606 = c_uint;
pub const kOSAsyncRef64Count: c_int = 8;
pub const kOSAsyncRef64Size: c_int = 64;
const enum_unnamed_607 = c_uint;
pub const OSAsyncReference64 = [8]io_user_reference_t;
pub const struct_OSNotificationHeader64 = extern struct {
    size: mach_msg_size_t align(8),
    type: natural_t,
    reference: OSAsyncReference64,
    pub fn content(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        return @ptrCast(ReturnType, @alignCast(@alignOf(u8), @ptrCast(Intermediate, self) + 72));
    }
};
pub const struct_IOServiceInterestContent64 = extern struct {
    messageType: natural_t,
    messageArgument: [1]io_user_reference_t,
};
pub const kOSAsyncRefCount: c_int = 8;
pub const kOSAsyncRefSize: c_int = 32;
const enum_unnamed_608 = c_uint;
pub const OSAsyncReference = [8]natural_t;
pub const struct_OSNotificationHeader = extern struct {
    size: mach_msg_size_t align(4),
    type: natural_t,
    reference: OSAsyncReference,
    pub fn content(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        return @ptrCast(ReturnType, @alignCast(@alignOf(u8), @ptrCast(Intermediate, self) + 40));
    }
};
pub const struct_IOServiceInterestContent = extern struct {
    messageType: natural_t,
    messageArgument: [1]?*anyopaque,
};
pub const struct_IOAsyncCompletionContent = extern struct {
    result: IOReturn align(4),
    pub fn args(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), ?*anyopaque) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), ?*anyopaque);
        return @ptrCast(ReturnType, @alignCast(@alignOf(?*anyopaque), @ptrCast(Intermediate, self) + 4));
    }
};
pub const OSNotificationHeader = struct_OSNotificationHeader;
pub const IOServiceInterestContent = struct_IOServiceInterestContent;
pub const IOAsyncCompletionContent = struct_IOAsyncCompletionContent;
pub const struct_IONotificationPort = opaque {};
pub const IONotificationPortRef = ?*struct_IONotificationPort;
pub const IOServiceMatchingCallback = ?*const fn (?*anyopaque, io_iterator_t) callconv(.C) void;
pub const IOServiceInterestCallback = ?*const fn (?*anyopaque, io_service_t, u32, ?*anyopaque) callconv(.C) void;
pub extern const kIOMainPortDefault: mach_port_t;
pub extern fn IOMainPort(bootstrapPort: mach_port_t, mainPort: [*c]mach_port_t) kern_return_t;
pub extern const kIOMasterPortDefault: mach_port_t;
pub extern fn IOMasterPort(bootstrapPort: mach_port_t, mainPort: [*c]mach_port_t) kern_return_t;
pub extern fn IONotificationPortCreate(mainPort: mach_port_t) IONotificationPortRef;
pub extern fn IONotificationPortDestroy(notify: IONotificationPortRef) void;
pub extern fn IONotificationPortGetRunLoopSource(notify: IONotificationPortRef) CFRunLoopSourceRef;
pub extern fn IONotificationPortGetMachPort(notify: IONotificationPortRef) mach_port_t;
pub extern fn IONotificationPortSetImportanceReceiver(notify: IONotificationPortRef) kern_return_t;
pub extern fn IONotificationPortSetDispatchQueue(notify: IONotificationPortRef, queue: dispatch_queue_t) void;
pub extern fn IODispatchCalloutFromMessage(unused: ?*anyopaque, msg: [*c]mach_msg_header_t, reference: ?*anyopaque) void;
pub extern fn IOCreateReceivePort(msgType: u32, recvPort: [*c]mach_port_t) kern_return_t;
pub extern fn IOObjectRelease(object: io_object_t) kern_return_t;
pub extern fn IOObjectRetain(object: io_object_t) kern_return_t;
pub extern fn IOObjectGetClass(object: io_object_t, className: [*c]u8) kern_return_t;
pub extern fn IOObjectCopyClass(object: io_object_t) CFStringRef;
pub extern fn IOObjectCopySuperclassForClass(classname: CFStringRef) CFStringRef;
pub extern fn IOObjectCopyBundleIdentifierForClass(classname: CFStringRef) CFStringRef;
pub extern fn IOObjectConformsTo(object: io_object_t, className: [*c]const u8) boolean_t;
pub extern fn IOObjectIsEqualTo(object: io_object_t, anObject: io_object_t) boolean_t;
pub extern fn IOObjectGetKernelRetainCount(object: io_object_t) u32;
pub extern fn IOObjectGetUserRetainCount(object: io_object_t) u32;
pub extern fn IOObjectGetRetainCount(object: io_object_t) u32;
pub extern fn IOIteratorNext(iterator: io_iterator_t) io_object_t;
pub extern fn IOIteratorReset(iterator: io_iterator_t) void;
pub extern fn IOIteratorIsValid(iterator: io_iterator_t) boolean_t;
pub extern fn IOServiceGetMatchingService(mainPort: mach_port_t, matching: CFDictionaryRef) io_service_t;
pub extern fn IOServiceGetMatchingServices(mainPort: mach_port_t, matching: CFDictionaryRef, existing: [*c]io_iterator_t) kern_return_t;
pub extern fn IOServiceAddNotification(mainPort: mach_port_t, notificationType: [*c]const u8, matching: CFDictionaryRef, wakePort: mach_port_t, reference: usize, notification: [*c]io_iterator_t) kern_return_t;
pub extern fn IOServiceAddMatchingNotification(notifyPort: IONotificationPortRef, notificationType: [*c]const u8, matching: CFDictionaryRef, callback: IOServiceMatchingCallback, refCon: ?*anyopaque, notification: [*c]io_iterator_t) kern_return_t;
pub extern fn IOServiceAddInterestNotification(notifyPort: IONotificationPortRef, service: io_service_t, interestType: [*c]const u8, callback: IOServiceInterestCallback, refCon: ?*anyopaque, notification: [*c]io_object_t) kern_return_t;
pub extern fn IOServiceMatchPropertyTable(service: io_service_t, matching: CFDictionaryRef, matches: [*c]boolean_t) kern_return_t;
pub extern fn IOServiceGetBusyState(service: io_service_t, busyState: [*c]u32) kern_return_t;
pub extern fn IOServiceWaitQuiet(service: io_service_t, waitTime: [*c]mach_timespec_t) kern_return_t;
pub extern fn IOKitGetBusyState(mainPort: mach_port_t, busyState: [*c]u32) kern_return_t;
pub extern fn IOKitWaitQuiet(mainPort: mach_port_t, waitTime: [*c]mach_timespec_t) kern_return_t;
pub extern fn IOServiceOpen(service: io_service_t, owningTask: task_port_t, @"type": u32, connect: [*c]io_connect_t) kern_return_t;
pub extern fn IOServiceRequestProbe(service: io_service_t, options: u32) kern_return_t;
pub const kIOServiceInteractionAllowed: c_int = 1;
const enum_unnamed_609 = c_uint;
pub extern fn IOServiceAuthorize(service: io_service_t, options: u32) kern_return_t;
pub extern fn IOServiceOpenAsFileDescriptor(service: io_service_t, oflag: c_int) c_int;
pub extern fn IOServiceClose(connect: io_connect_t) kern_return_t;
pub extern fn IOConnectAddRef(connect: io_connect_t) kern_return_t;
pub extern fn IOConnectRelease(connect: io_connect_t) kern_return_t;
pub extern fn IOConnectGetService(connect: io_connect_t, service: [*c]io_service_t) kern_return_t;
pub extern fn IOConnectSetNotificationPort(connect: io_connect_t, @"type": u32, port: mach_port_t, reference: usize) kern_return_t;
pub extern fn IOConnectMapMemory(connect: io_connect_t, memoryType: u32, intoTask: task_port_t, atAddress: [*c]mach_vm_address_t, ofSize: [*c]mach_vm_size_t, options: IOOptionBits) kern_return_t;
pub extern fn IOConnectMapMemory64(connect: io_connect_t, memoryType: u32, intoTask: task_port_t, atAddress: [*c]mach_vm_address_t, ofSize: [*c]mach_vm_size_t, options: IOOptionBits) kern_return_t;
pub extern fn IOConnectUnmapMemory(connect: io_connect_t, memoryType: u32, fromTask: task_port_t, atAddress: mach_vm_address_t) kern_return_t;
pub extern fn IOConnectUnmapMemory64(connect: io_connect_t, memoryType: u32, fromTask: task_port_t, atAddress: mach_vm_address_t) kern_return_t;
pub extern fn IOConnectSetCFProperties(connect: io_connect_t, properties: CFTypeRef) kern_return_t;
pub extern fn IOConnectSetCFProperty(connect: io_connect_t, propertyName: CFStringRef, property: CFTypeRef) kern_return_t;
pub extern fn IOConnectCallMethod(connection: mach_port_t, selector: u32, input: [*c]const u64, inputCnt: u32, inputStruct: ?*const anyopaque, inputStructCnt: usize, output: [*c]u64, outputCnt: [*c]u32, outputStruct: ?*anyopaque, outputStructCnt: [*c]usize) kern_return_t;
pub extern fn IOConnectCallAsyncMethod(connection: mach_port_t, selector: u32, wake_port: mach_port_t, reference: [*c]u64, referenceCnt: u32, input: [*c]const u64, inputCnt: u32, inputStruct: ?*const anyopaque, inputStructCnt: usize, output: [*c]u64, outputCnt: [*c]u32, outputStruct: ?*anyopaque, outputStructCnt: [*c]usize) kern_return_t;
pub extern fn IOConnectCallStructMethod(connection: mach_port_t, selector: u32, inputStruct: ?*const anyopaque, inputStructCnt: usize, outputStruct: ?*anyopaque, outputStructCnt: [*c]usize) kern_return_t;
pub extern fn IOConnectCallAsyncStructMethod(connection: mach_port_t, selector: u32, wake_port: mach_port_t, reference: [*c]u64, referenceCnt: u32, inputStruct: ?*const anyopaque, inputStructCnt: usize, outputStruct: ?*anyopaque, outputStructCnt: [*c]usize) kern_return_t;
pub extern fn IOConnectCallScalarMethod(connection: mach_port_t, selector: u32, input: [*c]const u64, inputCnt: u32, output: [*c]u64, outputCnt: [*c]u32) kern_return_t;
pub extern fn IOConnectCallAsyncScalarMethod(connection: mach_port_t, selector: u32, wake_port: mach_port_t, reference: [*c]u64, referenceCnt: u32, input: [*c]const u64, inputCnt: u32, output: [*c]u64, outputCnt: [*c]u32) kern_return_t;
pub extern fn IOConnectTrap0(connect: io_connect_t, index: u32) kern_return_t;
pub extern fn IOConnectTrap1(connect: io_connect_t, index: u32, p1: usize) kern_return_t;
pub extern fn IOConnectTrap2(connect: io_connect_t, index: u32, p1: usize, p2: usize) kern_return_t;
pub extern fn IOConnectTrap3(connect: io_connect_t, index: u32, p1: usize, p2: usize, p3: usize) kern_return_t;
pub extern fn IOConnectTrap4(connect: io_connect_t, index: u32, p1: usize, p2: usize, p3: usize, p4: usize) kern_return_t;
pub extern fn IOConnectTrap5(connect: io_connect_t, index: u32, p1: usize, p2: usize, p3: usize, p4: usize, p5: usize) kern_return_t;
pub extern fn IOConnectTrap6(connect: io_connect_t, index: u32, p1: usize, p2: usize, p3: usize, p4: usize, p5: usize, p6: usize) kern_return_t;
pub extern fn IOConnectAddClient(connect: io_connect_t, client: io_connect_t) kern_return_t;
pub extern fn IORegistryGetRootEntry(mainPort: mach_port_t) io_registry_entry_t;
pub extern fn IORegistryEntryFromPath(mainPort: mach_port_t, path: [*c]const u8) io_registry_entry_t;
pub extern fn IORegistryEntryCopyFromPath(mainPort: mach_port_t, path: CFStringRef) io_registry_entry_t;
pub const kIORegistryIterateRecursively: c_int = 1;
pub const kIORegistryIterateParents: c_int = 2;
const enum_unnamed_610 = c_uint;
pub extern fn IORegistryCreateIterator(mainPort: mach_port_t, plane: [*c]const u8, options: IOOptionBits, iterator: [*c]io_iterator_t) kern_return_t;
pub extern fn IORegistryEntryCreateIterator(entry: io_registry_entry_t, plane: [*c]const u8, options: IOOptionBits, iterator: [*c]io_iterator_t) kern_return_t;
pub extern fn IORegistryIteratorEnterEntry(iterator: io_iterator_t) kern_return_t;
pub extern fn IORegistryIteratorExitEntry(iterator: io_iterator_t) kern_return_t;
pub extern fn IORegistryEntryGetName(entry: io_registry_entry_t, name: [*c]u8) kern_return_t;
pub extern fn IORegistryEntryGetNameInPlane(entry: io_registry_entry_t, plane: [*c]const u8, name: [*c]u8) kern_return_t;
pub extern fn IORegistryEntryGetLocationInPlane(entry: io_registry_entry_t, plane: [*c]const u8, location: [*c]u8) kern_return_t;
pub extern fn IORegistryEntryGetPath(entry: io_registry_entry_t, plane: [*c]const u8, path: [*c]u8) kern_return_t;
pub extern fn IORegistryEntryCopyPath(entry: io_registry_entry_t, plane: [*c]const u8) CFStringRef;
pub extern fn IORegistryEntryGetRegistryEntryID(entry: io_registry_entry_t, entryID: [*c]u64) kern_return_t;
pub extern fn IORegistryEntryCreateCFProperties(entry: io_registry_entry_t, properties: [*c]CFMutableDictionaryRef, allocator: CFAllocatorRef, options: IOOptionBits) kern_return_t;
pub extern fn IORegistryEntryCreateCFProperty(entry: io_registry_entry_t, key: CFStringRef, allocator: CFAllocatorRef, options: IOOptionBits) CFTypeRef;
pub extern fn IORegistryEntrySearchCFProperty(entry: io_registry_entry_t, plane: [*c]const u8, key: CFStringRef, allocator: CFAllocatorRef, options: IOOptionBits) CFTypeRef;
pub extern fn IORegistryEntryGetProperty(entry: io_registry_entry_t, propertyName: [*c]const u8, buffer: [*c]u8, size: [*c]u32) kern_return_t;
pub extern fn IORegistryEntrySetCFProperties(entry: io_registry_entry_t, properties: CFTypeRef) kern_return_t;
pub extern fn IORegistryEntrySetCFProperty(entry: io_registry_entry_t, propertyName: CFStringRef, property: CFTypeRef) kern_return_t;
pub extern fn IORegistryEntryGetChildIterator(entry: io_registry_entry_t, plane: [*c]const u8, iterator: [*c]io_iterator_t) kern_return_t;
pub extern fn IORegistryEntryGetChildEntry(entry: io_registry_entry_t, plane: [*c]const u8, child: [*c]io_registry_entry_t) kern_return_t;
pub extern fn IORegistryEntryGetParentIterator(entry: io_registry_entry_t, plane: [*c]const u8, iterator: [*c]io_iterator_t) kern_return_t;
pub extern fn IORegistryEntryGetParentEntry(entry: io_registry_entry_t, plane: [*c]const u8, parent: [*c]io_registry_entry_t) kern_return_t;
pub extern fn IORegistryEntryInPlane(entry: io_registry_entry_t, plane: [*c]const u8) boolean_t;
pub extern fn IOServiceMatching(name: [*c]const u8) CFMutableDictionaryRef;
pub extern fn IOServiceNameMatching(name: [*c]const u8) CFMutableDictionaryRef;
pub extern fn IOBSDNameMatching(mainPort: mach_port_t, options: u32, bsdName: [*c]const u8) CFMutableDictionaryRef;
pub extern fn IOOpenFirmwarePathMatching(mainPort: mach_port_t, options: u32, path: [*c]const u8) CFMutableDictionaryRef;
pub extern fn IORegistryEntryIDMatching(entryID: u64) CFMutableDictionaryRef;
pub extern fn IOServiceOFPathToBSDName(mainPort: mach_port_t, openFirmwarePath: [*c]const u8, bsdName: [*c]u8) kern_return_t;
pub const IOAsyncCallback0 = ?*const fn (?*anyopaque, IOReturn) callconv(.C) void;
pub const IOAsyncCallback1 = ?*const fn (?*anyopaque, IOReturn, ?*anyopaque) callconv(.C) void;
pub const IOAsyncCallback2 = ?*const fn (?*anyopaque, IOReturn, ?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const IOAsyncCallback = ?*const fn (?*anyopaque, IOReturn, [*c]?*anyopaque, u32) callconv(.C) void;
pub extern fn OSGetNotificationFromMessage(msg: [*c]mach_msg_header_t, index: u32, @"type": [*c]u32, reference: [*c]usize, content: [*c]?*anyopaque, size: [*c]vm_size_t) kern_return_t;
pub extern fn IOCatalogueSendData(mainPort: mach_port_t, flag: u32, buffer: [*c]const u8, size: u32) kern_return_t;
pub extern fn IOCatalogueTerminate(mainPort: mach_port_t, flag: u32, description: [*c]u8) kern_return_t;
pub extern fn IOCatalogueGetData(mainPort: mach_port_t, flag: u32, buffer: [*c][*c]u8, size: [*c]u32) kern_return_t;
pub extern fn IOCatalogueModuleLoaded(mainPort: mach_port_t, name: [*c]u8) kern_return_t;
pub extern fn IOCatalogueReset(mainPort: mach_port_t, flag: u32) kern_return_t;
pub const struct___DASession = opaque {};
pub const DASessionRef = ?*struct___DASession;
pub extern fn DASessionGetTypeID() CFTypeID;
pub extern fn DASessionCreate(allocator: CFAllocatorRef) DASessionRef;
pub extern fn DASessionScheduleWithRunLoop(session: DASessionRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) void;
pub extern fn DASessionUnscheduleFromRunLoop(session: DASessionRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) void;
pub extern fn DASessionSetDispatchQueue(session: DASessionRef, queue: dispatch_queue_t) void;
pub const DAApprovalSessionRef = ?*struct___DASession;
pub extern fn DAApprovalSessionGetTypeID() CFTypeID;
pub extern fn DAApprovalSessionCreate(allocator: CFAllocatorRef) DAApprovalSessionRef;
pub extern fn DAApprovalSessionScheduleWithRunLoop(session: DAApprovalSessionRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) void;
pub extern fn DAApprovalSessionUnscheduleFromRunLoop(session: DAApprovalSessionRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) void;
pub extern const kDADiskDescriptionVolumeKindKey: CFStringRef;
pub extern const kDADiskDescriptionVolumeMountableKey: CFStringRef;
pub extern const kDADiskDescriptionVolumeNameKey: CFStringRef;
pub extern const kDADiskDescriptionVolumeNetworkKey: CFStringRef;
pub extern const kDADiskDescriptionVolumePathKey: CFStringRef;
pub extern const kDADiskDescriptionVolumeTypeKey: CFStringRef;
pub extern const kDADiskDescriptionVolumeUUIDKey: CFStringRef;
pub extern const kDADiskDescriptionMediaBlockSizeKey: CFStringRef;
pub extern const kDADiskDescriptionMediaBSDMajorKey: CFStringRef;
pub extern const kDADiskDescriptionMediaBSDMinorKey: CFStringRef;
pub extern const kDADiskDescriptionMediaBSDNameKey: CFStringRef;
pub extern const kDADiskDescriptionMediaBSDUnitKey: CFStringRef;
pub extern const kDADiskDescriptionMediaContentKey: CFStringRef;
pub extern const kDADiskDescriptionMediaEjectableKey: CFStringRef;
pub extern const kDADiskDescriptionMediaIconKey: CFStringRef;
pub extern const kDADiskDescriptionMediaKindKey: CFStringRef;
pub extern const kDADiskDescriptionMediaLeafKey: CFStringRef;
pub extern const kDADiskDescriptionMediaNameKey: CFStringRef;
pub extern const kDADiskDescriptionMediaPathKey: CFStringRef;
pub extern const kDADiskDescriptionMediaRemovableKey: CFStringRef;
pub extern const kDADiskDescriptionMediaSizeKey: CFStringRef;
pub extern const kDADiskDescriptionMediaTypeKey: CFStringRef;
pub extern const kDADiskDescriptionMediaUUIDKey: CFStringRef;
pub extern const kDADiskDescriptionMediaWholeKey: CFStringRef;
pub extern const kDADiskDescriptionMediaWritableKey: CFStringRef;
pub extern const kDADiskDescriptionMediaEncryptedKey: CFStringRef;
pub extern const kDADiskDescriptionMediaEncryptionDetailKey: CFStringRef;
pub extern const kDADiskDescriptionDeviceGUIDKey: CFStringRef;
pub extern const kDADiskDescriptionDeviceInternalKey: CFStringRef;
pub extern const kDADiskDescriptionDeviceModelKey: CFStringRef;
pub extern const kDADiskDescriptionDevicePathKey: CFStringRef;
pub extern const kDADiskDescriptionDeviceProtocolKey: CFStringRef;
pub extern const kDADiskDescriptionDeviceRevisionKey: CFStringRef;
pub extern const kDADiskDescriptionDeviceUnitKey: CFStringRef;
pub extern const kDADiskDescriptionDeviceVendorKey: CFStringRef;
pub extern const kDADiskDescriptionDeviceTDMLockedKey: CFStringRef;
pub extern const kDADiskDescriptionBusNameKey: CFStringRef;
pub extern const kDADiskDescriptionBusPathKey: CFStringRef;
pub const struct___DADisk = opaque {};
pub const DADiskRef = ?*struct___DADisk;
pub extern fn DADiskGetTypeID() CFTypeID;
pub extern fn DADiskCreateFromBSDName(allocator: CFAllocatorRef, session: DASessionRef, name: [*c]const u8) DADiskRef;
pub extern fn DADiskCreateFromIOMedia(allocator: CFAllocatorRef, session: DASessionRef, media: io_service_t) DADiskRef;
pub extern fn DADiskCreateFromVolumePath(allocator: CFAllocatorRef, session: DASessionRef, path: CFURLRef) DADiskRef;
pub extern fn DADiskGetBSDName(disk: DADiskRef) [*c]const u8;
pub extern fn DADiskCopyIOMedia(disk: DADiskRef) io_service_t;
pub extern fn DADiskCopyDescription(disk: DADiskRef) CFDictionaryRef;
pub extern fn DADiskCopyWholeDisk(disk: DADiskRef) DADiskRef;
pub const struct_HFSUniStr255 = packed struct {
    length: u_int16_t,
    unicode: [255]u_int16_t,
};
pub const HFSUniStr255 = struct_HFSUniStr255;
pub const ConstHFSUniStr255Param = [*c]const HFSUniStr255;
pub const fsCurPerm: c_int = 0;
pub const fsRdPerm: c_int = 1;
pub const fsWrPerm: c_int = 2;
pub const fsRdWrPerm: c_int = 3;
pub const fsRdWrShPerm: c_int = 4;
const enum_unnamed_611 = c_uint;
pub const fsRdAccessPerm: c_int = 1;
pub const fsWrAccessPerm: c_int = 2;
pub const fsRdDenyPerm: c_int = 16;
pub const fsWrDenyPerm: c_int = 32;
const enum_unnamed_612 = c_uint;
pub const fsRtParID: c_int = 1;
pub const fsRtDirID: c_int = 2;
const enum_unnamed_613 = c_uint;
pub const fsAtMark: c_int = 0;
pub const fsFromStart: c_int = 1;
pub const fsFromLEOF: c_int = 2;
pub const fsFromMark: c_int = 3;
const enum_unnamed_614 = c_uint;
pub const kFSAllowConcurrentAsyncIOBit: c_int = 3;
pub const kFSAllowConcurrentAsyncIOMask: c_int = 8;
pub const kFSPleaseCacheBit: c_int = 4;
pub const kFSPleaseCacheMask: c_int = 16;
pub const kFSNoCacheBit: c_int = 5;
pub const kFSNoCacheMask: c_int = 32;
pub const kFSRdVerifyBit: c_int = 6;
pub const kFSRdVerifyMask: c_int = 64;
pub const kFSForceReadBit: c_int = 6;
pub const kFSForceReadMask: c_int = 64;
pub const kFSNewLineBit: c_int = 7;
pub const kFSNewLineMask: c_int = 128;
pub const kFSNewLineCharMask: c_int = 65280;
const enum_unnamed_615 = c_uint;
pub const fsSBPartialName: c_int = 1;
pub const fsSBFullName: c_int = 2;
pub const fsSBFlAttrib: c_int = 4;
pub const fsSBFlFndrInfo: c_int = 8;
pub const fsSBFlLgLen: c_int = 32;
pub const fsSBFlPyLen: c_int = 64;
pub const fsSBFlRLgLen: c_int = 128;
pub const fsSBFlRPyLen: c_int = 256;
pub const fsSBFlCrDat: c_int = 512;
pub const fsSBFlMdDat: c_int = 1024;
pub const fsSBFlBkDat: c_int = 2048;
pub const fsSBFlXFndrInfo: c_int = 4096;
pub const fsSBFlParID: c_int = 8192;
pub const fsSBNegate: c_int = 16384;
pub const fsSBDrUsrWds: c_int = 8;
pub const fsSBDrNmFls: c_int = 16;
pub const fsSBDrCrDat: c_int = 512;
pub const fsSBDrMdDat: c_int = 1024;
pub const fsSBDrBkDat: c_int = 2048;
pub const fsSBDrFndrInfo: c_int = 4096;
pub const fsSBDrParID: c_int = 8192;
pub const fsSBNodeID: c_int = 32768;
pub const fsSBAttributeModDate: c_int = 65536;
pub const fsSBAccessDate: c_int = 131072;
pub const fsSBPermissions: c_int = 262144;
pub const fsSBSkipPackageContents: c_int = 524288;
pub const fsSBSkipHiddenItems: c_int = 1048576;
pub const fsSBUserID: c_int = 2097152;
pub const fsSBGroupID: c_int = 4194304;
const enum_unnamed_616 = c_uint;
pub const fsSBPartialNameBit: c_int = 0;
pub const fsSBFullNameBit: c_int = 1;
pub const fsSBFlAttribBit: c_int = 2;
pub const fsSBFlFndrInfoBit: c_int = 3;
pub const fsSBFlLgLenBit: c_int = 5;
pub const fsSBFlPyLenBit: c_int = 6;
pub const fsSBFlRLgLenBit: c_int = 7;
pub const fsSBFlRPyLenBit: c_int = 8;
pub const fsSBFlCrDatBit: c_int = 9;
pub const fsSBFlMdDatBit: c_int = 10;
pub const fsSBFlBkDatBit: c_int = 11;
pub const fsSBFlXFndrInfoBit: c_int = 12;
pub const fsSBFlParIDBit: c_int = 13;
pub const fsSBNegateBit: c_int = 14;
pub const fsSBDrUsrWdsBit: c_int = 3;
pub const fsSBDrNmFlsBit: c_int = 4;
pub const fsSBDrCrDatBit: c_int = 9;
pub const fsSBDrMdDatBit: c_int = 10;
pub const fsSBDrBkDatBit: c_int = 11;
pub const fsSBDrFndrInfoBit: c_int = 12;
pub const fsSBDrParIDBit: c_int = 13;
pub const fsSBNodeIDBit: c_int = 15;
pub const fsSBAttributeModDateBit: c_int = 16;
pub const fsSBAccessDateBit: c_int = 17;
pub const fsSBPermissionsBit: c_int = 18;
pub const fsSBSkipPackageContentsBit: c_int = 19;
pub const fsSBSkipHiddenItemsBit: c_int = 20;
pub const fsSBUserIDBit: c_int = 21;
pub const fsSBGroupIDBit: c_int = 22;
const enum_unnamed_617 = c_uint;
pub const bLimitFCBs: c_int = 31;
pub const bLocalWList: c_int = 30;
pub const bNoMiniFndr: c_int = 29;
pub const bNoVNEdit: c_int = 28;
pub const bNoLclSync: c_int = 27;
pub const bTrshOffLine: c_int = 26;
pub const bNoSwitchTo: c_int = 25;
pub const bNoDeskItems: c_int = 20;
pub const bNoBootBlks: c_int = 19;
pub const bAccessCntl: c_int = 18;
pub const bNoSysDir: c_int = 17;
pub const bHasExtFSVol: c_int = 16;
pub const bHasOpenDeny: c_int = 15;
pub const bHasCopyFile: c_int = 14;
pub const bHasMoveRename: c_int = 13;
pub const bHasDesktopMgr: c_int = 12;
pub const bHasShortName: c_int = 11;
pub const bHasFolderLock: c_int = 10;
pub const bHasPersonalAccessPrivileges: c_int = 9;
pub const bHasUserGroupList: c_int = 8;
pub const bHasCatSearch: c_int = 7;
pub const bHasFileIDs: c_int = 6;
pub const bHasBTreeMgr: c_int = 5;
pub const bHasBlankAccessPrivileges: c_int = 4;
pub const bSupportsAsyncRequests: c_int = 3;
pub const bSupportsTrashVolumeCache: c_int = 2;
const enum_unnamed_618 = c_uint;
pub const bHasDirectIO: c_int = 1;
const enum_unnamed_619 = c_uint;
pub const bIsEjectable: c_int = 0;
pub const bSupportsHFSPlusAPIs: c_int = 1;
pub const bSupportsFSCatalogSearch: c_int = 2;
pub const bSupportsFSExchangeObjects: c_int = 3;
pub const bSupports2TBFiles: c_int = 4;
pub const bSupportsLongNames: c_int = 5;
pub const bSupportsMultiScriptNames: c_int = 6;
pub const bSupportsNamedForks: c_int = 7;
pub const bSupportsSubtreeIterators: c_int = 8;
pub const bL2PCanMapFileBlocks: c_int = 9;
pub const bParentModDateChanges: c_int = 10;
pub const bAncestorModDateChanges: c_int = 11;
pub const bSupportsSymbolicLinks: c_int = 13;
pub const bIsAutoMounted: c_int = 14;
pub const bAllowCDiDataHandler: c_int = 17;
pub const bSupportsExclusiveLocks: c_int = 18;
pub const bSupportsJournaling: c_int = 19;
pub const bNoVolumeSizes: c_int = 20;
pub const bIsOnInternalBus: c_int = 21;
pub const bIsCaseSensitive: c_int = 22;
pub const bIsCasePreserving: c_int = 23;
pub const bDoNotDisplay: c_int = 24;
pub const bIsRemovable: c_int = 25;
pub const bNoRootTimes: c_int = 26;
pub const bIsOnExternalBus: c_int = 27;
pub const bSupportsExtendedFileSecurity: c_int = 28;
const enum_unnamed_620 = c_uint;
pub const kWidePosOffsetBit: c_int = 8;
pub const kUseWidePositioning: c_int = 256;
pub const kMaximumBlocksIn4GB: c_int = 8388607;
const enum_unnamed_621 = c_uint;
pub const fsUnixPriv: c_int = 1;
const enum_unnamed_622 = c_uint;
pub const kNoUserAuthentication: c_int = 1;
pub const kPassword: c_int = 2;
pub const kEncryptPassword: c_int = 3;
pub const kTwoWayEncryptPassword: c_int = 6;
const enum_unnamed_623 = c_uint;
pub const knoUser: c_int = 0;
pub const kadministratorUser: c_int = 1;
const enum_unnamed_624 = c_uint;
pub const knoGroup: c_int = 0;
const enum_unnamed_625 = c_uint;
pub const FSVolumeRefNum = SInt16;
pub const FSIORefNum = c_int;
pub const kFSInvalidVolumeRefNum: c_int = 0;
const enum_unnamed_626 = c_uint;
pub const FSRef = struct_FSRef;
pub const FSRefPtr = [*c]FSRef;
pub const struct___FSFileSecurity = opaque {};
pub const FSFileSecurityRef = ?*struct___FSFileSecurity;
pub const struct_CatPositionRec = extern struct {
    initialize: SInt32,
    priv: [6]SInt16,
};
pub const CatPositionRec = struct_CatPositionRec;
pub const struct_FSSpec = extern struct {
    hidden: [70]UInt8,
};
pub const FSSpec = struct_FSSpec;
pub const FSSpecPtr = [*c]FSSpec;
pub const FSSpecHandle = [*c]FSSpecPtr;
pub const FSSpecArrayPtr = FSSpecPtr;
pub const ConstFSSpecPtr = [*c]const FSSpec;
pub const union_ParamBlockRec = opaque {};
pub const ParamBlockRec = union_ParamBlockRec;
pub const ParmBlkPtr = ?*anyopaque;
pub const IOCompletionProcPtr = ?*const fn (ParmBlkPtr) callconv(.C) void;
pub const IOCompletionUPP = IOCompletionProcPtr;
pub const struct_FSPermissionInfo = extern struct {
    userID: UInt32,
    groupID: UInt32,
    reserved1: UInt8,
    userAccess: UInt8,
    mode: UInt16,
    fileSec: FSFileSecurityRef,
};
pub const FSPermissionInfo = struct_FSPermissionInfo;
pub const FSCatalogInfoBitmap = UInt32;
pub const kFSCatInfoNone: c_int = 0;
pub const kFSCatInfoTextEncoding: c_int = 1;
pub const kFSCatInfoNodeFlags: c_int = 2;
pub const kFSCatInfoVolume: c_int = 4;
pub const kFSCatInfoParentDirID: c_int = 8;
pub const kFSCatInfoNodeID: c_int = 16;
pub const kFSCatInfoCreateDate: c_int = 32;
pub const kFSCatInfoContentMod: c_int = 64;
pub const kFSCatInfoAttrMod: c_int = 128;
pub const kFSCatInfoAccessDate: c_int = 256;
pub const kFSCatInfoBackupDate: c_int = 512;
pub const kFSCatInfoPermissions: c_int = 1024;
pub const kFSCatInfoFinderInfo: c_int = 2048;
pub const kFSCatInfoFinderXInfo: c_int = 4096;
pub const kFSCatInfoValence: c_int = 8192;
pub const kFSCatInfoDataSizes: c_int = 16384;
pub const kFSCatInfoRsrcSizes: c_int = 32768;
pub const kFSCatInfoSharingFlags: c_int = 65536;
pub const kFSCatInfoUserPrivs: c_int = 131072;
pub const kFSCatInfoUserAccess: c_int = 524288;
pub const kFSCatInfoSetOwnership: c_int = 1048576;
pub const kFSCatInfoFSFileSecurityRef: c_int = 4194304;
pub const kFSCatInfoAllDates: c_int = 992;
pub const kFSCatInfoGettableInfo: c_int = 262143;
pub const kFSCatInfoSettableInfo: c_int = 8163;
pub const kFSCatInfoReserved: c_int = -262144;
const enum_unnamed_627 = c_int;
pub const kFSNodeLockedBit: c_int = 0;
pub const kFSNodeLockedMask: c_int = 1;
pub const kFSNodeResOpenBit: c_int = 2;
pub const kFSNodeResOpenMask: c_int = 4;
pub const kFSNodeDataOpenBit: c_int = 3;
pub const kFSNodeDataOpenMask: c_int = 8;
pub const kFSNodeIsDirectoryBit: c_int = 4;
pub const kFSNodeIsDirectoryMask: c_int = 16;
pub const kFSNodeCopyProtectBit: c_int = 6;
pub const kFSNodeCopyProtectMask: c_int = 64;
pub const kFSNodeForkOpenBit: c_int = 7;
pub const kFSNodeForkOpenMask: c_int = 128;
pub const kFSNodeHardLinkBit: c_int = 8;
pub const kFSNodeHardLinkMask: c_int = 256;
const enum_unnamed_628 = c_uint;
pub const kFSNodeInSharedBit: c_int = 2;
pub const kFSNodeInSharedMask: c_int = 4;
pub const kFSNodeIsMountedBit: c_int = 3;
pub const kFSNodeIsMountedMask: c_int = 8;
pub const kFSNodeIsSharePointBit: c_int = 5;
pub const kFSNodeIsSharePointMask: c_int = 32;
const enum_unnamed_629 = c_uint;
pub const struct_FSCatalogInfo = extern struct {
    nodeFlags: UInt16,
    volume: FSVolumeRefNum,
    parentDirID: UInt32,
    nodeID: UInt32,
    sharingFlags: UInt8,
    userPrivileges: UInt8,
    reserved1: UInt8,
    reserved2: UInt8,
    createDate: UTCDateTime,
    contentModDate: UTCDateTime,
    attributeModDate: UTCDateTime,
    accessDate: UTCDateTime,
    backupDate: UTCDateTime,
    permissions: FSPermissionInfo,
    finderInfo: [16]UInt8,
    extFinderInfo: [16]UInt8,
    dataLogicalSize: UInt64,
    dataPhysicalSize: UInt64,
    rsrcLogicalSize: UInt64,
    rsrcPhysicalSize: UInt64,
    valence: UInt32,
    textEncodingHint: TextEncoding,
};
pub const FSCatalogInfo = struct_FSCatalogInfo;
pub const FSCatalogInfoPtr = [*c]FSCatalogInfo;
pub const struct_FSRefParam = extern struct {
    qLink: QElemPtr,
    qType: SInt16,
    ioTrap: SInt16,
    ioCmdAddr: Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: OSErr,
    ioNamePtr: ConstStringPtr,
    ioVRefNum: FSVolumeRefNum,
    reserved1: SInt16,
    reserved2: UInt8,
    reserved3: UInt8,
    ref: [*c]const FSRef,
    whichInfo: FSCatalogInfoBitmap,
    catInfo: [*c]FSCatalogInfo,
    nameLength: UniCharCount,
    name: [*c]const UniChar,
    ioDirID: UInt32,
    spec: FSSpecPtr,
    parentRef: [*c]FSRef,
    newRef: [*c]FSRef,
    textEncodingHint: TextEncoding,
    outName: [*c]HFSUniStr255,
};
pub const FSRefParam = struct_FSRefParam;
pub const FSRefParamPtr = [*c]FSRefParam;
pub const struct_FSRefForkIOParam = extern struct {
    qLink: QElemPtr,
    qType: SInt16,
    ioTrap: SInt16,
    ioCmdAddr: Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: OSErr,
    parentRef: [*c]const FSRef,
    nameLength: UniCharCount,
    name: [*c]const UniChar,
    whichInfo: FSCatalogInfoBitmap,
    catInfo: [*c]const FSCatalogInfo,
    forkNameLength: UniCharCount,
    forkName: [*c]const UniChar,
    permissions: SInt8,
    reserved1: UInt8,
    forkRefNum: FSIORefNum,
    newRef: [*c]FSRef,
};
pub const FSRefForkIOParam = struct_FSRefForkIOParam;
pub const FSRefForkIOParamPtr = [*c]FSRefForkIOParam;
pub const struct_OpaqueFSIterator = opaque {};
pub const FSIterator = ?*struct_OpaqueFSIterator;
pub const kFSIterateFlat: c_int = 0;
pub const kFSIterateSubtree: c_int = 1;
pub const kFSIterateDelete: c_int = 2;
pub const kFSIterateReserved: c_int = -4;
const enum_unnamed_630 = c_int;
pub const FSIteratorFlags = OptionBits;
pub const struct_FSSearchParams = extern struct {
    searchTime: Duration,
    searchBits: OptionBits,
    searchNameLength: UniCharCount,
    searchName: [*c]const UniChar,
    searchInfo1: [*c]FSCatalogInfo,
    searchInfo2: [*c]FSCatalogInfo,
};
pub const FSSearchParams = struct_FSSearchParams;
pub const FSSearchParamsPtr = [*c]FSSearchParams;
pub const struct_FSCatalogBulkParam = extern struct {
    qLink: QElemPtr,
    qType: SInt16,
    ioTrap: SInt16,
    ioCmdAddr: Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: OSErr,
    containerChanged: Boolean,
    reserved: UInt8,
    iteratorFlags: FSIteratorFlags,
    iterator: FSIterator,
    container: [*c]const FSRef,
    maximumItems: ItemCount,
    actualItems: ItemCount,
    whichInfo: FSCatalogInfoBitmap,
    catalogInfo: [*c]FSCatalogInfo,
    refs: [*c]FSRef,
    specs: FSSpecPtr,
    names: [*c]HFSUniStr255,
    searchParams: [*c]const FSSearchParams,
};
pub const FSCatalogBulkParam = struct_FSCatalogBulkParam;
pub const FSCatalogBulkParamPtr = [*c]FSCatalogBulkParam;
pub const FSAllocationFlags = UInt16;
pub const kFSAllocDefaultFlags: c_int = 0;
pub const kFSAllocAllOrNothingMask: c_int = 1;
pub const kFSAllocContiguousMask: c_int = 2;
pub const kFSAllocNoRoundUpMask: c_int = 4;
pub const kFSAllocReservedMask: c_int = 65528;
const enum_unnamed_631 = c_uint;
pub const struct_FSForkIOParam = extern struct {
    qLink: QElemPtr,
    qType: SInt16,
    ioTrap: SInt16,
    ioCmdAddr: Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: OSErr,
    reserved1: ?*anyopaque,
    reserved2: SInt16,
    forkRefNum: FSIORefNum,
    reserved3: UInt8,
    permissions: SInt8,
    ref: [*c]const FSRef,
    buffer: Ptr,
    requestCount: UInt32,
    actualCount: UInt32,
    positionMode: UInt16,
    positionOffset: SInt64,
    allocationFlags: FSAllocationFlags,
    allocationAmount: UInt64,
    forkNameLength: UniCharCount,
    forkName: [*c]const UniChar,
    forkIterator: CatPositionRec,
    outForkName: [*c]HFSUniStr255,
};
pub const FSForkIOParam = struct_FSForkIOParam;
pub const FSForkIOParamPtr = [*c]FSForkIOParam;
pub const FSForkInfoFlags = UInt8;
pub const struct_FSForkInfo = extern struct {
    flags: FSForkInfoFlags,
    permissions: SInt8,
    volume: FSVolumeRefNum,
    reserved2: UInt32,
    nodeID: UInt32,
    forkID: UInt32,
    currentPosition: UInt64,
    logicalEOF: UInt64,
    physicalEOF: UInt64,
    process: UInt64,
};
pub const FSForkInfo = struct_FSForkInfo;
pub const FSForkInfoPtr = [*c]FSForkInfo;
pub const struct_FSForkCBInfoParam = extern struct {
    qLink: QElemPtr,
    qType: SInt16,
    ioTrap: SInt16,
    ioCmdAddr: Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: OSErr,
    desiredRefNum: FSIORefNum,
    volumeRefNum: FSVolumeRefNum,
    iterator: FSIORefNum,
    actualRefNum: FSVolumeRefNum,
    ref: [*c]FSRef,
    forkInfo: [*c]FSForkInfo,
    forkName: [*c]HFSUniStr255,
};
pub const FSForkCBInfoParam = struct_FSForkCBInfoParam;
pub const FSForkCBInfoParamPtr = [*c]FSForkCBInfoParam;
pub const struct_FSRangeLockParam = extern struct {
    qLink: QElemPtr,
    qType: SInt16,
    ioTrap: SInt16,
    ioCmdAddr: Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: OSErr,
    forkRefNum: FSIORefNum,
    requestCount: UInt64,
    positionMode: UInt16,
    positionOffset: SInt64,
    rangeStart: UInt64,
};
pub const FSRangeLockParam = struct_FSRangeLockParam;
pub const FSRangeLockParamPtr = [*c]FSRangeLockParam;
pub const FSVolumeInfoBitmap = UInt32;
pub const kFSVolInfoNone: c_int = 0;
pub const kFSVolInfoCreateDate: c_int = 1;
pub const kFSVolInfoModDate: c_int = 2;
pub const kFSVolInfoBackupDate: c_int = 4;
pub const kFSVolInfoCheckedDate: c_int = 8;
pub const kFSVolInfoFileCount: c_int = 16;
pub const kFSVolInfoDirCount: c_int = 32;
pub const kFSVolInfoSizes: c_int = 64;
pub const kFSVolInfoBlocks: c_int = 128;
pub const kFSVolInfoNextAlloc: c_int = 256;
pub const kFSVolInfoRsrcClump: c_int = 512;
pub const kFSVolInfoDataClump: c_int = 1024;
pub const kFSVolInfoNextID: c_int = 2048;
pub const kFSVolInfoFinderInfo: c_int = 4096;
pub const kFSVolInfoFlags: c_int = 8192;
pub const kFSVolInfoFSInfo: c_int = 16384;
pub const kFSVolInfoDriveInfo: c_int = 32768;
pub const kFSVolInfoGettableInfo: c_int = 65535;
pub const kFSVolInfoSettableInfo: c_int = 12292;
const enum_unnamed_632 = c_uint;
pub const kFSVolFlagDefaultVolumeBit: c_int = 5;
pub const kFSVolFlagDefaultVolumeMask: c_int = 32;
pub const kFSVolFlagFilesOpenBit: c_int = 6;
pub const kFSVolFlagFilesOpenMask: c_int = 64;
pub const kFSVolFlagHardwareLockedBit: c_int = 7;
pub const kFSVolFlagHardwareLockedMask: c_int = 128;
pub const kFSVolFlagJournalingActiveBit: c_int = 14;
pub const kFSVolFlagJournalingActiveMask: c_int = 16384;
pub const kFSVolFlagSoftwareLockedBit: c_int = 15;
pub const kFSVolFlagSoftwareLockedMask: c_int = 32768;
const enum_unnamed_633 = c_uint;
pub const struct_FSVolumeInfo = extern struct {
    createDate: UTCDateTime,
    modifyDate: UTCDateTime,
    backupDate: UTCDateTime,
    checkedDate: UTCDateTime,
    fileCount: UInt32,
    folderCount: UInt32,
    totalBytes: UInt64,
    freeBytes: UInt64,
    blockSize: UInt32,
    totalBlocks: UInt32,
    freeBlocks: UInt32,
    nextAllocation: UInt32,
    rsrcClumpSize: UInt32,
    dataClumpSize: UInt32,
    nextCatalogID: UInt32,
    finderInfo: [32]UInt8,
    flags: UInt16,
    filesystemID: UInt16,
    signature: UInt16,
    driveNumber: UInt16,
    driverRefNum: FSIORefNum,
};
pub const FSVolumeInfo = struct_FSVolumeInfo;
pub const FSVolumeInfoPtr = [*c]FSVolumeInfo;
pub const struct_FSVolumeInfoParam = extern struct {
    qLink: QElemPtr,
    qType: SInt16,
    ioTrap: SInt16,
    ioCmdAddr: Ptr,
    ioCompletion: IOCompletionUPP,
    ioResult: OSErr,
    ioNamePtr: StringPtr,
    ioVRefNum: FSVolumeRefNum,
    volumeIndex: UInt32,
    whichInfo: FSVolumeInfoBitmap,
    volumeInfo: [*c]FSVolumeInfo,
    volumeName: [*c]HFSUniStr255,
    ref: [*c]FSRef,
};
pub const FSVolumeInfoParam = struct_FSVolumeInfoParam;
pub const FSVolumeInfoParamPtr = [*c]FSVolumeInfoParam;
pub const struct_GetVolParmsInfoBuffer = extern struct {
    vMVersion: SInt16,
    vMAttrib: SInt32,
    vMLocalHand: Handle,
    vMServerAdr: SInt32,
    vMVolumeGrade: SInt32,
    vMForeignPrivID: SInt16,
    vMExtendedAttributes: SInt32,
    vMDeviceID: ?*anyopaque,
    vMMaxNameLength: UniCharCount,
};
pub const GetVolParmsInfoBuffer = struct_GetVolParmsInfoBuffer;
pub const VolumeType = OSType;
pub const AppleShareMediaType: c_int = 1634103405;
const enum_unnamed_634 = c_uint;
pub const struct_VolMountInfoHeader = extern struct {
    length: SInt16,
    media: VolumeType,
};
pub const VolMountInfoHeader = struct_VolMountInfoHeader;
pub const VolMountInfoPtr = [*c]VolMountInfoHeader;
pub const struct_VolumeMountInfoHeader = extern struct {
    length: SInt16,
    media: VolumeType,
    flags: SInt16,
};
pub const VolumeMountInfoHeader = struct_VolumeMountInfoHeader;
pub const VolumeMountInfoHeaderPtr = [*c]VolumeMountInfoHeader;
pub const volMountNoLoginMsgFlagBit: c_int = 0;
pub const volMountNoLoginMsgFlagMask: c_int = 1;
pub const volMountExtendedFlagsBit: c_int = 7;
pub const volMountExtendedFlagsMask: c_int = 128;
pub const volMountInteractBit: c_int = 15;
pub const volMountInteractMask: c_int = 32768;
pub const volMountChangedBit: c_int = 14;
pub const volMountChangedMask: c_int = 16384;
pub const volMountFSReservedMask: c_int = 255;
pub const volMountSysReservedMask: c_int = 65280;
const enum_unnamed_635 = c_uint;
pub const struct_AFPVolMountInfo = extern struct {
    length: SInt16,
    media: VolumeType,
    flags: SInt16,
    nbpInterval: SInt8,
    nbpCount: SInt8,
    uamType: SInt16,
    zoneNameOffset: SInt16,
    serverNameOffset: SInt16,
    volNameOffset: SInt16,
    userNameOffset: SInt16,
    userPasswordOffset: SInt16,
    volPasswordOffset: SInt16,
    AFPData: [144]u8,
};
pub const AFPVolMountInfo = struct_AFPVolMountInfo;
pub const AFPVolMountInfoPtr = [*c]AFPVolMountInfo;
pub const struct_AFPXVolMountInfo = extern struct {
    length: SInt16,
    media: VolumeType,
    flags: SInt16,
    nbpInterval: SInt8,
    nbpCount: SInt8,
    uamType: SInt16,
    zoneNameOffset: SInt16,
    serverNameOffset: SInt16,
    volNameOffset: SInt16,
    userNameOffset: SInt16,
    userPasswordOffset: SInt16,
    volPasswordOffset: SInt16,
    extendedFlags: SInt16,
    uamNameOffset: SInt16,
    alternateAddressOffset: SInt16,
    AFPData: [176]u8,
};
pub const AFPXVolMountInfo = struct_AFPXVolMountInfo;
pub const AFPXVolMountInfoPtr = [*c]AFPXVolMountInfo;
pub const kAFPExtendedFlagsAlternateAddressMask: c_int = 1;
const enum_unnamed_636 = c_uint;
pub const kAFPTagTypeIP: c_int = 1;
pub const kAFPTagTypeIPPort: c_int = 2;
pub const kAFPTagTypeDDP: c_int = 3;
pub const kAFPTagTypeDNS: c_int = 4;
const enum_unnamed_637 = c_uint;
pub const kAFPTagLengthIP: c_int = 6;
pub const kAFPTagLengthIPPort: c_int = 8;
pub const kAFPTagLengthDDP: c_int = 6;
const enum_unnamed_638 = c_uint;
pub const struct_AFPTagData = extern struct {
    fLength: UInt8,
    fType: UInt8,
    fData: [1]UInt8,
};
pub const AFPTagData = struct_AFPTagData;
pub const struct_AFPAlternateAddress = extern struct {
    fVersion: UInt8,
    fAddressCount: UInt8,
    fAddressList: [1]UInt8,
};
pub const AFPAlternateAddress = struct_AFPAlternateAddress;
pub const kLargeIconSize: c_int = 256;
pub const kLarge4BitIconSize: c_int = 512;
pub const kLarge8BitIconSize: c_int = 1024;
pub const kSmallIconSize: c_int = 64;
pub const kSmall4BitIconSize: c_int = 128;
pub const kSmall8BitIconSize: c_int = 256;
const enum_unnamed_639 = c_uint;
pub extern fn NewIOCompletionUPP(userRoutine: IOCompletionProcPtr) IOCompletionUPP;
pub extern fn DisposeIOCompletionUPP(userUPP: IOCompletionUPP) void;
pub extern fn InvokeIOCompletionUPP(paramBlock: ParmBlkPtr, userUPP: IOCompletionUPP) void;
pub extern fn FSMakeFSRefUnicode(parentRef: [*c]const FSRef, nameLength: UniCharCount, name: [*c]const UniChar, textEncodingHint: TextEncoding, newRef: [*c]FSRef) OSErr;
pub extern fn PBMakeFSRefUnicodeSync(paramBlock: [*c]FSRefParam) OSErr;
pub extern fn PBMakeFSRefUnicodeAsync(paramBlock: [*c]FSRefParam) void;
pub extern fn FSCompareFSRefs(ref1: [*c]const FSRef, ref2: [*c]const FSRef) OSErr;
pub extern fn PBCompareFSRefsSync(paramBlock: [*c]FSRefParam) OSErr;
pub extern fn PBCompareFSRefsAsync(paramBlock: [*c]FSRefParam) void;
pub extern fn FSCreateFileUnicode(parentRef: [*c]const FSRef, nameLength: UniCharCount, name: [*c]const UniChar, whichInfo: FSCatalogInfoBitmap, catalogInfo: [*c]const FSCatalogInfo, newRef: [*c]FSRef, newSpec: FSSpecPtr) OSErr;
pub extern fn PBCreateFileUnicodeSync(paramBlock: [*c]FSRefParam) OSErr;
pub extern fn PBCreateFileUnicodeAsync(paramBlock: [*c]FSRefParam) void;
pub extern fn FSCreateDirectoryUnicode(parentRef: [*c]const FSRef, nameLength: UniCharCount, name: [*c]const UniChar, whichInfo: FSCatalogInfoBitmap, catalogInfo: [*c]const FSCatalogInfo, newRef: [*c]FSRef, newSpec: FSSpecPtr, newDirID: [*c]UInt32) OSErr;
pub extern fn PBCreateDirectoryUnicodeSync(paramBlock: [*c]FSRefParam) OSErr;
pub extern fn PBCreateDirectoryUnicodeAsync(paramBlock: [*c]FSRefParam) void;
pub extern fn FSDeleteObject(ref: [*c]const FSRef) OSErr;
pub extern fn PBDeleteObjectSync(paramBlock: [*c]FSRefParam) OSErr;
pub extern fn PBDeleteObjectAsync(paramBlock: [*c]FSRefParam) void;
pub extern fn FSUnlinkObject(ref: [*c]const FSRef) OSErr;
pub extern fn PBUnlinkObjectSync(paramBlock: [*c]FSRefParam) OSErr;
pub extern fn PBUnlinkObjectAsync(paramBlock: [*c]FSRefParam) void;
pub extern fn FSMoveObject(ref: [*c]const FSRef, destDirectory: [*c]const FSRef, newRef: [*c]FSRef) OSErr;
pub extern fn PBMoveObjectSync(paramBlock: [*c]FSRefParam) OSErr;
pub extern fn PBMoveObjectAsync(paramBlock: [*c]FSRefParam) void;
pub extern fn FSExchangeObjects(ref: [*c]const FSRef, destRef: [*c]const FSRef) OSErr;
pub extern fn PBExchangeObjectsSync(paramBlock: [*c]FSRefParam) OSErr;
pub extern fn PBExchangeObjectsAsync(paramBlock: [*c]FSRefParam) void;
pub const kFSReplaceObjectDefaultOptions: c_int = 0;
pub const kFSReplaceObjectReplaceMetadata: c_int = 1;
pub const kFSReplaceObjectSaveOriginalAsABackup: c_int = 2;
pub const kFSReplaceObjectReplacePermissionInfo: c_int = 4;
pub const kFSReplaceObjectPreservePermissionInfo: c_int = 8;
pub const kFSReplaceObjectDoNotCheckObjectWriteAccess: c_int = 16;
const enum_unnamed_640 = c_uint;
pub extern fn FSReplaceObject(originalObject: [*c]const FSRef, replacementObject: [*c]const FSRef, newName: CFStringRef, temporaryName: CFStringRef, temporaryDirectory: [*c]const FSRef, flags: OptionBits, resultObject: [*c]FSRef) OSStatus;
pub extern fn FSPathReplaceObject(originalObjectPath: [*c]const u8, replacementObjectPath: [*c]const u8, newName: CFStringRef, temporaryName: CFStringRef, temporaryDirectoryPath: [*c]const u8, flags: OptionBits) OSStatus;
pub extern fn FSGetTemporaryDirectoryForReplaceObject(originalObject: [*c]const FSRef, temporaryDirectory: [*c]FSRef, flags: OptionBits) OSStatus;
pub extern fn FSPathGetTemporaryDirectoryForReplaceObject(originalObjectPath: [*c]const u8, temporaryDirectoryPath: [*c]u8, maxPathSize: UInt32, flags: OptionBits) OSStatus;
pub extern fn FSRenameUnicode(ref: [*c]const FSRef, nameLength: UniCharCount, name: [*c]const UniChar, textEncodingHint: TextEncoding, newRef: [*c]FSRef) OSErr;
pub extern fn PBRenameUnicodeSync(paramBlock: [*c]FSRefParam) OSErr;
pub extern fn PBRenameUnicodeAsync(paramBlock: [*c]FSRefParam) void;
pub extern fn FSGetCatalogInfo(ref: [*c]const FSRef, whichInfo: FSCatalogInfoBitmap, catalogInfo: [*c]FSCatalogInfo, outName: [*c]HFSUniStr255, fsSpec: FSSpecPtr, parentRef: [*c]FSRef) OSErr;
pub extern fn PBGetCatalogInfoSync(paramBlock: [*c]FSRefParam) OSErr;
pub extern fn PBGetCatalogInfoAsync(paramBlock: [*c]FSRefParam) void;
pub extern fn FSSetCatalogInfo(ref: [*c]const FSRef, whichInfo: FSCatalogInfoBitmap, catalogInfo: [*c]const FSCatalogInfo) OSErr;
pub extern fn PBSetCatalogInfoSync(paramBlock: [*c]FSRefParam) OSErr;
pub extern fn PBSetCatalogInfoAsync(paramBlock: [*c]FSRefParam) void;
pub extern fn FSOpenIterator(container: [*c]const FSRef, iteratorFlags: FSIteratorFlags, iterator: [*c]FSIterator) OSErr;
pub extern fn PBOpenIteratorSync(paramBlock: [*c]FSCatalogBulkParam) OSErr;
pub extern fn PBOpenIteratorAsync(paramBlock: [*c]FSCatalogBulkParam) void;
pub extern fn FSCloseIterator(iterator: FSIterator) OSErr;
pub extern fn PBCloseIteratorSync(paramBlock: [*c]FSCatalogBulkParam) OSErr;
pub extern fn PBCloseIteratorAsync(paramBlock: [*c]FSCatalogBulkParam) void;
pub extern fn FSGetCatalogInfoBulk(iterator: FSIterator, maximumObjects: ItemCount, actualObjects: [*c]ItemCount, containerChanged: [*c]Boolean, whichInfo: FSCatalogInfoBitmap, catalogInfos: [*c]FSCatalogInfo, refs: [*c]FSRef, specs: FSSpecPtr, names: [*c]HFSUniStr255) OSErr;
pub extern fn PBGetCatalogInfoBulkSync(paramBlock: [*c]FSCatalogBulkParam) OSErr;
pub extern fn PBGetCatalogInfoBulkAsync(paramBlock: [*c]FSCatalogBulkParam) void;
pub extern fn FSCatalogSearch(iterator: FSIterator, searchCriteria: [*c]const FSSearchParams, maximumObjects: ItemCount, actualObjects: [*c]ItemCount, containerChanged: [*c]Boolean, whichInfo: FSCatalogInfoBitmap, catalogInfos: [*c]FSCatalogInfo, refs: [*c]FSRef, specs: FSSpecPtr, names: [*c]HFSUniStr255) OSErr;
pub extern fn PBCatalogSearchSync(paramBlock: [*c]FSCatalogBulkParam) OSErr;
pub extern fn PBCatalogSearchAsync(paramBlock: [*c]FSCatalogBulkParam) void;
pub extern fn FSCreateFileAndOpenForkUnicode(parentRef: [*c]const FSRef, nameLength: UniCharCount, name: [*c]const UniChar, whichInfo: FSCatalogInfoBitmap, catalogInfo: [*c]const FSCatalogInfo, forkNameLength: UniCharCount, forkName: [*c]const UniChar, permissions: SInt8, forkRefNum: [*c]FSIORefNum, newRef: [*c]FSRef) OSStatus;
pub extern fn PBCreateFileAndOpenForkUnicodeSync(paramBlock: FSRefForkIOParamPtr) OSStatus;
pub extern fn PBCreateFileAndOpenForkUnicodeAsync(paramBlock: FSRefForkIOParamPtr) void;
pub extern fn FSCreateFork(ref: [*c]const FSRef, forkNameLength: UniCharCount, forkName: [*c]const UniChar) OSErr;
pub extern fn PBCreateForkSync(paramBlock: [*c]FSForkIOParam) OSErr;
pub extern fn PBCreateForkAsync(paramBlock: [*c]FSForkIOParam) void;
pub extern fn FSDeleteFork(ref: [*c]const FSRef, forkNameLength: UniCharCount, forkName: [*c]const UniChar) OSErr;
pub extern fn PBDeleteForkSync(paramBlock: [*c]FSForkIOParam) OSErr;
pub extern fn PBDeleteForkAsync(paramBlock: [*c]FSForkIOParam) void;
pub extern fn FSIterateForks(ref: [*c]const FSRef, forkIterator: [*c]CatPositionRec, forkName: [*c]HFSUniStr255, forkSize: [*c]SInt64, forkPhysicalSize: [*c]UInt64) OSErr;
pub extern fn PBIterateForksSync(paramBlock: [*c]FSForkIOParam) OSErr;
pub extern fn PBIterateForksAsync(paramBlock: [*c]FSForkIOParam) void;
pub extern fn FSOpenFork(ref: [*c]const FSRef, forkNameLength: UniCharCount, forkName: [*c]const UniChar, permissions: SInt8, forkRefNum: [*c]FSIORefNum) OSErr;
pub extern fn PBOpenForkSync(paramBlock: [*c]FSForkIOParam) OSErr;
pub extern fn PBOpenForkAsync(paramBlock: [*c]FSForkIOParam) void;
pub extern fn FSReadFork(forkRefNum: FSIORefNum, positionMode: UInt16, positionOffset: SInt64, requestCount: ByteCount, buffer: ?*anyopaque, actualCount: [*c]ByteCount) OSErr;
pub extern fn PBReadForkSync(paramBlock: [*c]FSForkIOParam) OSErr;
pub extern fn PBReadForkAsync(paramBlock: [*c]FSForkIOParam) void;
pub extern fn FSWriteFork(forkRefNum: FSIORefNum, positionMode: UInt16, positionOffset: SInt64, requestCount: ByteCount, buffer: ?*const anyopaque, actualCount: [*c]ByteCount) OSErr;
pub extern fn PBWriteForkSync(paramBlock: [*c]FSForkIOParam) OSErr;
pub extern fn PBWriteForkAsync(paramBlock: [*c]FSForkIOParam) void;
pub extern fn FSGetForkPosition(forkRefNum: FSIORefNum, position: [*c]SInt64) OSErr;
pub extern fn PBGetForkPositionSync(paramBlock: [*c]FSForkIOParam) OSErr;
pub extern fn PBGetForkPositionAsync(paramBlock: [*c]FSForkIOParam) void;
pub extern fn FSSetForkPosition(forkRefNum: FSIORefNum, positionMode: UInt16, positionOffset: SInt64) OSErr;
pub extern fn PBSetForkPositionSync(paramBlock: [*c]FSForkIOParam) OSErr;
pub extern fn PBSetForkPositionAsync(paramBlock: [*c]FSForkIOParam) void;
pub extern fn FSGetForkSize(forkRefNum: FSIORefNum, forkSize: [*c]SInt64) OSErr;
pub extern fn PBGetForkSizeSync(paramBlock: [*c]FSForkIOParam) OSErr;
pub extern fn PBGetForkSizeAsync(paramBlock: [*c]FSForkIOParam) void;
pub extern fn FSSetForkSize(forkRefNum: FSIORefNum, positionMode: UInt16, positionOffset: SInt64) OSErr;
pub extern fn PBSetForkSizeSync(paramBlock: [*c]FSForkIOParam) OSErr;
pub extern fn PBSetForkSizeAsync(paramBlock: [*c]FSForkIOParam) void;
pub extern fn FSAllocateFork(forkRefNum: FSIORefNum, flags: FSAllocationFlags, positionMode: UInt16, positionOffset: SInt64, requestCount: UInt64, actualCount: [*c]UInt64) OSErr;
pub extern fn PBAllocateForkSync(paramBlock: [*c]FSForkIOParam) OSErr;
pub extern fn PBAllocateForkAsync(paramBlock: [*c]FSForkIOParam) void;
pub extern fn FSFlushFork(forkRefNum: FSIORefNum) OSErr;
pub extern fn PBFlushForkSync(paramBlock: [*c]FSForkIOParam) OSErr;
pub extern fn PBFlushForkAsync(paramBlock: [*c]FSForkIOParam) void;
pub extern fn FSCloseFork(forkRefNum: FSIORefNum) OSErr;
pub extern fn PBCloseForkSync(paramBlock: [*c]FSForkIOParam) OSErr;
pub extern fn PBCloseForkAsync(paramBlock: [*c]FSForkIOParam) void;
pub extern fn FSGetForkCBInfo(desiredRefNum: FSIORefNum, volume: FSVolumeRefNum, iterator: [*c]c_short, actualRefNum: [*c]FSIORefNum, forkInfo: [*c]FSForkInfo, ref: [*c]FSRef, outForkName: [*c]HFSUniStr255) OSErr;
pub extern fn PBGetForkCBInfoSync(paramBlock: [*c]FSForkCBInfoParam) OSErr;
pub extern fn PBGetForkCBInfoAsync(paramBlock: [*c]FSForkCBInfoParam) void;
pub extern fn FSLockRange(forkRefNum: FSIORefNum, positionMode: UInt16, positionOffset: SInt64, requestCount: UInt64, rangeStart: [*c]UInt64) OSStatus;
pub extern fn PBXLockRangeSync(paramBlock: FSRangeLockParamPtr) OSStatus;
pub extern fn PBXLockRangeAsync(paramBlock: FSRangeLockParamPtr) OSStatus;
pub extern fn FSUnlockRange(forkRefNum: FSIORefNum, positionMode: UInt16, positionOffset: SInt64, requestCount: UInt64, rangeStart: [*c]UInt64) OSStatus;
pub extern fn PBXUnlockRangeSync(paramBlock: FSRangeLockParamPtr) OSStatus;
pub extern fn PBXUnlockRangeAsync(paramBlock: FSRangeLockParamPtr) OSStatus;
pub extern fn FSGetVolumeInfo(volume: FSVolumeRefNum, volumeIndex: ItemCount, actualVolume: [*c]FSVolumeRefNum, whichInfo: FSVolumeInfoBitmap, info: [*c]FSVolumeInfo, volumeName: [*c]HFSUniStr255, rootDirectory: [*c]FSRef) OSErr;
pub extern fn PBGetVolumeInfoSync(paramBlock: [*c]FSVolumeInfoParam) OSErr;
pub extern fn PBGetVolumeInfoAsync(paramBlock: [*c]FSVolumeInfoParam) void;
pub extern fn FSSetVolumeInfo(volume: FSVolumeRefNum, whichInfo: FSVolumeInfoBitmap, info: [*c]const FSVolumeInfo) OSErr;
pub extern fn PBSetVolumeInfoSync(paramBlock: [*c]FSVolumeInfoParam) OSErr;
pub extern fn PBSetVolumeInfoAsync(paramBlock: [*c]FSVolumeInfoParam) void;
pub extern fn FSGetDataForkName(dataForkName: [*c]HFSUniStr255) OSErr;
pub extern fn FSGetResourceForkName(resourceForkName: [*c]HFSUniStr255) OSErr;
pub extern fn FSRefMakePath(ref: [*c]const FSRef, path: [*c]UInt8, pathBufferSize: UInt32) OSStatus;
pub extern fn FSPathMakeRef(path: [*c]const UInt8, ref: [*c]FSRef, isDirectory: [*c]Boolean) OSStatus;
pub const kFSPathMakeRefDefaultOptions: c_int = 0;
pub const kFSPathMakeRefDoNotFollowLeafSymlink: c_int = 1;
const enum_unnamed_641 = c_uint;
pub extern fn FSPathMakeRefWithOptions(path: [*c]const UInt8, options: OptionBits, ref: [*c]FSRef, isDirectory: [*c]Boolean) OSStatus;
pub extern fn FSIsFSRefValid(ref: [*c]const FSRef) Boolean;
pub const FNMessage = UInt32;
pub const kFNDirectoryModifiedMessage: c_int = 1;
const enum_unnamed_642 = c_uint;
pub extern fn FNNotify(ref: [*c]const FSRef, message: FNMessage, flags: OptionBits) OSStatus;
pub extern fn FNNotifyByPath(path: [*c]const UInt8, message: FNMessage, flags: OptionBits) OSStatus;
pub extern fn FNNotifyAll(message: FNMessage, flags: OptionBits) OSStatus;
pub const struct_OpaqueFNSubscriptionRef = opaque {};
pub const FNSubscriptionRef = ?*struct_OpaqueFNSubscriptionRef;
pub const kFNNoImplicitAllSubscription: c_int = 1;
pub const kFNNotifyInBackground: c_int = 2;
const enum_unnamed_643 = c_uint;
pub const FNSubscriptionProcPtr = ?*const fn (FNMessage, OptionBits, ?*anyopaque, FNSubscriptionRef) callconv(.C) void;
pub const FNSubscriptionUPP = FNSubscriptionProcPtr;
pub extern fn NewFNSubscriptionUPP(userRoutine: FNSubscriptionProcPtr) FNSubscriptionUPP;
pub extern fn DisposeFNSubscriptionUPP(userUPP: FNSubscriptionUPP) void;
pub extern fn InvokeFNSubscriptionUPP(message: FNMessage, flags: OptionBits, refcon: ?*anyopaque, subscription: FNSubscriptionRef, userUPP: FNSubscriptionUPP) void;
pub extern fn FNSubscribe(directoryRef: [*c]const FSRef, callback: FNSubscriptionUPP, refcon: ?*anyopaque, flags: OptionBits, subscription: [*c]FNSubscriptionRef) OSStatus;
pub extern fn FNSubscribeByPath(directoryPath: [*c]const UInt8, callback: FNSubscriptionUPP, refcon: ?*anyopaque, flags: OptionBits, subscription: [*c]FNSubscriptionRef) OSStatus;
pub extern fn FNUnsubscribe(subscription: FNSubscriptionRef) OSStatus;
pub extern fn FNGetDirectoryForSubscription(subscription: FNSubscriptionRef, ref: [*c]FSRef) OSStatus;
pub const kAsyncMountInProgress: c_int = 1;
pub const kAsyncMountComplete: c_int = 2;
pub const kAsyncUnmountInProgress: c_int = 3;
pub const kAsyncUnmountComplete: c_int = 4;
pub const kAsyncEjectInProgress: c_int = 5;
pub const kAsyncEjectComplete: c_int = 6;
const enum_unnamed_644 = c_uint;
pub const FSMountStatus = UInt32;
pub const FSEjectStatus = UInt32;
pub const FSUnmountStatus = UInt32;
pub const struct_OpaqueFSVolumeOperation = opaque {};
pub const FSVolumeOperation = ?*struct_OpaqueFSVolumeOperation;
pub const FSVolumeMountProcPtr = ?*const fn (FSVolumeOperation, ?*anyopaque, OSStatus, FSVolumeRefNum) callconv(.C) void;
pub const FSVolumeUnmountProcPtr = ?*const fn (FSVolumeOperation, ?*anyopaque, OSStatus, FSVolumeRefNum, pid_t) callconv(.C) void;
pub const FSVolumeEjectProcPtr = ?*const fn (FSVolumeOperation, ?*anyopaque, OSStatus, FSVolumeRefNum, pid_t) callconv(.C) void;
pub const FSVolumeMountUPP = FSVolumeMountProcPtr;
pub const FSVolumeUnmountUPP = FSVolumeUnmountProcPtr;
pub const FSVolumeEjectUPP = FSVolumeEjectProcPtr;
pub extern fn NewFSVolumeMountUPP(userRoutine: FSVolumeMountProcPtr) FSVolumeMountUPP;
pub extern fn NewFSVolumeUnmountUPP(userRoutine: FSVolumeUnmountProcPtr) FSVolumeUnmountUPP;
pub extern fn NewFSVolumeEjectUPP(userRoutine: FSVolumeEjectProcPtr) FSVolumeEjectUPP;
pub extern fn DisposeFSVolumeMountUPP(userUPP: FSVolumeMountUPP) void;
pub extern fn DisposeFSVolumeUnmountUPP(userUPP: FSVolumeUnmountUPP) void;
pub extern fn DisposeFSVolumeEjectUPP(userUPP: FSVolumeEjectUPP) void;
pub extern fn InvokeFSVolumeMountUPP(volumeOp: FSVolumeOperation, clientData: ?*anyopaque, err: OSStatus, mountedVolumeRefNum: FSVolumeRefNum, userUPP: FSVolumeMountUPP) void;
pub extern fn InvokeFSVolumeUnmountUPP(volumeOp: FSVolumeOperation, clientData: ?*anyopaque, err: OSStatus, volumeRefNum: FSVolumeRefNum, dissenter: pid_t, userUPP: FSVolumeUnmountUPP) void;
pub extern fn InvokeFSVolumeEjectUPP(volumeOp: FSVolumeOperation, clientData: ?*anyopaque, err: OSStatus, volumeRefNum: FSVolumeRefNum, dissenter: pid_t, userUPP: FSVolumeEjectUPP) void;
pub const kFSMountServerMarkDoNotDisplay: c_int = 1;
pub const kFSMountServerMountOnMountDir: c_int = 4;
pub const kFSMountServerSuppressConnectionUI: c_int = 64;
const enum_unnamed_645 = c_uint;
pub const kFSMountServerMountWithoutNotification: c_int = 2;
const enum_unnamed_646 = c_uint;
pub const kFSEjectVolumeForceEject: c_int = 1;
const enum_unnamed_647 = c_uint;
pub const kFSUnmountVolumeForceUnmount: c_int = 1;
const enum_unnamed_648 = c_uint;
pub extern fn FSCreateVolumeOperation(volumeOp: [*c]FSVolumeOperation) OSStatus;
pub extern fn FSDisposeVolumeOperation(volumeOp: FSVolumeOperation) OSStatus;
pub extern fn FSMountLocalVolumeSync(diskID: CFStringRef, mountDir: CFURLRef, mountedVolumeRefNum: [*c]FSVolumeRefNum, flags: OptionBits) OSStatus;
pub extern fn FSMountLocalVolumeAsync(diskID: CFStringRef, mountDir: CFURLRef, volumeOp: FSVolumeOperation, clientData: ?*anyopaque, flags: OptionBits, callback: FSVolumeMountUPP, runloop: CFRunLoopRef, runloopMode: CFStringRef) OSStatus;
pub extern fn FSMountServerVolumeSync(url: CFURLRef, mountDir: CFURLRef, user: CFStringRef, password: CFStringRef, mountedVolumeRefNum: [*c]FSVolumeRefNum, flags: OptionBits) OSStatus;
pub extern fn FSMountServerVolumeAsync(url: CFURLRef, mountDir: CFURLRef, user: CFStringRef, password: CFStringRef, volumeOp: FSVolumeOperation, clientData: ?*anyopaque, flags: OptionBits, callback: FSVolumeMountUPP, runloop: CFRunLoopRef, runloopMode: CFStringRef) OSStatus;
pub extern fn FSGetAsyncMountStatus(volumeOp: FSVolumeOperation, status: [*c]FSMountStatus, volumeOpStatus: [*c]OSStatus, mountedVolumeRefNum: [*c]FSVolumeRefNum, clientData: [*c]?*anyopaque) OSStatus;
pub extern fn FSUnmountVolumeSync(vRefNum: FSVolumeRefNum, flags: OptionBits, dissenter: [*c]pid_t) OSStatus;
pub extern fn FSUnmountVolumeAsync(vRefNum: FSVolumeRefNum, flags: OptionBits, volumeOp: FSVolumeOperation, clientData: ?*anyopaque, callback: FSVolumeUnmountUPP, runloop: CFRunLoopRef, runloopMode: CFStringRef) OSStatus;
pub extern fn FSGetAsyncUnmountStatus(volumeOp: FSVolumeOperation, status: [*c]FSUnmountStatus, volumeOpStatus: [*c]OSStatus, volumeRefNum: [*c]FSVolumeRefNum, dissenter: [*c]pid_t, clientData: [*c]?*anyopaque) OSStatus;
pub extern fn FSCancelVolumeOperation(volumeOp: FSVolumeOperation) OSStatus;
pub extern fn FSEjectVolumeSync(vRefNum: FSVolumeRefNum, flags: OptionBits, dissenter: [*c]pid_t) OSStatus;
pub extern fn FSEjectVolumeAsync(vRefNum: FSVolumeRefNum, flags: OptionBits, volumeOp: FSVolumeOperation, clientData: ?*anyopaque, callback: FSVolumeEjectUPP, runloop: CFRunLoopRef, runloopMode: CFStringRef) OSStatus;
pub extern fn FSGetAsyncEjectStatus(volumeOp: FSVolumeOperation, status: [*c]FSEjectStatus, volumeOpStatus: [*c]OSStatus, volumeRefNum: [*c]FSVolumeRefNum, dissenter: [*c]pid_t, clientData: [*c]?*anyopaque) OSStatus;
pub extern fn FSCopyDiskIDForVolume(vRefNum: FSVolumeRefNum, diskID: [*c]CFStringRef) OSStatus;
pub extern fn FSCopyURLForVolume(vRefNum: FSVolumeRefNum, url: [*c]CFURLRef) OSStatus;
pub extern fn FSGetVolumeForDiskID(diskID: CFStringRef, vRefNum: [*c]FSVolumeRefNum) OSStatus;
pub extern fn FSCopyDADiskForVolume(vRefNum: FSVolumeRefNum, disk: [*c]DADiskRef) OSStatus;
pub extern fn FSGetVolumeForDADisk(disk: DADiskRef, vRefNum: [*c]FSVolumeRefNum) OSStatus;
pub const struct___FSFileOperation = opaque {};
pub const FSFileOperationRef = ?*struct___FSFileOperation;
pub const FSFileOperationStage = UInt32;
pub const struct_FSFileOperationClientContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: CFAllocatorRetainCallBack,
    release: CFAllocatorReleaseCallBack,
    copyDescription: CFAllocatorCopyDescriptionCallBack,
};
pub const FSFileOperationClientContext = struct_FSFileOperationClientContext;
pub const FSFileOperationStatusProcPtr = ?*const fn (FSFileOperationRef, [*c]const FSRef, FSFileOperationStage, OSStatus, CFDictionaryRef, ?*anyopaque) callconv(.C) void;
pub const FSPathFileOperationStatusProcPtr = ?*const fn (FSFileOperationRef, [*c]const u8, FSFileOperationStage, OSStatus, CFDictionaryRef, ?*anyopaque) callconv(.C) void;
pub const kFSFileOperationDefaultOptions: c_int = 0;
pub const kFSFileOperationOverwrite: c_int = 1;
pub const kFSFileOperationSkipSourcePermissionErrors: c_int = 2;
pub const kFSFileOperationDoNotMoveAcrossVolumes: c_int = 4;
pub const kFSFileOperationSkipPreflight: c_int = 8;
const enum_unnamed_649 = c_uint;
pub const kFSOperationStageUndefined: c_int = 0;
pub const kFSOperationStagePreflighting: c_int = 1;
pub const kFSOperationStageRunning: c_int = 2;
pub const kFSOperationStageComplete: c_int = 3;
const enum_unnamed_650 = c_uint;
pub extern const kFSOperationTotalBytesKey: CFStringRef;
pub extern const kFSOperationBytesCompleteKey: CFStringRef;
pub extern const kFSOperationBytesRemainingKey: CFStringRef;
pub extern const kFSOperationTotalObjectsKey: CFStringRef;
pub extern const kFSOperationObjectsCompleteKey: CFStringRef;
pub extern const kFSOperationObjectsRemainingKey: CFStringRef;
pub extern const kFSOperationTotalUserVisibleObjectsKey: CFStringRef;
pub extern const kFSOperationUserVisibleObjectsCompleteKey: CFStringRef;
pub extern const kFSOperationUserVisibleObjectsRemainingKey: CFStringRef;
pub extern const kFSOperationThroughputKey: CFStringRef;
pub extern fn FSCopyObjectSync(source: [*c]const FSRef, destDir: [*c]const FSRef, destName: CFStringRef, target: [*c]FSRef, options: OptionBits) OSStatus;
pub extern fn FSMoveObjectSync(source: [*c]const FSRef, destDir: [*c]const FSRef, destName: CFStringRef, target: [*c]FSRef, options: OptionBits) OSStatus;
pub extern fn FSMoveObjectToTrashSync(source: [*c]const FSRef, target: [*c]FSRef, options: OptionBits) OSStatus;
pub extern fn FSPathCopyObjectSync(sourcePath: [*c]const u8, destDirPath: [*c]const u8, destName: CFStringRef, targetPath: [*c][*c]u8, options: OptionBits) OSStatus;
pub extern fn FSPathMoveObjectSync(sourcePath: [*c]const u8, destDirPath: [*c]const u8, destName: CFStringRef, targetPath: [*c][*c]u8, options: OptionBits) OSStatus;
pub extern fn FSPathMoveObjectToTrashSync(sourcePath: [*c]const u8, targetPath: [*c][*c]u8, options: OptionBits) OSStatus;
pub extern fn FSFileOperationGetTypeID() CFTypeID;
pub extern fn FSFileOperationCreate(alloc: CFAllocatorRef) FSFileOperationRef;
pub extern fn FSFileOperationScheduleWithRunLoop(fileOp: FSFileOperationRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) OSStatus;
pub extern fn FSFileOperationUnscheduleFromRunLoop(fileOp: FSFileOperationRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) OSStatus;
pub extern fn FSCopyObjectAsync(fileOp: FSFileOperationRef, source: [*c]const FSRef, destDir: [*c]const FSRef, destName: CFStringRef, flags: OptionBits, callback: FSFileOperationStatusProcPtr, statusChangeInterval: CFTimeInterval, clientContext: [*c]FSFileOperationClientContext) OSStatus;
pub extern fn FSMoveObjectAsync(fileOp: FSFileOperationRef, source: [*c]const FSRef, destDir: [*c]const FSRef, destName: CFStringRef, flags: OptionBits, callback: FSFileOperationStatusProcPtr, statusChangeInterval: CFTimeInterval, clientContext: [*c]FSFileOperationClientContext) OSStatus;
pub extern fn FSMoveObjectToTrashAsync(fileOp: FSFileOperationRef, source: [*c]const FSRef, flags: OptionBits, callback: FSFileOperationStatusProcPtr, statusChangeInterval: CFTimeInterval, clientContext: [*c]FSFileOperationClientContext) OSStatus;
pub extern fn FSPathCopyObjectAsync(fileOp: FSFileOperationRef, sourcePath: [*c]const u8, destDirPath: [*c]const u8, destName: CFStringRef, flags: OptionBits, callback: FSPathFileOperationStatusProcPtr, statusChangeInterval: CFTimeInterval, clientContext: [*c]FSFileOperationClientContext) OSStatus;
pub extern fn FSPathMoveObjectAsync(fileOp: FSFileOperationRef, sourcePath: [*c]const u8, destDirPath: [*c]const u8, destName: CFStringRef, flags: OptionBits, callback: FSPathFileOperationStatusProcPtr, statusChangeInterval: CFTimeInterval, clientContext: [*c]FSFileOperationClientContext) OSStatus;
pub extern fn FSPathMoveObjectToTrashAsync(fileOp: FSFileOperationRef, sourcePath: [*c]const u8, flags: OptionBits, callback: FSPathFileOperationStatusProcPtr, statusChangeInterval: CFTimeInterval, clientContext: [*c]FSFileOperationClientContext) OSStatus;
pub extern fn FSFileOperationCancel(fileOp: FSFileOperationRef) OSStatus;
pub extern fn FSFileOperationCopyStatus(fileOp: FSFileOperationRef, currentItem: [*c]FSRef, stage: [*c]FSFileOperationStage, @"error": [*c]OSStatus, statusDictionary: [*c]CFDictionaryRef, info: [*c]?*anyopaque) OSStatus;
pub extern fn FSPathFileOperationCopyStatus(fileOp: FSFileOperationRef, currentItem: [*c][*c]u8, stage: [*c]FSFileOperationStage, @"error": [*c]OSStatus, statusDictionary: [*c]CFDictionaryRef, info: [*c]?*anyopaque) OSStatus;
pub extern fn FSCreateStringFromHFSUniStr(alloc: CFAllocatorRef, uniStr: [*c]const HFSUniStr255) CFStringRef;
pub extern fn FSGetHFSUniStrFromString(theString: CFStringRef, uniStr: [*c]HFSUniStr255) OSStatus;
pub extern fn FSFileSecurityGetTypeID() CFTypeID;
pub extern fn FSFileSecurityCreate(alloc: CFAllocatorRef) FSFileSecurityRef;
pub extern fn FSFileSecurityCreateWithFSPermissionInfo(alloc: CFAllocatorRef, permissions: [*c]const FSPermissionInfo) FSFileSecurityRef;
pub extern fn FSFileSecurityRefCreateCopy(alloc: CFAllocatorRef, fileSec: FSFileSecurityRef) FSFileSecurityRef;
pub extern fn FSFileSecurityGetOwnerUUID(fileSec: FSFileSecurityRef, owner: [*c]CFUUIDBytes) OSStatus;
pub extern fn FSFileSecuritySetOwnerUUID(fileSec: FSFileSecurityRef, owner: [*c]const CFUUIDBytes) OSStatus;
pub extern fn FSFileSecurityGetGroupUUID(fileSec: FSFileSecurityRef, group: [*c]CFUUIDBytes) OSStatus;
pub extern fn FSFileSecuritySetGroupUUID(fileSec: FSFileSecurityRef, group: [*c]const CFUUIDBytes) OSStatus;
pub extern fn FSFileSecurityCopyAccessControlList(fileSec: FSFileSecurityRef, accessControlList: [*c]acl_t) OSStatus;
pub extern fn FSFileSecuritySetAccessControlList(fileSec: FSFileSecurityRef, accessControlList: acl_t) OSStatus;
pub extern fn FSFileSecurityGetOwner(fileSec: FSFileSecurityRef, owner: [*c]UInt32) OSStatus;
pub extern fn FSFileSecuritySetOwner(fileSec: FSFileSecurityRef, owner: UInt32) OSStatus;
pub extern fn FSFileSecurityGetGroup(fileSec: FSFileSecurityRef, group: [*c]UInt32) OSStatus;
pub extern fn FSFileSecuritySetGroup(fileSec: FSFileSecurityRef, group: UInt32) OSStatus;
pub extern fn FSFileSecurityGetMode(fileSec: FSFileSecurityRef, mode: [*c]UInt16) OSStatus;
pub extern fn FSFileSecuritySetMode(fileSec: FSFileSecurityRef, mode: UInt16) OSStatus;
pub const pleaseCacheBit: c_int = 4;
pub const pleaseCacheMask: c_int = 16;
pub const noCacheBit: c_int = 5;
pub const noCacheMask: c_int = 32;
pub const rdVerifyBit: c_int = 6;
pub const rdVerifyMask: c_int = 64;
pub const rdVerify: c_int = 64;
pub const forceReadBit: c_int = 6;
pub const forceReadMask: c_int = 64;
pub const newLineBit: c_int = 7;
pub const newLineMask: c_int = 128;
pub const newLineCharMask: c_int = 65280;
const enum_unnamed_651 = c_uint;
pub const kOwnerID2Name: c_int = 1;
pub const kGroupID2Name: c_int = 2;
pub const kOwnerName2ID: c_int = 3;
pub const kGroupName2ID: c_int = 4;
pub const kReturnNextUser: c_int = 1;
pub const kReturnNextGroup: c_int = 2;
pub const kReturnNextUG: c_int = 3;
const enum_unnamed_652 = c_uint;
pub const kVCBFlagsIdleFlushBit: c_int = 3;
pub const kVCBFlagsIdleFlushMask: c_int = 8;
pub const kVCBFlagsHFSPlusAPIsBit: c_int = 4;
pub const kVCBFlagsHFSPlusAPIsMask: c_int = 16;
pub const kVCBFlagsHardwareGoneBit: c_int = 5;
pub const kVCBFlagsHardwareGoneMask: c_int = 32;
pub const kVCBFlagsVolumeDirtyBit: c_int = 15;
pub const kVCBFlagsVolumeDirtyMask: c_int = 32768;
const enum_unnamed_653 = c_uint;
pub const kioVAtrbDefaultVolumeBit: c_int = 5;
pub const kioVAtrbDefaultVolumeMask: c_int = 32;
pub const kioVAtrbFilesOpenBit: c_int = 6;
pub const kioVAtrbFilesOpenMask: c_int = 64;
pub const kioVAtrbHardwareLockedBit: c_int = 7;
pub const kioVAtrbHardwareLockedMask: c_int = 128;
pub const kioVAtrbSoftwareLockedBit: c_int = 15;
pub const kioVAtrbSoftwareLockedMask: c_int = 32768;
const enum_unnamed_654 = c_uint;
pub const kioFlAttribLockedBit: c_int = 0;
pub const kioFlAttribLockedMask: c_int = 1;
pub const kioFlAttribResOpenBit: c_int = 2;
pub const kioFlAttribResOpenMask: c_int = 4;
pub const kioFlAttribDataOpenBit: c_int = 3;
pub const kioFlAttribDataOpenMask: c_int = 8;
pub const kioFlAttribDirBit: c_int = 4;
pub const kioFlAttribDirMask: c_int = 16;
pub const ioDirFlg: c_int = 4;
pub const ioDirMask: c_int = 16;
pub const kioFlAttribCopyProtBit: c_int = 6;
pub const kioFlAttribCopyProtMask: c_int = 64;
pub const kioFlAttribFileOpenBit: c_int = 7;
pub const kioFlAttribFileOpenMask: c_int = 128;
pub const kioFlAttribInSharedBit: c_int = 2;
pub const kioFlAttribInSharedMask: c_int = 4;
pub const kioFlAttribMountedBit: c_int = 3;
pub const kioFlAttribMountedMask: c_int = 8;
pub const kioFlAttribSharePointBit: c_int = 5;
pub const kioFlAttribSharePointMask: c_int = 32;
const enum_unnamed_655 = c_uint;
pub const kioFCBWriteBit: c_int = 8;
pub const kioFCBWriteMask: c_int = 256;
pub const kioFCBResourceBit: c_int = 9;
pub const kioFCBResourceMask: c_int = 512;
pub const kioFCBWriteLockedBit: c_int = 10;
pub const kioFCBWriteLockedMask: c_int = 1024;
pub const kioFCBLargeFileBit: c_int = 11;
pub const kioFCBLargeFileMask: c_int = 2048;
pub const kioFCBSharedWriteBit: c_int = 12;
pub const kioFCBSharedWriteMask: c_int = 4096;
pub const kioFCBFileLockedBit: c_int = 13;
pub const kioFCBFileLockedMask: c_int = 8192;
pub const kioFCBOwnClumpBit: c_int = 14;
pub const kioFCBOwnClumpMask: c_int = 16384;
pub const kioFCBModifiedBit: c_int = 15;
pub const kioFCBModifiedMask: c_int = 32768;
const enum_unnamed_656 = c_uint;
pub const kForkInfoFlagsWriteBit: c_int = 0;
pub const kForkInfoFlagsWriteMask: c_int = 1;
pub const kForkInfoFlagsResourceBit: c_int = 1;
pub const kForkInfoFlagsResourceMask: c_int = 2;
pub const kForkInfoFlagsWriteLockedBit: c_int = 2;
pub const kForkInfoFlagsWriteLockedMask: c_int = 4;
pub const kForkInfoFlagsLargeFileBit: c_int = 3;
pub const kForkInfoFlagsLargeFileMask: c_int = 8;
pub const kForkInfoFlagsSharedWriteBit: c_int = 4;
pub const kForkInfoFlagsSharedWriteMask: c_int = 16;
pub const kForkInfoFlagsFileLockedBit: c_int = 5;
pub const kForkInfoFlagsFileLockedMask: c_int = 32;
pub const kForkInfoFlagsOwnClumpBit: c_int = 6;
pub const kForkInfoFlagsOwnClumpMask: c_int = 64;
pub const kForkInfoFlagsModifiedBit: c_int = 7;
pub const kForkInfoFlagsModifiedMask: c_int = 128;
const enum_unnamed_657 = c_uint;
pub const kioACUserNoSeeFolderBit: c_int = 0;
pub const kioACUserNoSeeFolderMask: c_int = 1;
pub const kioACUserNoSeeFilesBit: c_int = 1;
pub const kioACUserNoSeeFilesMask: c_int = 2;
pub const kioACUserNoMakeChangesBit: c_int = 2;
pub const kioACUserNoMakeChangesMask: c_int = 4;
pub const kioACUserNotOwnerBit: c_int = 7;
pub const kioACUserNotOwnerMask: c_int = 128;
const enum_unnamed_658 = c_uint;
pub const kioACAccessOwnerBit: c_int = 31;
pub const kioACAccessOwnerMask: c_int = -2147483648;
pub const kioACAccessBlankAccessBit: c_int = 28;
pub const kioACAccessBlankAccessMask: c_int = 268435456;
pub const kioACAccessUserWriteBit: c_int = 26;
pub const kioACAccessUserWriteMask: c_int = 67108864;
pub const kioACAccessUserReadBit: c_int = 25;
pub const kioACAccessUserReadMask: c_int = 33554432;
pub const kioACAccessUserSearchBit: c_int = 24;
pub const kioACAccessUserSearchMask: c_int = 16777216;
pub const kioACAccessEveryoneWriteBit: c_int = 18;
pub const kioACAccessEveryoneWriteMask: c_int = 262144;
pub const kioACAccessEveryoneReadBit: c_int = 17;
pub const kioACAccessEveryoneReadMask: c_int = 131072;
pub const kioACAccessEveryoneSearchBit: c_int = 16;
pub const kioACAccessEveryoneSearchMask: c_int = 65536;
pub const kioACAccessGroupWriteBit: c_int = 10;
pub const kioACAccessGroupWriteMask: c_int = 1024;
pub const kioACAccessGroupReadBit: c_int = 9;
pub const kioACAccessGroupReadMask: c_int = 512;
pub const kioACAccessGroupSearchBit: c_int = 8;
pub const kioACAccessGroupSearchMask: c_int = 256;
pub const kioACAccessOwnerWriteBit: c_int = 2;
pub const kioACAccessOwnerWriteMask: c_int = 4;
pub const kioACAccessOwnerReadBit: c_int = 1;
pub const kioACAccessOwnerReadMask: c_int = 2;
pub const kioACAccessOwnerSearchBit: c_int = 0;
pub const kioACAccessOwnerSearchMask: c_int = 1;
pub const kfullPrivileges: c_int = 458759;
pub const kownerPrivileges: c_int = 7;
const enum_unnamed_659 = c_int;
pub extern fn FSGetVolumeParms(volume: FSVolumeRefNum, buffer: [*c]GetVolParmsInfoBuffer, bufferSize: ByteCount) OSStatus;
pub extern fn FSGetVolumeMountInfoSize(volume: FSVolumeRefNum, size: [*c]ByteCount) OSStatus;
pub extern fn FSGetVolumeMountInfo(volume: FSVolumeRefNum, buffer: BytePtr, bufferSize: ByteCount, actualSize: [*c]ByteCount) OSStatus;
pub extern fn FSVolumeMount(buffer: BytePtr, mountedVolume: [*c]FSVolumeRefNum) OSStatus;
pub extern fn FSFlushVolume(vRefNum: FSVolumeRefNum) OSStatus;
pub extern fn PBFlushVolumeSync(paramBlock: FSRefParamPtr) OSStatus;
pub extern fn PBFlushVolumeAsync(paramBlock: FSRefParamPtr) OSStatus;
pub extern fn PBFSCopyFileSync(paramBlock: FSRefParamPtr) OSStatus;
pub extern fn PBFSCopyFileAsync(paramBlock: FSRefParamPtr) OSStatus;
pub extern fn FSResolveNodeID(volume: FSVolumeRefNum, nodeID: UInt32, newRef: FSRefPtr) OSStatus;
pub extern fn PBFSResolveNodeIDSync(paramBlock: FSRefParamPtr) OSStatus;
pub extern fn PBFSResolveNodeIDAsync(paramBlock: FSRefParamPtr) OSStatus;
pub const ResID = SInt16;
pub const ResAttributes = SInt16;
pub const ResFileAttributes = SInt16;
pub const ResourceCount = SInt16;
pub const ResourceIndex = SInt16;
pub const ResFileRefNum = FSIORefNum;
pub const resSysRefBit: c_int = 7;
pub const resSysHeapBit: c_int = 6;
pub const resPurgeableBit: c_int = 5;
pub const resLockedBit: c_int = 4;
pub const resProtectedBit: c_int = 3;
pub const resPreloadBit: c_int = 2;
pub const resChangedBit: c_int = 1;
const enum_unnamed_660 = c_uint;
pub const resSysHeap: c_int = 64;
pub const resPurgeable: c_int = 32;
pub const resLocked: c_int = 16;
pub const resProtected: c_int = 8;
pub const resPreload: c_int = 4;
pub const resChanged: c_int = 2;
const enum_unnamed_661 = c_uint;
pub const mapReadOnlyBit: c_int = 7;
pub const mapCompactBit: c_int = 6;
pub const mapChangedBit: c_int = 5;
const enum_unnamed_662 = c_uint;
pub const mapReadOnly: c_int = 128;
pub const mapCompact: c_int = 64;
pub const mapChanged: c_int = 32;
const enum_unnamed_663 = c_uint;
pub const kResFileNotOpened: c_int = -1;
pub const kSystemResFile: c_int = 0;
const enum_unnamed_664 = c_int;
pub const ResErrProcPtr = ?*const fn (OSErr) callconv(.C) void;
pub const ResErrUPP = ResErrProcPtr;
pub extern fn NewResErrUPP(userRoutine: ResErrProcPtr) ResErrUPP;
pub extern fn DisposeResErrUPP(userUPP: ResErrUPP) void;
pub extern fn InvokeResErrUPP(thErr: OSErr, userUPP: ResErrUPP) void;
pub const ResourceEndianFilterPtr = ?*const fn (Handle, Boolean) callconv(.C) OSErr;
pub extern fn CloseResFile(refNum: ResFileRefNum) void;
pub extern fn ResError() OSErr;
pub extern fn CurResFile() ResFileRefNum;
pub extern fn HomeResFile(theResource: Handle) ResFileRefNum;
pub extern fn UseResFile(refNum: ResFileRefNum) void;
pub extern fn CountTypes() ResourceCount;
pub extern fn Count1Types() ResourceCount;
pub extern fn GetIndType(theType: [*c]ResType, itemIndex: ResourceIndex) void;
pub extern fn Get1IndType(theType: [*c]ResType, itemIndex: ResourceIndex) void;
pub extern fn SetResLoad(load: Boolean) void;
pub extern fn CountResources(theType: ResType) ResourceCount;
pub extern fn Count1Resources(theType: ResType) ResourceCount;
pub extern fn GetIndResource(theType: ResType, itemIndex: ResourceIndex) Handle;
pub extern fn Get1IndResource(theType: ResType, itemIndex: ResourceIndex) Handle;
pub extern fn GetResource(theType: ResType, theID: ResID) Handle;
pub extern fn Get1Resource(theType: ResType, theID: ResID) Handle;
pub extern fn GetNamedResource(theType: ResType, name: ConstStr255Param) Handle;
pub extern fn Get1NamedResource(theType: ResType, name: ConstStr255Param) Handle;
pub extern fn LoadResource(theResource: Handle) void;
pub extern fn ReleaseResource(theResource: Handle) void;
pub extern fn DetachResource(theResource: Handle) void;
pub extern fn UniqueID(theType: ResType) ResID;
pub extern fn Unique1ID(theType: ResType) ResID;
pub extern fn GetResAttrs(theResource: Handle) ResAttributes;
pub extern fn GetResInfo(theResource: Handle, theID: [*c]ResID, theType: [*c]ResType, name: [*c]u8) void;
pub extern fn SetResInfo(theResource: Handle, theID: ResID, name: ConstStr255Param) void;
pub extern fn AddResource(theData: Handle, theType: ResType, theID: ResID, name: ConstStr255Param) void;
pub extern fn GetResourceSizeOnDisk(theResource: Handle) c_long;
pub extern fn GetMaxResourceSize(theResource: Handle) c_long;
pub extern fn SetResAttrs(theResource: Handle, attrs: ResAttributes) void;
pub extern fn ChangedResource(theResource: Handle) void;
pub extern fn RemoveResource(theResource: Handle) void;
pub extern fn UpdateResFile(refNum: ResFileRefNum) void;
pub extern fn WriteResource(theResource: Handle) void;
pub extern fn SetResPurge(install: Boolean) void;
pub extern fn GetResFileAttrs(refNum: ResFileRefNum) ResFileAttributes;
pub extern fn SetResFileAttrs(refNum: ResFileRefNum, attrs: ResFileAttributes) void;
pub extern fn ReadPartialResource(theResource: Handle, offset: c_long, buffer: ?*anyopaque, count: c_long) void;
pub extern fn WritePartialResource(theResource: Handle, offset: c_long, buffer: ?*const anyopaque, count: c_long) void;
pub extern fn SetResourceSize(theResource: Handle, newSize: c_long) void;
pub extern fn GetNextFOND(fondHandle: Handle) Handle;
pub const RsrcChainLocation = SInt16;
pub const kRsrcChainBelowSystemMap: c_int = 0;
pub const kRsrcChainBelowApplicationMap: c_int = 1;
pub const kRsrcChainAboveApplicationMap: c_int = 2;
pub const kRsrcChainAboveAllMaps: c_int = 4;
const enum_unnamed_665 = c_uint;
pub extern fn InsertResourceFile(refNum: ResFileRefNum, where: RsrcChainLocation) OSErr;
pub extern fn DetachResourceFile(refNum: ResFileRefNum) OSErr;
pub extern fn GetTopResourceFile(refNum: [*c]ResFileRefNum) OSErr;
pub extern fn GetNextResourceFile(curRefNum: ResFileRefNum, nextRefNum: [*c]ResFileRefNum) OSErr;
pub extern fn FSOpenResFile(ref: [*c]const FSRef, permission: SInt8) ResFileRefNum;
pub extern fn FSCreateResFile(parentRef: [*c]const FSRef, nameLength: UniCharCount, name: [*c]const UniChar, whichInfo: FSCatalogInfoBitmap, catalogInfo: [*c]const FSCatalogInfo, newRef: [*c]FSRef, newSpec: FSSpecPtr) void;
pub extern fn FSResourceFileAlreadyOpen(resourceFileRef: [*c]const FSRef, inChain: [*c]Boolean, refNum: [*c]ResFileRefNum) Boolean;
pub extern fn FSOpenOrphanResFile(ref: [*c]const FSRef, permission: SignedByte, refNum: [*c]ResFileRefNum) OSErr;
pub extern fn FSCreateResourceFile(parentRef: [*c]const FSRef, nameLength: UniCharCount, name: [*c]const UniChar, whichInfo: FSCatalogInfoBitmap, catalogInfo: [*c]const FSCatalogInfo, forkNameLength: UniCharCount, forkName: [*c]const UniChar, newRef: [*c]FSRef, newSpec: FSSpecPtr) OSErr;
pub extern fn FSCreateResourceFork(ref: [*c]const FSRef, forkNameLength: UniCharCount, forkName: [*c]const UniChar, flags: UInt32) OSErr;
pub extern fn FSOpenResourceFile(ref: [*c]const FSRef, forkNameLength: UniCharCount, forkName: [*c]const UniChar, permissions: SInt8, refNum: [*c]ResFileRefNum) OSErr;
pub const kAppleManufacturer: c_int = 1634758764;
pub const kComponentResourceType: c_int = 1953001063;
pub const kComponentAliasResourceType: c_int = 1952999265;
const enum_unnamed_666 = c_uint;
pub const kAnyComponentType: c_int = 0;
pub const kAnyComponentSubType: c_int = 0;
pub const kAnyComponentManufacturer: c_int = 0;
pub const kAnyComponentFlagsMask: c_int = 0;
const enum_unnamed_667 = c_uint;
pub const cmpThreadSafe: c_int = 268435456;
pub const cmpIsMissing: c_int = 536870912;
pub const cmpWantsRegisterMessage: c_uint = 2147483648;
const enum_unnamed_668 = c_uint;
pub const kComponentOpenSelect: c_int = -1;
pub const kComponentCloseSelect: c_int = -2;
pub const kComponentCanDoSelect: c_int = -3;
pub const kComponentVersionSelect: c_int = -4;
pub const kComponentRegisterSelect: c_int = -5;
pub const kComponentTargetSelect: c_int = -6;
pub const kComponentUnregisterSelect: c_int = -7;
pub const kComponentGetMPWorkFunctionSelect: c_int = -8;
pub const kComponentExecuteWiredActionSelect: c_int = -9;
pub const kComponentGetPublicResourceSelect: c_int = -10;
const enum_unnamed_669 = c_int;
pub const componentDoAutoVersion: c_int = 1;
pub const componentWantsUnregister: c_int = 2;
pub const componentAutoVersionIncludeFlags: c_int = 4;
pub const componentHasMultiplePlatforms: c_int = 8;
pub const componentLoadResident: c_int = 16;
const enum_unnamed_670 = c_uint;
pub const defaultComponentIdentical: c_int = 0;
pub const defaultComponentAnyFlags: c_int = 1;
pub const defaultComponentAnyManufacturer: c_int = 2;
pub const defaultComponentAnySubType: c_int = 4;
pub const defaultComponentAnyFlagsAnyManufacturer: c_int = 3;
pub const defaultComponentAnyFlagsAnyManufacturerAnySubType: c_int = 7;
const enum_unnamed_671 = c_uint;
pub const registerComponentGlobal: c_int = 1;
pub const registerComponentNoDuplicates: c_int = 2;
pub const registerComponentAfterExisting: c_int = 4;
pub const registerComponentAliasesOnly: c_int = 8;
const enum_unnamed_672 = c_uint;
pub const struct_ComponentDescription = extern struct {
    componentType: OSType,
    componentSubType: OSType,
    componentManufacturer: OSType,
    componentFlags: UInt32,
    componentFlagsMask: UInt32,
};
pub const ComponentDescription = struct_ComponentDescription;
pub const struct_ResourceSpec = extern struct {
    resType: OSType,
    resID: SInt16,
};
pub const ResourceSpec = struct_ResourceSpec;
pub const struct_ComponentResource = extern struct {
    cd: ComponentDescription,
    component: ResourceSpec,
    componentName: ResourceSpec,
    componentInfo: ResourceSpec,
    componentIcon: ResourceSpec,
};
pub const ComponentResource = struct_ComponentResource;
pub const ComponentResourcePtr = [*c]ComponentResource;
pub const ComponentResourceHandle = [*c]ComponentResourcePtr;
pub const struct_ComponentPlatformInfo = extern struct {
    componentFlags: SInt32,
    component: ResourceSpec,
    platformType: SInt16,
};
pub const ComponentPlatformInfo = struct_ComponentPlatformInfo;
pub const struct_ComponentResourceExtension = extern struct {
    componentVersion: SInt32,
    componentRegisterFlags: SInt32,
    componentIconFamily: SInt16,
};
pub const ComponentResourceExtension = struct_ComponentResourceExtension;
pub const struct_ComponentPlatformInfoArray = extern struct {
    count: SInt32,
    platformArray: [1]ComponentPlatformInfo,
};
pub const ComponentPlatformInfoArray = struct_ComponentPlatformInfoArray;
pub const struct_ExtComponentResource = extern struct {
    cd: ComponentDescription,
    component: ResourceSpec,
    componentName: ResourceSpec,
    componentInfo: ResourceSpec,
    componentIcon: ResourceSpec,
    componentVersion: SInt32,
    componentRegisterFlags: SInt32,
    componentIconFamily: SInt16,
    count: SInt32,
    platformArray: [1]ComponentPlatformInfo,
};
pub const ExtComponentResource = struct_ExtComponentResource;
pub const ExtComponentResourcePtr = [*c]ExtComponentResource;
pub const ExtComponentResourceHandle = [*c]ExtComponentResourcePtr;
pub const struct_ComponentAliasResource = extern struct {
    cr: ComponentResource,
    aliasCD: ComponentDescription,
};
pub const ComponentAliasResource = struct_ComponentAliasResource;
pub const struct_ComponentParameters = extern struct {
    flags: UInt8,
    paramSize: UInt8,
    what: SInt16,
    padding: UInt32,
    params: [1]c_long,
};
pub const ComponentParameters = struct_ComponentParameters;
pub const struct_ComponentRecord = extern struct {
    data: [1]c_long,
};
pub const ComponentRecord = struct_ComponentRecord;
pub const Component = [*c]ComponentRecord;
pub const struct_ComponentInstanceRecord = extern struct {
    data: [1]c_long,
};
pub const ComponentInstanceRecord = struct_ComponentInstanceRecord;
pub const ComponentInstance = [*c]ComponentInstanceRecord;
pub const struct_RegisteredComponentRecord = extern struct {
    data: [1]c_long,
};
pub const RegisteredComponentRecord = struct_RegisteredComponentRecord;
pub const RegisteredComponentRecordPtr = [*c]RegisteredComponentRecord;
pub const struct_RegisteredComponentInstanceRecord = extern struct {
    data: [1]c_long,
};
pub const RegisteredComponentInstanceRecord = struct_RegisteredComponentInstanceRecord;
pub const RegisteredComponentInstanceRecordPtr = [*c]RegisteredComponentInstanceRecord;
pub const ComponentResult = SInt32;
pub const platform68k: c_int = 1;
pub const platformPowerPC: c_int = 2;
pub const platformInterpreted: c_int = 3;
pub const platformWin32: c_int = 4;
pub const platformPowerPCNativeEntryPoint: c_int = 5;
pub const platformIA32NativeEntryPoint: c_int = 6;
pub const platformPowerPC64NativeEntryPoint: c_int = 7;
pub const platformX86_64NativeEntryPoint: c_int = 8;
pub const platformArm64NativeEntryPoint: c_int = 9;
const enum_unnamed_673 = c_uint;
pub const platformIRIXmips: c_int = 1000;
pub const platformSunOSsparc: c_int = 1100;
pub const platformSunOSintel: c_int = 1101;
pub const platformLinuxppc: c_int = 1200;
pub const platformLinuxintel: c_int = 1201;
pub const platformAIXppc: c_int = 1300;
pub const platformNeXTIntel: c_int = 1400;
pub const platformNeXTppc: c_int = 1401;
pub const platformNeXTsparc: c_int = 1402;
pub const platformNeXT68k: c_int = 1403;
pub const platformMacOSx86: c_int = 1500;
const enum_unnamed_674 = c_uint;
pub const mpWorkFlagDoWork: c_int = 1;
pub const mpWorkFlagDoCompletion: c_int = 2;
pub const mpWorkFlagCopyWorkBlock: c_int = 4;
pub const mpWorkFlagDontBlock: c_int = 8;
pub const mpWorkFlagGetProcessorCount: c_int = 16;
pub const mpWorkFlagGetIsRunning: c_int = 64;
const enum_unnamed_675 = c_uint;
pub const cmpAliasNoFlags: c_int = 0;
pub const cmpAliasOnlyThisFile: c_int = 1;
const enum_unnamed_676 = c_uint;
pub const CSComponentsThreadMode = UInt32;
pub const kCSAcceptAllComponentsMode: c_int = 0;
pub const kCSAcceptThreadSafeComponentsOnlyMode: c_int = 1;
const enum_unnamed_677 = c_uint;
pub extern fn CSSetComponentsThreadMode(mode: CSComponentsThreadMode) void;
pub extern fn CSGetComponentsThreadMode() CSComponentsThreadMode;
pub const struct_ComponentMPWorkFunctionHeaderRecord = extern struct {
    headerSize: UInt32,
    recordSize: UInt32,
    workFlags: UInt32,
    processorCount: UInt16,
    unused: UInt8,
    isRunning: UInt8,
};
pub const ComponentMPWorkFunctionHeaderRecord = struct_ComponentMPWorkFunctionHeaderRecord;
pub const ComponentMPWorkFunctionHeaderRecordPtr = [*c]ComponentMPWorkFunctionHeaderRecord;
pub const ComponentMPWorkFunctionProcPtr = ?*const fn (?*anyopaque, ComponentMPWorkFunctionHeaderRecordPtr) callconv(.C) ComponentResult;
pub const ComponentRoutineProcPtr = ?*const fn ([*c]ComponentParameters, Handle) callconv(.C) ComponentResult;
pub const GetMissingComponentResourceProcPtr = ?*const fn (Component, OSType, SInt16, ?*anyopaque, [*c]Handle) callconv(.C) OSErr;
pub const ComponentMPWorkFunctionUPP = ComponentMPWorkFunctionProcPtr;
pub const ComponentRoutineUPP = ComponentRoutineProcPtr;
pub const GetMissingComponentResourceUPP = GetMissingComponentResourceProcPtr;
pub const ComponentFunctionUPP = UniversalProcPtr;
pub extern fn NewComponentFunctionUPP(userRoutine: ProcPtr, procInfo: ProcInfoType) ComponentFunctionUPP;
pub extern fn DisposeComponentFunctionUPP(userUPP: ComponentFunctionUPP) void;
pub extern fn RegisterComponent(cd: [*c]ComponentDescription, componentEntryPoint: ComponentRoutineUPP, global: SInt16, componentName: Handle, componentInfo: Handle, componentIcon: Handle) Component;
pub extern fn RegisterComponentResource(cr: ComponentResourceHandle, global: SInt16) Component;
pub extern fn UnregisterComponent(aComponent: Component) OSErr;
pub extern fn FindNextComponent(aComponent: Component, looking: [*c]ComponentDescription) Component;
pub extern fn CountComponents(looking: [*c]ComponentDescription) c_long;
pub extern fn GetComponentInfo(aComponent: Component, cd: [*c]ComponentDescription, componentName: Handle, componentInfo: Handle, componentIcon: Handle) OSErr;
pub extern fn GetComponentListModSeed() SInt32;
pub extern fn GetComponentTypeModSeed(componentType: OSType) SInt32;
pub extern fn OpenAComponent(aComponent: Component, ci: [*c]ComponentInstance) OSErr;
pub extern fn OpenComponent(aComponent: Component) ComponentInstance;
pub extern fn CloseComponent(aComponentInstance: ComponentInstance) OSErr;
pub extern fn GetComponentInstanceError(aComponentInstance: ComponentInstance) OSErr;
pub extern fn ResolveComponentAlias(aComponent: Component) Component;
pub extern fn GetComponentPublicResource(aComponent: Component, resourceType: OSType, resourceID: SInt16, theResource: [*c]Handle) OSErr;
pub extern fn GetComponentPublicResourceList(resourceType: OSType, resourceID: SInt16, flags: SInt32, cd: [*c]ComponentDescription, missingProc: GetMissingComponentResourceUPP, refCon: ?*anyopaque, atomContainerPtr: ?*anyopaque) OSErr;
pub extern fn GetComponentPublicIndString(aComponent: Component, theString: [*c]u8, strListID: SInt16, index: SInt16) OSErr;
pub extern fn SetComponentInstanceError(aComponentInstance: ComponentInstance, theError: OSErr) void;
pub extern fn GetComponentRefcon(aComponent: Component) c_long;
pub extern fn SetComponentRefcon(aComponent: Component, theRefcon: c_long) void;
pub extern fn OpenComponentResFile(aComponent: Component) ResFileRefNum;
pub extern fn OpenAComponentResFile(aComponent: Component, resRef: [*c]ResFileRefNum) OSErr;
pub extern fn CloseComponentResFile(refnum: ResFileRefNum) OSErr;
pub extern fn GetComponentResource(aComponent: Component, resType: OSType, resID: SInt16, theResource: [*c]Handle) OSErr;
pub extern fn GetComponentIndString(aComponent: Component, theString: [*c]u8, strListID: SInt16, index: SInt16) OSErr;
pub extern fn GetComponentInstanceStorage(aComponentInstance: ComponentInstance) Handle;
pub extern fn SetComponentInstanceStorage(aComponentInstance: ComponentInstance, theStorage: Handle) void;
pub extern fn CountComponentInstances(aComponent: Component) c_long;
pub extern fn CallComponentFunction(params: [*c]ComponentParameters, func: ComponentFunctionUPP) ComponentResult;
pub extern fn CallComponentFunctionWithStorage(storage: Handle, params: [*c]ComponentParameters, func: ComponentFunctionUPP) ComponentResult;
pub extern fn CallComponentFunctionWithStorageProcInfo(storage: Handle, params: [*c]ComponentParameters, func: ProcPtr, funcProcInfo: ProcInfoType) ComponentResult;
pub extern fn DelegateComponentCall(originalParams: [*c]ComponentParameters, ci: ComponentInstance) ComponentResult;
pub extern fn SetDefaultComponent(aComponent: Component, flags: SInt16) OSErr;
pub extern fn OpenDefaultComponent(componentType: OSType, componentSubType: OSType) ComponentInstance;
pub extern fn OpenADefaultComponent(componentType: OSType, componentSubType: OSType, ci: [*c]ComponentInstance) OSErr;
pub extern fn CaptureComponent(capturedComponent: Component, capturingComponent: Component) Component;
pub extern fn UncaptureComponent(aComponent: Component) OSErr;
pub extern fn RegisterComponentResourceFile(resRefNum: SInt16, global: SInt16) SInt32;
pub extern fn RegisterComponentFileRef(ref: [*c]const FSRef, global: SInt16) OSErr;
pub extern fn RegisterComponentFileRefEntries(ref: [*c]const FSRef, global: SInt16, toRegister: [*c]const ComponentDescription, registerCount: UInt32) OSErr;
pub extern fn CallComponentOpen(ci: ComponentInstance, self: ComponentInstance) ComponentResult;
pub extern fn CallComponentClose(ci: ComponentInstance, self: ComponentInstance) ComponentResult;
pub extern fn CallComponentCanDo(ci: ComponentInstance, ftnNumber: SInt16) ComponentResult;
pub extern fn CallComponentVersion(ci: ComponentInstance) ComponentResult;
pub extern fn CallComponentRegister(ci: ComponentInstance) ComponentResult;
pub extern fn CallComponentTarget(ci: ComponentInstance, target: ComponentInstance) ComponentResult;
pub extern fn CallComponentUnregister(ci: ComponentInstance) ComponentResult;
pub extern fn CallComponentGetMPWorkFunction(ci: ComponentInstance, workFunction: [*c]ComponentMPWorkFunctionUPP, refCon: [*c]?*anyopaque) ComponentResult;
pub extern fn CallComponentGetPublicResource(ci: ComponentInstance, resourceType: OSType, resourceID: SInt16, resource: [*c]Handle) ComponentResult;
pub extern fn CallComponentDispatch(cp: [*c]ComponentParameters) ComponentResult;
pub extern fn NewComponentMPWorkFunctionUPP(userRoutine: ComponentMPWorkFunctionProcPtr) ComponentMPWorkFunctionUPP;
pub extern fn NewComponentRoutineUPP(userRoutine: ComponentRoutineProcPtr) ComponentRoutineUPP;
pub extern fn NewGetMissingComponentResourceUPP(userRoutine: GetMissingComponentResourceProcPtr) GetMissingComponentResourceUPP;
pub extern fn DisposeComponentMPWorkFunctionUPP(userUPP: ComponentMPWorkFunctionUPP) void;
pub extern fn DisposeComponentRoutineUPP(userUPP: ComponentRoutineUPP) void;
pub extern fn DisposeGetMissingComponentResourceUPP(userUPP: GetMissingComponentResourceUPP) void;
pub extern fn InvokeComponentMPWorkFunctionUPP(globalRefCon: ?*anyopaque, header: ComponentMPWorkFunctionHeaderRecordPtr, userUPP: ComponentMPWorkFunctionUPP) ComponentResult;
pub extern fn InvokeComponentRoutineUPP(cp: [*c]ComponentParameters, componentStorage: Handle, userUPP: ComponentRoutineUPP) ComponentResult;
pub extern fn InvokeGetMissingComponentResourceUPP(c: Component, resType: OSType, resID: SInt16, refCon: ?*anyopaque, resource: [*c]Handle, userUPP: GetMissingComponentResourceUPP) OSErr;
pub const uppComponentFunctionImplementedProcInfo: c_int = 752;
pub const uppGetComponentVersionProcInfo: c_int = 240;
pub const uppComponentSetTargetProcInfo: c_int = 1008;
pub const uppCallComponentOpenProcInfo: c_int = 1008;
pub const uppCallComponentCloseProcInfo: c_int = 1008;
pub const uppCallComponentCanDoProcInfo: c_int = 752;
pub const uppCallComponentVersionProcInfo: c_int = 240;
pub const uppCallComponentRegisterProcInfo: c_int = 240;
pub const uppCallComponentTargetProcInfo: c_int = 1008;
pub const uppCallComponentUnregisterProcInfo: c_int = 240;
pub const uppCallComponentGetMPWorkFunctionProcInfo: c_int = 4080;
pub const uppCallComponentGetPublicResourceProcInfo: c_int = 15344;
const enum_unnamed_678 = c_uint;
pub const MPLibrary_MajorVersion: c_int = 2;
pub const MPLibrary_MinorVersion: c_int = 3;
pub const MPLibrary_Release: c_int = 1;
pub const MPLibrary_DevelopmentRevision: c_int = 1;
const enum_unnamed_679 = c_uint;
pub const struct_OpaqueMPProcessID = opaque {};
pub const MPProcessID = ?*struct_OpaqueMPProcessID;
pub const struct_OpaqueMPTaskID = opaque {};
pub const MPTaskID = ?*struct_OpaqueMPTaskID;
pub const struct_OpaqueMPQueueID = opaque {};
pub const MPQueueID = ?*struct_OpaqueMPQueueID;
pub const struct_OpaqueMPSemaphoreID = opaque {};
pub const MPSemaphoreID = ?*struct_OpaqueMPSemaphoreID;
pub const struct_OpaqueMPCriticalRegionID = opaque {};
pub const MPCriticalRegionID = ?*struct_OpaqueMPCriticalRegionID;
pub const struct_OpaqueMPTimerID = opaque {};
pub const MPTimerID = ?*struct_OpaqueMPTimerID;
pub const struct_OpaqueMPEventID = opaque {};
pub const MPEventID = ?*struct_OpaqueMPEventID;
pub const struct_OpaqueMPAddressSpaceID = opaque {};
pub const MPAddressSpaceID = ?*struct_OpaqueMPAddressSpaceID;
pub const struct_OpaqueMPNotificationID = opaque {};
pub const MPNotificationID = ?*struct_OpaqueMPNotificationID;
pub const struct_OpaqueMPCoherenceID = opaque {};
pub const MPCoherenceID = ?*struct_OpaqueMPCoherenceID;
pub const struct_OpaqueMPCpuID = opaque {};
pub const MPCpuID = ?*struct_OpaqueMPCpuID;
pub const struct_OpaqueMPAreaID = opaque {};
pub const MPAreaID = ?*struct_OpaqueMPAreaID;
pub const struct_OpaqueMPConsoleID = opaque {};
pub const MPConsoleID = ?*struct_OpaqueMPConsoleID;
pub const struct_OpaqueMPOpaqueID = opaque {};
pub const MPOpaqueID = ?*struct_OpaqueMPOpaqueID;
pub const kOpaqueAnyID: c_int = 0;
pub const kOpaqueProcessID: c_int = 1;
pub const kOpaqueTaskID: c_int = 2;
pub const kOpaqueTimerID: c_int = 3;
pub const kOpaqueQueueID: c_int = 4;
pub const kOpaqueSemaphoreID: c_int = 5;
pub const kOpaqueCriticalRegionID: c_int = 6;
pub const kOpaqueCpuID: c_int = 7;
pub const kOpaqueAddressSpaceID: c_int = 8;
pub const kOpaqueEventID: c_int = 9;
pub const kOpaqueCoherenceID: c_int = 10;
pub const kOpaqueAreaID: c_int = 11;
pub const kOpaqueNotificationID: c_int = 12;
pub const kOpaqueConsoleID: c_int = 13;
const enum_unnamed_680 = c_uint;
pub const MPOpaqueIDClass = UInt32;
pub const kMPNoID: c_int = 0;
const enum_unnamed_681 = c_uint;
pub const MPTaskOptions = OptionBits;
pub const TaskStorageIndex = ItemCount;
pub const TaskStorageValue = LogicalAddress;
pub const MPSemaphoreCount = ItemCount;
pub const MPTaskWeight = UInt32;
pub const MPEventFlags = UInt32;
pub const MPExceptionKind = UInt32;
pub const MPTaskStateKind = UInt32;
pub const MPPageSizeClass = UInt32;
pub const kDurationImmediate: c_int = 0;
pub const kDurationForever: c_int = 2147483647;
pub const kDurationMillisecond: c_int = 1;
pub const kDurationMicrosecond: c_int = -1;
const enum_unnamed_682 = c_int;
pub extern fn MPProcessors() ItemCount;
pub extern fn MPProcessorsScheduled() ItemCount;
pub const kMPCreateTaskSuspendedMask: c_int = 1;
pub const kMPCreateTaskTakesAllExceptionsMask: c_int = 2;
pub const kMPCreateTaskNotDebuggableMask: c_int = 4;
pub const kMPCreateTaskValidOptionsMask: c_int = 7;
const enum_unnamed_683 = c_uint;
pub const TaskProc = ?*const fn (?*anyopaque) callconv(.C) OSStatus;
pub extern fn MPCreateTask(entryPoint: TaskProc, parameter: ?*anyopaque, stackSize: ByteCount, notifyQueue: MPQueueID, terminationParameter1: ?*anyopaque, terminationParameter2: ?*anyopaque, options: MPTaskOptions, task: [*c]MPTaskID) OSStatus;
pub extern fn MPTerminateTask(task: MPTaskID, terminationStatus: OSStatus) OSStatus;
pub extern fn MPSetTaskWeight(task: MPTaskID, weight: MPTaskWeight) OSStatus;
pub extern fn MPTaskIsPreemptive(taskID: MPTaskID) Boolean;
pub extern fn MPExit(status: OSStatus) void;
pub extern fn MPYield() void;
pub extern fn MPCurrentTaskID() MPTaskID;
pub extern fn MPSetTaskType(task: MPTaskID, taskType: OSType) OSStatus;
pub extern fn MPAllocateTaskStorageIndex(taskIndex: [*c]TaskStorageIndex) OSStatus;
pub extern fn MPDeallocateTaskStorageIndex(taskIndex: TaskStorageIndex) OSStatus;
pub extern fn MPSetTaskStorageValue(taskIndex: TaskStorageIndex, value: TaskStorageValue) OSStatus;
pub extern fn MPGetTaskStorageValue(taskIndex: TaskStorageIndex) TaskStorageValue;
pub extern fn MPCreateQueue(queue: [*c]MPQueueID) OSStatus;
pub extern fn MPDeleteQueue(queue: MPQueueID) OSStatus;
pub extern fn MPNotifyQueue(queue: MPQueueID, param1: ?*anyopaque, param2: ?*anyopaque, param3: ?*anyopaque) OSStatus;
pub extern fn MPWaitOnQueue(queue: MPQueueID, param1: [*c]?*anyopaque, param2: [*c]?*anyopaque, param3: [*c]?*anyopaque, timeout: Duration) OSStatus;
pub extern fn MPSetQueueReserve(queue: MPQueueID, count: ItemCount) OSStatus;
pub extern fn MPCreateSemaphore(maximumValue: MPSemaphoreCount, initialValue: MPSemaphoreCount, semaphore: [*c]MPSemaphoreID) OSStatus;
pub extern fn MPDeleteSemaphore(semaphore: MPSemaphoreID) OSStatus;
pub extern fn MPSignalSemaphore(semaphore: MPSemaphoreID) OSStatus;
pub extern fn MPWaitOnSemaphore(semaphore: MPSemaphoreID, timeout: Duration) OSStatus;
pub extern fn MPCreateCriticalRegion(criticalRegion: [*c]MPCriticalRegionID) OSStatus;
pub extern fn MPDeleteCriticalRegion(criticalRegion: MPCriticalRegionID) OSStatus;
pub extern fn MPEnterCriticalRegion(criticalRegion: MPCriticalRegionID, timeout: Duration) OSStatus;
pub extern fn MPExitCriticalRegion(criticalRegion: MPCriticalRegionID) OSStatus;
pub extern fn MPCreateEvent(event: [*c]MPEventID) OSStatus;
pub extern fn MPDeleteEvent(event: MPEventID) OSStatus;
pub extern fn MPSetEvent(event: MPEventID, flags: MPEventFlags) OSStatus;
pub extern fn MPWaitForEvent(event: MPEventID, flags: [*c]MPEventFlags, timeout: Duration) OSStatus;
pub extern fn MPCreateNotification(notificationID: [*c]MPNotificationID) OSStatus;
pub extern fn MPDeleteNotification(notificationID: MPNotificationID) OSStatus;
pub extern fn MPModifyNotification(notificationID: MPNotificationID, anID: MPOpaqueID, notifyParam1: ?*anyopaque, notifyParam2: ?*anyopaque, notifyParam3: ?*anyopaque) OSStatus;
pub extern fn MPModifyNotificationParameters(notificationID: MPNotificationID, kind: MPOpaqueIDClass, notifyParam1: ?*anyopaque, notifyParam2: ?*anyopaque, notifyParam3: ?*anyopaque) OSStatus;
pub extern fn MPCauseNotification(notificationID: MPNotificationID) OSStatus;
pub const kMPPreserveTimerIDMask: c_int = 1;
pub const kMPTimeIsDeltaMask: c_int = 2;
pub const kMPTimeIsDurationMask: c_int = 4;
const enum_unnamed_684 = c_uint;
pub extern fn MPDelayUntil(expirationTime: [*c]AbsoluteTime) OSStatus;
pub extern fn MPCreateTimer(timerID: [*c]MPTimerID) OSStatus;
pub extern fn MPDeleteTimer(timerID: MPTimerID) OSStatus;
pub extern fn MPSetTimerNotify(timerID: MPTimerID, anID: MPOpaqueID, notifyParam1: ?*anyopaque, notifyParam2: ?*anyopaque, notifyParam3: ?*anyopaque) OSStatus;
pub extern fn MPArmTimer(timerID: MPTimerID, expirationTime: [*c]AbsoluteTime, options: OptionBits) OSStatus;
pub extern fn MPCancelTimer(timerID: MPTimerID, timeRemaining: [*c]AbsoluteTime) OSStatus;
pub const kMPMaxAllocSize: c_int = 1073741824;
const enum_unnamed_685 = c_uint;
pub const kMPAllocateDefaultAligned: c_int = 0;
pub const kMPAllocate8ByteAligned: c_int = 3;
pub const kMPAllocate16ByteAligned: c_int = 4;
pub const kMPAllocate32ByteAligned: c_int = 5;
pub const kMPAllocate1024ByteAligned: c_int = 10;
pub const kMPAllocate4096ByteAligned: c_int = 12;
pub const kMPAllocateMaxAlignment: c_int = 16;
pub const kMPAllocateAltiVecAligned: c_int = 4;
pub const kMPAllocateVMXAligned: c_int = 4;
pub const kMPAllocateVMPageAligned: c_int = 254;
pub const kMPAllocateInterlockAligned: c_int = 255;
const enum_unnamed_686 = c_uint;
pub const kMPAllocateClearMask: c_int = 1;
pub const kMPAllocateGloballyMask: c_int = 2;
pub const kMPAllocateResidentMask: c_int = 4;
pub const kMPAllocateNoGrowthMask: c_int = 16;
pub const kMPAllocateNoCreateMask: c_int = 32;
const enum_unnamed_687 = c_uint;
pub extern fn MPAllocateAligned(size: ByteCount, alignment: UInt8, options: OptionBits) LogicalAddress;
pub extern fn MPAllocate(size: ByteCount) LogicalAddress;
pub extern fn MPFree(object: LogicalAddress) void;
pub extern fn MPGetAllocatedBlockSize(object: LogicalAddress) ByteCount;
pub extern fn MPBlockCopy(source: LogicalAddress, destination: LogicalAddress, size: ByteCount) void;
pub extern fn MPBlockClear(address: LogicalAddress, size: ByteCount) void;
pub const kMPTaskStateRegisters: c_int = 0;
pub const kMPTaskStateFPU: c_int = 1;
pub const kMPTaskStateVectors: c_int = 2;
pub const kMPTaskStateMachine: c_int = 3;
pub const kMPTaskState32BitMemoryException: c_int = 4;
pub const kMPTaskStateTaskInfo: c_int = 5;
const enum_unnamed_688 = c_uint;
pub const kMPTaskPropagate: c_int = 0;
pub const kMPTaskResumeStep: c_int = 1;
pub const kMPTaskResumeBranch: c_int = 2;
pub const kMPTaskResumeMask: c_int = 0;
pub const kMPTaskPropagateMask: c_int = 1;
pub const kMPTaskResumeStepMask: c_int = 2;
pub const kMPTaskResumeBranchMask: c_int = 4;
const enum_unnamed_689 = c_uint;
pub const kMPTaskBlocked: c_int = 0;
pub const kMPTaskReady: c_int = 1;
pub const kMPTaskRunning: c_int = 2;
const enum_unnamed_690 = c_uint;
pub const kMPTaskInfoVersion: c_int = 3;
const enum_unnamed_691 = c_uint;
pub const struct_MPTaskInfoVersion2 = extern struct {
    version: PBVersion,
    name: OSType,
    queueName: OSType,
    runState: UInt16,
    lastCPU: UInt16,
    weight: UInt32,
    processID: MPProcessID,
    cpuTime: AbsoluteTime,
    schedTime: AbsoluteTime,
    creationTime: AbsoluteTime,
    codePageFaults: ItemCount,
    dataPageFaults: ItemCount,
    preemptions: ItemCount,
    cpuID: MPCpuID,
};
pub const MPTaskInfoVersion2 = struct_MPTaskInfoVersion2;
pub const struct_MPTaskInfo = extern struct {
    version: PBVersion,
    name: OSType,
    queueName: OSType,
    runState: UInt16,
    lastCPU: UInt16,
    weight: UInt32,
    processID: MPProcessID,
    cpuTime: AbsoluteTime,
    schedTime: AbsoluteTime,
    creationTime: AbsoluteTime,
    codePageFaults: ItemCount,
    dataPageFaults: ItemCount,
    preemptions: ItemCount,
    cpuID: MPCpuID,
    blockedObject: MPOpaqueID,
    spaceID: MPAddressSpaceID,
    stackBase: LogicalAddress,
    stackLimit: LogicalAddress,
    stackCurr: LogicalAddress,
};
pub const MPTaskInfo = struct_MPTaskInfo;
pub extern fn MPSetExceptionHandler(task: MPTaskID, exceptionQ: MPQueueID) OSStatus;
pub extern fn MPDisposeTaskException(task: MPTaskID, action: OptionBits) OSStatus;
pub extern fn MPExtractTaskState(task: MPTaskID, kind: MPTaskStateKind, info: ?*anyopaque) OSStatus;
pub extern fn MPSetTaskState(task: MPTaskID, kind: MPTaskStateKind, info: ?*anyopaque) OSStatus;
pub extern fn MPThrowException(task: MPTaskID, kind: MPExceptionKind) OSStatus;
pub const MPDebuggerLevel = UInt32;
pub const kMPLowLevelDebugger: c_int = 0;
pub const kMPMidLevelDebugger: c_int = 268435456;
pub const kMPHighLevelDebugger: c_int = 536870912;
const enum_unnamed_692 = c_uint;
pub extern fn MPRegisterDebugger(queue: MPQueueID, level: MPDebuggerLevel) OSStatus;
pub extern fn MPUnregisterDebugger(queue: MPQueueID) OSStatus;
pub const MPRemoteProcedure = ?*const fn (?*anyopaque) callconv(.C) ?*anyopaque;
pub const MPRemoteContext = UInt8;
pub const kMPAnyRemoteContext: c_int = 0;
pub const kMPOwningProcessRemoteContext: c_int = 1;
pub const kMPInterruptRemoteContext: c_int = 2;
pub const kMPAsyncInterruptRemoteContext: c_int = 3;
const enum_unnamed_693 = c_uint;
pub extern fn MPRemoteCall(remoteProc: MPRemoteProcedure, parameter: ?*anyopaque, context: MPRemoteContext) ?*anyopaque;
pub extern fn MPRemoteCallCFM(remoteProc: MPRemoteProcedure, parameter: ?*anyopaque, context: MPRemoteContext) ?*anyopaque;
pub extern fn _MPIsFullyInitialized() Boolean;
pub const MPIsFullyInitializedProc = ?*const fn () callconv(.C) Boolean;
pub extern fn _MPLibraryVersion(versionCString: [*c][*c]const u8, major: [*c]UInt32, minor: [*c]UInt32, release: [*c]UInt32, revision: [*c]UInt32) void;
pub extern fn _MPLibraryIsCompatible(versionCString: [*c]const u8, major: UInt32, minor: UInt32, release: UInt32, revision: UInt32) Boolean;
pub const FSAliasInfoBitmap = UInt32;
pub const kFSAliasInfoNone: c_int = 0;
pub const kFSAliasInfoVolumeCreateDate: c_int = 1;
pub const kFSAliasInfoTargetCreateDate: c_int = 2;
pub const kFSAliasInfoFinderInfo: c_int = 4;
pub const kFSAliasInfoIsDirectory: c_int = 8;
pub const kFSAliasInfoIDs: c_int = 16;
pub const kFSAliasInfoFSInfo: c_int = 32;
pub const kFSAliasInfoVolumeFlags: c_int = 64;
const enum_unnamed_694 = c_uint;
pub const rAliasType: c_int = 1634494835;
const enum_unnamed_695 = c_uint;
pub const kARMMountVol: c_int = 1;
pub const kARMNoUI: c_int = 2;
pub const kARMMultVols: c_int = 8;
pub const kARMSearch: c_int = 256;
pub const kARMSearchMore: c_int = 512;
pub const kARMSearchRelFirst: c_int = 1024;
pub const kARMTryFileIDFirst: c_int = 2048;
const enum_unnamed_696 = c_uint;
pub const asiZoneName: c_int = -3;
pub const asiServerName: c_int = -2;
pub const asiVolumeName: c_int = -1;
pub const asiAliasName: c_int = 0;
pub const asiParentName: c_int = 1;
const enum_unnamed_697 = c_int;
pub const kResolveAliasFileNoUI: c_int = 1;
pub const kResolveAliasTryFileIDFirst: c_int = 2;
const enum_unnamed_698 = c_uint;
pub const struct_AliasRecord = extern struct {
    hidden: [6]UInt8,
};
pub const AliasRecord = struct_AliasRecord;
pub const AliasPtr = [*c]AliasRecord;
pub const AliasHandle = [*c]AliasPtr;
pub const struct_FSAliasInfo = extern struct {
    volumeCreateDate: UTCDateTime,
    targetCreateDate: UTCDateTime,
    fileType: OSType,
    fileCreator: OSType,
    parentDirID: UInt32,
    nodeID: UInt32,
    filesystemID: UInt16,
    signature: UInt16,
    volumeIsBootVolume: Boolean,
    volumeIsAutomounted: Boolean,
    volumeIsEjectable: Boolean,
    volumeHasPersistentFileIDs: Boolean,
    isDirectory: Boolean,
};
pub const FSAliasInfo = struct_FSAliasInfo;
pub const FSAliasInfoPtr = [*c]FSAliasInfo;
pub const AliasInfoType = c_short;
pub const FSAliasFilterProcPtr = ?*const fn ([*c]const FSRef, [*c]Boolean, Ptr) callconv(.C) Boolean;
pub extern fn FSNewAlias(fromFile: [*c]const FSRef, target: [*c]const FSRef, inAlias: [*c]AliasHandle) OSErr;
pub extern fn FSNewAliasMinimal(target: [*c]const FSRef, inAlias: [*c]AliasHandle) OSErr;
pub extern fn FSIsAliasFile(fileRef: [*c]const FSRef, aliasFileFlag: [*c]Boolean, folderFlag: [*c]Boolean) OSErr;
pub extern fn FSResolveAliasWithMountFlags(fromFile: [*c]const FSRef, inAlias: AliasHandle, target: [*c]FSRef, wasChanged: [*c]Boolean, mountFlags: c_ulong) OSErr;
pub extern fn FSResolveAlias(fromFile: [*c]const FSRef, alias: AliasHandle, target: [*c]FSRef, wasChanged: [*c]Boolean) OSErr;
pub extern fn FSResolveAliasFileWithMountFlags(theRef: [*c]FSRef, resolveAliasChains: Boolean, targetIsFolder: [*c]Boolean, wasAliased: [*c]Boolean, mountFlags: c_ulong) OSErr;
pub extern fn FSResolveAliasFile(theRef: [*c]FSRef, resolveAliasChains: Boolean, targetIsFolder: [*c]Boolean, wasAliased: [*c]Boolean) OSErr;
pub extern fn FSFollowFinderAlias(fromFile: [*c]FSRef, alias: AliasHandle, logon: Boolean, target: [*c]FSRef, wasChanged: [*c]Boolean) OSErr;
pub extern fn FSUpdateAlias(fromFile: [*c]const FSRef, target: [*c]const FSRef, alias: AliasHandle, wasChanged: [*c]Boolean) OSErr;
pub extern fn FSNewAliasUnicode(fromFile: [*c]const FSRef, targetParentRef: [*c]const FSRef, targetNameLength: UniCharCount, targetName: [*c]const UniChar, inAlias: [*c]AliasHandle, isDirectory: [*c]Boolean) OSErr;
pub extern fn FSNewAliasMinimalUnicode(targetParentRef: [*c]const FSRef, targetNameLength: UniCharCount, targetName: [*c]const UniChar, inAlias: [*c]AliasHandle, isDirectory: [*c]Boolean) OSErr;
pub extern fn FSNewAliasFromPath(fromFilePath: [*c]const u8, targetPath: [*c]const u8, flags: OptionBits, inAlias: [*c]AliasHandle, isDirectory: [*c]Boolean) OSStatus;
pub extern fn FSMatchAliasBulk(fromFile: [*c]const FSRef, rulesMask: c_ulong, inAlias: AliasHandle, aliasCount: [*c]c_short, aliasList: [*c]FSRef, needsUpdate: [*c]Boolean, aliasFilter: FSAliasFilterProcPtr, yourDataPtr: ?*anyopaque) OSStatus;
pub extern fn FSCopyAliasInfo(inAlias: AliasHandle, targetName: [*c]HFSUniStr255, volumeName: [*c]HFSUniStr255, pathString: [*c]CFStringRef, whichInfo: [*c]FSAliasInfoBitmap, info: [*c]FSAliasInfo) OSStatus;
pub extern fn GetAliasSize(alias: AliasHandle) Size;
pub extern fn GetAliasUserType(alias: AliasHandle) OSType;
pub extern fn SetAliasUserType(alias: AliasHandle, userType: OSType) void;
pub extern fn GetAliasSizeFromPtr(alias: [*c]const AliasRecord) Size;
pub extern fn GetAliasUserTypeFromPtr(alias: [*c]const AliasRecord) OSType;
pub extern fn SetAliasUserTypeWithPtr(alias: AliasPtr, userType: OSType) void;
pub const struct_OpaqueLocaleRef = opaque {};
pub const LocaleRef = ?*struct_OpaqueLocaleRef;
pub const LocalePartMask = UInt32;
pub const kLocaleLanguageMask: c_int = 1;
pub const kLocaleLanguageVariantMask: c_int = 2;
pub const kLocaleScriptMask: c_int = 4;
pub const kLocaleScriptVariantMask: c_int = 8;
pub const kLocaleRegionMask: c_int = 16;
pub const kLocaleRegionVariantMask: c_int = 32;
pub const kLocaleAllPartsMask: c_int = 63;
const enum_unnamed_699 = c_uint;
pub const LocaleOperationClass = FourCharCode;
pub const LocaleOperationVariant = FourCharCode;
pub const struct_LocaleAndVariant = extern struct {
    locale: LocaleRef,
    opVariant: LocaleOperationVariant,
};
pub const LocaleAndVariant = struct_LocaleAndVariant;
pub const LocaleNameMask = UInt32;
pub const kLocaleNameMask: c_int = 1;
pub const kLocaleOperationVariantNameMask: c_int = 2;
pub const kLocaleAndVariantNameMask: c_int = 3;
const enum_unnamed_700 = c_uint;
pub extern fn LocaleRefFromLangOrRegionCode(lang: LangCode, region: RegionCode, locale: [*c]LocaleRef) OSStatus;
pub extern fn LocaleRefFromLocaleString(localeString: [*c]const u8, locale: [*c]LocaleRef) OSStatus;
pub extern fn LocaleRefGetPartString(locale: LocaleRef, partMask: LocalePartMask, maxStringLen: ByteCount, partString: [*c]u8) OSStatus;
pub extern fn LocaleStringToLangAndRegionCodes(localeString: [*c]const u8, lang: [*c]LangCode, region: [*c]RegionCode) OSStatus;
pub extern fn LocaleOperationCountLocales(opClass: LocaleOperationClass, localeCount: [*c]ItemCount) OSStatus;
pub extern fn LocaleOperationGetLocales(opClass: LocaleOperationClass, maxLocaleCount: ItemCount, actualLocaleCount: [*c]ItemCount, localeVariantList: [*c]LocaleAndVariant) OSStatus;
pub extern fn LocaleGetName(locale: LocaleRef, opVariant: LocaleOperationVariant, nameMask: LocaleNameMask, displayLocale: LocaleRef, maxNameLen: UniCharCount, actualNameLen: [*c]UniCharCount, displayName: [*c]UniChar) OSStatus;
pub extern fn LocaleCountNames(locale: LocaleRef, opVariant: LocaleOperationVariant, nameMask: LocaleNameMask, nameCount: [*c]ItemCount) OSStatus;
pub extern fn LocaleGetIndName(locale: LocaleRef, opVariant: LocaleOperationVariant, nameMask: LocaleNameMask, nameIndex: ItemCount, maxNameLen: UniCharCount, actualNameLen: [*c]UniCharCount, displayName: [*c]UniChar, displayLocale: [*c]LocaleRef) OSStatus;
pub extern fn LocaleOperationGetName(opClass: LocaleOperationClass, displayLocale: LocaleRef, maxNameLen: UniCharCount, actualNameLen: [*c]UniCharCount, displayName: [*c]UniChar) OSStatus;
pub extern fn LocaleOperationCountNames(opClass: LocaleOperationClass, nameCount: [*c]ItemCount) OSStatus;
pub extern fn LocaleOperationGetIndName(opClass: LocaleOperationClass, nameIndex: ItemCount, maxNameLen: UniCharCount, actualNameLen: [*c]UniCharCount, displayName: [*c]UniChar, displayLocale: [*c]LocaleRef) OSStatus;
pub const kBlessedBusErrorBait: c_int = 1760651505;
const enum_unnamed_701 = c_uint;
pub extern fn DebugAssert(componentSignature: OSType, options: UInt32, assertionString: [*c]const u8, exceptionLabelString: [*c]const u8, errorString: [*c]const u8, fileName: [*c]const u8, lineNumber: c_long, value: ?*anyopaque) void;
pub const k68kInterruptLevelMask: c_int = 7;
pub const kInVBLTaskMask: c_int = 16;
pub const kInDeferredTaskMask: c_int = 32;
pub const kInSecondaryIntHandlerMask: c_int = 64;
pub const kInNestedInterruptMask: c_int = 128;
const enum_unnamed_702 = c_uint;
pub extern fn TaskLevel() UInt32;
pub const kComponentDebugOption: c_int = 0;
const enum_unnamed_703 = c_uint;
pub const kGetDebugOption: c_int = 1;
pub const kSetDebugOption: c_int = 2;
const enum_unnamed_704 = c_uint;
pub const DebugComponentCallbackProcPtr = ?*const fn (SInt32, UInt32, [*c]Boolean) callconv(.C) void;
pub const DebugComponentCallbackUPP = DebugComponentCallbackProcPtr;
pub extern fn NewDebugComponent(componentSignature: OSType, componentName: ConstStr255Param, componentCallback: DebugComponentCallbackUPP) OSStatus;
pub extern fn NewDebugOption(componentSignature: OSType, optionSelectorNum: SInt32, optionName: ConstStr255Param) OSStatus;
pub extern fn DisposeDebugComponent(componentSignature: OSType) OSStatus;
pub extern fn GetDebugComponentInfo(itemIndex: UInt32, componentSignature: [*c]OSType, componentName: [*c]u8) OSStatus;
pub extern fn GetDebugOptionInfo(itemIndex: UInt32, componentSignature: OSType, optionSelectorNum: [*c]SInt32, optionName: [*c]u8, optionSetting: [*c]Boolean) OSStatus;
pub extern fn SetDebugOptionValue(componentSignature: OSType, optionSelectorNum: SInt32, newOptionSetting: Boolean) OSStatus;
pub const DebugAssertOutputHandlerProcPtr = ?*const fn (OSType, UInt32, [*c]const u8, [*c]const u8, [*c]const u8, [*c]const u8, c_long, ?*anyopaque, ConstStr255Param) callconv(.C) void;
pub const DebugAssertOutputHandlerUPP = DebugAssertOutputHandlerProcPtr;
pub extern fn InstallDebugAssertOutputHandler(handler: DebugAssertOutputHandlerUPP) void;
pub extern fn GetMacOSStatusErrorString(err: OSStatus) [*c]const u8;
pub extern fn GetMacOSStatusCommentString(err: OSStatus) [*c]const u8;
pub extern fn NewDebugComponentCallbackUPP(userRoutine: DebugComponentCallbackProcPtr) DebugComponentCallbackUPP;
pub extern fn NewDebugAssertOutputHandlerUPP(userRoutine: DebugAssertOutputHandlerProcPtr) DebugAssertOutputHandlerUPP;
pub extern fn DisposeDebugComponentCallbackUPP(userUPP: DebugComponentCallbackUPP) void;
pub extern fn DisposeDebugAssertOutputHandlerUPP(userUPP: DebugAssertOutputHandlerUPP) void;
pub extern fn InvokeDebugComponentCallbackUPP(optionSelectorNum: SInt32, command: UInt32, optionSetting: [*c]Boolean, userUPP: DebugComponentCallbackUPP) void;
pub extern fn InvokeDebugAssertOutputHandlerUPP(componentSignature: OSType, options: UInt32, assertionString: [*c]const u8, exceptionLabelString: [*c]const u8, errorString: [*c]const u8, fileName: [*c]const u8, lineNumber: c_long, value: ?*anyopaque, outputMsg: ConstStr255Param, userUPP: DebugAssertOutputHandlerUPP) void;
pub extern fn PLstrcmp(str1: ConstStr255Param, str2: ConstStr255Param) c_short;
pub extern fn PLstrncmp(str1: ConstStr255Param, str2: ConstStr255Param, num: c_short) c_short;
pub extern fn PLstrcpy(dest: StringPtr, source: ConstStr255Param) StringPtr;
pub extern fn PLstrncpy(dest: StringPtr, source: ConstStr255Param, num: c_short) StringPtr;
pub extern fn PLstrcat(str: StringPtr, append: ConstStr255Param) StringPtr;
pub extern fn PLstrncat(str1: StringPtr, append: ConstStr255Param, num: c_short) StringPtr;
pub extern fn PLstrchr(str1: ConstStr255Param, ch1: c_short) Ptr;
pub extern fn PLstrrchr(str1: ConstStr255Param, ch1: c_short) Ptr;
pub extern fn PLstrpbrk(str1: ConstStr255Param, charSet: ConstStr255Param) Ptr;
pub extern fn PLstrspn(str1: ConstStr255Param, charSet: ConstStr255Param) c_short;
pub extern fn PLstrstr(str1: ConstStr255Param, searchStr: ConstStr255Param) Ptr;
pub extern fn PLstrlen(str: ConstStr255Param) c_short;
pub extern fn PLpos(str1: ConstStr255Param, searchStr: ConstStr255Param) c_short;
pub extern fn CompareAndSwap(oldValue: UInt32, newValue: UInt32, address: [*c]UInt32) Boolean;
pub extern fn TestAndClear(bit: UInt32, address: [*c]UInt8) Boolean;
pub extern fn TestAndSet(bit: UInt32, address: [*c]UInt8) Boolean;
pub extern fn IncrementAtomic8(address: [*c]SInt8) SInt8;
pub extern fn DecrementAtomic8(address: [*c]SInt8) SInt8;
pub extern fn AddAtomic8(amount: SInt32, address: [*c]SInt8) SInt8;
pub extern fn BitAndAtomic8(mask: UInt32, address: [*c]UInt8) UInt8;
pub extern fn BitOrAtomic8(mask: UInt32, address: [*c]UInt8) UInt8;
pub extern fn BitXorAtomic8(mask: UInt32, address: [*c]UInt8) UInt8;
pub extern fn IncrementAtomic16(address: [*c]SInt16) SInt16;
pub extern fn DecrementAtomic16(address: [*c]SInt16) SInt16;
pub extern fn AddAtomic16(amount: SInt32, address: [*c]SInt16) SInt16;
pub extern fn BitAndAtomic16(mask: UInt32, address: [*c]UInt16) UInt16;
pub extern fn BitOrAtomic16(mask: UInt32, address: [*c]UInt16) UInt16;
pub extern fn BitXorAtomic16(mask: UInt32, address: [*c]UInt16) UInt16;
pub extern fn IncrementAtomic(address: [*c]SInt32) SInt32;
pub extern fn DecrementAtomic(address: [*c]SInt32) SInt32;
pub extern fn AddAtomic(amount: SInt32, address: [*c]SInt32) SInt32;
pub extern fn BitAndAtomic(mask: UInt32, address: [*c]UInt32) UInt32;
pub extern fn BitOrAtomic(mask: UInt32, address: [*c]UInt32) UInt32;
pub extern fn BitXorAtomic(mask: UInt32, address: [*c]UInt32) UInt32;
pub const struct_OpaqueAreaID = opaque {};
pub const AreaID = ?*struct_OpaqueAreaID;
pub const struct_MachineInformationPowerPC = extern struct {
    CTR: UnsignedWide,
    LR: UnsignedWide,
    PC: UnsignedWide,
    CRRegister: c_ulong,
    XER: c_ulong,
    MSR: c_ulong,
    MQ: c_ulong,
    ExceptKind: c_ulong,
    DSISR: c_ulong,
    DAR: UnsignedWide,
    Reserved: UnsignedWide,
};
pub const MachineInformationPowerPC = struct_MachineInformationPowerPC;
pub const struct_RegisterInformationPowerPC = extern struct {
    R0: UnsignedWide,
    R1: UnsignedWide,
    R2: UnsignedWide,
    R3: UnsignedWide,
    R4: UnsignedWide,
    R5: UnsignedWide,
    R6: UnsignedWide,
    R7: UnsignedWide,
    R8: UnsignedWide,
    R9: UnsignedWide,
    R10: UnsignedWide,
    R11: UnsignedWide,
    R12: UnsignedWide,
    R13: UnsignedWide,
    R14: UnsignedWide,
    R15: UnsignedWide,
    R16: UnsignedWide,
    R17: UnsignedWide,
    R18: UnsignedWide,
    R19: UnsignedWide,
    R20: UnsignedWide,
    R21: UnsignedWide,
    R22: UnsignedWide,
    R23: UnsignedWide,
    R24: UnsignedWide,
    R25: UnsignedWide,
    R26: UnsignedWide,
    R27: UnsignedWide,
    R28: UnsignedWide,
    R29: UnsignedWide,
    R30: UnsignedWide,
    R31: UnsignedWide,
};
pub const RegisterInformationPowerPC = struct_RegisterInformationPowerPC;
pub const struct_FPUInformationPowerPC = extern struct {
    Registers: [32]UnsignedWide,
    FPSCR: c_ulong,
    Reserved: c_ulong,
};
pub const FPUInformationPowerPC = struct_FPUInformationPowerPC;
pub const union_Vector128 = extern union {
    l: [4]c_ulong,
    s: [8]c_ushort,
    c: [16]u8,
};
pub const Vector128 = union_Vector128;
pub const struct_VectorInformationPowerPC = extern struct {
    Registers: [32]Vector128,
    VSCR: Vector128,
    VRsave: UInt32,
};
pub const VectorInformationPowerPC = struct_VectorInformationPowerPC;
pub const kWriteReference: c_int = 0;
pub const kReadReference: c_int = 1;
pub const kFetchReference: c_int = 2;
pub const writeReference: c_int = 0;
pub const readReference: c_int = 1;
pub const fetchReference: c_int = 2;
const enum_unnamed_705 = c_uint;
pub const MemoryReferenceKind = c_ulong;
pub const struct_MemoryExceptionInformation = extern struct {
    theArea: AreaID,
    theAddress: LogicalAddress,
    theError: OSStatus,
    theReference: MemoryReferenceKind,
};
pub const MemoryExceptionInformation = struct_MemoryExceptionInformation;
pub const kUnknownException: c_int = 0;
pub const kIllegalInstructionException: c_int = 1;
pub const kTrapException: c_int = 2;
pub const kAccessException: c_int = 3;
pub const kUnmappedMemoryException: c_int = 4;
pub const kExcludedMemoryException: c_int = 5;
pub const kReadOnlyMemoryException: c_int = 6;
pub const kUnresolvablePageFaultException: c_int = 7;
pub const kPrivilegeViolationException: c_int = 8;
pub const kTraceException: c_int = 9;
pub const kInstructionBreakpointException: c_int = 10;
pub const kDataBreakpointException: c_int = 11;
pub const kIntegerException: c_int = 12;
pub const kFloatingPointException: c_int = 13;
pub const kStackOverflowException: c_int = 14;
pub const kTaskTerminationException: c_int = 15;
pub const kTaskCreationException: c_int = 16;
pub const kDataAlignmentException: c_int = 17;
const enum_unnamed_706 = c_uint;
pub const ExceptionKind = c_ulong;
pub const union_ExceptionInfo = extern union {
    memoryInfo: [*c]MemoryExceptionInformation,
};
pub const ExceptionInfo = union_ExceptionInfo;
pub const struct_ExceptionInformationPowerPC = extern struct {
    theKind: ExceptionKind,
    machineState: [*c]MachineInformationPowerPC,
    registerImage: [*c]RegisterInformationPowerPC,
    FPUImage: [*c]FPUInformationPowerPC,
    info: ExceptionInfo,
    vectorImage: [*c]VectorInformationPowerPC,
};
pub const ExceptionInformationPowerPC = struct_ExceptionInformationPowerPC;
pub const MachineInformation = extern struct {
    __unusedMachineInformationField: ?*const anyopaque,
};
pub const RegisterInformation = extern struct {
    __unusedRegisterInformationField: ?*const anyopaque,
};
pub const FPUInformation = extern struct {
    __unusedFPUInformationField: ?*const anyopaque,
};
pub const VectorInformation = extern struct {
    __unusedVectorInformationField: ?*const anyopaque,
};
pub const struct_ExceptionInformation = extern struct {
    theKind: ExceptionKind,
    machineState: [*c]MachineInformation,
    registerImage: [*c]RegisterInformation,
    FPUImage: [*c]FPUInformation,
    info: ExceptionInfo,
    vectorImage: [*c]VectorInformation,
};
pub const ExceptionInformation = struct_ExceptionInformation;
pub const ExceptionHandlerProcPtr = ?*const fn ([*c]ExceptionInformation) callconv(.C) OSStatus;
pub const ExceptionHandlerUPP = ExceptionHandlerProcPtr;
pub extern fn NewExceptionHandlerUPP(userRoutine: ExceptionHandlerProcPtr) ExceptionHandlerUPP;
pub extern fn DisposeExceptionHandlerUPP(userUPP: ExceptionHandlerUPP) void;
pub extern fn InvokeExceptionHandlerUPP(theException: [*c]ExceptionInformation, userUPP: ExceptionHandlerUPP) OSStatus;
pub const ExceptionHandlerTPP = ExceptionHandlerUPP;
pub const ExceptionHandler = ExceptionHandlerTPP;
pub extern fn InstallExceptionHandler(theHandler: ExceptionHandlerTPP) ExceptionHandlerTPP;
pub const durationMicrosecond: c_int = -1;
pub const durationMillisecond: c_int = 1;
pub const durationSecond: c_int = 1000;
pub const durationMinute: c_int = 60000;
pub const durationHour: c_int = 3600000;
pub const durationDay: c_int = 86400000;
pub const durationNoWait: c_int = 0;
pub const durationForever: c_int = 2147483647;
const enum_unnamed_707 = c_int;
pub const Nanoseconds = UnsignedWide;
pub extern fn UpTime() AbsoluteTime;
pub extern fn AbsoluteToNanoseconds(absoluteTime: AbsoluteTime) Nanoseconds;
pub extern fn AbsoluteToDuration(absoluteTime: AbsoluteTime) Duration;
pub extern fn NanosecondsToAbsolute(nanoseconds: Nanoseconds) AbsoluteTime;
pub extern fn DurationToAbsolute(duration: Duration) AbsoluteTime;
pub extern fn AddAbsoluteToAbsolute(absoluteTime1: AbsoluteTime, absoluteTime2: AbsoluteTime) AbsoluteTime;
pub extern fn SubAbsoluteFromAbsolute(leftAbsoluteTime: AbsoluteTime, rightAbsoluteTime: AbsoluteTime) AbsoluteTime;
pub extern fn AddNanosecondsToAbsolute(nanoseconds: Nanoseconds, absoluteTime: AbsoluteTime) AbsoluteTime;
pub extern fn AddDurationToAbsolute(duration: Duration, absoluteTime: AbsoluteTime) AbsoluteTime;
pub extern fn SubNanosecondsFromAbsolute(nanoseconds: Nanoseconds, absoluteTime: AbsoluteTime) AbsoluteTime;
pub extern fn SubDurationFromAbsolute(duration: Duration, absoluteTime: AbsoluteTime) AbsoluteTime;
pub extern fn AbsoluteDeltaToNanoseconds(leftAbsoluteTime: AbsoluteTime, rightAbsoluteTime: AbsoluteTime) Nanoseconds;
pub extern fn AbsoluteDeltaToDuration(leftAbsoluteTime: AbsoluteTime, rightAbsoluteTime: AbsoluteTime) Duration;
pub extern fn DurationToNanoseconds(theDuration: Duration) Nanoseconds;
pub extern fn NanosecondsToDuration(theNanoseconds: Nanoseconds) Duration;
pub const struct_NumFormatString = extern struct {
    fLength: UInt8,
    fVersion: UInt8,
    data: [254]u8,
};
pub const NumFormatString = struct_NumFormatString;
pub const NumFormatStringRec = NumFormatString;
pub const FormatStatus = c_short;
pub const fVNumber: c_int = 0;
const enum_unnamed_708 = c_uint;
pub const FormatClass = SInt8;
pub const fPositive: c_int = 0;
pub const fNegative: c_int = 1;
pub const fZero: c_int = 2;
const enum_unnamed_709 = c_uint;
pub const FormatResultType = SInt8;
pub const fFormatOK: c_int = 0;
pub const fBestGuess: c_int = 1;
pub const fOutOfSynch: c_int = 2;
pub const fSpuriousChars: c_int = 3;
pub const fMissingDelimiter: c_int = 4;
pub const fExtraDecimal: c_int = 5;
pub const fMissingLiteral: c_int = 6;
pub const fExtraExp: c_int = 7;
pub const fFormatOverflow: c_int = 8;
pub const fFormStrIsNAN: c_int = 9;
pub const fBadPartsTable: c_int = 10;
pub const fExtraPercent: c_int = 11;
pub const fExtraSeparator: c_int = 12;
pub const fEmptyFormatString: c_int = 13;
const enum_unnamed_710 = c_uint;
pub const struct_FVector = extern struct {
    start: c_short,
    length: c_short,
};
pub const FVector = struct_FVector;
pub const TripleInt = [3]FVector;
pub extern fn numtostring(theNum: c_long, theString: [*c]u8) void;
pub const systemCurLang: c_int = -2;
pub const systemDefLang: c_int = -3;
pub const currentCurLang: c_int = -4;
pub const currentDefLang: c_int = -5;
pub const scriptCurLang: c_int = -6;
pub const scriptDefLang: c_int = -7;
const enum_unnamed_711 = c_int;
pub const iuSystemCurLang: c_int = -2;
pub const iuSystemDefLang: c_int = -3;
pub const iuCurrentCurLang: c_int = -4;
pub const iuCurrentDefLang: c_int = -5;
pub const iuScriptCurLang: c_int = -6;
pub const iuScriptDefLang: c_int = -7;
const enum_unnamed_712 = c_int;
pub extern fn Munger(h: Handle, offset: c_long, ptr1: ?*const anyopaque, len1: c_long, ptr2: ?*const anyopaque, len2: c_long) c_long;
pub extern fn BitTst(bytePtr: ?*const anyopaque, bitNum: c_long) Boolean;
pub extern fn BitSet(bytePtr: ?*anyopaque, bitNum: c_long) void;
pub extern fn BitClr(bytePtr: ?*anyopaque, bitNum: c_long) void;
pub extern fn BitAnd(value1: c_long, value2: c_long) c_long;
pub extern fn BitOr(value1: c_long, value2: c_long) c_long;
pub extern fn BitXor(value1: c_long, value2: c_long) c_long;
pub extern fn BitNot(value: c_long) c_long;
pub extern fn BitShift(value: c_long, count: c_short) c_long;
pub const UCKeyOutput = UInt16;
pub const UCKeyCharSeq = UInt16;
pub const kUCKeyOutputStateIndexMask: c_int = 16384;
pub const kUCKeyOutputSequenceIndexMask: c_int = 32768;
pub const kUCKeyOutputTestForIndexMask: c_int = 49152;
pub const kUCKeyOutputGetIndexMask: c_int = 16383;
const enum_unnamed_713 = c_uint;
pub const struct_UCKeyStateRecord = extern struct {
    stateZeroCharData: UCKeyCharSeq,
    stateZeroNextState: UInt16,
    stateEntryCount: UInt16,
    stateEntryFormat: UInt16,
    stateEntryData: [1]UInt32,
};
pub const UCKeyStateRecord = struct_UCKeyStateRecord;
pub const kUCKeyStateEntryTerminalFormat: c_int = 1;
pub const kUCKeyStateEntryRangeFormat: c_int = 2;
const enum_unnamed_714 = c_uint;
pub const struct_UCKeyStateEntryTerminal = extern struct {
    curState: UInt16,
    charData: UCKeyCharSeq,
};
pub const UCKeyStateEntryTerminal = struct_UCKeyStateEntryTerminal;
pub const struct_UCKeyStateEntryRange = extern struct {
    curStateStart: UInt16,
    curStateRange: UInt8,
    deltaMultiplier: UInt8,
    charData: UCKeyCharSeq,
    nextState: UInt16,
};
pub const UCKeyStateEntryRange = struct_UCKeyStateEntryRange;
pub const struct_UCKeyboardTypeHeader = extern struct {
    keyboardTypeFirst: UInt32,
    keyboardTypeLast: UInt32,
    keyModifiersToTableNumOffset: UInt32,
    keyToCharTableIndexOffset: UInt32,
    keyStateRecordsIndexOffset: UInt32,
    keyStateTerminatorsOffset: UInt32,
    keySequenceDataIndexOffset: UInt32,
};
pub const UCKeyboardTypeHeader = struct_UCKeyboardTypeHeader;
pub const struct_UCKeyboardLayout = extern struct {
    keyLayoutHeaderFormat: UInt16,
    keyLayoutDataVersion: UInt16,
    keyLayoutFeatureInfoOffset: UInt32,
    keyboardTypeCount: UInt32,
    keyboardTypeList: [1]UCKeyboardTypeHeader,
};
pub const UCKeyboardLayout = struct_UCKeyboardLayout;
pub const struct_UCKeyLayoutFeatureInfo = extern struct {
    keyLayoutFeatureInfoFormat: UInt16,
    reserved: UInt16,
    maxOutputStringLength: UInt32,
};
pub const UCKeyLayoutFeatureInfo = struct_UCKeyLayoutFeatureInfo;
pub const struct_UCKeyModifiersToTableNum = extern struct {
    keyModifiersToTableNumFormat: UInt16,
    defaultTableNum: UInt16,
    modifiersCount: UInt32,
    tableNum: [1]UInt8,
};
pub const UCKeyModifiersToTableNum = struct_UCKeyModifiersToTableNum;
pub const struct_UCKeyToCharTableIndex = extern struct {
    keyToCharTableIndexFormat: UInt16,
    keyToCharTableSize: UInt16,
    keyToCharTableCount: UInt32,
    keyToCharTableOffsets: [1]UInt32,
};
pub const UCKeyToCharTableIndex = struct_UCKeyToCharTableIndex;
pub const struct_UCKeyStateRecordsIndex = extern struct {
    keyStateRecordsIndexFormat: UInt16,
    keyStateRecordCount: UInt16,
    keyStateRecordOffsets: [1]UInt32,
};
pub const UCKeyStateRecordsIndex = struct_UCKeyStateRecordsIndex;
pub const struct_UCKeyStateTerminators = extern struct {
    keyStateTerminatorsFormat: UInt16,
    keyStateTerminatorCount: UInt16,
    keyStateTerminators: [1]UCKeyCharSeq,
};
pub const UCKeyStateTerminators = struct_UCKeyStateTerminators;
pub const struct_UCKeySequenceDataIndex = extern struct {
    keySequenceDataIndexFormat: UInt16,
    charSequenceCount: UInt16,
    charSequenceOffsets: [1]UInt16,
};
pub const UCKeySequenceDataIndex = struct_UCKeySequenceDataIndex;
pub const kUCKeyLayoutHeaderFormat: c_int = 4098;
pub const kUCKeyLayoutFeatureInfoFormat: c_int = 8193;
pub const kUCKeyModifiersToTableNumFormat: c_int = 12289;
pub const kUCKeyToCharTableIndexFormat: c_int = 16385;
pub const kUCKeyStateRecordsIndexFormat: c_int = 20481;
pub const kUCKeyStateTerminatorsFormat: c_int = 24577;
pub const kUCKeySequenceDataIndexFormat: c_int = 28673;
const enum_unnamed_715 = c_uint;
pub const kUCKeyActionDown: c_int = 0;
pub const kUCKeyActionUp: c_int = 1;
pub const kUCKeyActionAutoKey: c_int = 2;
pub const kUCKeyActionDisplay: c_int = 3;
const enum_unnamed_716 = c_uint;
pub const kUCKeyTranslateNoDeadKeysBit: c_int = 0;
const enum_unnamed_717 = c_uint;
pub const kUCKeyTranslateNoDeadKeysMask: c_int = 1;
const enum_unnamed_718 = c_uint;
pub const kUnicodeCollationClass: c_int = 1969450860;
const enum_unnamed_719 = c_uint;
pub const struct_OpaqueCollatorRef = opaque {};
pub const CollatorRef = ?*struct_OpaqueCollatorRef;
pub const UCCollateOptions = UInt32;
pub const kUCCollateComposeInsensitiveMask: c_int = 2;
pub const kUCCollateWidthInsensitiveMask: c_int = 4;
pub const kUCCollateCaseInsensitiveMask: c_int = 8;
pub const kUCCollateDiacritInsensitiveMask: c_int = 16;
pub const kUCCollatePunctuationSignificantMask: c_int = 32768;
pub const kUCCollateDigitsOverrideMask: c_int = 65536;
pub const kUCCollateDigitsAsNumberMask: c_int = 131072;
const enum_unnamed_720 = c_uint;
pub const kUCCollateStandardOptions: c_int = 6;
const enum_unnamed_721 = c_uint;
pub const kUCCollateTypeHFSExtended: c_int = 1;
const enum_unnamed_722 = c_uint;
pub const kUCCollateTypeSourceMask: c_int = 255;
pub const kUCCollateTypeShiftBits: c_int = 24;
const enum_unnamed_723 = c_uint;
pub const kUCCollateTypeMask: c_uint = 4278190080;
const enum_unnamed_724 = c_uint;
pub const UCCollationValue = UInt32;
pub const struct_OpaqueUCTypeSelectRef = opaque {};
pub const UCTypeSelectRef = ?*struct_OpaqueUCTypeSelectRef;
pub const UCTypeSelectCompareResult = SInt32;
pub const UCTSWalkDirection = UInt16;
pub const kUCTSDirectionNext: c_int = 0;
pub const kUCTSDirectionPrevious: c_int = 1;
const enum_unnamed_725 = c_uint;
pub const UCTypeSelectOptions = UInt16;
pub const kUCTSOptionsNoneMask: c_int = 0;
pub const kUCTSOptionsReleaseStringMask: c_int = 1;
pub const kUCTSOptionsDataIsOrderedMask: c_int = 2;
const enum_unnamed_726 = c_uint;
pub const IndexToUCStringProcPtr = ?*const fn (UInt32, ?*anyopaque, ?*anyopaque, [*c]CFStringRef, [*c]UCTypeSelectOptions) callconv(.C) Boolean;
pub const IndexToUCStringUPP = IndexToUCStringProcPtr;
pub extern fn NewIndexToUCStringUPP(userRoutine: IndexToUCStringProcPtr) IndexToUCStringUPP;
pub extern fn DisposeIndexToUCStringUPP(userUPP: IndexToUCStringUPP) void;
pub extern fn InvokeIndexToUCStringUPP(index: UInt32, listDataPtr: ?*anyopaque, refcon: ?*anyopaque, outString: [*c]CFStringRef, tsOptions: [*c]UCTypeSelectOptions, userUPP: IndexToUCStringUPP) Boolean;
pub const kUCTypeSelectMaxListSize: c_uint = 4294967295;
const enum_unnamed_727 = c_uint;
pub const kUnicodeTextBreakClass: c_int = 1969386091;
const enum_unnamed_728 = c_uint;
pub const struct_OpaqueTextBreakLocatorRef = opaque {};
pub const TextBreakLocatorRef = ?*struct_OpaqueTextBreakLocatorRef;
pub const UCTextBreakType = UInt32;
pub const kUCTextBreakCharMask: c_int = 1;
pub const kUCTextBreakClusterMask: c_int = 4;
pub const kUCTextBreakWordMask: c_int = 16;
pub const kUCTextBreakLineMask: c_int = 64;
pub const kUCTextBreakParagraphMask: c_int = 256;
const enum_unnamed_729 = c_uint;
pub const UCTextBreakOptions = UInt32;
pub const kUCTextBreakLeadingEdgeMask: c_int = 1;
pub const kUCTextBreakGoBackwardsMask: c_int = 2;
pub const kUCTextBreakIterateMask: c_int = 4;
const enum_unnamed_730 = c_uint;
pub extern fn UCKeyTranslate(keyLayoutPtr: [*c]const UCKeyboardLayout, virtualKeyCode: UInt16, keyAction: UInt16, modifierKeyState: UInt32, keyboardType: UInt32, keyTranslateOptions: OptionBits, deadKeyState: [*c]UInt32, maxStringLength: UniCharCount, actualStringLength: [*c]UniCharCount, unicodeString: [*c]UniChar) OSStatus;
pub extern fn UCCreateCollator(locale: LocaleRef, opVariant: LocaleOperationVariant, options: UCCollateOptions, collatorRef: [*c]CollatorRef) OSStatus;
pub extern fn UCGetCollationKey(collatorRef: CollatorRef, textPtr: [*c]const UniChar, textLength: UniCharCount, maxKeySize: ItemCount, actualKeySize: [*c]ItemCount, collationKey: [*c]UCCollationValue) OSStatus;
pub extern fn UCCompareCollationKeys(key1Ptr: [*c]const UCCollationValue, key1Length: ItemCount, key2Ptr: [*c]const UCCollationValue, key2Length: ItemCount, equivalent: [*c]Boolean, order: [*c]SInt32) OSStatus;
pub extern fn UCCompareText(collatorRef: CollatorRef, text1Ptr: [*c]const UniChar, text1Length: UniCharCount, text2Ptr: [*c]const UniChar, text2Length: UniCharCount, equivalent: [*c]Boolean, order: [*c]SInt32) OSStatus;
pub extern fn UCDisposeCollator(collatorRef: [*c]CollatorRef) OSStatus;
pub extern fn UCCompareTextDefault(options: UCCollateOptions, text1Ptr: [*c]const UniChar, text1Length: UniCharCount, text2Ptr: [*c]const UniChar, text2Length: UniCharCount, equivalent: [*c]Boolean, order: [*c]SInt32) OSStatus;
pub extern fn UCCompareTextNoLocale(options: UCCollateOptions, text1Ptr: [*c]const UniChar, text1Length: UniCharCount, text2Ptr: [*c]const UniChar, text2Length: UniCharCount, equivalent: [*c]Boolean, order: [*c]SInt32) OSStatus;
pub extern fn UCCreateTextBreakLocator(locale: LocaleRef, opVariant: LocaleOperationVariant, breakTypes: UCTextBreakType, breakRef: [*c]TextBreakLocatorRef) OSStatus;
pub extern fn UCFindTextBreak(breakRef: TextBreakLocatorRef, breakType: UCTextBreakType, options: UCTextBreakOptions, textPtr: [*c]const UniChar, textLength: UniCharCount, startOffset: UniCharArrayOffset, breakOffset: [*c]UniCharArrayOffset) OSStatus;
pub extern fn UCDisposeTextBreakLocator(breakRef: [*c]TextBreakLocatorRef) OSStatus;
pub extern fn UCTypeSelectCreateSelector(locale: LocaleRef, opVariant: LocaleOperationVariant, options: UCCollateOptions, newSelector: [*c]UCTypeSelectRef) OSStatus;
pub extern fn UCTypeSelectFlushSelectorData(ref: UCTypeSelectRef) OSStatus;
pub extern fn UCTypeSelectReleaseSelector(ref: [*c]UCTypeSelectRef) OSStatus;
pub extern fn UCTypeSelectWouldResetBuffer(inRef: UCTypeSelectRef, inText: CFStringRef, inEventTime: f64) Boolean;
pub extern fn UCTypeSelectAddKeyToSelector(inRef: UCTypeSelectRef, inText: CFStringRef, inEventTime: f64, updateFlag: [*c]Boolean) OSStatus;
pub extern fn UCTypeSelectCompare(ref: UCTypeSelectRef, inText: CFStringRef, result: [*c]UCTypeSelectCompareResult) OSStatus;
pub extern fn UCTypeSelectFindItem(ref: UCTypeSelectRef, listSize: UInt32, listDataPtr: ?*anyopaque, refcon: ?*anyopaque, userUPP: IndexToUCStringUPP, closestItem: [*c]UInt32) OSStatus;
pub extern fn UCTypeSelectWalkList(ref: UCTypeSelectRef, currSelect: CFStringRef, direction: UCTSWalkDirection, listSize: UInt32, listDataPtr: ?*anyopaque, refcon: ?*anyopaque, userUPP: IndexToUCStringUPP, closestItem: [*c]UInt32) OSStatus;
pub extern const pi: double_t;
pub extern fn compound(rate: f64, periods: f64) f64;
pub extern fn annuity(rate: f64, periods: f64) f64;
pub extern fn randomx(x: [*c]double_t) double_t;
pub const relop = c_short;
pub const GREATERTHAN: c_int = 0;
pub const LESSTHAN: c_int = 1;
pub const EQUALTO: c_int = 2;
pub const UNORDERED: c_int = 3;
const enum_unnamed_731 = c_uint;
pub extern fn relation(x: double_t, y: double_t) relop;
const struct_unnamed_732 = extern struct {
    length: u8,
    text: [36]u8,
    unused: u8,
};
pub const struct_decimal = extern struct {
    sgn: u8,
    unused: u8,
    exp: c_short,
    sig: struct_unnamed_732,
};
pub const decimal = struct_decimal;
pub const struct_decform = extern struct {
    style: u8,
    unused: u8,
    digits: c_short,
};
pub const decform = struct_decform;
pub extern fn num2dec(f: [*c]const decform, x: double_t, d: [*c]decimal) void;
pub extern fn dec2num(d: [*c]const decimal) double_t;
pub extern fn dec2str(f: [*c]const decform, d: [*c]const decimal, s: [*c]u8) void;
pub extern fn str2dec(s: [*c]const u8, ix: [*c]c_short, d: [*c]decimal, vp: [*c]c_short) void;
pub extern fn dec2f(d: [*c]const decimal) f32;
pub extern fn dec2s(d: [*c]const decimal) c_short;
pub extern fn dec2l(d: [*c]const decimal) c_long;
pub extern fn relationl(x: c_longdouble, y: c_longdouble) relop;
pub extern fn num2decl(f: [*c]const decform, x: c_longdouble, d: [*c]decimal) void;
pub extern fn dec2numl(d: [*c]const decimal) c_longdouble;
pub extern fn x80tod(x80: [*c]const extended80) f64;
pub extern fn dtox80(x: [*c]const f64, x80: [*c]extended80) void;
pub extern fn x80told(x80: [*c]const extended80, x: [*c]c_longdouble) void;
pub extern fn ldtox80(x: [*c]const c_longdouble, x80: [*c]extended80) void;
pub const fenv_t = extern struct {
    __fpsr: c_ulonglong,
    __fpcr: c_ulonglong,
};
pub const fexcept_t = c_ushort;
pub const __fpcr_trap_invalid: c_int = 256;
pub const __fpcr_trap_divbyzero: c_int = 512;
pub const __fpcr_trap_overflow: c_int = 1024;
pub const __fpcr_trap_underflow: c_int = 2048;
pub const __fpcr_trap_inexact: c_int = 4096;
pub const __fpcr_trap_denormal: c_int = 32768;
pub const __fpcr_flush_to_zero: c_int = 16777216;
const enum_unnamed_733 = c_uint;
pub const __fpsr_saturation: c_int = 134217728;
const enum_unnamed_734 = c_uint;
pub extern const _FE_DFL_ENV: fenv_t;
pub extern const _FE_DFL_DISABLE_DENORMS_ENV: fenv_t;
pub extern fn feclearexcept(c_int) c_int;
pub extern fn fegetexceptflag([*c]fexcept_t, c_int) c_int;
pub extern fn feraiseexcept(c_int) c_int;
pub extern fn fesetexceptflag([*c]const fexcept_t, c_int) c_int;
pub extern fn fetestexcept(c_int) c_int;
pub extern fn fegetround() c_int;
pub extern fn fesetround(c_int) c_int;
pub extern fn fegetenv([*c]fenv_t) c_int;
pub extern fn feholdexcept([*c]fenv_t) c_int;
pub extern fn fesetenv([*c]const fenv_t) c_int;
pub extern fn feupdateenv([*c]const fenv_t) c_int;
pub const TECPluginSignature = OSType;
pub const TECPluginVersion = UInt32;
pub const kTECSignature: c_int = 1701733238;
pub const kTECUnicodePluginSignature: c_int = 1886744169;
pub const kTECJapanesePluginSignature: c_int = 1886023790;
pub const kTECChinesePluginSignature: c_int = 1887070319;
pub const kTECKoreanPluginSignature: c_int = 1886089074;
const enum_unnamed_735 = c_uint;
pub const struct_OpaqueTECObjectRef = opaque {};
pub const TECObjectRef = ?*struct_OpaqueTECObjectRef;
pub const struct_OpaqueTECSnifferObjectRef = opaque {};
pub const TECSnifferObjectRef = ?*struct_OpaqueTECSnifferObjectRef;
pub const TECPluginSig = OSType;
pub const struct_TECConversionInfo = extern struct {
    sourceEncoding: TextEncoding,
    destinationEncoding: TextEncoding,
    reserved1: UInt16,
    reserved2: UInt16,
};
pub const TECConversionInfo = struct_TECConversionInfo;
pub const TECInternetNameUsageMask = UInt32;
pub const kTECInternetNameDefaultUsageMask: c_int = 0;
pub const kTECInternetNameStrictUsageMask: c_int = 1;
pub const kTECInternetNameTolerantUsageMask: c_int = 2;
const enum_unnamed_736 = c_uint;
pub const kTEC_MIBEnumDontCare: c_int = -1;
const enum_unnamed_737 = c_int;
pub const kTECDisableFallbacksBit: c_int = 16;
pub const kTECDisableLooseMappingsBit: c_int = 17;
const enum_unnamed_738 = c_uint;
pub const kTECDisableFallbacksMask: c_int = 65536;
pub const kTECDisableLooseMappingsMask: c_int = 131072;
const enum_unnamed_739 = c_uint;
pub extern fn TECCountAvailableTextEncodings(numberEncodings: [*c]ItemCount) OSStatus;
pub extern fn TECGetAvailableTextEncodings(availableEncodings: [*c]TextEncoding, maxAvailableEncodings: ItemCount, actualAvailableEncodings: [*c]ItemCount) OSStatus;
pub extern fn TECCountDirectTextEncodingConversions(numberOfEncodings: [*c]ItemCount) OSStatus;
pub extern fn TECGetDirectTextEncodingConversions(availableConversions: [*c]TECConversionInfo, maxAvailableConversions: ItemCount, actualAvailableConversions: [*c]ItemCount) OSStatus;
pub extern fn TECCountDestinationTextEncodings(inputEncoding: TextEncoding, numberOfEncodings: [*c]ItemCount) OSStatus;
pub extern fn TECGetDestinationTextEncodings(inputEncoding: TextEncoding, destinationEncodings: [*c]TextEncoding, maxDestinationEncodings: ItemCount, actualDestinationEncodings: [*c]ItemCount) OSStatus;
pub extern fn TECGetTextEncodingInternetName(textEncoding: TextEncoding, encodingName: [*c]u8) OSStatus;
pub extern fn TECGetTextEncodingFromInternetName(textEncoding: [*c]TextEncoding, encodingName: ConstStr255Param) OSStatus;
pub extern fn TECCreateConverter(newEncodingConverter: [*c]TECObjectRef, inputEncoding: TextEncoding, outputEncoding: TextEncoding) OSStatus;
pub extern fn TECCreateConverterFromPath(newEncodingConverter: [*c]TECObjectRef, inPath: [*c]const TextEncoding, inEncodings: ItemCount) OSStatus;
pub extern fn TECDisposeConverter(newEncodingConverter: TECObjectRef) OSStatus;
pub extern fn TECClearConverterContextInfo(encodingConverter: TECObjectRef) OSStatus;
pub extern fn TECConvertText(encodingConverter: TECObjectRef, inputBuffer: ConstTextPtr, inputBufferLength: ByteCount, actualInputLength: [*c]ByteCount, outputBuffer: TextPtr, outputBufferLength: ByteCount, actualOutputLength: [*c]ByteCount) OSStatus;
pub extern fn TECFlushText(encodingConverter: TECObjectRef, outputBuffer: TextPtr, outputBufferLength: ByteCount, actualOutputLength: [*c]ByteCount) OSStatus;
pub extern fn TECCountSubTextEncodings(inputEncoding: TextEncoding, numberOfEncodings: [*c]ItemCount) OSStatus;
pub extern fn TECGetSubTextEncodings(inputEncoding: TextEncoding, subEncodings: [*c]TextEncoding, maxSubEncodings: ItemCount, actualSubEncodings: [*c]ItemCount) OSStatus;
pub extern fn TECGetEncodingList(encodingConverter: TECObjectRef, numEncodings: [*c]ItemCount, encodingList: [*c]Handle) OSStatus;
pub extern fn TECCreateOneToManyConverter(newEncodingConverter: [*c]TECObjectRef, inputEncoding: TextEncoding, numOutputEncodings: ItemCount, outputEncodings: [*c]const TextEncoding) OSStatus;
pub extern fn TECConvertTextToMultipleEncodings(encodingConverter: TECObjectRef, inputBuffer: ConstTextPtr, inputBufferLength: ByteCount, actualInputLength: [*c]ByteCount, outputBuffer: TextPtr, outputBufferLength: ByteCount, actualOutputLength: [*c]ByteCount, outEncodingsBuffer: [*c]TextEncodingRun, maxOutEncodingRuns: ItemCount, actualOutEncodingRuns: [*c]ItemCount) OSStatus;
pub extern fn TECFlushMultipleEncodings(encodingConverter: TECObjectRef, outputBuffer: TextPtr, outputBufferLength: ByteCount, actualOutputLength: [*c]ByteCount, outEncodingsBuffer: [*c]TextEncodingRun, maxOutEncodingRuns: ItemCount, actualOutEncodingRuns: [*c]ItemCount) OSStatus;
pub extern fn TECCountWebTextEncodings(locale: RegionCode, numberEncodings: [*c]ItemCount) OSStatus;
pub extern fn TECGetWebTextEncodings(locale: RegionCode, availableEncodings: [*c]TextEncoding, maxAvailableEncodings: ItemCount, actualAvailableEncodings: [*c]ItemCount) OSStatus;
pub extern fn TECCountMailTextEncodings(locale: RegionCode, numberEncodings: [*c]ItemCount) OSStatus;
pub extern fn TECGetMailTextEncodings(locale: RegionCode, availableEncodings: [*c]TextEncoding, maxAvailableEncodings: ItemCount, actualAvailableEncodings: [*c]ItemCount) OSStatus;
pub extern fn TECCountAvailableSniffers(numberOfEncodings: [*c]ItemCount) OSStatus;
pub extern fn TECGetAvailableSniffers(availableSniffers: [*c]TextEncoding, maxAvailableSniffers: ItemCount, actualAvailableSniffers: [*c]ItemCount) OSStatus;
pub extern fn TECCreateSniffer(encodingSniffer: [*c]TECSnifferObjectRef, testEncodings: [*c]const TextEncoding, numTextEncodings: ItemCount) OSStatus;
pub extern fn TECSniffTextEncoding(encodingSniffer: TECSnifferObjectRef, inputBuffer: ConstTextPtr, inputBufferLength: ByteCount, testEncodings: [*c]TextEncoding, numTextEncodings: ItemCount, numErrsArray: [*c]ItemCount, maxErrs: ItemCount, numFeaturesArray: [*c]ItemCount, maxFeatures: ItemCount) OSStatus;
pub extern fn TECDisposeSniffer(encodingSniffer: TECSnifferObjectRef) OSStatus;
pub extern fn TECClearSnifferContextInfo(encodingSniffer: TECSnifferObjectRef) OSStatus;
pub extern fn TECSetBasicOptions(encodingConverter: TECObjectRef, controlFlags: OptionBits) OSStatus;
pub extern fn TECCopyTextEncodingInternetNameAndMIB(textEncoding: TextEncoding, usage: TECInternetNameUsageMask, encodingNamePtr: [*c]CFStringRef, mibEnumPtr: [*c]SInt32) OSStatus;
pub extern fn TECGetTextEncodingFromInternetNameOrMIB(textEncodingPtr: [*c]TextEncoding, usage: TECInternetNameUsageMask, encodingName: CFStringRef, mibEnum: SInt32) OSStatus;
pub const struct_OpaqueTextToUnicodeInfo = opaque {};
pub const TextToUnicodeInfo = ?*struct_OpaqueTextToUnicodeInfo;
pub const struct_OpaqueUnicodeToTextInfo = opaque {};
pub const UnicodeToTextInfo = ?*struct_OpaqueUnicodeToTextInfo;
pub const struct_OpaqueUnicodeToTextRunInfo = opaque {};
pub const UnicodeToTextRunInfo = ?*struct_OpaqueUnicodeToTextRunInfo;
pub const ConstTextToUnicodeInfo = TextToUnicodeInfo;
pub const ConstUnicodeToTextInfo = UnicodeToTextInfo;
pub const UnicodeMapVersion = SInt32;
pub const kUnicodeUseLatestMapping: c_int = -1;
pub const kUnicodeUseHFSPlusMapping: c_int = 4;
const enum_unnamed_740 = c_int;
pub const struct_UnicodeMapping = extern struct {
    unicodeEncoding: TextEncoding,
    otherEncoding: TextEncoding,
    mappingVersion: UnicodeMapVersion,
};
pub const UnicodeMapping = struct_UnicodeMapping;
pub const UnicodeMappingPtr = [*c]UnicodeMapping;
pub const ConstUnicodeMappingPtr = [*c]const UnicodeMapping;
pub const kUnicodeUseFallbacksBit: c_int = 0;
pub const kUnicodeKeepInfoBit: c_int = 1;
pub const kUnicodeDirectionalityBits: c_int = 2;
pub const kUnicodeVerticalFormBit: c_int = 4;
pub const kUnicodeLooseMappingsBit: c_int = 5;
pub const kUnicodeStringUnterminatedBit: c_int = 6;
pub const kUnicodeTextRunBit: c_int = 7;
pub const kUnicodeKeepSameEncodingBit: c_int = 8;
pub const kUnicodeForceASCIIRangeBit: c_int = 9;
pub const kUnicodeNoHalfwidthCharsBit: c_int = 10;
pub const kUnicodeTextRunHeuristicsBit: c_int = 11;
pub const kUnicodeMapLineFeedToReturnBit: c_int = 12;
pub const kUnicodeUseExternalEncodingFormBit: c_int = 13;
const enum_unnamed_741 = c_uint;
pub const kUnicodeUseFallbacksMask: c_int = 1;
pub const kUnicodeKeepInfoMask: c_int = 2;
pub const kUnicodeDirectionalityMask: c_int = 12;
pub const kUnicodeVerticalFormMask: c_int = 16;
pub const kUnicodeLooseMappingsMask: c_int = 32;
pub const kUnicodeStringUnterminatedMask: c_int = 64;
pub const kUnicodeTextRunMask: c_int = 128;
pub const kUnicodeKeepSameEncodingMask: c_int = 256;
pub const kUnicodeForceASCIIRangeMask: c_int = 512;
pub const kUnicodeNoHalfwidthCharsMask: c_int = 1024;
pub const kUnicodeTextRunHeuristicsMask: c_int = 2048;
pub const kUnicodeMapLineFeedToReturnMask: c_int = 4096;
pub const kUnicodeUseExternalEncodingFormMask: c_int = 8192;
const enum_unnamed_742 = c_uint;
pub const kUnicodeDefaultDirection: c_int = 0;
pub const kUnicodeLeftToRight: c_int = 1;
pub const kUnicodeRightToLeft: c_int = 2;
const enum_unnamed_743 = c_uint;
pub const kUnicodeDefaultDirectionMask: c_int = 0;
pub const kUnicodeLeftToRightMask: c_int = 4;
pub const kUnicodeRightToLeftMask: c_int = 8;
const enum_unnamed_744 = c_uint;
pub const kUnicodeMatchUnicodeBaseBit: c_int = 0;
pub const kUnicodeMatchUnicodeVariantBit: c_int = 1;
pub const kUnicodeMatchUnicodeFormatBit: c_int = 2;
pub const kUnicodeMatchOtherBaseBit: c_int = 3;
pub const kUnicodeMatchOtherVariantBit: c_int = 4;
pub const kUnicodeMatchOtherFormatBit: c_int = 5;
const enum_unnamed_745 = c_uint;
pub const kUnicodeMatchUnicodeBaseMask: c_int = 1;
pub const kUnicodeMatchUnicodeVariantMask: c_int = 2;
pub const kUnicodeMatchUnicodeFormatMask: c_int = 4;
pub const kUnicodeMatchOtherBaseMask: c_int = 8;
pub const kUnicodeMatchOtherVariantMask: c_int = 16;
pub const kUnicodeMatchOtherFormatMask: c_int = 32;
const enum_unnamed_746 = c_uint;
pub const kUnicodeFallbackSequencingBits: c_int = 0;
const enum_unnamed_747 = c_uint;
pub const kUnicodeFallbackSequencingMask: c_int = 3;
pub const kUnicodeFallbackInterruptSafeMask: c_int = 4;
const enum_unnamed_748 = c_uint;
pub const kUnicodeFallbackDefaultOnly: c_int = 0;
pub const kUnicodeFallbackCustomOnly: c_int = 1;
pub const kUnicodeFallbackDefaultFirst: c_int = 2;
pub const kUnicodeFallbackCustomFirst: c_int = 3;
const enum_unnamed_749 = c_uint;
pub const UnicodeToTextFallbackProcPtr = ?*const fn ([*c]UniChar, ByteCount, [*c]ByteCount, TextPtr, ByteCount, [*c]ByteCount, LogicalAddress, ConstUnicodeMappingPtr) callconv(.C) OSStatus;
pub const UnicodeToTextFallbackUPP = UnicodeToTextFallbackProcPtr;
pub extern fn NewUnicodeToTextFallbackUPP(userRoutine: UnicodeToTextFallbackProcPtr) UnicodeToTextFallbackUPP;
pub extern fn DisposeUnicodeToTextFallbackUPP(userUPP: UnicodeToTextFallbackUPP) void;
pub extern fn InvokeUnicodeToTextFallbackUPP(iSrcUniStr: [*c]UniChar, iSrcUniStrLen: ByteCount, oSrcConvLen: [*c]ByteCount, oDestStr: TextPtr, iDestStrLen: ByteCount, oDestConvLen: [*c]ByteCount, iInfoPtr: LogicalAddress, iUnicodeMappingPtr: ConstUnicodeMappingPtr, userUPP: UnicodeToTextFallbackUPP) OSStatus;
pub extern fn CreateTextToUnicodeInfo(iUnicodeMapping: ConstUnicodeMappingPtr, oTextToUnicodeInfo: [*c]TextToUnicodeInfo) OSStatus;
pub extern fn CreateTextToUnicodeInfoByEncoding(iEncoding: TextEncoding, oTextToUnicodeInfo: [*c]TextToUnicodeInfo) OSStatus;
pub extern fn CreateUnicodeToTextInfo(iUnicodeMapping: ConstUnicodeMappingPtr, oUnicodeToTextInfo: [*c]UnicodeToTextInfo) OSStatus;
pub extern fn CreateUnicodeToTextInfoByEncoding(iEncoding: TextEncoding, oUnicodeToTextInfo: [*c]UnicodeToTextInfo) OSStatus;
pub extern fn CreateUnicodeToTextRunInfo(iNumberOfMappings: ItemCount, iUnicodeMappings: [*c]const UnicodeMapping, oUnicodeToTextInfo: [*c]UnicodeToTextRunInfo) OSStatus;
pub extern fn CreateUnicodeToTextRunInfoByEncoding(iNumberOfEncodings: ItemCount, iEncodings: [*c]const TextEncoding, oUnicodeToTextInfo: [*c]UnicodeToTextRunInfo) OSStatus;
pub extern fn CreateUnicodeToTextRunInfoByScriptCode(iNumberOfScriptCodes: ItemCount, iScripts: [*c]const ScriptCode, oUnicodeToTextInfo: [*c]UnicodeToTextRunInfo) OSStatus;
pub extern fn ChangeTextToUnicodeInfo(ioTextToUnicodeInfo: TextToUnicodeInfo, iUnicodeMapping: ConstUnicodeMappingPtr) OSStatus;
pub extern fn ChangeUnicodeToTextInfo(ioUnicodeToTextInfo: UnicodeToTextInfo, iUnicodeMapping: ConstUnicodeMappingPtr) OSStatus;
pub extern fn DisposeTextToUnicodeInfo(ioTextToUnicodeInfo: [*c]TextToUnicodeInfo) OSStatus;
pub extern fn DisposeUnicodeToTextInfo(ioUnicodeToTextInfo: [*c]UnicodeToTextInfo) OSStatus;
pub extern fn DisposeUnicodeToTextRunInfo(ioUnicodeToTextRunInfo: [*c]UnicodeToTextRunInfo) OSStatus;
pub extern fn ConvertFromTextToUnicode(iTextToUnicodeInfo: TextToUnicodeInfo, iSourceLen: ByteCount, iSourceStr: ConstLogicalAddress, iControlFlags: OptionBits, iOffsetCount: ItemCount, iOffsetArray: [*c]const ByteOffset, oOffsetCount: [*c]ItemCount, oOffsetArray: [*c]ByteOffset, iOutputBufLen: ByteCount, oSourceRead: [*c]ByteCount, oUnicodeLen: [*c]ByteCount, oUnicodeStr: [*c]UniChar) OSStatus;
pub extern fn ConvertFromUnicodeToText(iUnicodeToTextInfo: UnicodeToTextInfo, iUnicodeLen: ByteCount, iUnicodeStr: [*c]const UniChar, iControlFlags: OptionBits, iOffsetCount: ItemCount, iOffsetArray: [*c]const ByteOffset, oOffsetCount: [*c]ItemCount, oOffsetArray: [*c]ByteOffset, iOutputBufLen: ByteCount, oInputRead: [*c]ByteCount, oOutputLen: [*c]ByteCount, oOutputStr: LogicalAddress) OSStatus;
pub extern fn ConvertFromUnicodeToTextRun(iUnicodeToTextInfo: UnicodeToTextRunInfo, iUnicodeLen: ByteCount, iUnicodeStr: [*c]const UniChar, iControlFlags: OptionBits, iOffsetCount: ItemCount, iOffsetArray: [*c]const ByteOffset, oOffsetCount: [*c]ItemCount, oOffsetArray: [*c]ByteOffset, iOutputBufLen: ByteCount, oInputRead: [*c]ByteCount, oOutputLen: [*c]ByteCount, oOutputStr: LogicalAddress, iEncodingRunBufLen: ItemCount, oEncodingRunOutLen: [*c]ItemCount, oEncodingRuns: [*c]TextEncodingRun) OSStatus;
pub extern fn ConvertFromUnicodeToScriptCodeRun(iUnicodeToTextInfo: UnicodeToTextRunInfo, iUnicodeLen: ByteCount, iUnicodeStr: [*c]const UniChar, iControlFlags: OptionBits, iOffsetCount: ItemCount, iOffsetArray: [*c]const ByteOffset, oOffsetCount: [*c]ItemCount, oOffsetArray: [*c]ByteOffset, iOutputBufLen: ByteCount, oInputRead: [*c]ByteCount, oOutputLen: [*c]ByteCount, oOutputStr: LogicalAddress, iScriptRunBufLen: ItemCount, oScriptRunOutLen: [*c]ItemCount, oScriptCodeRuns: [*c]ScriptCodeRun) OSStatus;
pub extern fn TruncateForTextToUnicode(iTextToUnicodeInfo: ConstTextToUnicodeInfo, iSourceLen: ByteCount, iSourceStr: ConstLogicalAddress, iMaxLen: ByteCount, oTruncatedLen: [*c]ByteCount) OSStatus;
pub extern fn TruncateForUnicodeToText(iUnicodeToTextInfo: ConstUnicodeToTextInfo, iSourceLen: ByteCount, iSourceStr: [*c]const UniChar, iControlFlags: OptionBits, iMaxLen: ByteCount, oTruncatedLen: [*c]ByteCount) OSStatus;
pub extern fn ConvertFromPStringToUnicode(iTextToUnicodeInfo: TextToUnicodeInfo, iPascalStr: ConstStr255Param, iOutputBufLen: ByteCount, oUnicodeLen: [*c]ByteCount, oUnicodeStr: [*c]UniChar) OSStatus;
pub extern fn ConvertFromUnicodeToPString(iUnicodeToTextInfo: UnicodeToTextInfo, iUnicodeLen: ByteCount, iUnicodeStr: [*c]const UniChar, oPascalStr: [*c]u8) OSStatus;
pub extern fn CountUnicodeMappings(iFilter: OptionBits, iFindMapping: ConstUnicodeMappingPtr, oActualCount: [*c]ItemCount) OSStatus;
pub extern fn QueryUnicodeMappings(iFilter: OptionBits, iFindMapping: ConstUnicodeMappingPtr, iMaxCount: ItemCount, oActualCount: [*c]ItemCount, oReturnedMappings: [*c]UnicodeMapping) OSStatus;
pub extern fn SetFallbackUnicodeToText(iUnicodeToTextInfo: UnicodeToTextInfo, iFallback: UnicodeToTextFallbackUPP, iControlFlags: OptionBits, iInfoPtr: LogicalAddress) OSStatus;
pub extern fn SetFallbackUnicodeToTextRun(iUnicodeToTextRunInfo: UnicodeToTextRunInfo, iFallback: UnicodeToTextFallbackUPP, iControlFlags: OptionBits, iInfoPtr: LogicalAddress) OSStatus;
pub extern fn ResetTextToUnicodeInfo(ioTextToUnicodeInfo: TextToUnicodeInfo) OSStatus;
pub extern fn ResetUnicodeToTextInfo(ioUnicodeToTextInfo: UnicodeToTextInfo) OSStatus;
pub extern fn ResetUnicodeToTextRunInfo(ioUnicodeToTextRunInfo: UnicodeToTextRunInfo) OSStatus;
pub const ThreadState = UInt16;
pub const kReadyThreadState: c_int = 0;
pub const kStoppedThreadState: c_int = 1;
pub const kRunningThreadState: c_int = 2;
const enum_unnamed_750 = c_uint;
pub const ThreadTaskRef = ?*anyopaque;
pub const ThreadStyle = UInt32;
pub const kCooperativeThread: c_int = 1;
pub const kPreemptiveThread: c_int = 2;
const enum_unnamed_751 = c_uint;
pub const ThreadID = c_ulong;
pub const kNoThreadID: c_int = 0;
pub const kCurrentThreadID: c_int = 1;
pub const kApplicationThreadID: c_int = 2;
const enum_unnamed_752 = c_uint;
pub const ThreadOptions = UInt32;
pub const kNewSuspend: c_int = 1;
pub const kUsePremadeThread: c_int = 2;
pub const kCreateIfNeeded: c_int = 4;
pub const kFPUNotNeeded: c_int = 8;
pub const kExactMatchThread: c_int = 16;
const enum_unnamed_753 = c_uint;
pub const struct_SchedulerInfoRec = extern struct {
    InfoRecSize: UInt32,
    CurrentThreadID: ThreadID,
    SuggestedThreadID: ThreadID,
    InterruptedCoopThreadID: ThreadID,
};
pub const SchedulerInfoRec = struct_SchedulerInfoRec;
pub const SchedulerInfoRecPtr = [*c]SchedulerInfoRec;
pub const voidPtr = ?*anyopaque;
pub const ThreadEntryProcPtr = ?*const fn (?*anyopaque) callconv(.C) voidPtr;
pub const ThreadSchedulerProcPtr = ?*const fn (SchedulerInfoRecPtr) callconv(.C) ThreadID;
pub const ThreadSwitchProcPtr = ?*const fn (ThreadID, ?*anyopaque) callconv(.C) void;
pub const ThreadTerminationProcPtr = ?*const fn (ThreadID, ?*anyopaque) callconv(.C) void;
pub const DebuggerNewThreadProcPtr = ?*const fn (ThreadID) callconv(.C) void;
pub const DebuggerDisposeThreadProcPtr = ?*const fn (ThreadID) callconv(.C) void;
pub const DebuggerThreadSchedulerProcPtr = ?*const fn (SchedulerInfoRecPtr) callconv(.C) ThreadID;
pub const ThreadEntryUPP = ThreadEntryProcPtr;
pub const ThreadSchedulerUPP = ThreadSchedulerProcPtr;
pub const ThreadSwitchUPP = ThreadSwitchProcPtr;
pub const ThreadTerminationUPP = ThreadTerminationProcPtr;
pub const DebuggerNewThreadUPP = DebuggerNewThreadProcPtr;
pub const DebuggerDisposeThreadUPP = DebuggerDisposeThreadProcPtr;
pub const DebuggerThreadSchedulerUPP = DebuggerThreadSchedulerProcPtr;
pub extern fn NewThreadEntryUPP(userRoutine: ThreadEntryProcPtr) ThreadEntryUPP;
pub extern fn NewThreadSchedulerUPP(userRoutine: ThreadSchedulerProcPtr) ThreadSchedulerUPP;
pub extern fn NewThreadSwitchUPP(userRoutine: ThreadSwitchProcPtr) ThreadSwitchUPP;
pub extern fn NewThreadTerminationUPP(userRoutine: ThreadTerminationProcPtr) ThreadTerminationUPP;
pub extern fn NewDebuggerNewThreadUPP(userRoutine: DebuggerNewThreadProcPtr) DebuggerNewThreadUPP;
pub extern fn NewDebuggerDisposeThreadUPP(userRoutine: DebuggerDisposeThreadProcPtr) DebuggerDisposeThreadUPP;
pub extern fn NewDebuggerThreadSchedulerUPP(userRoutine: DebuggerThreadSchedulerProcPtr) DebuggerThreadSchedulerUPP;
pub extern fn DisposeThreadEntryUPP(userUPP: ThreadEntryUPP) void;
pub extern fn DisposeThreadSchedulerUPP(userUPP: ThreadSchedulerUPP) void;
pub extern fn DisposeThreadSwitchUPP(userUPP: ThreadSwitchUPP) void;
pub extern fn DisposeThreadTerminationUPP(userUPP: ThreadTerminationUPP) void;
pub extern fn DisposeDebuggerNewThreadUPP(userUPP: DebuggerNewThreadUPP) void;
pub extern fn DisposeDebuggerDisposeThreadUPP(userUPP: DebuggerDisposeThreadUPP) void;
pub extern fn DisposeDebuggerThreadSchedulerUPP(userUPP: DebuggerThreadSchedulerUPP) void;
pub extern fn InvokeThreadEntryUPP(threadParam: ?*anyopaque, userUPP: ThreadEntryUPP) voidPtr;
pub extern fn InvokeThreadSchedulerUPP(schedulerInfo: SchedulerInfoRecPtr, userUPP: ThreadSchedulerUPP) ThreadID;
pub extern fn InvokeThreadSwitchUPP(threadBeingSwitched: ThreadID, switchProcParam: ?*anyopaque, userUPP: ThreadSwitchUPP) void;
pub extern fn InvokeThreadTerminationUPP(threadTerminated: ThreadID, terminationProcParam: ?*anyopaque, userUPP: ThreadTerminationUPP) void;
pub extern fn InvokeDebuggerNewThreadUPP(threadCreated: ThreadID, userUPP: DebuggerNewThreadUPP) void;
pub extern fn InvokeDebuggerDisposeThreadUPP(threadDeleted: ThreadID, userUPP: DebuggerDisposeThreadUPP) void;
pub extern fn InvokeDebuggerThreadSchedulerUPP(schedulerInfo: SchedulerInfoRecPtr, userUPP: DebuggerThreadSchedulerUPP) ThreadID;
pub const ThreadEntryTPP = ThreadEntryUPP;
pub const ThreadSchedulerTPP = ThreadSchedulerUPP;
pub const ThreadSwitchTPP = ThreadSwitchUPP;
pub const ThreadTerminationTPP = ThreadTerminationUPP;
pub const DebuggerNewThreadTPP = DebuggerNewThreadUPP;
pub const DebuggerDisposeThreadTPP = DebuggerDisposeThreadUPP;
pub const DebuggerThreadSchedulerTPP = DebuggerThreadSchedulerUPP;
pub extern fn NewThread(threadStyle: ThreadStyle, threadEntry: ThreadEntryTPP, threadParam: ?*anyopaque, stackSize: Size, options: ThreadOptions, threadResult: [*c]?*anyopaque, threadMade: [*c]ThreadID) OSErr;
pub extern fn SetThreadScheduler(threadScheduler: ThreadSchedulerTPP) OSErr;
pub extern fn SetThreadSwitcher(thread: ThreadID, threadSwitcher: ThreadSwitchTPP, switchProcParam: ?*anyopaque, inOrOut: Boolean) OSErr;
pub extern fn SetThreadTerminator(thread: ThreadID, threadTerminator: ThreadTerminationTPP, terminationProcParam: ?*anyopaque) OSErr;
pub extern fn SetDebuggerNotificationProcs(notifyNewThread: DebuggerNewThreadTPP, notifyDisposeThread: DebuggerDisposeThreadTPP, notifyThreadScheduler: DebuggerThreadSchedulerTPP) OSErr;
pub extern fn CreateThreadPool(threadStyle: ThreadStyle, numToCreate: SInt16, stackSize: Size) OSErr;
pub extern fn GetDefaultThreadStackSize(threadStyle: ThreadStyle, stackSize: [*c]Size) OSErr;
pub extern fn ThreadCurrentStackSpace(thread: ThreadID, freeStack: [*c]ByteCount) OSErr;
pub extern fn DisposeThread(threadToDump: ThreadID, threadResult: ?*anyopaque, recycleThread: Boolean) OSErr;
pub extern fn YieldToThread(suggestedThread: ThreadID) OSErr;
pub extern fn YieldToAnyThread() OSErr;
pub extern fn GetCurrentThread(currentThreadID: [*c]ThreadID) OSErr;
pub extern fn GetThreadState(threadToGet: ThreadID, threadState: [*c]ThreadState) OSErr;
pub extern fn SetThreadState(threadToSet: ThreadID, newState: ThreadState, suggestedThread: ThreadID) OSErr;
pub extern fn SetThreadStateEndCritical(threadToSet: ThreadID, newState: ThreadState, suggestedThread: ThreadID) OSErr;
pub extern fn ThreadBeginCritical() OSErr;
pub extern fn ThreadEndCritical() OSErr;
pub extern fn GetThreadCurrentTaskRef(threadTRef: [*c]ThreadTaskRef) OSErr;
pub extern fn GetThreadStateGivenTaskRef(threadTRef: ThreadTaskRef, threadToGet: ThreadID, threadState: [*c]ThreadState) OSErr;
pub extern fn SetThreadReadyGivenTaskRef(threadTRef: ThreadTaskRef, threadToSet: ThreadID) OSErr;
pub const kOnSystemDisk: c_int = -32768;
pub const kOnAppropriateDisk: c_int = -32767;
pub const kSystemDomain: c_int = -32766;
pub const kLocalDomain: c_int = -32765;
pub const kNetworkDomain: c_int = -32764;
pub const kUserDomain: c_int = -32763;
pub const kClassicDomain: c_int = -32762;
pub const kFolderManagerLastDomain: c_int = -32760;
const enum_unnamed_754 = c_int;
pub const kLastDomainConstant: c_int = -32760;
const enum_unnamed_755 = c_int;
pub const kCreateFolder: c_int = 1;
pub const kDontCreateFolder: c_int = 0;
const enum_unnamed_756 = c_uint;
pub extern fn FindFolder(vRefNum: FSVolumeRefNum, folderType: OSType, createFolder: Boolean, foundVRefNum: [*c]FSVolumeRefNum, foundDirID: [*c]SInt32) OSErr;
pub extern fn ReleaseFolder(vRefNum: FSVolumeRefNum, folderType: OSType) OSErr;
pub extern fn FSFindFolder(vRefNum: FSVolumeRefNum, folderType: OSType, createFolder: Boolean, foundRef: [*c]FSRef) OSErr;
pub const kDesktopFolderType: c_int = 1684370283;
pub const kTrashFolderType: c_int = 1953657704;
pub const kWhereToEmptyTrashFolderType: c_int = 1701671028;
pub const kFontsFolderType: c_int = 1718578804;
pub const kPreferencesFolderType: c_int = 1886545254;
pub const kSystemPreferencesFolderType: c_int = 1936749158;
pub const kTemporaryFolderType: c_int = 1952804208;
pub const kChewableItemsFolderType: c_int = 1718382196;
pub const kTemporaryItemsInCacheDataFolderType: c_int = 1987341680;
pub const kApplicationsFolderType: c_int = 1634758771;
pub const kVolumeRootFolderType: c_int = 1919905652;
pub const kDomainTopLevelFolderType: c_int = 1685352304;
pub const kDomainLibraryFolderType: c_int = 1684826466;
pub const kUsersFolderType: c_int = 1970500211;
pub const kCurrentUserFolderType: c_int = 1668641650;
pub const kSharedUserDataFolderType: c_int = 1935958388;
const enum_unnamed_757 = c_uint;
pub const kDocumentsFolderType: c_int = 1685021555;
pub const kPictureDocumentsFolderType: c_int = 1885630307;
pub const kMovieDocumentsFolderType: c_int = 1835298659;
pub const kMusicDocumentsFolderType: c_uint = 3043258211;
pub const kInternetSitesFolderType: c_int = 1936290917;
pub const kPublicFolderType: c_int = 1886741090;
const enum_unnamed_758 = c_uint;
pub const kDropBoxFolderType: c_int = 1685221232;
const enum_unnamed_759 = c_uint;
pub const kSharedLibrariesFolderType: c_uint = 3295439202;
pub const kVoicesFolderType: c_int = 1719037795;
pub const kUtilitiesFolderType: c_int = 1970563524;
pub const kThemesFolderType: c_int = 1953000805;
pub const kFavoritesFolderType: c_int = 1717663347;
pub const kInternetSearchSitesFolderType: c_int = 1769173862;
pub const kInstallerLogsFolderType: c_int = 1768712038;
pub const kScriptsFolderType: c_int = 1935897284;
pub const kFolderActionsFolderType: c_int = 1717662566;
pub const kSpeakableItemsFolderType: c_int = 1936747369;
pub const kKeychainFolderType: c_int = 1801676910;
const enum_unnamed_760 = c_uint;
pub const kColorSyncFolderType: c_int = 1937337955;
pub const kColorSyncCMMFolderType: c_int = 1667460461;
pub const kColorSyncScriptingFolderType: c_int = 1668506482;
pub const kPrintersFolderType: c_int = 1768779890;
pub const kSpeechFolderType: c_int = 1936745320;
pub const kCarbonLibraryFolderType: c_int = 1667330658;
pub const kDocumentationFolderType: c_int = 1768842863;
pub const kISSDownloadsFolderType: c_int = 1769173860;
pub const kUserSpecificTmpFolderType: c_int = 1970564464;
pub const kCachedDataFolderType: c_int = 1667326824;
pub const kFrameworksFolderType: c_int = 1718772077;
pub const kPrivateFrameworksFolderType: c_int = 1885762157;
pub const kClassicDesktopFolderType: c_int = 1935962987;
pub const kSystemSoundsFolderType: c_int = 1936944740;
pub const kComponentsFolderType: c_int = 1668116580;
pub const kQuickTimeComponentsFolderType: c_int = 2003004784;
pub const kCoreServicesFolderType: c_int = 1668510326;
pub const kAudioSupportFolderType: c_int = 1633970543;
pub const kAudioPresetsFolderType: c_int = 1634759540;
pub const kAudioSoundsFolderType: c_int = 1634954852;
pub const kAudioSoundBanksFolderType: c_int = 1650552427;
pub const kAudioAlertSoundsFolderType: c_int = 1634497140;
pub const kAudioPlugInsFolderType: c_int = 1634757735;
pub const kAudioComponentsFolderType: c_int = 1633906032;
pub const kKernelExtensionsFolderType: c_int = 1801812084;
pub const kDirectoryServicesFolderType: c_int = 1685287542;
pub const kDirectoryServicesPlugInsFolderType: c_int = 1685089383;
pub const kInstallerReceiptsFolderType: c_int = 1919119476;
pub const kFileSystemSupportFolderType: c_int = 1718843763;
pub const kAppleShareSupportFolderType: c_int = 1936220530;
pub const kAppleShareAuthenticationFolderType: c_int = 1635087464;
pub const kMIDIDriversFolderType: c_int = 1835623529;
pub const kKeyboardLayoutsFolderType: c_int = 1802264953;
pub const kIndexFilesFolderType: c_int = 1768842360;
pub const kFindByContentIndexesFolderType: c_int = 1717724024;
pub const kManagedItemsFolderType: c_int = 1835101799;
pub const kBootTimeStartupItemsFolderType: c_int = 1701671034;
pub const kAutomatorWorkflowsFolderType: c_int = 1718382455;
pub const kAutosaveInformationFolderType: c_int = 1634951542;
pub const kSpotlightSavedSearchesFolderType: c_int = 1936748404;
pub const kSpotlightImportersFolderType: c_int = 1936289136;
pub const kSpotlightMetadataCacheFolderType: c_int = 1935893352;
pub const kInputManagersFolderType: c_int = 1768845428;
pub const kInputMethodsFolderType: c_int = 1768845414;
pub const kLibraryAssistantsFolderType: c_int = 1634956396;
pub const kAudioDigidesignFolderType: c_int = 1633970535;
pub const kAudioVSTFolderType: c_int = 1635152756;
pub const kColorPickersFolderType: c_int = 1668311922;
pub const kCompositionsFolderType: c_int = 1668116595;
pub const kFontCollectionsFolderType: c_int = 1718510444;
pub const kiMovieFolderType: c_int = 1768779638;
pub const kiMoviePlugInsFolderType: c_int = 1768779881;
pub const kiMovieSoundEffectsFolderType: c_int = 1768780645;
pub const kDownloadsFolderType: c_int = 1685026670;
const enum_unnamed_761 = c_uint;
pub const kColorSyncProfilesFolderType: c_int = 1886547814;
pub const kApplicationSupportFolderType: c_int = 1634956656;
pub const kTextEncodingsFolderType: c_uint = 3295962488;
pub const kPrinterDescriptionFolderType: c_int = 1886413926;
pub const kPrinterDriverFolderType: c_uint = 3295703652;
pub const kScriptingAdditionsFolderType: c_uint = 3295896434;
const enum_unnamed_762 = c_uint;
pub const kClassicPreferencesFolderType: c_int = 1668313702;
const enum_unnamed_763 = c_uint;
pub const kQuickLookFolderType: c_int = 1902928747;
const enum_unnamed_764 = c_uint;
pub const kServicesFolderType: c_int = 1937138547;
const enum_unnamed_765 = c_uint;
pub const kSystemFolderType: c_int = 1835098995;
pub const kSystemDesktopFolderType: c_int = 1935962987;
pub const kSystemTrashFolderType: c_int = 1937011315;
pub const kPrintMonitorDocsFolderType: c_int = 1886547572;
pub const kALMModulesFolderType: c_int = 2002873451;
pub const kALMPreferencesFolderType: c_int = 1953655152;
pub const kALMLocationsFolderType: c_int = 1717660780;
pub const kAppleExtrasFolderType: c_int = 1634040004;
pub const kContextualMenuItemsFolderType: c_int = 1668116085;
pub const kMacOSReadMesFolderType: c_int = 1836020420;
pub const kStartupFolderType: c_int = 1937011316;
pub const kShutdownFolderType: c_int = 1936221286;
pub const kAppleMenuFolderType: c_int = 1634561653;
pub const kControlPanelFolderType: c_int = 1668575852;
pub const kSystemControlPanelFolderType: c_int = 1935897708;
pub const kExtensionFolderType: c_int = 1702392942;
pub const kExtensionDisabledFolderType: c_int = 1702392900;
pub const kControlPanelDisabledFolderType: c_int = 1668575812;
pub const kSystemExtensionDisabledFolderType: c_int = 1835098948;
pub const kStartupItemsDisabledFolderType: c_int = 1937011268;
pub const kShutdownItemsDisabledFolderType: c_int = 1936221252;
pub const kAssistantsFolderType: c_int = 1634956484;
pub const kStationeryFolderType: c_int = 1868854132;
pub const kOpenDocFolderType: c_int = 1868853092;
pub const kOpenDocShellPlugInsFolderType: c_int = 1868854128;
pub const kEditorsFolderType: c_int = 1868850532;
pub const kOpenDocEditorsFolderType: c_uint = 3295634534;
pub const kOpenDocLibrariesFolderType: c_int = 1868852322;
pub const kGenEditorsFolderType: c_uint = 3294979177;
pub const kHelpFolderType: c_uint = 3295177840;
pub const kInternetPlugInFolderType: c_uint = 3295569268;
pub const kModemScriptsFolderType: c_uint = 3295506276;
pub const kControlStripModulesFolderType: c_int = 1935959414;
pub const kInternetFolderType: c_int = 1768846532;
pub const kAppearanceFolderType: c_int = 1634758770;
pub const kSoundSetsFolderType: c_int = 1936614515;
pub const kDesktopPicturesFolderType: c_int = 1685352644;
pub const kFindSupportFolderType: c_int = 1718510707;
pub const kRecentApplicationsFolderType: c_int = 1918988400;
pub const kRecentDocumentsFolderType: c_int = 1919184739;
pub const kRecentServersFolderType: c_int = 1920169586;
pub const kLauncherItemsFolderType: c_int = 1818326382;
pub const kQuickTimeExtensionsFolderType: c_int = 1903453560;
pub const kDisplayExtensionsFolderType: c_int = 1685287020;
pub const kMultiprocessingFolderType: c_int = 1836087398;
pub const kPrintingPlugInsFolderType: c_int = 1886415975;
pub const kAppleshareAutomountServerAliasesFolderType: c_int = 1936881348;
pub const kVolumeSettingsFolderType: c_int = 1987274340;
pub const kPreMacOS91ApplicationsFolderType: c_uint = 2356179059;
pub const kPreMacOS91InstallerLogsFolderType: c_uint = 2490132326;
pub const kPreMacOS91AssistantsFolderType: c_uint = 2356376772;
pub const kPreMacOS91UtilitiesFolderType: c_uint = 2675206596;
pub const kPreMacOS91AppleExtrasFolderType: c_uint = 2355460292;
pub const kPreMacOS91MacOSReadMesFolderType: c_uint = 3043979972;
pub const kPreMacOS91InternetFolderType: c_uint = 2490266820;
pub const kPreMacOS91AutomountedServersFolderType: c_uint = 2809296580;
pub const kPreMacOS91StationeryFolderType: c_uint = 3211031412;
pub const kLocalesFolderType: c_uint = 3295440739;
pub const kFindByContentPluginsFolderType: c_int = 1717724016;
pub const kFindByContentFolderType: c_int = 1717724006;
const enum_unnamed_766 = c_uint;
pub const kMagicTemporaryItemsFolderType: c_int = 1836346736;
pub const kTemporaryItemsInUserDomainFolderType: c_int = 1952804209;
pub const kCurrentUserRemoteFolderLocation: c_int = 1920299878;
pub const kCurrentUserRemoteFolderType: c_int = 1920299890;
const enum_unnamed_767 = c_uint;
pub const kDeveloperDocsFolderType: c_int = 1684303715;
pub const kDeveloperHelpFolderType: c_int = 1684371048;
pub const kDeveloperFolderType: c_int = 1684371046;
pub const kDeveloperApplicationsFolderType: c_int = 1684107376;
const enum_unnamed_768 = c_uint;
pub const kCreateFolderAtBoot: c_int = 2;
pub const kCreateFolderAtBootBit: c_int = 1;
pub const kFolderCreatedInvisible: c_int = 4;
pub const kFolderCreatedInvisibleBit: c_int = 2;
pub const kFolderCreatedNameLocked: c_int = 8;
pub const kFolderCreatedNameLockedBit: c_int = 3;
pub const kFolderCreatedAdminPrivs: c_int = 16;
pub const kFolderCreatedAdminPrivsBit: c_int = 4;
const enum_unnamed_769 = c_uint;
pub const kFolderInUserFolder: c_int = 32;
pub const kFolderInUserFolderBit: c_int = 5;
pub const kFolderTrackedByAlias: c_int = 64;
pub const kFolderTrackedByAliasBit: c_int = 6;
pub const kFolderInRemoteUserFolderIfAvailable: c_int = 128;
pub const kFolderInRemoteUserFolderIfAvailableBit: c_int = 7;
pub const kFolderNeverMatchedInIdentifyFolder: c_int = 256;
pub const kFolderNeverMatchedInIdentifyFolderBit: c_int = 8;
pub const kFolderMustStayOnSameVolume: c_int = 512;
pub const kFolderMustStayOnSameVolumeBit: c_int = 9;
pub const kFolderManagerFolderInMacOS9FolderIfMacOSXIsInstalledMask: c_int = 1024;
pub const kFolderManagerFolderInMacOS9FolderIfMacOSXIsInstalledBit: c_int = 10;
pub const kFolderInLocalOrRemoteUserFolder: c_int = 160;
pub const kFolderManagerNotCreatedOnRemoteVolumesBit: c_int = 11;
pub const kFolderManagerNotCreatedOnRemoteVolumesMask: c_int = 2048;
pub const kFolderManagerNewlyCreatedFolderIsLocalizedBit: c_int = 12;
pub const kFolderManagerNewlyCreatedFolderShouldHaveDotLocalizedCreatedWithinMask: c_int = 4096;
const enum_unnamed_770 = c_uint;
pub const FolderDescFlags = UInt32;
pub const kRelativeFolder: c_int = 1919249510;
pub const kRedirectedRelativeFolder: c_int = 1920099692;
pub const kSpecialFolder: c_int = 1936745318;
const enum_unnamed_771 = c_uint;
pub const FolderClass = OSType;
pub const kBlessedFolder: c_int = 1651274598;
pub const kRootFolder: c_int = 1919906918;
const enum_unnamed_772 = c_uint;
pub const kCurrentUserFolderLocation: c_int = 1668641638;
const enum_unnamed_773 = c_uint;
pub const kDictionariesFolderType: c_int = 1684628340;
pub const kLogsFolderType: c_int = 1819240307;
pub const kPreferencePanesFolderType: c_int = 1886413166;
const enum_unnamed_774 = c_uint;
pub const kWidgetsFolderType: c_int = 2003068788;
pub const kScreenSaversFolderType: c_int = 1935897198;
const enum_unnamed_775 = c_uint;
pub const FolderType = OSType;
pub const FolderLocation = OSType;
pub const struct_FolderDesc = extern struct {
    descSize: Size,
    foldType: FolderType,
    flags: FolderDescFlags,
    foldClass: FolderClass,
    foldLocation: FolderType,
    badgeSignature: OSType,
    badgeType: OSType,
    reserved: UInt32,
    name: StrFileName,
};
pub const FolderDesc = struct_FolderDesc;
pub const FolderDescPtr = [*c]FolderDesc;
pub const RoutingFlags = UInt32;
pub const struct_FolderRouting = extern struct {
    descSize: Size,
    fileType: OSType,
    routeFromFolder: FolderType,
    routeToFolder: FolderType,
    flags: RoutingFlags,
};
pub const FolderRouting = struct_FolderRouting;
pub const FolderRoutingPtr = [*c]FolderRouting;
pub extern fn AddFolderDescriptor(foldType: FolderType, flags: FolderDescFlags, foldClass: FolderClass, foldLocation: FolderLocation, badgeSignature: OSType, badgeType: OSType, name: ConstStrFileNameParam, replaceFlag: Boolean) OSErr;
pub extern fn GetFolderTypes(requestedTypeCount: UInt32, totalTypeCount: [*c]UInt32, theTypes: [*c]FolderType) OSErr;
pub extern fn RemoveFolderDescriptor(foldType: FolderType) OSErr;
pub extern fn GetFolderNameUnicode(vRefNum: FSVolumeRefNum, foldType: OSType, foundVRefNum: [*c]FSVolumeRefNum, name: [*c]HFSUniStr255) OSStatus;
pub extern fn InvalidateFolderDescriptorCache(vRefNum: FSVolumeRefNum, dirID: SInt32) OSErr;
pub extern fn IdentifyFolder(vRefNum: FSVolumeRefNum, dirID: SInt32, foldType: [*c]FolderType) OSErr;
pub extern fn FSDetermineIfRefIsEnclosedByFolder(domainOrVRefNum: FSVolumeRefNum, folderType: OSType, inRef: [*c]const FSRef, outResult: [*c]Boolean) OSErr;
pub extern fn DetermineIfPathIsEnclosedByFolder(domainOrVRefNum: FSVolumeRefNum, folderType: OSType, utf8Path: [*c]const UInt8, pathIsRealPath: Boolean, outResult: [*c]Boolean) OSErr;
pub const FolderManagerNotificationProcPtr = ?*const fn (OSType, ?*anyopaque, ?*anyopaque) callconv(.C) OSStatus;
pub const FolderManagerNotificationUPP = FolderManagerNotificationProcPtr;
pub extern fn NewFolderManagerNotificationUPP(userRoutine: FolderManagerNotificationProcPtr) FolderManagerNotificationUPP;
pub extern fn DisposeFolderManagerNotificationUPP(userUPP: FolderManagerNotificationUPP) void;
pub extern fn InvokeFolderManagerNotificationUPP(message: OSType, arg: ?*anyopaque, userRefCon: ?*anyopaque, userUPP: FolderManagerNotificationUPP) OSStatus;
pub extern fn Microseconds(microTickCount: [*c]UnsignedWide) void;
pub const kTMTaskActive: c_int = 32768;
const enum_unnamed_776 = c_uint;
pub const TMTask = struct_TMTask;
pub const TMTaskPtr = [*c]TMTask;
pub const TimerProcPtr = ?*const fn (TMTaskPtr) callconv(.C) void;
pub const TimerUPP = TimerProcPtr;
pub const struct_TMTask = extern struct {
    qLink: QElemPtr,
    qType: c_short,
    tmAddr: TimerUPP,
    tmCount: c_long,
    tmWakeUp: c_long,
    tmReserved: c_long,
};
pub extern fn InsTime(tmTaskPtr: QElemPtr) void;
pub extern fn InsXTime(tmTaskPtr: QElemPtr) void;
pub extern fn PrimeTime(tmTaskPtr: QElemPtr, count: c_long) void;
pub extern fn RmvTime(tmTaskPtr: QElemPtr) void;
pub extern fn InstallTimeTask(tmTaskPtr: QElemPtr) OSErr;
pub extern fn InstallXTimeTask(tmTaskPtr: QElemPtr) OSErr;
pub extern fn PrimeTimeTask(tmTaskPtr: QElemPtr, count: c_long) OSErr;
pub extern fn RemoveTimeTask(tmTaskPtr: QElemPtr) OSErr;
pub extern fn NewTimerUPP(userRoutine: TimerProcPtr) TimerUPP;
pub extern fn DisposeTimerUPP(userUPP: TimerUPP) void;
pub extern fn InvokeTimerUPP(tmTaskPtr: TMTaskPtr, userUPP: TimerUPP) void;
pub extern fn MPGetNextCpuID(owningCoherenceID: MPCoherenceID, cpuID: [*c]MPCpuID) OSStatus;
pub extern fn MPGetNextTaskID(owningProcessID: MPProcessID, taskID: [*c]MPTaskID) OSStatus;
pub const kMPQueueInfoVersion: c_int = 262145;
pub const kMPSemaphoreInfoVersion: c_int = 327681;
pub const kMPEventInfoVersion: c_int = 589825;
pub const kMPCriticalRegionInfoVersion: c_int = 393217;
pub const kMPNotificationInfoVersion: c_int = 786433;
pub const kMPAddressSpaceInfoVersion: c_int = 524289;
const enum_unnamed_777 = c_uint;
pub const struct_MPQueueInfo = extern struct {
    version: PBVersion,
    processID: MPProcessID,
    queueName: OSType,
    nWaiting: ItemCount,
    waitingTaskID: MPTaskID,
    nMessages: ItemCount,
    nReserved: ItemCount,
    p1: ?*anyopaque,
    p2: ?*anyopaque,
    p3: ?*anyopaque,
};
pub const MPQueueInfo = struct_MPQueueInfo;
pub const struct_MPSemaphoreInfo = extern struct {
    version: PBVersion,
    processID: MPProcessID,
    semaphoreName: OSType,
    nWaiting: ItemCount,
    waitingTaskID: MPTaskID,
    maximum: ItemCount,
    count: ItemCount,
};
pub const MPSemaphoreInfo = struct_MPSemaphoreInfo;
pub const struct_MPEventInfo = extern struct {
    version: PBVersion,
    processID: MPProcessID,
    eventName: OSType,
    nWaiting: ItemCount,
    waitingTaskID: MPTaskID,
    events: MPEventFlags,
};
pub const MPEventInfo = struct_MPEventInfo;
pub const struct_MPCriticalRegionInfo = extern struct {
    version: PBVersion,
    processID: MPProcessID,
    regionName: OSType,
    nWaiting: ItemCount,
    waitingTaskID: MPTaskID,
    owningTask: MPTaskID,
    count: ItemCount,
};
pub const MPCriticalRegionInfo = struct_MPCriticalRegionInfo;
pub const struct_MPNotificationInfo = extern struct {
    version: PBVersion,
    processID: MPProcessID,
    notificationName: OSType,
    queueID: MPQueueID,
    p1: ?*anyopaque,
    p2: ?*anyopaque,
    p3: ?*anyopaque,
    eventID: MPEventID,
    events: MPEventFlags,
    semaphoreID: MPSemaphoreID,
};
pub const MPNotificationInfo = struct_MPNotificationInfo;
pub const struct_MPAddressSpaceInfo = extern struct {
    version: PBVersion,
    processID: MPProcessID,
    groupID: MPCoherenceID,
    nTasks: ItemCount,
    vsid: [16]UInt32,
};
pub const MPAddressSpaceInfo = struct_MPAddressSpaceInfo;
pub extern fn LMGetBootDrive() SInt16;
pub extern fn LMSetBootDrive(value: SInt16) void;
pub extern fn LMGetApFontID() SInt16;
pub extern fn LMSetApFontID(value: SInt16) void;
pub extern fn LMGetSysMap() SInt16;
pub extern fn LMSetSysMap(value: SInt16) void;
pub extern fn LMGetResLoad() UInt8;
pub extern fn LMSetResLoad(value: UInt8) void;
pub extern fn LMGetResErr() SInt16;
pub extern fn LMSetResErr(value: SInt16) void;
pub extern fn LMGetTmpResLoad() UInt8;
pub extern fn LMSetTmpResLoad(value: UInt8) void;
pub extern fn LMGetIntlSpec() Ptr;
pub extern fn LMSetIntlSpec(value: Ptr) void;
pub extern fn LMSetSysFontFam(value: SInt16) void;
pub extern fn LMGetSysFontSize() SInt16;
pub extern fn LMSetSysFontSize(value: SInt16) void;
pub const AVLVisitStage = UInt16;
pub const kAVLPreOrder: c_int = 0;
pub const kAVLInOrder: c_int = 1;
pub const kAVLPostOrder: c_int = 2;
const enum_unnamed_778 = c_uint;
pub const AVLOrder = UInt16;
pub const kLeftToRight: c_int = 0;
pub const kRightToLeft: c_int = 1;
const enum_unnamed_779 = c_uint;
pub const AVLNodeType = UInt16;
pub const kAVLIsTree: c_int = 0;
pub const kAVLIsLeftBranch: c_int = 1;
pub const kAVLIsRightBranch: c_int = 2;
pub const kAVLIsLeaf: c_int = 3;
pub const kAVLNullNode: c_int = 4;
const enum_unnamed_780 = c_uint;
pub const errItemAlreadyInTree: c_int = -960;
pub const errNotValidTree: c_int = -961;
pub const errItemNotFoundInTree: c_int = -962;
pub const errCanNotInsertWhileWalkProcInProgress: c_int = -963;
pub const errTreeIsLocked: c_int = -964;
const enum_unnamed_781 = c_int;
pub const struct_AVLTreeStruct = extern struct {
    signature: OSType,
    privateStuff: [8]c_ulong,
};
pub const AVLTreeStruct = struct_AVLTreeStruct;
pub const AVLTreePtr = [*c]AVLTreeStruct;
pub const AVLCompareItemsProcPtr = ?*const fn (AVLTreePtr, ?*const anyopaque, ?*const anyopaque, AVLNodeType) callconv(.C) SInt32;
pub const AVLItemSizeProcPtr = ?*const fn (AVLTreePtr, ?*const anyopaque) callconv(.C) ByteCount;
pub const AVLDisposeItemProcPtr = ?*const fn (AVLTreePtr, ?*const anyopaque) callconv(.C) void;
pub const AVLWalkProcPtr = ?*const fn (AVLTreePtr, ?*const anyopaque, AVLVisitStage, AVLNodeType, UInt32, SInt32, ?*anyopaque) callconv(.C) OSErr;
pub const AVLCompareItemsUPP = AVLCompareItemsProcPtr;
pub const AVLItemSizeUPP = AVLItemSizeProcPtr;
pub const AVLDisposeItemUPP = AVLDisposeItemProcPtr;
pub const AVLWalkUPP = AVLWalkProcPtr;
pub extern fn NewAVLCompareItemsUPP(userRoutine: AVLCompareItemsProcPtr) AVLCompareItemsUPP;
pub extern fn NewAVLItemSizeUPP(userRoutine: AVLItemSizeProcPtr) AVLItemSizeUPP;
pub extern fn NewAVLDisposeItemUPP(userRoutine: AVLDisposeItemProcPtr) AVLDisposeItemUPP;
pub extern fn NewAVLWalkUPP(userRoutine: AVLWalkProcPtr) AVLWalkUPP;
pub extern fn DisposeAVLCompareItemsUPP(userUPP: AVLCompareItemsUPP) void;
pub extern fn DisposeAVLItemSizeUPP(userUPP: AVLItemSizeUPP) void;
pub extern fn DisposeAVLDisposeItemUPP(userUPP: AVLDisposeItemUPP) void;
pub extern fn DisposeAVLWalkUPP(userUPP: AVLWalkUPP) void;
pub extern fn InvokeAVLCompareItemsUPP(tree: AVLTreePtr, @"i1": ?*const anyopaque, @"i2": ?*const anyopaque, nd_typ: AVLNodeType, userUPP: AVLCompareItemsUPP) SInt32;
pub extern fn InvokeAVLItemSizeUPP(tree: AVLTreePtr, itemPtr: ?*const anyopaque, userUPP: AVLItemSizeUPP) ByteCount;
pub extern fn InvokeAVLDisposeItemUPP(tree: AVLTreePtr, dataP: ?*const anyopaque, userUPP: AVLDisposeItemUPP) void;
pub extern fn InvokeAVLWalkUPP(tree: AVLTreePtr, dataPtr: ?*const anyopaque, visitStage: AVLVisitStage, node: AVLNodeType, level: UInt32, balance: SInt32, refCon: ?*anyopaque, userUPP: AVLWalkUPP) OSErr;
pub const struct_PEFContainerHeader = extern struct {
    tag1: OSType,
    tag2: OSType,
    architecture: OSType,
    formatVersion: UInt32,
    dateTimeStamp: UInt32,
    oldDefVersion: UInt32,
    oldImpVersion: UInt32,
    currentVersion: UInt32,
    sectionCount: UInt16,
    instSectionCount: UInt16,
    reservedA: UInt32,
};
pub const PEFContainerHeader = struct_PEFContainerHeader;
pub const kPEFTag1: c_int = 1248819489;
pub const kPEFTag2: c_int = 1885693542;
pub const kPEFVersion: c_int = 1;
const enum_unnamed_782 = c_uint;
pub const kPEFFirstSectionHeaderOffset: c_int = 40;
const enum_unnamed_783 = c_uint;
pub const struct_PEFSectionHeader = extern struct {
    nameOffset: SInt32,
    defaultAddress: UInt32,
    totalLength: UInt32,
    unpackedLength: UInt32,
    containerLength: UInt32,
    containerOffset: UInt32,
    sectionKind: UInt8,
    shareKind: UInt8,
    alignment: UInt8,
    reservedA: UInt8,
};
pub const PEFSectionHeader = struct_PEFSectionHeader;
pub const kPEFCodeSection: c_int = 0;
pub const kPEFUnpackedDataSection: c_int = 1;
pub const kPEFPackedDataSection: c_int = 2;
pub const kPEFConstantSection: c_int = 3;
pub const kPEFExecDataSection: c_int = 6;
pub const kPEFLoaderSection: c_int = 4;
pub const kPEFDebugSection: c_int = 5;
pub const kPEFExceptionSection: c_int = 7;
pub const kPEFTracebackSection: c_int = 8;
const enum_unnamed_784 = c_uint;
pub const kPEFProcessShare: c_int = 1;
pub const kPEFGlobalShare: c_int = 4;
pub const kPEFProtectedShare: c_int = 5;
const enum_unnamed_785 = c_uint;
pub const kPEFPkDataZero: c_int = 0;
pub const kPEFPkDataBlock: c_int = 1;
pub const kPEFPkDataRepeat: c_int = 2;
pub const kPEFPkDataRepeatBlock: c_int = 3;
pub const kPEFPkDataRepeatZero: c_int = 4;
const enum_unnamed_786 = c_uint;
pub const kPEFPkDataOpcodeShift: c_int = 5;
pub const kPEFPkDataCount5Mask: c_int = 31;
pub const kPEFPkDataMaxCount5: c_int = 31;
pub const kPEFPkDataVCountShift: c_int = 7;
pub const kPEFPkDataVCountMask: c_int = 127;
pub const kPEFPkDataVCountEndMask: c_int = 128;
const enum_unnamed_787 = c_uint;
pub const struct_PEFLoaderInfoHeader = extern struct {
    mainSection: SInt32,
    mainOffset: UInt32,
    initSection: SInt32,
    initOffset: UInt32,
    termSection: SInt32,
    termOffset: UInt32,
    importedLibraryCount: UInt32,
    totalImportedSymbolCount: UInt32,
    relocSectionCount: UInt32,
    relocInstrOffset: UInt32,
    loaderStringsOffset: UInt32,
    exportHashOffset: UInt32,
    exportHashTablePower: UInt32,
    exportedSymbolCount: UInt32,
};
pub const PEFLoaderInfoHeader = struct_PEFLoaderInfoHeader;
pub const struct_PEFImportedLibrary = extern struct {
    nameOffset: UInt32,
    oldImpVersion: UInt32,
    currentVersion: UInt32,
    importedSymbolCount: UInt32,
    firstImportedSymbol: UInt32,
    options: UInt8,
    reservedA: UInt8,
    reservedB: UInt16,
};
pub const PEFImportedLibrary = struct_PEFImportedLibrary;
pub const kPEFWeakImportLibMask: c_int = 64;
pub const kPEFInitLibBeforeMask: c_int = 128;
const enum_unnamed_788 = c_uint;
pub const struct_PEFImportedSymbol = extern struct {
    classAndName: UInt32,
};
pub const PEFImportedSymbol = struct_PEFImportedSymbol;
pub const kPEFImpSymClassShift: c_int = 24;
pub const kPEFImpSymNameOffsetMask: c_int = 16777215;
pub const kPEFImpSymMaxNameOffset: c_int = 16777215;
const enum_unnamed_789 = c_uint;
pub const kPEFCodeSymbol: c_int = 0;
pub const kPEFDataSymbol: c_int = 1;
pub const kPEFTVectorSymbol: c_int = 2;
pub const kPEFTOCSymbol: c_int = 3;
pub const kPEFGlueSymbol: c_int = 4;
pub const kPEFUndefinedSymbol: c_int = 15;
pub const kPEFWeakImportSymMask: c_int = 128;
const enum_unnamed_790 = c_uint;
pub const struct_PEFExportedSymbolHashSlot = extern struct {
    countAndStart: UInt32,
};
pub const PEFExportedSymbolHashSlot = struct_PEFExportedSymbolHashSlot;
pub const kPEFHashSlotSymCountShift: c_int = 18;
pub const kPEFHashSlotFirstKeyMask: c_int = 262143;
pub const kPEFHashSlotMaxSymbolCount: c_int = 16383;
pub const kPEFHashSlotMaxKeyIndex: c_int = 262143;
const enum_unnamed_791 = c_uint;
pub const struct_PEFSplitHashWord = extern struct {
    nameLength: UInt16,
    hashValue: UInt16,
};
pub const PEFSplitHashWord = struct_PEFSplitHashWord;
const union_unnamed_792 = extern union {
    fullHashWord: UInt32,
    splitHashWord: PEFSplitHashWord,
};
pub const struct_PEFExportedSymbolKey = extern struct {
    u: union_unnamed_792,
};
pub const PEFExportedSymbolKey = struct_PEFExportedSymbolKey;
pub const kPEFHashLengthShift: c_int = 16;
pub const kPEFHashValueMask: c_int = 65535;
pub const kPEFHashMaxLength: c_int = 65535;
const enum_unnamed_793 = c_uint;
pub const struct_PEFExportedSymbol = extern struct {
    classAndName: UInt32,
    symbolValue: UInt32,
    sectionIndex: SInt16,
};
pub const PEFExportedSymbol = struct_PEFExportedSymbol;
pub const kPEFExpSymClassShift: c_int = 24;
pub const kPEFExpSymNameOffsetMask: c_int = 16777215;
pub const kPEFExpSymMaxNameOffset: c_int = 16777215;
const enum_unnamed_794 = c_uint;
pub const kPEFAbsoluteExport: c_int = -2;
pub const kPEFReexportedImport: c_int = -3;
const enum_unnamed_795 = c_int;
pub const PEFRelocChunk = UInt16;
pub const struct_PEFLoaderRelocationHeader = extern struct {
    sectionIndex: UInt16,
    reservedA: UInt16,
    relocCount: UInt32,
    firstRelocOffset: UInt32,
};
pub const PEFLoaderRelocationHeader = struct_PEFLoaderRelocationHeader;
pub const kPEFRelocBasicOpcodeRange: c_int = 128;
const enum_unnamed_796 = c_uint;
pub const kPEFRelocBySectDWithSkip: c_int = 0;
pub const kPEFRelocBySectC: c_int = 32;
pub const kPEFRelocBySectD: c_int = 33;
pub const kPEFRelocTVector12: c_int = 34;
pub const kPEFRelocTVector8: c_int = 35;
pub const kPEFRelocVTable8: c_int = 36;
pub const kPEFRelocImportRun: c_int = 37;
pub const kPEFRelocSmByImport: c_int = 48;
pub const kPEFRelocSmSetSectC: c_int = 49;
pub const kPEFRelocSmSetSectD: c_int = 50;
pub const kPEFRelocSmBySection: c_int = 51;
pub const kPEFRelocIncrPosition: c_int = 64;
pub const kPEFRelocSmRepeat: c_int = 72;
pub const kPEFRelocSetPosition: c_int = 80;
pub const kPEFRelocLgByImport: c_int = 82;
pub const kPEFRelocLgRepeat: c_int = 88;
pub const kPEFRelocLgSetOrBySection: c_int = 90;
pub const kPEFRelocUndefinedOpcode: c_int = 255;
const enum_unnamed_797 = c_uint;
pub const kPEFRelocLgBySectionSubopcode: c_int = 0;
pub const kPEFRelocLgSetSectCSubopcode: c_int = 1;
pub const kPEFRelocLgSetSectDSubopcode: c_int = 2;
const enum_unnamed_798 = c_uint;
pub const kPEFRelocWithSkipMaxSkipCount: c_int = 255;
pub const kPEFRelocWithSkipMaxRelocCount: c_int = 63;
const enum_unnamed_799 = c_uint;
pub const kPEFRelocRunMaxRunLength: c_int = 512;
const enum_unnamed_800 = c_uint;
pub const kPEFRelocSmIndexMaxIndex: c_int = 511;
const enum_unnamed_801 = c_uint;
pub const kPEFRelocIncrPositionMaxOffset: c_int = 4096;
const enum_unnamed_802 = c_uint;
pub const kPEFRelocSmRepeatMaxChunkCount: c_int = 16;
pub const kPEFRelocSmRepeatMaxRepeatCount: c_int = 256;
const enum_unnamed_803 = c_uint;
pub const kPEFRelocSetPosMaxOffset: c_int = 67108863;
const enum_unnamed_804 = c_uint;
pub const kPEFRelocLgByImportMaxIndex: c_int = 67108863;
const enum_unnamed_805 = c_uint;
pub const kPEFRelocLgRepeatMaxChunkCount: c_int = 16;
pub const kPEFRelocLgRepeatMaxRepeatCount: c_int = 4194303;
const enum_unnamed_806 = c_uint;
pub const kPEFRelocLgSetOrBySectionMaxIndex: c_int = 4194303;
const enum_unnamed_807 = c_uint;
pub const struct_XLibContainerHeader = extern struct {
    tag1: OSType,
    tag2: OSType,
    currentFormat: UInt32,
    containerStringsOffset: UInt32,
    exportHashOffset: UInt32,
    exportKeyOffset: UInt32,
    exportSymbolOffset: UInt32,
    exportNamesOffset: UInt32,
    exportHashTablePower: UInt32,
    exportedSymbolCount: UInt32,
    fragNameOffset: UInt32,
    fragNameLength: UInt32,
    dylibPathOffset: UInt32,
    dylibPathLength: UInt32,
    cpuFamily: OSType,
    cpuModel: OSType,
    dateTimeStamp: UInt32,
    currentVersion: UInt32,
    oldDefVersion: UInt32,
    oldImpVersion: UInt32,
};
pub const XLibContainerHeader = struct_XLibContainerHeader;
pub const kXLibTag1: c_int = -263364253;
pub const kVLibTag2: c_int = 1447848290;
pub const kBLibTag2: c_int = 1112303970;
pub const kXLibVersion: c_int = 1;
const enum_unnamed_808 = c_int;
pub const XLibExportedSymbolHashSlot = PEFExportedSymbolHashSlot;
pub const XLibExportedSymbolKey = PEFExportedSymbolKey;
pub const struct_XLibExportedSymbol = extern struct {
    classAndName: UInt32,
    bpOffset: UInt32,
};
pub const XLibExportedSymbol = struct_XLibExportedSymbol;
pub const kHFSSigWord: c_int = 16964;
pub const kHFSPlusSigWord: c_int = 18475;
pub const kHFSXSigWord: c_int = 18520;
pub const kHFSPlusVersion: c_int = 4;
pub const kHFSXVersion: c_int = 5;
pub const kHFSPlusMountVersion: c_int = 825241136;
pub const kHFSJMountVersion: c_int = 1212568394;
pub const kFSKMountVersion: c_int = 1179863841;
const enum_unnamed_809 = c_uint;
pub const kHardLinkFileType: c_int = 1751936619;
pub const kHFSPlusCreator: c_int = 1751544619;
const enum_unnamed_810 = c_uint;
pub const kSymLinkFileType: c_int = 1936485995;
pub const kSymLinkCreator: c_int = 1919443312;
const enum_unnamed_811 = c_uint;
pub const kHFSMaxVolumeNameChars: c_int = 27;
pub const kHFSMaxFileNameChars: c_int = 31;
pub const kHFSPlusMaxFileNameChars: c_int = 255;
const enum_unnamed_812 = c_uint;
pub const struct_HFSExtentKey = packed struct {
    keyLength: u_int8_t,
    forkType: u_int8_t,
    fileID: u_int32_t,
    startBlock: u_int16_t,
};
pub const HFSExtentKey = struct_HFSExtentKey;
pub const struct_HFSPlusExtentKey = packed struct {
    keyLength: u_int16_t,
    forkType: u_int8_t,
    pad: u_int8_t,
    fileID: u_int32_t,
    startBlock: u_int32_t,
};
pub const HFSPlusExtentKey = struct_HFSPlusExtentKey;
pub const kHFSExtentDensity: c_int = 3;
pub const kHFSPlusExtentDensity: c_int = 8;
const enum_unnamed_813 = c_uint;
pub const struct_HFSExtentDescriptor = packed struct {
    startBlock: u_int16_t,
    blockCount: u_int16_t,
};
pub const HFSExtentDescriptor = struct_HFSExtentDescriptor;
pub const struct_HFSPlusExtentDescriptor = packed struct {
    startBlock: u_int32_t,
    blockCount: u_int32_t,
};
pub const HFSPlusExtentDescriptor = struct_HFSPlusExtentDescriptor;
pub const HFSExtentRecord = [3]HFSExtentDescriptor;
pub const HFSPlusExtentRecord = [8]HFSPlusExtentDescriptor;
const struct_unnamed_814 = extern struct {
    v: i16,
    h: i16,
};
pub const struct_FndrFileInfo = packed struct {
    fdType: u_int32_t,
    fdCreator: u_int32_t,
    fdFlags: u_int16_t,
    fdLocation: struct_unnamed_814,
    @"opaque": i16,
};
pub const FndrFileInfo = struct_FndrFileInfo;
const struct_unnamed_815 = extern struct {
    top: i16,
    left: i16,
    bottom: i16,
    right: i16,
};
const struct_unnamed_816 = extern struct {
    v: u_int16_t,
    h: u_int16_t,
};
pub const struct_FndrDirInfo = packed struct {
    frRect: struct_unnamed_815,
    frFlags: c_ushort,
    frLocation: struct_unnamed_816,
    @"opaque": i16,
};
pub const FndrDirInfo = struct_FndrDirInfo;
pub const struct_FndrOpaqueInfo = packed struct {
    @"opaque": [16]i8,
};
pub const FndrOpaqueInfo = struct_FndrOpaqueInfo;
pub const struct_FndrExtendedDirInfo = packed struct {
    document_id: u_int32_t,
    date_added: u_int32_t,
    extended_flags: u_int16_t,
    reserved3: u_int16_t,
    write_gen_counter: u_int32_t,
};
pub const struct_FndrExtendedFileInfo = packed struct {
    document_id: u_int32_t,
    date_added: u_int32_t,
    extended_flags: u_int16_t,
    reserved2: u_int16_t,
    write_gen_counter: u_int32_t,
};
pub const struct_HFSPlusForkData = packed struct {
    logicalSize: u_int64_t,
    clumpSize: u_int32_t,
    totalBlocks: u_int32_t,
    extents: HFSPlusExtentRecord,
};
pub const HFSPlusForkData = struct_HFSPlusForkData;
const union_unnamed_817 = extern union {
    iNodeNum: u_int32_t,
    linkCount: u_int32_t,
    rawDevice: u_int32_t,
};
pub const struct_HFSPlusBSDInfo = packed struct {
    ownerID: u_int32_t,
    groupID: u_int32_t,
    adminFlags: u_int8_t,
    ownerFlags: u_int8_t,
    fileMode: u_int16_t,
    special: union_unnamed_817,
};
pub const HFSPlusBSDInfo = struct_HFSPlusBSDInfo;
pub const kHFSRootParentID: c_int = 1;
pub const kHFSRootFolderID: c_int = 2;
pub const kHFSExtentsFileID: c_int = 3;
pub const kHFSCatalogFileID: c_int = 4;
pub const kHFSBadBlockFileID: c_int = 5;
pub const kHFSAllocationFileID: c_int = 6;
pub const kHFSStartupFileID: c_int = 7;
pub const kHFSAttributesFileID: c_int = 8;
pub const kHFSAttributeDataFileID: c_int = 13;
pub const kHFSRepairCatalogFileID: c_int = 14;
pub const kHFSBogusExtentFileID: c_int = 15;
pub const kHFSFirstUserCatalogNodeID: c_int = 16;
const enum_unnamed_818 = c_uint;
pub const struct_HFSCatalogKey = packed struct {
    keyLength: u_int8_t,
    reserved: u_int8_t,
    parentID: u_int32_t,
    nodeName: [32]u_int8_t,
};
pub const HFSCatalogKey = struct_HFSCatalogKey;
pub const struct_HFSPlusCatalogKey = packed struct {
    keyLength: u_int16_t,
    parentID: u_int32_t,
    nodeName: HFSUniStr255,
};
pub const HFSPlusCatalogKey = struct_HFSPlusCatalogKey;
pub const kHFSFolderRecord: c_int = 256;
pub const kHFSFileRecord: c_int = 512;
pub const kHFSFolderThreadRecord: c_int = 768;
pub const kHFSFileThreadRecord: c_int = 1024;
pub const kHFSPlusFolderRecord: c_int = 1;
pub const kHFSPlusFileRecord: c_int = 2;
pub const kHFSPlusFolderThreadRecord: c_int = 3;
pub const kHFSPlusFileThreadRecord: c_int = 4;
const enum_unnamed_819 = c_uint;
pub const kHFSFileLockedBit: c_int = 0;
pub const kHFSFileLockedMask: c_int = 1;
pub const kHFSThreadExistsBit: c_int = 1;
pub const kHFSThreadExistsMask: c_int = 2;
pub const kHFSHasAttributesBit: c_int = 2;
pub const kHFSHasAttributesMask: c_int = 4;
pub const kHFSHasSecurityBit: c_int = 3;
pub const kHFSHasSecurityMask: c_int = 8;
pub const kHFSHasFolderCountBit: c_int = 4;
pub const kHFSHasFolderCountMask: c_int = 16;
pub const kHFSHasLinkChainBit: c_int = 5;
pub const kHFSHasLinkChainMask: c_int = 32;
pub const kHFSHasChildLinkBit: c_int = 6;
pub const kHFSHasChildLinkMask: c_int = 64;
pub const kHFSHasDateAddedBit: c_int = 7;
pub const kHFSHasDateAddedMask: c_int = 128;
pub const kHFSFastDevPinnedBit: c_int = 8;
pub const kHFSFastDevPinnedMask: c_int = 256;
pub const kHFSDoNotFastDevPinBit: c_int = 9;
pub const kHFSDoNotFastDevPinMask: c_int = 512;
pub const kHFSFastDevCandidateBit: c_int = 10;
pub const kHFSFastDevCandidateMask: c_int = 1024;
pub const kHFSAutoCandidateBit: c_int = 11;
pub const kHFSAutoCandidateMask: c_int = 2048;
const enum_unnamed_820 = c_uint;
pub const struct_HFSCatalogFolder = packed struct {
    recordType: i16,
    flags: u_int16_t,
    valence: u_int16_t,
    folderID: u_int32_t,
    createDate: u_int32_t,
    modifyDate: u_int32_t,
    backupDate: u_int32_t,
    userInfo: FndrDirInfo,
    finderInfo: FndrOpaqueInfo,
    reserved: [4]u_int32_t,
};
pub const HFSCatalogFolder = struct_HFSCatalogFolder;
pub const struct_HFSPlusCatalogFolder = packed struct {
    recordType: i16,
    flags: u_int16_t,
    valence: u_int32_t,
    folderID: u_int32_t,
    createDate: u_int32_t,
    contentModDate: u_int32_t,
    attributeModDate: u_int32_t,
    accessDate: u_int32_t,
    backupDate: u_int32_t,
    bsdInfo: HFSPlusBSDInfo,
    userInfo: FndrDirInfo,
    finderInfo: FndrOpaqueInfo,
    textEncoding: u_int32_t,
    folderCount: u_int32_t,
};
pub const HFSPlusCatalogFolder = struct_HFSPlusCatalogFolder;
pub const struct_HFSCatalogFile = packed struct {
    recordType: i16,
    flags: u_int8_t,
    fileType: i8,
    userInfo: FndrFileInfo,
    fileID: u_int32_t,
    dataStartBlock: u_int16_t,
    dataLogicalSize: i32,
    dataPhysicalSize: i32,
    rsrcStartBlock: u_int16_t,
    rsrcLogicalSize: i32,
    rsrcPhysicalSize: i32,
    createDate: u_int32_t,
    modifyDate: u_int32_t,
    backupDate: u_int32_t,
    finderInfo: FndrOpaqueInfo,
    clumpSize: u_int16_t,
    dataExtents: HFSExtentRecord,
    rsrcExtents: HFSExtentRecord,
    reserved: u_int32_t,
};
pub const HFSCatalogFile = struct_HFSCatalogFile;
pub const struct_HFSPlusCatalogFile = packed struct {
    recordType: i16,
    flags: u_int16_t,
    reserved1: u_int32_t,
    fileID: u_int32_t,
    createDate: u_int32_t,
    contentModDate: u_int32_t,
    attributeModDate: u_int32_t,
    accessDate: u_int32_t,
    backupDate: u_int32_t,
    bsdInfo: HFSPlusBSDInfo,
    userInfo: FndrFileInfo,
    finderInfo: FndrOpaqueInfo,
    textEncoding: u_int32_t,
    reserved2: u_int32_t,
    dataFork: HFSPlusForkData,
    resourceFork: HFSPlusForkData,
};
pub const HFSPlusCatalogFile = struct_HFSPlusCatalogFile;
pub const struct_HFSCatalogThread = packed struct {
    recordType: i16,
    reserved: [2]i32,
    parentID: u_int32_t,
    nodeName: [32]u_int8_t,
};
pub const HFSCatalogThread = struct_HFSCatalogThread;
pub const struct_HFSPlusCatalogThread = packed struct {
    recordType: i16,
    reserved: i16,
    parentID: u_int32_t,
    nodeName: HFSUniStr255,
};
pub const HFSPlusCatalogThread = struct_HFSPlusCatalogThread;
pub const kHFSPlusAttrInlineData: c_int = 16;
pub const kHFSPlusAttrForkData: c_int = 32;
pub const kHFSPlusAttrExtents: c_int = 48;
const enum_unnamed_821 = c_uint;
pub const struct_HFSPlusAttrForkData = packed struct {
    recordType: u_int32_t,
    reserved: u_int32_t,
    theFork: HFSPlusForkData,
};
pub const HFSPlusAttrForkData = struct_HFSPlusAttrForkData;
pub const struct_HFSPlusAttrExtents = packed struct {
    recordType: u_int32_t,
    reserved: u_int32_t,
    extents: HFSPlusExtentRecord,
};
pub const HFSPlusAttrExtents = struct_HFSPlusAttrExtents;
pub const struct_HFSPlusAttrData = packed struct {
    recordType: u_int32_t,
    reserved: [2]u_int32_t,
    attrSize: u_int32_t,
    attrData: [2]u_int8_t,
};
pub const HFSPlusAttrData = struct_HFSPlusAttrData;
pub const struct_HFSPlusAttrInlineData = packed struct {
    recordType: u_int32_t,
    reserved: u_int32_t,
    logicalSize: u_int32_t,
    userData: [2]u_int8_t,
};
pub const HFSPlusAttrInlineData = struct_HFSPlusAttrInlineData;
pub const union_HFSPlusAttrRecord = extern union {
    recordType: u_int32_t,
    inlineData: HFSPlusAttrInlineData,
    attrData: HFSPlusAttrData,
    forkData: HFSPlusAttrForkData,
    overflowExtents: HFSPlusAttrExtents,
};
pub const HFSPlusAttrRecord = union_HFSPlusAttrRecord;
pub const kHFSMaxAttrNameLen: c_int = 127;
const enum_unnamed_822 = c_uint;
pub const struct_HFSPlusAttrKey = packed struct {
    keyLength: u_int16_t,
    pad: u_int16_t,
    fileID: u_int32_t,
    startBlock: u_int32_t,
    attrNameLen: u_int16_t,
    attrName: [127]u_int16_t,
};
pub const HFSPlusAttrKey = struct_HFSPlusAttrKey;
pub const kHFSPlusExtentKeyMaximumLength: c_int = 10;
pub const kHFSExtentKeyMaximumLength: c_int = 7;
pub const kHFSPlusCatalogKeyMaximumLength: c_int = 516;
pub const kHFSPlusCatalogKeyMinimumLength: c_int = 6;
pub const kHFSCatalogKeyMaximumLength: c_int = 37;
pub const kHFSCatalogKeyMinimumLength: c_int = 6;
pub const kHFSPlusCatalogMinNodeSize: c_int = 4096;
pub const kHFSPlusExtentMinNodeSize: c_int = 512;
pub const kHFSPlusAttrMinNodeSize: c_int = 4096;
const enum_unnamed_823 = c_uint;
pub const kHFSVolumeHardwareLockBit: c_int = 7;
pub const kHFSVolumeUnmountedBit: c_int = 8;
pub const kHFSVolumeSparedBlocksBit: c_int = 9;
pub const kHFSVolumeNoCacheRequiredBit: c_int = 10;
pub const kHFSBootVolumeInconsistentBit: c_int = 11;
pub const kHFSCatalogNodeIDsReusedBit: c_int = 12;
pub const kHFSVolumeJournaledBit: c_int = 13;
pub const kHFSVolumeInconsistentBit: c_int = 14;
pub const kHFSVolumeSoftwareLockBit: c_int = 15;
pub const kHFSUnusedNodeFixBit: c_int = 31;
pub const kHFSContentProtectionBit: c_int = 30;
pub const kHFSVolumeHardwareLockMask: c_int = 128;
pub const kHFSVolumeUnmountedMask: c_int = 256;
pub const kHFSVolumeSparedBlocksMask: c_int = 512;
pub const kHFSVolumeNoCacheRequiredMask: c_int = 1024;
pub const kHFSBootVolumeInconsistentMask: c_int = 2048;
pub const kHFSCatalogNodeIDsReusedMask: c_int = 4096;
pub const kHFSVolumeJournaledMask: c_int = 8192;
pub const kHFSVolumeInconsistentMask: c_int = 16384;
pub const kHFSVolumeSoftwareLockMask: c_int = 32768;
pub const kHFSContentProtectionMask: c_int = 1073741824;
pub const kHFSUnusedNodeFixMask: c_uint = 2147483648;
pub const kHFSMDBAttributesMask: c_int = 33664;
const enum_unnamed_824 = c_uint;
pub const kHFSUnusedNodesFixDate: c_uint = 3320784000;
const enum_unnamed_825 = c_uint;
pub const struct_HFSMasterDirectoryBlock = packed struct {
    drSigWord: u_int16_t,
    drCrDate: u_int32_t,
    drLsMod: u_int32_t,
    drAtrb: u_int16_t,
    drNmFls: u_int16_t,
    drVBMSt: u_int16_t,
    drAllocPtr: u_int16_t,
    drNmAlBlks: u_int16_t,
    drAlBlkSiz: u_int32_t,
    drClpSiz: u_int32_t,
    drAlBlSt: u_int16_t,
    drNxtCNID: u_int32_t,
    drFreeBks: u_int16_t,
    drVN: [28]u_int8_t,
    drVolBkUp: u_int32_t,
    drVSeqNum: u_int16_t,
    drWrCnt: u_int32_t,
    drXTClpSiz: u_int32_t,
    drCTClpSiz: u_int32_t,
    drNmRtDirs: u_int16_t,
    drFilCnt: u_int32_t,
    drDirCnt: u_int32_t,
    drFndrInfo: [8]u_int32_t,
    drEmbedSigWord: u_int16_t,
    drEmbedExtent: HFSExtentDescriptor,
    drXTFlSize: u_int32_t,
    drXTExtRec: HFSExtentRecord,
    drCTFlSize: u_int32_t,
    drCTExtRec: HFSExtentRecord,
};
pub const HFSMasterDirectoryBlock = struct_HFSMasterDirectoryBlock;
pub const struct_HFSPlusVolumeHeader = packed struct {
    signature: u_int16_t,
    version: u_int16_t,
    attributes: u_int32_t,
    lastMountedVersion: u_int32_t,
    journalInfoBlock: u_int32_t,
    createDate: u_int32_t,
    modifyDate: u_int32_t,
    backupDate: u_int32_t,
    checkedDate: u_int32_t,
    fileCount: u_int32_t,
    folderCount: u_int32_t,
    blockSize: u_int32_t,
    totalBlocks: u_int32_t,
    freeBlocks: u_int32_t,
    nextAllocation: u_int32_t,
    rsrcClumpSize: u_int32_t,
    dataClumpSize: u_int32_t,
    nextCatalogID: u_int32_t,
    writeCount: u_int32_t,
    encodingsBitmap: u_int64_t,
    finderInfo: [32]u_int8_t,
    allocationFile: HFSPlusForkData,
    extentsFile: HFSPlusForkData,
    catalogFile: HFSPlusForkData,
    attributesFile: HFSPlusForkData,
    startupFile: HFSPlusForkData,
};
pub const HFSPlusVolumeHeader = struct_HFSPlusVolumeHeader;
pub const kMaxKeyLength: c_int = 520;
pub const enum_BTreeKeyLimits = c_uint;
pub const union_BTreeKey = extern union {
    length8: u_int8_t,
    length16: u_int16_t,
    rawData: [522]u_int8_t,
};
pub const BTreeKey = union_BTreeKey;
pub const struct_BTNodeDescriptor = packed struct {
    fLink: u_int32_t,
    bLink: u_int32_t,
    kind: i8,
    height: u_int8_t,
    numRecords: u_int16_t,
    reserved: u_int16_t,
};
pub const BTNodeDescriptor = struct_BTNodeDescriptor;
pub const kBTLeafNode: c_int = -1;
pub const kBTIndexNode: c_int = 0;
pub const kBTHeaderNode: c_int = 1;
pub const kBTMapNode: c_int = 2;
const enum_unnamed_826 = c_int;
pub const struct_BTHeaderRec = packed struct {
    treeDepth: u_int16_t,
    rootNode: u_int32_t,
    leafRecords: u_int32_t,
    firstLeafNode: u_int32_t,
    lastLeafNode: u_int32_t,
    nodeSize: u_int16_t,
    maxKeyLength: u_int16_t,
    totalNodes: u_int32_t,
    freeNodes: u_int32_t,
    reserved1: u_int16_t,
    clumpSize: u_int32_t,
    btreeType: u_int8_t,
    keyCompareType: u_int8_t,
    attributes: u_int32_t,
    reserved3: [16]u_int32_t,
};
pub const BTHeaderRec = struct_BTHeaderRec;
pub const kBTBadCloseMask: c_int = 1;
pub const kBTBigKeysMask: c_int = 2;
pub const kBTVariableIndexKeysMask: c_int = 4;
const enum_unnamed_827 = c_uint;
pub const kHFSCaseFolding: c_int = 207;
pub const kHFSBinaryCompare: c_int = 188;
const enum_unnamed_828 = c_uint;
pub const uuid_string_t = __darwin_uuid_string_t;
pub const UUID_NULL: uuid_t = [16]u8{
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
};
pub extern fn uuid_clear(uu: [*c]u8) void;
pub extern fn uuid_compare(uu1: [*c]const u8, uu2: [*c]const u8) c_int;
pub extern fn uuid_copy(dst: [*c]u8, src: [*c]const u8) void;
pub extern fn uuid_generate(out: [*c]u8) void;
pub extern fn uuid_generate_random(out: [*c]u8) void;
pub extern fn uuid_generate_time(out: [*c]u8) void;
pub extern fn uuid_is_null(uu: [*c]const u8) c_int;
pub extern fn uuid_parse(in: [*c]const u8, uu: [*c]u8) c_int;
pub extern fn uuid_unparse(uu: [*c]const u8, out: [*c]u8) void;
pub extern fn uuid_unparse_lower(uu: [*c]const u8, out: [*c]u8) void;
pub extern fn uuid_unparse_upper(uu: [*c]const u8, out: [*c]u8) void;
pub const struct_JournalInfoBlock = packed struct {
    flags: u_int32_t,
    device_signature: [8]u_int32_t,
    offset: u_int64_t,
    size: u_int64_t,
    ext_jnl_uuid: uuid_string_t,
    machine_serial_num: [48]u8,
    reserved: [43]u8,
};
pub const JournalInfoBlock = struct_JournalInfoBlock;
pub const kJIJournalInFSMask: c_int = 1;
pub const kJIJournalOnOtherDeviceMask: c_int = 2;
pub const kJIJournalNeedInitMask: c_int = 4;
const enum_unnamed_829 = c_uint;
pub const HFSCatalogNodeID = UInt32;
pub const AIFFID: c_int = 1095321158;
pub const AIFCID: c_int = 1095321155;
pub const FormatVersionID: c_int = 1180058962;
pub const CommonID: c_int = 1129270605;
pub const FORMID: c_int = 1179603533;
pub const SoundDataID: c_int = 1397968452;
pub const MarkerID: c_int = 1296126539;
pub const InstrumentID: c_int = 1229869908;
pub const MIDIDataID: c_int = 1296647241;
pub const AudioRecordingID: c_int = 1095062340;
pub const ApplicationSpecificID: c_int = 1095782476;
pub const CommentID: c_int = 1129270612;
pub const NameID: c_int = 1312902469;
pub const AuthorID: c_int = 1096111176;
pub const CopyrightID: c_int = 677587232;
pub const AnnotationID: c_int = 1095650895;
const enum_unnamed_830 = c_uint;
pub const NoLooping: c_int = 0;
pub const ForwardLooping: c_int = 1;
pub const ForwardBackwardLooping: c_int = 2;
const enum_unnamed_831 = c_uint;
pub const AIFCVersion1: c_uint = 2726318400;
const enum_unnamed_832 = c_uint;
pub const NoneType: c_int = 1313820229;
pub const ACE2Type: c_int = 1094927666;
pub const ACE8Type: c_int = 1094927672;
pub const MACE3Type: c_int = 1296122675;
pub const MACE6Type: c_int = 1296122678;
const enum_unnamed_833 = c_uint;
pub const MarkerIdType = SInt16;
pub const struct_ChunkHeader = extern struct {
    ckID: UInt32,
    ckSize: SInt32,
};
pub const ChunkHeader = struct_ChunkHeader;
pub const struct_ContainerChunk = extern struct {
    ckID: UInt32,
    ckSize: SInt32,
    formType: UInt32,
};
pub const ContainerChunk = struct_ContainerChunk;
pub const struct_FormatVersionChunk = extern struct {
    ckID: UInt32,
    ckSize: SInt32,
    timestamp: UInt32,
};
pub const FormatVersionChunk = struct_FormatVersionChunk;
pub const FormatVersionChunkPtr = [*c]FormatVersionChunk;
pub const struct_CommonChunk = extern struct {
    ckID: UInt32,
    ckSize: SInt32,
    numChannels: SInt16,
    numSampleFrames: UInt32,
    sampleSize: SInt16,
    sampleRate: extended80,
};
pub const CommonChunk = struct_CommonChunk;
pub const CommonChunkPtr = [*c]CommonChunk;
pub const struct_ExtCommonChunk = extern struct {
    ckID: UInt32,
    ckSize: SInt32,
    numChannels: SInt16,
    numSampleFrames: UInt32,
    sampleSize: SInt16,
    sampleRate: extended80,
    compressionType: UInt32,
    compressionName: [1]u8,
};
pub const ExtCommonChunk = struct_ExtCommonChunk;
pub const ExtCommonChunkPtr = [*c]ExtCommonChunk;
pub const struct_SoundDataChunk = extern struct {
    ckID: UInt32,
    ckSize: SInt32,
    offset: UInt32,
    blockSize: UInt32,
};
pub const SoundDataChunk = struct_SoundDataChunk;
pub const SoundDataChunkPtr = [*c]SoundDataChunk;
pub const struct_Marker = extern struct {
    id: MarkerIdType,
    position: UInt32,
    markerName: Str255,
};
pub const Marker = struct_Marker;
pub const struct_MarkerChunk = extern struct {
    ckID: UInt32,
    ckSize: SInt32,
    numMarkers: UInt16,
    Markers: [1]Marker,
};
pub const MarkerChunk = struct_MarkerChunk;
pub const MarkerChunkPtr = [*c]MarkerChunk;
pub const struct_AIFFLoop = extern struct {
    playMode: SInt16,
    beginLoop: MarkerIdType,
    endLoop: MarkerIdType,
};
pub const AIFFLoop = struct_AIFFLoop;
pub const struct_InstrumentChunk = extern struct {
    ckID: UInt32,
    ckSize: SInt32,
    baseFrequency: UInt8,
    detune: UInt8,
    lowFrequency: UInt8,
    highFrequency: UInt8,
    lowVelocity: UInt8,
    highVelocity: UInt8,
    gain: SInt16,
    sustainLoop: AIFFLoop,
    releaseLoop: AIFFLoop,
};
pub const InstrumentChunk = struct_InstrumentChunk;
pub const InstrumentChunkPtr = [*c]InstrumentChunk;
pub const struct_MIDIDataChunk = extern struct {
    ckID: UInt32,
    ckSize: SInt32,
    MIDIdata: [1]UInt8,
};
pub const MIDIDataChunk = struct_MIDIDataChunk;
pub const MIDIDataChunkPtr = [*c]MIDIDataChunk;
pub const struct_AudioRecordingChunk = extern struct {
    ckID: UInt32,
    ckSize: SInt32,
    AESChannelStatus: [24]UInt8,
};
pub const AudioRecordingChunk = struct_AudioRecordingChunk;
pub const AudioRecordingChunkPtr = [*c]AudioRecordingChunk;
pub const struct_ApplicationSpecificChunk = extern struct {
    ckID: UInt32,
    ckSize: SInt32,
    applicationSignature: OSType,
    data: [1]UInt8,
};
pub const ApplicationSpecificChunk = struct_ApplicationSpecificChunk;
pub const ApplicationSpecificChunkPtr = [*c]ApplicationSpecificChunk;
pub const struct_Comment = extern struct {
    timeStamp: UInt32,
    marker: MarkerIdType,
    count: UInt16,
    text: [1]u8,
};
pub const Comment = struct_Comment;
pub const struct_CommentsChunk = extern struct {
    ckID: UInt32,
    ckSize: SInt32,
    numComments: UInt16,
    comments: [1]Comment,
};
pub const CommentsChunk = struct_CommentsChunk;
pub const CommentsChunkPtr = [*c]CommentsChunk;
pub const struct_TextChunk = extern struct {
    ckID: UInt32,
    ckSize: SInt32,
    text: [1]u8,
};
pub const TextChunk = struct_TextChunk;
pub const TextChunkPtr = [*c]TextChunk;
pub const kTECAvailableEncodingsResType: c_int = 1668703598;
pub const kTECAvailableSniffersResType: c_int = 1668707174;
pub const kTECSubTextEncodingsResType: c_int = 1668707170;
pub const kTECConversionInfoResType: c_int = 1668704614;
pub const kTECMailEncodingsResType: c_int = 1668705644;
pub const kTECWebEncodingsResType: c_int = 1668708194;
pub const kTECInternetNamesResType: c_int = 1668705645;
const enum_unnamed_834 = c_uint;
pub const kTECPluginType: c_int = 1701015655;
pub const kTECPluginCreator: c_int = 1701733238;
pub const kTECPluginOneToOne: c_int = 1869901679;
pub const kTECPluginOneToMany: c_int = 1869901677;
pub const kTECPluginManyToOne: c_int = 1836347247;
pub const kTECPluginSniffObj: c_int = 1936615782;
const enum_unnamed_835 = c_uint;
pub const verUnspecified: c_int = 32767;
pub const kTECResourceID: c_int = 128;
const enum_unnamed_836 = c_uint;
pub const struct_TextEncodingRec = extern struct {
    base: UInt32,
    variant: UInt32,
    format: UInt32,
};
pub const TextEncodingRec = struct_TextEncodingRec;
pub const struct_TECEncodingsListRec = extern struct {
    count: UInt32,
    encodings: TextEncodingRec,
};
pub const TECEncodingsListRec = struct_TECEncodingsListRec;
pub const TECEncodingsListPtr = [*c]TECEncodingsListRec;
pub const TECEncodingsListHandle = [*c]TECEncodingsListPtr;
pub const struct_TECSubTextEncodingRec = extern struct {
    offset: UInt32,
    searchEncoding: TextEncodingRec,
    count: UInt32,
    subEncodings: TextEncodingRec,
};
pub const TECSubTextEncodingRec = struct_TECSubTextEncodingRec;
pub const struct_TECSubTextEncodingsRec = extern struct {
    count: UInt32,
    subTextEncodingRec: TECSubTextEncodingRec,
};
pub const TECSubTextEncodingsRec = struct_TECSubTextEncodingsRec;
pub const TECSubTextEncodingsPtr = [*c]TECSubTextEncodingsRec;
pub const TECSubTextEncodingsHandle = [*c]TECSubTextEncodingsPtr;
pub const struct_TECEncodingPairRec = extern struct {
    source: TextEncodingRec,
    dest: TextEncodingRec,
};
pub const TECEncodingPairRec = struct_TECEncodingPairRec;
pub const struct_TECEncodingPairs = extern struct {
    encodingPair: TECEncodingPairRec,
    flags: UInt32,
    speed: UInt32,
};
pub const TECEncodingPairs = struct_TECEncodingPairs;
pub const struct_TECEncodingPairsRec = extern struct {
    count: UInt32,
    encodingPairs: TECEncodingPairs,
};
pub const TECEncodingPairsRec = struct_TECEncodingPairsRec;
pub const TECEncodingPairsPtr = [*c]TECEncodingPairsRec;
pub const TECEncodingPairsHandle = [*c]TECEncodingPairsPtr;
pub const struct_TECLocaleListToEncodingListRec = extern struct {
    offset: UInt32,
    count: UInt32,
    locales: RegionCode,
};
pub const TECLocaleListToEncodingListRec = struct_TECLocaleListToEncodingListRec;
pub const TECLocaleListToEncodingListPtr = [*c]TECLocaleListToEncodingListRec;
pub const struct_TECLocaleToEncodingsListRec = extern struct {
    count: UInt32,
    localeListToEncodingList: TECLocaleListToEncodingListRec,
};
pub const TECLocaleToEncodingsListRec = struct_TECLocaleToEncodingsListRec;
pub const TECLocaleToEncodingsListPtr = [*c]TECLocaleToEncodingsListRec;
pub const TECLocaleToEncodingsListHandle = [*c]TECLocaleToEncodingsListPtr;
pub const struct_TECInternetNameRec = extern struct {
    offset: UInt32,
    searchEncoding: TextEncodingRec,
    encodingNameLength: UInt8,
    encodingName: [1]UInt8,
};
pub const TECInternetNameRec = struct_TECInternetNameRec;
pub const struct_TECInternetNamesRec = extern struct {
    count: UInt32,
    InternetNames: TECInternetNameRec,
};
pub const TECInternetNamesRec = struct_TECInternetNamesRec;
pub const TECInternetNamesPtr = [*c]TECInternetNamesRec;
pub const TECInternetNamesHandle = [*c]TECInternetNamesPtr;
pub const struct_TECBufferContextRec = extern struct {
    textInputBuffer: ConstTextPtr,
    textInputBufferEnd: ConstTextPtr,
    textOutputBuffer: TextPtr,
    textOutputBufferEnd: TextPtr,
    encodingInputBuffer: ConstTextEncodingRunPtr,
    encodingInputBufferEnd: ConstTextEncodingRunPtr,
    encodingOutputBuffer: TextEncodingRunPtr,
    encodingOutputBufferEnd: TextEncodingRunPtr,
};
pub const TECBufferContextRec = struct_TECBufferContextRec;
pub const struct_TECPluginStateRec = extern struct {
    state1: UInt8,
    state2: UInt8,
    state3: UInt8,
    state4: UInt8,
    longState1: UInt32,
    longState2: UInt32,
    longState3: UInt32,
    longState4: UInt32,
};
pub const TECPluginStateRec = struct_TECPluginStateRec;
pub const struct_TECConverterContextRec = extern struct {
    pluginRec: Ptr,
    sourceEncoding: TextEncoding,
    destEncoding: TextEncoding,
    reserved1: UInt32,
    reserved2: UInt32,
    bufferContext: TECBufferContextRec,
    contextRefCon: URefCon,
    conversionProc: ProcPtr,
    flushProc: ProcPtr,
    clearContextInfoProc: ProcPtr,
    options1: UInt32,
    options2: UInt32,
    pluginState: TECPluginStateRec,
};
pub const TECConverterContextRec = struct_TECConverterContextRec;
pub const struct_TECSnifferContextRec = extern struct {
    pluginRec: Ptr,
    encoding: TextEncoding,
    maxErrors: ItemCount,
    maxFeatures: ItemCount,
    textInputBuffer: ConstTextPtr,
    textInputBufferEnd: ConstTextPtr,
    numFeatures: ItemCount,
    numErrors: ItemCount,
    contextRefCon: URefCon,
    sniffProc: ProcPtr,
    clearContextInfoProc: ProcPtr,
    pluginState: TECPluginStateRec,
};
pub const TECSnifferContextRec = struct_TECSnifferContextRec;
pub const TECPluginNewEncodingConverterPtr = ?*const fn ([*c]TECObjectRef, [*c]TECConverterContextRec, TextEncoding, TextEncoding) callconv(.C) OSStatus;
pub const TECPluginClearContextInfoPtr = ?*const fn (TECObjectRef, [*c]TECConverterContextRec) callconv(.C) OSStatus;
pub const TECPluginConvertTextEncodingPtr = ?*const fn (TECObjectRef, [*c]TECConverterContextRec) callconv(.C) OSStatus;
pub const TECPluginFlushConversionPtr = ?*const fn (TECObjectRef, [*c]TECConverterContextRec) callconv(.C) OSStatus;
pub const TECPluginDisposeEncodingConverterPtr = ?*const fn (TECObjectRef, [*c]TECConverterContextRec) callconv(.C) OSStatus;
pub const TECPluginNewEncodingSnifferPtr = ?*const fn ([*c]TECSnifferObjectRef, [*c]TECSnifferContextRec, TextEncoding) callconv(.C) OSStatus;
pub const TECPluginClearSnifferContextInfoPtr = ?*const fn (TECSnifferObjectRef, [*c]TECSnifferContextRec) callconv(.C) OSStatus;
pub const TECPluginSniffTextEncodingPtr = ?*const fn (TECSnifferObjectRef, [*c]TECSnifferContextRec) callconv(.C) OSStatus;
pub const TECPluginDisposeEncodingSnifferPtr = ?*const fn (TECSnifferObjectRef, [*c]TECSnifferContextRec) callconv(.C) OSStatus;
pub const TECPluginGetCountAvailableTextEncodingsPtr = ?*const fn ([*c]TextEncoding, ItemCount, [*c]ItemCount) callconv(.C) OSStatus;
pub const TECPluginGetCountAvailableTextEncodingPairsPtr = ?*const fn ([*c]TECConversionInfo, ItemCount, [*c]ItemCount) callconv(.C) OSStatus;
pub const TECPluginGetCountDestinationTextEncodingsPtr = ?*const fn (TextEncoding, [*c]TextEncoding, ItemCount, [*c]ItemCount) callconv(.C) OSStatus;
pub const TECPluginGetCountSubTextEncodingsPtr = ?*const fn (TextEncoding, [*c]TextEncoding, ItemCount, [*c]ItemCount) callconv(.C) OSStatus;
pub const TECPluginGetCountAvailableSniffersPtr = ?*const fn ([*c]TextEncoding, ItemCount, [*c]ItemCount) callconv(.C) OSStatus;
pub const TECPluginGetTextEncodingInternetNamePtr = ?*const fn (TextEncoding, [*c]u8) callconv(.C) OSStatus;
pub const TECPluginGetTextEncodingFromInternetNamePtr = ?*const fn ([*c]TextEncoding, ConstStr255Param) callconv(.C) OSStatus;
pub const TECPluginGetCountWebEncodingsPtr = ?*const fn ([*c]TextEncoding, ItemCount, [*c]ItemCount) callconv(.C) OSStatus;
pub const TECPluginGetCountMailEncodingsPtr = ?*const fn ([*c]TextEncoding, ItemCount, [*c]ItemCount) callconv(.C) OSStatus;
pub const kTECPluginDispatchTableVersion1: c_int = 65536;
pub const kTECPluginDispatchTableVersion1_1: c_int = 65537;
pub const kTECPluginDispatchTableVersion1_2: c_int = 65538;
pub const kTECPluginDispatchTableCurrentVersion: c_int = 65538;
const enum_unnamed_837 = c_uint;
pub const struct_TECPluginDispatchTable = extern struct {
    version: TECPluginVersion,
    compatibleVersion: TECPluginVersion,
    PluginID: TECPluginSignature,
    PluginNewEncodingConverter: TECPluginNewEncodingConverterPtr,
    PluginClearContextInfo: TECPluginClearContextInfoPtr,
    PluginConvertTextEncoding: TECPluginConvertTextEncodingPtr,
    PluginFlushConversion: TECPluginFlushConversionPtr,
    PluginDisposeEncodingConverter: TECPluginDisposeEncodingConverterPtr,
    PluginNewEncodingSniffer: TECPluginNewEncodingSnifferPtr,
    PluginClearSnifferContextInfo: TECPluginClearSnifferContextInfoPtr,
    PluginSniffTextEncoding: TECPluginSniffTextEncodingPtr,
    PluginDisposeEncodingSniffer: TECPluginDisposeEncodingSnifferPtr,
    PluginGetCountAvailableTextEncodings: TECPluginGetCountAvailableTextEncodingsPtr,
    PluginGetCountAvailableTextEncodingPairs: TECPluginGetCountAvailableTextEncodingPairsPtr,
    PluginGetCountDestinationTextEncodings: TECPluginGetCountDestinationTextEncodingsPtr,
    PluginGetCountSubTextEncodings: TECPluginGetCountSubTextEncodingsPtr,
    PluginGetCountAvailableSniffers: TECPluginGetCountAvailableSniffersPtr,
    PluginGetCountWebTextEncodings: TECPluginGetCountWebEncodingsPtr,
    PluginGetCountMailTextEncodings: TECPluginGetCountMailEncodingsPtr,
    PluginGetTextEncodingInternetName: TECPluginGetTextEncodingInternetNamePtr,
    PluginGetTextEncodingFromInternetName: TECPluginGetTextEncodingFromInternetNamePtr,
};
pub const TECPluginDispatchTable = struct_TECPluginDispatchTable;
pub const TECPluginGetPluginDispatchTablePtr = ?*const fn () callconv(.C) [*c]TECPluginDispatchTable;
pub const DescType = ResType;
pub const AEKeyword = FourCharCode;
pub const typeBoolean: c_int = 1651470188;
pub const typeChar: c_int = 1413830740;
const enum_unnamed_838 = c_uint;
pub const typeStyledUnicodeText: c_int = 1937077368;
pub const typeEncodedString: c_int = 1701733235;
pub const typeUnicodeText: c_int = 1970567284;
pub const typeCString: c_int = 1668510834;
pub const typePString: c_int = 1886614642;
const enum_unnamed_839 = c_uint;
pub const typeUTF16ExternalRepresentation: c_int = 1970549046;
pub const typeUTF8Text: c_int = 1970562616;
const enum_unnamed_840 = c_uint;
pub const typeSInt16: c_int = 1936224114;
pub const typeUInt16: c_int = 1970497650;
pub const typeSInt32: c_int = 1819242087;
pub const typeUInt32: c_int = 1835100014;
pub const typeSInt64: c_int = 1668246896;
pub const typeUInt64: c_int = 1969450861;
pub const typeIEEE32BitFloatingPoint: c_int = 1936289383;
pub const typeIEEE64BitFloatingPoint: c_int = 1685026146;
pub const type128BitFloatingPoint: c_int = 1818518124;
pub const typeDecimalStruct: c_int = 1684366189;
const enum_unnamed_841 = c_uint;
pub const typeAEList: c_int = 1818850164;
pub const typeAERecord: c_int = 1919247215;
pub const typeAppleEvent: c_int = 1634039412;
pub const typeEventRecord: c_int = 1702261347;
pub const typeTrue: c_int = 1953658213;
pub const typeFalse: c_int = 1717660787;
pub const typeAlias: c_int = 1634494835;
pub const typeEnumerated: c_int = 1701737837;
pub const typeType: c_int = 1954115685;
pub const typeAppParameters: c_int = 1634758753;
pub const typeProperty: c_int = 1886547824;
pub const typeFSRef: c_int = 1718841958;
pub const typeFileURL: c_int = 1718973036;
pub const typeBookmarkData: c_int = 1651339883;
pub const typeKeyword: c_int = 1801812343;
pub const typeSectionH: c_int = 1936024436;
pub const typeWildCard: c_int = 707406378;
pub const typeApplSignature: c_int = 1936287598;
pub const typeQDRectangle: c_int = 1902408308;
pub const typeFixed: c_int = 1718188132;
pub const typeProcessSerialNumber: c_int = 1886613024;
pub const typeApplicationURL: c_int = 1634759276;
pub const typeNull: c_int = 1853189228;
const enum_unnamed_842 = c_uint;
pub const typeCFAttributedStringRef: c_int = 1667654003;
pub const typeCFMutableAttributedStringRef: c_int = 1667653985;
pub const typeCFStringRef: c_int = 1667658612;
pub const typeCFMutableStringRef: c_int = 1667657075;
pub const typeCFArrayRef: c_int = 1667654002;
pub const typeCFMutableArrayRef: c_int = 1667657057;
pub const typeCFDictionaryRef: c_int = 1667654755;
pub const typeCFMutableDictionaryRef: c_int = 1667657060;
pub const typeCFNumberRef: c_int = 1667657314;
pub const typeCFBooleanRef: c_int = 1667658854;
pub const typeCFTypeRef: c_int = 1667658873;
const enum_unnamed_843 = c_uint;
pub const typeKernelProcessID: c_int = 1802529124;
pub const typeMachPort: c_int = 1886351988;
const enum_unnamed_844 = c_uint;
pub const typeAuditToken: c_int = 1953459054;
const enum_unnamed_845 = c_uint;
pub const typeApplicationBundleID: c_int = 1651863140;
const enum_unnamed_846 = c_uint;
pub const keyTransactionIDAttr: c_int = 1953653102;
pub const keyReturnIDAttr: c_int = 1920231780;
pub const keyEventClassAttr: c_int = 1702257516;
pub const keyEventIDAttr: c_int = 1702259044;
pub const keyAddressAttr: c_int = 1633969266;
pub const keyOptionalKeywordAttr: c_int = 1869640811;
pub const keyTimeoutAttr: c_int = 1953066351;
pub const keyInteractLevelAttr: c_int = 1768846437;
pub const keyEventSourceAttr: c_int = 1702064739;
pub const keyMissedKeywordAttr: c_int = 1835627379;
pub const keyOriginalAddressAttr: c_int = 1718775661;
pub const keyAcceptTimeoutAttr: c_int = 1633907821;
pub const keyReplyRequestedAttr: c_int = 1919250545;
pub const keySenderEUIDAttr: c_int = 1936025956;
pub const keySenderEGIDAttr: c_int = 1936157028;
pub const keySenderUIDAttr: c_int = 1969841267;
pub const keySenderGIDAttr: c_int = 1734960243;
pub const keySenderPIDAttr: c_int = 1936746852;
pub const keySenderAuditTokenAttr: c_int = 1953459054;
pub const keySenderApplescriptEntitlementsAttr: c_int = 1701737580;
pub const keySenderApplicationIdentifierEntitlementAttr: c_int = 1634297185;
pub const keySenderApplicationSandboxed: c_int = 1936946018;
pub const keyActualSenderAuditToken: c_int = 1633902964;
pub const keyAppleEventAttributesAttr: c_int = 1635021938;
const enum_unnamed_847 = c_uint;
pub const kAEDebugPOSTHeader: c_int = 1;
pub const kAEDebugReplyHeader: c_int = 2;
pub const kAEDebugXMLRequest: c_int = 4;
pub const kAEDebugXMLResponse: c_int = 8;
pub const kAEDebugXMLDebugAll: c_int = -1;
const enum_unnamed_848 = c_int;
pub const kSOAP1999Schema: c_int = 1936931129;
pub const kSOAP2001Schema: c_int = 1936928817;
const enum_unnamed_849 = c_uint;
pub const keyUserNameAttr: c_int = 1970168173;
pub const keyUserPasswordAttr: c_int = 1885434739;
pub const keyDisableAuthenticationAttr: c_int = 1635087464;
pub const keyXMLDebuggingAttr: c_int = 2019844711;
pub const kAERPCClass: c_int = 1919968032;
pub const kAEXMLRPCScheme: c_int = 1380991794;
pub const kAESOAPScheme: c_int = 1397702992;
pub const kAESharedScriptHandler: c_int = 2004050800;
pub const keyRPCMethodName: c_int = 1835365480;
pub const keyRPCMethodParam: c_int = 1885434477;
pub const keyRPCMethodParamOrder: c_int = 795832932;
pub const keyAEPOSTHeaderData: c_int = 1885889892;
pub const keyAEReplyHeaderData: c_int = 1919444324;
pub const keyAEXMLRequestData: c_int = 2020762993;
pub const keyAEXMLReplyData: c_int = 2020762992;
pub const keyAdditionalHTTPHeaders: c_int = 1634231652;
pub const keySOAPAction: c_int = 1935762292;
pub const keySOAPMethodNameSpace: c_int = 1836281955;
pub const keySOAPMethodNameSpaceURI: c_int = 1836281973;
pub const keySOAPSchemaVersion: c_int = 1936941928;
const enum_unnamed_850 = c_uint;
pub const keySOAPStructureMetaData: c_int = 796093796;
pub const keySOAPSMDNamespace: c_int = 1936944755;
pub const keySOAPSMDNamespaceURI: c_int = 1936944757;
pub const keySOAPSMDType: c_int = 1936946288;
const enum_unnamed_851 = c_uint;
pub const kAEUseHTTPProxyAttr: c_int = 2020962418;
pub const kAEHTTPProxyPortAttr: c_int = 2020111472;
pub const kAEHTTPProxyHostAttr: c_int = 2020111464;
const enum_unnamed_852 = c_uint;
pub const kAESocks4Protocol: c_int = 4;
pub const kAESocks5Protocol: c_int = 5;
const enum_unnamed_853 = c_uint;
pub const kAEUseSocksAttr: c_int = 2020828019;
pub const kAESocksProxyAttr: c_int = 2020831083;
pub const kAESocksHostAttr: c_int = 2020829299;
pub const kAESocksPortAttr: c_int = 2020829296;
pub const kAESocksUserAttr: c_int = 2020829301;
pub const kAESocksPasswordAttr: c_int = 2020829303;
const enum_unnamed_854 = c_uint;
pub const kAEDescListFactorNone: c_int = 0;
pub const kAEDescListFactorType: c_int = 4;
pub const kAEDescListFactorTypeAndSize: c_int = 8;
const enum_unnamed_855 = c_uint;
pub const kAutoGenerateReturnID: c_int = -1;
pub const kAnyTransactionID: c_int = 0;
const enum_unnamed_856 = c_int;
pub const struct_OpaqueAEDataStorageType = opaque {};
pub const AEDataStorageType = ?*struct_OpaqueAEDataStorageType;
pub const AEDataStorage = [*c]AEDataStorageType;
pub const struct_AEDesc = extern struct {
    descriptorType: DescType,
    dataHandle: AEDataStorage,
};
pub const AEDesc = struct_AEDesc;
pub const AEDescPtr = [*c]AEDesc;
pub const struct_AEKeyDesc = extern struct {
    descKey: AEKeyword,
    descContent: AEDesc,
};
pub const AEKeyDesc = struct_AEKeyDesc;
pub const AEDescList = AEDesc;
pub const AERecord = AEDescList;
pub const AEAddressDesc = AEDesc;
pub const AppleEvent = AERecord;
pub const AppleEventPtr = [*c]AppleEvent;
pub const AEReturnID = SInt16;
pub const AETransactionID = SInt32;
pub const AEEventClass = FourCharCode;
pub const AEEventID = FourCharCode;
pub const AEArrayType = SInt8;
pub const kAEDataArray: c_int = 0;
pub const kAEPackedArray: c_int = 1;
pub const kAEDescArray: c_int = 3;
pub const kAEKeyDescArray: c_int = 4;
const enum_unnamed_857 = c_uint;
pub const kAEHandleArray: c_int = 2;
const enum_unnamed_858 = c_uint;
pub const union_AEArrayData = extern union {
    kAEDataArray: [1]SInt16,
    kAEPackedArray: [1]u8,
    kAEHandleArray: [1]Handle,
    kAEDescArray: [1]AEDesc,
    kAEKeyDescArray: [1]AEKeyDesc,
};
pub const AEArrayData = union_AEArrayData;
pub const AEArrayDataPointer = [*c]AEArrayData;
pub const AESendPriority = SInt16;
pub const kAENormalPriority: c_int = 0;
pub const kAEHighPriority: c_int = 1;
const enum_unnamed_859 = c_uint;
pub const AESendMode = SInt32;
pub const kAENoReply: c_int = 1;
pub const kAEQueueReply: c_int = 2;
pub const kAEWaitReply: c_int = 3;
pub const kAEDontReconnect: c_int = 128;
pub const kAEWantReceipt: c_int = 512;
pub const kAENeverInteract: c_int = 16;
pub const kAECanInteract: c_int = 32;
pub const kAEAlwaysInteract: c_int = 48;
pub const kAECanSwitchLayer: c_int = 64;
pub const kAEDontRecord: c_int = 4096;
pub const kAEDontExecute: c_int = 8192;
pub const kAEProcessNonReplyEvents: c_int = 32768;
pub const kAEDoNotAutomaticallyAddAnnotationsToEvent: c_int = 65536;
const enum_unnamed_860 = c_uint;
pub const kAEDefaultTimeout: c_int = -1;
pub const kNoTimeOut: c_int = -2;
const enum_unnamed_861 = c_int;
pub const AECoerceDescProcPtr = ?*const fn ([*c]const AEDesc, DescType, SRefCon, [*c]AEDesc) callconv(.C) OSErr;
pub const AECoercePtrProcPtr = ?*const fn (DescType, ?*const anyopaque, Size, DescType, SRefCon, [*c]AEDesc) callconv(.C) OSErr;
pub const AECoerceDescUPP = AECoerceDescProcPtr;
pub const AECoercePtrUPP = AECoercePtrProcPtr;
pub extern fn NewAECoerceDescUPP(userRoutine: AECoerceDescProcPtr) AECoerceDescUPP;
pub extern fn NewAECoercePtrUPP(userRoutine: AECoercePtrProcPtr) AECoercePtrUPP;
pub extern fn DisposeAECoerceDescUPP(userUPP: AECoerceDescUPP) void;
pub extern fn DisposeAECoercePtrUPP(userUPP: AECoercePtrUPP) void;
pub extern fn InvokeAECoerceDescUPP(fromDesc: [*c]const AEDesc, toType: DescType, handlerRefcon: SRefCon, toDesc: [*c]AEDesc, userUPP: AECoerceDescUPP) OSErr;
pub extern fn InvokeAECoercePtrUPP(typeCode: DescType, dataPtr: ?*const anyopaque, dataSize: Size, toType: DescType, handlerRefcon: SRefCon, result: [*c]AEDesc, userUPP: AECoercePtrUPP) OSErr;
pub const AECoercionHandlerUPP = AECoerceDescUPP;
pub extern fn AEInstallCoercionHandler(fromType: DescType, toType: DescType, handler: AECoercionHandlerUPP, handlerRefcon: SRefCon, fromTypeIsDesc: Boolean, isSysHandler: Boolean) OSErr;
pub extern fn AERemoveCoercionHandler(fromType: DescType, toType: DescType, handler: AECoercionHandlerUPP, isSysHandler: Boolean) OSErr;
pub extern fn AEGetCoercionHandler(fromType: DescType, toType: DescType, handler: [*c]AECoercionHandlerUPP, handlerRefcon: [*c]SRefCon, fromTypeIsDesc: [*c]Boolean, isSysHandler: Boolean) OSErr;
pub extern fn AECoercePtr(typeCode: DescType, dataPtr: ?*const anyopaque, dataSize: Size, toType: DescType, result: [*c]AEDesc) OSErr;
pub extern fn AECoerceDesc(theAEDesc: [*c]const AEDesc, toType: DescType, result: [*c]AEDesc) OSErr;
pub extern fn AEInitializeDesc(desc: [*c]AEDesc) void;
pub extern fn AECreateDesc(typeCode: DescType, dataPtr: ?*const anyopaque, dataSize: Size, result: [*c]AEDesc) OSErr;
pub extern fn AEDisposeDesc(theAEDesc: [*c]AEDesc) OSErr;
pub extern fn AEDuplicateDesc(theAEDesc: [*c]const AEDesc, result: [*c]AEDesc) OSErr;
pub const AEDisposeExternalProcPtr = ?*const fn (?*const anyopaque, Size, SRefCon) callconv(.C) void;
pub const AEDisposeExternalUPP = AEDisposeExternalProcPtr;
pub extern fn AECreateDescFromExternalPtr(descriptorType: OSType, dataPtr: ?*const anyopaque, dataLength: Size, disposeCallback: AEDisposeExternalUPP, disposeRefcon: SRefCon, theDesc: [*c]AEDesc) OSStatus;
pub extern fn AECompareDesc(desc1: [*c]const AEDesc, desc2: [*c]const AEDesc, resultP: [*c]Boolean) OSStatus;
pub extern fn AECreateList(factoringPtr: ?*const anyopaque, factoredSize: Size, isRecord: Boolean, resultList: [*c]AEDescList) OSErr;
pub extern fn AECountItems(theAEDescList: [*c]const AEDescList, theCount: [*c]c_long) OSErr;
pub extern fn AEPutPtr(theAEDescList: [*c]AEDescList, index: c_long, typeCode: DescType, dataPtr: ?*const anyopaque, dataSize: Size) OSErr;
pub extern fn AEPutDesc(theAEDescList: [*c]AEDescList, index: c_long, theAEDesc: [*c]const AEDesc) OSErr;
pub extern fn AEGetNthPtr(theAEDescList: [*c]const AEDescList, index: c_long, desiredType: DescType, theAEKeyword: [*c]AEKeyword, typeCode: [*c]DescType, dataPtr: ?*anyopaque, maximumSize: Size, actualSize: [*c]Size) OSErr;
pub extern fn AEGetNthDesc(theAEDescList: [*c]const AEDescList, index: c_long, desiredType: DescType, theAEKeyword: [*c]AEKeyword, result: [*c]AEDesc) OSErr;
pub extern fn AESizeOfNthItem(theAEDescList: [*c]const AEDescList, index: c_long, typeCode: [*c]DescType, dataSize: [*c]Size) OSErr;
pub extern fn AEGetArray(theAEDescList: [*c]const AEDescList, arrayType: AEArrayType, arrayPtr: AEArrayDataPointer, maximumSize: Size, itemType: [*c]DescType, itemSize: [*c]Size, itemCount: [*c]c_long) OSErr;
pub extern fn AEPutArray(theAEDescList: [*c]AEDescList, arrayType: AEArrayType, arrayPtr: [*c]const AEArrayData, itemType: DescType, itemSize: Size, itemCount: c_long) OSErr;
pub extern fn AEDeleteItem(theAEDescList: [*c]AEDescList, index: c_long) OSErr;
pub extern fn AECheckIsRecord(theDesc: [*c]const AEDesc) Boolean;
pub extern fn AECreateAppleEvent(theAEEventClass: AEEventClass, theAEEventID: AEEventID, target: [*c]const AEAddressDesc, returnID: AEReturnID, transactionID: AETransactionID, result: [*c]AppleEvent) OSErr;
pub extern fn AEPutParamPtr(theAppleEvent: [*c]AppleEvent, theAEKeyword: AEKeyword, typeCode: DescType, dataPtr: ?*const anyopaque, dataSize: Size) OSErr;
pub extern fn AEPutParamDesc(theAppleEvent: [*c]AppleEvent, theAEKeyword: AEKeyword, theAEDesc: [*c]const AEDesc) OSErr;
pub extern fn AEGetParamPtr(theAppleEvent: [*c]const AppleEvent, theAEKeyword: AEKeyword, desiredType: DescType, actualType: [*c]DescType, dataPtr: ?*anyopaque, maximumSize: Size, actualSize: [*c]Size) OSErr;
pub extern fn AEGetParamDesc(theAppleEvent: [*c]const AppleEvent, theAEKeyword: AEKeyword, desiredType: DescType, result: [*c]AEDesc) OSErr;
pub extern fn AESizeOfParam(theAppleEvent: [*c]const AppleEvent, theAEKeyword: AEKeyword, typeCode: [*c]DescType, dataSize: [*c]Size) OSErr;
pub extern fn AEDeleteParam(theAppleEvent: [*c]AppleEvent, theAEKeyword: AEKeyword) OSErr;
pub extern fn AEGetAttributePtr(theAppleEvent: [*c]const AppleEvent, theAEKeyword: AEKeyword, desiredType: DescType, typeCode: [*c]DescType, dataPtr: ?*anyopaque, maximumSize: Size, actualSize: [*c]Size) OSErr;
pub extern fn AEGetAttributeDesc(theAppleEvent: [*c]const AppleEvent, theAEKeyword: AEKeyword, desiredType: DescType, result: [*c]AEDesc) OSErr;
pub extern fn AESizeOfAttribute(theAppleEvent: [*c]const AppleEvent, theAEKeyword: AEKeyword, typeCode: [*c]DescType, dataSize: [*c]Size) OSErr;
pub extern fn AEPutAttributePtr(theAppleEvent: [*c]AppleEvent, theAEKeyword: AEKeyword, typeCode: DescType, dataPtr: ?*const anyopaque, dataSize: Size) OSErr;
pub extern fn AEPutAttributeDesc(theAppleEvent: [*c]AppleEvent, theAEKeyword: AEKeyword, theAEDesc: [*c]const AEDesc) OSErr;
pub extern fn AESizeOfFlattenedDesc(theAEDesc: [*c]const AEDesc) Size;
pub extern fn AEFlattenDesc(theAEDesc: [*c]const AEDesc, buffer: Ptr, bufferSize: Size, actualSize: [*c]Size) OSStatus;
pub extern fn AEUnflattenDesc(buffer: ?*const anyopaque, result: [*c]AEDesc) OSStatus;
pub extern fn AEUnflattenDescFromBytes(buffer: ?*const anyopaque, bufferLen: usize, result: [*c]AEDesc) OSStatus;
pub extern fn AEGetDescData(theAEDesc: [*c]const AEDesc, dataPtr: ?*anyopaque, maximumSize: Size) OSErr;
pub extern fn AEGetDescDataSize(theAEDesc: [*c]const AEDesc) Size;
pub extern fn AEReplaceDescData(typeCode: DescType, dataPtr: ?*const anyopaque, dataSize: Size, theAEDesc: [*c]AEDesc) OSErr;
pub extern fn AEGetDescDataRange(dataDesc: [*c]const AEDesc, buffer: ?*anyopaque, offset: Size, length: Size) OSStatus;
pub const AEEventHandlerProcPtr = ?*const fn ([*c]const AppleEvent, [*c]AppleEvent, SRefCon) callconv(.C) OSErr;
pub const AEEventHandlerUPP = AEEventHandlerProcPtr;
pub extern fn NewAEDisposeExternalUPP(userRoutine: AEDisposeExternalProcPtr) AEDisposeExternalUPP;
pub extern fn NewAEEventHandlerUPP(userRoutine: AEEventHandlerProcPtr) AEEventHandlerUPP;
pub extern fn DisposeAEDisposeExternalUPP(userUPP: AEDisposeExternalUPP) void;
pub extern fn DisposeAEEventHandlerUPP(userUPP: AEEventHandlerUPP) void;
pub extern fn InvokeAEDisposeExternalUPP(dataPtr: ?*const anyopaque, dataLength: Size, refcon: SRefCon, userUPP: AEDisposeExternalUPP) void;
pub extern fn InvokeAEEventHandlerUPP(theAppleEvent: [*c]const AppleEvent, reply: [*c]AppleEvent, handlerRefcon: SRefCon, userUPP: AEEventHandlerUPP) OSErr;
pub const keyDirectObject: c_int = 757935405;
pub const keyErrorNumber: c_int = 1701999214;
pub const keyErrorString: c_int = 1701999219;
pub const keyProcessSerialNumber: c_int = 1886613024;
pub const keyPreDispatch: c_int = 1885888867;
pub const keySelectProc: c_int = 1936026728;
pub const keyAERecorderCount: c_int = 1919247218;
pub const keyAEVersion: c_int = 1986359923;
const enum_unnamed_862 = c_uint;
pub const kCoreEventClass: c_int = 1634039412;
const enum_unnamed_863 = c_uint;
pub const kAEOpenApplication: c_int = 1868656752;
pub const kAEOpenDocuments: c_int = 1868853091;
pub const kAEPrintDocuments: c_int = 1885630307;
pub const kAEOpenContents: c_int = 1868787566;
pub const kAEQuitApplication: c_int = 1903520116;
pub const kAEAnswer: c_int = 1634628466;
pub const kAEApplicationDied: c_int = 1868720500;
pub const kAEShowPreferences: c_int = 1886545254;
const enum_unnamed_864 = c_uint;
pub const kAEStartRecording: c_int = 1919247201;
pub const kAEStopRecording: c_int = 1919247203;
pub const kAENotifyStartRecording: c_int = 1919247153;
pub const kAENotifyStopRecording: c_int = 1919247152;
pub const kAENotifyRecording: c_int = 1919247218;
const enum_unnamed_865 = c_uint;
pub const AEEventSource = SInt8;
pub const kAEUnknownSource: c_int = 0;
pub const kAEDirectCall: c_int = 1;
pub const kAESameProcess: c_int = 2;
pub const kAELocalProcess: c_int = 3;
pub const kAERemoteProcess: c_int = 4;
const enum_unnamed_866 = c_uint;
pub const errAETargetAddressNotPermitted: c_int = -1742;
pub const errAEEventNotPermitted: c_int = -1743;
const enum_unnamed_867 = c_int;
pub extern fn AEInstallEventHandler(theAEEventClass: AEEventClass, theAEEventID: AEEventID, handler: AEEventHandlerUPP, handlerRefcon: SRefCon, isSysHandler: Boolean) OSErr;
pub extern fn AERemoveEventHandler(theAEEventClass: AEEventClass, theAEEventID: AEEventID, handler: AEEventHandlerUPP, isSysHandler: Boolean) OSErr;
pub extern fn AEGetEventHandler(theAEEventClass: AEEventClass, theAEEventID: AEEventID, handler: [*c]AEEventHandlerUPP, handlerRefcon: [*c]SRefCon, isSysHandler: Boolean) OSErr;
pub extern fn AEInstallSpecialHandler(functionClass: AEKeyword, handler: AEEventHandlerUPP, isSysHandler: Boolean) OSErr;
pub extern fn AERemoveSpecialHandler(functionClass: AEKeyword, handler: AEEventHandlerUPP, isSysHandler: Boolean) OSErr;
pub extern fn AEGetSpecialHandler(functionClass: AEKeyword, handler: [*c]AEEventHandlerUPP, isSysHandler: Boolean) OSErr;
pub extern fn AEManagerInfo(keyWord: AEKeyword, result: [*c]c_long) OSErr;
pub extern const kAERemoteProcessURLKey: CFStringRef;
pub extern const kAERemoteProcessNameKey: CFStringRef;
pub extern const kAERemoteProcessUserIDKey: CFStringRef;
pub extern const kAERemoteProcessProcessIDKey: CFStringRef;
pub const struct_AERemoteProcessResolverContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: CFAllocatorRetainCallBack,
    release: CFAllocatorReleaseCallBack,
    copyDescription: CFAllocatorCopyDescriptionCallBack,
};
pub const AERemoteProcessResolverContext = struct_AERemoteProcessResolverContext;
pub const struct_AERemoteProcessResolver = opaque {};
pub const AERemoteProcessResolverRef = ?*struct_AERemoteProcessResolver;
pub extern fn AECreateRemoteProcessResolver(allocator: CFAllocatorRef, url: CFURLRef) AERemoteProcessResolverRef;
pub extern fn AEDisposeRemoteProcessResolver(ref: AERemoteProcessResolverRef) void;
pub extern fn AERemoteProcessResolverGetProcesses(ref: AERemoteProcessResolverRef, outError: [*c]CFStreamError) CFArrayRef;
pub const AERemoteProcessResolverCallback = ?*const fn (AERemoteProcessResolverRef, ?*anyopaque) callconv(.C) void;
pub extern fn AERemoteProcessResolverScheduleWithRunLoop(ref: AERemoteProcessResolverRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef, callback: AERemoteProcessResolverCallback, ctx: [*c]const AERemoteProcessResolverContext) void;
pub extern fn AEDeterminePermissionToAutomateTarget(target: [*c]const AEAddressDesc, theAEEventClass: AEEventClass, theAEEventID: AEEventID, askUserIfNeeded: Boolean) OSStatus;
pub const errAEEventWouldRequireUserConsent: c_int = -1744;
const enum_unnamed_868 = c_int;
pub const kAEDoNotPromptForUserConsent: c_int = 131072;
const enum_unnamed_869 = c_uint;
pub extern fn CreateOffsetDescriptor(theOffset: c_long, theDescriptor: [*c]AEDesc) OSErr;
pub extern fn CreateCompDescriptor(comparisonOperator: DescType, operand1: [*c]AEDesc, operand2: [*c]AEDesc, disposeInputs: Boolean, theDescriptor: [*c]AEDesc) OSErr;
pub extern fn CreateLogicalDescriptor(theLogicalTerms: [*c]AEDescList, theLogicOperator: DescType, disposeInputs: Boolean, theDescriptor: [*c]AEDesc) OSErr;
pub extern fn CreateObjSpecifier(desiredClass: DescType, theContainer: [*c]AEDesc, keyForm: DescType, keyData: [*c]AEDesc, disposeInputs: Boolean, objSpecifier: [*c]AEDesc) OSErr;
pub extern fn CreateRangeDescriptor(rangeStart: [*c]AEDesc, rangeStop: [*c]AEDesc, disposeInputs: Boolean, theDescriptor: [*c]AEDesc) OSErr;
pub const kAEAND: c_int = 1095648288;
pub const kAEOR: c_int = 1330782240;
pub const kAENOT: c_int = 1313821728;
pub const kAEFirst: c_int = 1718186611;
pub const kAELast: c_int = 1818325876;
pub const kAEMiddle: c_int = 1835623524;
pub const kAEAny: c_int = 1634629920;
pub const kAEAll: c_int = 1634495520;
pub const kAENext: c_int = 1852143732;
pub const kAEPrevious: c_int = 1886545270;
pub const keyAECompOperator: c_int = 1919249519;
pub const keyAELogicalTerms: c_int = 1952805485;
pub const keyAELogicalOperator: c_int = 1819240291;
pub const keyAEObject1: c_int = 1868720689;
pub const keyAEObject2: c_int = 1868720690;
pub const keyAEDesiredClass: c_int = 2002873972;
pub const keyAEContainer: c_int = 1718775661;
pub const keyAEKeyForm: c_int = 1718579821;
pub const keyAEKeyData: c_int = 1936026724;
const enum_unnamed_870 = c_uint;
pub const keyAERangeStart: c_int = 1937006962;
pub const keyAERangeStop: c_int = 1937010544;
pub const keyDisposeTokenProc: c_int = 2020896619;
pub const keyAECompareProc: c_int = 1668116594;
pub const keyAECountProc: c_int = 1668247156;
pub const keyAEMarkTokenProc: c_int = 1835755876;
pub const keyAEMarkProc: c_int = 1835102827;
pub const keyAEAdjustMarksProc: c_int = 1633970797;
pub const keyAEGetErrDescProc: c_int = 1768842339;
const enum_unnamed_871 = c_uint;
pub const formAbsolutePosition: c_int = 1768842360;
pub const formRelativePosition: c_int = 1919249509;
pub const formTest: c_int = 1952805748;
pub const formRange: c_int = 1918987879;
pub const formPropertyID: c_int = 1886547824;
pub const formName: c_int = 1851878757;
pub const formUniqueID: c_int = 1229201440;
const enum_unnamed_872 = c_uint;
pub const typeObjectSpecifier: c_int = 1868720672;
pub const typeObjectBeingExamined: c_int = 1702391150;
pub const typeCurrentContainer: c_int = 1667460724;
pub const typeToken: c_int = 1953459045;
pub const typeRelativeDescriptor: c_int = 1919249440;
pub const typeAbsoluteOrdinal: c_int = 1633842031;
pub const typeIndexDescriptor: c_int = 1768842341;
pub const typeRangeDescriptor: c_int = 1918987879;
pub const typeLogicalDescriptor: c_int = 1819240297;
pub const typeCompDescriptor: c_int = 1668116580;
pub const typeOSLTokenList: c_int = 1869837420;
const enum_unnamed_873 = c_uint;
pub const kAEIDoMinimum: c_int = 0;
pub const kAEIDoWhose: c_int = 1;
pub const kAEIDoMarking: c_int = 4;
pub const kAEPassSubDescs: c_int = 8;
pub const kAEResolveNestedLists: c_int = 16;
pub const kAEHandleSimpleRanges: c_int = 32;
pub const kAEUseRelativeIterators: c_int = 64;
const enum_unnamed_874 = c_uint;
pub const typeWhoseDescriptor: c_int = 2003332979;
pub const formWhose: c_int = 2003332979;
pub const typeWhoseRange: c_int = 2003988071;
pub const keyAEWhoseRangeStart: c_int = 2004055154;
pub const keyAEWhoseRangeStop: c_int = 2004055152;
pub const keyAEIndex: c_int = 1802069112;
pub const keyAETest: c_int = 1802793844;
const enum_unnamed_875 = c_uint;
pub const struct_ccntTokenRecord = extern struct {
    tokenClass: DescType,
    token: AEDesc,
};
pub const ccntTokenRecord = struct_ccntTokenRecord;
pub const ccntTokenRecPtr = [*c]ccntTokenRecord;
pub const ccntTokenRecHandle = [*c]ccntTokenRecPtr;
pub const OSLAccessorProcPtr = ?*const fn (DescType, [*c]const AEDesc, DescType, DescType, [*c]const AEDesc, [*c]AEDesc, SRefCon) callconv(.C) OSErr;
pub const OSLCompareProcPtr = ?*const fn (DescType, [*c]const AEDesc, [*c]const AEDesc, [*c]Boolean) callconv(.C) OSErr;
pub const OSLCountProcPtr = ?*const fn (DescType, DescType, [*c]const AEDesc, [*c]c_long) callconv(.C) OSErr;
pub const OSLDisposeTokenProcPtr = ?*const fn ([*c]AEDesc) callconv(.C) OSErr;
pub const OSLGetMarkTokenProcPtr = ?*const fn ([*c]const AEDesc, DescType, [*c]AEDesc) callconv(.C) OSErr;
pub const OSLGetErrDescProcPtr = ?*const fn ([*c][*c]AEDesc) callconv(.C) OSErr;
pub const OSLMarkProcPtr = ?*const fn ([*c]const AEDesc, [*c]const AEDesc, c_long) callconv(.C) OSErr;
pub const OSLAdjustMarksProcPtr = ?*const fn (c_long, c_long, [*c]const AEDesc) callconv(.C) OSErr;
pub const OSLAccessorUPP = OSLAccessorProcPtr;
pub const OSLCompareUPP = OSLCompareProcPtr;
pub const OSLCountUPP = OSLCountProcPtr;
pub const OSLDisposeTokenUPP = OSLDisposeTokenProcPtr;
pub const OSLGetMarkTokenUPP = OSLGetMarkTokenProcPtr;
pub const OSLGetErrDescUPP = OSLGetErrDescProcPtr;
pub const OSLMarkUPP = OSLMarkProcPtr;
pub const OSLAdjustMarksUPP = OSLAdjustMarksProcPtr;
pub extern fn NewOSLAccessorUPP(userRoutine: OSLAccessorProcPtr) OSLAccessorUPP;
pub extern fn NewOSLCompareUPP(userRoutine: OSLCompareProcPtr) OSLCompareUPP;
pub extern fn NewOSLCountUPP(userRoutine: OSLCountProcPtr) OSLCountUPP;
pub extern fn NewOSLDisposeTokenUPP(userRoutine: OSLDisposeTokenProcPtr) OSLDisposeTokenUPP;
pub extern fn NewOSLGetMarkTokenUPP(userRoutine: OSLGetMarkTokenProcPtr) OSLGetMarkTokenUPP;
pub extern fn NewOSLGetErrDescUPP(userRoutine: OSLGetErrDescProcPtr) OSLGetErrDescUPP;
pub extern fn NewOSLMarkUPP(userRoutine: OSLMarkProcPtr) OSLMarkUPP;
pub extern fn NewOSLAdjustMarksUPP(userRoutine: OSLAdjustMarksProcPtr) OSLAdjustMarksUPP;
pub extern fn DisposeOSLAccessorUPP(userUPP: OSLAccessorUPP) void;
pub extern fn DisposeOSLCompareUPP(userUPP: OSLCompareUPP) void;
pub extern fn DisposeOSLCountUPP(userUPP: OSLCountUPP) void;
pub extern fn DisposeOSLDisposeTokenUPP(userUPP: OSLDisposeTokenUPP) void;
pub extern fn DisposeOSLGetMarkTokenUPP(userUPP: OSLGetMarkTokenUPP) void;
pub extern fn DisposeOSLGetErrDescUPP(userUPP: OSLGetErrDescUPP) void;
pub extern fn DisposeOSLMarkUPP(userUPP: OSLMarkUPP) void;
pub extern fn DisposeOSLAdjustMarksUPP(userUPP: OSLAdjustMarksUPP) void;
pub extern fn InvokeOSLAccessorUPP(desiredClass: DescType, container: [*c]const AEDesc, containerClass: DescType, form: DescType, selectionData: [*c]const AEDesc, value: [*c]AEDesc, accessorRefcon: SRefCon, userUPP: OSLAccessorUPP) OSErr;
pub extern fn InvokeOSLCompareUPP(oper: DescType, obj1: [*c]const AEDesc, obj2: [*c]const AEDesc, result: [*c]Boolean, userUPP: OSLCompareUPP) OSErr;
pub extern fn InvokeOSLCountUPP(desiredType: DescType, containerClass: DescType, container: [*c]const AEDesc, result: [*c]c_long, userUPP: OSLCountUPP) OSErr;
pub extern fn InvokeOSLDisposeTokenUPP(unneededToken: [*c]AEDesc, userUPP: OSLDisposeTokenUPP) OSErr;
pub extern fn InvokeOSLGetMarkTokenUPP(dContainerToken: [*c]const AEDesc, containerClass: DescType, result: [*c]AEDesc, userUPP: OSLGetMarkTokenUPP) OSErr;
pub extern fn InvokeOSLGetErrDescUPP(appDescPtr: [*c][*c]AEDesc, userUPP: OSLGetErrDescUPP) OSErr;
pub extern fn InvokeOSLMarkUPP(dToken: [*c]const AEDesc, markToken: [*c]const AEDesc, index: c_long, userUPP: OSLMarkUPP) OSErr;
pub extern fn InvokeOSLAdjustMarksUPP(newStart: c_long, newStop: c_long, markToken: [*c]const AEDesc, userUPP: OSLAdjustMarksUPP) OSErr;
pub extern fn AEObjectInit() OSErr;
pub extern fn AESetObjectCallbacks(myCompareProc: OSLCompareUPP, myCountProc: OSLCountUPP, myDisposeTokenProc: OSLDisposeTokenUPP, myGetMarkTokenProc: OSLGetMarkTokenUPP, myMarkProc: OSLMarkUPP, myAdjustMarksProc: OSLAdjustMarksUPP, myGetErrDescProcPtr: OSLGetErrDescUPP) OSErr;
pub extern fn AEResolve(objectSpecifier: [*c]const AEDesc, callbackFlags: c_short, theToken: [*c]AEDesc) OSErr;
pub extern fn AEInstallObjectAccessor(desiredClass: DescType, containerType: DescType, theAccessor: OSLAccessorUPP, accessorRefcon: SRefCon, isSysHandler: Boolean) OSErr;
pub extern fn AERemoveObjectAccessor(desiredClass: DescType, containerType: DescType, theAccessor: OSLAccessorUPP, isSysHandler: Boolean) OSErr;
pub extern fn AEGetObjectAccessor(desiredClass: DescType, containerType: DescType, accessor: [*c]OSLAccessorUPP, accessorRefcon: [*c]SRefCon, isSysHandler: Boolean) OSErr;
pub extern fn AEDisposeToken(theToken: [*c]AEDesc) OSErr;
pub extern fn AECallObjectAccessor(desiredClass: DescType, containerToken: [*c]const AEDesc, containerClass: DescType, keyForm: DescType, keyData: [*c]const AEDesc, token: [*c]AEDesc) OSErr;
pub const cAEList: c_int = 1818850164;
pub const cApplication: c_int = 1667330160;
pub const cArc: c_int = 1667330659;
pub const cBoolean: c_int = 1651470188;
pub const cCell: c_int = 1667458412;
pub const cChar: c_int = 1667784992;
pub const cColorTable: c_int = 1668051572;
pub const cColumn: c_int = 1667460972;
pub const cDocument: c_int = 1685021557;
pub const cDrawingArea: c_int = 1667527287;
pub const cEnumeration: c_int = 1701737837;
pub const cFile: c_int = 1718185061;
pub const cFixed: c_int = 1718188132;
pub const cFixedPoint: c_int = 1718644340;
pub const cFixedRectangle: c_int = 1718772596;
pub const cGraphicLine: c_int = 1735158126;
pub const cGraphicObject: c_int = 1667723106;
pub const cGraphicShape: c_int = 1667724136;
pub const cGraphicText: c_int = 1667724408;
pub const cGroupedGraphic: c_int = 1668311395;
const enum_unnamed_876 = c_uint;
pub const cInsertionLoc: c_int = 1768846188;
pub const cInsertionPoint: c_int = 1667853939;
pub const cIntlText: c_int = 1769240692;
pub const cIntlWritingCode: c_int = 1768846444;
pub const cItem: c_int = 1667855469;
pub const cLine: c_int = 1668049262;
pub const cLongDateTime: c_int = 1818522656;
pub const cLongFixed: c_int = 1818654820;
pub const cLongFixedPoint: c_int = 1818652788;
pub const cLongFixedRectangle: c_int = 1818653283;
pub const cLongInteger: c_int = 1819242087;
pub const cLongPoint: c_int = 1819307636;
pub const cLongRectangle: c_int = 1819435892;
pub const cMachineLoc: c_int = 1833725795;
pub const cMenu: c_int = 1668116085;
pub const cMenuItem: c_int = 1668113774;
pub const cObject: c_int = 1668244074;
pub const cObjectSpecifier: c_int = 1868720672;
pub const cOpenableObject: c_int = 1668247394;
pub const cOval: c_int = 1668249196;
const enum_unnamed_877 = c_uint;
pub const cParagraph: c_int = 1668309362;
pub const cPICT: c_int = 1346978644;
pub const cPixel: c_int = 1668315244;
pub const cPixelMap: c_int = 1668311416;
pub const cPolygon: c_int = 1668310894;
pub const cProperty: c_int = 1886547824;
pub const cQDPoint: c_int = 1363439732;
pub const cQDRectangle: c_int = 1902408308;
pub const cRectangle: c_int = 1668441443;
pub const cRGBColor: c_int = 1666336578;
pub const cRotation: c_int = 1953656692;
pub const cRoundedRectangle: c_int = 1668444771;
pub const cRow: c_int = 1668444023;
pub const cSelection: c_int = 1668506988;
pub const cShortInteger: c_int = 1936224114;
pub const cTable: c_int = 1668571756;
pub const cText: c_int = 1668577396;
pub const cTextFlow: c_int = 1667656815;
pub const cTextStyles: c_int = 1953723513;
pub const cType: c_int = 1954115685;
const enum_unnamed_878 = c_uint;
pub const cVersion: c_int = 1986359923;
pub const cWindow: c_int = 1668770158;
pub const cWord: c_int = 1668771698;
pub const enumArrows: c_int = 1634890351;
pub const enumJustification: c_int = 1786082164;
pub const enumKeyForm: c_int = 1801876077;
pub const enumPosition: c_int = 1886352233;
pub const enumProtection: c_int = 1886549102;
pub const enumQuality: c_int = 1903518060;
pub const enumSaveOptions: c_int = 1935767151;
pub const enumStyle: c_int = 1937013100;
pub const enumTransferMode: c_int = 1953653102;
pub const kAEAbout: c_int = 1633841013;
pub const kAEAfter: c_int = 1634104421;
pub const kAEAliasSelection: c_int = 1935764585;
pub const kAEAllCaps: c_int = 1634493296;
pub const kAEArrowAtEnd: c_int = 1634887022;
pub const kAEArrowAtStart: c_int = 1634890612;
pub const kAEArrowBothEnds: c_int = 1634886255;
const enum_unnamed_879 = c_uint;
pub const kAEAsk: c_int = 1634954016;
pub const kAEBefore: c_int = 1650812527;
pub const kAEBeginning: c_int = 1650945639;
pub const kAEBeginsWith: c_int = 1650947956;
pub const kAEBeginTransaction: c_int = 1650812777;
pub const kAEBold: c_int = 1651469412;
pub const kAECaseSensEquals: c_int = 1668506993;
pub const kAECentered: c_int = 1667591796;
pub const kAEChangeView: c_int = 1986618743;
pub const kAEClone: c_int = 1668050798;
pub const kAEClose: c_int = 1668050803;
pub const kAECondensed: c_int = 1668247140;
pub const kAEContains: c_int = 1668247156;
pub const kAECopy: c_int = 1668247673;
pub const kAECoreSuite: c_int = 1668248165;
pub const kAECountElements: c_int = 1668183141;
pub const kAECreateElement: c_int = 1668441452;
pub const kAECreatePublisher: c_int = 1668314466;
pub const kAECut: c_int = 1668641824;
pub const kAEDelete: c_int = 1684368495;
const enum_unnamed_880 = c_uint;
pub const kAEDoObjectsExist: c_int = 1685022072;
pub const kAEDoScript: c_int = 1685025635;
pub const kAEDrag: c_int = 1685217639;
pub const kAEDuplicateSelection: c_int = 1935963504;
pub const kAEEditGraphic: c_int = 1701079412;
pub const kAEEmptyTrash: c_int = 1701671028;
pub const kAEEnd: c_int = 1701733408;
pub const kAEEndsWith: c_int = 1701733491;
pub const kAEEndTransaction: c_int = 1701733492;
pub const kAEEquals: c_int = 1025515552;
pub const kAEExpanded: c_int = 1885698160;
pub const kAEFast: c_int = 1717662580;
pub const kAEFinderEvents: c_int = 1179534418;
pub const kAEFormulaProtect: c_int = 1718645359;
pub const kAEFullyJustified: c_int = 1718971500;
pub const kAEGetClassInfo: c_int = 1903125098;
pub const kAEGetData: c_int = 1734702180;
pub const kAEGetDataSize: c_int = 1685285242;
pub const kAEGetEventInfo: c_int = 1735681385;
pub const kAEGetInfoSelection: c_int = 1936289382;
const enum_unnamed_881 = c_uint;
pub const kAEGetPrivilegeSelection: c_int = 1936749174;
pub const kAEGetSuiteInfo: c_int = 1735684969;
pub const kAEGreaterThan: c_int = 1042292768;
pub const kAEGreaterThanEquals: c_int = 1044193312;
pub const kAEGrow: c_int = 1735552887;
pub const kAEHidden: c_int = 1751737454;
pub const kAEHiQuality: c_int = 1751740789;
pub const kAEImageGraphic: c_int = 1768777586;
pub const kAEIsUniform: c_int = 1769174382;
pub const kAEItalic: c_int = 1769234796;
pub const kAELeftJustified: c_int = 1818584692;
pub const kAELessThan: c_int = 1008738336;
pub const kAELessThanEquals: c_int = 1010638880;
pub const kAELowercase: c_int = 1819244387;
pub const kAEMakeObjectsVisible: c_int = 1836476787;
pub const kAEMiscStandards: c_int = 1835627363;
pub const kAEModifiable: c_int = 1836016742;
pub const kAEMove: c_int = 1836021349;
pub const kAENo: c_int = 1852776480;
pub const kAENoArrow: c_int = 1634889327;
const enum_unnamed_882 = c_uint;
pub const kAENonmodifiable: c_int = 1852665700;
pub const kAEOpen: c_int = 1868853091;
pub const kAEOpenSelection: c_int = 1936683109;
pub const kAEOutline: c_int = 1869968492;
pub const kAEPageSetup: c_int = 1885827957;
pub const kAEPaste: c_int = 1885434740;
pub const kAEPlain: c_int = 1886151022;
pub const kAEPrint: c_int = 1885630307;
pub const kAEPrintSelection: c_int = 1936749161;
pub const kAEPrintWindow: c_int = 1886873966;
pub const kAEPutAwaySelection: c_int = 1936749940;
pub const kAEQDAddOver: c_int = 1633969263;
pub const kAEQDAddPin: c_int = 1633969264;
pub const kAEQDAdMax: c_int = 1633971576;
pub const kAEQDAdMin: c_int = 1633971566;
pub const kAEQDBic: c_int = 1651073824;
pub const kAEQDBlend: c_int = 1651273316;
pub const kAEQDCopy: c_int = 1668315424;
pub const kAEQDNotBic: c_int = 1851943267;
pub const kAEQDNotCopy: c_int = 1852010617;
const enum_unnamed_883 = c_uint;
pub const kAEQDNotOr: c_int = 1853124466;
pub const kAEQDNotXor: c_int = 1853386610;
pub const kAEQDOr: c_int = 1869750304;
pub const kAEQDSubOver: c_int = 1937072751;
pub const kAEQDSubPin: c_int = 1937072752;
pub const kAEQDSupplementalSuite: c_int = 1902408560;
pub const kAEQDXor: c_int = 2020569632;
pub const kAEQuickdrawSuite: c_int = 1902408311;
pub const kAEQuitAll: c_int = 1903520097;
pub const kAERedo: c_int = 1919247471;
pub const kAERegular: c_int = 1919248236;
pub const kAEReopenApplication: c_int = 1918988400;
pub const kAEReplace: c_int = 1919970403;
pub const kAERequiredSuite: c_int = 1919250788;
pub const kAERestart: c_int = 1919251316;
pub const kAERevealSelection: c_int = 1936876918;
pub const kAERevert: c_int = 1920365172;
pub const kAERightJustified: c_int = 1919379572;
pub const kAESave: c_int = 1935767141;
pub const kAESelect: c_int = 1936483188;
pub const kAESetData: c_int = 1936028772;
const enum_unnamed_884 = c_uint;
pub const kAESetPosition: c_int = 1886352238;
pub const kAEShadow: c_int = 1936220516;
pub const kAEShowClipboard: c_int = 1936221036;
pub const kAEShutDown: c_int = 1936225652;
pub const kAESleep: c_int = 1936483696;
pub const kAESmallCaps: c_int = 1936548720;
pub const kAESpecialClassProperties: c_int = 1665147681;
pub const kAEStrikethrough: c_int = 1937011307;
pub const kAESubscript: c_int = 1935831907;
pub const kAESuperscript: c_int = 1936749411;
pub const kAETableSuite: c_int = 1952607347;
pub const kAETextSuite: c_int = 1413830740;
pub const kAETransactionTerminated: c_int = 1953788525;
pub const kAEUnderline: c_int = 1970168940;
pub const kAEUndo: c_int = 1970168943;
pub const kAEWholeWordEquals: c_int = 2004313457;
pub const kAEYes: c_int = 2036691744;
pub const kAEZoom: c_int = 2054123373;
const enum_unnamed_885 = c_uint;
pub const kAELogOut: c_int = 1819240303;
pub const kAEReallyLogOut: c_int = 1919706991;
pub const kAEShowRestartDialog: c_int = 1920103284;
pub const kAEShowShutdownDialog: c_int = 1920164974;
const enum_unnamed_886 = c_uint;
pub const kAEMouseClass: c_int = 1836021107;
pub const kAEDown: c_int = 1685026670;
pub const kAEUp: c_int = 1970282528;
pub const kAEMoved: c_int = 1836021349;
pub const kAEStoppedMoving: c_int = 1937010544;
pub const kAEWindowClass: c_int = 2003398244;
pub const kAEUpdate: c_int = 1970300020;
pub const kAEActivate: c_int = 1633907830;
pub const kAEDeactivate: c_int = 1684104052;
pub const kAECommandClass: c_int = 1668116068;
pub const kAEKeyClass: c_int = 1801812323;
pub const kAERawKey: c_int = 1919640953;
pub const kAEVirtualKey: c_int = 1801812323;
pub const kAENavigationKey: c_int = 1851881061;
pub const kAEAutoDown: c_int = 1635087471;
pub const kAEApplicationClass: c_int = 1634758764;
pub const kAESuspend: c_int = 1937077104;
pub const kAEResume: c_int = 1920167269;
pub const kAEDiskEvent: c_int = 1684632427;
pub const kAENullEvent: c_int = 1853189228;
pub const kAEWakeUpEvent: c_int = 2002873189;
pub const kAEScrapEvent: c_int = 1935897200;
pub const kAEHighLevel: c_int = 1751738216;
const enum_unnamed_887 = c_uint;
pub const keyAEAngle: c_int = 1801547367;
pub const keyAEArcAngle: c_int = 1885434467;
const enum_unnamed_888 = c_uint;
pub const keyAEBaseAddr: c_int = 1650549860;
pub const keyAEBestType: c_int = 1885500276;
pub const keyAEBgndColor: c_int = 1801610092;
pub const keyAEBgndPattern: c_int = 1801613428;
pub const keyAEBounds: c_int = 1885498980;
pub const keyAECellList: c_int = 1801677940;
pub const keyAEClassID: c_int = 1668041028;
pub const keyAEColor: c_int = 1668246642;
pub const keyAEColorTable: c_int = 1668052066;
pub const keyAECurveHeight: c_int = 1801676900;
pub const keyAECurveWidth: c_int = 1801680740;
pub const keyAEDashStyle: c_int = 1885631348;
pub const keyAEData: c_int = 1684108385;
pub const keyAEDefaultType: c_int = 1684366964;
pub const keyAEDefinitionRect: c_int = 1885631092;
pub const keyAEDescType: c_int = 1685288048;
pub const keyAEDestination: c_int = 1684370292;
pub const keyAEDoAntiAlias: c_int = 1634628705;
pub const keyAEDoDithered: c_int = 1734633844;
pub const keyAEDoRotate: c_int = 1801745012;
const enum_unnamed_889 = c_uint;
pub const keyAEDoScale: c_int = 1802724193;
pub const keyAEDoTranslate: c_int = 1802793569;
pub const keyAEEditionFileLoc: c_int = 1701605219;
pub const keyAEElements: c_int = 1701604723;
pub const keyAEEndPoint: c_int = 1885695588;
pub const keyAEEventClass: c_int = 1702257516;
pub const keyAEEventID: c_int = 1702261865;
pub const keyAEFile: c_int = 1801873772;
pub const keyAEFileType: c_int = 1718383728;
pub const keyAEFillColor: c_int = 1718379372;
pub const keyAEFillPattern: c_int = 1718382708;
pub const keyAEFlipHorizontal: c_int = 1801873519;
pub const keyAEFlipVertical: c_int = 1801877108;
pub const keyAEFont: c_int = 1718578804;
pub const keyAEFormula: c_int = 1885761394;
pub const keyAEGraphicObjects: c_int = 1735352947;
pub const keyAEID: c_int = 1229201440;
pub const keyAEImageQuality: c_int = 1735488865;
pub const keyAEInsertHere: c_int = 1768846184;
pub const keyAEKeyForms: c_int = 1801812326;
const enum_unnamed_890 = c_uint;
pub const keyAEKeyword: c_int = 1803122532;
pub const keyAELevel: c_int = 1818588780;
pub const keyAELineArrow: c_int = 1634890351;
pub const keyAEName: c_int = 1886282093;
pub const keyAENewElementLoc: c_int = 1886283116;
pub const keyAEObject: c_int = 1802461802;
pub const keyAEObjectClass: c_int = 1802462060;
pub const keyAEOffStyles: c_int = 1868985204;
pub const keyAEOnStyles: c_int = 1869509492;
pub const keyAEParameters: c_int = 1886547315;
pub const keyAEParamFlags: c_int = 1886217831;
pub const keyAEPenColor: c_int = 1886413676;
pub const keyAEPenPattern: c_int = 1886416993;
pub const keyAEPenWidth: c_int = 1886418788;
pub const keyAEPixelDepth: c_int = 1885630580;
pub const keyAEPixMapMinus: c_int = 1802530157;
pub const keyAEPMTable: c_int = 1802530164;
pub const keyAEPointList: c_int = 1886678132;
pub const keyAEPointSize: c_int = 1886679930;
pub const keyAEPosition: c_int = 1802530675;
const enum_unnamed_891 = c_uint;
pub const keyAEPropData: c_int = 1886545012;
pub const keyAEProperties: c_int = 1903194735;
pub const keyAEProperty: c_int = 1802531440;
pub const keyAEPropFlags: c_int = 1886545511;
pub const keyAEPropID: c_int = 1886547824;
pub const keyAEProtection: c_int = 1886417519;
pub const keyAERenderAs: c_int = 1802659182;
pub const keyAERequestedType: c_int = 1920235888;
pub const keyAEResult: c_int = 757935405;
pub const keyAEResultInfo: c_int = 1920166254;
pub const keyAERotation: c_int = 1886547828;
pub const keyAERotPoint: c_int = 1802663024;
pub const keyAERowList: c_int = 1802660979;
pub const keyAESaveOptions: c_int = 1935767151;
pub const keyAEScale: c_int = 1886610284;
pub const keyAEScriptTag: c_int = 1886610292;
pub const keyAESearchText: c_int = 1937012852;
pub const keyAEShowWhere: c_int = 1936224119;
pub const keyAEStartAngle: c_int = 1885433447;
pub const keyAEStartPoint: c_int = 1886614640;
pub const keyAEStyles: c_int = 1802728569;
const enum_unnamed_892 = c_uint;
pub const keyAESuiteID: c_int = 1937074548;
pub const keyAEText: c_int = 1802795124;
pub const keyAETextColor: c_int = 1886681187;
pub const keyAETextFont: c_int = 1886681190;
pub const keyAETextPointSize: c_int = 1886679155;
pub const keyAETextStyles: c_int = 1954050932;
pub const keyAETextLineHeight: c_int = 1802792040;
pub const keyAETextLineAscent: c_int = 1802789235;
pub const keyAETheText: c_int = 1953002616;
pub const keyAETransferMode: c_int = 1886418029;
pub const keyAETranslation: c_int = 1886679667;
pub const keyAETryAsStructGraf: c_int = 1953460071;
pub const keyAEUniformStyles: c_int = 1970500716;
pub const keyAEUpdateOn: c_int = 1886744676;
pub const keyAEUserTerm: c_int = 1970565741;
pub const keyAEWindow: c_int = 2003723383;
pub const keyAEWritingCode: c_int = 2003985252;
const enum_unnamed_893 = c_uint;
pub const keyMiscellaneous: c_int = 1718448995;
pub const keySelection: c_int = 1718838636;
pub const keyWindow: c_int = 1802989156;
pub const keyWhen: c_int = 2003330414;
pub const keyWhere: c_int = 2003330418;
pub const keyModifiers: c_int = 1836016755;
pub const keyKey: c_int = 1801812256;
pub const keyKeyCode: c_int = 1668244581;
pub const keyKeyboard: c_int = 1801812322;
pub const keyDriveNumber: c_int = 1685222947;
pub const keyErrorCode: c_int = 1701999139;
pub const keyHighLevelClass: c_int = 1751346291;
pub const keyHighLevelID: c_int = 1751737376;
const enum_unnamed_894 = c_uint;
pub const pArcAngle: c_int = 1885434467;
pub const pBackgroundColor: c_int = 1885496172;
pub const pBackgroundPattern: c_int = 1885499508;
pub const pBestType: c_int = 1885500276;
pub const pBounds: c_int = 1885498980;
pub const pClass: c_int = 1885564019;
pub const pClipboard: c_int = 1885564009;
pub const pColor: c_int = 1668246642;
pub const pColorTable: c_int = 1668052066;
pub const pContents: c_int = 1885564532;
pub const pCornerCurveHeight: c_int = 1885562980;
pub const pCornerCurveWidth: c_int = 1885566820;
pub const pDashStyle: c_int = 1885631348;
pub const pDefaultType: c_int = 1684366964;
pub const pDefinitionRect: c_int = 1885631092;
pub const pEnabled: c_int = 1701732972;
pub const pEndPoint: c_int = 1885695588;
pub const pFillColor: c_int = 1718379372;
pub const pFillPattern: c_int = 1718382708;
pub const pFont: c_int = 1718578804;
const enum_unnamed_895 = c_uint;
pub const pFormula: c_int = 1885761394;
pub const pGraphicObjects: c_int = 1735352947;
pub const pHasCloseBox: c_int = 1751346274;
pub const pHasTitleBar: c_int = 1886677364;
pub const pID: c_int = 1229201440;
pub const pIndex: c_int = 1885955192;
pub const pInsertionLoc: c_int = 1885957747;
pub const pIsFloating: c_int = 1769170540;
pub const pIsFrontProcess: c_int = 1885959014;
pub const pIsModal: c_int = 1886220132;
pub const pIsModified: c_int = 1768779620;
pub const pIsResizable: c_int = 1886548858;
pub const pIsStationeryPad: c_int = 1886613604;
pub const pIsZoomable: c_int = 1769175661;
pub const pIsZoomed: c_int = 1887073645;
pub const pItemNumber: c_int = 1769237870;
pub const pJustification: c_int = 1886024564;
pub const pLineArrow: c_int = 1634890351;
pub const pMenuID: c_int = 1835952484;
pub const pName: c_int = 1886282093;
const enum_unnamed_896 = c_uint;
pub const pNewElementLoc: c_int = 1886283116;
pub const pPenColor: c_int = 1886413676;
pub const pPenPattern: c_int = 1886416993;
pub const pPenWidth: c_int = 1886418788;
pub const pPixelDepth: c_int = 1885630580;
pub const pPointList: c_int = 1886678132;
pub const pPointSize: c_int = 1886679930;
pub const pProtection: c_int = 1886417519;
pub const pRotation: c_int = 1886547828;
pub const pScale: c_int = 1886610284;
pub const pScript: c_int = 1935896692;
pub const pScriptTag: c_int = 1886610292;
pub const pSelected: c_int = 1936026723;
pub const pSelection: c_int = 1936026725;
pub const pStartAngle: c_int = 1885433447;
pub const pStartPoint: c_int = 1886614640;
pub const pTextColor: c_int = 1886681187;
pub const pTextFont: c_int = 1886681190;
pub const pTextItemDelimiters: c_int = 1954047084;
pub const pTextPointSize: c_int = 1886679155;
const enum_unnamed_897 = c_uint;
pub const pTextStyles: c_int = 1954050932;
pub const pTransferMode: c_int = 1886418029;
pub const pTranslation: c_int = 1886679667;
pub const pUniformStyles: c_int = 1970500716;
pub const pUpdateOn: c_int = 1886744676;
pub const pUserSelection: c_int = 1886745452;
pub const pVersion: c_int = 1986359923;
pub const pVisible: c_int = 1886808435;
const enum_unnamed_898 = c_uint;
pub const typeAEText: c_int = 1951684692;
pub const typeArc: c_int = 1667330659;
pub const typeBest: c_int = 1650815860;
pub const typeCell: c_int = 1667458412;
pub const typeClassInfo: c_int = 1734569065;
pub const typeColorTable: c_int = 1668051572;
pub const typeColumn: c_int = 1667460972;
pub const typeDashStyle: c_int = 1952735603;
pub const typeData: c_int = 1952740449;
pub const typeDrawingArea: c_int = 1667527287;
pub const typeElemInfo: c_int = 1701603694;
pub const typeEnumeration: c_int = 1701737837;
pub const typeEPS: c_int = 1162892064;
pub const typeEventInfo: c_int = 1702259054;
const enum_unnamed_899 = c_uint;
pub const typeFinderWindow: c_int = 1719101806;
pub const typeFixedPoint: c_int = 1718644340;
pub const typeFixedRectangle: c_int = 1718772596;
pub const typeGraphicLine: c_int = 1735158126;
pub const typeGraphicText: c_int = 1667724408;
pub const typeGroupedGraphic: c_int = 1668311395;
pub const typeInsertionLoc: c_int = 1768846188;
pub const typeIntlText: c_int = 1769240692;
pub const typeIntlWritingCode: c_int = 1768846444;
pub const typeLongDateTime: c_int = 1818522656;
pub const typeCFAbsoluteTime: c_int = 1667654004;
pub const typeISO8601DateTime: c_int = 1769172852;
pub const typeLongFixed: c_int = 1818654820;
pub const typeLongFixedPoint: c_int = 1818652788;
pub const typeLongFixedRectangle: c_int = 1818653283;
pub const typeLongPoint: c_int = 1819307636;
pub const typeLongRectangle: c_int = 1819435892;
pub const typeMachineLoc: c_int = 1833725795;
pub const typeOval: c_int = 1668249196;
pub const typeParamInfo: c_int = 1886218606;
pub const typePict: c_int = 1346978644;
const enum_unnamed_900 = c_uint;
pub const typePixelMap: c_int = 1668311416;
pub const typePixMapMinus: c_int = 1953525101;
pub const typePolygon: c_int = 1668310894;
pub const typePropInfo: c_int = 1885957734;
pub const typePtr: c_int = 1886679584;
pub const typeQDPoint: c_int = 1363439732;
pub const typeQDRegion: c_int = 1366452078;
pub const typeRectangle: c_int = 1668441443;
pub const typeRGB16: c_int = 1953640758;
pub const typeRGB96: c_int = 1953642806;
pub const typeRGBColor: c_int = 1666336578;
pub const typeRotation: c_int = 1953656692;
pub const typeRoundedRectangle: c_int = 1668444771;
pub const typeRow: c_int = 1668444023;
pub const typeScrapStyles: c_int = 1937013100;
pub const typeScript: c_int = 1935896692;
pub const typeStyledText: c_int = 1398036564;
pub const typeSuiteInfo: c_int = 1937074542;
pub const typeTable: c_int = 1668571756;
pub const typeTextStyles: c_int = 1953723513;
const enum_unnamed_901 = c_uint;
pub const typeTIFF: c_int = 1414088262;
pub const typeJPEG: c_int = 1246774599;
pub const typeGIF: c_int = 1195984486;
pub const typeVersion: c_int = 1986359923;
const enum_unnamed_902 = c_uint;
pub const kAEMenuClass: c_int = 1835363957;
pub const kAEMenuSelect: c_int = 1835559284;
pub const kAEMouseDown: c_int = 1835300718;
pub const kAEMouseDownInBack: c_int = 1835295339;
pub const kAEKeyDown: c_int = 1801746286;
pub const kAEResized: c_int = 1920166266;
pub const kAEPromise: c_int = 1886547821;
const enum_unnamed_903 = c_uint;
pub const keyMenuID: c_int = 1835623456;
pub const keyMenuItem: c_int = 1835627629;
pub const keyCloseAllWindows: c_int = 1667331872;
pub const keyOriginalBounds: c_int = 1868721764;
pub const keyNewBounds: c_int = 1851944548;
pub const keyLocalWhere: c_int = 1819764850;
const enum_unnamed_904 = c_uint;
pub const typeHIMenu: c_int = 1836016234;
pub const typeHIWindow: c_int = 2003788394;
const enum_unnamed_905 = c_uint;
pub const kAEQuitPreserveState: c_int = 1937006964;
pub const kAEQuitReason: c_int = 2003335487;
const enum_unnamed_906 = c_uint;
pub const kBySmallIcon: c_int = 0;
pub const kByIconView: c_int = 1;
pub const kByNameView: c_int = 2;
pub const kByDateView: c_int = 3;
pub const kBySizeView: c_int = 4;
pub const kByKindView: c_int = 5;
pub const kByCommentView: c_int = 6;
pub const kByLabelView: c_int = 7;
pub const kByVersionView: c_int = 8;
const enum_unnamed_907 = c_uint;
pub const kAEInfo: c_int = 11;
pub const kAEMain: c_int = 0;
pub const kAESharing: c_int = 13;
const enum_unnamed_908 = c_uint;
pub const kAEZoomIn: c_int = 7;
pub const kAEZoomOut: c_int = 8;
const enum_unnamed_909 = c_uint;
pub const kTextServiceClass: c_int = 1953724003;
pub const kUpdateActiveInputArea: c_int = 1970300020;
pub const kShowHideInputWindow: c_int = 1936222583;
pub const kPos2Offset: c_int = 1882354548;
pub const kOffset2Pos: c_int = 1936994928;
pub const kUnicodeNotFromInputMethod: c_int = 1970170221;
pub const kGetSelectedText: c_int = 1735686260;
pub const keyAETSMDocumentRefcon: c_int = 1919247971;
pub const keyAEServerInstance: c_int = 1936881257;
pub const keyAETheData: c_int = 1801740660;
pub const keyAEFixLength: c_int = 1718188140;
pub const keyAEUpdateRange: c_int = 1969516135;
pub const keyAECurrentPoint: c_int = 1668312947;
pub const keyAEBufferSize: c_int = 1651861094;
pub const keyAEMoveView: c_int = 1836480119;
pub const keyAENextBody: c_int = 1853383268;
pub const keyAETSMScriptTag: c_int = 1935895655;
pub const keyAETSMTextFont: c_int = 1802795110;
pub const keyAETSMTextFMFont: c_int = 1802795117;
pub const keyAETSMTextPointSize: c_int = 1802793075;
pub const keyAETSMEventRecord: c_int = 1952806516;
pub const keyAETSMEventRef: c_int = 1952806514;
pub const keyAETextServiceEncoding: c_int = 1953719662;
pub const keyAETextServiceMacEncoding: c_int = 1953326446;
pub const keyAETSMGlyphInfoArray: c_int = 1952934241;
pub const typeTextRange: c_int = 1954050670;
pub const typeComponentInstance: c_int = 1668116585;
pub const typeOffsetArray: c_int = 1868980601;
pub const typeTextRangeArray: c_int = 1953653113;
pub const typeLowLevelEventRecord: c_int = 1702261874;
pub const typeGlyphInfoArray: c_int = 1735158113;
pub const typeEventRef: c_int = 1702261350;
pub const typeText: c_int = 1413830740;
const enum_unnamed_910 = c_uint;
pub const kTSMOutsideOfBody: c_int = 1;
pub const kTSMInsideOfBody: c_int = 2;
pub const kTSMInsideOfActiveInputArea: c_int = 3;
const enum_unnamed_911 = c_uint;
pub const kNextBody: c_int = 1;
pub const kPreviousBody: c_int = 2;
const enum_unnamed_912 = c_uint;
pub const struct_TextRange = extern struct {
    fStart: SInt32,
    fEnd: SInt32,
    fHiliteStyle: SInt16,
};
pub const TextRange = struct_TextRange;
pub const TextRangePtr = [*c]TextRange;
pub const TextRangeHandle = [*c]TextRangePtr;
pub const struct_TextRangeArray = extern struct {
    fNumOfRanges: SInt16,
    fRange: [1]TextRange,
};
pub const TextRangeArray = struct_TextRangeArray;
pub const TextRangeArrayPtr = [*c]TextRangeArray;
pub const TextRangeArrayHandle = [*c]TextRangeArrayPtr;
pub const struct_OffsetArray = extern struct {
    fNumOfOffsets: SInt16,
    fOffset: [1]SInt32,
};
pub const OffsetArray = struct_OffsetArray;
pub const OffsetArrayPtr = [*c]OffsetArray;
pub const OffsetArrayHandle = [*c]OffsetArrayPtr;
pub const struct_WritingCode = extern struct {
    theScriptCode: ScriptCode,
    theLangCode: LangCode,
};
pub const WritingCode = struct_WritingCode;
pub const struct_IntlText = extern struct {
    theScriptCode: ScriptCode,
    theLangCode: LangCode,
    theText: [1]u8,
};
pub const IntlText = struct_IntlText;
pub const kTSMHiliteCaretPosition: c_int = 1;
pub const kTSMHiliteRawText: c_int = 2;
pub const kTSMHiliteSelectedRawText: c_int = 3;
pub const kTSMHiliteConvertedText: c_int = 4;
pub const kTSMHiliteSelectedConvertedText: c_int = 5;
pub const kTSMHiliteBlockFillText: c_int = 6;
pub const kTSMHiliteOutlineText: c_int = 7;
pub const kTSMHiliteSelectedText: c_int = 8;
pub const kTSMHiliteNoHilite: c_int = 9;
const enum_unnamed_913 = c_uint;
pub const keyAEHiliteRange: c_int = 1752329831;
pub const keyAEPinRange: c_int = 1886286439;
pub const keyAEClauseOffsets: c_int = 1668047221;
pub const keyAEOffset: c_int = 1868985204;
pub const keyAEPoint: c_int = 1735421811;
pub const keyAELeftSide: c_int = 1802265958;
pub const keyAERegionClass: c_int = 1919381091;
pub const keyAEDragging: c_int = 1651470188;
const enum_unnamed_914 = c_uint;
pub const typeMeters: c_int = 1835365490;
pub const typeInches: c_int = 1768842088;
pub const typeFeet: c_int = 1717921140;
pub const typeYards: c_int = 2036429412;
pub const typeMiles: c_int = 1835625573;
pub const typeKilometers: c_int = 1802335346;
pub const typeCentimeters: c_int = 1668117618;
pub const typeSquareMeters: c_int = 1936814701;
pub const typeSquareFeet: c_int = 1936811636;
pub const typeSquareYards: c_int = 1936816484;
pub const typeSquareMiles: c_int = 1936813417;
pub const typeSquareKilometers: c_int = 1936812909;
pub const typeLiters: c_int = 1818850418;
pub const typeQuarts: c_int = 1903326323;
pub const typeGallons: c_int = 1734437998;
pub const typeCubicMeters: c_int = 1668113780;
pub const typeCubicFeet: c_int = 1667655028;
pub const typeCubicInches: c_int = 1668639086;
pub const typeCubicCentimeter: c_int = 1667460468;
pub const typeCubicYards: c_int = 1668903524;
pub const typeKilograms: c_int = 1801941613;
pub const typeGrams: c_int = 1735549293;
pub const typeOunces: c_int = 1870295840;
pub const typePounds: c_int = 1818391328;
pub const typeDegreesC: c_int = 1684367203;
pub const typeDegreesF: c_int = 1684367206;
pub const typeDegreesK: c_int = 1684367211;
const enum_unnamed_915 = c_uint;
pub const kFAServerApp: c_int = 1936945782;
pub const kDoFolderActionEvent: c_int = 1718578273;
pub const kFolderActionCode: c_int = 1633907822;
pub const kFolderOpenedEvent: c_int = 1718579310;
pub const kFolderClosedEvent: c_int = 1717791855;
pub const kFolderWindowMovedEvent: c_int = 1718839674;
pub const kFolderItemsAddedEvent: c_int = 1718052212;
pub const kFolderItemsRemovedEvent: c_int = 1718382451;
pub const kItemList: c_int = 1718383476;
pub const kNewSizeParameter: c_int = 1718514554;
pub const kFASuiteCode: c_int = 1717658479;
pub const kFAAttachCommand: c_int = 1635018337;
pub const kFARemoveCommand: c_int = 1919772257;
pub const kFAEditCommand: c_int = 1701078625;
pub const kFAFileParam: c_int = 1717657964;
pub const kFAIndexParam: c_int = 1768842360;
const enum_unnamed_916 = c_uint;
pub const kAEInternetSuite: c_int = 1735750252;
pub const kAEISWebStarSuite: c_int = 1465341885;
const enum_unnamed_917 = c_uint;
pub const kAEISGetURL: c_int = 1735750252;
pub const KAEISHandleCGI: c_int = 1935961955;
const enum_unnamed_918 = c_uint;
pub const cURL: c_int = 1970433056;
pub const cInternetAddress: c_int = 1229996356;
pub const cHTML: c_int = 1752460652;
pub const cFTPItem: c_int = 1718906912;
const enum_unnamed_919 = c_uint;
pub const kAEISHTTPSearchArgs: c_int = 1801875314;
pub const kAEISPostArgs: c_int = 1886352244;
pub const kAEISMethod: c_int = 1835365480;
pub const kAEISClientAddress: c_int = 1633969266;
pub const kAEISUserName: c_int = 1970496882;
pub const kAEISPassword: c_int = 1885434739;
pub const kAEISFromUser: c_int = 1718775157;
pub const kAEISServerName: c_int = 1937141357;
pub const kAEISServerPort: c_int = 1937141876;
pub const kAEISScriptName: c_int = 1935896173;
pub const kAEISContentType: c_int = 1668577648;
pub const kAEISReferrer: c_int = 1919247986;
pub const kAEISUserAgent: c_int = 1097297524;
pub const kAEISAction: c_int = 1264673652;
pub const kAEISActionPath: c_int = 1264676980;
pub const kAEISClientIP: c_int = 1264806256;
pub const kAEISFullRequest: c_int = 1265005169;
const enum_unnamed_920 = c_uint;
pub const pScheme: c_int = 1886745443;
pub const pHost: c_int = 1213158228;
pub const pPath: c_int = 1179930723;
pub const pUserName: c_int = 1380021614;
pub const pUserPassword: c_int = 1380020343;
pub const pDNSForm: c_int = 1883524691;
pub const pURL: c_int = 1884639820;
pub const pTextEncoding: c_int = 1886681189;
pub const pFTPKind: c_int = 1802071652;
const enum_unnamed_921 = c_uint;
pub const eScheme: c_int = 1702060904;
pub const eurlHTTP: c_int = 1752462448;
pub const eurlHTTPS: c_int = 1752461427;
pub const eurlFTP: c_int = 1718906912;
pub const eurlMail: c_int = 1835100524;
pub const eurlFile: c_int = 1718185061;
pub const eurlGopher: c_int = 1735420018;
pub const eurlTelnet: c_int = 1953263220;
pub const eurlNews: c_int = 1852143475;
pub const eurlSNews: c_int = 1936619379;
pub const eurlNNTP: c_int = 1852732528;
pub const eurlMessage: c_int = 1835365235;
pub const eurlMailbox: c_int = 1835167608;
pub const eurlMulti: c_int = 1836412020;
pub const eurlLaunch: c_int = 1818326382;
pub const eurlAFP: c_int = 1634103328;
pub const eurlAT: c_int = 1635000352;
pub const eurlEPPC: c_int = 1701867619;
pub const eurlRTSP: c_int = 1920234352;
pub const eurlIMAP: c_int = 1768776048;
pub const eurlNFS: c_int = 1970169459;
pub const eurlPOP: c_int = 1970302832;
pub const eurlLDAP: c_int = 1970037872;
pub const eurlUnknown: c_int = 1970433087;
const enum_unnamed_922 = c_uint;
pub const kConnSuite: c_int = 1835098979;
pub const cDevSpec: c_int = 1667523958;
pub const cAddressSpec: c_int = 1667327090;
pub const cADBAddress: c_int = 1667327074;
pub const cAppleTalkAddress: c_int = 1667331104;
pub const cBusAddress: c_int = 1667396979;
pub const cEthernetAddress: c_int = 1667591712;
pub const cFireWireAddress: c_int = 1667659552;
pub const cIPAddress: c_int = 1667854368;
pub const cLocalTalkAddress: c_int = 1668052000;
pub const cSCSIAddress: c_int = 1668506483;
pub const cTokenRingAddress: c_int = 1668575083;
pub const cUSBAddress: c_int = 1668641634;
pub const pDeviceType: c_int = 1885632116;
pub const pDeviceAddress: c_int = 1885632097;
pub const pConduit: c_int = 1885564782;
pub const pProtocol: c_int = 1886417524;
pub const pATMachine: c_int = 1885434989;
pub const pATZone: c_int = 1885435002;
pub const pATType: c_int = 1885434996;
pub const pDottedDecimal: c_int = 1885958244;
pub const pDNS: c_int = 1885630067;
pub const pPort: c_int = 1886416754;
pub const pNetwork: c_int = 1886283124;
pub const pNode: c_int = 1886285668;
pub const pSocket: c_int = 1886613347;
pub const pSCSIBus: c_int = 1886610274;
pub const pSCSILUN: c_int = 1886612597;
pub const eDeviceType: c_int = 1701082740;
pub const eAddressSpec: c_int = 1700881523;
pub const eConduit: c_int = 1701015406;
pub const eProtocol: c_int = 1701868143;
pub const eADB: c_int = 1700881506;
pub const eAnalogAudio: c_int = 1701863797;
pub const eAppleTalk: c_int = 1701863796;
pub const eAudioLineIn: c_int = 1701011817;
pub const eAudioLineOut: c_int = 1701011820;
pub const eAudioOut: c_int = 1701011823;
pub const eBus: c_int = 1700951411;
pub const eCDROM: c_int = 1701012512;
pub const eCommSlot: c_int = 1701012333;
pub const eDigitalAudio: c_int = 1701864545;
pub const eDisplay: c_int = 1701078131;
pub const eDVD: c_int = 1701082724;
pub const eEthernet: c_int = 1701012846;
pub const eFireWire: c_int = 1701013111;
pub const eFloppy: c_int = 1701209120;
pub const eHD: c_int = 1701340192;
pub const eInfrared: c_int = 1701013874;
pub const eIP: c_int = 1701865840;
pub const eIrDA: c_int = 1701865842;
pub const eIRTalk: c_int = 1701865844;
pub const eKeyboard: c_int = 1701536356;
pub const eLCD: c_int = 1701080163;
pub const eLocalTalk: c_int = 1701014644;
pub const eMacIP: c_int = 1701866857;
pub const eMacVideo: c_int = 1701866870;
pub const eMicrophone: c_int = 1701014889;
pub const eModemPort: c_int = 1701014896;
pub const eModemPrinterPort: c_int = 1701671024;
pub const eModem: c_int = 1701080429;
pub const eMonitorOut: c_int = 1701014894;
pub const eMouse: c_int = 1701670773;
pub const eNuBusCard: c_int = 1701080674;
pub const eNuBus: c_int = 1701737826;
pub const ePCcard: c_int = 1701015651;
pub const ePCIbus: c_int = 1701015657;
pub const ePCIcard: c_int = 1701081193;
pub const ePDSslot: c_int = 1701015652;
pub const ePDScard: c_int = 1701864563;
pub const ePointingDevice: c_int = 1701081188;
pub const ePostScript: c_int = 1701867635;
pub const ePPP: c_int = 1701867632;
pub const ePrinterPort: c_int = 1701015664;
pub const ePrinter: c_int = 1701081202;
pub const eSvideo: c_int = 1701868406;
pub const eSCSI: c_int = 1701016419;
pub const eSerial: c_int = 1701868402;
pub const eSpeakers: c_int = 1701081968;
pub const eStorageDevice: c_int = 1701081972;
pub const eSVGA: c_int = 1701868391;
pub const eTokenRing: c_int = 1702129515;
pub const eTrackball: c_int = 1702130283;
pub const eTrackpad: c_int = 1701082224;
pub const eUSB: c_int = 1701016947;
pub const eVideoIn: c_int = 1701017193;
pub const eVideoMonitor: c_int = 1701082733;
pub const eVideoOut: c_int = 1701017199;
const enum_unnamed_923 = c_uint;
pub const cKeystroke: c_int = 1802531443;
pub const pKeystrokeKey: c_int = 1800237927;
pub const pModifiers: c_int = 1800236900;
pub const pKeyKind: c_int = 1802202724;
pub const eModifiers: c_int = 1699570803;
pub const eOptionDown: c_int = 1265594484;
pub const eCommandDown: c_int = 1264807268;
pub const eControlDown: c_int = 1264809068;
pub const eShiftDown: c_int = 1265854068;
pub const eCapsLockDown: c_int = 1264807019;
pub const eKeyKind: c_int = 1701540724;
pub const eEscapeKey: c_int = 1802712320;
pub const eDeleteKey: c_int = 1802711808;
pub const eTabKey: c_int = 1802711040;
pub const eReturnKey: c_int = 1802707968;
pub const eClearKey: c_int = 1802716928;
pub const eEnterKey: c_int = 1802718208;
pub const eUpArrowKey: c_int = 1802731008;
pub const eDownArrowKey: c_int = 1802730752;
pub const eLeftArrowKey: c_int = 1802730240;
pub const eRightArrowKey: c_int = 1802730496;
pub const eHelpKey: c_int = 1802727936;
pub const eHomeKey: c_int = 1802728192;
pub const ePageUpKey: c_int = 1802728448;
pub const ePageDownKey: c_int = 1802729728;
pub const eForwardDelKey: c_int = 1802728704;
pub const eEndKey: c_int = 1802729216;
pub const eF1Key: c_int = 1802729984;
pub const eF2Key: c_int = 1802729472;
pub const eF3Key: c_int = 1802724096;
pub const eF4Key: c_int = 1802728960;
pub const eF5Key: c_int = 1802723328;
pub const eF6Key: c_int = 1802723584;
pub const eF7Key: c_int = 1802723840;
pub const eF8Key: c_int = 1802724352;
pub const eF9Key: c_int = 1802724608;
pub const eF10Key: c_int = 1802726656;
pub const eF11Key: c_int = 1802725120;
pub const eF12Key: c_int = 1802727168;
pub const eF13Key: c_int = 1802725632;
pub const eF14Key: c_int = 1802726144;
pub const eF15Key: c_int = 1802727680;
const enum_unnamed_924 = c_uint;
pub const keyAELaunchedAsLogInItem: c_int = 1818716532;
pub const keyAELaunchedAsServiceItem: c_int = 1937140084;
const enum_unnamed_925 = c_uint;
pub const kAEUserTerminology: c_int = 1634039156;
pub const kAETerminologyExtension: c_int = 1634038885;
pub const kAEScriptingSizeResource: c_int = 1935897466;
pub const kAEOSAXSizeResource: c_int = 1869834618;
const enum_unnamed_926 = c_uint;
pub const kAEUTHasReturningParam: c_int = 31;
pub const kAEUTOptional: c_int = 15;
pub const kAEUTlistOfItems: c_int = 14;
pub const kAEUTEnumerated: c_int = 13;
pub const kAEUTReadWrite: c_int = 12;
pub const kAEUTChangesState: c_int = 12;
pub const kAEUTTightBindingFunction: c_int = 12;
pub const kAEUTEnumsAreTypes: c_int = 11;
pub const kAEUTEnumListIsExclusive: c_int = 10;
pub const kAEUTReplyIsReference: c_int = 9;
pub const kAEUTDirectParamIsReference: c_int = 9;
pub const kAEUTParamIsReference: c_int = 9;
pub const kAEUTPropertyIsReference: c_int = 9;
pub const kAEUTNotDirectParamIsTarget: c_int = 8;
pub const kAEUTParamIsTarget: c_int = 8;
pub const kAEUTApostrophe: c_int = 3;
pub const kAEUTFeminine: c_int = 2;
pub const kAEUTMasculine: c_int = 1;
pub const kAEUTPlural: c_int = 0;
const enum_unnamed_927 = c_uint;
pub const struct_TScriptingSizeResource = extern struct {
    scriptingSizeFlags: SInt16,
    minStackSize: UInt32,
    preferredStackSize: UInt32,
    maxStackSize: UInt32,
    minHeapSize: UInt32,
    preferredHeapSize: UInt32,
    maxHeapSize: UInt32,
};
pub const TScriptingSizeResource = struct_TScriptingSizeResource;
pub const kLaunchToGetTerminology: c_int = 32768;
pub const kDontFindAppBySignature: c_int = 16384;
pub const kAlwaysSendSubject: c_int = 8192;
const enum_unnamed_928 = c_uint;
pub const kReadExtensionTermsMask: c_int = 32768;
const enum_unnamed_929 = c_uint;
pub const kOSIZDontOpenResourceFile: c_int = 15;
pub const kOSIZdontAcceptRemoteEvents: c_int = 14;
pub const kOSIZOpenWithReadPermission: c_int = 13;
pub const kOSIZCodeInSharedLibraries: c_int = 11;
const enum_unnamed_930 = c_uint;
pub const AEBuildErrorCode = UInt32;
pub const aeBuildSyntaxNoErr: c_int = 0;
pub const aeBuildSyntaxBadToken: c_int = 1;
pub const aeBuildSyntaxBadEOF: c_int = 2;
pub const aeBuildSyntaxNoEOF: c_int = 3;
pub const aeBuildSyntaxBadNegative: c_int = 4;
pub const aeBuildSyntaxMissingQuote: c_int = 5;
pub const aeBuildSyntaxBadHex: c_int = 6;
pub const aeBuildSyntaxOddHex: c_int = 7;
pub const aeBuildSyntaxNoCloseHex: c_int = 8;
pub const aeBuildSyntaxUncoercedHex: c_int = 9;
pub const aeBuildSyntaxNoCloseString: c_int = 10;
pub const aeBuildSyntaxBadDesc: c_int = 11;
pub const aeBuildSyntaxBadData: c_int = 12;
pub const aeBuildSyntaxNoCloseParen: c_int = 13;
pub const aeBuildSyntaxNoCloseBracket: c_int = 14;
pub const aeBuildSyntaxNoCloseBrace: c_int = 15;
pub const aeBuildSyntaxNoKey: c_int = 16;
pub const aeBuildSyntaxNoColon: c_int = 17;
pub const aeBuildSyntaxCoercedList: c_int = 18;
pub const aeBuildSyntaxUncoercedDoubleAt: c_int = 19;
const enum_unnamed_931 = c_uint;
pub const struct_AEBuildError = extern struct {
    fError: AEBuildErrorCode,
    fErrorPos: UInt32,
};
pub const AEBuildError = struct_AEBuildError;
pub extern fn AEBuildDesc(dst: [*c]AEDesc, @"error": [*c]AEBuildError, src: [*c]const u8, ...) OSStatus;
pub extern fn vAEBuildDesc(dst: [*c]AEDesc, @"error": [*c]AEBuildError, src: [*c]const u8, args: va_list) OSStatus;
pub extern fn AEBuildParameters(event: [*c]AppleEvent, @"error": [*c]AEBuildError, format: [*c]const u8, ...) OSStatus;
pub extern fn vAEBuildParameters(event: [*c]AppleEvent, @"error": [*c]AEBuildError, format: [*c]const u8, args: va_list) OSStatus;
pub extern fn AEBuildAppleEvent(theClass: AEEventClass, theID: AEEventID, addressType: DescType, addressData: ?*const anyopaque, addressLength: Size, returnID: SInt16, transactionID: SInt32, result: [*c]AppleEvent, @"error": [*c]AEBuildError, paramsFmt: [*c]const u8, ...) OSStatus;
pub extern fn vAEBuildAppleEvent(theClass: AEEventClass, theID: AEEventID, addressType: DescType, addressData: ?*const anyopaque, addressLength: Size, returnID: SInt16, transactionID: SInt32, resultEvt: [*c]AppleEvent, @"error": [*c]AEBuildError, paramsFmt: [*c]const u8, args: va_list) OSStatus;
pub extern fn AEPrintDescToHandle(desc: [*c]const AEDesc, result: [*c]Handle) OSStatus;
pub const struct_OpaqueAEStreamRef = opaque {};
pub const AEStreamRef = ?*struct_OpaqueAEStreamRef;
pub extern fn AEStreamOpen() AEStreamRef;
pub extern fn AEStreamClose(ref: AEStreamRef, desc: [*c]AEDesc) OSStatus;
pub extern fn AEStreamOpenDesc(ref: AEStreamRef, newType: DescType) OSStatus;
pub extern fn AEStreamWriteData(ref: AEStreamRef, data: ?*const anyopaque, length: Size) OSStatus;
pub extern fn AEStreamCloseDesc(ref: AEStreamRef) OSStatus;
pub extern fn AEStreamWriteDesc(ref: AEStreamRef, newType: DescType, data: ?*const anyopaque, length: Size) OSStatus;
pub extern fn AEStreamWriteAEDesc(ref: AEStreamRef, desc: [*c]const AEDesc) OSStatus;
pub extern fn AEStreamOpenList(ref: AEStreamRef) OSStatus;
pub extern fn AEStreamCloseList(ref: AEStreamRef) OSStatus;
pub extern fn AEStreamOpenRecord(ref: AEStreamRef, newType: DescType) OSStatus;
pub extern fn AEStreamSetRecordType(ref: AEStreamRef, newType: DescType) OSStatus;
pub extern fn AEStreamCloseRecord(ref: AEStreamRef) OSStatus;
pub extern fn AEStreamWriteKeyDesc(ref: AEStreamRef, key: AEKeyword, newType: DescType, data: ?*const anyopaque, length: Size) OSStatus;
pub extern fn AEStreamOpenKeyDesc(ref: AEStreamRef, key: AEKeyword, newType: DescType) OSStatus;
pub extern fn AEStreamWriteKey(ref: AEStreamRef, key: AEKeyword) OSStatus;
pub extern fn AEStreamCreateEvent(clazz: AEEventClass, id: AEEventID, targetType: DescType, targetData: ?*const anyopaque, targetLength: Size, returnID: SInt16, transactionID: SInt32) AEStreamRef;
pub extern fn AEStreamOpenEvent(event: [*c]AppleEvent) AEStreamRef;
pub extern fn AEStreamOptionalParam(ref: AEStreamRef, key: AEKeyword) OSStatus;
pub const keyReplyPortAttr: c_int = 1919250544;
const enum_unnamed_932 = c_uint;
pub const typeReplyPortAttr: c_int = 1919250544;
const enum_unnamed_933 = c_uint;
pub extern fn AEGetRegisteredMachPort() mach_port_t;
pub extern fn AEDecodeMessage(header: [*c]mach_msg_header_t, event: [*c]AppleEvent, reply: [*c]AppleEvent) OSStatus;
pub extern fn AEProcessMessage(header: [*c]mach_msg_header_t) OSStatus;
pub extern fn AESendMessage(event: [*c]const AppleEvent, reply: [*c]AppleEvent, sendMode: AESendMode, timeOutInTicks: c_long) OSStatus;
pub extern const kCFErrorDomainCFNetwork: CFStringRef;
pub extern const kCFErrorDomainWinSock: CFStringRef;
pub const CFNetworkErrors = c_int;
pub const kCFHostErrorHostNotFound: c_int = 1;
pub const kCFHostErrorUnknown: c_int = 2;
pub const kCFSOCKSErrorUnknownClientVersion: c_int = 100;
pub const kCFSOCKSErrorUnsupportedServerVersion: c_int = 101;
pub const kCFSOCKS4ErrorRequestFailed: c_int = 110;
pub const kCFSOCKS4ErrorIdentdFailed: c_int = 111;
pub const kCFSOCKS4ErrorIdConflict: c_int = 112;
pub const kCFSOCKS4ErrorUnknownStatusCode: c_int = 113;
pub const kCFSOCKS5ErrorBadState: c_int = 120;
pub const kCFSOCKS5ErrorBadResponseAddr: c_int = 121;
pub const kCFSOCKS5ErrorBadCredentials: c_int = 122;
pub const kCFSOCKS5ErrorUnsupportedNegotiationMethod: c_int = 123;
pub const kCFSOCKS5ErrorNoAcceptableMethod: c_int = 124;
pub const kCFFTPErrorUnexpectedStatusCode: c_int = 200;
pub const kCFErrorHTTPAuthenticationTypeUnsupported: c_int = 300;
pub const kCFErrorHTTPBadCredentials: c_int = 301;
pub const kCFErrorHTTPConnectionLost: c_int = 302;
pub const kCFErrorHTTPParseFailure: c_int = 303;
pub const kCFErrorHTTPRedirectionLoopDetected: c_int = 304;
pub const kCFErrorHTTPBadURL: c_int = 305;
pub const kCFErrorHTTPProxyConnectionFailure: c_int = 306;
pub const kCFErrorHTTPBadProxyCredentials: c_int = 307;
pub const kCFErrorPACFileError: c_int = 308;
pub const kCFErrorPACFileAuth: c_int = 309;
pub const kCFErrorHTTPSProxyConnectionFailure: c_int = 310;
pub const kCFStreamErrorHTTPSProxyFailureUnexpectedResponseToCONNECTMethod: c_int = 311;
pub const kCFURLErrorBackgroundSessionInUseByAnotherProcess: c_int = -996;
pub const kCFURLErrorBackgroundSessionWasDisconnected: c_int = -997;
pub const kCFURLErrorUnknown: c_int = -998;
pub const kCFURLErrorCancelled: c_int = -999;
pub const kCFURLErrorBadURL: c_int = -1000;
pub const kCFURLErrorTimedOut: c_int = -1001;
pub const kCFURLErrorUnsupportedURL: c_int = -1002;
pub const kCFURLErrorCannotFindHost: c_int = -1003;
pub const kCFURLErrorCannotConnectToHost: c_int = -1004;
pub const kCFURLErrorNetworkConnectionLost: c_int = -1005;
pub const kCFURLErrorDNSLookupFailed: c_int = -1006;
pub const kCFURLErrorHTTPTooManyRedirects: c_int = -1007;
pub const kCFURLErrorResourceUnavailable: c_int = -1008;
pub const kCFURLErrorNotConnectedToInternet: c_int = -1009;
pub const kCFURLErrorRedirectToNonExistentLocation: c_int = -1010;
pub const kCFURLErrorBadServerResponse: c_int = -1011;
pub const kCFURLErrorUserCancelledAuthentication: c_int = -1012;
pub const kCFURLErrorUserAuthenticationRequired: c_int = -1013;
pub const kCFURLErrorZeroByteResource: c_int = -1014;
pub const kCFURLErrorCannotDecodeRawData: c_int = -1015;
pub const kCFURLErrorCannotDecodeContentData: c_int = -1016;
pub const kCFURLErrorCannotParseResponse: c_int = -1017;
pub const kCFURLErrorInternationalRoamingOff: c_int = -1018;
pub const kCFURLErrorCallIsActive: c_int = -1019;
pub const kCFURLErrorDataNotAllowed: c_int = -1020;
pub const kCFURLErrorRequestBodyStreamExhausted: c_int = -1021;
pub const kCFURLErrorAppTransportSecurityRequiresSecureConnection: c_int = -1022;
pub const kCFURLErrorFileDoesNotExist: c_int = -1100;
pub const kCFURLErrorFileIsDirectory: c_int = -1101;
pub const kCFURLErrorNoPermissionsToReadFile: c_int = -1102;
pub const kCFURLErrorDataLengthExceedsMaximum: c_int = -1103;
pub const kCFURLErrorFileOutsideSafeArea: c_int = -1104;
pub const kCFURLErrorSecureConnectionFailed: c_int = -1200;
pub const kCFURLErrorServerCertificateHasBadDate: c_int = -1201;
pub const kCFURLErrorServerCertificateUntrusted: c_int = -1202;
pub const kCFURLErrorServerCertificateHasUnknownRoot: c_int = -1203;
pub const kCFURLErrorServerCertificateNotYetValid: c_int = -1204;
pub const kCFURLErrorClientCertificateRejected: c_int = -1205;
pub const kCFURLErrorClientCertificateRequired: c_int = -1206;
pub const kCFURLErrorCannotLoadFromNetwork: c_int = -2000;
pub const kCFURLErrorCannotCreateFile: c_int = -3000;
pub const kCFURLErrorCannotOpenFile: c_int = -3001;
pub const kCFURLErrorCannotCloseFile: c_int = -3002;
pub const kCFURLErrorCannotWriteToFile: c_int = -3003;
pub const kCFURLErrorCannotRemoveFile: c_int = -3004;
pub const kCFURLErrorCannotMoveFile: c_int = -3005;
pub const kCFURLErrorDownloadDecodingFailedMidStream: c_int = -3006;
pub const kCFURLErrorDownloadDecodingFailedToComplete: c_int = -3007;
pub const kCFHTTPCookieCannotParseCookieFile: c_int = -4000;
pub const kCFNetServiceErrorUnknown: c_int = -72000;
pub const kCFNetServiceErrorCollision: c_int = -72001;
pub const kCFNetServiceErrorNotFound: c_int = -72002;
pub const kCFNetServiceErrorInProgress: c_int = -72003;
pub const kCFNetServiceErrorBadArgument: c_int = -72004;
pub const kCFNetServiceErrorCancel: c_int = -72005;
pub const kCFNetServiceErrorInvalid: c_int = -72006;
pub const kCFNetServiceErrorTimeout: c_int = -72007;
pub const kCFNetServiceErrorDNSServiceFailure: c_int = -73000;
const enum_unnamed_934 = c_int;
pub extern const kCFURLErrorFailingURLErrorKey: CFStringRef;
pub extern const kCFURLErrorFailingURLStringErrorKey: CFStringRef;
pub extern const kCFGetAddrInfoFailureKey: CFStringRef;
pub extern const kCFSOCKSStatusCodeKey: CFStringRef;
pub extern const kCFSOCKSVersionKey: CFStringRef;
pub extern const kCFSOCKSNegotiationMethodKey: CFStringRef;
pub extern const kCFDNSServiceFailureKey: CFStringRef;
pub extern const kCFFTPStatusCodeKey: CFStringRef;
pub const struct___CFHost = opaque {};
pub const CFHostRef = ?*struct___CFHost;
pub extern const kCFStreamErrorDomainNetDB: SInt32;
pub extern const kCFStreamErrorDomainSystemConfiguration: SInt32;
pub const CFHostInfoType = c_int;
pub const kCFHostAddresses: c_int = 0;
pub const kCFHostNames: c_int = 1;
pub const kCFHostReachability: c_int = 2;
const enum_unnamed_935 = c_uint;
pub const struct_CFHostClientContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: CFAllocatorRetainCallBack,
    release: CFAllocatorReleaseCallBack,
    copyDescription: CFAllocatorCopyDescriptionCallBack,
};
pub const CFHostClientContext = struct_CFHostClientContext;
pub const CFHostClientCallBack = ?*const fn (CFHostRef, CFHostInfoType, [*c]const CFStreamError, ?*anyopaque) callconv(.C) void;
pub extern fn CFHostGetTypeID() CFTypeID;
pub extern fn CFHostCreateWithName(allocator: CFAllocatorRef, hostname: CFStringRef) CFHostRef;
pub extern fn CFHostCreateWithAddress(allocator: CFAllocatorRef, addr: CFDataRef) CFHostRef;
pub extern fn CFHostCreateCopy(alloc: CFAllocatorRef, host: CFHostRef) CFHostRef;
pub extern fn CFHostStartInfoResolution(theHost: CFHostRef, info: CFHostInfoType, @"error": [*c]CFStreamError) Boolean;
pub extern fn CFHostGetAddressing(theHost: CFHostRef, hasBeenResolved: [*c]Boolean) CFArrayRef;
pub extern fn CFHostGetNames(theHost: CFHostRef, hasBeenResolved: [*c]Boolean) CFArrayRef;
pub extern fn CFHostGetReachability(theHost: CFHostRef, hasBeenResolved: [*c]Boolean) CFDataRef;
pub extern fn CFHostCancelInfoResolution(theHost: CFHostRef, info: CFHostInfoType) void;
pub extern fn CFHostSetClient(theHost: CFHostRef, clientCB: CFHostClientCallBack, clientContext: [*c]CFHostClientContext) Boolean;
pub extern fn CFHostScheduleWithRunLoop(theHost: CFHostRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) void;
pub extern fn CFHostUnscheduleFromRunLoop(theHost: CFHostRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) void;
pub const struct___CFNetService = opaque {};
pub const CFNetServiceRef = ?*struct___CFNetService;
pub const struct___CFNetServiceMonitor = opaque {};
pub const CFNetServiceMonitorRef = ?*struct___CFNetServiceMonitor;
pub const struct___CFNetServiceBrowser = opaque {};
pub const CFNetServiceBrowserRef = ?*struct___CFNetServiceBrowser;
pub extern const kCFStreamErrorDomainMach: SInt32;
pub extern const kCFStreamErrorDomainNetServices: SInt32;
pub const CFNetServicesError = c_int;
pub const kCFNetServicesErrorUnknown: c_int = -72000;
pub const kCFNetServicesErrorCollision: c_int = -72001;
pub const kCFNetServicesErrorNotFound: c_int = -72002;
pub const kCFNetServicesErrorInProgress: c_int = -72003;
pub const kCFNetServicesErrorBadArgument: c_int = -72004;
pub const kCFNetServicesErrorCancel: c_int = -72005;
pub const kCFNetServicesErrorInvalid: c_int = -72006;
pub const kCFNetServicesErrorTimeout: c_int = -72007;
pub const kCFNetServicesErrorMissingRequiredConfiguration: c_int = -72008;
const enum_unnamed_936 = c_int;
pub const CFNetServiceMonitorType = c_int;
pub const kCFNetServiceMonitorTXT: c_int = 1;
const enum_unnamed_937 = c_uint;
pub const CFNetServiceRegisterFlags = CFOptionFlags;
pub const kCFNetServiceFlagNoAutoRename: c_int = 1;
const enum_unnamed_938 = c_uint;
pub const CFNetServiceBrowserFlags = CFOptionFlags;
pub const kCFNetServiceFlagMoreComing: c_int = 1;
pub const kCFNetServiceFlagIsDomain: c_int = 2;
pub const kCFNetServiceFlagIsDefault: c_int = 4;
pub const kCFNetServiceFlagIsRegistrationDomain: c_int = 4;
pub const kCFNetServiceFlagRemove: c_int = 8;
const enum_unnamed_939 = c_uint;
pub const struct_CFNetServiceClientContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: CFAllocatorRetainCallBack,
    release: CFAllocatorReleaseCallBack,
    copyDescription: CFAllocatorCopyDescriptionCallBack,
};
pub const CFNetServiceClientContext = struct_CFNetServiceClientContext;
pub const CFNetServiceClientCallBack = ?*const fn (CFNetServiceRef, [*c]CFStreamError, ?*anyopaque) callconv(.C) void;
pub const CFNetServiceMonitorClientCallBack = ?*const fn (CFNetServiceMonitorRef, CFNetServiceRef, CFNetServiceMonitorType, CFDataRef, [*c]CFStreamError, ?*anyopaque) callconv(.C) void;
pub const CFNetServiceBrowserClientCallBack = ?*const fn (CFNetServiceBrowserRef, CFOptionFlags, CFTypeRef, [*c]CFStreamError, ?*anyopaque) callconv(.C) void;
pub extern fn CFNetServiceGetTypeID() CFTypeID;
pub extern fn CFNetServiceMonitorGetTypeID() CFTypeID;
pub extern fn CFNetServiceBrowserGetTypeID() CFTypeID;
pub extern fn CFNetServiceCreate(alloc: CFAllocatorRef, domain: CFStringRef, serviceType: CFStringRef, name: CFStringRef, port: SInt32) CFNetServiceRef;
pub extern fn CFNetServiceCreateCopy(alloc: CFAllocatorRef, service: CFNetServiceRef) CFNetServiceRef;
pub extern fn CFNetServiceGetDomain(theService: CFNetServiceRef) CFStringRef;
pub extern fn CFNetServiceGetType(theService: CFNetServiceRef) CFStringRef;
pub extern fn CFNetServiceGetName(theService: CFNetServiceRef) CFStringRef;
pub extern fn CFNetServiceRegisterWithOptions(theService: CFNetServiceRef, options: CFOptionFlags, @"error": [*c]CFStreamError) Boolean;
pub extern fn CFNetServiceResolveWithTimeout(theService: CFNetServiceRef, timeout: CFTimeInterval, @"error": [*c]CFStreamError) Boolean;
pub extern fn CFNetServiceCancel(theService: CFNetServiceRef) void;
pub extern fn CFNetServiceGetTargetHost(theService: CFNetServiceRef) CFStringRef;
pub extern fn CFNetServiceGetPortNumber(theService: CFNetServiceRef) SInt32;
pub extern fn CFNetServiceGetAddressing(theService: CFNetServiceRef) CFArrayRef;
pub extern fn CFNetServiceGetTXTData(theService: CFNetServiceRef) CFDataRef;
pub extern fn CFNetServiceSetTXTData(theService: CFNetServiceRef, txtRecord: CFDataRef) Boolean;
pub extern fn CFNetServiceCreateDictionaryWithTXTData(alloc: CFAllocatorRef, txtRecord: CFDataRef) CFDictionaryRef;
pub extern fn CFNetServiceCreateTXTDataWithDictionary(alloc: CFAllocatorRef, keyValuePairs: CFDictionaryRef) CFDataRef;
pub extern fn CFNetServiceSetClient(theService: CFNetServiceRef, clientCB: CFNetServiceClientCallBack, clientContext: [*c]CFNetServiceClientContext) Boolean;
pub extern fn CFNetServiceScheduleWithRunLoop(theService: CFNetServiceRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) void;
pub extern fn CFNetServiceUnscheduleFromRunLoop(theService: CFNetServiceRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) void;
pub extern fn CFNetServiceMonitorCreate(alloc: CFAllocatorRef, theService: CFNetServiceRef, clientCB: CFNetServiceMonitorClientCallBack, clientContext: [*c]CFNetServiceClientContext) CFNetServiceMonitorRef;
pub extern fn CFNetServiceMonitorInvalidate(monitor: CFNetServiceMonitorRef) void;
pub extern fn CFNetServiceMonitorStart(monitor: CFNetServiceMonitorRef, recordType: CFNetServiceMonitorType, @"error": [*c]CFStreamError) Boolean;
pub extern fn CFNetServiceMonitorStop(monitor: CFNetServiceMonitorRef, @"error": [*c]CFStreamError) void;
pub extern fn CFNetServiceMonitorScheduleWithRunLoop(monitor: CFNetServiceMonitorRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) void;
pub extern fn CFNetServiceMonitorUnscheduleFromRunLoop(monitor: CFNetServiceMonitorRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) void;
pub extern fn CFNetServiceBrowserCreate(alloc: CFAllocatorRef, clientCB: CFNetServiceBrowserClientCallBack, clientContext: [*c]CFNetServiceClientContext) CFNetServiceBrowserRef;
pub extern fn CFNetServiceBrowserInvalidate(browser: CFNetServiceBrowserRef) void;
pub extern fn CFNetServiceBrowserSearchForDomains(browser: CFNetServiceBrowserRef, registrationDomains: Boolean, @"error": [*c]CFStreamError) Boolean;
pub extern fn CFNetServiceBrowserSearchForServices(browser: CFNetServiceBrowserRef, domain: CFStringRef, serviceType: CFStringRef, @"error": [*c]CFStreamError) Boolean;
pub extern fn CFNetServiceBrowserStopSearch(browser: CFNetServiceBrowserRef, @"error": [*c]CFStreamError) void;
pub extern fn CFNetServiceBrowserScheduleWithRunLoop(browser: CFNetServiceBrowserRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) void;
pub extern fn CFNetServiceBrowserUnscheduleFromRunLoop(browser: CFNetServiceBrowserRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) void;
pub extern fn CFNetServiceRegister(theService: CFNetServiceRef, @"error": [*c]CFStreamError) Boolean;
pub extern fn CFNetServiceResolve(theService: CFNetServiceRef, @"error": [*c]CFStreamError) Boolean;
pub extern const kCFStreamPropertySSLContext: CFStringRef;
pub extern const kCFStreamPropertySSLPeerTrust: CFStringRef;
pub extern const kCFStreamSSLValidatesCertificateChain: CFStringRef;
pub extern const kCFStreamPropertySSLSettings: CFStringRef;
pub extern const kCFStreamSSLLevel: CFStringRef;
pub extern const kCFStreamSSLPeerName: CFStringRef;
pub extern const kCFStreamSSLCertificates: CFStringRef;
pub extern const kCFStreamSSLIsServer: CFStringRef;
pub extern const kCFStreamNetworkServiceType: CFStringRef;
pub extern const kCFStreamNetworkServiceTypeVideo: CFStringRef;
pub extern const kCFStreamNetworkServiceTypeVoice: CFStringRef;
pub extern const kCFStreamNetworkServiceTypeBackground: CFStringRef;
pub extern const kCFStreamNetworkServiceTypeResponsiveData: CFStringRef;
pub extern const kCFStreamNetworkServiceTypeCallSignaling: CFStringRef;
pub extern const kCFStreamNetworkServiceTypeAVStreaming: CFStringRef;
pub extern const kCFStreamNetworkServiceTypeResponsiveAV: CFStringRef;
pub extern const kCFStreamNetworkServiceTypeVoIP: CFStringRef;
pub extern const kCFStreamPropertyNoCellular: CFStringRef;
pub extern const kCFStreamPropertyConnectionIsCellular: CFStringRef;
pub extern const kCFStreamPropertyAllowExpensiveNetworkAccess: CFStringRef;
pub extern const kCFStreamPropertyConnectionIsExpensive: CFStringRef;
pub extern const kCFStreamPropertyAllowConstrainedNetworkAccess: CFStringRef;
pub extern const kCFStreamErrorDomainWinSock: CFIndex;
pub inline fn CFSocketStreamSOCKSGetErrorSubdomain(arg_error: [*c]const CFStreamError) SInt32 {
    var @"error" = arg_error;
    return (@"error".*.@"error" >> @intCast(@import("std").math.Log2Int(SInt32), 16)) & @as(c_int, 65535);
}
pub inline fn CFSocketStreamSOCKSGetError(arg_error: [*c]const CFStreamError) SInt32 {
    var @"error" = arg_error;
    return @"error".*.@"error" & @as(c_int, 65535);
}
pub const kCFStreamErrorSOCKSSubDomainNone: c_int = 0;
pub const kCFStreamErrorSOCKSSubDomainVersionCode: c_int = 1;
pub const kCFStreamErrorSOCKS4SubDomainResponse: c_int = 2;
pub const kCFStreamErrorSOCKS5SubDomainUserPass: c_int = 3;
pub const kCFStreamErrorSOCKS5SubDomainMethod: c_int = 4;
pub const kCFStreamErrorSOCKS5SubDomainResponse: c_int = 5;
const enum_unnamed_940 = c_uint;
pub const kCFStreamErrorSOCKS5BadResponseAddr: c_int = 1;
pub const kCFStreamErrorSOCKS5BadState: c_int = 2;
pub const kCFStreamErrorSOCKSUnknownClientVersion: c_int = 3;
const enum_unnamed_941 = c_uint;
pub const kCFStreamErrorSOCKS4RequestFailed: c_int = 91;
pub const kCFStreamErrorSOCKS4IdentdFailed: c_int = 92;
pub const kCFStreamErrorSOCKS4IdConflict: c_int = 93;
const enum_unnamed_942 = c_uint;
pub const kSOCKS5NoAcceptableMethod: c_int = 255;
const enum_unnamed_943 = c_uint;
pub extern const kCFStreamPropertyProxyLocalBypass: CFStringRef;
pub extern const kCFStreamPropertySocketRemoteHost: CFStringRef;
pub extern const kCFStreamPropertySocketRemoteNetService: CFStringRef;
pub extern const kCFStreamPropertySocketExtendedBackgroundIdleMode: CFStringRef;
pub extern fn CFStreamCreatePairWithSocketToCFHost(alloc: CFAllocatorRef, host: CFHostRef, port: SInt32, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef) void;
pub extern fn CFStreamCreatePairWithSocketToNetService(alloc: CFAllocatorRef, service: CFNetServiceRef, readStream: [*c]CFReadStreamRef, writeStream: [*c]CFWriteStreamRef) void;
pub extern const kCFStreamPropertySSLPeerCertificates: CFStringRef;
pub extern const kCFStreamSSLAllowsExpiredCertificates: CFStringRef;
pub extern const kCFStreamSSLAllowsExpiredRoots: CFStringRef;
pub extern const kCFStreamSSLAllowsAnyRoot: CFStringRef;
pub extern const kCFStreamErrorDomainFTP: SInt32;
pub extern const kCFStreamPropertyFTPUserName: CFStringRef;
pub extern const kCFStreamPropertyFTPPassword: CFStringRef;
pub extern const kCFStreamPropertyFTPUsePassiveMode: CFStringRef;
pub extern const kCFStreamPropertyFTPResourceSize: CFStringRef;
pub extern const kCFStreamPropertyFTPFetchResourceInfo: CFStringRef;
pub extern const kCFStreamPropertyFTPFileTransferOffset: CFStringRef;
pub extern const kCFStreamPropertyFTPAttemptPersistentConnection: CFStringRef;
pub extern const kCFStreamPropertyFTPProxy: CFStringRef;
pub extern const kCFStreamPropertyFTPProxyHost: CFStringRef;
pub extern const kCFStreamPropertyFTPProxyPort: CFStringRef;
pub extern const kCFStreamPropertyFTPProxyUser: CFStringRef;
pub extern const kCFStreamPropertyFTPProxyPassword: CFStringRef;
pub extern const kCFFTPResourceMode: CFStringRef;
pub extern const kCFFTPResourceName: CFStringRef;
pub extern const kCFFTPResourceOwner: CFStringRef;
pub extern const kCFFTPResourceGroup: CFStringRef;
pub extern const kCFFTPResourceLink: CFStringRef;
pub extern const kCFFTPResourceSize: CFStringRef;
pub extern const kCFFTPResourceType: CFStringRef;
pub extern const kCFFTPResourceModDate: CFStringRef;
pub extern fn CFReadStreamCreateWithFTPURL(alloc: CFAllocatorRef, ftpURL: CFURLRef) CFReadStreamRef;
pub extern fn CFFTPCreateParsedResourceListing(alloc: CFAllocatorRef, buffer: [*c]const UInt8, bufferLength: CFIndex, parsed: [*c]CFDictionaryRef) CFIndex;
pub extern fn CFWriteStreamCreateWithFTPURL(alloc: CFAllocatorRef, ftpURL: CFURLRef) CFWriteStreamRef;
pub extern const kCFHTTPVersion1_0: CFStringRef;
pub extern const kCFHTTPVersion1_1: CFStringRef;
pub extern const kCFHTTPVersion2_0: CFStringRef;
pub extern const kCFHTTPVersion3_0: CFStringRef;
pub extern const kCFHTTPAuthenticationSchemeBasic: CFStringRef;
pub extern const kCFHTTPAuthenticationSchemeDigest: CFStringRef;
pub extern const kCFHTTPAuthenticationSchemeNTLM: CFStringRef;
pub extern const kCFHTTPAuthenticationSchemeKerberos: CFStringRef;
pub extern const kCFHTTPAuthenticationSchemeNegotiate: CFStringRef;
pub extern const kCFHTTPAuthenticationSchemeNegotiate2: CFStringRef;
pub extern const kCFHTTPAuthenticationSchemeXMobileMeAuthToken: CFStringRef;
pub const struct___CFHTTPMessage = opaque {};
pub const CFHTTPMessageRef = ?*struct___CFHTTPMessage;
pub extern fn CFHTTPMessageGetTypeID() CFTypeID;
pub extern fn CFHTTPMessageCreateRequest(alloc: CFAllocatorRef, requestMethod: CFStringRef, url: CFURLRef, httpVersion: CFStringRef) CFHTTPMessageRef;
pub extern fn CFHTTPMessageCreateResponse(alloc: CFAllocatorRef, statusCode: CFIndex, statusDescription: CFStringRef, httpVersion: CFStringRef) CFHTTPMessageRef;
pub extern fn CFHTTPMessageCreateEmpty(alloc: CFAllocatorRef, isRequest: Boolean) CFHTTPMessageRef;
pub extern fn CFHTTPMessageCreateCopy(alloc: CFAllocatorRef, message: CFHTTPMessageRef) CFHTTPMessageRef;
pub extern fn CFHTTPMessageIsRequest(message: CFHTTPMessageRef) Boolean;
pub extern fn CFHTTPMessageCopyVersion(message: CFHTTPMessageRef) CFStringRef;
pub extern fn CFHTTPMessageCopyBody(message: CFHTTPMessageRef) CFDataRef;
pub extern fn CFHTTPMessageSetBody(message: CFHTTPMessageRef, bodyData: CFDataRef) void;
pub extern fn CFHTTPMessageCopyHeaderFieldValue(message: CFHTTPMessageRef, headerField: CFStringRef) CFStringRef;
pub extern fn CFHTTPMessageCopyAllHeaderFields(message: CFHTTPMessageRef) CFDictionaryRef;
pub extern fn CFHTTPMessageSetHeaderFieldValue(message: CFHTTPMessageRef, headerField: CFStringRef, value: CFStringRef) void;
pub extern fn CFHTTPMessageAppendBytes(message: CFHTTPMessageRef, newBytes: [*c]const UInt8, numBytes: CFIndex) Boolean;
pub extern fn CFHTTPMessageIsHeaderComplete(message: CFHTTPMessageRef) Boolean;
pub extern fn CFHTTPMessageCopySerializedMessage(message: CFHTTPMessageRef) CFDataRef;
pub extern fn CFHTTPMessageCopyRequestURL(request: CFHTTPMessageRef) CFURLRef;
pub extern fn CFHTTPMessageCopyRequestMethod(request: CFHTTPMessageRef) CFStringRef;
pub extern fn CFHTTPMessageAddAuthentication(request: CFHTTPMessageRef, authenticationFailureResponse: CFHTTPMessageRef, username: CFStringRef, password: CFStringRef, authenticationScheme: CFStringRef, forProxy: Boolean) Boolean;
pub extern fn CFHTTPMessageGetResponseStatusCode(response: CFHTTPMessageRef) CFIndex;
pub extern fn CFHTTPMessageCopyResponseStatusLine(response: CFHTTPMessageRef) CFStringRef;
pub extern const kCFStreamErrorDomainHTTP: SInt32;
pub const CFStreamErrorHTTP = c_int;
pub const kCFStreamErrorHTTPParseFailure: c_int = -1;
pub const kCFStreamErrorHTTPRedirectionLoop: c_int = -2;
pub const kCFStreamErrorHTTPBadURL: c_int = -3;
const enum_unnamed_944 = c_int;
pub extern const kCFStreamPropertyHTTPResponseHeader: CFStringRef;
pub extern const kCFStreamPropertyHTTPFinalURL: CFStringRef;
pub extern const kCFStreamPropertyHTTPFinalRequest: CFStringRef;
pub extern const kCFStreamPropertyHTTPProxy: CFStringRef;
pub extern const kCFStreamPropertyHTTPProxyHost: CFStringRef;
pub extern const kCFStreamPropertyHTTPProxyPort: CFStringRef;
pub extern const kCFStreamPropertyHTTPSProxyHost: CFStringRef;
pub extern const kCFStreamPropertyHTTPSProxyPort: CFStringRef;
pub extern const kCFStreamPropertyHTTPShouldAutoredirect: CFStringRef;
pub extern const kCFStreamPropertyHTTPAttemptPersistentConnection: CFStringRef;
pub extern const kCFStreamPropertyHTTPRequestBytesWrittenCount: CFStringRef;
pub extern fn CFReadStreamCreateForHTTPRequest(alloc: CFAllocatorRef, request: CFHTTPMessageRef) CFReadStreamRef;
pub extern fn CFReadStreamCreateForStreamedHTTPRequest(alloc: CFAllocatorRef, requestHeaders: CFHTTPMessageRef, requestBody: CFReadStreamRef) CFReadStreamRef;
pub const struct__CFHTTPAuthentication = opaque {};
pub const CFHTTPAuthenticationRef = ?*struct__CFHTTPAuthentication;
pub const CFStreamErrorHTTPAuthentication = c_int;
pub const kCFStreamErrorHTTPAuthenticationTypeUnsupported: c_int = -1000;
pub const kCFStreamErrorHTTPAuthenticationBadUserName: c_int = -1001;
pub const kCFStreamErrorHTTPAuthenticationBadPassword: c_int = -1002;
const enum_unnamed_945 = c_int;
pub extern const kCFHTTPAuthenticationUsername: CFStringRef;
pub extern const kCFHTTPAuthenticationPassword: CFStringRef;
pub extern const kCFHTTPAuthenticationAccountDomain: CFStringRef;
pub extern fn CFHTTPAuthenticationGetTypeID() CFTypeID;
pub extern fn CFHTTPAuthenticationCreateFromResponse(alloc: CFAllocatorRef, response: CFHTTPMessageRef) CFHTTPAuthenticationRef;
pub extern fn CFHTTPAuthenticationIsValid(auth: CFHTTPAuthenticationRef, @"error": [*c]CFStreamError) Boolean;
pub extern fn CFHTTPAuthenticationAppliesToRequest(auth: CFHTTPAuthenticationRef, request: CFHTTPMessageRef) Boolean;
pub extern fn CFHTTPAuthenticationRequiresOrderedRequests(auth: CFHTTPAuthenticationRef) Boolean;
pub extern fn CFHTTPMessageApplyCredentials(request: CFHTTPMessageRef, auth: CFHTTPAuthenticationRef, username: CFStringRef, password: CFStringRef, @"error": [*c]CFStreamError) Boolean;
pub extern fn CFHTTPMessageApplyCredentialDictionary(request: CFHTTPMessageRef, auth: CFHTTPAuthenticationRef, dict: CFDictionaryRef, @"error": [*c]CFStreamError) Boolean;
pub extern fn CFHTTPAuthenticationCopyRealm(auth: CFHTTPAuthenticationRef) CFStringRef;
pub extern fn CFHTTPAuthenticationCopyDomains(auth: CFHTTPAuthenticationRef) CFArrayRef;
pub extern fn CFHTTPAuthenticationCopyMethod(auth: CFHTTPAuthenticationRef) CFStringRef;
pub extern fn CFHTTPAuthenticationRequiresUserNameAndPassword(auth: CFHTTPAuthenticationRef) Boolean;
pub extern fn CFHTTPAuthenticationRequiresAccountDomain(auth: CFHTTPAuthenticationRef) Boolean;
pub const struct___CFNetDiagnostic = opaque {};
pub const CFNetDiagnosticRef = ?*struct___CFNetDiagnostic;
pub const CFNetDiagnosticStatusValues = c_int;
pub const kCFNetDiagnosticNoErr: c_int = 0;
pub const kCFNetDiagnosticErr: c_int = -66560;
pub const kCFNetDiagnosticConnectionUp: c_int = -66559;
pub const kCFNetDiagnosticConnectionIndeterminate: c_int = -66558;
pub const kCFNetDiagnosticConnectionDown: c_int = -66557;
const enum_unnamed_946 = c_int;
pub const CFNetDiagnosticStatus = CFIndex;
pub extern fn CFNetDiagnosticCreateWithStreams(alloc: CFAllocatorRef, readStream: CFReadStreamRef, writeStream: CFWriteStreamRef) CFNetDiagnosticRef;
pub extern fn CFNetDiagnosticCreateWithURL(alloc: CFAllocatorRef, url: CFURLRef) CFNetDiagnosticRef;
pub extern fn CFNetDiagnosticSetName(details: CFNetDiagnosticRef, name: CFStringRef) void;
pub extern fn CFNetDiagnosticDiagnoseProblemInteractively(details: CFNetDiagnosticRef) CFNetDiagnosticStatus;
pub extern fn CFNetDiagnosticCopyNetworkStatusPassively(details: CFNetDiagnosticRef, description: [*c]CFStringRef) CFNetDiagnosticStatus;
pub extern fn CFNetworkCopySystemProxySettings() CFDictionaryRef;
pub extern fn CFNetworkCopyProxiesForURL(url: CFURLRef, proxySettings: CFDictionaryRef) CFArrayRef;
pub const CFProxyAutoConfigurationResultCallback = ?*const fn (?*anyopaque, CFArrayRef, CFErrorRef) callconv(.C) void;
pub extern fn CFNetworkCopyProxiesForAutoConfigurationScript(proxyAutoConfigurationScript: CFStringRef, targetURL: CFURLRef, @"error": [*c]CFErrorRef) CFArrayRef;
pub extern fn CFNetworkExecuteProxyAutoConfigurationScript(proxyAutoConfigurationScript: CFStringRef, targetURL: CFURLRef, cb: CFProxyAutoConfigurationResultCallback, clientContext: [*c]CFStreamClientContext) CFRunLoopSourceRef;
pub extern fn CFNetworkExecuteProxyAutoConfigurationURL(proxyAutoConfigURL: CFURLRef, targetURL: CFURLRef, cb: CFProxyAutoConfigurationResultCallback, clientContext: [*c]CFStreamClientContext) CFRunLoopSourceRef;
pub extern const kCFProxyTypeKey: CFStringRef;
pub extern const kCFProxyHostNameKey: CFStringRef;
pub extern const kCFProxyPortNumberKey: CFStringRef;
pub extern const kCFProxyAutoConfigurationURLKey: CFStringRef;
pub extern const kCFProxyAutoConfigurationJavaScriptKey: CFStringRef;
pub extern const kCFProxyUsernameKey: CFStringRef;
pub extern const kCFProxyPasswordKey: CFStringRef;
pub extern const kCFProxyTypeNone: CFStringRef;
pub extern const kCFProxyTypeHTTP: CFStringRef;
pub extern const kCFProxyTypeHTTPS: CFStringRef;
pub extern const kCFProxyTypeSOCKS: CFStringRef;
pub extern const kCFProxyTypeFTP: CFStringRef;
pub extern const kCFProxyTypeAutoConfigurationURL: CFStringRef;
pub extern const kCFProxyTypeAutoConfigurationJavaScript: CFStringRef;
pub extern const kCFProxyAutoConfigurationHTTPResponseKey: CFStringRef;
pub extern const kCFNetworkProxiesExceptionsList: CFStringRef;
pub extern const kCFNetworkProxiesExcludeSimpleHostnames: CFStringRef;
pub extern const kCFNetworkProxiesFTPEnable: CFStringRef;
pub extern const kCFNetworkProxiesFTPPassive: CFStringRef;
pub extern const kCFNetworkProxiesFTPPort: CFStringRef;
pub extern const kCFNetworkProxiesFTPProxy: CFStringRef;
pub extern const kCFNetworkProxiesGopherEnable: CFStringRef;
pub extern const kCFNetworkProxiesGopherPort: CFStringRef;
pub extern const kCFNetworkProxiesGopherProxy: CFStringRef;
pub extern const kCFNetworkProxiesHTTPEnable: CFStringRef;
pub extern const kCFNetworkProxiesHTTPPort: CFStringRef;
pub extern const kCFNetworkProxiesHTTPProxy: CFStringRef;
pub extern const kCFNetworkProxiesHTTPSEnable: CFStringRef;
pub extern const kCFNetworkProxiesHTTPSPort: CFStringRef;
pub extern const kCFNetworkProxiesHTTPSProxy: CFStringRef;
pub extern const kCFNetworkProxiesRTSPEnable: CFStringRef;
pub extern const kCFNetworkProxiesRTSPPort: CFStringRef;
pub extern const kCFNetworkProxiesRTSPProxy: CFStringRef;
pub extern const kCFNetworkProxiesSOCKSEnable: CFStringRef;
pub extern const kCFNetworkProxiesSOCKSPort: CFStringRef;
pub extern const kCFNetworkProxiesSOCKSProxy: CFStringRef;
pub extern const kCFNetworkProxiesProxyAutoConfigEnable: CFStringRef;
pub extern const kCFNetworkProxiesProxyAutoConfigURLString: CFStringRef;
pub extern const kCFNetworkProxiesProxyAutoConfigJavaScript: CFStringRef;
pub extern const kCFNetworkProxiesProxyAutoDiscoveryEnable: CFStringRef;
pub const struct___DCSDictionary = opaque {};
pub const DCSDictionaryRef = ?*const struct___DCSDictionary;
pub extern fn DCSGetTermRangeInString(dictionary: DCSDictionaryRef, textString: CFStringRef, offset: CFIndex) CFRange;
pub extern fn DCSCopyTextDefinition(dictionary: DCSDictionaryRef, textString: CFStringRef, range: CFRange) CFStringRef;
pub const struct___SecCertificate = opaque {};
pub const SecCertificateRef = ?*struct___SecCertificate;
pub const OpaqueSecCertificateRef = struct___SecCertificate;
pub const struct___SecIdentity = opaque {};
pub const SecIdentityRef = ?*struct___SecIdentity;
pub const OpaqueSecIdentityRef = struct___SecIdentity;
pub const struct___SecKey = opaque {};
pub const SecKeyRef = ?*struct___SecKey;
pub const OpaqueSecKeyRef = struct___SecKey;
pub const struct___SecPolicy = opaque {};
pub const SecPolicyRef = ?*struct___SecPolicy;
pub const struct___SecAccessControl = opaque {};
pub const SecAccessControlRef = ?*struct___SecAccessControl;
pub const struct___SecKeychain = opaque {};
pub const SecKeychainRef = ?*struct___SecKeychain;
pub const struct___SecKeychainItem = opaque {};
pub const SecKeychainItemRef = ?*struct___SecKeychainItem;
pub const struct___SecKeychainSearch = opaque {};
pub const SecKeychainSearchRef = ?*struct___SecKeychainSearch;
pub const SecKeychainAttrType = OSType;
pub const struct_SecKeychainAttribute = extern struct {
    tag: SecKeychainAttrType,
    length: UInt32,
    data: ?*anyopaque,
};
pub const SecKeychainAttribute = struct_SecKeychainAttribute;
pub const SecKeychainAttributePtr = [*c]SecKeychainAttribute;
pub const struct_SecKeychainAttributeList = extern struct {
    count: UInt32,
    attr: [*c]SecKeychainAttribute,
};
pub const SecKeychainAttributeList = struct_SecKeychainAttributeList;
pub const SecKeychainStatus = UInt32;
pub const struct___SecTrustedApplication = opaque {};
pub const SecTrustedApplicationRef = ?*struct___SecTrustedApplication;
pub const struct___SecAccess = opaque {};
pub const SecAccessRef = ?*struct___SecAccess;
pub const OpaqueSecAccessRef = struct___SecAccess;
pub const struct___SecACL = opaque {};
pub const SecACLRef = ?*struct___SecACL;
pub const struct___SecPassword = opaque {};
pub const SecPasswordRef = ?*struct___SecPassword;
pub const struct_SecKeychainAttributeInfo = extern struct {
    count: UInt32,
    tag: [*c]UInt32,
    format: [*c]UInt32,
};
pub const SecKeychainAttributeInfo = struct_SecKeychainAttributeInfo;
pub extern fn SecCopyErrorMessageString(status: OSStatus, reserved: ?*anyopaque) CFStringRef;
pub const errSecSuccess: c_int = 0;
pub const errSecUnimplemented: c_int = -4;
pub const errSecDiskFull: c_int = -34;
pub const errSecDskFull: c_int = -34;
pub const errSecIO: c_int = -36;
pub const errSecOpWr: c_int = -49;
pub const errSecParam: c_int = -50;
pub const errSecWrPerm: c_int = -61;
pub const errSecAllocate: c_int = -108;
pub const errSecUserCanceled: c_int = -128;
pub const errSecBadReq: c_int = -909;
pub const errSecInternalComponent: c_int = -2070;
pub const errSecCoreFoundationUnknown: c_int = -4960;
pub const errSecMissingEntitlement: c_int = -34018;
pub const errSecRestrictedAPI: c_int = -34020;
pub const errSecNotAvailable: c_int = -25291;
pub const errSecReadOnly: c_int = -25292;
pub const errSecAuthFailed: c_int = -25293;
pub const errSecNoSuchKeychain: c_int = -25294;
pub const errSecInvalidKeychain: c_int = -25295;
pub const errSecDuplicateKeychain: c_int = -25296;
pub const errSecDuplicateCallback: c_int = -25297;
pub const errSecInvalidCallback: c_int = -25298;
pub const errSecDuplicateItem: c_int = -25299;
pub const errSecItemNotFound: c_int = -25300;
pub const errSecBufferTooSmall: c_int = -25301;
pub const errSecDataTooLarge: c_int = -25302;
pub const errSecNoSuchAttr: c_int = -25303;
pub const errSecInvalidItemRef: c_int = -25304;
pub const errSecInvalidSearchRef: c_int = -25305;
pub const errSecNoSuchClass: c_int = -25306;
pub const errSecNoDefaultKeychain: c_int = -25307;
pub const errSecInteractionNotAllowed: c_int = -25308;
pub const errSecReadOnlyAttr: c_int = -25309;
pub const errSecWrongSecVersion: c_int = -25310;
pub const errSecKeySizeNotAllowed: c_int = -25311;
pub const errSecNoStorageModule: c_int = -25312;
pub const errSecNoCertificateModule: c_int = -25313;
pub const errSecNoPolicyModule: c_int = -25314;
pub const errSecInteractionRequired: c_int = -25315;
pub const errSecDataNotAvailable: c_int = -25316;
pub const errSecDataNotModifiable: c_int = -25317;
pub const errSecCreateChainFailed: c_int = -25318;
pub const errSecInvalidPrefsDomain: c_int = -25319;
pub const errSecInDarkWake: c_int = -25320;
pub const errSecACLNotSimple: c_int = -25240;
pub const errSecPolicyNotFound: c_int = -25241;
pub const errSecInvalidTrustSetting: c_int = -25242;
pub const errSecNoAccessForItem: c_int = -25243;
pub const errSecInvalidOwnerEdit: c_int = -25244;
pub const errSecTrustNotAvailable: c_int = -25245;
pub const errSecUnsupportedFormat: c_int = -25256;
pub const errSecUnknownFormat: c_int = -25257;
pub const errSecKeyIsSensitive: c_int = -25258;
pub const errSecMultiplePrivKeys: c_int = -25259;
pub const errSecPassphraseRequired: c_int = -25260;
pub const errSecInvalidPasswordRef: c_int = -25261;
pub const errSecInvalidTrustSettings: c_int = -25262;
pub const errSecNoTrustSettings: c_int = -25263;
pub const errSecPkcs12VerifyFailure: c_int = -25264;
pub const errSecNotSigner: c_int = -26267;
pub const errSecDecode: c_int = -26275;
pub const errSecServiceNotAvailable: c_int = -67585;
pub const errSecInsufficientClientID: c_int = -67586;
pub const errSecDeviceReset: c_int = -67587;
pub const errSecDeviceFailed: c_int = -67588;
pub const errSecAppleAddAppACLSubject: c_int = -67589;
pub const errSecApplePublicKeyIncomplete: c_int = -67590;
pub const errSecAppleSignatureMismatch: c_int = -67591;
pub const errSecAppleInvalidKeyStartDate: c_int = -67592;
pub const errSecAppleInvalidKeyEndDate: c_int = -67593;
pub const errSecConversionError: c_int = -67594;
pub const errSecAppleSSLv2Rollback: c_int = -67595;
pub const errSecQuotaExceeded: c_int = -67596;
pub const errSecFileTooBig: c_int = -67597;
pub const errSecInvalidDatabaseBlob: c_int = -67598;
pub const errSecInvalidKeyBlob: c_int = -67599;
pub const errSecIncompatibleDatabaseBlob: c_int = -67600;
pub const errSecIncompatibleKeyBlob: c_int = -67601;
pub const errSecHostNameMismatch: c_int = -67602;
pub const errSecUnknownCriticalExtensionFlag: c_int = -67603;
pub const errSecNoBasicConstraints: c_int = -67604;
pub const errSecNoBasicConstraintsCA: c_int = -67605;
pub const errSecInvalidAuthorityKeyID: c_int = -67606;
pub const errSecInvalidSubjectKeyID: c_int = -67607;
pub const errSecInvalidKeyUsageForPolicy: c_int = -67608;
pub const errSecInvalidExtendedKeyUsage: c_int = -67609;
pub const errSecInvalidIDLinkage: c_int = -67610;
pub const errSecPathLengthConstraintExceeded: c_int = -67611;
pub const errSecInvalidRoot: c_int = -67612;
pub const errSecCRLExpired: c_int = -67613;
pub const errSecCRLNotValidYet: c_int = -67614;
pub const errSecCRLNotFound: c_int = -67615;
pub const errSecCRLServerDown: c_int = -67616;
pub const errSecCRLBadURI: c_int = -67617;
pub const errSecUnknownCertExtension: c_int = -67618;
pub const errSecUnknownCRLExtension: c_int = -67619;
pub const errSecCRLNotTrusted: c_int = -67620;
pub const errSecCRLPolicyFailed: c_int = -67621;
pub const errSecIDPFailure: c_int = -67622;
pub const errSecSMIMEEmailAddressesNotFound: c_int = -67623;
pub const errSecSMIMEBadExtendedKeyUsage: c_int = -67624;
pub const errSecSMIMEBadKeyUsage: c_int = -67625;
pub const errSecSMIMEKeyUsageNotCritical: c_int = -67626;
pub const errSecSMIMENoEmailAddress: c_int = -67627;
pub const errSecSMIMESubjAltNameNotCritical: c_int = -67628;
pub const errSecSSLBadExtendedKeyUsage: c_int = -67629;
pub const errSecOCSPBadResponse: c_int = -67630;
pub const errSecOCSPBadRequest: c_int = -67631;
pub const errSecOCSPUnavailable: c_int = -67632;
pub const errSecOCSPStatusUnrecognized: c_int = -67633;
pub const errSecEndOfData: c_int = -67634;
pub const errSecIncompleteCertRevocationCheck: c_int = -67635;
pub const errSecNetworkFailure: c_int = -67636;
pub const errSecOCSPNotTrustedToAnchor: c_int = -67637;
pub const errSecRecordModified: c_int = -67638;
pub const errSecOCSPSignatureError: c_int = -67639;
pub const errSecOCSPNoSigner: c_int = -67640;
pub const errSecOCSPResponderMalformedReq: c_int = -67641;
pub const errSecOCSPResponderInternalError: c_int = -67642;
pub const errSecOCSPResponderTryLater: c_int = -67643;
pub const errSecOCSPResponderSignatureRequired: c_int = -67644;
pub const errSecOCSPResponderUnauthorized: c_int = -67645;
pub const errSecOCSPResponseNonceMismatch: c_int = -67646;
pub const errSecCodeSigningBadCertChainLength: c_int = -67647;
pub const errSecCodeSigningNoBasicConstraints: c_int = -67648;
pub const errSecCodeSigningBadPathLengthConstraint: c_int = -67649;
pub const errSecCodeSigningNoExtendedKeyUsage: c_int = -67650;
pub const errSecCodeSigningDevelopment: c_int = -67651;
pub const errSecResourceSignBadCertChainLength: c_int = -67652;
pub const errSecResourceSignBadExtKeyUsage: c_int = -67653;
pub const errSecTrustSettingDeny: c_int = -67654;
pub const errSecInvalidSubjectName: c_int = -67655;
pub const errSecUnknownQualifiedCertStatement: c_int = -67656;
pub const errSecMobileMeRequestQueued: c_int = -67657;
pub const errSecMobileMeRequestRedirected: c_int = -67658;
pub const errSecMobileMeServerError: c_int = -67659;
pub const errSecMobileMeServerNotAvailable: c_int = -67660;
pub const errSecMobileMeServerAlreadyExists: c_int = -67661;
pub const errSecMobileMeServerServiceErr: c_int = -67662;
pub const errSecMobileMeRequestAlreadyPending: c_int = -67663;
pub const errSecMobileMeNoRequestPending: c_int = -67664;
pub const errSecMobileMeCSRVerifyFailure: c_int = -67665;
pub const errSecMobileMeFailedConsistencyCheck: c_int = -67666;
pub const errSecNotInitialized: c_int = -67667;
pub const errSecInvalidHandleUsage: c_int = -67668;
pub const errSecPVCReferentNotFound: c_int = -67669;
pub const errSecFunctionIntegrityFail: c_int = -67670;
pub const errSecInternalError: c_int = -67671;
pub const errSecMemoryError: c_int = -67672;
pub const errSecInvalidData: c_int = -67673;
pub const errSecMDSError: c_int = -67674;
pub const errSecInvalidPointer: c_int = -67675;
pub const errSecSelfCheckFailed: c_int = -67676;
pub const errSecFunctionFailed: c_int = -67677;
pub const errSecModuleManifestVerifyFailed: c_int = -67678;
pub const errSecInvalidGUID: c_int = -67679;
pub const errSecInvalidHandle: c_int = -67680;
pub const errSecInvalidDBList: c_int = -67681;
pub const errSecInvalidPassthroughID: c_int = -67682;
pub const errSecInvalidNetworkAddress: c_int = -67683;
pub const errSecCRLAlreadySigned: c_int = -67684;
pub const errSecInvalidNumberOfFields: c_int = -67685;
pub const errSecVerificationFailure: c_int = -67686;
pub const errSecUnknownTag: c_int = -67687;
pub const errSecInvalidSignature: c_int = -67688;
pub const errSecInvalidName: c_int = -67689;
pub const errSecInvalidCertificateRef: c_int = -67690;
pub const errSecInvalidCertificateGroup: c_int = -67691;
pub const errSecTagNotFound: c_int = -67692;
pub const errSecInvalidQuery: c_int = -67693;
pub const errSecInvalidValue: c_int = -67694;
pub const errSecCallbackFailed: c_int = -67695;
pub const errSecACLDeleteFailed: c_int = -67696;
pub const errSecACLReplaceFailed: c_int = -67697;
pub const errSecACLAddFailed: c_int = -67698;
pub const errSecACLChangeFailed: c_int = -67699;
pub const errSecInvalidAccessCredentials: c_int = -67700;
pub const errSecInvalidRecord: c_int = -67701;
pub const errSecInvalidACL: c_int = -67702;
pub const errSecInvalidSampleValue: c_int = -67703;
pub const errSecIncompatibleVersion: c_int = -67704;
pub const errSecPrivilegeNotGranted: c_int = -67705;
pub const errSecInvalidScope: c_int = -67706;
pub const errSecPVCAlreadyConfigured: c_int = -67707;
pub const errSecInvalidPVC: c_int = -67708;
pub const errSecEMMLoadFailed: c_int = -67709;
pub const errSecEMMUnloadFailed: c_int = -67710;
pub const errSecAddinLoadFailed: c_int = -67711;
pub const errSecInvalidKeyRef: c_int = -67712;
pub const errSecInvalidKeyHierarchy: c_int = -67713;
pub const errSecAddinUnloadFailed: c_int = -67714;
pub const errSecLibraryReferenceNotFound: c_int = -67715;
pub const errSecInvalidAddinFunctionTable: c_int = -67716;
pub const errSecInvalidServiceMask: c_int = -67717;
pub const errSecModuleNotLoaded: c_int = -67718;
pub const errSecInvalidSubServiceID: c_int = -67719;
pub const errSecAttributeNotInContext: c_int = -67720;
pub const errSecModuleManagerInitializeFailed: c_int = -67721;
pub const errSecModuleManagerNotFound: c_int = -67722;
pub const errSecEventNotificationCallbackNotFound: c_int = -67723;
pub const errSecInputLengthError: c_int = -67724;
pub const errSecOutputLengthError: c_int = -67725;
pub const errSecPrivilegeNotSupported: c_int = -67726;
pub const errSecDeviceError: c_int = -67727;
pub const errSecAttachHandleBusy: c_int = -67728;
pub const errSecNotLoggedIn: c_int = -67729;
pub const errSecAlgorithmMismatch: c_int = -67730;
pub const errSecKeyUsageIncorrect: c_int = -67731;
pub const errSecKeyBlobTypeIncorrect: c_int = -67732;
pub const errSecKeyHeaderInconsistent: c_int = -67733;
pub const errSecUnsupportedKeyFormat: c_int = -67734;
pub const errSecUnsupportedKeySize: c_int = -67735;
pub const errSecInvalidKeyUsageMask: c_int = -67736;
pub const errSecUnsupportedKeyUsageMask: c_int = -67737;
pub const errSecInvalidKeyAttributeMask: c_int = -67738;
pub const errSecUnsupportedKeyAttributeMask: c_int = -67739;
pub const errSecInvalidKeyLabel: c_int = -67740;
pub const errSecUnsupportedKeyLabel: c_int = -67741;
pub const errSecInvalidKeyFormat: c_int = -67742;
pub const errSecUnsupportedVectorOfBuffers: c_int = -67743;
pub const errSecInvalidInputVector: c_int = -67744;
pub const errSecInvalidOutputVector: c_int = -67745;
pub const errSecInvalidContext: c_int = -67746;
pub const errSecInvalidAlgorithm: c_int = -67747;
pub const errSecInvalidAttributeKey: c_int = -67748;
pub const errSecMissingAttributeKey: c_int = -67749;
pub const errSecInvalidAttributeInitVector: c_int = -67750;
pub const errSecMissingAttributeInitVector: c_int = -67751;
pub const errSecInvalidAttributeSalt: c_int = -67752;
pub const errSecMissingAttributeSalt: c_int = -67753;
pub const errSecInvalidAttributePadding: c_int = -67754;
pub const errSecMissingAttributePadding: c_int = -67755;
pub const errSecInvalidAttributeRandom: c_int = -67756;
pub const errSecMissingAttributeRandom: c_int = -67757;
pub const errSecInvalidAttributeSeed: c_int = -67758;
pub const errSecMissingAttributeSeed: c_int = -67759;
pub const errSecInvalidAttributePassphrase: c_int = -67760;
pub const errSecMissingAttributePassphrase: c_int = -67761;
pub const errSecInvalidAttributeKeyLength: c_int = -67762;
pub const errSecMissingAttributeKeyLength: c_int = -67763;
pub const errSecInvalidAttributeBlockSize: c_int = -67764;
pub const errSecMissingAttributeBlockSize: c_int = -67765;
pub const errSecInvalidAttributeOutputSize: c_int = -67766;
pub const errSecMissingAttributeOutputSize: c_int = -67767;
pub const errSecInvalidAttributeRounds: c_int = -67768;
pub const errSecMissingAttributeRounds: c_int = -67769;
pub const errSecInvalidAlgorithmParms: c_int = -67770;
pub const errSecMissingAlgorithmParms: c_int = -67771;
pub const errSecInvalidAttributeLabel: c_int = -67772;
pub const errSecMissingAttributeLabel: c_int = -67773;
pub const errSecInvalidAttributeKeyType: c_int = -67774;
pub const errSecMissingAttributeKeyType: c_int = -67775;
pub const errSecInvalidAttributeMode: c_int = -67776;
pub const errSecMissingAttributeMode: c_int = -67777;
pub const errSecInvalidAttributeEffectiveBits: c_int = -67778;
pub const errSecMissingAttributeEffectiveBits: c_int = -67779;
pub const errSecInvalidAttributeStartDate: c_int = -67780;
pub const errSecMissingAttributeStartDate: c_int = -67781;
pub const errSecInvalidAttributeEndDate: c_int = -67782;
pub const errSecMissingAttributeEndDate: c_int = -67783;
pub const errSecInvalidAttributeVersion: c_int = -67784;
pub const errSecMissingAttributeVersion: c_int = -67785;
pub const errSecInvalidAttributePrime: c_int = -67786;
pub const errSecMissingAttributePrime: c_int = -67787;
pub const errSecInvalidAttributeBase: c_int = -67788;
pub const errSecMissingAttributeBase: c_int = -67789;
pub const errSecInvalidAttributeSubprime: c_int = -67790;
pub const errSecMissingAttributeSubprime: c_int = -67791;
pub const errSecInvalidAttributeIterationCount: c_int = -67792;
pub const errSecMissingAttributeIterationCount: c_int = -67793;
pub const errSecInvalidAttributeDLDBHandle: c_int = -67794;
pub const errSecMissingAttributeDLDBHandle: c_int = -67795;
pub const errSecInvalidAttributeAccessCredentials: c_int = -67796;
pub const errSecMissingAttributeAccessCredentials: c_int = -67797;
pub const errSecInvalidAttributePublicKeyFormat: c_int = -67798;
pub const errSecMissingAttributePublicKeyFormat: c_int = -67799;
pub const errSecInvalidAttributePrivateKeyFormat: c_int = -67800;
pub const errSecMissingAttributePrivateKeyFormat: c_int = -67801;
pub const errSecInvalidAttributeSymmetricKeyFormat: c_int = -67802;
pub const errSecMissingAttributeSymmetricKeyFormat: c_int = -67803;
pub const errSecInvalidAttributeWrappedKeyFormat: c_int = -67804;
pub const errSecMissingAttributeWrappedKeyFormat: c_int = -67805;
pub const errSecStagedOperationInProgress: c_int = -67806;
pub const errSecStagedOperationNotStarted: c_int = -67807;
pub const errSecVerifyFailed: c_int = -67808;
pub const errSecQuerySizeUnknown: c_int = -67809;
pub const errSecBlockSizeMismatch: c_int = -67810;
pub const errSecPublicKeyInconsistent: c_int = -67811;
pub const errSecDeviceVerifyFailed: c_int = -67812;
pub const errSecInvalidLoginName: c_int = -67813;
pub const errSecAlreadyLoggedIn: c_int = -67814;
pub const errSecInvalidDigestAlgorithm: c_int = -67815;
pub const errSecInvalidCRLGroup: c_int = -67816;
pub const errSecCertificateCannotOperate: c_int = -67817;
pub const errSecCertificateExpired: c_int = -67818;
pub const errSecCertificateNotValidYet: c_int = -67819;
pub const errSecCertificateRevoked: c_int = -67820;
pub const errSecCertificateSuspended: c_int = -67821;
pub const errSecInsufficientCredentials: c_int = -67822;
pub const errSecInvalidAction: c_int = -67823;
pub const errSecInvalidAuthority: c_int = -67824;
pub const errSecVerifyActionFailed: c_int = -67825;
pub const errSecInvalidCertAuthority: c_int = -67826;
pub const errSecInvalidCRLAuthority: c_int = -67827;
pub const errSecInvaldCRLAuthority: c_int = -67827;
pub const errSecInvalidCRLEncoding: c_int = -67828;
pub const errSecInvalidCRLType: c_int = -67829;
pub const errSecInvalidCRL: c_int = -67830;
pub const errSecInvalidFormType: c_int = -67831;
pub const errSecInvalidID: c_int = -67832;
pub const errSecInvalidIdentifier: c_int = -67833;
pub const errSecInvalidIndex: c_int = -67834;
pub const errSecInvalidPolicyIdentifiers: c_int = -67835;
pub const errSecInvalidTimeString: c_int = -67836;
pub const errSecInvalidReason: c_int = -67837;
pub const errSecInvalidRequestInputs: c_int = -67838;
pub const errSecInvalidResponseVector: c_int = -67839;
pub const errSecInvalidStopOnPolicy: c_int = -67840;
pub const errSecInvalidTuple: c_int = -67841;
pub const errSecMultipleValuesUnsupported: c_int = -67842;
pub const errSecNotTrusted: c_int = -67843;
pub const errSecNoDefaultAuthority: c_int = -67844;
pub const errSecRejectedForm: c_int = -67845;
pub const errSecRequestLost: c_int = -67846;
pub const errSecRequestRejected: c_int = -67847;
pub const errSecUnsupportedAddressType: c_int = -67848;
pub const errSecUnsupportedService: c_int = -67849;
pub const errSecInvalidTupleGroup: c_int = -67850;
pub const errSecInvalidBaseACLs: c_int = -67851;
pub const errSecInvalidTupleCredentials: c_int = -67852;
pub const errSecInvalidTupleCredendtials: c_int = -67852;
pub const errSecInvalidEncoding: c_int = -67853;
pub const errSecInvalidValidityPeriod: c_int = -67854;
pub const errSecInvalidRequestor: c_int = -67855;
pub const errSecRequestDescriptor: c_int = -67856;
pub const errSecInvalidBundleInfo: c_int = -67857;
pub const errSecInvalidCRLIndex: c_int = -67858;
pub const errSecNoFieldValues: c_int = -67859;
pub const errSecUnsupportedFieldFormat: c_int = -67860;
pub const errSecUnsupportedIndexInfo: c_int = -67861;
pub const errSecUnsupportedLocality: c_int = -67862;
pub const errSecUnsupportedNumAttributes: c_int = -67863;
pub const errSecUnsupportedNumIndexes: c_int = -67864;
pub const errSecUnsupportedNumRecordTypes: c_int = -67865;
pub const errSecFieldSpecifiedMultiple: c_int = -67866;
pub const errSecIncompatibleFieldFormat: c_int = -67867;
pub const errSecInvalidParsingModule: c_int = -67868;
pub const errSecDatabaseLocked: c_int = -67869;
pub const errSecDatastoreIsOpen: c_int = -67870;
pub const errSecMissingValue: c_int = -67871;
pub const errSecUnsupportedQueryLimits: c_int = -67872;
pub const errSecUnsupportedNumSelectionPreds: c_int = -67873;
pub const errSecUnsupportedOperator: c_int = -67874;
pub const errSecInvalidDBLocation: c_int = -67875;
pub const errSecInvalidAccessRequest: c_int = -67876;
pub const errSecInvalidIndexInfo: c_int = -67877;
pub const errSecInvalidNewOwner: c_int = -67878;
pub const errSecInvalidModifyMode: c_int = -67879;
pub const errSecMissingRequiredExtension: c_int = -67880;
pub const errSecExtendedKeyUsageNotCritical: c_int = -67881;
pub const errSecTimestampMissing: c_int = -67882;
pub const errSecTimestampInvalid: c_int = -67883;
pub const errSecTimestampNotTrusted: c_int = -67884;
pub const errSecTimestampServiceNotAvailable: c_int = -67885;
pub const errSecTimestampBadAlg: c_int = -67886;
pub const errSecTimestampBadRequest: c_int = -67887;
pub const errSecTimestampBadDataFormat: c_int = -67888;
pub const errSecTimestampTimeNotAvailable: c_int = -67889;
pub const errSecTimestampUnacceptedPolicy: c_int = -67890;
pub const errSecTimestampUnacceptedExtension: c_int = -67891;
pub const errSecTimestampAddInfoNotAvailable: c_int = -67892;
pub const errSecTimestampSystemFailure: c_int = -67893;
pub const errSecSigningTimeMissing: c_int = -67894;
pub const errSecTimestampRejection: c_int = -67895;
pub const errSecTimestampWaiting: c_int = -67896;
pub const errSecTimestampRevocationWarning: c_int = -67897;
pub const errSecTimestampRevocationNotification: c_int = -67898;
pub const errSecCertificatePolicyNotAllowed: c_int = -67899;
pub const errSecCertificateNameNotAllowed: c_int = -67900;
pub const errSecCertificateValidityPeriodTooLong: c_int = -67901;
pub const errSecCertificateIsCA: c_int = -67902;
pub const errSecCertificateDuplicateExtension: c_int = -67903;
const enum_unnamed_947 = c_int;
pub const errSSLProtocol: c_int = -9800;
pub const errSSLNegotiation: c_int = -9801;
pub const errSSLFatalAlert: c_int = -9802;
pub const errSSLWouldBlock: c_int = -9803;
pub const errSSLSessionNotFound: c_int = -9804;
pub const errSSLClosedGraceful: c_int = -9805;
pub const errSSLClosedAbort: c_int = -9806;
pub const errSSLXCertChainInvalid: c_int = -9807;
pub const errSSLBadCert: c_int = -9808;
pub const errSSLCrypto: c_int = -9809;
pub const errSSLInternal: c_int = -9810;
pub const errSSLModuleAttach: c_int = -9811;
pub const errSSLUnknownRootCert: c_int = -9812;
pub const errSSLNoRootCert: c_int = -9813;
pub const errSSLCertExpired: c_int = -9814;
pub const errSSLCertNotYetValid: c_int = -9815;
pub const errSSLClosedNoNotify: c_int = -9816;
pub const errSSLBufferOverflow: c_int = -9817;
pub const errSSLBadCipherSuite: c_int = -9818;
pub const errSSLPeerUnexpectedMsg: c_int = -9819;
pub const errSSLPeerBadRecordMac: c_int = -9820;
pub const errSSLPeerDecryptionFail: c_int = -9821;
pub const errSSLPeerRecordOverflow: c_int = -9822;
pub const errSSLPeerDecompressFail: c_int = -9823;
pub const errSSLPeerHandshakeFail: c_int = -9824;
pub const errSSLPeerBadCert: c_int = -9825;
pub const errSSLPeerUnsupportedCert: c_int = -9826;
pub const errSSLPeerCertRevoked: c_int = -9827;
pub const errSSLPeerCertExpired: c_int = -9828;
pub const errSSLPeerCertUnknown: c_int = -9829;
pub const errSSLIllegalParam: c_int = -9830;
pub const errSSLPeerUnknownCA: c_int = -9831;
pub const errSSLPeerAccessDenied: c_int = -9832;
pub const errSSLPeerDecodeError: c_int = -9833;
pub const errSSLPeerDecryptError: c_int = -9834;
pub const errSSLPeerExportRestriction: c_int = -9835;
pub const errSSLPeerProtocolVersion: c_int = -9836;
pub const errSSLPeerInsufficientSecurity: c_int = -9837;
pub const errSSLPeerInternalError: c_int = -9838;
pub const errSSLPeerUserCancelled: c_int = -9839;
pub const errSSLPeerNoRenegotiation: c_int = -9840;
pub const errSSLPeerAuthCompleted: c_int = -9841;
pub const errSSLClientCertRequested: c_int = -9842;
pub const errSSLHostNameMismatch: c_int = -9843;
pub const errSSLConnectionRefused: c_int = -9844;
pub const errSSLDecryptionFail: c_int = -9845;
pub const errSSLBadRecordMac: c_int = -9846;
pub const errSSLRecordOverflow: c_int = -9847;
pub const errSSLBadConfiguration: c_int = -9848;
pub const errSSLUnexpectedRecord: c_int = -9849;
pub const errSSLWeakPeerEphemeralDHKey: c_int = -9850;
pub const errSSLClientHelloReceived: c_int = -9851;
pub const errSSLTransportReset: c_int = -9852;
pub const errSSLNetworkTimeout: c_int = -9853;
pub const errSSLConfigurationFailed: c_int = -9854;
pub const errSSLUnsupportedExtension: c_int = -9855;
pub const errSSLUnexpectedMessage: c_int = -9856;
pub const errSSLDecompressFail: c_int = -9857;
pub const errSSLHandshakeFail: c_int = -9858;
pub const errSSLDecodeError: c_int = -9859;
pub const errSSLInappropriateFallback: c_int = -9860;
pub const errSSLMissingExtension: c_int = -9861;
pub const errSSLBadCertificateStatusResponse: c_int = -9862;
pub const errSSLCertificateRequired: c_int = -9863;
pub const errSSLUnknownPSKIdentity: c_int = -9864;
pub const errSSLUnrecognizedName: c_int = -9865;
pub const errSSLATSViolation: c_int = -9880;
pub const errSSLATSMinimumVersionViolation: c_int = -9881;
pub const errSSLATSCiphersuiteViolation: c_int = -9882;
pub const errSSLATSMinimumKeySizeViolation: c_int = -9883;
pub const errSSLATSLeafCertificateHashAlgorithmViolation: c_int = -9884;
pub const errSSLATSCertificateHashAlgorithmViolation: c_int = -9885;
pub const errSSLATSCertificateTrustViolation: c_int = -9886;
pub const errSSLEarlyDataRejected: c_int = -9890;
const enum_unnamed_948 = c_int;
pub extern const kCSIdentityErrorDomain: CFStringRef;
pub const kCSIdentityUnknownAuthorityErr: c_int = -1;
pub const kCSIdentityAuthorityNotAccessibleErr: c_int = -2;
pub const kCSIdentityPermissionErr: c_int = -3;
pub const kCSIdentityDeletedErr: c_int = -4;
pub const kCSIdentityInvalidFullNameErr: c_int = -5;
pub const kCSIdentityDuplicateFullNameErr: c_int = -6;
pub const kCSIdentityInvalidPosixNameErr: c_int = -7;
pub const kCSIdentityDuplicatePosixNameErr: c_int = -8;
const enum_unnamed_949 = c_int;
pub const struct___CSIdentityAuthority = opaque {};
pub const CSIdentityAuthorityRef = ?*struct___CSIdentityAuthority;
pub extern fn CSIdentityAuthorityGetTypeID() CFTypeID;
pub extern fn CSGetDefaultIdentityAuthority() CSIdentityAuthorityRef;
pub extern fn CSGetLocalIdentityAuthority() CSIdentityAuthorityRef;
pub extern fn CSGetManagedIdentityAuthority() CSIdentityAuthorityRef;
pub extern fn CSIdentityAuthorityCopyLocalizedName(authority: CSIdentityAuthorityRef) CFStringRef;
pub const sint64 = i64;
pub const uint64 = u64;
pub const sint32 = i32;
pub const sint16 = i16;
pub const sint8 = i8;
pub const uint32 = u32;
pub const uint16 = u16;
pub const uint8 = u8;
pub const CSSM_INTPTR = isize;
pub const CSSM_SIZE = usize;
pub const struct_cssm_data = extern struct {
    Length: usize,
    Data: [*c]u8,
};
pub const SecAsn1Item = struct_cssm_data;
pub const SecAsn1Oid = struct_cssm_data;
pub const SecAsn1AlgId = extern struct {
    algorithm: SecAsn1Oid,
    parameters: SecAsn1Item,
};
pub const SecAsn1PubKeyInfo = extern struct {
    algorithm: SecAsn1AlgId,
    subjectPublicKey: SecAsn1Item,
};
pub const struct_SecAsn1Template_struct = extern struct {
    kind: u32,
    offset: u32,
    sub: ?*const anyopaque,
    size: u32,
};
pub const SecAsn1Template = struct_SecAsn1Template_struct;
pub const SecAsn1TemplateChooser = fn (?*anyopaque, Boolean, [*c]const u8, usize, ?*anyopaque) callconv(.C) [*c]const SecAsn1Template;
pub const SecAsn1TemplateChooserPtr = ?SecAsn1TemplateChooser;
pub const CSSM_HANDLE = CSSM_INTPTR;
pub const CSSM_HANDLE_PTR = [*c]CSSM_INTPTR;
pub const CSSM_LONG_HANDLE = uint64;
pub const CSSM_LONG_HANDLE_PTR = [*c]uint64;
pub const CSSM_MODULE_HANDLE = CSSM_HANDLE;
pub const CSSM_MODULE_HANDLE_PTR = [*c]CSSM_HANDLE;
pub const CSSM_CC_HANDLE = CSSM_LONG_HANDLE;
pub const CSSM_CSP_HANDLE = CSSM_MODULE_HANDLE;
pub const CSSM_TP_HANDLE = CSSM_MODULE_HANDLE;
pub const CSSM_AC_HANDLE = CSSM_MODULE_HANDLE;
pub const CSSM_CL_HANDLE = CSSM_MODULE_HANDLE;
pub const CSSM_DL_HANDLE = CSSM_MODULE_HANDLE;
pub const CSSM_DB_HANDLE = CSSM_MODULE_HANDLE;
pub const CSSM_INVALID_HANDLE: c_int = 0;
const enum_unnamed_950 = c_uint;
pub const CSSM_BOOL = sint32;
pub const CSSM_FALSE: c_int = 0;
pub const CSSM_TRUE: c_int = 1;
const enum_unnamed_951 = c_uint;
pub const CSSM_RETURN = sint32;
pub const CSSM_OK: c_int = 0;
const enum_unnamed_952 = c_uint;
pub const CSSM_MODULE_STRING_SIZE: c_int = 64;
const enum_unnamed_953 = c_uint;
pub const CSSM_STRING = [68]u8;
pub const CSSM_DATA_PTR = [*c]SecAsn1Item;
pub const struct_cssm_guid = extern struct {
    Data1: uint32,
    Data2: uint16,
    Data3: uint16,
    Data4: [8]uint8,
};
pub const CSSM_GUID = struct_cssm_guid;
pub const CSSM_GUID_PTR = [*c]struct_cssm_guid;
pub const CSSM_BITMASK = uint32;
pub const CSSM_KEY_HIERARCHY = CSSM_BITMASK;
pub const CSSM_KEY_HIERARCHY_NONE: c_int = 0;
pub const CSSM_KEY_HIERARCHY_INTEG: c_int = 1;
pub const CSSM_KEY_HIERARCHY_EXPORT: c_int = 2;
const enum_unnamed_954 = c_uint;
pub const CSSM_PVC_MODE = CSSM_BITMASK;
pub const CSSM_PVC_NONE: c_int = 0;
pub const CSSM_PVC_APP: c_int = 1;
pub const CSSM_PVC_SP: c_int = 2;
const enum_unnamed_955 = c_uint;
pub const CSSM_PRIVILEGE_SCOPE = uint32;
pub const CSSM_PRIVILEGE_SCOPE_NONE: c_int = 0;
pub const CSSM_PRIVILEGE_SCOPE_PROCESS: c_int = 1;
pub const CSSM_PRIVILEGE_SCOPE_THREAD: c_int = 2;
const enum_unnamed_956 = c_uint;
pub const struct_cssm_version = extern struct {
    Major: uint32,
    Minor: uint32,
};
pub const CSSM_VERSION = struct_cssm_version;
pub const CSSM_VERSION_PTR = [*c]struct_cssm_version;
pub const CSSM_SERVICE_MASK = uint32;
pub const CSSM_SERVICE_CSSM: c_int = 1;
pub const CSSM_SERVICE_CSP: c_int = 2;
pub const CSSM_SERVICE_DL: c_int = 4;
pub const CSSM_SERVICE_CL: c_int = 8;
pub const CSSM_SERVICE_TP: c_int = 16;
pub const CSSM_SERVICE_AC: c_int = 32;
pub const CSSM_SERVICE_KR: c_int = 64;
const enum_unnamed_957 = c_uint;
pub const CSSM_SERVICE_TYPE = CSSM_SERVICE_MASK;
pub const struct_cssm_subservice_uid = extern struct {
    Guid: CSSM_GUID,
    Version: CSSM_VERSION,
    SubserviceId: uint32,
    SubserviceType: CSSM_SERVICE_TYPE,
};
pub const CSSM_SUBSERVICE_UID = struct_cssm_subservice_uid;
pub const CSSM_SUBSERVICE_UID_PTR = [*c]struct_cssm_subservice_uid;
pub const CSSM_MODULE_EVENT = uint32;
pub const CSSM_MODULE_EVENT_PTR = [*c]uint32;
pub const CSSM_NOTIFY_INSERT: c_int = 1;
pub const CSSM_NOTIFY_REMOVE: c_int = 2;
pub const CSSM_NOTIFY_FAULT: c_int = 3;
const enum_unnamed_958 = c_uint;
pub const CSSM_API_ModuleEventHandler = ?*const fn ([*c]const CSSM_GUID, ?*anyopaque, uint32, CSSM_SERVICE_TYPE, CSSM_MODULE_EVENT) callconv(.C) CSSM_RETURN;
pub const CSSM_ATTACH_FLAGS = uint32;
pub const CSSM_ATTACH_READ_ONLY: c_int = 1;
const enum_unnamed_959 = c_uint;
pub const CSSM_PRIVILEGE = uint64;
pub const CSSM_USEE_TAG = CSSM_PRIVILEGE;
pub const CSSM_USEE_LAST: c_int = 255;
pub const CSSM_USEE_NONE: c_int = 0;
pub const CSSM_USEE_DOMESTIC: c_int = 1;
pub const CSSM_USEE_FINANCIAL: c_int = 2;
pub const CSSM_USEE_KRLE: c_int = 3;
pub const CSSM_USEE_KRENT: c_int = 4;
pub const CSSM_USEE_SSL: c_int = 5;
pub const CSSM_USEE_AUTHENTICATION: c_int = 6;
pub const CSSM_USEE_KEYEXCH: c_int = 7;
pub const CSSM_USEE_MEDICAL: c_int = 8;
pub const CSSM_USEE_INSURANCE: c_int = 9;
pub const CSSM_USEE_WEAK: c_int = 10;
const enum_unnamed_960 = c_uint;
pub const CSSM_NET_ADDRESS_TYPE = uint32;
pub const CSSM_ADDR_NONE: c_int = 0;
pub const CSSM_ADDR_CUSTOM: c_int = 1;
pub const CSSM_ADDR_URL: c_int = 2;
pub const CSSM_ADDR_SOCKADDR: c_int = 3;
pub const CSSM_ADDR_NAME: c_int = 4;
const enum_unnamed_961 = c_uint;
pub const struct_cssm_net_address = extern struct {
    AddressType: CSSM_NET_ADDRESS_TYPE,
    Address: SecAsn1Item,
};
pub const CSSM_NET_ADDRESS = struct_cssm_net_address;
pub const CSSM_NET_ADDRESS_PTR = [*c]struct_cssm_net_address;
pub const CSSM_NET_PROTOCOL = uint32;
pub const CSSM_NET_PROTO_NONE: c_int = 0;
pub const CSSM_NET_PROTO_CUSTOM: c_int = 1;
pub const CSSM_NET_PROTO_UNSPECIFIED: c_int = 2;
pub const CSSM_NET_PROTO_LDAP: c_int = 3;
pub const CSSM_NET_PROTO_LDAPS: c_int = 4;
pub const CSSM_NET_PROTO_LDAPNS: c_int = 5;
pub const CSSM_NET_PROTO_X500DAP: c_int = 6;
pub const CSSM_NET_PROTO_FTP: c_int = 7;
pub const CSSM_NET_PROTO_FTPS: c_int = 8;
pub const CSSM_NET_PROTO_OCSP: c_int = 9;
pub const CSSM_NET_PROTO_CMP: c_int = 10;
pub const CSSM_NET_PROTO_CMPS: c_int = 11;
const enum_unnamed_962 = c_uint;
pub const CSSM_CALLBACK = ?*const fn (CSSM_DATA_PTR, ?*anyopaque) callconv(.C) CSSM_RETURN;
pub const struct_cssm_crypto_data = extern struct {
    Param: SecAsn1Item,
    Callback: CSSM_CALLBACK,
    CallerCtx: ?*anyopaque,
};
pub const CSSM_CRYPTO_DATA = struct_cssm_crypto_data;
pub const CSSM_CRYPTO_DATA_PTR = [*c]struct_cssm_crypto_data;
pub const CSSM_WORDID_TYPE = sint32;
pub const CSSM_WORDID__UNK_: c_int = -1;
pub const CSSM_WORDID__NLU_: c_int = 0;
pub const CSSM_WORDID__STAR_: c_int = 1;
pub const CSSM_WORDID_A: c_int = 2;
pub const CSSM_WORDID_ACL: c_int = 3;
pub const CSSM_WORDID_ALPHA: c_int = 4;
pub const CSSM_WORDID_B: c_int = 5;
pub const CSSM_WORDID_BER: c_int = 6;
pub const CSSM_WORDID_BINARY: c_int = 7;
pub const CSSM_WORDID_BIOMETRIC: c_int = 8;
pub const CSSM_WORDID_C: c_int = 9;
pub const CSSM_WORDID_CANCELED: c_int = 10;
pub const CSSM_WORDID_CERT: c_int = 11;
pub const CSSM_WORDID_COMMENT: c_int = 12;
pub const CSSM_WORDID_CRL: c_int = 13;
pub const CSSM_WORDID_CUSTOM: c_int = 14;
pub const CSSM_WORDID_D: c_int = 15;
pub const CSSM_WORDID_DATE: c_int = 16;
pub const CSSM_WORDID_DB_DELETE: c_int = 17;
pub const CSSM_WORDID_DB_EXEC_STORED_QUERY: c_int = 18;
pub const CSSM_WORDID_DB_INSERT: c_int = 19;
pub const CSSM_WORDID_DB_MODIFY: c_int = 20;
pub const CSSM_WORDID_DB_READ: c_int = 21;
pub const CSSM_WORDID_DBS_CREATE: c_int = 22;
pub const CSSM_WORDID_DBS_DELETE: c_int = 23;
pub const CSSM_WORDID_DECRYPT: c_int = 24;
pub const CSSM_WORDID_DELETE: c_int = 25;
pub const CSSM_WORDID_DELTA_CRL: c_int = 26;
pub const CSSM_WORDID_DER: c_int = 27;
pub const CSSM_WORDID_DERIVE: c_int = 28;
pub const CSSM_WORDID_DISPLAY: c_int = 29;
pub const CSSM_WORDID_DO: c_int = 30;
pub const CSSM_WORDID_DSA: c_int = 31;
pub const CSSM_WORDID_DSA_SHA1: c_int = 32;
pub const CSSM_WORDID_E: c_int = 33;
pub const CSSM_WORDID_ELGAMAL: c_int = 34;
pub const CSSM_WORDID_ENCRYPT: c_int = 35;
pub const CSSM_WORDID_ENTRY: c_int = 36;
pub const CSSM_WORDID_EXPORT_CLEAR: c_int = 37;
pub const CSSM_WORDID_EXPORT_WRAPPED: c_int = 38;
pub const CSSM_WORDID_G: c_int = 39;
pub const CSSM_WORDID_GE: c_int = 40;
pub const CSSM_WORDID_GENKEY: c_int = 41;
pub const CSSM_WORDID_HASH: c_int = 42;
pub const CSSM_WORDID_HASHED_PASSWORD: c_int = 43;
pub const CSSM_WORDID_HASHED_SUBJECT: c_int = 44;
pub const CSSM_WORDID_HAVAL: c_int = 45;
pub const CSSM_WORDID_IBCHASH: c_int = 46;
pub const CSSM_WORDID_IMPORT_CLEAR: c_int = 47;
pub const CSSM_WORDID_IMPORT_WRAPPED: c_int = 48;
pub const CSSM_WORDID_INTEL: c_int = 49;
pub const CSSM_WORDID_ISSUER: c_int = 50;
pub const CSSM_WORDID_ISSUER_INFO: c_int = 51;
pub const CSSM_WORDID_K_OF_N: c_int = 52;
pub const CSSM_WORDID_KEA: c_int = 53;
pub const CSSM_WORDID_KEYHOLDER: c_int = 54;
pub const CSSM_WORDID_L: c_int = 55;
pub const CSSM_WORDID_LE: c_int = 56;
pub const CSSM_WORDID_LOGIN: c_int = 57;
pub const CSSM_WORDID_LOGIN_NAME: c_int = 58;
pub const CSSM_WORDID_MAC: c_int = 59;
pub const CSSM_WORDID_MD2: c_int = 60;
pub const CSSM_WORDID_MD2WITHRSA: c_int = 61;
pub const CSSM_WORDID_MD4: c_int = 62;
pub const CSSM_WORDID_MD5: c_int = 63;
pub const CSSM_WORDID_MD5WITHRSA: c_int = 64;
pub const CSSM_WORDID_N: c_int = 65;
pub const CSSM_WORDID_NAME: c_int = 66;
pub const CSSM_WORDID_NDR: c_int = 67;
pub const CSSM_WORDID_NHASH: c_int = 68;
pub const CSSM_WORDID_NOT_AFTER: c_int = 69;
pub const CSSM_WORDID_NOT_BEFORE: c_int = 70;
pub const CSSM_WORDID_NULL: c_int = 71;
pub const CSSM_WORDID_NUMERIC: c_int = 72;
pub const CSSM_WORDID_OBJECT_HASH: c_int = 73;
pub const CSSM_WORDID_ONE_TIME: c_int = 74;
pub const CSSM_WORDID_ONLINE: c_int = 75;
pub const CSSM_WORDID_OWNER: c_int = 76;
pub const CSSM_WORDID_P: c_int = 77;
pub const CSSM_WORDID_PAM_NAME: c_int = 78;
pub const CSSM_WORDID_PASSWORD: c_int = 79;
pub const CSSM_WORDID_PGP: c_int = 80;
pub const CSSM_WORDID_PREFIX: c_int = 81;
pub const CSSM_WORDID_PRIVATE_KEY: c_int = 82;
pub const CSSM_WORDID_PROMPTED_BIOMETRIC: c_int = 83;
pub const CSSM_WORDID_PROMPTED_PASSWORD: c_int = 84;
pub const CSSM_WORDID_PROPAGATE: c_int = 85;
pub const CSSM_WORDID_PROTECTED_BIOMETRIC: c_int = 86;
pub const CSSM_WORDID_PROTECTED_PASSWORD: c_int = 87;
pub const CSSM_WORDID_PROTECTED_PIN: c_int = 88;
pub const CSSM_WORDID_PUBLIC_KEY: c_int = 89;
pub const CSSM_WORDID_PUBLIC_KEY_FROM_CERT: c_int = 90;
pub const CSSM_WORDID_Q: c_int = 91;
pub const CSSM_WORDID_RANGE: c_int = 92;
pub const CSSM_WORDID_REVAL: c_int = 93;
pub const CSSM_WORDID_RIPEMAC: c_int = 94;
pub const CSSM_WORDID_RIPEMD: c_int = 95;
pub const CSSM_WORDID_RIPEMD160: c_int = 96;
pub const CSSM_WORDID_RSA: c_int = 97;
pub const CSSM_WORDID_RSA_ISO9796: c_int = 98;
pub const CSSM_WORDID_RSA_PKCS: c_int = 99;
pub const CSSM_WORDID_RSA_PKCS_MD5: c_int = 100;
pub const CSSM_WORDID_RSA_PKCS_SHA1: c_int = 101;
pub const CSSM_WORDID_RSA_PKCS1: c_int = 102;
pub const CSSM_WORDID_RSA_PKCS1_MD5: c_int = 103;
pub const CSSM_WORDID_RSA_PKCS1_SHA1: c_int = 104;
pub const CSSM_WORDID_RSA_PKCS1_SIG: c_int = 105;
pub const CSSM_WORDID_RSA_RAW: c_int = 106;
pub const CSSM_WORDID_SDSIV1: c_int = 107;
pub const CSSM_WORDID_SEQUENCE: c_int = 108;
pub const CSSM_WORDID_SET: c_int = 109;
pub const CSSM_WORDID_SEXPR: c_int = 110;
pub const CSSM_WORDID_SHA1: c_int = 111;
pub const CSSM_WORDID_SHA1WITHDSA: c_int = 112;
pub const CSSM_WORDID_SHA1WITHECDSA: c_int = 113;
pub const CSSM_WORDID_SHA1WITHRSA: c_int = 114;
pub const CSSM_WORDID_SIGN: c_int = 115;
pub const CSSM_WORDID_SIGNATURE: c_int = 116;
pub const CSSM_WORDID_SIGNED_NONCE: c_int = 117;
pub const CSSM_WORDID_SIGNED_SECRET: c_int = 118;
pub const CSSM_WORDID_SPKI: c_int = 119;
pub const CSSM_WORDID_SUBJECT: c_int = 120;
pub const CSSM_WORDID_SUBJECT_INFO: c_int = 121;
pub const CSSM_WORDID_TAG: c_int = 122;
pub const CSSM_WORDID_THRESHOLD: c_int = 123;
pub const CSSM_WORDID_TIME: c_int = 124;
pub const CSSM_WORDID_URI: c_int = 125;
pub const CSSM_WORDID_VERSION: c_int = 126;
pub const CSSM_WORDID_X509_ATTRIBUTE: c_int = 127;
pub const CSSM_WORDID_X509V1: c_int = 128;
pub const CSSM_WORDID_X509V2: c_int = 129;
pub const CSSM_WORDID_X509V3: c_int = 130;
pub const CSSM_WORDID_X9_ATTRIBUTE: c_int = 131;
pub const CSSM_WORDID_VENDOR_START: c_int = 65536;
pub const CSSM_WORDID_VENDOR_END: c_int = 2147418112;
const enum_unnamed_963 = c_int;
pub const CSSM_LIST_ELEMENT_TYPE = uint32;
pub const CSSM_LIST_ELEMENT_TYPE_PTR = [*c]uint32;
pub const CSSM_LIST_ELEMENT_DATUM: c_int = 0;
pub const CSSM_LIST_ELEMENT_SUBLIST: c_int = 1;
pub const CSSM_LIST_ELEMENT_WORDID: c_int = 2;
const enum_unnamed_964 = c_uint;
pub const CSSM_LIST_TYPE = uint32;
pub const CSSM_LIST_TYPE_PTR = [*c]uint32;
pub const CSSM_LIST_TYPE_UNKNOWN: c_int = 0;
pub const CSSM_LIST_TYPE_CUSTOM: c_int = 1;
pub const CSSM_LIST_TYPE_SEXPR: c_int = 2;
const enum_unnamed_965 = c_uint;
pub const CSSM_LIST_ELEMENT_PTR = [*c]struct_cssm_list_element;
pub const struct_cssm_list = extern struct {
    ListType: CSSM_LIST_TYPE,
    Head: CSSM_LIST_ELEMENT_PTR,
    Tail: CSSM_LIST_ELEMENT_PTR,
};
pub const CSSM_LIST = struct_cssm_list;
const union_unnamed_966 = extern union {
    Sublist: CSSM_LIST,
    Word: SecAsn1Item,
};
pub const struct_cssm_list_element = extern struct {
    NextElement: [*c]struct_cssm_list_element,
    WordID: CSSM_WORDID_TYPE,
    ElementType: CSSM_LIST_ELEMENT_TYPE,
    Element: union_unnamed_966,
};
pub const CSSM_LIST_PTR = [*c]struct_cssm_list;
pub const CSSM_LIST_ELEMENT = struct_cssm_list_element;
pub const CSSM_TUPLE = extern struct {
    Issuer: CSSM_LIST,
    Subject: CSSM_LIST,
    Delegate: CSSM_BOOL,
    AuthorizationTag: CSSM_LIST,
    ValidityPeriod: CSSM_LIST,
};
pub const CSSM_TUPLE_PTR = [*c]CSSM_TUPLE;
pub const struct_cssm_tuplegroup = extern struct {
    NumberOfTuples: uint32,
    Tuples: CSSM_TUPLE_PTR,
};
pub const CSSM_TUPLEGROUP = struct_cssm_tuplegroup;
pub const CSSM_TUPLEGROUP_PTR = [*c]struct_cssm_tuplegroup;
pub const CSSM_SAMPLE_TYPE = CSSM_WORDID_TYPE;
pub const CSSM_SAMPLE_TYPE_PASSWORD: c_int = 79;
pub const CSSM_SAMPLE_TYPE_HASHED_PASSWORD: c_int = 43;
pub const CSSM_SAMPLE_TYPE_PROTECTED_PASSWORD: c_int = 87;
pub const CSSM_SAMPLE_TYPE_PROMPTED_PASSWORD: c_int = 84;
pub const CSSM_SAMPLE_TYPE_SIGNED_NONCE: c_int = 117;
pub const CSSM_SAMPLE_TYPE_SIGNED_SECRET: c_int = 118;
pub const CSSM_SAMPLE_TYPE_BIOMETRIC: c_int = 8;
pub const CSSM_SAMPLE_TYPE_PROTECTED_BIOMETRIC: c_int = 86;
pub const CSSM_SAMPLE_TYPE_PROMPTED_BIOMETRIC: c_int = 83;
pub const CSSM_SAMPLE_TYPE_THRESHOLD: c_int = 123;
const enum_unnamed_967 = c_uint;
pub const struct_cssm_sample = extern struct {
    TypedSample: CSSM_LIST,
    Verifier: [*c]const CSSM_SUBSERVICE_UID,
};
pub const CSSM_SAMPLE = struct_cssm_sample;
pub const CSSM_SAMPLE_PTR = [*c]struct_cssm_sample;
pub const struct_cssm_samplegroup = extern struct {
    NumberOfSamples: uint32,
    Samples: [*c]const CSSM_SAMPLE,
};
pub const CSSM_SAMPLEGROUP = struct_cssm_samplegroup;
pub const CSSM_SAMPLEGROUP_PTR = [*c]struct_cssm_samplegroup;
pub const CSSM_MALLOC = ?*const fn (CSSM_SIZE, ?*anyopaque) callconv(.C) ?*anyopaque;
pub const CSSM_FREE = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) void;
pub const CSSM_REALLOC = ?*const fn (?*anyopaque, CSSM_SIZE, ?*anyopaque) callconv(.C) ?*anyopaque;
pub const CSSM_CALLOC = ?*const fn (uint32, CSSM_SIZE, ?*anyopaque) callconv(.C) ?*anyopaque;
pub const struct_cssm_memory_funcs = extern struct {
    malloc_func: CSSM_MALLOC,
    free_func: CSSM_FREE,
    realloc_func: CSSM_REALLOC,
    calloc_func: CSSM_CALLOC,
    AllocRef: ?*anyopaque,
};
pub const CSSM_MEMORY_FUNCS = struct_cssm_memory_funcs;
pub const CSSM_MEMORY_FUNCS_PTR = [*c]struct_cssm_memory_funcs;
pub const CSSM_API_MEMORY_FUNCS = CSSM_MEMORY_FUNCS;
pub const CSSM_API_MEMORY_FUNCS_PTR = [*c]CSSM_API_MEMORY_FUNCS;
pub const CSSM_CHALLENGE_CALLBACK = ?*const fn ([*c]const CSSM_LIST, CSSM_SAMPLEGROUP_PTR, ?*anyopaque, [*c]const CSSM_MEMORY_FUNCS) callconv(.C) CSSM_RETURN;
pub const CSSM_CERT_TYPE = uint32;
pub const CSSM_CERT_TYPE_PTR = [*c]uint32;
pub const CSSM_CERT_UNKNOWN: c_int = 0;
pub const CSSM_CERT_X_509v1: c_int = 1;
pub const CSSM_CERT_X_509v2: c_int = 2;
pub const CSSM_CERT_X_509v3: c_int = 3;
pub const CSSM_CERT_PGP: c_int = 4;
pub const CSSM_CERT_SPKI: c_int = 5;
pub const CSSM_CERT_SDSIv1: c_int = 6;
pub const CSSM_CERT_Intel: c_int = 8;
pub const CSSM_CERT_X_509_ATTRIBUTE: c_int = 9;
pub const CSSM_CERT_X9_ATTRIBUTE: c_int = 10;
pub const CSSM_CERT_TUPLE: c_int = 11;
pub const CSSM_CERT_ACL_ENTRY: c_int = 12;
pub const CSSM_CERT_MULTIPLE: c_int = 32766;
pub const CSSM_CERT_LAST: c_int = 32767;
pub const CSSM_CL_CUSTOM_CERT_TYPE: c_int = 32768;
const enum_unnamed_968 = c_uint;
pub const CSSM_CERT_ENCODING = uint32;
pub const CSSM_CERT_ENCODING_PTR = [*c]uint32;
pub const CSSM_CERT_ENCODING_UNKNOWN: c_int = 0;
pub const CSSM_CERT_ENCODING_CUSTOM: c_int = 1;
pub const CSSM_CERT_ENCODING_BER: c_int = 2;
pub const CSSM_CERT_ENCODING_DER: c_int = 3;
pub const CSSM_CERT_ENCODING_NDR: c_int = 4;
pub const CSSM_CERT_ENCODING_SEXPR: c_int = 5;
pub const CSSM_CERT_ENCODING_PGP: c_int = 6;
pub const CSSM_CERT_ENCODING_MULTIPLE: c_int = 32766;
pub const CSSM_CERT_ENCODING_LAST: c_int = 32767;
pub const CSSM_CL_CUSTOM_CERT_ENCODING: c_int = 32768;
const enum_unnamed_969 = c_uint;
pub const struct_cssm_encoded_cert = extern struct {
    CertType: CSSM_CERT_TYPE,
    CertEncoding: CSSM_CERT_ENCODING,
    CertBlob: SecAsn1Item,
};
pub const CSSM_ENCODED_CERT = struct_cssm_encoded_cert;
pub const CSSM_ENCODED_CERT_PTR = [*c]struct_cssm_encoded_cert;
pub const CSSM_CERT_PARSE_FORMAT = uint32;
pub const CSSM_CERT_PARSE_FORMAT_PTR = [*c]uint32;
pub const CSSM_CERT_PARSE_FORMAT_NONE: c_int = 0;
pub const CSSM_CERT_PARSE_FORMAT_CUSTOM: c_int = 1;
pub const CSSM_CERT_PARSE_FORMAT_SEXPR: c_int = 2;
pub const CSSM_CERT_PARSE_FORMAT_COMPLEX: c_int = 3;
pub const CSSM_CERT_PARSE_FORMAT_OID_NAMED: c_int = 4;
pub const CSSM_CERT_PARSE_FORMAT_TUPLE: c_int = 5;
pub const CSSM_CERT_PARSE_FORMAT_MULTIPLE: c_int = 32766;
pub const CSSM_CERT_PARSE_FORMAT_LAST: c_int = 32767;
pub const CSSM_CL_CUSTOM_CERT_PARSE_FORMAT: c_int = 32768;
const enum_unnamed_970 = c_uint;
pub const struct_cssm_parsed_cert = extern struct {
    CertType: CSSM_CERT_TYPE,
    ParsedCertFormat: CSSM_CERT_PARSE_FORMAT,
    ParsedCert: ?*anyopaque,
};
pub const CSSM_PARSED_CERT = struct_cssm_parsed_cert;
pub const CSSM_PARSED_CERT_PTR = [*c]struct_cssm_parsed_cert;
pub const struct_cssm_cert_pair = extern struct {
    EncodedCert: CSSM_ENCODED_CERT,
    ParsedCert: CSSM_PARSED_CERT,
};
pub const CSSM_CERT_PAIR = struct_cssm_cert_pair;
pub const CSSM_CERT_PAIR_PTR = [*c]struct_cssm_cert_pair;
pub const CSSM_CERTGROUP_TYPE = uint32;
pub const CSSM_CERTGROUP_TYPE_PTR = [*c]uint32;
pub const CSSM_CERTGROUP_DATA: c_int = 0;
pub const CSSM_CERTGROUP_ENCODED_CERT: c_int = 1;
pub const CSSM_CERTGROUP_PARSED_CERT: c_int = 2;
pub const CSSM_CERTGROUP_CERT_PAIR: c_int = 3;
const enum_unnamed_971 = c_uint;
const union_unnamed_972 = extern union {
    CertList: CSSM_DATA_PTR,
    EncodedCertList: CSSM_ENCODED_CERT_PTR,
    ParsedCertList: CSSM_PARSED_CERT_PTR,
    PairCertList: CSSM_CERT_PAIR_PTR,
};
pub const struct_cssm_certgroup = extern struct {
    CertType: CSSM_CERT_TYPE,
    CertEncoding: CSSM_CERT_ENCODING,
    NumCerts: uint32,
    GroupList: union_unnamed_972,
    CertGroupType: CSSM_CERTGROUP_TYPE,
    Reserved: ?*anyopaque,
};
pub const CSSM_CERTGROUP = struct_cssm_certgroup;
pub const CSSM_CERTGROUP_PTR = [*c]struct_cssm_certgroup;
pub const struct_cssm_base_certs = extern struct {
    TPHandle: CSSM_TP_HANDLE,
    CLHandle: CSSM_CL_HANDLE,
    Certs: CSSM_CERTGROUP,
};
pub const CSSM_BASE_CERTS = struct_cssm_base_certs;
pub const CSSM_BASE_CERTS_PTR = [*c]struct_cssm_base_certs;
pub const struct_cssm_access_credentials = extern struct {
    EntryTag: CSSM_STRING,
    BaseCerts: CSSM_BASE_CERTS,
    Samples: CSSM_SAMPLEGROUP,
    Callback: CSSM_CHALLENGE_CALLBACK,
    CallerCtx: ?*anyopaque,
};
pub const CSSM_ACCESS_CREDENTIALS = struct_cssm_access_credentials;
pub const CSSM_ACCESS_CREDENTIALS_PTR = [*c]struct_cssm_access_credentials;
pub const CSSM_ACL_SUBJECT_TYPE = sint32;
pub const CSSM_ACL_SUBJECT_TYPE_ANY: c_int = 1;
pub const CSSM_ACL_SUBJECT_TYPE_THRESHOLD: c_int = 123;
pub const CSSM_ACL_SUBJECT_TYPE_PASSWORD: c_int = 79;
pub const CSSM_ACL_SUBJECT_TYPE_PROTECTED_PASSWORD: c_int = 87;
pub const CSSM_ACL_SUBJECT_TYPE_PROMPTED_PASSWORD: c_int = 84;
pub const CSSM_ACL_SUBJECT_TYPE_PUBLIC_KEY: c_int = 89;
pub const CSSM_ACL_SUBJECT_TYPE_HASHED_SUBJECT: c_int = 44;
pub const CSSM_ACL_SUBJECT_TYPE_BIOMETRIC: c_int = 8;
pub const CSSM_ACL_SUBJECT_TYPE_PROTECTED_BIOMETRIC: c_int = 86;
pub const CSSM_ACL_SUBJECT_TYPE_PROMPTED_BIOMETRIC: c_int = 83;
pub const CSSM_ACL_SUBJECT_TYPE_LOGIN_NAME: c_int = 58;
pub const CSSM_ACL_SUBJECT_TYPE_EXT_PAM_NAME: c_int = 78;
const enum_unnamed_973 = c_uint;
pub const CSSM_ACL_AUTHORIZATION_TAG = sint32;
pub const CSSM_ACL_AUTHORIZATION_TAG_VENDOR_DEFINED_START: c_int = 65536;
pub const CSSM_ACL_AUTHORIZATION_ANY: c_int = 1;
pub const CSSM_ACL_AUTHORIZATION_LOGIN: c_int = 57;
pub const CSSM_ACL_AUTHORIZATION_GENKEY: c_int = 41;
pub const CSSM_ACL_AUTHORIZATION_DELETE: c_int = 25;
pub const CSSM_ACL_AUTHORIZATION_EXPORT_WRAPPED: c_int = 38;
pub const CSSM_ACL_AUTHORIZATION_EXPORT_CLEAR: c_int = 37;
pub const CSSM_ACL_AUTHORIZATION_IMPORT_WRAPPED: c_int = 48;
pub const CSSM_ACL_AUTHORIZATION_IMPORT_CLEAR: c_int = 47;
pub const CSSM_ACL_AUTHORIZATION_SIGN: c_int = 115;
pub const CSSM_ACL_AUTHORIZATION_ENCRYPT: c_int = 35;
pub const CSSM_ACL_AUTHORIZATION_DECRYPT: c_int = 24;
pub const CSSM_ACL_AUTHORIZATION_MAC: c_int = 59;
pub const CSSM_ACL_AUTHORIZATION_DERIVE: c_int = 28;
pub const CSSM_ACL_AUTHORIZATION_DBS_CREATE: c_int = 22;
pub const CSSM_ACL_AUTHORIZATION_DBS_DELETE: c_int = 23;
pub const CSSM_ACL_AUTHORIZATION_DB_READ: c_int = 21;
pub const CSSM_ACL_AUTHORIZATION_DB_INSERT: c_int = 19;
pub const CSSM_ACL_AUTHORIZATION_DB_MODIFY: c_int = 20;
pub const CSSM_ACL_AUTHORIZATION_DB_DELETE: c_int = 17;
const enum_unnamed_974 = c_uint;
pub const struct_cssm_authorizationgroup = extern struct {
    NumberOfAuthTags: uint32,
    AuthTags: [*c]CSSM_ACL_AUTHORIZATION_TAG,
};
pub const CSSM_AUTHORIZATIONGROUP = struct_cssm_authorizationgroup;
pub const CSSM_AUTHORIZATIONGROUP_PTR = [*c]struct_cssm_authorizationgroup;
pub const struct_cssm_acl_validity_period = extern struct {
    StartDate: SecAsn1Item,
    EndDate: SecAsn1Item,
};
pub const CSSM_ACL_VALIDITY_PERIOD = struct_cssm_acl_validity_period;
pub const CSSM_ACL_VALIDITY_PERIOD_PTR = [*c]struct_cssm_acl_validity_period;
pub const struct_cssm_acl_entry_prototype = extern struct {
    TypedSubject: CSSM_LIST,
    Delegate: CSSM_BOOL,
    Authorization: CSSM_AUTHORIZATIONGROUP,
    TimeRange: CSSM_ACL_VALIDITY_PERIOD,
    EntryTag: CSSM_STRING,
};
pub const CSSM_ACL_ENTRY_PROTOTYPE = struct_cssm_acl_entry_prototype;
pub const CSSM_ACL_ENTRY_PROTOTYPE_PTR = [*c]struct_cssm_acl_entry_prototype;
pub const struct_cssm_acl_owner_prototype = extern struct {
    TypedSubject: CSSM_LIST,
    Delegate: CSSM_BOOL,
};
pub const CSSM_ACL_OWNER_PROTOTYPE = struct_cssm_acl_owner_prototype;
pub const CSSM_ACL_OWNER_PROTOTYPE_PTR = [*c]struct_cssm_acl_owner_prototype;
pub const CSSM_ACL_SUBJECT_CALLBACK = ?*const fn ([*c]const CSSM_LIST, CSSM_LIST_PTR, ?*anyopaque, [*c]const CSSM_MEMORY_FUNCS) callconv(.C) CSSM_RETURN;
pub const struct_cssm_acl_entry_input = extern struct {
    Prototype: CSSM_ACL_ENTRY_PROTOTYPE,
    Callback: CSSM_ACL_SUBJECT_CALLBACK,
    CallerContext: ?*anyopaque,
};
pub const CSSM_ACL_ENTRY_INPUT = struct_cssm_acl_entry_input;
pub const CSSM_ACL_ENTRY_INPUT_PTR = [*c]struct_cssm_acl_entry_input;
pub const struct_cssm_resource_control_context = extern struct {
    AccessCred: CSSM_ACCESS_CREDENTIALS_PTR,
    InitialAclEntry: CSSM_ACL_ENTRY_INPUT,
};
pub const CSSM_RESOURCE_CONTROL_CONTEXT = struct_cssm_resource_control_context;
pub const CSSM_RESOURCE_CONTROL_CONTEXT_PTR = [*c]struct_cssm_resource_control_context;
pub const CSSM_ACL_HANDLE = CSSM_HANDLE;
pub const struct_cssm_acl_entry_info = extern struct {
    EntryPublicInfo: CSSM_ACL_ENTRY_PROTOTYPE,
    EntryHandle: CSSM_ACL_HANDLE,
};
pub const CSSM_ACL_ENTRY_INFO = struct_cssm_acl_entry_info;
pub const CSSM_ACL_ENTRY_INFO_PTR = [*c]struct_cssm_acl_entry_info;
pub const CSSM_ACL_EDIT_MODE = uint32;
pub const CSSM_ACL_EDIT_MODE_ADD: c_int = 1;
pub const CSSM_ACL_EDIT_MODE_DELETE: c_int = 2;
pub const CSSM_ACL_EDIT_MODE_REPLACE: c_int = 3;
const enum_unnamed_975 = c_uint;
pub const struct_cssm_acl_edit = extern struct {
    EditMode: CSSM_ACL_EDIT_MODE,
    OldEntryHandle: CSSM_ACL_HANDLE,
    NewEntry: [*c]const CSSM_ACL_ENTRY_INPUT,
};
pub const CSSM_ACL_EDIT = struct_cssm_acl_edit;
pub const CSSM_ACL_EDIT_PTR = [*c]struct_cssm_acl_edit;
pub const CSSM_PROC_ADDR = ?*const fn () callconv(.C) void;
pub const CSSM_PROC_ADDR_PTR = [*c]CSSM_PROC_ADDR;
pub const struct_cssm_func_name_addr = extern struct {
    Name: CSSM_STRING,
    Address: CSSM_PROC_ADDR,
};
pub const CSSM_FUNC_NAME_ADDR = struct_cssm_func_name_addr;
pub const CSSM_FUNC_NAME_ADDR_PTR = [*c]struct_cssm_func_name_addr;
pub const struct_cssm_date = extern struct {
    Year: [4]uint8,
    Month: [2]uint8,
    Day: [2]uint8,
};
pub const CSSM_DATE = struct_cssm_date;
pub const CSSM_DATE_PTR = [*c]struct_cssm_date;
pub const struct_cssm_range = extern struct {
    Min: uint32,
    Max: uint32,
};
pub const CSSM_RANGE = struct_cssm_range;
pub const CSSM_RANGE_PTR = [*c]struct_cssm_range;
pub const struct_cssm_query_size_data = extern struct {
    SizeInputBlock: uint32,
    SizeOutputBlock: uint32,
};
pub const CSSM_QUERY_SIZE_DATA = struct_cssm_query_size_data;
pub const CSSM_QUERY_SIZE_DATA_PTR = [*c]struct_cssm_query_size_data;
pub const CSSM_HEADERVERSION = uint32;
pub const CSSM_KEYHEADER_VERSION: c_int = 2;
const enum_unnamed_976 = c_uint;
pub const struct_cssm_key_size = extern struct {
    LogicalKeySizeInBits: uint32,
    EffectiveKeySizeInBits: uint32,
};
pub const CSSM_KEY_SIZE = struct_cssm_key_size;
pub const CSSM_KEY_SIZE_PTR = [*c]struct_cssm_key_size;
pub const CSSM_KEYBLOB_TYPE = uint32;
pub const CSSM_KEYBLOB_RAW: c_int = 0;
pub const CSSM_KEYBLOB_REFERENCE: c_int = 2;
pub const CSSM_KEYBLOB_WRAPPED: c_int = 3;
pub const CSSM_KEYBLOB_OTHER: c_uint = 4294967295;
const enum_unnamed_977 = c_uint;
pub const CSSM_KEYBLOB_FORMAT = uint32;
pub const CSSM_KEYBLOB_RAW_FORMAT_NONE: c_int = 0;
pub const CSSM_KEYBLOB_RAW_FORMAT_PKCS1: c_int = 1;
pub const CSSM_KEYBLOB_RAW_FORMAT_PKCS3: c_int = 2;
pub const CSSM_KEYBLOB_RAW_FORMAT_MSCAPI: c_int = 3;
pub const CSSM_KEYBLOB_RAW_FORMAT_PGP: c_int = 4;
pub const CSSM_KEYBLOB_RAW_FORMAT_FIPS186: c_int = 5;
pub const CSSM_KEYBLOB_RAW_FORMAT_BSAFE: c_int = 6;
pub const CSSM_KEYBLOB_RAW_FORMAT_CCA: c_int = 9;
pub const CSSM_KEYBLOB_RAW_FORMAT_PKCS8: c_int = 10;
pub const CSSM_KEYBLOB_RAW_FORMAT_SPKI: c_int = 11;
pub const CSSM_KEYBLOB_RAW_FORMAT_OCTET_STRING: c_int = 12;
pub const CSSM_KEYBLOB_RAW_FORMAT_OTHER: c_uint = 4294967295;
const enum_unnamed_978 = c_uint;
pub const CSSM_KEYBLOB_WRAPPED_FORMAT_NONE: c_int = 0;
pub const CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS8: c_int = 1;
pub const CSSM_KEYBLOB_WRAPPED_FORMAT_PKCS7: c_int = 2;
pub const CSSM_KEYBLOB_WRAPPED_FORMAT_MSCAPI: c_int = 3;
pub const CSSM_KEYBLOB_WRAPPED_FORMAT_OTHER: c_uint = 4294967295;
const enum_unnamed_979 = c_uint;
pub const CSSM_KEYBLOB_REF_FORMAT_INTEGER: c_int = 0;
pub const CSSM_KEYBLOB_REF_FORMAT_STRING: c_int = 1;
pub const CSSM_KEYBLOB_REF_FORMAT_SPKI: c_int = 2;
pub const CSSM_KEYBLOB_REF_FORMAT_OTHER: c_uint = 4294967295;
const enum_unnamed_980 = c_uint;
pub const CSSM_KEYCLASS = uint32;
pub const CSSM_KEYCLASS_PUBLIC_KEY: c_int = 0;
pub const CSSM_KEYCLASS_PRIVATE_KEY: c_int = 1;
pub const CSSM_KEYCLASS_SESSION_KEY: c_int = 2;
pub const CSSM_KEYCLASS_SECRET_PART: c_int = 3;
pub const CSSM_KEYCLASS_OTHER: c_uint = 4294967295;
const enum_unnamed_981 = c_uint;
pub const CSSM_KEYATTR_FLAGS = uint32;
pub const CSSM_KEYATTR_RETURN_DEFAULT: c_int = 0;
pub const CSSM_KEYATTR_RETURN_DATA: c_int = 268435456;
pub const CSSM_KEYATTR_RETURN_REF: c_int = 536870912;
pub const CSSM_KEYATTR_RETURN_NONE: c_int = 1073741824;
pub const CSSM_KEYATTR_PERMANENT: c_int = 1;
pub const CSSM_KEYATTR_PRIVATE: c_int = 2;
pub const CSSM_KEYATTR_MODIFIABLE: c_int = 4;
pub const CSSM_KEYATTR_SENSITIVE: c_int = 8;
pub const CSSM_KEYATTR_EXTRACTABLE: c_int = 32;
pub const CSSM_KEYATTR_ALWAYS_SENSITIVE: c_int = 16;
pub const CSSM_KEYATTR_NEVER_EXTRACTABLE: c_int = 64;
const enum_unnamed_982 = c_uint;
pub const CSSM_KEYUSE = uint32;
pub const CSSM_KEYUSE_ANY: c_uint = 2147483648;
pub const CSSM_KEYUSE_ENCRYPT: c_int = 1;
pub const CSSM_KEYUSE_DECRYPT: c_int = 2;
pub const CSSM_KEYUSE_SIGN: c_int = 4;
pub const CSSM_KEYUSE_VERIFY: c_int = 8;
pub const CSSM_KEYUSE_SIGN_RECOVER: c_int = 16;
pub const CSSM_KEYUSE_VERIFY_RECOVER: c_int = 32;
pub const CSSM_KEYUSE_WRAP: c_int = 64;
pub const CSSM_KEYUSE_UNWRAP: c_int = 128;
pub const CSSM_KEYUSE_DERIVE: c_int = 256;
const enum_unnamed_983 = c_uint;
pub const CSSM_ALGORITHMS = uint32;
pub const CSSM_ALGID_NONE: c_int = 0;
pub const CSSM_ALGID_CUSTOM: c_int = 1;
pub const CSSM_ALGID_DH: c_int = 2;
pub const CSSM_ALGID_PH: c_int = 3;
pub const CSSM_ALGID_KEA: c_int = 4;
pub const CSSM_ALGID_MD2: c_int = 5;
pub const CSSM_ALGID_MD4: c_int = 6;
pub const CSSM_ALGID_MD5: c_int = 7;
pub const CSSM_ALGID_SHA1: c_int = 8;
pub const CSSM_ALGID_NHASH: c_int = 9;
pub const CSSM_ALGID_HAVAL: c_int = 10;
pub const CSSM_ALGID_RIPEMD: c_int = 11;
pub const CSSM_ALGID_IBCHASH: c_int = 12;
pub const CSSM_ALGID_RIPEMAC: c_int = 13;
pub const CSSM_ALGID_DES: c_int = 14;
pub const CSSM_ALGID_DESX: c_int = 15;
pub const CSSM_ALGID_RDES: c_int = 16;
pub const CSSM_ALGID_3DES_3KEY_EDE: c_int = 17;
pub const CSSM_ALGID_3DES_2KEY_EDE: c_int = 18;
pub const CSSM_ALGID_3DES_1KEY_EEE: c_int = 19;
pub const CSSM_ALGID_3DES_3KEY: c_int = 17;
pub const CSSM_ALGID_3DES_3KEY_EEE: c_int = 20;
pub const CSSM_ALGID_3DES_2KEY: c_int = 18;
pub const CSSM_ALGID_3DES_2KEY_EEE: c_int = 21;
pub const CSSM_ALGID_3DES_1KEY: c_int = 20;
pub const CSSM_ALGID_IDEA: c_int = 22;
pub const CSSM_ALGID_RC2: c_int = 23;
pub const CSSM_ALGID_RC5: c_int = 24;
pub const CSSM_ALGID_RC4: c_int = 25;
pub const CSSM_ALGID_SEAL: c_int = 26;
pub const CSSM_ALGID_CAST: c_int = 27;
pub const CSSM_ALGID_BLOWFISH: c_int = 28;
pub const CSSM_ALGID_SKIPJACK: c_int = 29;
pub const CSSM_ALGID_LUCIFER: c_int = 30;
pub const CSSM_ALGID_MADRYGA: c_int = 31;
pub const CSSM_ALGID_FEAL: c_int = 32;
pub const CSSM_ALGID_REDOC: c_int = 33;
pub const CSSM_ALGID_REDOC3: c_int = 34;
pub const CSSM_ALGID_LOKI: c_int = 35;
pub const CSSM_ALGID_KHUFU: c_int = 36;
pub const CSSM_ALGID_KHAFRE: c_int = 37;
pub const CSSM_ALGID_MMB: c_int = 38;
pub const CSSM_ALGID_GOST: c_int = 39;
pub const CSSM_ALGID_SAFER: c_int = 40;
pub const CSSM_ALGID_CRAB: c_int = 41;
pub const CSSM_ALGID_RSA: c_int = 42;
pub const CSSM_ALGID_DSA: c_int = 43;
pub const CSSM_ALGID_MD5WithRSA: c_int = 44;
pub const CSSM_ALGID_MD2WithRSA: c_int = 45;
pub const CSSM_ALGID_ElGamal: c_int = 46;
pub const CSSM_ALGID_MD2Random: c_int = 47;
pub const CSSM_ALGID_MD5Random: c_int = 48;
pub const CSSM_ALGID_SHARandom: c_int = 49;
pub const CSSM_ALGID_DESRandom: c_int = 50;
pub const CSSM_ALGID_SHA1WithRSA: c_int = 51;
pub const CSSM_ALGID_CDMF: c_int = 52;
pub const CSSM_ALGID_CAST3: c_int = 53;
pub const CSSM_ALGID_CAST5: c_int = 54;
pub const CSSM_ALGID_GenericSecret: c_int = 55;
pub const CSSM_ALGID_ConcatBaseAndKey: c_int = 56;
pub const CSSM_ALGID_ConcatKeyAndBase: c_int = 57;
pub const CSSM_ALGID_ConcatBaseAndData: c_int = 58;
pub const CSSM_ALGID_ConcatDataAndBase: c_int = 59;
pub const CSSM_ALGID_XORBaseAndData: c_int = 60;
pub const CSSM_ALGID_ExtractFromKey: c_int = 61;
pub const CSSM_ALGID_SSL3PrePrimaryGen: c_int = 62;
pub const CSSM_ALGID_SSL3PreMasterGen: c_int = 62;
pub const CSSM_ALGID_SSL3PrimaryDerive: c_int = 63;
pub const CSSM_ALGID_SSL3MasterDerive: c_int = 63;
pub const CSSM_ALGID_SSL3KeyAndMacDerive: c_int = 64;
pub const CSSM_ALGID_SSL3MD5_MAC: c_int = 65;
pub const CSSM_ALGID_SSL3SHA1_MAC: c_int = 66;
pub const CSSM_ALGID_PKCS5_PBKDF1_MD5: c_int = 67;
pub const CSSM_ALGID_PKCS5_PBKDF1_MD2: c_int = 68;
pub const CSSM_ALGID_PKCS5_PBKDF1_SHA1: c_int = 69;
pub const CSSM_ALGID_WrapLynks: c_int = 70;
pub const CSSM_ALGID_WrapSET_OAEP: c_int = 71;
pub const CSSM_ALGID_BATON: c_int = 72;
pub const CSSM_ALGID_ECDSA: c_int = 73;
pub const CSSM_ALGID_MAYFLY: c_int = 74;
pub const CSSM_ALGID_JUNIPER: c_int = 75;
pub const CSSM_ALGID_FASTHASH: c_int = 76;
pub const CSSM_ALGID_3DES: c_int = 77;
pub const CSSM_ALGID_SSL3MD5: c_int = 78;
pub const CSSM_ALGID_SSL3SHA1: c_int = 79;
pub const CSSM_ALGID_FortezzaTimestamp: c_int = 80;
pub const CSSM_ALGID_SHA1WithDSA: c_int = 81;
pub const CSSM_ALGID_SHA1WithECDSA: c_int = 82;
pub const CSSM_ALGID_DSA_BSAFE: c_int = 83;
pub const CSSM_ALGID_ECDH: c_int = 84;
pub const CSSM_ALGID_ECMQV: c_int = 85;
pub const CSSM_ALGID_PKCS12_SHA1_PBE: c_int = 86;
pub const CSSM_ALGID_ECNRA: c_int = 87;
pub const CSSM_ALGID_SHA1WithECNRA: c_int = 88;
pub const CSSM_ALGID_ECES: c_int = 89;
pub const CSSM_ALGID_ECAES: c_int = 90;
pub const CSSM_ALGID_SHA1HMAC: c_int = 91;
pub const CSSM_ALGID_FIPS186Random: c_int = 92;
pub const CSSM_ALGID_ECC: c_int = 93;
pub const CSSM_ALGID_MQV: c_int = 94;
pub const CSSM_ALGID_NRA: c_int = 95;
pub const CSSM_ALGID_IntelPlatformRandom: c_int = 96;
pub const CSSM_ALGID_UTC: c_int = 97;
pub const CSSM_ALGID_HAVAL3: c_int = 98;
pub const CSSM_ALGID_HAVAL4: c_int = 99;
pub const CSSM_ALGID_HAVAL5: c_int = 100;
pub const CSSM_ALGID_TIGER: c_int = 101;
pub const CSSM_ALGID_MD5HMAC: c_int = 102;
pub const CSSM_ALGID_PKCS5_PBKDF2: c_int = 103;
pub const CSSM_ALGID_RUNNING_COUNTER: c_int = 104;
pub const CSSM_ALGID_LAST: c_int = 2147483647;
pub const CSSM_ALGID_VENDOR_DEFINED: c_uint = 2147483648;
const enum_unnamed_984 = c_uint;
pub const CSSM_ENCRYPT_MODE = uint32;
pub const CSSM_ALGMODE_NONE: c_int = 0;
pub const CSSM_ALGMODE_CUSTOM: c_int = 1;
pub const CSSM_ALGMODE_ECB: c_int = 2;
pub const CSSM_ALGMODE_ECBPad: c_int = 3;
pub const CSSM_ALGMODE_CBC: c_int = 4;
pub const CSSM_ALGMODE_CBC_IV8: c_int = 5;
pub const CSSM_ALGMODE_CBCPadIV8: c_int = 6;
pub const CSSM_ALGMODE_CFB: c_int = 7;
pub const CSSM_ALGMODE_CFB_IV8: c_int = 8;
pub const CSSM_ALGMODE_CFBPadIV8: c_int = 9;
pub const CSSM_ALGMODE_OFB: c_int = 10;
pub const CSSM_ALGMODE_OFB_IV8: c_int = 11;
pub const CSSM_ALGMODE_OFBPadIV8: c_int = 12;
pub const CSSM_ALGMODE_COUNTER: c_int = 13;
pub const CSSM_ALGMODE_BC: c_int = 14;
pub const CSSM_ALGMODE_PCBC: c_int = 15;
pub const CSSM_ALGMODE_CBCC: c_int = 16;
pub const CSSM_ALGMODE_OFBNLF: c_int = 17;
pub const CSSM_ALGMODE_PBC: c_int = 18;
pub const CSSM_ALGMODE_PFB: c_int = 19;
pub const CSSM_ALGMODE_CBCPD: c_int = 20;
pub const CSSM_ALGMODE_PUBLIC_KEY: c_int = 21;
pub const CSSM_ALGMODE_PRIVATE_KEY: c_int = 22;
pub const CSSM_ALGMODE_SHUFFLE: c_int = 23;
pub const CSSM_ALGMODE_ECB64: c_int = 24;
pub const CSSM_ALGMODE_CBC64: c_int = 25;
pub const CSSM_ALGMODE_OFB64: c_int = 26;
pub const CSSM_ALGMODE_CFB32: c_int = 28;
pub const CSSM_ALGMODE_CFB16: c_int = 29;
pub const CSSM_ALGMODE_CFB8: c_int = 30;
pub const CSSM_ALGMODE_WRAP: c_int = 31;
pub const CSSM_ALGMODE_PRIVATE_WRAP: c_int = 32;
pub const CSSM_ALGMODE_RELAYX: c_int = 33;
pub const CSSM_ALGMODE_ECB128: c_int = 34;
pub const CSSM_ALGMODE_ECB96: c_int = 35;
pub const CSSM_ALGMODE_CBC128: c_int = 36;
pub const CSSM_ALGMODE_OAEP_HASH: c_int = 37;
pub const CSSM_ALGMODE_PKCS1_EME_V15: c_int = 38;
pub const CSSM_ALGMODE_PKCS1_EME_OAEP: c_int = 39;
pub const CSSM_ALGMODE_PKCS1_EMSA_V15: c_int = 40;
pub const CSSM_ALGMODE_ISO_9796: c_int = 41;
pub const CSSM_ALGMODE_X9_31: c_int = 42;
pub const CSSM_ALGMODE_LAST: c_int = 2147483647;
pub const CSSM_ALGMODE_VENDOR_DEFINED: c_uint = 2147483648;
const enum_unnamed_985 = c_uint;
pub const struct_cssm_keyheader = extern struct {
    HeaderVersion: CSSM_HEADERVERSION,
    CspId: CSSM_GUID,
    BlobType: CSSM_KEYBLOB_TYPE,
    Format: CSSM_KEYBLOB_FORMAT,
    AlgorithmId: CSSM_ALGORITHMS,
    KeyClass: CSSM_KEYCLASS,
    LogicalKeySizeInBits: uint32,
    KeyAttr: CSSM_KEYATTR_FLAGS,
    KeyUsage: CSSM_KEYUSE,
    StartDate: CSSM_DATE,
    EndDate: CSSM_DATE,
    WrapAlgorithmId: CSSM_ALGORITHMS,
    WrapMode: CSSM_ENCRYPT_MODE,
    Reserved: uint32,
};
pub const CSSM_KEYHEADER = struct_cssm_keyheader;
pub const CSSM_KEYHEADER_PTR = [*c]struct_cssm_keyheader;
pub const struct_cssm_key = extern struct {
    KeyHeader: CSSM_KEYHEADER,
    KeyData: SecAsn1Item,
};
pub const CSSM_KEY = struct_cssm_key;
pub const CSSM_KEY_PTR = [*c]struct_cssm_key;
pub const CSSM_WRAP_KEY = CSSM_KEY;
pub const CSSM_WRAP_KEY_PTR = [*c]CSSM_KEY;
pub const CSSM_CSPTYPE = uint32;
pub const CSSM_CSP_SOFTWARE: c_int = 1;
pub const CSSM_CSP_HARDWARE: c_int = 2;
pub const CSSM_CSP_HYBRID: c_int = 3;
const enum_unnamed_986 = c_uint;
pub const struct_cssm_dl_db_handle = extern struct {
    DLHandle: CSSM_DL_HANDLE,
    DBHandle: CSSM_DB_HANDLE,
};
pub const CSSM_DL_DB_HANDLE = struct_cssm_dl_db_handle;
pub const CSSM_DL_DB_HANDLE_PTR = [*c]struct_cssm_dl_db_handle;
pub const CSSM_CONTEXT_TYPE = uint32;
pub const CSSM_ALGCLASS_NONE: c_int = 0;
pub const CSSM_ALGCLASS_CUSTOM: c_int = 1;
pub const CSSM_ALGCLASS_SIGNATURE: c_int = 2;
pub const CSSM_ALGCLASS_SYMMETRIC: c_int = 3;
pub const CSSM_ALGCLASS_DIGEST: c_int = 4;
pub const CSSM_ALGCLASS_RANDOMGEN: c_int = 5;
pub const CSSM_ALGCLASS_UNIQUEGEN: c_int = 6;
pub const CSSM_ALGCLASS_MAC: c_int = 7;
pub const CSSM_ALGCLASS_ASYMMETRIC: c_int = 8;
pub const CSSM_ALGCLASS_KEYGEN: c_int = 9;
pub const CSSM_ALGCLASS_DERIVEKEY: c_int = 10;
const enum_unnamed_987 = c_uint;
pub const CSSM_ATTRIBUTE_DATA_NONE: c_int = 0;
pub const CSSM_ATTRIBUTE_DATA_UINT32: c_int = 268435456;
pub const CSSM_ATTRIBUTE_DATA_CSSM_DATA: c_int = 536870912;
pub const CSSM_ATTRIBUTE_DATA_CRYPTO_DATA: c_int = 805306368;
pub const CSSM_ATTRIBUTE_DATA_KEY: c_int = 1073741824;
pub const CSSM_ATTRIBUTE_DATA_STRING: c_int = 1342177280;
pub const CSSM_ATTRIBUTE_DATA_DATE: c_int = 1610612736;
pub const CSSM_ATTRIBUTE_DATA_RANGE: c_int = 1879048192;
pub const CSSM_ATTRIBUTE_DATA_ACCESS_CREDENTIALS: c_uint = 2147483648;
pub const CSSM_ATTRIBUTE_DATA_VERSION: c_int = 16777216;
pub const CSSM_ATTRIBUTE_DATA_DL_DB_HANDLE: c_int = 33554432;
pub const CSSM_ATTRIBUTE_DATA_KR_PROFILE: c_int = 50331648;
pub const CSSM_ATTRIBUTE_TYPE_MASK: c_uint = 4278190080;
const enum_unnamed_988 = c_uint;
pub const CSSM_ATTRIBUTE_TYPE = uint32;
pub const CSSM_ATTRIBUTE_NONE: c_int = 0;
pub const CSSM_ATTRIBUTE_CUSTOM: c_int = 536870913;
pub const CSSM_ATTRIBUTE_DESCRIPTION: c_int = 1342177282;
pub const CSSM_ATTRIBUTE_KEY: c_int = 1073741827;
pub const CSSM_ATTRIBUTE_INIT_VECTOR: c_int = 536870916;
pub const CSSM_ATTRIBUTE_SALT: c_int = 536870917;
pub const CSSM_ATTRIBUTE_PADDING: c_int = 268435462;
pub const CSSM_ATTRIBUTE_RANDOM: c_int = 536870919;
pub const CSSM_ATTRIBUTE_SEED: c_int = 805306376;
pub const CSSM_ATTRIBUTE_PASSPHRASE: c_int = 805306377;
pub const CSSM_ATTRIBUTE_KEY_LENGTH: c_int = 268435466;
pub const CSSM_ATTRIBUTE_KEY_LENGTH_RANGE: c_int = 1879048203;
pub const CSSM_ATTRIBUTE_BLOCK_SIZE: c_int = 268435468;
pub const CSSM_ATTRIBUTE_OUTPUT_SIZE: c_int = 268435469;
pub const CSSM_ATTRIBUTE_ROUNDS: c_int = 268435470;
pub const CSSM_ATTRIBUTE_IV_SIZE: c_int = 268435471;
pub const CSSM_ATTRIBUTE_ALG_PARAMS: c_int = 536870928;
pub const CSSM_ATTRIBUTE_LABEL: c_int = 536870929;
pub const CSSM_ATTRIBUTE_KEY_TYPE: c_int = 268435474;
pub const CSSM_ATTRIBUTE_MODE: c_int = 268435475;
pub const CSSM_ATTRIBUTE_EFFECTIVE_BITS: c_int = 268435476;
pub const CSSM_ATTRIBUTE_START_DATE: c_int = 1610612757;
pub const CSSM_ATTRIBUTE_END_DATE: c_int = 1610612758;
pub const CSSM_ATTRIBUTE_KEYUSAGE: c_int = 268435479;
pub const CSSM_ATTRIBUTE_KEYATTR: c_int = 268435480;
pub const CSSM_ATTRIBUTE_VERSION: c_int = 16777241;
pub const CSSM_ATTRIBUTE_PRIME: c_int = 536870938;
pub const CSSM_ATTRIBUTE_BASE: c_int = 536870939;
pub const CSSM_ATTRIBUTE_SUBPRIME: c_int = 536870940;
pub const CSSM_ATTRIBUTE_ALG_ID: c_int = 268435485;
pub const CSSM_ATTRIBUTE_ITERATION_COUNT: c_int = 268435486;
pub const CSSM_ATTRIBUTE_ROUNDS_RANGE: c_int = 1879048223;
pub const CSSM_ATTRIBUTE_KRPROFILE_LOCAL: c_int = 50331680;
pub const CSSM_ATTRIBUTE_KRPROFILE_REMOTE: c_int = 50331681;
pub const CSSM_ATTRIBUTE_CSP_HANDLE: c_int = 268435490;
pub const CSSM_ATTRIBUTE_DL_DB_HANDLE: c_int = 33554467;
pub const CSSM_ATTRIBUTE_ACCESS_CREDENTIALS: c_uint = 2147483684;
pub const CSSM_ATTRIBUTE_PUBLIC_KEY_FORMAT: c_int = 268435493;
pub const CSSM_ATTRIBUTE_PRIVATE_KEY_FORMAT: c_int = 268435494;
pub const CSSM_ATTRIBUTE_SYMMETRIC_KEY_FORMAT: c_int = 268435495;
pub const CSSM_ATTRIBUTE_WRAPPED_KEY_FORMAT: c_int = 268435496;
const enum_unnamed_989 = c_uint;
pub const CSSM_PADDING = uint32;
pub const CSSM_PADDING_NONE: c_int = 0;
pub const CSSM_PADDING_CUSTOM: c_int = 1;
pub const CSSM_PADDING_ZERO: c_int = 2;
pub const CSSM_PADDING_ONE: c_int = 3;
pub const CSSM_PADDING_ALTERNATE: c_int = 4;
pub const CSSM_PADDING_FF: c_int = 5;
pub const CSSM_PADDING_PKCS5: c_int = 6;
pub const CSSM_PADDING_PKCS7: c_int = 7;
pub const CSSM_PADDING_CIPHERSTEALING: c_int = 8;
pub const CSSM_PADDING_RANDOM: c_int = 9;
pub const CSSM_PADDING_PKCS1: c_int = 10;
pub const CSSM_PADDING_SIGRAW: c_int = 11;
pub const CSSM_PADDING_VENDOR_DEFINED: c_uint = 2147483648;
const enum_unnamed_990 = c_uint;
pub const CSSM_KEY_TYPE = CSSM_ALGORITHMS;
pub const struct_cssm_kr_name = extern struct {
    Type: uint8,
    Length: uint8,
    Name: [*c]u8,
};
pub const CSSM_KR_NAME = struct_cssm_kr_name;
pub const struct_cssm_kr_profile = extern struct {
    UserName: CSSM_KR_NAME,
    UserCertificate: CSSM_CERTGROUP_PTR,
    KRSCertChain: CSSM_CERTGROUP_PTR,
    LE_KRANum: uint8,
    LE_KRACertChainList: CSSM_CERTGROUP_PTR,
    ENT_KRANum: uint8,
    ENT_KRACertChainList: CSSM_CERTGROUP_PTR,
    INDIV_KRANum: uint8,
    INDIV_KRACertChainList: CSSM_CERTGROUP_PTR,
    INDIV_AuthenticationInfo: CSSM_DATA_PTR,
    KRSPFlags: uint32,
    KRSPExtensions: CSSM_DATA_PTR,
};
pub const union_cssm_context_attribute_value = extern union {
    String: [*c]u8,
    Uint32: uint32,
    AccessCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
    Key: CSSM_KEY_PTR,
    Data: CSSM_DATA_PTR,
    Padding: CSSM_PADDING,
    Date: CSSM_DATE_PTR,
    Range: CSSM_RANGE_PTR,
    CryptoData: CSSM_CRYPTO_DATA_PTR,
    Version: CSSM_VERSION_PTR,
    DLDBHandle: CSSM_DL_DB_HANDLE_PTR,
    KRProfile: [*c]struct_cssm_kr_profile,
};
pub const struct_cssm_context_attribute = extern struct {
    AttributeType: CSSM_ATTRIBUTE_TYPE,
    AttributeLength: uint32,
    Attribute: union_cssm_context_attribute_value,
};
pub const CSSM_CONTEXT_ATTRIBUTE = struct_cssm_context_attribute;
pub const CSSM_CONTEXT_ATTRIBUTE_PTR = [*c]struct_cssm_context_attribute;
pub const struct_cssm_context = extern struct {
    ContextType: CSSM_CONTEXT_TYPE,
    AlgorithmType: CSSM_ALGORITHMS,
    NumberOfAttributes: uint32,
    ContextAttributes: CSSM_CONTEXT_ATTRIBUTE_PTR,
    CSPHandle: CSSM_CSP_HANDLE,
    Privileged: CSSM_BOOL,
    EncryptionProhibited: uint32,
    WorkFactor: uint32,
    Reserved: uint32,
};
pub const CSSM_CONTEXT = struct_cssm_context;
pub const CSSM_CONTEXT_PTR = [*c]struct_cssm_context;
pub const CSSM_SC_FLAGS = uint32;
pub const CSSM_CSP_TOK_RNG: c_int = 1;
pub const CSSM_CSP_TOK_CLOCK_EXISTS: c_int = 64;
const enum_unnamed_991 = c_uint;
pub const CSSM_CSP_READER_FLAGS = uint32;
pub const CSSM_CSP_RDR_TOKENPRESENT: c_int = 1;
pub const CSSM_CSP_RDR_EXISTS: c_int = 2;
pub const CSSM_CSP_RDR_HW: c_int = 4;
const enum_unnamed_992 = c_uint;
pub const CSSM_CSP_FLAGS = uint32;
pub const CSSM_CSP_TOK_WRITE_PROTECTED: c_int = 2;
pub const CSSM_CSP_TOK_LOGIN_REQUIRED: c_int = 4;
pub const CSSM_CSP_TOK_USER_PIN_INITIALIZED: c_int = 8;
pub const CSSM_CSP_TOK_PROT_AUTHENTICATION: c_int = 256;
pub const CSSM_CSP_TOK_USER_PIN_EXPIRED: c_int = 1048576;
pub const CSSM_CSP_TOK_SESSION_KEY_PASSWORD: c_int = 2097152;
pub const CSSM_CSP_TOK_PRIVATE_KEY_PASSWORD: c_int = 4194304;
pub const CSSM_CSP_STORES_PRIVATE_KEYS: c_int = 16777216;
pub const CSSM_CSP_STORES_PUBLIC_KEYS: c_int = 33554432;
pub const CSSM_CSP_STORES_SESSION_KEYS: c_int = 67108864;
pub const CSSM_CSP_STORES_CERTIFICATES: c_int = 134217728;
pub const CSSM_CSP_STORES_GENERIC: c_int = 268435456;
const enum_unnamed_993 = c_uint;
pub const CSSM_PKCS_OAEP_MGF = uint32;
pub const CSSM_PKCS_OAEP_MGF_NONE: c_int = 0;
pub const CSSM_PKCS_OAEP_MGF1_SHA1: c_int = 1;
pub const CSSM_PKCS_OAEP_MGF1_MD5: c_int = 2;
const enum_unnamed_994 = c_uint;
pub const CSSM_PKCS_OAEP_PSOURCE = uint32;
pub const CSSM_PKCS_OAEP_PSOURCE_NONE: c_int = 0;
pub const CSSM_PKCS_OAEP_PSOURCE_Pspecified: c_int = 1;
const enum_unnamed_995 = c_uint;
pub const struct_cssm_pkcs1_oaep_params = extern struct {
    HashAlgorithm: uint32,
    HashParams: SecAsn1Item,
    MGF: CSSM_PKCS_OAEP_MGF,
    MGFParams: SecAsn1Item,
    PSource: CSSM_PKCS_OAEP_PSOURCE,
    PSourceParams: SecAsn1Item,
};
pub const CSSM_PKCS1_OAEP_PARAMS = struct_cssm_pkcs1_oaep_params;
pub const CSSM_PKCS1_OAEP_PARAMS_PTR = [*c]struct_cssm_pkcs1_oaep_params;
pub const struct_cssm_csp_operational_statistics = extern struct {
    UserAuthenticated: CSSM_BOOL,
    DeviceFlags: CSSM_CSP_FLAGS,
    TokenMaxSessionCount: uint32,
    TokenOpenedSessionCount: uint32,
    TokenMaxRWSessionCount: uint32,
    TokenOpenedRWSessionCount: uint32,
    TokenTotalPublicMem: uint32,
    TokenFreePublicMem: uint32,
    TokenTotalPrivateMem: uint32,
    TokenFreePrivateMem: uint32,
};
pub const CSSM_CSP_OPERATIONAL_STATISTICS = struct_cssm_csp_operational_statistics;
pub const CSSM_CSP_OPERATIONAL_STATISTICS_PTR = [*c]struct_cssm_csp_operational_statistics;
pub const CSSM_VALUE_NOT_AVAILABLE: c_int = -1;
const enum_unnamed_996 = c_int;
pub const struct_cssm_pkcs5_pbkdf1_params = extern struct {
    Passphrase: SecAsn1Item,
    InitVector: SecAsn1Item,
};
pub const CSSM_PKCS5_PBKDF1_PARAMS = struct_cssm_pkcs5_pbkdf1_params;
pub const CSSM_PKCS5_PBKDF1_PARAMS_PTR = [*c]struct_cssm_pkcs5_pbkdf1_params;
pub const CSSM_PKCS5_PBKDF2_PRF = uint32;
pub const CSSM_PKCS5_PBKDF2_PRF_HMAC_SHA1: c_int = 0;
const enum_unnamed_997 = c_uint;
pub const struct_cssm_pkcs5_pbkdf2_params = extern struct {
    Passphrase: SecAsn1Item,
    PseudoRandomFunction: CSSM_PKCS5_PBKDF2_PRF,
};
pub const CSSM_PKCS5_PBKDF2_PARAMS = struct_cssm_pkcs5_pbkdf2_params;
pub const CSSM_PKCS5_PBKDF2_PARAMS_PTR = [*c]struct_cssm_pkcs5_pbkdf2_params;
pub const struct_cssm_kea_derive_params = extern struct {
    Rb: SecAsn1Item,
    Yb: SecAsn1Item,
};
pub const CSSM_KEA_DERIVE_PARAMS = struct_cssm_kea_derive_params;
pub const CSSM_KEA_DERIVE_PARAMS_PTR = [*c]struct_cssm_kea_derive_params;
pub const struct_cssm_tp_authority_id = extern struct {
    AuthorityCert: [*c]SecAsn1Item,
    AuthorityLocation: CSSM_NET_ADDRESS_PTR,
};
pub const CSSM_TP_AUTHORITY_ID = struct_cssm_tp_authority_id;
pub const CSSM_TP_AUTHORITY_ID_PTR = [*c]struct_cssm_tp_authority_id;
pub const CSSM_TP_AUTHORITY_REQUEST_TYPE = uint32;
pub const CSSM_TP_AUTHORITY_REQUEST_TYPE_PTR = [*c]uint32;
pub const CSSM_TP_AUTHORITY_REQUEST_CERTISSUE: c_int = 1;
pub const CSSM_TP_AUTHORITY_REQUEST_CERTREVOKE: c_int = 2;
pub const CSSM_TP_AUTHORITY_REQUEST_CERTSUSPEND: c_int = 3;
pub const CSSM_TP_AUTHORITY_REQUEST_CERTRESUME: c_int = 4;
pub const CSSM_TP_AUTHORITY_REQUEST_CERTVERIFY: c_int = 5;
pub const CSSM_TP_AUTHORITY_REQUEST_CERTNOTARIZE: c_int = 6;
pub const CSSM_TP_AUTHORITY_REQUEST_CERTUSERECOVER: c_int = 7;
pub const CSSM_TP_AUTHORITY_REQUEST_CRLISSUE: c_int = 256;
const enum_unnamed_998 = c_uint;
pub const CSSM_TP_VERIFICATION_RESULTS_CALLBACK = ?*const fn (CSSM_MODULE_HANDLE, ?*anyopaque, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN;
pub const CSSM_OID_PTR = [*c]SecAsn1Oid;
pub const struct_cssm_field = extern struct {
    FieldOid: SecAsn1Oid,
    FieldValue: SecAsn1Item,
};
pub const CSSM_FIELD = struct_cssm_field;
pub const CSSM_FIELD_PTR = [*c]struct_cssm_field;
pub const struct_cssm_tp_policyinfo = extern struct {
    NumberOfPolicyIds: uint32,
    PolicyIds: CSSM_FIELD_PTR,
    PolicyControl: ?*anyopaque,
};
pub const CSSM_TP_POLICYINFO = struct_cssm_tp_policyinfo;
pub const CSSM_TP_POLICYINFO_PTR = [*c]struct_cssm_tp_policyinfo;
pub const CSSM_TP_SERVICES = uint32;
pub const CSSM_TP_KEY_ARCHIVE: c_int = 1;
pub const CSSM_TP_CERT_PUBLISH: c_int = 2;
pub const CSSM_TP_CERT_NOTIFY_RENEW: c_int = 4;
pub const CSSM_TP_CERT_DIR_UPDATE: c_int = 8;
pub const CSSM_TP_CRL_DISTRIBUTE: c_int = 16;
const enum_unnamed_999 = c_uint;
pub const CSSM_TP_ACTION = uint32;
pub const CSSM_TP_ACTION_DEFAULT: c_int = 0;
const enum_unnamed_1000 = c_uint;
pub const CSSM_TP_STOP_ON = uint32;
pub const CSSM_TP_STOP_ON_POLICY: c_int = 0;
pub const CSSM_TP_STOP_ON_NONE: c_int = 1;
pub const CSSM_TP_STOP_ON_FIRST_PASS: c_int = 2;
pub const CSSM_TP_STOP_ON_FIRST_FAIL: c_int = 3;
const enum_unnamed_1001 = c_uint;
pub const CSSM_TIMESTRING = [*c]u8;
pub const struct_cssm_dl_db_list = extern struct {
    NumHandles: uint32,
    DLDBHandle: CSSM_DL_DB_HANDLE_PTR,
};
pub const CSSM_DL_DB_LIST = struct_cssm_dl_db_list;
pub const CSSM_DL_DB_LIST_PTR = [*c]struct_cssm_dl_db_list;
pub const struct_cssm_tp_callerauth_context = extern struct {
    Policy: CSSM_TP_POLICYINFO,
    VerifyTime: CSSM_TIMESTRING,
    VerificationAbortOn: CSSM_TP_STOP_ON,
    CallbackWithVerifiedCert: CSSM_TP_VERIFICATION_RESULTS_CALLBACK,
    NumberOfAnchorCerts: uint32,
    AnchorCerts: CSSM_DATA_PTR,
    DBList: CSSM_DL_DB_LIST_PTR,
    CallerCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};
pub const CSSM_TP_CALLERAUTH_CONTEXT = struct_cssm_tp_callerauth_context;
pub const CSSM_TP_CALLERAUTH_CONTEXT_PTR = [*c]struct_cssm_tp_callerauth_context;
pub const CSSM_CRL_PARSE_FORMAT = uint32;
pub const CSSM_CRL_PARSE_FORMAT_PTR = [*c]uint32;
pub const CSSM_CRL_PARSE_FORMAT_NONE: c_int = 0;
pub const CSSM_CRL_PARSE_FORMAT_CUSTOM: c_int = 1;
pub const CSSM_CRL_PARSE_FORMAT_SEXPR: c_int = 2;
pub const CSSM_CRL_PARSE_FORMAT_COMPLEX: c_int = 3;
pub const CSSM_CRL_PARSE_FORMAT_OID_NAMED: c_int = 4;
pub const CSSM_CRL_PARSE_FORMAT_TUPLE: c_int = 5;
pub const CSSM_CRL_PARSE_FORMAT_MULTIPLE: c_int = 32766;
pub const CSSM_CRL_PARSE_FORMAT_LAST: c_int = 32767;
pub const CSSM_CL_CUSTOM_CRL_PARSE_FORMAT: c_int = 32768;
const enum_unnamed_1002 = c_uint;
pub const CSSM_CRL_TYPE = uint32;
pub const CSSM_CRL_TYPE_PTR = [*c]uint32;
pub const CSSM_CRL_TYPE_UNKNOWN: c_int = 0;
pub const CSSM_CRL_TYPE_X_509v1: c_int = 1;
pub const CSSM_CRL_TYPE_X_509v2: c_int = 2;
pub const CSSM_CRL_TYPE_SPKI: c_int = 3;
pub const CSSM_CRL_TYPE_MULTIPLE: c_int = 32766;
const enum_unnamed_1003 = c_uint;
pub const CSSM_CRL_ENCODING = uint32;
pub const CSSM_CRL_ENCODING_PTR = [*c]uint32;
pub const CSSM_CRL_ENCODING_UNKNOWN: c_int = 0;
pub const CSSM_CRL_ENCODING_CUSTOM: c_int = 1;
pub const CSSM_CRL_ENCODING_BER: c_int = 2;
pub const CSSM_CRL_ENCODING_DER: c_int = 3;
pub const CSSM_CRL_ENCODING_BLOOM: c_int = 4;
pub const CSSM_CRL_ENCODING_SEXPR: c_int = 5;
pub const CSSM_CRL_ENCODING_MULTIPLE: c_int = 32766;
const enum_unnamed_1004 = c_uint;
pub const struct_cssm_encoded_crl = extern struct {
    CrlType: CSSM_CRL_TYPE,
    CrlEncoding: CSSM_CRL_ENCODING,
    CrlBlob: SecAsn1Item,
};
pub const CSSM_ENCODED_CRL = struct_cssm_encoded_crl;
pub const CSSM_ENCODED_CRL_PTR = [*c]struct_cssm_encoded_crl;
pub const struct_cssm_parsed_crl = extern struct {
    CrlType: CSSM_CRL_TYPE,
    ParsedCrlFormat: CSSM_CRL_PARSE_FORMAT,
    ParsedCrl: ?*anyopaque,
};
pub const CSSM_PARSED_CRL = struct_cssm_parsed_crl;
pub const CSSM_PARSED_CRL_PTR = [*c]struct_cssm_parsed_crl;
pub const struct_cssm_crl_pair = extern struct {
    EncodedCrl: CSSM_ENCODED_CRL,
    ParsedCrl: CSSM_PARSED_CRL,
};
pub const CSSM_CRL_PAIR = struct_cssm_crl_pair;
pub const CSSM_CRL_PAIR_PTR = [*c]struct_cssm_crl_pair;
pub const CSSM_CRLGROUP_TYPE = uint32;
pub const CSSM_CRLGROUP_TYPE_PTR = [*c]uint32;
pub const CSSM_CRLGROUP_DATA: c_int = 0;
pub const CSSM_CRLGROUP_ENCODED_CRL: c_int = 1;
pub const CSSM_CRLGROUP_PARSED_CRL: c_int = 2;
pub const CSSM_CRLGROUP_CRL_PAIR: c_int = 3;
const enum_unnamed_1005 = c_uint;
const union_unnamed_1006 = extern union {
    CrlList: CSSM_DATA_PTR,
    EncodedCrlList: CSSM_ENCODED_CRL_PTR,
    ParsedCrlList: CSSM_PARSED_CRL_PTR,
    PairCrlList: CSSM_CRL_PAIR_PTR,
};
pub const struct_cssm_crlgroup = extern struct {
    CrlType: CSSM_CRL_TYPE,
    CrlEncoding: CSSM_CRL_ENCODING,
    NumberOfCrls: uint32,
    GroupCrlList: union_unnamed_1006,
    CrlGroupType: CSSM_CRLGROUP_TYPE,
};
pub const CSSM_CRLGROUP = struct_cssm_crlgroup;
pub const CSSM_CRLGROUP_PTR = [*c]struct_cssm_crlgroup;
pub const struct_cssm_fieldgroup = extern struct {
    NumberOfFields: c_int,
    Fields: CSSM_FIELD_PTR,
};
pub const CSSM_FIELDGROUP = struct_cssm_fieldgroup;
pub const CSSM_FIELDGROUP_PTR = [*c]struct_cssm_fieldgroup;
pub const CSSM_EVIDENCE_FORM = uint32;
pub const CSSM_EVIDENCE_FORM_UNSPECIFIC: c_int = 0;
pub const CSSM_EVIDENCE_FORM_CERT: c_int = 1;
pub const CSSM_EVIDENCE_FORM_CRL: c_int = 2;
pub const CSSM_EVIDENCE_FORM_CERT_ID: c_int = 3;
pub const CSSM_EVIDENCE_FORM_CRL_ID: c_int = 4;
pub const CSSM_EVIDENCE_FORM_VERIFIER_TIME: c_int = 5;
pub const CSSM_EVIDENCE_FORM_CRL_THISTIME: c_int = 6;
pub const CSSM_EVIDENCE_FORM_CRL_NEXTTIME: c_int = 7;
pub const CSSM_EVIDENCE_FORM_POLICYINFO: c_int = 8;
pub const CSSM_EVIDENCE_FORM_TUPLEGROUP: c_int = 9;
const enum_unnamed_1007 = c_uint;
pub const struct_cssm_evidence = extern struct {
    EvidenceForm: CSSM_EVIDENCE_FORM,
    Evidence: ?*anyopaque,
};
pub const CSSM_EVIDENCE = struct_cssm_evidence;
pub const CSSM_EVIDENCE_PTR = [*c]struct_cssm_evidence;
pub const struct_cssm_tp_verify_context = extern struct {
    Action: CSSM_TP_ACTION,
    ActionData: SecAsn1Item,
    Crls: CSSM_CRLGROUP,
    Cred: CSSM_TP_CALLERAUTH_CONTEXT_PTR,
};
pub const CSSM_TP_VERIFY_CONTEXT = struct_cssm_tp_verify_context;
pub const CSSM_TP_VERIFY_CONTEXT_PTR = [*c]struct_cssm_tp_verify_context;
pub const struct_cssm_tp_verify_context_result = extern struct {
    NumberOfEvidences: uint32,
    Evidence: CSSM_EVIDENCE_PTR,
};
pub const CSSM_TP_VERIFY_CONTEXT_RESULT = struct_cssm_tp_verify_context_result;
pub const CSSM_TP_VERIFY_CONTEXT_RESULT_PTR = [*c]struct_cssm_tp_verify_context_result;
pub const struct_cssm_tp_request_set = extern struct {
    NumberOfRequests: uint32,
    Requests: ?*anyopaque,
};
pub const CSSM_TP_REQUEST_SET = struct_cssm_tp_request_set;
pub const CSSM_TP_REQUEST_SET_PTR = [*c]struct_cssm_tp_request_set;
pub const struct_cssm_tp_result_set = extern struct {
    NumberOfResults: uint32,
    Results: ?*anyopaque,
};
pub const CSSM_TP_RESULT_SET = struct_cssm_tp_result_set;
pub const CSSM_TP_RESULT_SET_PTR = [*c]struct_cssm_tp_result_set;
pub const CSSM_TP_CONFIRM_STATUS = uint32;
pub const CSSM_TP_CONFIRM_STATUS_PTR = [*c]uint32;
pub const CSSM_TP_CONFIRM_STATUS_UNKNOWN: c_int = 0;
pub const CSSM_TP_CONFIRM_ACCEPT: c_int = 1;
pub const CSSM_TP_CONFIRM_REJECT: c_int = 2;
const enum_unnamed_1008 = c_uint;
pub const struct_cssm_tp_confirm_response = extern struct {
    NumberOfResponses: uint32,
    Responses: CSSM_TP_CONFIRM_STATUS_PTR,
};
pub const CSSM_TP_CONFIRM_RESPONSE = struct_cssm_tp_confirm_response;
pub const CSSM_TP_CONFIRM_RESPONSE_PTR = [*c]struct_cssm_tp_confirm_response;
pub const CSSM_ESTIMATED_TIME_UNKNOWN: c_int = -1;
const enum_unnamed_1009 = c_int;
pub const CSSM_ELAPSED_TIME_UNKNOWN: c_int = -1;
pub const CSSM_ELAPSED_TIME_COMPLETE: c_int = -2;
const enum_unnamed_1010 = c_int;
pub const struct_cssm_tp_certissue_input = extern struct {
    CSPSubserviceUid: CSSM_SUBSERVICE_UID,
    CLHandle: CSSM_CL_HANDLE,
    NumberOfTemplateFields: uint32,
    SubjectCertFields: CSSM_FIELD_PTR,
    MoreServiceRequests: CSSM_TP_SERVICES,
    NumberOfServiceControls: uint32,
    ServiceControls: CSSM_FIELD_PTR,
    UserCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};
pub const CSSM_TP_CERTISSUE_INPUT = struct_cssm_tp_certissue_input;
pub const CSSM_TP_CERTISSUE_INPUT_PTR = [*c]struct_cssm_tp_certissue_input;
pub const CSSM_TP_CERTISSUE_STATUS = uint32;
pub const CSSM_TP_CERTISSUE_STATUS_UNKNOWN: c_int = 0;
pub const CSSM_TP_CERTISSUE_OK: c_int = 1;
pub const CSSM_TP_CERTISSUE_OKWITHCERTMODS: c_int = 2;
pub const CSSM_TP_CERTISSUE_OKWITHSERVICEMODS: c_int = 3;
pub const CSSM_TP_CERTISSUE_REJECTED: c_int = 4;
pub const CSSM_TP_CERTISSUE_NOT_AUTHORIZED: c_int = 5;
pub const CSSM_TP_CERTISSUE_WILL_BE_REVOKED: c_int = 6;
const enum_unnamed_1011 = c_uint;
pub const struct_cssm_tp_certissue_output = extern struct {
    IssueStatus: CSSM_TP_CERTISSUE_STATUS,
    CertGroup: CSSM_CERTGROUP_PTR,
    PerformedServiceRequests: CSSM_TP_SERVICES,
};
pub const CSSM_TP_CERTISSUE_OUTPUT = struct_cssm_tp_certissue_output;
pub const CSSM_TP_CERTISSUE_OUTPUT_PTR = [*c]struct_cssm_tp_certissue_output;
pub const CSSM_TP_CERTCHANGE_ACTION = uint32;
pub const CSSM_TP_CERTCHANGE_NONE: c_int = 0;
pub const CSSM_TP_CERTCHANGE_REVOKE: c_int = 1;
pub const CSSM_TP_CERTCHANGE_HOLD: c_int = 2;
pub const CSSM_TP_CERTCHANGE_RELEASE: c_int = 3;
const enum_unnamed_1012 = c_uint;
pub const CSSM_TP_CERTCHANGE_REASON = uint32;
pub const CSSM_TP_CERTCHANGE_REASON_UNKNOWN: c_int = 0;
pub const CSSM_TP_CERTCHANGE_REASON_KEYCOMPROMISE: c_int = 1;
pub const CSSM_TP_CERTCHANGE_REASON_CACOMPROMISE: c_int = 2;
pub const CSSM_TP_CERTCHANGE_REASON_CEASEOPERATION: c_int = 3;
pub const CSSM_TP_CERTCHANGE_REASON_AFFILIATIONCHANGE: c_int = 4;
pub const CSSM_TP_CERTCHANGE_REASON_SUPERCEDED: c_int = 5;
pub const CSSM_TP_CERTCHANGE_REASON_SUSPECTEDCOMPROMISE: c_int = 6;
pub const CSSM_TP_CERTCHANGE_REASON_HOLDRELEASE: c_int = 7;
const enum_unnamed_1013 = c_uint;
pub const struct_cssm_tp_certchange_input = extern struct {
    Action: CSSM_TP_CERTCHANGE_ACTION,
    Reason: CSSM_TP_CERTCHANGE_REASON,
    CLHandle: CSSM_CL_HANDLE,
    Cert: CSSM_DATA_PTR,
    ChangeInfo: CSSM_FIELD_PTR,
    StartTime: CSSM_TIMESTRING,
    CallerCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};
pub const CSSM_TP_CERTCHANGE_INPUT = struct_cssm_tp_certchange_input;
pub const CSSM_TP_CERTCHANGE_INPUT_PTR = [*c]struct_cssm_tp_certchange_input;
pub const CSSM_TP_CERTCHANGE_STATUS = uint32;
pub const CSSM_TP_CERTCHANGE_STATUS_UNKNOWN: c_int = 0;
pub const CSSM_TP_CERTCHANGE_OK: c_int = 1;
pub const CSSM_TP_CERTCHANGE_OKWITHNEWTIME: c_int = 2;
pub const CSSM_TP_CERTCHANGE_WRONGCA: c_int = 3;
pub const CSSM_TP_CERTCHANGE_REJECTED: c_int = 4;
pub const CSSM_TP_CERTCHANGE_NOT_AUTHORIZED: c_int = 5;
const enum_unnamed_1014 = c_uint;
pub const struct_cssm_tp_certchange_output = extern struct {
    ActionStatus: CSSM_TP_CERTCHANGE_STATUS,
    RevokeInfo: CSSM_FIELD,
};
pub const CSSM_TP_CERTCHANGE_OUTPUT = struct_cssm_tp_certchange_output;
pub const CSSM_TP_CERTCHANGE_OUTPUT_PTR = [*c]struct_cssm_tp_certchange_output;
pub const struct_cssm_tp_certverify_input = extern struct {
    CLHandle: CSSM_CL_HANDLE,
    Cert: CSSM_DATA_PTR,
    VerifyContext: CSSM_TP_VERIFY_CONTEXT_PTR,
};
pub const CSSM_TP_CERTVERIFY_INPUT = struct_cssm_tp_certverify_input;
pub const CSSM_TP_CERTVERIFY_INPUT_PTR = [*c]struct_cssm_tp_certverify_input;
pub const CSSM_TP_CERTVERIFY_STATUS = uint32;
pub const CSSM_TP_CERTVERIFY_UNKNOWN: c_int = 0;
pub const CSSM_TP_CERTVERIFY_VALID: c_int = 1;
pub const CSSM_TP_CERTVERIFY_INVALID: c_int = 2;
pub const CSSM_TP_CERTVERIFY_REVOKED: c_int = 3;
pub const CSSM_TP_CERTVERIFY_SUSPENDED: c_int = 4;
pub const CSSM_TP_CERTVERIFY_EXPIRED: c_int = 5;
pub const CSSM_TP_CERTVERIFY_NOT_VALID_YET: c_int = 6;
pub const CSSM_TP_CERTVERIFY_INVALID_AUTHORITY: c_int = 7;
pub const CSSM_TP_CERTVERIFY_INVALID_SIGNATURE: c_int = 8;
pub const CSSM_TP_CERTVERIFY_INVALID_CERT_VALUE: c_int = 9;
pub const CSSM_TP_CERTVERIFY_INVALID_CERTGROUP: c_int = 10;
pub const CSSM_TP_CERTVERIFY_INVALID_POLICY: c_int = 11;
pub const CSSM_TP_CERTVERIFY_INVALID_POLICY_IDS: c_int = 12;
pub const CSSM_TP_CERTVERIFY_INVALID_BASIC_CONSTRAINTS: c_int = 13;
pub const CSSM_TP_CERTVERIFY_INVALID_CRL_DIST_PT: c_int = 14;
pub const CSSM_TP_CERTVERIFY_INVALID_NAME_TREE: c_int = 15;
pub const CSSM_TP_CERTVERIFY_UNKNOWN_CRITICAL_EXT: c_int = 16;
const enum_unnamed_1015 = c_uint;
pub const struct_cssm_tp_certverify_output = extern struct {
    VerifyStatus: CSSM_TP_CERTVERIFY_STATUS,
    NumberOfEvidence: uint32,
    Evidence: CSSM_EVIDENCE_PTR,
};
pub const CSSM_TP_CERTVERIFY_OUTPUT = struct_cssm_tp_certverify_output;
pub const CSSM_TP_CERTVERIFY_OUTPUT_PTR = [*c]struct_cssm_tp_certverify_output;
pub const struct_cssm_tp_certnotarize_input = extern struct {
    CLHandle: CSSM_CL_HANDLE,
    NumberOfFields: uint32,
    MoreFields: CSSM_FIELD_PTR,
    SignScope: CSSM_FIELD_PTR,
    ScopeSize: uint32,
    MoreServiceRequests: CSSM_TP_SERVICES,
    NumberOfServiceControls: uint32,
    ServiceControls: CSSM_FIELD_PTR,
    UserCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};
pub const CSSM_TP_CERTNOTARIZE_INPUT = struct_cssm_tp_certnotarize_input;
pub const CSSM_TP_CERTNOTARIZE_INPUT_PTR = [*c]struct_cssm_tp_certnotarize_input;
pub const CSSM_TP_CERTNOTARIZE_STATUS = uint32;
pub const CSSM_TP_CERTNOTARIZE_STATUS_UNKNOWN: c_int = 0;
pub const CSSM_TP_CERTNOTARIZE_OK: c_int = 1;
pub const CSSM_TP_CERTNOTARIZE_OKWITHOUTFIELDS: c_int = 2;
pub const CSSM_TP_CERTNOTARIZE_OKWITHSERVICEMODS: c_int = 3;
pub const CSSM_TP_CERTNOTARIZE_REJECTED: c_int = 4;
pub const CSSM_TP_CERTNOTARIZE_NOT_AUTHORIZED: c_int = 5;
const enum_unnamed_1016 = c_uint;
pub const struct_cssm_tp_certnotarize_output = extern struct {
    NotarizeStatus: CSSM_TP_CERTNOTARIZE_STATUS,
    NotarizedCertGroup: CSSM_CERTGROUP_PTR,
    PerformedServiceRequests: CSSM_TP_SERVICES,
};
pub const CSSM_TP_CERTNOTARIZE_OUTPUT = struct_cssm_tp_certnotarize_output;
pub const CSSM_TP_CERTNOTARIZE_OUTPUT_PTR = [*c]struct_cssm_tp_certnotarize_output;
pub const struct_cssm_tp_certreclaim_input = extern struct {
    CLHandle: CSSM_CL_HANDLE,
    NumberOfSelectionFields: uint32,
    SelectionFields: CSSM_FIELD_PTR,
    UserCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};
pub const CSSM_TP_CERTRECLAIM_INPUT = struct_cssm_tp_certreclaim_input;
pub const CSSM_TP_CERTRECLAIM_INPUT_PTR = [*c]struct_cssm_tp_certreclaim_input;
pub const CSSM_TP_CERTRECLAIM_STATUS = uint32;
pub const CSSM_TP_CERTRECLAIM_STATUS_UNKNOWN: c_int = 0;
pub const CSSM_TP_CERTRECLAIM_OK: c_int = 1;
pub const CSSM_TP_CERTRECLAIM_NOMATCH: c_int = 2;
pub const CSSM_TP_CERTRECLAIM_REJECTED: c_int = 3;
pub const CSSM_TP_CERTRECLAIM_NOT_AUTHORIZED: c_int = 4;
const enum_unnamed_1017 = c_uint;
pub const struct_cssm_tp_certreclaim_output = extern struct {
    ReclaimStatus: CSSM_TP_CERTRECLAIM_STATUS,
    ReclaimedCertGroup: CSSM_CERTGROUP_PTR,
    KeyCacheHandle: CSSM_LONG_HANDLE,
};
pub const CSSM_TP_CERTRECLAIM_OUTPUT = struct_cssm_tp_certreclaim_output;
pub const CSSM_TP_CERTRECLAIM_OUTPUT_PTR = [*c]struct_cssm_tp_certreclaim_output;
pub const struct_cssm_tp_crlissue_input = extern struct {
    CLHandle: CSSM_CL_HANDLE,
    CrlIdentifier: uint32,
    CrlThisTime: CSSM_TIMESTRING,
    PolicyIdentifier: CSSM_FIELD_PTR,
    CallerCredentials: CSSM_ACCESS_CREDENTIALS_PTR,
};
pub const CSSM_TP_CRLISSUE_INPUT = struct_cssm_tp_crlissue_input;
pub const CSSM_TP_CRLISSUE_INPUT_PTR = [*c]struct_cssm_tp_crlissue_input;
pub const CSSM_TP_CRLISSUE_STATUS = uint32;
pub const CSSM_TP_CRLISSUE_STATUS_UNKNOWN: c_int = 0;
pub const CSSM_TP_CRLISSUE_OK: c_int = 1;
pub const CSSM_TP_CRLISSUE_NOT_CURRENT: c_int = 2;
pub const CSSM_TP_CRLISSUE_INVALID_DOMAIN: c_int = 3;
pub const CSSM_TP_CRLISSUE_UNKNOWN_IDENTIFIER: c_int = 4;
pub const CSSM_TP_CRLISSUE_REJECTED: c_int = 5;
pub const CSSM_TP_CRLISSUE_NOT_AUTHORIZED: c_int = 6;
const enum_unnamed_1018 = c_uint;
pub const struct_cssm_tp_crlissue_output = extern struct {
    IssueStatus: CSSM_TP_CRLISSUE_STATUS,
    Crl: CSSM_ENCODED_CRL_PTR,
    CrlNextTime: CSSM_TIMESTRING,
};
pub const CSSM_TP_CRLISSUE_OUTPUT = struct_cssm_tp_crlissue_output;
pub const CSSM_TP_CRLISSUE_OUTPUT_PTR = [*c]struct_cssm_tp_crlissue_output;
pub const CSSM_TP_FORM_TYPE = uint32;
pub const CSSM_TP_FORM_TYPE_GENERIC: c_int = 0;
pub const CSSM_TP_FORM_TYPE_REGISTRATION: c_int = 1;
const enum_unnamed_1019 = c_uint;
pub const CSSM_CL_TEMPLATE_TYPE = uint32;
pub const CSSM_CL_TEMPLATE_INTERMEDIATE_CERT: c_int = 1;
pub const CSSM_CL_TEMPLATE_PKIX_CERTTEMPLATE: c_int = 2;
const enum_unnamed_1020 = c_uint;
pub const CSSM_CERT_BUNDLE_TYPE = uint32;
pub const CSSM_CERT_BUNDLE_UNKNOWN: c_int = 0;
pub const CSSM_CERT_BUNDLE_CUSTOM: c_int = 1;
pub const CSSM_CERT_BUNDLE_PKCS7_SIGNED_DATA: c_int = 2;
pub const CSSM_CERT_BUNDLE_PKCS7_SIGNED_ENVELOPED_DATA: c_int = 3;
pub const CSSM_CERT_BUNDLE_PKCS12: c_int = 4;
pub const CSSM_CERT_BUNDLE_PFX: c_int = 5;
pub const CSSM_CERT_BUNDLE_SPKI_SEQUENCE: c_int = 6;
pub const CSSM_CERT_BUNDLE_PGP_KEYRING: c_int = 7;
pub const CSSM_CERT_BUNDLE_LAST: c_int = 32767;
pub const CSSM_CL_CUSTOM_CERT_BUNDLE_TYPE: c_int = 32768;
const enum_unnamed_1021 = c_uint;
pub const CSSM_CERT_BUNDLE_ENCODING = uint32;
pub const CSSM_CERT_BUNDLE_ENCODING_UNKNOWN: c_int = 0;
pub const CSSM_CERT_BUNDLE_ENCODING_CUSTOM: c_int = 1;
pub const CSSM_CERT_BUNDLE_ENCODING_BER: c_int = 2;
pub const CSSM_CERT_BUNDLE_ENCODING_DER: c_int = 3;
pub const CSSM_CERT_BUNDLE_ENCODING_SEXPR: c_int = 4;
pub const CSSM_CERT_BUNDLE_ENCODING_PGP: c_int = 5;
const enum_unnamed_1022 = c_uint;
pub const struct_cssm_cert_bundle_header = extern struct {
    BundleType: CSSM_CERT_BUNDLE_TYPE,
    BundleEncoding: CSSM_CERT_BUNDLE_ENCODING,
};
pub const CSSM_CERT_BUNDLE_HEADER = struct_cssm_cert_bundle_header;
pub const CSSM_CERT_BUNDLE_HEADER_PTR = [*c]struct_cssm_cert_bundle_header;
pub const struct_cssm_cert_bundle = extern struct {
    BundleHeader: CSSM_CERT_BUNDLE_HEADER,
    Bundle: SecAsn1Item,
};
pub const CSSM_CERT_BUNDLE = struct_cssm_cert_bundle;
pub const CSSM_CERT_BUNDLE_PTR = [*c]struct_cssm_cert_bundle;
pub const CSSM_FIELDVALUE_COMPLEX_DATA_TYPE: c_uint = 4294967295;
const enum_unnamed_1023 = c_uint;
pub const CSSM_DB_ATTRIBUTE_NAME_FORMAT = uint32;
pub const CSSM_DB_ATTRIBUTE_NAME_FORMAT_PTR = [*c]uint32;
pub const CSSM_DB_ATTRIBUTE_NAME_AS_STRING: c_int = 0;
pub const CSSM_DB_ATTRIBUTE_NAME_AS_OID: c_int = 1;
pub const CSSM_DB_ATTRIBUTE_NAME_AS_INTEGER: c_int = 2;
const enum_unnamed_1024 = c_uint;
pub const CSSM_DB_ATTRIBUTE_FORMAT = uint32;
pub const CSSM_DB_ATTRIBUTE_FORMAT_PTR = [*c]uint32;
pub const CSSM_DB_ATTRIBUTE_FORMAT_STRING: c_int = 0;
pub const CSSM_DB_ATTRIBUTE_FORMAT_SINT32: c_int = 1;
pub const CSSM_DB_ATTRIBUTE_FORMAT_UINT32: c_int = 2;
pub const CSSM_DB_ATTRIBUTE_FORMAT_BIG_NUM: c_int = 3;
pub const CSSM_DB_ATTRIBUTE_FORMAT_REAL: c_int = 4;
pub const CSSM_DB_ATTRIBUTE_FORMAT_TIME_DATE: c_int = 5;
pub const CSSM_DB_ATTRIBUTE_FORMAT_BLOB: c_int = 6;
pub const CSSM_DB_ATTRIBUTE_FORMAT_MULTI_UINT32: c_int = 7;
pub const CSSM_DB_ATTRIBUTE_FORMAT_COMPLEX: c_int = 8;
const enum_unnamed_1025 = c_uint;
pub const union_cssm_db_attribute_label = extern union {
    AttributeName: [*c]u8,
    AttributeOID: SecAsn1Oid,
    AttributeID: uint32,
};
pub const struct_cssm_db_attribute_info = extern struct {
    AttributeNameFormat: CSSM_DB_ATTRIBUTE_NAME_FORMAT,
    Label: union_cssm_db_attribute_label,
    AttributeFormat: CSSM_DB_ATTRIBUTE_FORMAT,
};
pub const CSSM_DB_ATTRIBUTE_INFO = struct_cssm_db_attribute_info;
pub const CSSM_DB_ATTRIBUTE_INFO_PTR = [*c]struct_cssm_db_attribute_info;
pub const struct_cssm_db_attribute_data = extern struct {
    Info: CSSM_DB_ATTRIBUTE_INFO,
    NumberOfValues: uint32,
    Value: CSSM_DATA_PTR,
};
pub const CSSM_DB_ATTRIBUTE_DATA = struct_cssm_db_attribute_data;
pub const CSSM_DB_ATTRIBUTE_DATA_PTR = [*c]struct_cssm_db_attribute_data;
pub const CSSM_DB_RECORDTYPE = uint32;
pub const CSSM_DB_RECORDTYPE_SCHEMA_START: c_int = 0;
pub const CSSM_DB_RECORDTYPE_SCHEMA_END: c_int = 4;
pub const CSSM_DB_RECORDTYPE_OPEN_GROUP_START: c_int = 10;
pub const CSSM_DB_RECORDTYPE_OPEN_GROUP_END: c_int = 18;
pub const CSSM_DB_RECORDTYPE_APP_DEFINED_START: c_uint = 2147483648;
pub const CSSM_DB_RECORDTYPE_APP_DEFINED_END: c_uint = 4294967295;
pub const CSSM_DL_DB_SCHEMA_INFO: c_int = 0;
pub const CSSM_DL_DB_SCHEMA_INDEXES: c_int = 1;
pub const CSSM_DL_DB_SCHEMA_ATTRIBUTES: c_int = 2;
pub const CSSM_DL_DB_SCHEMA_PARSING_MODULE: c_int = 3;
pub const CSSM_DL_DB_RECORD_ANY: c_int = 10;
pub const CSSM_DL_DB_RECORD_CERT: c_int = 11;
pub const CSSM_DL_DB_RECORD_CRL: c_int = 12;
pub const CSSM_DL_DB_RECORD_POLICY: c_int = 13;
pub const CSSM_DL_DB_RECORD_GENERIC: c_int = 14;
pub const CSSM_DL_DB_RECORD_PUBLIC_KEY: c_int = 15;
pub const CSSM_DL_DB_RECORD_PRIVATE_KEY: c_int = 16;
pub const CSSM_DL_DB_RECORD_SYMMETRIC_KEY: c_int = 17;
pub const CSSM_DL_DB_RECORD_ALL_KEYS: c_int = 18;
const enum_unnamed_1026 = c_uint;
pub const CSSM_DB_CERT_USE_TRUSTED: c_int = 1;
pub const CSSM_DB_CERT_USE_SYSTEM: c_int = 2;
pub const CSSM_DB_CERT_USE_OWNER: c_int = 4;
pub const CSSM_DB_CERT_USE_REVOKED: c_int = 8;
pub const CSSM_DB_CERT_USE_SIGNING: c_int = 16;
pub const CSSM_DB_CERT_USE_PRIVACY: c_int = 32;
const enum_unnamed_1027 = c_uint;
pub const struct_cssm_db_record_attribute_info = extern struct {
    DataRecordType: CSSM_DB_RECORDTYPE,
    NumberOfAttributes: uint32,
    AttributeInfo: CSSM_DB_ATTRIBUTE_INFO_PTR,
};
pub const CSSM_DB_RECORD_ATTRIBUTE_INFO = struct_cssm_db_record_attribute_info;
pub const CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR = [*c]struct_cssm_db_record_attribute_info;
pub const struct_cssm_db_record_attribute_data = extern struct {
    DataRecordType: CSSM_DB_RECORDTYPE,
    SemanticInformation: uint32,
    NumberOfAttributes: uint32,
    AttributeData: CSSM_DB_ATTRIBUTE_DATA_PTR,
};
pub const CSSM_DB_RECORD_ATTRIBUTE_DATA = struct_cssm_db_record_attribute_data;
pub const CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR = [*c]struct_cssm_db_record_attribute_data;
pub const struct_cssm_db_parsing_module_info = extern struct {
    RecordType: CSSM_DB_RECORDTYPE,
    ModuleSubserviceUid: CSSM_SUBSERVICE_UID,
};
pub const CSSM_DB_PARSING_MODULE_INFO = struct_cssm_db_parsing_module_info;
pub const CSSM_DB_PARSING_MODULE_INFO_PTR = [*c]struct_cssm_db_parsing_module_info;
pub const CSSM_DB_INDEX_TYPE = uint32;
pub const CSSM_DB_INDEX_UNIQUE: c_int = 0;
pub const CSSM_DB_INDEX_NONUNIQUE: c_int = 1;
const enum_unnamed_1028 = c_uint;
pub const CSSM_DB_INDEXED_DATA_LOCATION = uint32;
pub const CSSM_DB_INDEX_ON_UNKNOWN: c_int = 0;
pub const CSSM_DB_INDEX_ON_ATTRIBUTE: c_int = 1;
pub const CSSM_DB_INDEX_ON_RECORD: c_int = 2;
const enum_unnamed_1029 = c_uint;
pub const struct_cssm_db_index_info = extern struct {
    IndexType: CSSM_DB_INDEX_TYPE,
    IndexedDataLocation: CSSM_DB_INDEXED_DATA_LOCATION,
    Info: CSSM_DB_ATTRIBUTE_INFO,
};
pub const CSSM_DB_INDEX_INFO = struct_cssm_db_index_info;
pub const CSSM_DB_INDEX_INFO_PTR = [*c]struct_cssm_db_index_info;
pub const struct_cssm_db_unique_record = extern struct {
    RecordLocator: CSSM_DB_INDEX_INFO,
    RecordIdentifier: SecAsn1Item,
};
pub const CSSM_DB_UNIQUE_RECORD = struct_cssm_db_unique_record;
pub const CSSM_DB_UNIQUE_RECORD_PTR = [*c]struct_cssm_db_unique_record;
pub const struct_cssm_db_record_index_info = extern struct {
    DataRecordType: CSSM_DB_RECORDTYPE,
    NumberOfIndexes: uint32,
    IndexInfo: CSSM_DB_INDEX_INFO_PTR,
};
pub const CSSM_DB_RECORD_INDEX_INFO = struct_cssm_db_record_index_info;
pub const CSSM_DB_RECORD_INDEX_INFO_PTR = [*c]struct_cssm_db_record_index_info;
pub const CSSM_DB_ACCESS_TYPE = uint32;
pub const CSSM_DB_ACCESS_TYPE_PTR = [*c]uint32;
pub const CSSM_DB_ACCESS_READ: c_int = 1;
pub const CSSM_DB_ACCESS_WRITE: c_int = 2;
pub const CSSM_DB_ACCESS_PRIVILEGED: c_int = 4;
const enum_unnamed_1030 = c_uint;
pub const CSSM_DB_MODIFY_MODE = uint32;
pub const CSSM_DB_MODIFY_ATTRIBUTE_NONE: c_int = 0;
pub const CSSM_DB_MODIFY_ATTRIBUTE_ADD: c_int = 1;
pub const CSSM_DB_MODIFY_ATTRIBUTE_DELETE: c_int = 2;
pub const CSSM_DB_MODIFY_ATTRIBUTE_REPLACE: c_int = 3;
const enum_unnamed_1031 = c_uint;
pub const struct_cssm_dbinfo = extern struct {
    NumberOfRecordTypes: uint32,
    DefaultParsingModules: CSSM_DB_PARSING_MODULE_INFO_PTR,
    RecordAttributeNames: CSSM_DB_RECORD_ATTRIBUTE_INFO_PTR,
    RecordIndexes: CSSM_DB_RECORD_INDEX_INFO_PTR,
    IsLocal: CSSM_BOOL,
    AccessPath: [*c]u8,
    Reserved: ?*anyopaque,
};
pub const CSSM_DBINFO = struct_cssm_dbinfo;
pub const CSSM_DBINFO_PTR = [*c]struct_cssm_dbinfo;
pub const CSSM_DB_OPERATOR = uint32;
pub const CSSM_DB_OPERATOR_PTR = [*c]uint32;
pub const CSSM_DB_EQUAL: c_int = 0;
pub const CSSM_DB_NOT_EQUAL: c_int = 1;
pub const CSSM_DB_LESS_THAN: c_int = 2;
pub const CSSM_DB_GREATER_THAN: c_int = 3;
pub const CSSM_DB_CONTAINS: c_int = 4;
pub const CSSM_DB_CONTAINS_INITIAL_SUBSTRING: c_int = 5;
pub const CSSM_DB_CONTAINS_FINAL_SUBSTRING: c_int = 6;
const enum_unnamed_1032 = c_uint;
pub const CSSM_DB_CONJUNCTIVE = uint32;
pub const CSSM_DB_CONJUNCTIVE_PTR = [*c]uint32;
pub const CSSM_DB_NONE: c_int = 0;
pub const CSSM_DB_AND: c_int = 1;
pub const CSSM_DB_OR: c_int = 2;
const enum_unnamed_1033 = c_uint;
pub const struct_cssm_selection_predicate = extern struct {
    DbOperator: CSSM_DB_OPERATOR,
    Attribute: CSSM_DB_ATTRIBUTE_DATA,
};
pub const CSSM_SELECTION_PREDICATE = struct_cssm_selection_predicate;
pub const CSSM_SELECTION_PREDICATE_PTR = [*c]struct_cssm_selection_predicate;
pub const CSSM_QUERY_TIMELIMIT_NONE: c_int = 0;
const enum_unnamed_1034 = c_uint;
pub const CSSM_QUERY_SIZELIMIT_NONE: c_int = 0;
const enum_unnamed_1035 = c_uint;
pub const struct_cssm_query_limits = extern struct {
    TimeLimit: uint32,
    SizeLimit: uint32,
};
pub const CSSM_QUERY_LIMITS = struct_cssm_query_limits;
pub const CSSM_QUERY_LIMITS_PTR = [*c]struct_cssm_query_limits;
pub const CSSM_QUERY_FLAGS = uint32;
pub const CSSM_QUERY_RETURN_DATA: c_int = 1;
const enum_unnamed_1036 = c_uint;
pub const struct_cssm_query = extern struct {
    RecordType: CSSM_DB_RECORDTYPE,
    Conjunctive: CSSM_DB_CONJUNCTIVE,
    NumSelectionPredicates: uint32,
    SelectionPredicate: CSSM_SELECTION_PREDICATE_PTR,
    QueryLimits: CSSM_QUERY_LIMITS,
    QueryFlags: CSSM_QUERY_FLAGS,
};
pub const CSSM_QUERY = struct_cssm_query;
pub const CSSM_QUERY_PTR = [*c]struct_cssm_query;
pub const CSSM_DLTYPE = uint32;
pub const CSSM_DLTYPE_PTR = [*c]uint32;
pub const CSSM_DL_UNKNOWN: c_int = 0;
pub const CSSM_DL_CUSTOM: c_int = 1;
pub const CSSM_DL_LDAP: c_int = 2;
pub const CSSM_DL_ODBC: c_int = 3;
pub const CSSM_DL_PKCS11: c_int = 4;
pub const CSSM_DL_FFS: c_int = 5;
pub const CSSM_DL_MEMORY: c_int = 6;
pub const CSSM_DL_REMOTEDIR: c_int = 7;
const enum_unnamed_1037 = c_uint;
pub const CSSM_DL_CUSTOM_ATTRIBUTES = ?*anyopaque;
pub const CSSM_DL_LDAP_ATTRIBUTES = ?*anyopaque;
pub const CSSM_DL_ODBC_ATTRIBUTES = ?*anyopaque;
pub const CSSM_DL_FFS_ATTRIBUTES = ?*anyopaque;
pub const struct_cssm_dl_pkcs11_attributes = extern struct {
    DeviceAccessFlags: uint32,
};
pub const CSSM_DL_PKCS11_ATTRIBUTE = [*c]struct_cssm_dl_pkcs11_attributes;
pub const CSSM_DL_PKCS11_ATTRIBUTE_PTR = [*c]struct_cssm_dl_pkcs11_attributes;
pub const CSSM_DB_DATASTORES_UNKNOWN: c_uint = 4294967295;
const enum_unnamed_1038 = c_uint;
pub const struct_cssm_name_list = extern struct {
    NumStrings: uint32,
    String: [*c][*c]u8,
};
pub const CSSM_NAME_LIST = struct_cssm_name_list;
pub const CSSM_NAME_LIST_PTR = [*c]struct_cssm_name_list;
pub const CSSM_DB_RETRIEVAL_MODES = uint32;
pub const CSSM_DB_TRANSACTIONAL_MODE: c_int = 0;
pub const CSSM_DB_FILESYSTEMSCAN_MODE: c_int = 1;
const enum_unnamed_1039 = c_uint;
pub const struct_cssm_db_schema_attribute_info = extern struct {
    AttributeId: uint32,
    AttributeName: [*c]u8,
    AttributeNameID: SecAsn1Oid,
    DataType: CSSM_DB_ATTRIBUTE_FORMAT,
};
pub const CSSM_DB_SCHEMA_ATTRIBUTE_INFO = struct_cssm_db_schema_attribute_info;
pub const CSSM_DB_SCHEMA_ATTRIBUTE_INFO_PTR = [*c]struct_cssm_db_schema_attribute_info;
pub const struct_cssm_db_schema_index_info = extern struct {
    AttributeId: uint32,
    IndexId: uint32,
    IndexType: CSSM_DB_INDEX_TYPE,
    IndexedDataLocation: CSSM_DB_INDEXED_DATA_LOCATION,
};
pub const CSSM_DB_SCHEMA_INDEX_INFO = struct_cssm_db_schema_index_info;
pub const CSSM_DB_SCHEMA_INDEX_INFO_PTR = [*c]struct_cssm_db_schema_index_info;
pub const CSSM_BER_TAG = uint8;
pub const CSSM_X509_ALGORITHM_IDENTIFIER_PTR = [*c]SecAsn1AlgId;
pub const struct_cssm_x509_type_value_pair = extern struct {
    type: SecAsn1Oid,
    valueType: CSSM_BER_TAG,
    value: SecAsn1Item,
};
pub const CSSM_X509_TYPE_VALUE_PAIR = struct_cssm_x509_type_value_pair;
pub const CSSM_X509_TYPE_VALUE_PAIR_PTR = [*c]struct_cssm_x509_type_value_pair;
pub const struct_cssm_x509_rdn = extern struct {
    numberOfPairs: uint32,
    AttributeTypeAndValue: CSSM_X509_TYPE_VALUE_PAIR_PTR,
};
pub const CSSM_X509_RDN = struct_cssm_x509_rdn;
pub const CSSM_X509_RDN_PTR = [*c]struct_cssm_x509_rdn;
pub const struct_cssm_x509_name = extern struct {
    numberOfRDNs: uint32,
    RelativeDistinguishedName: CSSM_X509_RDN_PTR,
};
pub const CSSM_X509_NAME = struct_cssm_x509_name;
pub const CSSM_X509_NAME_PTR = [*c]struct_cssm_x509_name;
pub const CSSM_X509_SUBJECT_PUBLIC_KEY_INFO_PTR = [*c]SecAsn1PubKeyInfo;
pub const struct_cssm_x509_time = extern struct {
    timeType: CSSM_BER_TAG,
    time: SecAsn1Item,
};
pub const CSSM_X509_TIME = struct_cssm_x509_time;
pub const CSSM_X509_TIME_PTR = [*c]struct_cssm_x509_time;
pub const struct_x509_validity = extern struct {
    notBefore: CSSM_X509_TIME,
    notAfter: CSSM_X509_TIME,
};
pub const CSSM_X509_VALIDITY = struct_x509_validity;
pub const CSSM_X509_VALIDITY_PTR = [*c]struct_x509_validity;
pub const CSSM_X509_OPTION = CSSM_BOOL;
pub const struct_cssm_x509ext_basicConstraints = extern struct {
    cA: CSSM_BOOL,
    pathLenConstraintPresent: CSSM_X509_OPTION,
    pathLenConstraint: uint32,
};
pub const CSSM_X509EXT_BASICCONSTRAINTS = struct_cssm_x509ext_basicConstraints;
pub const CSSM_X509EXT_BASICCONSTRAINTS_PTR = [*c]struct_cssm_x509ext_basicConstraints;
pub const CSSM_X509_DATAFORMAT_ENCODED: c_int = 0;
pub const CSSM_X509_DATAFORMAT_PARSED: c_int = 1;
pub const CSSM_X509_DATAFORMAT_PAIR: c_int = 2;
pub const enum_extension_data_format = c_uint;
pub const CSSM_X509EXT_DATA_FORMAT = enum_extension_data_format;
pub const struct_cssm_x509_extensionTagAndValue = extern struct {
    type: CSSM_BER_TAG,
    value: SecAsn1Item,
};
pub const CSSM_X509EXT_TAGandVALUE = struct_cssm_x509_extensionTagAndValue;
pub const CSSM_X509EXT_TAGandVALUE_PTR = [*c]struct_cssm_x509_extensionTagAndValue;
pub const struct_cssm_x509ext_pair = extern struct {
    tagAndValue: CSSM_X509EXT_TAGandVALUE,
    parsedValue: ?*anyopaque,
};
pub const CSSM_X509EXT_PAIR = struct_cssm_x509ext_pair;
pub const CSSM_X509EXT_PAIR_PTR = [*c]struct_cssm_x509ext_pair;
pub const union_cssm_x509ext_value = extern union {
    tagAndValue: [*c]CSSM_X509EXT_TAGandVALUE,
    parsedValue: ?*anyopaque,
    valuePair: [*c]CSSM_X509EXT_PAIR,
};
pub const struct_cssm_x509_extension = extern struct {
    extnId: SecAsn1Oid,
    critical: CSSM_BOOL,
    format: CSSM_X509EXT_DATA_FORMAT,
    value: union_cssm_x509ext_value,
    BERvalue: SecAsn1Item,
};
pub const CSSM_X509_EXTENSION = struct_cssm_x509_extension;
pub const CSSM_X509_EXTENSION_PTR = [*c]struct_cssm_x509_extension;
pub const struct_cssm_x509_extensions = extern struct {
    numberOfExtensions: uint32,
    extensions: CSSM_X509_EXTENSION_PTR,
};
pub const CSSM_X509_EXTENSIONS = struct_cssm_x509_extensions;
pub const CSSM_X509_EXTENSIONS_PTR = [*c]struct_cssm_x509_extensions;
pub const struct_cssm_x509_tbs_certificate = extern struct {
    version: SecAsn1Item,
    serialNumber: SecAsn1Item,
    signature: SecAsn1AlgId,
    issuer: CSSM_X509_NAME,
    validity: CSSM_X509_VALIDITY,
    subject: CSSM_X509_NAME,
    subjectPublicKeyInfo: SecAsn1PubKeyInfo,
    issuerUniqueIdentifier: SecAsn1Item,
    subjectUniqueIdentifier: SecAsn1Item,
    extensions: CSSM_X509_EXTENSIONS,
};
pub const CSSM_X509_TBS_CERTIFICATE = struct_cssm_x509_tbs_certificate;
pub const CSSM_X509_TBS_CERTIFICATE_PTR = [*c]struct_cssm_x509_tbs_certificate;
pub const struct_cssm_x509_signature = extern struct {
    algorithmIdentifier: SecAsn1AlgId,
    encrypted: SecAsn1Item,
};
pub const CSSM_X509_SIGNATURE = struct_cssm_x509_signature;
pub const CSSM_X509_SIGNATURE_PTR = [*c]struct_cssm_x509_signature;
pub const struct_cssm_x509_signed_certificate = extern struct {
    certificate: CSSM_X509_TBS_CERTIFICATE,
    signature: CSSM_X509_SIGNATURE,
};
pub const CSSM_X509_SIGNED_CERTIFICATE = struct_cssm_x509_signed_certificate;
pub const CSSM_X509_SIGNED_CERTIFICATE_PTR = [*c]struct_cssm_x509_signed_certificate;
pub const struct_cssm_x509ext_policyQualifierInfo = extern struct {
    policyQualifierId: SecAsn1Oid,
    value: SecAsn1Item,
};
pub const CSSM_X509EXT_POLICYQUALIFIERINFO = struct_cssm_x509ext_policyQualifierInfo;
pub const CSSM_X509EXT_POLICYQUALIFIERINFO_PTR = [*c]struct_cssm_x509ext_policyQualifierInfo;
pub const struct_cssm_x509ext_policyQualifiers = extern struct {
    numberOfPolicyQualifiers: uint32,
    policyQualifier: [*c]CSSM_X509EXT_POLICYQUALIFIERINFO,
};
pub const CSSM_X509EXT_POLICYQUALIFIERS = struct_cssm_x509ext_policyQualifiers;
pub const CSSM_X509EXT_POLICYQUALIFIERS_PTR = [*c]struct_cssm_x509ext_policyQualifiers;
pub const struct_cssm_x509ext_policyInfo = extern struct {
    policyIdentifier: SecAsn1Oid,
    policyQualifiers: CSSM_X509EXT_POLICYQUALIFIERS,
};
pub const CSSM_X509EXT_POLICYINFO = struct_cssm_x509ext_policyInfo;
pub const CSSM_X509EXT_POLICYINFO_PTR = [*c]struct_cssm_x509ext_policyInfo;
pub const struct_cssm_x509_revoked_cert_entry = extern struct {
    certificateSerialNumber: SecAsn1Item,
    revocationDate: CSSM_X509_TIME,
    extensions: CSSM_X509_EXTENSIONS,
};
pub const CSSM_X509_REVOKED_CERT_ENTRY = struct_cssm_x509_revoked_cert_entry;
pub const CSSM_X509_REVOKED_CERT_ENTRY_PTR = [*c]struct_cssm_x509_revoked_cert_entry;
pub const struct_cssm_x509_revoked_cert_list = extern struct {
    numberOfRevokedCertEntries: uint32,
    revokedCertEntry: CSSM_X509_REVOKED_CERT_ENTRY_PTR,
};
pub const CSSM_X509_REVOKED_CERT_LIST = struct_cssm_x509_revoked_cert_list;
pub const CSSM_X509_REVOKED_CERT_LIST_PTR = [*c]struct_cssm_x509_revoked_cert_list;
pub const struct_cssm_x509_tbs_certlist = extern struct {
    version: SecAsn1Item,
    signature: SecAsn1AlgId,
    issuer: CSSM_X509_NAME,
    thisUpdate: CSSM_X509_TIME,
    nextUpdate: CSSM_X509_TIME,
    revokedCertificates: CSSM_X509_REVOKED_CERT_LIST_PTR,
    extensions: CSSM_X509_EXTENSIONS,
};
pub const CSSM_X509_TBS_CERTLIST = struct_cssm_x509_tbs_certlist;
pub const CSSM_X509_TBS_CERTLIST_PTR = [*c]struct_cssm_x509_tbs_certlist;
pub const struct_cssm_x509_signed_crl = extern struct {
    tbsCertList: CSSM_X509_TBS_CERTLIST,
    signature: CSSM_X509_SIGNATURE,
};
pub const CSSM_X509_SIGNED_CRL = struct_cssm_x509_signed_crl;
pub const CSSM_X509_SIGNED_CRL_PTR = [*c]struct_cssm_x509_signed_crl;
pub extern fn SecCertificateGetTypeID() CFTypeID;
pub extern fn SecCertificateCreateWithData(allocator: CFAllocatorRef, data: CFDataRef) SecCertificateRef;
pub extern fn SecCertificateCopyData(certificate: SecCertificateRef) CFDataRef;
pub extern fn SecCertificateCopySubjectSummary(certificate: SecCertificateRef) CFStringRef;
pub extern fn SecCertificateCopyCommonName(certificate: SecCertificateRef, commonName: [*c]CFStringRef) OSStatus;
pub extern fn SecCertificateCopyEmailAddresses(certificate: SecCertificateRef, emailAddresses: [*c]CFArrayRef) OSStatus;
pub extern fn SecCertificateCopyNormalizedIssuerSequence(certificate: SecCertificateRef) CFDataRef;
pub extern fn SecCertificateCopyNormalizedSubjectSequence(certificate: SecCertificateRef) CFDataRef;
pub extern fn SecCertificateCopyKey(certificate: SecCertificateRef) SecKeyRef;
pub extern fn SecCertificateCopyPublicKey(certificate: SecCertificateRef, key: [*c]SecKeyRef) OSStatus;
pub extern fn SecCertificateCopySerialNumberData(certificate: SecCertificateRef, @"error": [*c]CFErrorRef) CFDataRef;
pub extern fn SecCertificateCopySerialNumber(certificate: SecCertificateRef, @"error": [*c]CFErrorRef) CFDataRef;
pub const kSecSubjectItemAttr: c_int = 1937072746;
pub const kSecIssuerItemAttr: c_int = 1769173877;
pub const kSecSerialNumberItemAttr: c_int = 1936614002;
pub const kSecPublicKeyHashItemAttr: c_int = 1752198009;
pub const kSecSubjectKeyIdentifierItemAttr: c_int = 1936419172;
pub const kSecCertTypeItemAttr: c_int = 1668577648;
pub const kSecCertEncodingItemAttr: c_int = 1667591779;
const enum_unnamed_1040 = c_uint;
pub extern fn SecCertificateCreateFromData(data: [*c]const SecAsn1Item, @"type": CSSM_CERT_TYPE, encoding: CSSM_CERT_ENCODING, certificate: [*c]SecCertificateRef) OSStatus;
pub extern fn SecCertificateAddToKeychain(certificate: SecCertificateRef, keychain: SecKeychainRef) OSStatus;
pub extern fn SecCertificateGetData(certificate: SecCertificateRef, data: CSSM_DATA_PTR) OSStatus;
pub extern fn SecCertificateGetType(certificate: SecCertificateRef, certificateType: [*c]CSSM_CERT_TYPE) OSStatus;
pub extern fn SecCertificateGetSubject(certificate: SecCertificateRef, subject: [*c][*c]const CSSM_X509_NAME) OSStatus;
pub extern fn SecCertificateGetIssuer(certificate: SecCertificateRef, issuer: [*c][*c]const CSSM_X509_NAME) OSStatus;
pub extern fn SecCertificateGetCLHandle(certificate: SecCertificateRef, clHandle: [*c]CSSM_CL_HANDLE) OSStatus;
pub extern fn SecCertificateGetAlgorithmID(certificate: SecCertificateRef, algid: [*c][*c]const SecAsn1AlgId) OSStatus;
pub extern fn SecCertificateCopyPreference(name: CFStringRef, keyUsage: uint32, certificate: [*c]SecCertificateRef) OSStatus;
pub extern fn SecCertificateCopyPreferred(name: CFStringRef, keyUsage: CFArrayRef) SecCertificateRef;
pub extern fn SecCertificateSetPreference(certificate: SecCertificateRef, name: CFStringRef, keyUsage: uint32, date: CFDateRef) OSStatus;
pub extern fn SecCertificateSetPreferred(certificate: SecCertificateRef, name: CFStringRef, keyUsage: CFArrayRef) OSStatus;
pub const SecKeyUsage = u32;
pub const kSecKeyUsageUnspecified: c_int = 0;
pub const kSecKeyUsageDigitalSignature: c_int = 1;
pub const kSecKeyUsageNonRepudiation: c_int = 2;
pub const kSecKeyUsageContentCommitment: c_int = 2;
pub const kSecKeyUsageKeyEncipherment: c_int = 4;
pub const kSecKeyUsageDataEncipherment: c_int = 8;
pub const kSecKeyUsageKeyAgreement: c_int = 16;
pub const kSecKeyUsageKeyCertSign: c_int = 32;
pub const kSecKeyUsageCRLSign: c_int = 64;
pub const kSecKeyUsageEncipherOnly: c_int = 128;
pub const kSecKeyUsageDecipherOnly: c_int = 256;
pub const kSecKeyUsageCritical: c_uint = 2147483648;
pub const kSecKeyUsageAll: c_int = 2147483647;
const enum_unnamed_1041 = c_uint;
pub extern const kSecPropertyKeyType: CFStringRef;
pub extern const kSecPropertyKeyLabel: CFStringRef;
pub extern const kSecPropertyKeyLocalizedLabel: CFStringRef;
pub extern const kSecPropertyKeyValue: CFStringRef;
pub extern const kSecPropertyTypeWarning: CFStringRef;
pub extern const kSecPropertyTypeSuccess: CFStringRef;
pub extern const kSecPropertyTypeSection: CFStringRef;
pub extern const kSecPropertyTypeData: CFStringRef;
pub extern const kSecPropertyTypeString: CFStringRef;
pub extern const kSecPropertyTypeURL: CFStringRef;
pub extern const kSecPropertyTypeDate: CFStringRef;
pub extern const kSecPropertyTypeArray: CFStringRef;
pub extern const kSecPropertyTypeNumber: CFStringRef;
pub extern fn SecCertificateCopyValues(certificate: SecCertificateRef, keys: CFArrayRef, @"error": [*c]CFErrorRef) CFDictionaryRef;
pub extern fn SecCertificateCopyLongDescription(alloc: CFAllocatorRef, certificate: SecCertificateRef, @"error": [*c]CFErrorRef) CFStringRef;
pub extern fn SecCertificateCopyShortDescription(alloc: CFAllocatorRef, certificate: SecCertificateRef, @"error": [*c]CFErrorRef) CFStringRef;
pub extern fn SecCertificateCopyNormalizedIssuerContent(certificate: SecCertificateRef, @"error": [*c]CFErrorRef) CFDataRef;
pub extern fn SecCertificateCopyNormalizedSubjectContent(certificate: SecCertificateRef, @"error": [*c]CFErrorRef) CFDataRef;
pub extern fn SecIdentityGetTypeID() CFTypeID;
pub extern fn SecIdentityCreateWithCertificate(keychainOrArray: CFTypeRef, certificateRef: SecCertificateRef, identityRef: [*c]SecIdentityRef) OSStatus;
pub extern fn SecIdentityCopyCertificate(identityRef: SecIdentityRef, certificateRef: [*c]SecCertificateRef) OSStatus;
pub extern fn SecIdentityCopyPrivateKey(identityRef: SecIdentityRef, privateKeyRef: [*c]SecKeyRef) OSStatus;
pub extern fn SecIdentityCopyPreference(name: CFStringRef, keyUsage: CSSM_KEYUSE, validIssuers: CFArrayRef, identity: [*c]SecIdentityRef) OSStatus;
pub extern fn SecIdentityCopyPreferred(name: CFStringRef, keyUsage: CFArrayRef, validIssuers: CFArrayRef) SecIdentityRef;
pub extern fn SecIdentitySetPreference(identity: SecIdentityRef, name: CFStringRef, keyUsage: CSSM_KEYUSE) OSStatus;
pub extern fn SecIdentitySetPreferred(identity: SecIdentityRef, name: CFStringRef, keyUsage: CFArrayRef) OSStatus;
pub extern fn SecIdentityCopySystemIdentity(domain: CFStringRef, idRef: [*c]SecIdentityRef, actualDomain: [*c]CFStringRef) OSStatus;
pub extern fn SecIdentitySetSystemIdentity(domain: CFStringRef, idRef: SecIdentityRef) OSStatus;
pub extern const kSecIdentityDomainDefault: CFStringRef;
pub extern const kSecIdentityDomainKerberosKDC: CFStringRef;
pub extern fn SecAccessControlGetTypeID() CFTypeID;
pub const SecAccessControlCreateFlags = CFOptionFlags;
pub const kSecAccessControlUserPresence: c_int = 1;
pub const kSecAccessControlBiometryAny: c_int = 2;
pub const kSecAccessControlTouchIDAny: c_int = 2;
pub const kSecAccessControlBiometryCurrentSet: c_int = 8;
pub const kSecAccessControlTouchIDCurrentSet: c_int = 8;
pub const kSecAccessControlDevicePasscode: c_int = 16;
pub const kSecAccessControlWatch: c_int = 32;
pub const kSecAccessControlOr: c_int = 16384;
pub const kSecAccessControlAnd: c_int = 32768;
pub const kSecAccessControlPrivateKeyUsage: c_int = 1073741824;
pub const kSecAccessControlApplicationPassword: c_uint = 2147483648;
const enum_unnamed_1042 = c_uint;
pub extern fn SecAccessControlCreateWithFlags(allocator: CFAllocatorRef, protection: CFTypeRef, flags: SecAccessControlCreateFlags, @"error": [*c]CFErrorRef) SecAccessControlRef;
pub extern const kSecClass: CFStringRef;
pub extern const kSecClassInternetPassword: CFStringRef;
pub extern const kSecClassGenericPassword: CFStringRef;
pub extern const kSecClassCertificate: CFStringRef;
pub extern const kSecClassKey: CFStringRef;
pub extern const kSecClassIdentity: CFStringRef;
pub extern const kSecAttrAccessible: CFStringRef;
pub extern const kSecAttrAccess: CFStringRef;
pub extern const kSecAttrAccessControl: CFStringRef;
pub extern const kSecAttrAccessGroup: CFStringRef;
pub extern const kSecAttrSynchronizable: CFStringRef;
pub extern const kSecAttrSynchronizableAny: CFStringRef;
pub extern const kSecAttrCreationDate: CFStringRef;
pub extern const kSecAttrModificationDate: CFStringRef;
pub extern const kSecAttrDescription: CFStringRef;
pub extern const kSecAttrComment: CFStringRef;
pub extern const kSecAttrCreator: CFStringRef;
pub extern const kSecAttrType: CFStringRef;
pub extern const kSecAttrLabel: CFStringRef;
pub extern const kSecAttrIsInvisible: CFStringRef;
pub extern const kSecAttrIsNegative: CFStringRef;
pub extern const kSecAttrAccount: CFStringRef;
pub extern const kSecAttrService: CFStringRef;
pub extern const kSecAttrGeneric: CFStringRef;
pub extern const kSecAttrSecurityDomain: CFStringRef;
pub extern const kSecAttrServer: CFStringRef;
pub extern const kSecAttrProtocol: CFStringRef;
pub extern const kSecAttrAuthenticationType: CFStringRef;
pub extern const kSecAttrPort: CFStringRef;
pub extern const kSecAttrPath: CFStringRef;
pub extern const kSecAttrSubject: CFStringRef;
pub extern const kSecAttrIssuer: CFStringRef;
pub extern const kSecAttrSerialNumber: CFStringRef;
pub extern const kSecAttrSubjectKeyID: CFStringRef;
pub extern const kSecAttrPublicKeyHash: CFStringRef;
pub extern const kSecAttrCertificateType: CFStringRef;
pub extern const kSecAttrCertificateEncoding: CFStringRef;
pub extern const kSecAttrKeyClass: CFStringRef;
pub extern const kSecAttrApplicationLabel: CFStringRef;
pub extern const kSecAttrIsPermanent: CFStringRef;
pub extern const kSecAttrIsSensitive: CFStringRef;
pub extern const kSecAttrIsExtractable: CFStringRef;
pub extern const kSecAttrApplicationTag: CFStringRef;
pub extern const kSecAttrKeyType: CFStringRef;
pub extern const kSecAttrPRF: CFStringRef;
pub extern const kSecAttrSalt: CFStringRef;
pub extern const kSecAttrRounds: CFStringRef;
pub extern const kSecAttrKeySizeInBits: CFStringRef;
pub extern const kSecAttrEffectiveKeySize: CFStringRef;
pub extern const kSecAttrCanEncrypt: CFStringRef;
pub extern const kSecAttrCanDecrypt: CFStringRef;
pub extern const kSecAttrCanDerive: CFStringRef;
pub extern const kSecAttrCanSign: CFStringRef;
pub extern const kSecAttrCanVerify: CFStringRef;
pub extern const kSecAttrCanWrap: CFStringRef;
pub extern const kSecAttrCanUnwrap: CFStringRef;
pub extern const kSecAttrSyncViewHint: CFStringRef;
pub extern const kSecAttrTokenID: CFStringRef;
pub extern const kSecAttrPersistantReference: CFStringRef;
pub extern const kSecAttrPersistentReference: CFStringRef;
pub extern const kSecAttrAccessibleWhenUnlocked: CFStringRef;
pub extern const kSecAttrAccessibleAfterFirstUnlock: CFStringRef;
pub extern const kSecAttrAccessibleAlways: CFStringRef;
pub extern const kSecAttrAccessibleWhenPasscodeSetThisDeviceOnly: CFStringRef;
pub extern const kSecAttrAccessibleWhenUnlockedThisDeviceOnly: CFStringRef;
pub extern const kSecAttrAccessibleAfterFirstUnlockThisDeviceOnly: CFStringRef;
pub extern const kSecAttrAccessibleAlwaysThisDeviceOnly: CFStringRef;
pub extern const kSecAttrProtocolFTP: CFStringRef;
pub extern const kSecAttrProtocolFTPAccount: CFStringRef;
pub extern const kSecAttrProtocolHTTP: CFStringRef;
pub extern const kSecAttrProtocolIRC: CFStringRef;
pub extern const kSecAttrProtocolNNTP: CFStringRef;
pub extern const kSecAttrProtocolPOP3: CFStringRef;
pub extern const kSecAttrProtocolSMTP: CFStringRef;
pub extern const kSecAttrProtocolSOCKS: CFStringRef;
pub extern const kSecAttrProtocolIMAP: CFStringRef;
pub extern const kSecAttrProtocolLDAP: CFStringRef;
pub extern const kSecAttrProtocolAppleTalk: CFStringRef;
pub extern const kSecAttrProtocolAFP: CFStringRef;
pub extern const kSecAttrProtocolTelnet: CFStringRef;
pub extern const kSecAttrProtocolSSH: CFStringRef;
pub extern const kSecAttrProtocolFTPS: CFStringRef;
pub extern const kSecAttrProtocolHTTPS: CFStringRef;
pub extern const kSecAttrProtocolHTTPProxy: CFStringRef;
pub extern const kSecAttrProtocolHTTPSProxy: CFStringRef;
pub extern const kSecAttrProtocolFTPProxy: CFStringRef;
pub extern const kSecAttrProtocolSMB: CFStringRef;
pub extern const kSecAttrProtocolRTSP: CFStringRef;
pub extern const kSecAttrProtocolRTSPProxy: CFStringRef;
pub extern const kSecAttrProtocolDAAP: CFStringRef;
pub extern const kSecAttrProtocolEPPC: CFStringRef;
pub extern const kSecAttrProtocolIPP: CFStringRef;
pub extern const kSecAttrProtocolNNTPS: CFStringRef;
pub extern const kSecAttrProtocolLDAPS: CFStringRef;
pub extern const kSecAttrProtocolTelnetS: CFStringRef;
pub extern const kSecAttrProtocolIMAPS: CFStringRef;
pub extern const kSecAttrProtocolIRCS: CFStringRef;
pub extern const kSecAttrProtocolPOP3S: CFStringRef;
pub extern const kSecAttrAuthenticationTypeNTLM: CFStringRef;
pub extern const kSecAttrAuthenticationTypeMSN: CFStringRef;
pub extern const kSecAttrAuthenticationTypeDPA: CFStringRef;
pub extern const kSecAttrAuthenticationTypeRPA: CFStringRef;
pub extern const kSecAttrAuthenticationTypeHTTPBasic: CFStringRef;
pub extern const kSecAttrAuthenticationTypeHTTPDigest: CFStringRef;
pub extern const kSecAttrAuthenticationTypeHTMLForm: CFStringRef;
pub extern const kSecAttrAuthenticationTypeDefault: CFStringRef;
pub extern const kSecAttrKeyClassPublic: CFStringRef;
pub extern const kSecAttrKeyClassPrivate: CFStringRef;
pub extern const kSecAttrKeyClassSymmetric: CFStringRef;
pub extern const kSecAttrKeyTypeRSA: CFStringRef;
pub extern const kSecAttrKeyTypeDSA: CFStringRef;
pub extern const kSecAttrKeyTypeAES: CFStringRef;
pub extern const kSecAttrKeyTypeDES: CFStringRef;
pub extern const kSecAttrKeyType3DES: CFStringRef;
pub extern const kSecAttrKeyTypeRC4: CFStringRef;
pub extern const kSecAttrKeyTypeRC2: CFStringRef;
pub extern const kSecAttrKeyTypeCAST: CFStringRef;
pub extern const kSecAttrKeyTypeECDSA: CFStringRef;
pub extern const kSecAttrKeyTypeEC: CFStringRef;
pub extern const kSecAttrKeyTypeECSECPrimeRandom: CFStringRef;
pub extern const kSecAttrPRFHmacAlgSHA1: CFStringRef;
pub extern const kSecAttrPRFHmacAlgSHA224: CFStringRef;
pub extern const kSecAttrPRFHmacAlgSHA256: CFStringRef;
pub extern const kSecAttrPRFHmacAlgSHA384: CFStringRef;
pub extern const kSecAttrPRFHmacAlgSHA512: CFStringRef;
pub extern const kSecMatchPolicy: CFStringRef;
pub extern const kSecMatchItemList: CFStringRef;
pub extern const kSecMatchSearchList: CFStringRef;
pub extern const kSecMatchIssuers: CFStringRef;
pub extern const kSecMatchEmailAddressIfPresent: CFStringRef;
pub extern const kSecMatchSubjectContains: CFStringRef;
pub extern const kSecMatchSubjectStartsWith: CFStringRef;
pub extern const kSecMatchSubjectEndsWith: CFStringRef;
pub extern const kSecMatchSubjectWholeString: CFStringRef;
pub extern const kSecMatchCaseInsensitive: CFStringRef;
pub extern const kSecMatchDiacriticInsensitive: CFStringRef;
pub extern const kSecMatchWidthInsensitive: CFStringRef;
pub extern const kSecMatchTrustedOnly: CFStringRef;
pub extern const kSecMatchValidOnDate: CFStringRef;
pub extern const kSecMatchLimit: CFStringRef;
pub extern const kSecMatchLimitOne: CFStringRef;
pub extern const kSecMatchLimitAll: CFStringRef;
pub extern const kSecReturnData: CFStringRef;
pub extern const kSecReturnAttributes: CFStringRef;
pub extern const kSecReturnRef: CFStringRef;
pub extern const kSecReturnPersistentRef: CFStringRef;
pub extern const kSecValueData: CFStringRef;
pub extern const kSecValueRef: CFStringRef;
pub extern const kSecValuePersistentRef: CFStringRef;
pub extern const kSecUseItemList: CFStringRef;
pub extern const kSecUseKeychain: CFStringRef;
pub extern const kSecUseOperationPrompt: CFStringRef;
pub extern const kSecUseNoAuthenticationUI: CFStringRef;
pub extern const kSecUseAuthenticationUI: CFStringRef;
pub extern const kSecUseAuthenticationContext: CFStringRef;
pub extern const kSecUseDataProtectionKeychain: CFStringRef;
pub extern const kSecUseAuthenticationUIAllow: CFStringRef;
pub extern const kSecUseAuthenticationUIFail: CFStringRef;
pub extern const kSecUseAuthenticationUISkip: CFStringRef;
pub extern const kSecAttrTokenIDSecureEnclave: CFStringRef;
pub extern const kSecAttrAccessGroupToken: CFStringRef;
pub extern fn SecItemCopyMatching(query: CFDictionaryRef, result: [*c]CFTypeRef) OSStatus;
pub extern fn SecItemAdd(attributes: CFDictionaryRef, result: [*c]CFTypeRef) OSStatus;
pub extern fn SecItemUpdate(query: CFDictionaryRef, attributesToUpdate: CFDictionaryRef) OSStatus;
pub extern fn SecItemDelete(query: CFDictionaryRef) OSStatus;
pub const SecAccessOwnerType = UInt32;
pub const kSecUseOnlyUID: c_int = 1;
pub const kSecUseOnlyGID: c_int = 2;
pub const kSecHonorRoot: c_int = 256;
pub const kSecMatchBits: c_int = 3;
const enum_unnamed_1043 = c_uint;
pub extern const kSecACLAuthorizationAny: CFStringRef;
pub extern const kSecACLAuthorizationLogin: CFStringRef;
pub extern const kSecACLAuthorizationGenKey: CFStringRef;
pub extern const kSecACLAuthorizationDelete: CFStringRef;
pub extern const kSecACLAuthorizationExportWrapped: CFStringRef;
pub extern const kSecACLAuthorizationExportClear: CFStringRef;
pub extern const kSecACLAuthorizationImportWrapped: CFStringRef;
pub extern const kSecACLAuthorizationImportClear: CFStringRef;
pub extern const kSecACLAuthorizationSign: CFStringRef;
pub extern const kSecACLAuthorizationEncrypt: CFStringRef;
pub extern const kSecACLAuthorizationDecrypt: CFStringRef;
pub extern const kSecACLAuthorizationMAC: CFStringRef;
pub extern const kSecACLAuthorizationDerive: CFStringRef;
pub extern const kSecACLAuthorizationKeychainCreate: CFStringRef;
pub extern const kSecACLAuthorizationKeychainDelete: CFStringRef;
pub extern const kSecACLAuthorizationKeychainItemRead: CFStringRef;
pub extern const kSecACLAuthorizationKeychainItemInsert: CFStringRef;
pub extern const kSecACLAuthorizationKeychainItemModify: CFStringRef;
pub extern const kSecACLAuthorizationKeychainItemDelete: CFStringRef;
pub extern const kSecACLAuthorizationChangeACL: CFStringRef;
pub extern const kSecACLAuthorizationChangeOwner: CFStringRef;
pub extern const kSecACLAuthorizationPartitionID: CFStringRef;
pub extern const kSecACLAuthorizationIntegrity: CFStringRef;
pub extern fn SecAccessGetTypeID() CFTypeID;
pub extern fn SecAccessCreate(descriptor: CFStringRef, trustedlist: CFArrayRef, accessRef: [*c]SecAccessRef) OSStatus;
pub extern fn SecAccessCreateFromOwnerAndACL(owner: [*c]const CSSM_ACL_OWNER_PROTOTYPE, aclCount: uint32, acls: [*c]const CSSM_ACL_ENTRY_INFO, accessRef: [*c]SecAccessRef) OSStatus;
pub extern fn SecAccessCreateWithOwnerAndACL(userId: uid_t, groupId: gid_t, ownerType: SecAccessOwnerType, acls: CFArrayRef, @"error": [*c]CFErrorRef) SecAccessRef;
pub extern fn SecAccessGetOwnerAndACL(accessRef: SecAccessRef, owner: [*c]CSSM_ACL_OWNER_PROTOTYPE_PTR, aclCount: [*c]uint32, acls: [*c]CSSM_ACL_ENTRY_INFO_PTR) OSStatus;
pub extern fn SecAccessCopyOwnerAndACL(accessRef: SecAccessRef, userId: [*c]uid_t, groupId: [*c]gid_t, ownerType: [*c]SecAccessOwnerType, aclList: [*c]CFArrayRef) OSStatus;
pub extern fn SecAccessCopyACLList(accessRef: SecAccessRef, aclList: [*c]CFArrayRef) OSStatus;
pub extern fn SecAccessCopySelectedACLList(accessRef: SecAccessRef, action: CSSM_ACL_AUTHORIZATION_TAG, aclList: [*c]CFArrayRef) OSStatus;
pub extern fn SecAccessCopyMatchingACLList(accessRef: SecAccessRef, authorizationTag: CFTypeRef) CFArrayRef;
pub const kSecKeyKeyClass: c_int = 0;
pub const kSecKeyPrintName: c_int = 1;
pub const kSecKeyAlias: c_int = 2;
pub const kSecKeyPermanent: c_int = 3;
pub const kSecKeyPrivate: c_int = 4;
pub const kSecKeyModifiable: c_int = 5;
pub const kSecKeyLabel: c_int = 6;
pub const kSecKeyApplicationTag: c_int = 7;
pub const kSecKeyKeyCreator: c_int = 8;
pub const kSecKeyKeyType: c_int = 9;
pub const kSecKeyKeySizeInBits: c_int = 10;
pub const kSecKeyEffectiveKeySize: c_int = 11;
pub const kSecKeyStartDate: c_int = 12;
pub const kSecKeyEndDate: c_int = 13;
pub const kSecKeySensitive: c_int = 14;
pub const kSecKeyAlwaysSensitive: c_int = 15;
pub const kSecKeyExtractable: c_int = 16;
pub const kSecKeyNeverExtractable: c_int = 17;
pub const kSecKeyEncrypt: c_int = 18;
pub const kSecKeyDecrypt: c_int = 19;
pub const kSecKeyDerive: c_int = 20;
pub const kSecKeySign: c_int = 21;
pub const kSecKeyVerify: c_int = 22;
pub const kSecKeySignRecover: c_int = 23;
pub const kSecKeyVerifyRecover: c_int = 24;
pub const kSecKeyWrap: c_int = 25;
pub const kSecKeyUnwrap: c_int = 26;
const enum_unnamed_1044 = c_uint;
pub const SecCredentialType = uint32;
pub const kSecCredentialTypeDefault: c_int = 0;
pub const kSecCredentialTypeWithUI: c_int = 1;
pub const kSecCredentialTypeNoUI: c_int = 2;
const enum_unnamed_1045 = c_uint;
pub const SecPadding = u32;
pub const kSecPaddingNone: c_int = 0;
pub const kSecPaddingPKCS1: c_int = 1;
pub const kSecPaddingOAEP: c_int = 2;
pub const kSecPaddingSigRaw: c_int = 16384;
pub const kSecPaddingPKCS1MD2: c_int = 32768;
pub const kSecPaddingPKCS1MD5: c_int = 32769;
pub const kSecPaddingPKCS1SHA1: c_int = 32770;
pub const kSecPaddingPKCS1SHA224: c_int = 32771;
pub const kSecPaddingPKCS1SHA256: c_int = 32772;
pub const kSecPaddingPKCS1SHA384: c_int = 32773;
pub const kSecPaddingPKCS1SHA512: c_int = 32774;
const enum_unnamed_1046 = c_uint;
pub const SecKeySizes = u32;
pub const kSecDefaultKeySize: c_int = 0;
pub const kSec3DES192: c_int = 192;
pub const kSecAES128: c_int = 128;
pub const kSecAES192: c_int = 192;
pub const kSecAES256: c_int = 256;
pub const kSecp192r1: c_int = 192;
pub const kSecp256r1: c_int = 256;
pub const kSecp384r1: c_int = 384;
pub const kSecp521r1: c_int = 521;
pub const kSecRSAMin: c_int = 1024;
pub const kSecRSAMax: c_int = 4096;
const enum_unnamed_1047 = c_uint;
pub extern const kSecPrivateKeyAttrs: CFStringRef;
pub extern const kSecPublicKeyAttrs: CFStringRef;
pub extern fn SecKeyGetTypeID() CFTypeID;
pub extern fn SecKeyCreatePair(keychainRef: SecKeychainRef, algorithm: CSSM_ALGORITHMS, keySizeInBits: uint32, contextHandle: CSSM_CC_HANDLE, publicKeyUsage: CSSM_KEYUSE, publicKeyAttr: uint32, privateKeyUsage: CSSM_KEYUSE, privateKeyAttr: uint32, initialAccess: SecAccessRef, publicKey: [*c]SecKeyRef, privateKey: [*c]SecKeyRef) OSStatus;
pub extern fn SecKeyGenerate(keychainRef: SecKeychainRef, algorithm: CSSM_ALGORITHMS, keySizeInBits: uint32, contextHandle: CSSM_CC_HANDLE, keyUsage: CSSM_KEYUSE, keyAttr: uint32, initialAccess: SecAccessRef, keyRef: [*c]SecKeyRef) OSStatus;
pub extern fn SecKeyGetCSSMKey(key: SecKeyRef, cssmKey: [*c][*c]const CSSM_KEY) OSStatus;
pub extern fn SecKeyGetCSPHandle(keyRef: SecKeyRef, cspHandle: [*c]CSSM_CSP_HANDLE) OSStatus;
pub extern fn SecKeyGetCredentials(keyRef: SecKeyRef, operation: CSSM_ACL_AUTHORIZATION_TAG, credentialType: SecCredentialType, outCredentials: [*c][*c]const CSSM_ACCESS_CREDENTIALS) OSStatus;
pub extern fn SecKeyGenerateSymmetric(parameters: CFDictionaryRef, @"error": [*c]CFErrorRef) SecKeyRef;
pub extern fn SecKeyCreateFromData(parameters: CFDictionaryRef, keyData: CFDataRef, @"error": [*c]CFErrorRef) SecKeyRef; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecKey.h:455:16: warning: unsupported type: 'BlockPointer'
pub const SecKeyGeneratePairBlock = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecKey.h:455:16
pub extern fn SecKeyGeneratePairAsync(parameters: CFDictionaryRef, deliveryQueue: dispatch_queue_t, result: SecKeyGeneratePairBlock) void;
pub extern fn SecKeyDeriveFromPassword(password: CFStringRef, parameters: CFDictionaryRef, @"error": [*c]CFErrorRef) SecKeyRef;
pub extern fn SecKeyWrapSymmetric(keyToWrap: SecKeyRef, wrappingKey: SecKeyRef, parameters: CFDictionaryRef, @"error": [*c]CFErrorRef) CFDataRef;
pub extern fn SecKeyUnwrapSymmetric(keyToUnwrap: [*c]CFDataRef, unwrappingKey: SecKeyRef, parameters: CFDictionaryRef, @"error": [*c]CFErrorRef) SecKeyRef;
pub extern fn SecKeyGeneratePair(parameters: CFDictionaryRef, publicKey: [*c]SecKeyRef, privateKey: [*c]SecKeyRef) OSStatus;
pub extern fn SecKeyCreateRandomKey(parameters: CFDictionaryRef, @"error": [*c]CFErrorRef) SecKeyRef;
pub extern fn SecKeyCreateWithData(keyData: CFDataRef, attributes: CFDictionaryRef, @"error": [*c]CFErrorRef) SecKeyRef;
pub extern fn SecKeyGetBlockSize(key: SecKeyRef) usize;
pub extern fn SecKeyCopyExternalRepresentation(key: SecKeyRef, @"error": [*c]CFErrorRef) CFDataRef;
pub extern fn SecKeyCopyAttributes(key: SecKeyRef) CFDictionaryRef;
pub extern fn SecKeyCopyPublicKey(key: SecKeyRef) SecKeyRef;
pub const SecKeyAlgorithm = CFStringRef;
pub extern const kSecKeyAlgorithmRSASignatureRaw: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureDigestPKCS1v15Raw: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA1: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA224: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA256: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA384: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureDigestPKCS1v15SHA512: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA1: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA224: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA256: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA384: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureMessagePKCS1v15SHA512: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureDigestPSSSHA1: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureDigestPSSSHA224: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureDigestPSSSHA256: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureDigestPSSSHA384: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureDigestPSSSHA512: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureMessagePSSSHA1: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureMessagePSSSHA224: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureMessagePSSSHA256: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureMessagePSSSHA384: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSASignatureMessagePSSSHA512: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDSASignatureRFC4754: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDSASignatureDigestX962: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDSASignatureDigestX962SHA1: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDSASignatureDigestX962SHA224: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDSASignatureDigestX962SHA256: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDSASignatureDigestX962SHA384: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDSASignatureDigestX962SHA512: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDSASignatureMessageX962SHA1: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDSASignatureMessageX962SHA224: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDSASignatureMessageX962SHA256: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDSASignatureMessageX962SHA384: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDSASignatureMessageX962SHA512: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSAEncryptionRaw: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSAEncryptionPKCS1: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSAEncryptionOAEPSHA1: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSAEncryptionOAEPSHA224: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSAEncryptionOAEPSHA256: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSAEncryptionOAEPSHA384: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSAEncryptionOAEPSHA512: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSAEncryptionOAEPSHA1AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSAEncryptionOAEPSHA224AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSAEncryptionOAEPSHA256AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSAEncryptionOAEPSHA384AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmRSAEncryptionOAEPSHA512AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionStandardX963SHA1AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionStandardX963SHA224AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionStandardX963SHA256AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionStandardX963SHA384AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionStandardX963SHA512AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionCofactorX963SHA1AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionCofactorX963SHA224AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionCofactorX963SHA256AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionCofactorX963SHA384AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionCofactorX963SHA512AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA224AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA256AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA384AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionStandardVariableIVX963SHA512AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA224AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA256AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA384AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECIESEncryptionCofactorVariableIVX963SHA512AESGCM: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDHKeyExchangeStandard: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA1: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA224: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA256: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA384: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDHKeyExchangeStandardX963SHA512: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDHKeyExchangeCofactor: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA1: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA224: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA256: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA384: SecKeyAlgorithm;
pub extern const kSecKeyAlgorithmECDHKeyExchangeCofactorX963SHA512: SecKeyAlgorithm;
pub extern fn SecKeyCreateSignature(key: SecKeyRef, algorithm: SecKeyAlgorithm, dataToSign: CFDataRef, @"error": [*c]CFErrorRef) CFDataRef;
pub extern fn SecKeyVerifySignature(key: SecKeyRef, algorithm: SecKeyAlgorithm, signedData: CFDataRef, signature: CFDataRef, @"error": [*c]CFErrorRef) Boolean;
pub extern fn SecKeyCreateEncryptedData(key: SecKeyRef, algorithm: SecKeyAlgorithm, plaintext: CFDataRef, @"error": [*c]CFErrorRef) CFDataRef;
pub extern fn SecKeyCreateDecryptedData(key: SecKeyRef, algorithm: SecKeyAlgorithm, ciphertext: CFDataRef, @"error": [*c]CFErrorRef) CFDataRef;
pub const SecKeyKeyExchangeParameter = CFStringRef;
pub extern const kSecKeyKeyExchangeParameterRequestedSize: SecKeyKeyExchangeParameter;
pub extern const kSecKeyKeyExchangeParameterSharedInfo: SecKeyKeyExchangeParameter;
pub extern fn SecKeyCopyKeyExchangeResult(privateKey: SecKeyRef, algorithm: SecKeyAlgorithm, publicKey: SecKeyRef, parameters: CFDictionaryRef, @"error": [*c]CFErrorRef) CFDataRef;
pub const SecKeyOperationType = CFIndex;
pub const kSecKeyOperationTypeSign: c_int = 0;
pub const kSecKeyOperationTypeVerify: c_int = 1;
pub const kSecKeyOperationTypeEncrypt: c_int = 2;
pub const kSecKeyOperationTypeDecrypt: c_int = 3;
pub const kSecKeyOperationTypeKeyExchange: c_int = 4;
const enum_unnamed_1048 = c_uint;
pub extern fn SecKeyIsAlgorithmSupported(key: SecKeyRef, operation: SecKeyOperationType, algorithm: SecKeyAlgorithm) Boolean;
pub extern const kSecPolicyAppleX509Basic: CFStringRef;
pub extern const kSecPolicyAppleSSL: CFStringRef;
pub extern const kSecPolicyAppleSMIME: CFStringRef;
pub extern const kSecPolicyAppleEAP: CFStringRef;
pub extern const kSecPolicyAppleIPsec: CFStringRef;
pub extern const kSecPolicyAppleiChat: CFStringRef;
pub extern const kSecPolicyApplePKINITClient: CFStringRef;
pub extern const kSecPolicyApplePKINITServer: CFStringRef;
pub extern const kSecPolicyAppleCodeSigning: CFStringRef;
pub extern const kSecPolicyMacAppStoreReceipt: CFStringRef;
pub extern const kSecPolicyAppleIDValidation: CFStringRef;
pub extern const kSecPolicyAppleTimeStamping: CFStringRef;
pub extern const kSecPolicyAppleRevocation: CFStringRef;
pub extern const kSecPolicyApplePassbookSigning: CFStringRef;
pub extern const kSecPolicyApplePayIssuerEncryption: CFStringRef;
pub extern const kSecPolicyOid: CFStringRef;
pub extern const kSecPolicyName: CFStringRef;
pub extern const kSecPolicyClient: CFStringRef;
pub extern const kSecPolicyRevocationFlags: CFStringRef;
pub extern const kSecPolicyTeamIdentifier: CFStringRef;
pub extern fn SecPolicyGetTypeID() CFTypeID;
pub extern fn SecPolicyCopyProperties(policyRef: SecPolicyRef) CFDictionaryRef;
pub extern fn SecPolicyCreateBasicX509() SecPolicyRef;
pub extern fn SecPolicyCreateSSL(server: Boolean, hostname: CFStringRef) SecPolicyRef;
pub const kSecRevocationOCSPMethod: c_int = 1;
pub const kSecRevocationCRLMethod: c_int = 2;
pub const kSecRevocationPreferCRL: c_int = 4;
pub const kSecRevocationRequirePositiveResponse: c_int = 8;
pub const kSecRevocationNetworkAccessDisabled: c_int = 16;
pub const kSecRevocationUseAnyAvailableMethod: c_int = 3;
const enum_unnamed_1049 = c_uint;
pub extern fn SecPolicyCreateRevocation(revocationFlags: CFOptionFlags) SecPolicyRef;
pub extern fn SecPolicyCreateWithProperties(policyIdentifier: CFTypeRef, properties: CFDictionaryRef) SecPolicyRef;
pub extern const kSecPolicyKU_DigitalSignature: CFStringRef;
pub extern const kSecPolicyKU_NonRepudiation: CFStringRef;
pub extern const kSecPolicyKU_KeyEncipherment: CFStringRef;
pub extern const kSecPolicyKU_DataEncipherment: CFStringRef;
pub extern const kSecPolicyKU_KeyAgreement: CFStringRef;
pub extern const kSecPolicyKU_KeyCertSign: CFStringRef;
pub extern const kSecPolicyKU_CRLSign: CFStringRef;
pub extern const kSecPolicyKU_EncipherOnly: CFStringRef;
pub extern const kSecPolicyKU_DecipherOnly: CFStringRef;
pub extern fn SecPolicyCreateWithOID(policyOID: CFTypeRef) SecPolicyRef;
pub extern fn SecPolicyGetOID(policyRef: SecPolicyRef, oid: [*c]SecAsn1Oid) OSStatus;
pub extern fn SecPolicyGetValue(policyRef: SecPolicyRef, value: [*c]SecAsn1Item) OSStatus;
pub extern fn SecPolicySetValue(policyRef: SecPolicyRef, value: [*c]const SecAsn1Item) OSStatus;
pub extern fn SecPolicySetProperties(policyRef: SecPolicyRef, properties: CFDictionaryRef) OSStatus;
pub extern fn SecPolicyGetTPHandle(policyRef: SecPolicyRef, tpHandle: [*c]CSSM_TP_HANDLE) OSStatus;
pub const struct___SecRandom = opaque {};
pub const SecRandomRef = ?*const struct___SecRandom;
pub extern const kSecRandomDefault: SecRandomRef;
pub extern fn SecRandomCopyBytes(rnd: SecRandomRef, count: usize, bytes: ?*anyopaque) c_int;
pub const CSSM_BASE_ERROR: c_int = -2147418112;
pub const CSSM_ERRORCODE_MODULE_EXTENT: c_int = 2048;
pub const CSSM_ERRORCODE_CUSTOM_OFFSET: c_int = 1024;
pub const CSSM_ERRORCODE_COMMON_EXTENT: c_int = 256;
pub const CSSM_CSSM_BASE_ERROR: c_int = -2147418112;
pub const CSSM_CSSM_PRIVATE_ERROR: c_int = -2147417088;
pub const CSSM_CSP_BASE_ERROR: c_int = -2147416064;
pub const CSSM_CSP_PRIVATE_ERROR: c_int = -2147415040;
pub const CSSM_DL_BASE_ERROR: c_int = -2147414016;
pub const CSSM_DL_PRIVATE_ERROR: c_int = -2147412992;
pub const CSSM_CL_BASE_ERROR: c_int = -2147411968;
pub const CSSM_CL_PRIVATE_ERROR: c_int = -2147410944;
pub const CSSM_TP_BASE_ERROR: c_int = -2147409920;
pub const CSSM_TP_PRIVATE_ERROR: c_int = -2147408896;
pub const CSSM_KR_BASE_ERROR: c_int = -2147407872;
pub const CSSM_KR_PRIVATE_ERROR: c_int = -2147406848;
pub const CSSM_AC_BASE_ERROR: c_int = -2147405824;
pub const CSSM_AC_PRIVATE_ERROR: c_int = -2147404800;
const enum_unnamed_1050 = c_int;
pub const CSSM_MDS_BASE_ERROR: c_int = -2147414016;
pub const CSSM_MDS_PRIVATE_ERROR: c_int = -2147412992;
const enum_unnamed_1051 = c_int;
pub const CSSMERR_CSSM_INVALID_ADDIN_HANDLE: c_int = -2147417855;
pub const CSSMERR_CSSM_NOT_INITIALIZED: c_int = -2147417854;
pub const CSSMERR_CSSM_INVALID_HANDLE_USAGE: c_int = -2147417853;
pub const CSSMERR_CSSM_PVC_REFERENT_NOT_FOUND: c_int = -2147417852;
pub const CSSMERR_CSSM_FUNCTION_INTEGRITY_FAIL: c_int = -2147417851;
const enum_unnamed_1052 = c_int;
pub const CSSM_ERRCODE_INTERNAL_ERROR: c_int = 1;
pub const CSSM_ERRCODE_MEMORY_ERROR: c_int = 2;
pub const CSSM_ERRCODE_MDS_ERROR: c_int = 3;
pub const CSSM_ERRCODE_INVALID_POINTER: c_int = 4;
pub const CSSM_ERRCODE_INVALID_INPUT_POINTER: c_int = 5;
pub const CSSM_ERRCODE_INVALID_OUTPUT_POINTER: c_int = 6;
pub const CSSM_ERRCODE_FUNCTION_NOT_IMPLEMENTED: c_int = 7;
pub const CSSM_ERRCODE_SELF_CHECK_FAILED: c_int = 8;
pub const CSSM_ERRCODE_OS_ACCESS_DENIED: c_int = 9;
pub const CSSM_ERRCODE_FUNCTION_FAILED: c_int = 10;
pub const CSSM_ERRCODE_MODULE_MANIFEST_VERIFY_FAILED: c_int = 11;
pub const CSSM_ERRCODE_INVALID_GUID: c_int = 12;
const enum_unnamed_1053 = c_uint;
pub const CSSM_ERRCODE_OPERATION_AUTH_DENIED: c_int = 32;
pub const CSSM_ERRCODE_OBJECT_USE_AUTH_DENIED: c_int = 33;
pub const CSSM_ERRCODE_OBJECT_MANIP_AUTH_DENIED: c_int = 34;
pub const CSSM_ERRCODE_OBJECT_ACL_NOT_SUPPORTED: c_int = 35;
pub const CSSM_ERRCODE_OBJECT_ACL_REQUIRED: c_int = 36;
pub const CSSM_ERRCODE_INVALID_ACCESS_CREDENTIALS: c_int = 37;
pub const CSSM_ERRCODE_INVALID_ACL_BASE_CERTS: c_int = 38;
pub const CSSM_ERRCODE_ACL_BASE_CERTS_NOT_SUPPORTED: c_int = 39;
pub const CSSM_ERRCODE_INVALID_SAMPLE_VALUE: c_int = 40;
pub const CSSM_ERRCODE_SAMPLE_VALUE_NOT_SUPPORTED: c_int = 41;
pub const CSSM_ERRCODE_INVALID_ACL_SUBJECT_VALUE: c_int = 42;
pub const CSSM_ERRCODE_ACL_SUBJECT_TYPE_NOT_SUPPORTED: c_int = 43;
pub const CSSM_ERRCODE_INVALID_ACL_CHALLENGE_CALLBACK: c_int = 44;
pub const CSSM_ERRCODE_ACL_CHALLENGE_CALLBACK_FAILED: c_int = 45;
pub const CSSM_ERRCODE_INVALID_ACL_ENTRY_TAG: c_int = 46;
pub const CSSM_ERRCODE_ACL_ENTRY_TAG_NOT_FOUND: c_int = 47;
pub const CSSM_ERRCODE_INVALID_ACL_EDIT_MODE: c_int = 48;
pub const CSSM_ERRCODE_ACL_CHANGE_FAILED: c_int = 49;
pub const CSSM_ERRCODE_INVALID_NEW_ACL_ENTRY: c_int = 50;
pub const CSSM_ERRCODE_INVALID_NEW_ACL_OWNER: c_int = 51;
pub const CSSM_ERRCODE_ACL_DELETE_FAILED: c_int = 52;
pub const CSSM_ERRCODE_ACL_REPLACE_FAILED: c_int = 53;
pub const CSSM_ERRCODE_ACL_ADD_FAILED: c_int = 54;
const enum_unnamed_1054 = c_uint;
pub const CSSM_ERRCODE_INVALID_CONTEXT_HANDLE: c_int = 64;
pub const CSSM_ERRCODE_INCOMPATIBLE_VERSION: c_int = 65;
pub const CSSM_ERRCODE_INVALID_CERTGROUP_POINTER: c_int = 66;
pub const CSSM_ERRCODE_INVALID_CERT_POINTER: c_int = 67;
pub const CSSM_ERRCODE_INVALID_CRL_POINTER: c_int = 68;
pub const CSSM_ERRCODE_INVALID_FIELD_POINTER: c_int = 69;
pub const CSSM_ERRCODE_INVALID_DATA: c_int = 70;
pub const CSSM_ERRCODE_CRL_ALREADY_SIGNED: c_int = 71;
pub const CSSM_ERRCODE_INVALID_NUMBER_OF_FIELDS: c_int = 72;
pub const CSSM_ERRCODE_VERIFICATION_FAILURE: c_int = 73;
pub const CSSM_ERRCODE_INVALID_DB_HANDLE: c_int = 74;
pub const CSSM_ERRCODE_PRIVILEGE_NOT_GRANTED: c_int = 75;
pub const CSSM_ERRCODE_INVALID_DB_LIST: c_int = 76;
pub const CSSM_ERRCODE_INVALID_DB_LIST_POINTER: c_int = 77;
pub const CSSM_ERRCODE_UNKNOWN_FORMAT: c_int = 78;
pub const CSSM_ERRCODE_UNKNOWN_TAG: c_int = 79;
pub const CSSM_ERRCODE_INVALID_CSP_HANDLE: c_int = 80;
pub const CSSM_ERRCODE_INVALID_DL_HANDLE: c_int = 81;
pub const CSSM_ERRCODE_INVALID_CL_HANDLE: c_int = 82;
pub const CSSM_ERRCODE_INVALID_TP_HANDLE: c_int = 83;
pub const CSSM_ERRCODE_INVALID_KR_HANDLE: c_int = 84;
pub const CSSM_ERRCODE_INVALID_AC_HANDLE: c_int = 85;
pub const CSSM_ERRCODE_INVALID_PASSTHROUGH_ID: c_int = 86;
pub const CSSM_ERRCODE_INVALID_NETWORK_ADDR: c_int = 87;
pub const CSSM_ERRCODE_INVALID_CRYPTO_DATA: c_int = 88;
const enum_unnamed_1055 = c_uint;
pub const CSSMERR_CSSM_INTERNAL_ERROR: c_int = -2147418111;
pub const CSSMERR_CSSM_MEMORY_ERROR: c_int = -2147418110;
pub const CSSMERR_CSSM_MDS_ERROR: c_int = -2147418109;
pub const CSSMERR_CSSM_INVALID_POINTER: c_int = -2147418108;
pub const CSSMERR_CSSM_INVALID_INPUT_POINTER: c_int = -2147418107;
pub const CSSMERR_CSSM_INVALID_OUTPUT_POINTER: c_int = -2147418106;
pub const CSSMERR_CSSM_FUNCTION_NOT_IMPLEMENTED: c_int = -2147418105;
pub const CSSMERR_CSSM_SELF_CHECK_FAILED: c_int = -2147418104;
pub const CSSMERR_CSSM_OS_ACCESS_DENIED: c_int = -2147418103;
pub const CSSMERR_CSSM_FUNCTION_FAILED: c_int = -2147418102;
pub const CSSMERR_CSSM_MODULE_MANIFEST_VERIFY_FAILED: c_int = -2147418101;
pub const CSSMERR_CSSM_INVALID_GUID: c_int = -2147418100;
const enum_unnamed_1056 = c_int;
pub const CSSMERR_CSSM_INVALID_CONTEXT_HANDLE: c_int = -2147418048;
pub const CSSMERR_CSSM_INCOMPATIBLE_VERSION: c_int = -2147418047;
pub const CSSMERR_CSSM_PRIVILEGE_NOT_GRANTED: c_int = -2147418037;
const enum_unnamed_1057 = c_int;
pub const CSSM_CSSM_BASE_CSSM_ERROR: c_int = -2147417840;
pub const CSSMERR_CSSM_SCOPE_NOT_SUPPORTED: c_int = -2147417839;
pub const CSSMERR_CSSM_PVC_ALREADY_CONFIGURED: c_int = -2147417838;
pub const CSSMERR_CSSM_INVALID_PVC: c_int = -2147417837;
pub const CSSMERR_CSSM_EMM_LOAD_FAILED: c_int = -2147417836;
pub const CSSMERR_CSSM_EMM_UNLOAD_FAILED: c_int = -2147417835;
pub const CSSMERR_CSSM_ADDIN_LOAD_FAILED: c_int = -2147417834;
pub const CSSMERR_CSSM_INVALID_KEY_HIERARCHY: c_int = -2147417833;
pub const CSSMERR_CSSM_ADDIN_UNLOAD_FAILED: c_int = -2147417832;
pub const CSSMERR_CSSM_LIB_REF_NOT_FOUND: c_int = -2147417831;
pub const CSSMERR_CSSM_INVALID_ADDIN_FUNCTION_TABLE: c_int = -2147417830;
pub const CSSMERR_CSSM_EMM_AUTHENTICATE_FAILED: c_int = -2147417829;
pub const CSSMERR_CSSM_ADDIN_AUTHENTICATE_FAILED: c_int = -2147417828;
pub const CSSMERR_CSSM_INVALID_SERVICE_MASK: c_int = -2147417827;
pub const CSSMERR_CSSM_MODULE_NOT_LOADED: c_int = -2147417826;
pub const CSSMERR_CSSM_INVALID_SUBSERVICEID: c_int = -2147417825;
pub const CSSMERR_CSSM_BUFFER_TOO_SMALL: c_int = -2147417824;
pub const CSSMERR_CSSM_INVALID_ATTRIBUTE: c_int = -2147417823;
pub const CSSMERR_CSSM_ATTRIBUTE_NOT_IN_CONTEXT: c_int = -2147417822;
pub const CSSMERR_CSSM_MODULE_MANAGER_INITIALIZE_FAIL: c_int = -2147417821;
pub const CSSMERR_CSSM_MODULE_MANAGER_NOT_FOUND: c_int = -2147417820;
pub const CSSMERR_CSSM_EVENT_NOTIFICATION_CALLBACK_NOT_FOUND: c_int = -2147417819;
const enum_unnamed_1058 = c_int;
pub const CSSMERR_CSP_INTERNAL_ERROR: c_int = -2147416063;
pub const CSSMERR_CSP_MEMORY_ERROR: c_int = -2147416062;
pub const CSSMERR_CSP_MDS_ERROR: c_int = -2147416061;
pub const CSSMERR_CSP_INVALID_POINTER: c_int = -2147416060;
pub const CSSMERR_CSP_INVALID_INPUT_POINTER: c_int = -2147416059;
pub const CSSMERR_CSP_INVALID_OUTPUT_POINTER: c_int = -2147416058;
pub const CSSMERR_CSP_FUNCTION_NOT_IMPLEMENTED: c_int = -2147416057;
pub const CSSMERR_CSP_SELF_CHECK_FAILED: c_int = -2147416056;
pub const CSSMERR_CSP_OS_ACCESS_DENIED: c_int = -2147416055;
pub const CSSMERR_CSP_FUNCTION_FAILED: c_int = -2147416054;
const enum_unnamed_1059 = c_int;
pub const CSSMERR_CSP_OPERATION_AUTH_DENIED: c_int = -2147416032;
pub const CSSMERR_CSP_OBJECT_USE_AUTH_DENIED: c_int = -2147416031;
pub const CSSMERR_CSP_OBJECT_MANIP_AUTH_DENIED: c_int = -2147416030;
pub const CSSMERR_CSP_OBJECT_ACL_NOT_SUPPORTED: c_int = -2147416029;
pub const CSSMERR_CSP_OBJECT_ACL_REQUIRED: c_int = -2147416028;
pub const CSSMERR_CSP_INVALID_ACCESS_CREDENTIALS: c_int = -2147416027;
pub const CSSMERR_CSP_INVALID_ACL_BASE_CERTS: c_int = -2147416026;
pub const CSSMERR_CSP_ACL_BASE_CERTS_NOT_SUPPORTED: c_int = -2147416025;
pub const CSSMERR_CSP_INVALID_SAMPLE_VALUE: c_int = -2147416024;
pub const CSSMERR_CSP_SAMPLE_VALUE_NOT_SUPPORTED: c_int = -2147416023;
pub const CSSMERR_CSP_INVALID_ACL_SUBJECT_VALUE: c_int = -2147416022;
pub const CSSMERR_CSP_ACL_SUBJECT_TYPE_NOT_SUPPORTED: c_int = -2147416021;
pub const CSSMERR_CSP_INVALID_ACL_CHALLENGE_CALLBACK: c_int = -2147416020;
pub const CSSMERR_CSP_ACL_CHALLENGE_CALLBACK_FAILED: c_int = -2147416019;
pub const CSSMERR_CSP_INVALID_ACL_ENTRY_TAG: c_int = -2147416018;
pub const CSSMERR_CSP_ACL_ENTRY_TAG_NOT_FOUND: c_int = -2147416017;
pub const CSSMERR_CSP_INVALID_ACL_EDIT_MODE: c_int = -2147416016;
pub const CSSMERR_CSP_ACL_CHANGE_FAILED: c_int = -2147416015;
pub const CSSMERR_CSP_INVALID_NEW_ACL_ENTRY: c_int = -2147416014;
pub const CSSMERR_CSP_INVALID_NEW_ACL_OWNER: c_int = -2147416013;
pub const CSSMERR_CSP_ACL_DELETE_FAILED: c_int = -2147416012;
pub const CSSMERR_CSP_ACL_REPLACE_FAILED: c_int = -2147416011;
pub const CSSMERR_CSP_ACL_ADD_FAILED: c_int = -2147416010;
const enum_unnamed_1060 = c_int;
pub const CSSMERR_CSP_INVALID_CONTEXT_HANDLE: c_int = -2147416000;
pub const CSSMERR_CSP_PRIVILEGE_NOT_GRANTED: c_int = -2147415989;
pub const CSSMERR_CSP_INVALID_DATA: c_int = -2147415994;
pub const CSSMERR_CSP_INVALID_PASSTHROUGH_ID: c_int = -2147415978;
pub const CSSMERR_CSP_INVALID_CRYPTO_DATA: c_int = -2147415976;
const enum_unnamed_1061 = c_int;
pub const CSSM_CSP_BASE_CSP_ERROR: c_int = -2147415808;
pub const CSSMERR_CSP_INPUT_LENGTH_ERROR: c_int = -2147415807;
pub const CSSMERR_CSP_OUTPUT_LENGTH_ERROR: c_int = -2147415806;
pub const CSSMERR_CSP_PRIVILEGE_NOT_SUPPORTED: c_int = -2147415805;
pub const CSSMERR_CSP_DEVICE_ERROR: c_int = -2147415804;
pub const CSSMERR_CSP_DEVICE_MEMORY_ERROR: c_int = -2147415803;
pub const CSSMERR_CSP_ATTACH_HANDLE_BUSY: c_int = -2147415802;
pub const CSSMERR_CSP_NOT_LOGGED_IN: c_int = -2147415801;
pub const CSSMERR_CSP_INVALID_KEY: c_int = -2147415792;
pub const CSSMERR_CSP_INVALID_KEY_REFERENCE: c_int = -2147415791;
pub const CSSMERR_CSP_INVALID_KEY_CLASS: c_int = -2147415790;
pub const CSSMERR_CSP_ALGID_MISMATCH: c_int = -2147415789;
pub const CSSMERR_CSP_KEY_USAGE_INCORRECT: c_int = -2147415788;
pub const CSSMERR_CSP_KEY_BLOB_TYPE_INCORRECT: c_int = -2147415787;
pub const CSSMERR_CSP_KEY_HEADER_INCONSISTENT: c_int = -2147415786;
pub const CSSMERR_CSP_UNSUPPORTED_KEY_FORMAT: c_int = -2147415785;
pub const CSSMERR_CSP_UNSUPPORTED_KEY_SIZE: c_int = -2147415784;
pub const CSSMERR_CSP_INVALID_KEY_POINTER: c_int = -2147415783;
pub const CSSMERR_CSP_INVALID_KEYUSAGE_MASK: c_int = -2147415782;
pub const CSSMERR_CSP_UNSUPPORTED_KEYUSAGE_MASK: c_int = -2147415781;
pub const CSSMERR_CSP_INVALID_KEYATTR_MASK: c_int = -2147415780;
pub const CSSMERR_CSP_UNSUPPORTED_KEYATTR_MASK: c_int = -2147415779;
pub const CSSMERR_CSP_INVALID_KEY_LABEL: c_int = -2147415778;
pub const CSSMERR_CSP_UNSUPPORTED_KEY_LABEL: c_int = -2147415777;
pub const CSSMERR_CSP_INVALID_KEY_FORMAT: c_int = -2147415776;
pub const CSSMERR_CSP_INVALID_DATA_COUNT: c_int = -2147415768;
pub const CSSMERR_CSP_VECTOR_OF_BUFS_UNSUPPORTED: c_int = -2147415767;
pub const CSSMERR_CSP_INVALID_INPUT_VECTOR: c_int = -2147415766;
pub const CSSMERR_CSP_INVALID_OUTPUT_VECTOR: c_int = -2147415765;
pub const CSSMERR_CSP_INVALID_CONTEXT: c_int = -2147415760;
pub const CSSMERR_CSP_INVALID_ALGORITHM: c_int = -2147415759;
pub const CSSMERR_CSP_INVALID_ATTR_KEY: c_int = -2147415754;
pub const CSSMERR_CSP_MISSING_ATTR_KEY: c_int = -2147415753;
pub const CSSMERR_CSP_INVALID_ATTR_INIT_VECTOR: c_int = -2147415752;
pub const CSSMERR_CSP_MISSING_ATTR_INIT_VECTOR: c_int = -2147415751;
pub const CSSMERR_CSP_INVALID_ATTR_SALT: c_int = -2147415750;
pub const CSSMERR_CSP_MISSING_ATTR_SALT: c_int = -2147415749;
pub const CSSMERR_CSP_INVALID_ATTR_PADDING: c_int = -2147415748;
pub const CSSMERR_CSP_MISSING_ATTR_PADDING: c_int = -2147415747;
pub const CSSMERR_CSP_INVALID_ATTR_RANDOM: c_int = -2147415746;
pub const CSSMERR_CSP_MISSING_ATTR_RANDOM: c_int = -2147415745;
pub const CSSMERR_CSP_INVALID_ATTR_SEED: c_int = -2147415744;
pub const CSSMERR_CSP_MISSING_ATTR_SEED: c_int = -2147415743;
pub const CSSMERR_CSP_INVALID_ATTR_PASSPHRASE: c_int = -2147415742;
pub const CSSMERR_CSP_MISSING_ATTR_PASSPHRASE: c_int = -2147415741;
pub const CSSMERR_CSP_INVALID_ATTR_KEY_LENGTH: c_int = -2147415740;
pub const CSSMERR_CSP_MISSING_ATTR_KEY_LENGTH: c_int = -2147415739;
pub const CSSMERR_CSP_INVALID_ATTR_BLOCK_SIZE: c_int = -2147415738;
pub const CSSMERR_CSP_MISSING_ATTR_BLOCK_SIZE: c_int = -2147415737;
pub const CSSMERR_CSP_INVALID_ATTR_OUTPUT_SIZE: c_int = -2147415708;
pub const CSSMERR_CSP_MISSING_ATTR_OUTPUT_SIZE: c_int = -2147415707;
pub const CSSMERR_CSP_INVALID_ATTR_ROUNDS: c_int = -2147415706;
pub const CSSMERR_CSP_MISSING_ATTR_ROUNDS: c_int = -2147415705;
pub const CSSMERR_CSP_INVALID_ATTR_ALG_PARAMS: c_int = -2147415704;
pub const CSSMERR_CSP_MISSING_ATTR_ALG_PARAMS: c_int = -2147415703;
pub const CSSMERR_CSP_INVALID_ATTR_LABEL: c_int = -2147415702;
pub const CSSMERR_CSP_MISSING_ATTR_LABEL: c_int = -2147415701;
pub const CSSMERR_CSP_INVALID_ATTR_KEY_TYPE: c_int = -2147415700;
pub const CSSMERR_CSP_MISSING_ATTR_KEY_TYPE: c_int = -2147415699;
pub const CSSMERR_CSP_INVALID_ATTR_MODE: c_int = -2147415698;
pub const CSSMERR_CSP_MISSING_ATTR_MODE: c_int = -2147415697;
pub const CSSMERR_CSP_INVALID_ATTR_EFFECTIVE_BITS: c_int = -2147415696;
pub const CSSMERR_CSP_MISSING_ATTR_EFFECTIVE_BITS: c_int = -2147415695;
pub const CSSMERR_CSP_INVALID_ATTR_START_DATE: c_int = -2147415694;
pub const CSSMERR_CSP_MISSING_ATTR_START_DATE: c_int = -2147415693;
pub const CSSMERR_CSP_INVALID_ATTR_END_DATE: c_int = -2147415692;
pub const CSSMERR_CSP_MISSING_ATTR_END_DATE: c_int = -2147415691;
pub const CSSMERR_CSP_INVALID_ATTR_VERSION: c_int = -2147415690;
pub const CSSMERR_CSP_MISSING_ATTR_VERSION: c_int = -2147415689;
pub const CSSMERR_CSP_INVALID_ATTR_PRIME: c_int = -2147415688;
pub const CSSMERR_CSP_MISSING_ATTR_PRIME: c_int = -2147415687;
pub const CSSMERR_CSP_INVALID_ATTR_BASE: c_int = -2147415686;
pub const CSSMERR_CSP_MISSING_ATTR_BASE: c_int = -2147415685;
pub const CSSMERR_CSP_INVALID_ATTR_SUBPRIME: c_int = -2147415684;
pub const CSSMERR_CSP_MISSING_ATTR_SUBPRIME: c_int = -2147415683;
pub const CSSMERR_CSP_INVALID_ATTR_ITERATION_COUNT: c_int = -2147415682;
pub const CSSMERR_CSP_MISSING_ATTR_ITERATION_COUNT: c_int = -2147415681;
pub const CSSMERR_CSP_INVALID_ATTR_DL_DB_HANDLE: c_int = -2147415680;
pub const CSSMERR_CSP_MISSING_ATTR_DL_DB_HANDLE: c_int = -2147415679;
pub const CSSMERR_CSP_INVALID_ATTR_ACCESS_CREDENTIALS: c_int = -2147415678;
pub const CSSMERR_CSP_MISSING_ATTR_ACCESS_CREDENTIALS: c_int = -2147415677;
pub const CSSMERR_CSP_INVALID_ATTR_PUBLIC_KEY_FORMAT: c_int = -2147415676;
pub const CSSMERR_CSP_MISSING_ATTR_PUBLIC_KEY_FORMAT: c_int = -2147415675;
pub const CSSMERR_CSP_INVALID_ATTR_PRIVATE_KEY_FORMAT: c_int = -2147415674;
pub const CSSMERR_CSP_MISSING_ATTR_PRIVATE_KEY_FORMAT: c_int = -2147415673;
pub const CSSMERR_CSP_INVALID_ATTR_SYMMETRIC_KEY_FORMAT: c_int = -2147415672;
pub const CSSMERR_CSP_MISSING_ATTR_SYMMETRIC_KEY_FORMAT: c_int = -2147415671;
pub const CSSMERR_CSP_INVALID_ATTR_WRAPPED_KEY_FORMAT: c_int = -2147415670;
pub const CSSMERR_CSP_MISSING_ATTR_WRAPPED_KEY_FORMAT: c_int = -2147415669;
pub const CSSMERR_CSP_STAGED_OPERATION_IN_PROGRESS: c_int = -2147415736;
pub const CSSMERR_CSP_STAGED_OPERATION_NOT_STARTED: c_int = -2147415735;
pub const CSSMERR_CSP_VERIFY_FAILED: c_int = -2147415734;
pub const CSSMERR_CSP_INVALID_SIGNATURE: c_int = -2147415733;
pub const CSSMERR_CSP_QUERY_SIZE_UNKNOWN: c_int = -2147415732;
pub const CSSMERR_CSP_BLOCK_SIZE_MISMATCH: c_int = -2147415731;
pub const CSSMERR_CSP_PRIVATE_KEY_NOT_FOUND: c_int = -2147415730;
pub const CSSMERR_CSP_PUBLIC_KEY_INCONSISTENT: c_int = -2147415729;
pub const CSSMERR_CSP_DEVICE_VERIFY_FAILED: c_int = -2147415728;
pub const CSSMERR_CSP_INVALID_LOGIN_NAME: c_int = -2147415727;
pub const CSSMERR_CSP_ALREADY_LOGGED_IN: c_int = -2147415726;
pub const CSSMERR_CSP_PRIVATE_KEY_ALREADY_EXISTS: c_int = -2147415725;
pub const CSSMERR_CSP_KEY_LABEL_ALREADY_EXISTS: c_int = -2147415724;
pub const CSSMERR_CSP_INVALID_DIGEST_ALGORITHM: c_int = -2147415723;
pub const CSSMERR_CSP_CRYPTO_DATA_CALLBACK_FAILED: c_int = -2147415722;
const enum_unnamed_1062 = c_int;
pub const CSSMERR_TP_INTERNAL_ERROR: c_int = -2147409919;
pub const CSSMERR_TP_MEMORY_ERROR: c_int = -2147409918;
pub const CSSMERR_TP_MDS_ERROR: c_int = -2147409917;
pub const CSSMERR_TP_INVALID_POINTER: c_int = -2147409916;
pub const CSSMERR_TP_INVALID_INPUT_POINTER: c_int = -2147409915;
pub const CSSMERR_TP_INVALID_OUTPUT_POINTER: c_int = -2147409914;
pub const CSSMERR_TP_FUNCTION_NOT_IMPLEMENTED: c_int = -2147409913;
pub const CSSMERR_TP_SELF_CHECK_FAILED: c_int = -2147409912;
pub const CSSMERR_TP_OS_ACCESS_DENIED: c_int = -2147409911;
pub const CSSMERR_TP_FUNCTION_FAILED: c_int = -2147409910;
pub const CSSMERR_TP_INVALID_CONTEXT_HANDLE: c_int = -2147409856;
pub const CSSMERR_TP_INVALID_DATA: c_int = -2147409850;
pub const CSSMERR_TP_INVALID_DB_LIST: c_int = -2147409844;
pub const CSSMERR_TP_INVALID_CERTGROUP_POINTER: c_int = -2147409854;
pub const CSSMERR_TP_INVALID_CERT_POINTER: c_int = -2147409853;
pub const CSSMERR_TP_INVALID_CRL_POINTER: c_int = -2147409852;
pub const CSSMERR_TP_INVALID_FIELD_POINTER: c_int = -2147409851;
pub const CSSMERR_TP_INVALID_NETWORK_ADDR: c_int = -2147409833;
pub const CSSMERR_TP_CRL_ALREADY_SIGNED: c_int = -2147409849;
pub const CSSMERR_TP_INVALID_NUMBER_OF_FIELDS: c_int = -2147409848;
pub const CSSMERR_TP_VERIFICATION_FAILURE: c_int = -2147409847;
pub const CSSMERR_TP_INVALID_DB_HANDLE: c_int = -2147409846;
pub const CSSMERR_TP_UNKNOWN_FORMAT: c_int = -2147409842;
pub const CSSMERR_TP_UNKNOWN_TAG: c_int = -2147409841;
pub const CSSMERR_TP_INVALID_PASSTHROUGH_ID: c_int = -2147409834;
pub const CSSMERR_TP_INVALID_CSP_HANDLE: c_int = -2147409840;
pub const CSSMERR_TP_INVALID_DL_HANDLE: c_int = -2147409839;
pub const CSSMERR_TP_INVALID_CL_HANDLE: c_int = -2147409838;
pub const CSSMERR_TP_INVALID_DB_LIST_POINTER: c_int = -2147409843;
const enum_unnamed_1063 = c_int;
pub const CSSM_TP_BASE_TP_ERROR: c_int = -2147409664;
pub const CSSMERR_TP_INVALID_CALLERAUTH_CONTEXT_POINTER: c_int = -2147409663;
pub const CSSMERR_TP_INVALID_IDENTIFIER_POINTER: c_int = -2147409662;
pub const CSSMERR_TP_INVALID_KEYCACHE_HANDLE: c_int = -2147409661;
pub const CSSMERR_TP_INVALID_CERTGROUP: c_int = -2147409660;
pub const CSSMERR_TP_INVALID_CRLGROUP: c_int = -2147409659;
pub const CSSMERR_TP_INVALID_CRLGROUP_POINTER: c_int = -2147409658;
pub const CSSMERR_TP_AUTHENTICATION_FAILED: c_int = -2147409657;
pub const CSSMERR_TP_CERTGROUP_INCOMPLETE: c_int = -2147409656;
pub const CSSMERR_TP_CERTIFICATE_CANT_OPERATE: c_int = -2147409655;
pub const CSSMERR_TP_CERT_EXPIRED: c_int = -2147409654;
pub const CSSMERR_TP_CERT_NOT_VALID_YET: c_int = -2147409653;
pub const CSSMERR_TP_CERT_REVOKED: c_int = -2147409652;
pub const CSSMERR_TP_CERT_SUSPENDED: c_int = -2147409651;
pub const CSSMERR_TP_INSUFFICIENT_CREDENTIALS: c_int = -2147409650;
pub const CSSMERR_TP_INVALID_ACTION: c_int = -2147409649;
pub const CSSMERR_TP_INVALID_ACTION_DATA: c_int = -2147409648;
pub const CSSMERR_TP_INVALID_ANCHOR_CERT: c_int = -2147409646;
pub const CSSMERR_TP_INVALID_AUTHORITY: c_int = -2147409645;
pub const CSSMERR_TP_VERIFY_ACTION_FAILED: c_int = -2147409644;
pub const CSSMERR_TP_INVALID_CERTIFICATE: c_int = -2147409643;
pub const CSSMERR_TP_INVALID_CERT_AUTHORITY: c_int = -2147409642;
pub const CSSMERR_TP_INVALID_CRL_AUTHORITY: c_int = -2147409641;
pub const CSSMERR_TP_INVALID_CRL_ENCODING: c_int = -2147409640;
pub const CSSMERR_TP_INVALID_CRL_TYPE: c_int = -2147409639;
pub const CSSMERR_TP_INVALID_CRL: c_int = -2147409638;
pub const CSSMERR_TP_INVALID_FORM_TYPE: c_int = -2147409637;
pub const CSSMERR_TP_INVALID_ID: c_int = -2147409636;
pub const CSSMERR_TP_INVALID_IDENTIFIER: c_int = -2147409635;
pub const CSSMERR_TP_INVALID_INDEX: c_int = -2147409634;
pub const CSSMERR_TP_INVALID_NAME: c_int = -2147409633;
pub const CSSMERR_TP_INVALID_POLICY_IDENTIFIERS: c_int = -2147409632;
pub const CSSMERR_TP_INVALID_TIMESTRING: c_int = -2147409631;
pub const CSSMERR_TP_INVALID_REASON: c_int = -2147409630;
pub const CSSMERR_TP_INVALID_REQUEST_INPUTS: c_int = -2147409629;
pub const CSSMERR_TP_INVALID_RESPONSE_VECTOR: c_int = -2147409628;
pub const CSSMERR_TP_INVALID_SIGNATURE: c_int = -2147409627;
pub const CSSMERR_TP_INVALID_STOP_ON_POLICY: c_int = -2147409626;
pub const CSSMERR_TP_INVALID_CALLBACK: c_int = -2147409625;
pub const CSSMERR_TP_INVALID_TUPLE: c_int = -2147409624;
pub const CSSMERR_TP_NOT_SIGNER: c_int = -2147409623;
pub const CSSMERR_TP_NOT_TRUSTED: c_int = -2147409622;
pub const CSSMERR_TP_NO_DEFAULT_AUTHORITY: c_int = -2147409621;
pub const CSSMERR_TP_REJECTED_FORM: c_int = -2147409620;
pub const CSSMERR_TP_REQUEST_LOST: c_int = -2147409619;
pub const CSSMERR_TP_REQUEST_REJECTED: c_int = -2147409618;
pub const CSSMERR_TP_UNSUPPORTED_ADDR_TYPE: c_int = -2147409617;
pub const CSSMERR_TP_UNSUPPORTED_SERVICE: c_int = -2147409616;
pub const CSSMERR_TP_INVALID_TUPLEGROUP_POINTER: c_int = -2147409615;
pub const CSSMERR_TP_INVALID_TUPLEGROUP: c_int = -2147409614;
const enum_unnamed_1064 = c_int;
pub const CSSMERR_AC_INTERNAL_ERROR: c_int = -2147405823;
pub const CSSMERR_AC_MEMORY_ERROR: c_int = -2147405822;
pub const CSSMERR_AC_MDS_ERROR: c_int = -2147405821;
pub const CSSMERR_AC_INVALID_POINTER: c_int = -2147405820;
pub const CSSMERR_AC_INVALID_INPUT_POINTER: c_int = -2147405819;
pub const CSSMERR_AC_INVALID_OUTPUT_POINTER: c_int = -2147405818;
pub const CSSMERR_AC_FUNCTION_NOT_IMPLEMENTED: c_int = -2147405817;
pub const CSSMERR_AC_SELF_CHECK_FAILED: c_int = -2147405816;
pub const CSSMERR_AC_OS_ACCESS_DENIED: c_int = -2147405815;
pub const CSSMERR_AC_FUNCTION_FAILED: c_int = -2147405814;
pub const CSSMERR_AC_INVALID_CONTEXT_HANDLE: c_int = -2147405760;
pub const CSSMERR_AC_INVALID_DATA: c_int = -2147405754;
pub const CSSMERR_AC_INVALID_DB_LIST: c_int = -2147405748;
pub const CSSMERR_AC_INVALID_PASSTHROUGH_ID: c_int = -2147405738;
pub const CSSMERR_AC_INVALID_DL_HANDLE: c_int = -2147405743;
pub const CSSMERR_AC_INVALID_CL_HANDLE: c_int = -2147405742;
pub const CSSMERR_AC_INVALID_TP_HANDLE: c_int = -2147405741;
pub const CSSMERR_AC_INVALID_DB_HANDLE: c_int = -2147405750;
pub const CSSMERR_AC_INVALID_DB_LIST_POINTER: c_int = -2147405747;
const enum_unnamed_1065 = c_int;
pub const CSSM_AC_BASE_AC_ERROR: c_int = -2147405568;
pub const CSSMERR_AC_INVALID_BASE_ACLS: c_int = -2147405567;
pub const CSSMERR_AC_INVALID_TUPLE_CREDENTIALS: c_int = -2147405566;
pub const CSSMERR_AC_INVALID_ENCODING: c_int = -2147405565;
pub const CSSMERR_AC_INVALID_VALIDITY_PERIOD: c_int = -2147405564;
pub const CSSMERR_AC_INVALID_REQUESTOR: c_int = -2147405563;
pub const CSSMERR_AC_INVALID_REQUEST_DESCRIPTOR: c_int = -2147405562;
const enum_unnamed_1066 = c_int;
pub const CSSMERR_CL_INTERNAL_ERROR: c_int = -2147411967;
pub const CSSMERR_CL_MEMORY_ERROR: c_int = -2147411966;
pub const CSSMERR_CL_MDS_ERROR: c_int = -2147411965;
pub const CSSMERR_CL_INVALID_POINTER: c_int = -2147411964;
pub const CSSMERR_CL_INVALID_INPUT_POINTER: c_int = -2147411963;
pub const CSSMERR_CL_INVALID_OUTPUT_POINTER: c_int = -2147411962;
pub const CSSMERR_CL_FUNCTION_NOT_IMPLEMENTED: c_int = -2147411961;
pub const CSSMERR_CL_SELF_CHECK_FAILED: c_int = -2147411960;
pub const CSSMERR_CL_OS_ACCESS_DENIED: c_int = -2147411959;
pub const CSSMERR_CL_FUNCTION_FAILED: c_int = -2147411958;
pub const CSSMERR_CL_INVALID_CONTEXT_HANDLE: c_int = -2147411904;
pub const CSSMERR_CL_INVALID_CERTGROUP_POINTER: c_int = -2147411902;
pub const CSSMERR_CL_INVALID_CERT_POINTER: c_int = -2147411901;
pub const CSSMERR_CL_INVALID_CRL_POINTER: c_int = -2147411900;
pub const CSSMERR_CL_INVALID_FIELD_POINTER: c_int = -2147411899;
pub const CSSMERR_CL_INVALID_DATA: c_int = -2147411898;
pub const CSSMERR_CL_CRL_ALREADY_SIGNED: c_int = -2147411897;
pub const CSSMERR_CL_INVALID_NUMBER_OF_FIELDS: c_int = -2147411896;
pub const CSSMERR_CL_VERIFICATION_FAILURE: c_int = -2147411895;
pub const CSSMERR_CL_UNKNOWN_FORMAT: c_int = -2147411890;
pub const CSSMERR_CL_UNKNOWN_TAG: c_int = -2147411889;
pub const CSSMERR_CL_INVALID_PASSTHROUGH_ID: c_int = -2147411882;
const enum_unnamed_1067 = c_int;
pub const CSSM_CL_BASE_CL_ERROR: c_int = -2147411712;
pub const CSSMERR_CL_INVALID_BUNDLE_POINTER: c_int = -2147411711;
pub const CSSMERR_CL_INVALID_CACHE_HANDLE: c_int = -2147411710;
pub const CSSMERR_CL_INVALID_RESULTS_HANDLE: c_int = -2147411709;
pub const CSSMERR_CL_INVALID_BUNDLE_INFO: c_int = -2147411708;
pub const CSSMERR_CL_INVALID_CRL_INDEX: c_int = -2147411707;
pub const CSSMERR_CL_INVALID_SCOPE: c_int = -2147411706;
pub const CSSMERR_CL_NO_FIELD_VALUES: c_int = -2147411705;
pub const CSSMERR_CL_SCOPE_NOT_SUPPORTED: c_int = -2147411704;
const enum_unnamed_1068 = c_int;
pub const CSSMERR_DL_INTERNAL_ERROR: c_int = -2147414015;
pub const CSSMERR_DL_MEMORY_ERROR: c_int = -2147414014;
pub const CSSMERR_DL_MDS_ERROR: c_int = -2147414013;
pub const CSSMERR_DL_INVALID_POINTER: c_int = -2147414012;
pub const CSSMERR_DL_INVALID_INPUT_POINTER: c_int = -2147414011;
pub const CSSMERR_DL_INVALID_OUTPUT_POINTER: c_int = -2147414010;
pub const CSSMERR_DL_FUNCTION_NOT_IMPLEMENTED: c_int = -2147414009;
pub const CSSMERR_DL_SELF_CHECK_FAILED: c_int = -2147414008;
pub const CSSMERR_DL_OS_ACCESS_DENIED: c_int = -2147414007;
pub const CSSMERR_DL_FUNCTION_FAILED: c_int = -2147414006;
pub const CSSMERR_DL_INVALID_CSP_HANDLE: c_int = -2147413936;
pub const CSSMERR_DL_INVALID_DL_HANDLE: c_int = -2147413935;
pub const CSSMERR_DL_INVALID_CL_HANDLE: c_int = -2147413934;
pub const CSSMERR_DL_INVALID_DB_LIST_POINTER: c_int = -2147413939;
const enum_unnamed_1069 = c_int;
pub const CSSMERR_DL_OPERATION_AUTH_DENIED: c_int = -2147413984;
pub const CSSMERR_DL_OBJECT_USE_AUTH_DENIED: c_int = -2147413983;
pub const CSSMERR_DL_OBJECT_MANIP_AUTH_DENIED: c_int = -2147413982;
pub const CSSMERR_DL_OBJECT_ACL_NOT_SUPPORTED: c_int = -2147413981;
pub const CSSMERR_DL_OBJECT_ACL_REQUIRED: c_int = -2147413980;
pub const CSSMERR_DL_INVALID_ACCESS_CREDENTIALS: c_int = -2147413979;
pub const CSSMERR_DL_INVALID_ACL_BASE_CERTS: c_int = -2147413978;
pub const CSSMERR_DL_ACL_BASE_CERTS_NOT_SUPPORTED: c_int = -2147413977;
pub const CSSMERR_DL_INVALID_SAMPLE_VALUE: c_int = -2147413976;
pub const CSSMERR_DL_SAMPLE_VALUE_NOT_SUPPORTED: c_int = -2147413975;
pub const CSSMERR_DL_INVALID_ACL_SUBJECT_VALUE: c_int = -2147413974;
pub const CSSMERR_DL_ACL_SUBJECT_TYPE_NOT_SUPPORTED: c_int = -2147413973;
pub const CSSMERR_DL_INVALID_ACL_CHALLENGE_CALLBACK: c_int = -2147413972;
pub const CSSMERR_DL_ACL_CHALLENGE_CALLBACK_FAILED: c_int = -2147413971;
pub const CSSMERR_DL_INVALID_ACL_ENTRY_TAG: c_int = -2147413970;
pub const CSSMERR_DL_ACL_ENTRY_TAG_NOT_FOUND: c_int = -2147413969;
pub const CSSMERR_DL_INVALID_ACL_EDIT_MODE: c_int = -2147413968;
pub const CSSMERR_DL_ACL_CHANGE_FAILED: c_int = -2147413967;
pub const CSSMERR_DL_INVALID_NEW_ACL_ENTRY: c_int = -2147413966;
pub const CSSMERR_DL_INVALID_NEW_ACL_OWNER: c_int = -2147413965;
pub const CSSMERR_DL_ACL_DELETE_FAILED: c_int = -2147413964;
pub const CSSMERR_DL_ACL_REPLACE_FAILED: c_int = -2147413963;
pub const CSSMERR_DL_ACL_ADD_FAILED: c_int = -2147413962;
const enum_unnamed_1070 = c_int;
pub const CSSMERR_DL_INVALID_DB_HANDLE: c_int = -2147413942;
pub const CSSMERR_DL_INVALID_PASSTHROUGH_ID: c_int = -2147413930;
pub const CSSMERR_DL_INVALID_NETWORK_ADDR: c_int = -2147413929;
const enum_unnamed_1071 = c_int;
pub const CSSM_DL_BASE_DL_ERROR: c_int = -2147413760;
pub const CSSMERR_DL_DATABASE_CORRUPT: c_int = -2147413759;
pub const CSSMERR_DL_INVALID_RECORD_INDEX: c_int = -2147413752;
pub const CSSMERR_DL_INVALID_RECORDTYPE: c_int = -2147413751;
pub const CSSMERR_DL_INVALID_FIELD_NAME: c_int = -2147413750;
pub const CSSMERR_DL_UNSUPPORTED_FIELD_FORMAT: c_int = -2147413749;
pub const CSSMERR_DL_UNSUPPORTED_INDEX_INFO: c_int = -2147413748;
pub const CSSMERR_DL_UNSUPPORTED_LOCALITY: c_int = -2147413747;
pub const CSSMERR_DL_UNSUPPORTED_NUM_ATTRIBUTES: c_int = -2147413746;
pub const CSSMERR_DL_UNSUPPORTED_NUM_INDEXES: c_int = -2147413745;
pub const CSSMERR_DL_UNSUPPORTED_NUM_RECORDTYPES: c_int = -2147413744;
pub const CSSMERR_DL_UNSUPPORTED_RECORDTYPE: c_int = -2147413743;
pub const CSSMERR_DL_FIELD_SPECIFIED_MULTIPLE: c_int = -2147413742;
pub const CSSMERR_DL_INCOMPATIBLE_FIELD_FORMAT: c_int = -2147413741;
pub const CSSMERR_DL_INVALID_PARSING_MODULE: c_int = -2147413740;
pub const CSSMERR_DL_INVALID_DB_NAME: c_int = -2147413738;
pub const CSSMERR_DL_DATASTORE_DOESNOT_EXIST: c_int = -2147413737;
pub const CSSMERR_DL_DATASTORE_ALREADY_EXISTS: c_int = -2147413736;
pub const CSSMERR_DL_DB_LOCKED: c_int = -2147413735;
pub const CSSMERR_DL_DATASTORE_IS_OPEN: c_int = -2147413734;
pub const CSSMERR_DL_RECORD_NOT_FOUND: c_int = -2147413733;
pub const CSSMERR_DL_MISSING_VALUE: c_int = -2147413732;
pub const CSSMERR_DL_UNSUPPORTED_QUERY: c_int = -2147413731;
pub const CSSMERR_DL_UNSUPPORTED_QUERY_LIMITS: c_int = -2147413730;
pub const CSSMERR_DL_UNSUPPORTED_NUM_SELECTION_PREDS: c_int = -2147413729;
pub const CSSMERR_DL_UNSUPPORTED_OPERATOR: c_int = -2147413727;
pub const CSSMERR_DL_INVALID_RESULTS_HANDLE: c_int = -2147413726;
pub const CSSMERR_DL_INVALID_DB_LOCATION: c_int = -2147413725;
pub const CSSMERR_DL_INVALID_ACCESS_REQUEST: c_int = -2147413724;
pub const CSSMERR_DL_INVALID_INDEX_INFO: c_int = -2147413723;
pub const CSSMERR_DL_INVALID_SELECTION_TAG: c_int = -2147413722;
pub const CSSMERR_DL_INVALID_NEW_OWNER: c_int = -2147413721;
pub const CSSMERR_DL_INVALID_RECORD_UID: c_int = -2147413720;
pub const CSSMERR_DL_INVALID_UNIQUE_INDEX_DATA: c_int = -2147413719;
pub const CSSMERR_DL_INVALID_MODIFY_MODE: c_int = -2147413718;
pub const CSSMERR_DL_INVALID_OPEN_PARAMETERS: c_int = -2147413717;
pub const CSSMERR_DL_RECORD_MODIFIED: c_int = -2147413716;
pub const CSSMERR_DL_ENDOFDATA: c_int = -2147413715;
pub const CSSMERR_DL_INVALID_QUERY: c_int = -2147413714;
pub const CSSMERR_DL_INVALID_VALUE: c_int = -2147413713;
pub const CSSMERR_DL_MULTIPLE_VALUES_UNSUPPORTED: c_int = -2147413712;
pub const CSSMERR_DL_STALE_UNIQUE_RECORD: c_int = -2147413711;
const enum_unnamed_1072 = c_int;
pub const GNT_OtherName: c_int = 0;
pub const GNT_RFC822Name: c_int = 1;
pub const GNT_DNSName: c_int = 2;
pub const GNT_X400Address: c_int = 3;
pub const GNT_DirectoryName: c_int = 4;
pub const GNT_EdiPartyName: c_int = 5;
pub const GNT_URI: c_int = 6;
pub const GNT_IPAddress: c_int = 7;
pub const GNT_RegisteredID: c_int = 8;
pub const enum___CE_GeneralNameType = c_uint;
pub const CE_GeneralNameType = enum___CE_GeneralNameType;
pub const struct___CE_OtherName = extern struct {
    typeId: SecAsn1Oid,
    value: SecAsn1Item,
};
pub const CE_OtherName = struct___CE_OtherName;
pub const struct___CE_GeneralName = extern struct {
    nameType: CE_GeneralNameType,
    berEncoded: CSSM_BOOL,
    name: SecAsn1Item,
};
pub const CE_GeneralName = struct___CE_GeneralName;
pub const struct___CE_GeneralNames = extern struct {
    numNames: uint32,
    generalName: [*c]CE_GeneralName,
};
pub const CE_GeneralNames = struct___CE_GeneralNames;
pub const struct___CE_AuthorityKeyID = extern struct {
    keyIdentifierPresent: CSSM_BOOL,
    keyIdentifier: SecAsn1Item,
    generalNamesPresent: CSSM_BOOL,
    generalNames: [*c]CE_GeneralNames,
    serialNumberPresent: CSSM_BOOL,
    serialNumber: SecAsn1Item,
};
pub const CE_AuthorityKeyID = struct___CE_AuthorityKeyID;
pub const CE_SubjectKeyID = SecAsn1Item;
pub const CE_KeyUsage = uint16;
pub const CE_CrlReason = uint32;
pub const struct___CE_ExtendedKeyUsage = extern struct {
    numPurposes: uint32,
    purposes: CSSM_OID_PTR,
};
pub const CE_ExtendedKeyUsage = struct___CE_ExtendedKeyUsage;
pub const struct___CE_BasicConstraints = extern struct {
    cA: CSSM_BOOL,
    pathLenConstraintPresent: CSSM_BOOL,
    pathLenConstraint: uint32,
};
pub const CE_BasicConstraints = struct___CE_BasicConstraints;
pub const struct___CE_PolicyQualifierInfo = extern struct {
    policyQualifierId: SecAsn1Oid,
    qualifier: SecAsn1Item,
};
pub const CE_PolicyQualifierInfo = struct___CE_PolicyQualifierInfo;
pub const struct___CE_PolicyInformation = extern struct {
    certPolicyId: SecAsn1Oid,
    numPolicyQualifiers: uint32,
    policyQualifiers: [*c]CE_PolicyQualifierInfo,
};
pub const CE_PolicyInformation = struct___CE_PolicyInformation;
pub const struct___CE_CertPolicies = extern struct {
    numPolicies: uint32,
    policies: [*c]CE_PolicyInformation,
};
pub const CE_CertPolicies = struct___CE_CertPolicies;
pub const CE_NetscapeCertType = uint16;
pub const CE_CrlDistReasonFlags = uint8;
pub const CE_CDNT_FullName: c_int = 0;
pub const CE_CDNT_NameRelativeToCrlIssuer: c_int = 1;
pub const enum___CE_CrlDistributionPointNameType = c_uint;
pub const CE_CrlDistributionPointNameType = enum___CE_CrlDistributionPointNameType;
const union_unnamed_1073 = extern union {
    fullName: [*c]CE_GeneralNames,
    rdn: CSSM_X509_RDN_PTR,
};
pub const struct___CE_DistributionPointName = extern struct {
    nameType: CE_CrlDistributionPointNameType,
    dpn: union_unnamed_1073,
};
pub const CE_DistributionPointName = struct___CE_DistributionPointName;
pub const struct___CE_CRLDistributionPoint = extern struct {
    distPointName: [*c]CE_DistributionPointName,
    reasonsPresent: CSSM_BOOL,
    reasons: CE_CrlDistReasonFlags,
    crlIssuer: [*c]CE_GeneralNames,
};
pub const CE_CRLDistributionPoint = struct___CE_CRLDistributionPoint;
pub const struct___CE_CRLDistPointsSyntax = extern struct {
    numDistPoints: uint32,
    distPoints: [*c]CE_CRLDistributionPoint,
};
pub const CE_CRLDistPointsSyntax = struct___CE_CRLDistPointsSyntax;
pub const struct___CE_AccessDescription = extern struct {
    accessMethod: SecAsn1Oid,
    accessLocation: CE_GeneralName,
};
pub const CE_AccessDescription = struct___CE_AccessDescription;
pub const struct___CE_AuthorityInfoAccess = extern struct {
    numAccessDescriptions: uint32,
    accessDescriptions: [*c]CE_AccessDescription,
};
pub const CE_AuthorityInfoAccess = struct___CE_AuthorityInfoAccess;
pub const CE_NameRegistrationAuthorities = CE_GeneralNames;
pub const struct___CE_SemanticsInformation = extern struct {
    semanticsIdentifier: [*c]SecAsn1Oid,
    nameRegistrationAuthorities: [*c]CE_NameRegistrationAuthorities,
};
pub const CE_SemanticsInformation = struct___CE_SemanticsInformation;
pub const struct___CE_QC_Statement = extern struct {
    statementId: SecAsn1Oid,
    semanticsInfo: [*c]CE_SemanticsInformation,
    otherInfo: [*c]SecAsn1Item,
};
pub const CE_QC_Statement = struct___CE_QC_Statement;
pub const struct___CE_QC_Statements = extern struct {
    numQCStatements: uint32,
    qcStatements: [*c]CE_QC_Statement,
};
pub const CE_QC_Statements = struct___CE_QC_Statements;
pub const CE_CrlNumber = uint32;
pub const CE_DeltaCrl = uint32;
pub const struct___CE_IssuingDistributionPoint = extern struct {
    distPointName: [*c]CE_DistributionPointName,
    onlyUserCertsPresent: CSSM_BOOL,
    onlyUserCerts: CSSM_BOOL,
    onlyCACertsPresent: CSSM_BOOL,
    onlyCACerts: CSSM_BOOL,
    onlySomeReasonsPresent: CSSM_BOOL,
    onlySomeReasons: CE_CrlDistReasonFlags,
    indirectCrlPresent: CSSM_BOOL,
    indirectCrl: CSSM_BOOL,
};
pub const CE_IssuingDistributionPoint = struct___CE_IssuingDistributionPoint;
pub const struct___CE_GeneralSubtree = extern struct {
    base: [*c]CE_GeneralNames,
    minimum: uint32,
    maximumPresent: CSSM_BOOL,
    maximum: uint32,
};
pub const CE_GeneralSubtree = struct___CE_GeneralSubtree;
pub const struct___CE_GeneralSubtrees = extern struct {
    numSubtrees: uint32,
    subtrees: [*c]CE_GeneralSubtree,
};
pub const CE_GeneralSubtrees = struct___CE_GeneralSubtrees;
pub const struct___CE_NameConstraints = extern struct {
    permitted: [*c]CE_GeneralSubtrees,
    excluded: [*c]CE_GeneralSubtrees,
};
pub const CE_NameConstraints = struct___CE_NameConstraints;
pub const struct___CE_PolicyMapping = extern struct {
    issuerDomainPolicy: SecAsn1Oid,
    subjectDomainPolicy: SecAsn1Oid,
};
pub const CE_PolicyMapping = struct___CE_PolicyMapping;
pub const struct___CE_PolicyMappings = extern struct {
    numPolicyMappings: uint32,
    policyMappings: [*c]CE_PolicyMapping,
};
pub const CE_PolicyMappings = struct___CE_PolicyMappings;
pub const struct___CE_PolicyConstraints = extern struct {
    requireExplicitPolicyPresent: CSSM_BOOL,
    requireExplicitPolicy: uint32,
    inhibitPolicyMappingPresent: CSSM_BOOL,
    inhibitPolicyMapping: uint32,
};
pub const CE_PolicyConstraints = struct___CE_PolicyConstraints;
pub const CE_InhibitAnyPolicy = uint32;
pub const DT_AuthorityKeyID: c_int = 0;
pub const DT_SubjectKeyID: c_int = 1;
pub const DT_KeyUsage: c_int = 2;
pub const DT_SubjectAltName: c_int = 3;
pub const DT_IssuerAltName: c_int = 4;
pub const DT_ExtendedKeyUsage: c_int = 5;
pub const DT_BasicConstraints: c_int = 6;
pub const DT_CertPolicies: c_int = 7;
pub const DT_NetscapeCertType: c_int = 8;
pub const DT_CrlNumber: c_int = 9;
pub const DT_DeltaCrl: c_int = 10;
pub const DT_CrlReason: c_int = 11;
pub const DT_CrlDistributionPoints: c_int = 12;
pub const DT_IssuingDistributionPoint: c_int = 13;
pub const DT_AuthorityInfoAccess: c_int = 14;
pub const DT_Other: c_int = 15;
pub const DT_QC_Statements: c_int = 16;
pub const DT_NameConstraints: c_int = 17;
pub const DT_PolicyMappings: c_int = 18;
pub const DT_PolicyConstraints: c_int = 19;
pub const DT_InhibitAnyPolicy: c_int = 20;
pub const enum___CE_DataType = c_uint;
pub const CE_DataType = enum___CE_DataType;
pub const CE_Data = extern union {
    authorityKeyID: CE_AuthorityKeyID,
    subjectKeyID: CE_SubjectKeyID,
    keyUsage: CE_KeyUsage,
    subjectAltName: CE_GeneralNames,
    issuerAltName: CE_GeneralNames,
    extendedKeyUsage: CE_ExtendedKeyUsage,
    basicConstraints: CE_BasicConstraints,
    certPolicies: CE_CertPolicies,
    netscapeCertType: CE_NetscapeCertType,
    crlNumber: CE_CrlNumber,
    deltaCrl: CE_DeltaCrl,
    crlReason: CE_CrlReason,
    crlDistPoints: CE_CRLDistPointsSyntax,
    issuingDistPoint: CE_IssuingDistributionPoint,
    authorityInfoAccess: CE_AuthorityInfoAccess,
    qualifiedCertStatements: CE_QC_Statements,
    nameConstraints: CE_NameConstraints,
    policyMappings: CE_PolicyMappings,
    policyConstraints: CE_PolicyConstraints,
    inhibitAnyPolicy: CE_InhibitAnyPolicy,
    rawData: SecAsn1Item,
};
pub const struct___CE_DataAndType = extern struct {
    type: CE_DataType,
    extension: CE_Data,
    critical: CSSM_BOOL,
};
pub const CE_DataAndType = struct___CE_DataAndType;
pub extern const gGuidCssm: CSSM_GUID;
pub extern const gGuidAppleFileDL: CSSM_GUID;
pub extern const gGuidAppleCSP: CSSM_GUID;
pub extern const gGuidAppleCSPDL: CSSM_GUID;
pub extern const gGuidAppleX509CL: CSSM_GUID;
pub extern const gGuidAppleX509TP: CSSM_GUID;
pub extern const gGuidAppleLDAPDL: CSSM_GUID;
pub extern const gGuidAppleDotMacTP: CSSM_GUID;
pub extern const gGuidAppleSdCSPDL: CSSM_GUID;
pub extern const gGuidAppleDotMacDL: CSSM_GUID;
pub const CSSM_WORDID_KEYCHAIN_PROMPT: c_int = 65536;
pub const CSSM_WORDID_KEYCHAIN_LOCK: c_int = 65537;
pub const CSSM_WORDID_KEYCHAIN_CHANGE_LOCK: c_int = 65538;
pub const CSSM_WORDID_PROCESS: c_int = 65539;
pub const CSSM_WORDID__RESERVED_1: c_int = 65540;
pub const CSSM_WORDID_SYMMETRIC_KEY: c_int = 65541;
pub const CSSM_WORDID_SYSTEM: c_int = 65542;
pub const CSSM_WORDID_KEY: c_int = 65543;
pub const CSSM_WORDID_PIN: c_int = 65544;
pub const CSSM_WORDID_PREAUTH: c_int = 65545;
pub const CSSM_WORDID_PREAUTH_SOURCE: c_int = 65546;
pub const CSSM_WORDID_ASYMMETRIC_KEY: c_int = 65547;
pub const CSSM_WORDID_PARTITION: c_int = 65548;
pub const CSSM_WORDID_KEYBAG_KEY: c_int = 65549;
pub const CSSM_WORDID__FIRST_UNUSED: c_int = 65550;
const enum_unnamed_1074 = c_uint;
pub const CSSM_ACL_SUBJECT_TYPE_KEYCHAIN_PROMPT: c_int = 65536;
pub const CSSM_ACL_SUBJECT_TYPE_PROCESS: c_int = 65539;
pub const CSSM_ACL_SUBJECT_TYPE_CODE_SIGNATURE: c_int = 116;
pub const CSSM_ACL_SUBJECT_TYPE_COMMENT: c_int = 12;
pub const CSSM_ACL_SUBJECT_TYPE_SYMMETRIC_KEY: c_int = 65541;
pub const CSSM_ACL_SUBJECT_TYPE_PREAUTH: c_int = 65545;
pub const CSSM_ACL_SUBJECT_TYPE_PREAUTH_SOURCE: c_int = 65546;
pub const CSSM_ACL_SUBJECT_TYPE_ASYMMETRIC_KEY: c_int = 65547;
pub const CSSM_ACL_SUBJECT_TYPE_PARTITION: c_int = 65548;
const enum_unnamed_1075 = c_uint;
pub const CSSM_SAMPLE_TYPE_KEYCHAIN_PROMPT: c_int = 65536;
pub const CSSM_SAMPLE_TYPE_KEYCHAIN_LOCK: c_int = 65537;
pub const CSSM_SAMPLE_TYPE_KEYCHAIN_CHANGE_LOCK: c_int = 65538;
pub const CSSM_SAMPLE_TYPE_PROCESS: c_int = 65539;
pub const CSSM_SAMPLE_TYPE_COMMENT: c_int = 12;
pub const CSSM_SAMPLE_TYPE_RETRY_ID: c_int = 85;
pub const CSSM_SAMPLE_TYPE_SYMMETRIC_KEY: c_int = 65541;
pub const CSSM_SAMPLE_TYPE_PREAUTH: c_int = 65545;
pub const CSSM_SAMPLE_TYPE_ASYMMETRIC_KEY: c_int = 65547;
pub const CSSM_SAMPLE_TYPE_KEYBAG_KEY: c_int = 65549;
const enum_unnamed_1076 = c_uint;
pub const CSSM_ACL_AUTHORIZATION_CHANGE_ACL: c_int = 65536;
pub const CSSM_ACL_AUTHORIZATION_CHANGE_OWNER: c_int = 65537;
pub const CSSM_ACL_AUTHORIZATION_PARTITION_ID: c_int = 65538;
pub const CSSM_ACL_AUTHORIZATION_INTEGRITY: c_int = 65539;
pub const CSSM_ACL_AUTHORIZATION_PREAUTH_BASE: c_int = 16842752;
pub const CSSM_ACL_AUTHORIZATION_PREAUTH_END: c_int = 16908288;
const enum_unnamed_1077 = c_uint;
pub const CSSM_ACL_CODE_SIGNATURE_INVALID: c_int = 0;
pub const CSSM_ACL_CODE_SIGNATURE_OSX: c_int = 1;
const enum_unnamed_1078 = c_uint;
pub const CSSM_ACL_MATCH_UID: c_int = 1;
pub const CSSM_ACL_MATCH_GID: c_int = 2;
pub const CSSM_ACL_MATCH_HONOR_ROOT: c_int = 256;
pub const CSSM_ACL_MATCH_BITS: c_int = 3;
const enum_unnamed_1079 = c_uint;
pub const CSSM_ACL_PROCESS_SELECTOR_CURRENT_VERSION: c_int = 257;
const enum_unnamed_1080 = c_uint;
pub const struct_cssm_acl_process_subject_selector = extern struct {
    version: uint16,
    mask: uint16,
    uid: uint32,
    gid: uint32,
};
pub const CSSM_ACL_PROCESS_SUBJECT_SELECTOR = struct_cssm_acl_process_subject_selector;
pub const CSSM_ACL_KEYCHAIN_PROMPT_CURRENT_VERSION: c_int = 257;
const enum_unnamed_1081 = c_uint;
pub const CSSM_ACL_KEYCHAIN_PROMPT_REQUIRE_PASSPHRASE: c_int = 1;
pub const CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED: c_int = 16;
pub const CSSM_ACL_KEYCHAIN_PROMPT_UNSIGNED_ACT: c_int = 32;
pub const CSSM_ACL_KEYCHAIN_PROMPT_INVALID: c_int = 64;
pub const CSSM_ACL_KEYCHAIN_PROMPT_INVALID_ACT: c_int = 128;
const enum_unnamed_1082 = c_uint;
pub const struct_cssm_acl_keychain_prompt_selector = extern struct {
    version: uint16,
    flags: uint16,
};
pub const CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR = struct_cssm_acl_keychain_prompt_selector;
pub const CSSM_ACL_PREAUTH_TRACKING_STATE = uint32;
pub const CSSM_ACL_PREAUTH_TRACKING_COUNT_MASK: c_int = 255;
pub const CSSM_ACL_PREAUTH_TRACKING_BLOCKED: c_int = 0;
pub const CSSM_ACL_PREAUTH_TRACKING_UNKNOWN: c_int = 1073741824;
pub const CSSM_ACL_PREAUTH_TRACKING_AUTHORIZED: c_uint = 2147483648;
const enum_unnamed_1083 = c_uint;
pub const CSSM_DB_ACCESS_RESET: c_int = 65536;
const enum_unnamed_1084 = c_uint;
pub const CSSM_ALGID_APPLE_YARROW: c_uint = 2147483648;
pub const CSSM_ALGID_AES: c_uint = 2147483649;
pub const CSSM_ALGID_FEE: c_uint = 2147483650;
pub const CSSM_ALGID_FEE_MD5: c_uint = 2147483651;
pub const CSSM_ALGID_FEE_SHA1: c_uint = 2147483652;
pub const CSSM_ALGID_FEED: c_uint = 2147483653;
pub const CSSM_ALGID_FEEDEXP: c_uint = 2147483654;
pub const CSSM_ALGID_ASC: c_uint = 2147483655;
pub const CSSM_ALGID_SHA1HMAC_LEGACY: c_uint = 2147483656;
pub const CSSM_ALGID_KEYCHAIN_KEY: c_uint = 2147483657;
pub const CSSM_ALGID_PKCS12_PBE_ENCR: c_uint = 2147483658;
pub const CSSM_ALGID_PKCS12_PBE_MAC: c_uint = 2147483659;
pub const CSSM_ALGID_SECURE_PASSPHRASE: c_uint = 2147483660;
pub const CSSM_ALGID_PBE_OPENSSL_MD5: c_uint = 2147483661;
pub const CSSM_ALGID_SHA256: c_uint = 2147483662;
pub const CSSM_ALGID_SHA384: c_uint = 2147483663;
pub const CSSM_ALGID_SHA512: c_uint = 2147483664;
pub const CSSM_ALGID_ENTROPY_DEFAULT: c_uint = 2147483665;
pub const CSSM_ALGID_SHA224: c_uint = 2147483666;
pub const CSSM_ALGID_SHA224WithRSA: c_uint = 2147483667;
pub const CSSM_ALGID_SHA256WithRSA: c_uint = 2147483668;
pub const CSSM_ALGID_SHA384WithRSA: c_uint = 2147483669;
pub const CSSM_ALGID_SHA512WithRSA: c_uint = 2147483670;
pub const CSSM_ALGID_OPENSSH1: c_uint = 2147483671;
pub const CSSM_ALGID_SHA224WithECDSA: c_uint = 2147483672;
pub const CSSM_ALGID_SHA256WithECDSA: c_uint = 2147483673;
pub const CSSM_ALGID_SHA384WithECDSA: c_uint = 2147483674;
pub const CSSM_ALGID_SHA512WithECDSA: c_uint = 2147483675;
pub const CSSM_ALGID_ECDSA_SPECIFIED: c_uint = 2147483676;
pub const CSSM_ALGID_ECDH_X963_KDF: c_uint = 2147483677;
pub const CSSM_ALGID__FIRST_UNUSED: c_uint = 2147483678;
const enum_unnamed_1085 = c_uint;
pub const CSSM_PADDING_APPLE_SSLv2: c_uint = 2147483648;
const enum_unnamed_1086 = c_uint;
pub const CSSM_KEYBLOB_RAW_FORMAT_VENDOR_DEFINED: c_uint = 2147483648;
const enum_unnamed_1087 = c_uint;
pub const CSSM_KEYBLOB_RAW_FORMAT_X509: c_uint = 2147483648;
pub const CSSM_KEYBLOB_RAW_FORMAT_OPENSSH: c_uint = 2147483649;
pub const CSSM_KEYBLOB_RAW_FORMAT_OPENSSL: c_uint = 2147483650;
pub const CSSM_KEYBLOB_RAW_FORMAT_OPENSSH2: c_uint = 2147483651;
const enum_unnamed_1088 = c_uint;
pub const CSSM_CUSTOM_COMMON_ERROR_EXTENT: c_int = 224;
pub const CSSM_ERRCODE_NO_USER_INTERACTION: c_int = 224;
pub const CSSM_ERRCODE_USER_CANCELED: c_int = 225;
pub const CSSM_ERRCODE_SERVICE_NOT_AVAILABLE: c_int = 226;
pub const CSSM_ERRCODE_INSUFFICIENT_CLIENT_IDENTIFICATION: c_int = 227;
pub const CSSM_ERRCODE_DEVICE_RESET: c_int = 228;
pub const CSSM_ERRCODE_DEVICE_FAILED: c_int = 229;
pub const CSSM_ERRCODE_IN_DARK_WAKE: c_int = 230;
const enum_unnamed_1089 = c_uint;
pub const CSSMERR_CSSM_NO_USER_INTERACTION: c_int = -2147417888;
pub const CSSMERR_AC_NO_USER_INTERACTION: c_int = -2147405600;
pub const CSSMERR_CSP_NO_USER_INTERACTION: c_int = -2147415840;
pub const CSSMERR_CL_NO_USER_INTERACTION: c_int = -2147411744;
pub const CSSMERR_DL_NO_USER_INTERACTION: c_int = -2147413792;
pub const CSSMERR_TP_NO_USER_INTERACTION: c_int = -2147409696;
pub const CSSMERR_CSSM_USER_CANCELED: c_int = -2147417887;
pub const CSSMERR_AC_USER_CANCELED: c_int = -2147405599;
pub const CSSMERR_CSP_USER_CANCELED: c_int = -2147415839;
pub const CSSMERR_CL_USER_CANCELED: c_int = -2147411743;
pub const CSSMERR_DL_USER_CANCELED: c_int = -2147413791;
pub const CSSMERR_TP_USER_CANCELED: c_int = -2147409695;
pub const CSSMERR_CSSM_SERVICE_NOT_AVAILABLE: c_int = -2147417886;
pub const CSSMERR_AC_SERVICE_NOT_AVAILABLE: c_int = -2147405598;
pub const CSSMERR_CSP_SERVICE_NOT_AVAILABLE: c_int = -2147415838;
pub const CSSMERR_CL_SERVICE_NOT_AVAILABLE: c_int = -2147411742;
pub const CSSMERR_DL_SERVICE_NOT_AVAILABLE: c_int = -2147413790;
pub const CSSMERR_TP_SERVICE_NOT_AVAILABLE: c_int = -2147409694;
pub const CSSMERR_CSSM_INSUFFICIENT_CLIENT_IDENTIFICATION: c_int = -2147417885;
pub const CSSMERR_AC_INSUFFICIENT_CLIENT_IDENTIFICATION: c_int = -2147405597;
pub const CSSMERR_CSP_INSUFFICIENT_CLIENT_IDENTIFICATION: c_int = -2147415837;
pub const CSSMERR_CL_INSUFFICIENT_CLIENT_IDENTIFICATION: c_int = -2147411741;
pub const CSSMERR_DL_INSUFFICIENT_CLIENT_IDENTIFICATION: c_int = -2147413789;
pub const CSSMERR_TP_INSUFFICIENT_CLIENT_IDENTIFICATION: c_int = -2147409693;
pub const CSSMERR_CSSM_DEVICE_RESET: c_int = -2147417884;
pub const CSSMERR_AC_DEVICE_RESET: c_int = -2147405596;
pub const CSSMERR_CSP_DEVICE_RESET: c_int = -2147415836;
pub const CSSMERR_CL_DEVICE_RESET: c_int = -2147411740;
pub const CSSMERR_DL_DEVICE_RESET: c_int = -2147413788;
pub const CSSMERR_TP_DEVICE_RESET: c_int = -2147409692;
pub const CSSMERR_CSSM_DEVICE_FAILED: c_int = -2147417883;
pub const CSSMERR_AC_DEVICE_FAILED: c_int = -2147405595;
pub const CSSMERR_CSP_DEVICE_FAILED: c_int = -2147415835;
pub const CSSMERR_CL_DEVICE_FAILED: c_int = -2147411739;
pub const CSSMERR_DL_DEVICE_FAILED: c_int = -2147413787;
pub const CSSMERR_TP_DEVICE_FAILED: c_int = -2147409691;
pub const CSSMERR_CSSM_IN_DARK_WAKE: c_int = -2147417882;
pub const CSSMERR_AC_IN_DARK_WAKE: c_int = -2147405594;
pub const CSSMERR_CSP_IN_DARK_WAKE: c_int = -2147415834;
pub const CSSMERR_CL_IN_DARK_WAKE: c_int = -2147411738;
pub const CSSMERR_DL_IN_DARK_WAKE: c_int = -2147413786;
pub const CSSMERR_TP_IN_DARK_WAKE: c_int = -2147409690;
const enum_unnamed_1090 = c_int;
pub const CSSMERR_CSP_APPLE_ADD_APPLICATION_ACL_SUBJECT: c_int = -2147415040;
pub const CSSMERR_CSP_APPLE_PUBLIC_KEY_INCOMPLETE: c_int = -2147415039;
pub const CSSMERR_CSP_APPLE_SIGNATURE_MISMATCH: c_int = -2147415038;
pub const CSSMERR_CSP_APPLE_INVALID_KEY_START_DATE: c_int = -2147415037;
pub const CSSMERR_CSP_APPLE_INVALID_KEY_END_DATE: c_int = -2147415036;
pub const CSSMERR_CSPDL_APPLE_DL_CONVERSION_ERROR: c_int = -2147415035;
pub const CSSMERR_CSP_APPLE_SSLv2_ROLLBACK: c_int = -2147415034;
const enum_unnamed_1091 = c_int;
pub const CSSM_DL_DB_RECORD_GENERIC_PASSWORD: c_uint = 2147483648;
pub const CSSM_DL_DB_RECORD_INTERNET_PASSWORD: c_uint = 2147483649;
pub const CSSM_DL_DB_RECORD_APPLESHARE_PASSWORD: c_uint = 2147483650;
pub const CSSM_DL_DB_RECORD_X509_CERTIFICATE: c_uint = 2147487744;
pub const CSSM_DL_DB_RECORD_USER_TRUST: c_uint = 2147487745;
pub const CSSM_DL_DB_RECORD_X509_CRL: c_uint = 2147487746;
pub const CSSM_DL_DB_RECORD_UNLOCK_REFERRAL: c_uint = 2147487747;
pub const CSSM_DL_DB_RECORD_EXTENDED_ATTRIBUTE: c_uint = 2147487748;
pub const CSSM_DL_DB_RECORD_METADATA: c_uint = 2147516416;
const enum_unnamed_1092 = c_uint;
pub const CSSM_APPLEFILEDL_TOGGLE_AUTOCOMMIT: c_int = 0;
pub const CSSM_APPLEFILEDL_COMMIT: c_int = 1;
pub const CSSM_APPLEFILEDL_ROLLBACK: c_int = 2;
pub const CSSM_APPLEFILEDL_TAKE_FILE_LOCK: c_int = 3;
pub const CSSM_APPLEFILEDL_MAKE_BACKUP: c_int = 4;
pub const CSSM_APPLEFILEDL_MAKE_COPY: c_int = 5;
pub const CSSM_APPLEFILEDL_DELETE_FILE: c_int = 6;
const enum_unnamed_1093 = c_uint;
pub const CSSM_APPLE_UNLOCK_TYPE_KEY_DIRECT: c_int = 1;
pub const CSSM_APPLE_UNLOCK_TYPE_WRAPPED_PRIVATE: c_int = 2;
pub const CSSM_APPLE_UNLOCK_TYPE_KEYBAG: c_int = 3;
const enum_unnamed_1094 = c_uint;
pub const CSSMERR_APPLEDL_INVALID_OPEN_PARAMETERS: c_int = -2147412992;
pub const CSSMERR_APPLEDL_DISK_FULL: c_int = -2147412991;
pub const CSSMERR_APPLEDL_QUOTA_EXCEEDED: c_int = -2147412990;
pub const CSSMERR_APPLEDL_FILE_TOO_BIG: c_int = -2147412989;
pub const CSSMERR_APPLEDL_INVALID_DATABASE_BLOB: c_int = -2147412988;
pub const CSSMERR_APPLEDL_INVALID_KEY_BLOB: c_int = -2147412987;
pub const CSSMERR_APPLEDL_INCOMPATIBLE_DATABASE_BLOB: c_int = -2147412986;
pub const CSSMERR_APPLEDL_INCOMPATIBLE_KEY_BLOB: c_int = -2147412985;
const enum_unnamed_1095 = c_int;
pub const CSSMERR_APPLETP_HOSTNAME_MISMATCH: c_int = -2147408896;
pub const CSSMERR_APPLETP_UNKNOWN_CRITICAL_EXTEN: c_int = -2147408895;
pub const CSSMERR_APPLETP_NO_BASIC_CONSTRAINTS: c_int = -2147408894;
pub const CSSMERR_APPLETP_INVALID_CA: c_int = -2147408893;
pub const CSSMERR_APPLETP_INVALID_AUTHORITY_ID: c_int = -2147408892;
pub const CSSMERR_APPLETP_INVALID_SUBJECT_ID: c_int = -2147408891;
pub const CSSMERR_APPLETP_INVALID_KEY_USAGE: c_int = -2147408890;
pub const CSSMERR_APPLETP_INVALID_EXTENDED_KEY_USAGE: c_int = -2147408889;
pub const CSSMERR_APPLETP_INVALID_ID_LINKAGE: c_int = -2147408888;
pub const CSSMERR_APPLETP_PATH_LEN_CONSTRAINT: c_int = -2147408887;
pub const CSSMERR_APPLETP_INVALID_ROOT: c_int = -2147408886;
pub const CSSMERR_APPLETP_CRL_EXPIRED: c_int = -2147408885;
pub const CSSMERR_APPLETP_CRL_NOT_VALID_YET: c_int = -2147408884;
pub const CSSMERR_APPLETP_CRL_NOT_FOUND: c_int = -2147408883;
pub const CSSMERR_APPLETP_CRL_SERVER_DOWN: c_int = -2147408882;
pub const CSSMERR_APPLETP_CRL_BAD_URI: c_int = -2147408881;
pub const CSSMERR_APPLETP_UNKNOWN_CERT_EXTEN: c_int = -2147408880;
pub const CSSMERR_APPLETP_UNKNOWN_CRL_EXTEN: c_int = -2147408879;
pub const CSSMERR_APPLETP_CRL_NOT_TRUSTED: c_int = -2147408878;
pub const CSSMERR_APPLETP_CRL_INVALID_ANCHOR_CERT: c_int = -2147408877;
pub const CSSMERR_APPLETP_CRL_POLICY_FAIL: c_int = -2147408876;
pub const CSSMERR_APPLETP_IDP_FAIL: c_int = -2147408875;
pub const CSSMERR_APPLETP_CERT_NOT_FOUND_FROM_ISSUER: c_int = -2147408874;
pub const CSSMERR_APPLETP_BAD_CERT_FROM_ISSUER: c_int = -2147408873;
pub const CSSMERR_APPLETP_SMIME_EMAIL_ADDRS_NOT_FOUND: c_int = -2147408872;
pub const CSSMERR_APPLETP_SMIME_BAD_EXT_KEY_USE: c_int = -2147408871;
pub const CSSMERR_APPLETP_SMIME_BAD_KEY_USE: c_int = -2147408870;
pub const CSSMERR_APPLETP_SMIME_KEYUSAGE_NOT_CRITICAL: c_int = -2147408869;
pub const CSSMERR_APPLETP_SMIME_NO_EMAIL_ADDRS: c_int = -2147408868;
pub const CSSMERR_APPLETP_SMIME_SUBJ_ALT_NAME_NOT_CRIT: c_int = -2147408867;
pub const CSSMERR_APPLETP_SSL_BAD_EXT_KEY_USE: c_int = -2147408866;
pub const CSSMERR_APPLETP_OCSP_BAD_RESPONSE: c_int = -2147408865;
pub const CSSMERR_APPLETP_OCSP_BAD_REQUEST: c_int = -2147408864;
pub const CSSMERR_APPLETP_OCSP_UNAVAILABLE: c_int = -2147408863;
pub const CSSMERR_APPLETP_OCSP_STATUS_UNRECOGNIZED: c_int = -2147408862;
pub const CSSMERR_APPLETP_INCOMPLETE_REVOCATION_CHECK: c_int = -2147408861;
pub const CSSMERR_APPLETP_NETWORK_FAILURE: c_int = -2147408860;
pub const CSSMERR_APPLETP_OCSP_NOT_TRUSTED: c_int = -2147408859;
pub const CSSMERR_APPLETP_OCSP_INVALID_ANCHOR_CERT: c_int = -2147408858;
pub const CSSMERR_APPLETP_OCSP_SIG_ERROR: c_int = -2147408857;
pub const CSSMERR_APPLETP_OCSP_NO_SIGNER: c_int = -2147408856;
pub const CSSMERR_APPLETP_OCSP_RESP_MALFORMED_REQ: c_int = -2147408855;
pub const CSSMERR_APPLETP_OCSP_RESP_INTERNAL_ERR: c_int = -2147408854;
pub const CSSMERR_APPLETP_OCSP_RESP_TRY_LATER: c_int = -2147408853;
pub const CSSMERR_APPLETP_OCSP_RESP_SIG_REQUIRED: c_int = -2147408852;
pub const CSSMERR_APPLETP_OCSP_RESP_UNAUTHORIZED: c_int = -2147408851;
pub const CSSMERR_APPLETP_OCSP_NONCE_MISMATCH: c_int = -2147408850;
pub const CSSMERR_APPLETP_CS_BAD_CERT_CHAIN_LENGTH: c_int = -2147408849;
pub const CSSMERR_APPLETP_CS_NO_BASIC_CONSTRAINTS: c_int = -2147408848;
pub const CSSMERR_APPLETP_CS_BAD_PATH_LENGTH: c_int = -2147408847;
pub const CSSMERR_APPLETP_CS_NO_EXTENDED_KEY_USAGE: c_int = -2147408846;
pub const CSSMERR_APPLETP_CODE_SIGN_DEVELOPMENT: c_int = -2147408845;
pub const CSSMERR_APPLETP_RS_BAD_CERT_CHAIN_LENGTH: c_int = -2147408844;
pub const CSSMERR_APPLETP_RS_BAD_EXTENDED_KEY_USAGE: c_int = -2147408843;
pub const CSSMERR_APPLETP_TRUST_SETTING_DENY: c_int = -2147408842;
pub const CSSMERR_APPLETP_INVALID_EMPTY_SUBJECT: c_int = -2147408841;
pub const CSSMERR_APPLETP_UNKNOWN_QUAL_CERT_STATEMENT: c_int = -2147408840;
pub const CSSMERR_APPLETP_MISSING_REQUIRED_EXTENSION: c_int = -2147408839;
pub const CSSMERR_APPLETP_EXT_KEYUSAGE_NOT_CRITICAL: c_int = -2147408838;
pub const CSSMERR_APPLETP_IDENTIFIER_MISSING: c_int = -2147408837;
pub const CSSMERR_APPLETP_CA_PIN_MISMATCH: c_int = -2147408836;
pub const CSSMERR_APPLETP_LEAF_PIN_MISMATCH: c_int = -2147408835;
const enum_unnamed_1096 = c_int;
pub const CSSMERR_APPLE_DOTMAC_REQ_QUEUED: c_int = -2147408796;
pub const CSSMERR_APPLE_DOTMAC_REQ_REDIRECT: c_int = -2147408795;
pub const CSSMERR_APPLE_DOTMAC_REQ_SERVER_ERR: c_int = -2147408794;
pub const CSSMERR_APPLE_DOTMAC_REQ_SERVER_PARAM: c_int = -2147408793;
pub const CSSMERR_APPLE_DOTMAC_REQ_SERVER_AUTH: c_int = -2147408792;
pub const CSSMERR_APPLE_DOTMAC_REQ_SERVER_UNIMPL: c_int = -2147408791;
pub const CSSMERR_APPLE_DOTMAC_REQ_SERVER_NOT_AVAIL: c_int = -2147408790;
pub const CSSMERR_APPLE_DOTMAC_REQ_SERVER_ALREADY_EXIST: c_int = -2147408789;
pub const CSSMERR_APPLE_DOTMAC_REQ_SERVER_SERVICE_ERROR: c_int = -2147408788;
pub const CSSMERR_APPLE_DOTMAC_REQ_IS_PENDING: c_int = -2147408787;
pub const CSSMERR_APPLE_DOTMAC_NO_REQ_PENDING: c_int = -2147408786;
pub const CSSMERR_APPLE_DOTMAC_CSR_VERIFY_FAIL: c_int = -2147408785;
pub const CSSMERR_APPLE_DOTMAC_FAILED_CONSISTENCY_CHECK: c_int = -2147408784;
const enum_unnamed_1097 = c_int;
pub const CSSM_APPLEDL_OPEN_PARAMETERS_VERSION: c_int = 1;
const enum_unnamed_1098 = c_uint;
pub const kCSSM_APPLEDL_MASK_MODE: c_int = 1;
pub const enum_cssm_appledl_open_parameters_mask = c_uint;
pub const struct_cssm_appledl_open_parameters = extern struct {
    length: uint32,
    version: uint32,
    autoCommit: CSSM_BOOL,
    mask: uint32,
    mode: mode_t,
};
pub const CSSM_APPLEDL_OPEN_PARAMETERS = struct_cssm_appledl_open_parameters;
pub const CSSM_APPLEDL_OPEN_PARAMETERS_PTR = [*c]struct_cssm_appledl_open_parameters;
pub const CSSM_APPLECSPDL_DB_LOCK: c_int = 0;
pub const CSSM_APPLECSPDL_DB_UNLOCK: c_int = 1;
pub const CSSM_APPLECSPDL_DB_GET_SETTINGS: c_int = 2;
pub const CSSM_APPLECSPDL_DB_SET_SETTINGS: c_int = 3;
pub const CSSM_APPLECSPDL_DB_IS_LOCKED: c_int = 4;
pub const CSSM_APPLECSPDL_DB_CHANGE_PASSWORD: c_int = 5;
pub const CSSM_APPLECSPDL_DB_GET_HANDLE: c_int = 6;
pub const CSSM_APPLESCPDL_CSP_GET_KEYHANDLE: c_int = 7;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_8: c_int = 8;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_9: c_int = 9;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_10: c_int = 10;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_11: c_int = 11;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_12: c_int = 12;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_13: c_int = 13;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_14: c_int = 14;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_15: c_int = 15;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_16: c_int = 16;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_17: c_int = 17;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_18: c_int = 18;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_19: c_int = 19;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_20: c_int = 20;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_21: c_int = 21;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_22: c_int = 22;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_23: c_int = 23;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_24: c_int = 24;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_25: c_int = 25;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_26: c_int = 26;
pub const CSSM_APPLE_PRIVATE_CSPDL_CODE_27: c_int = 27;
pub const CSSM_APPLECSP_KEYDIGEST: c_int = 256;
const enum_unnamed_1099 = c_uint;
pub const struct_cssm_applecspdl_db_settings_parameters = extern struct {
    idleTimeout: uint32,
    lockOnSleep: uint8,
};
pub const CSSM_APPLECSPDL_DB_SETTINGS_PARAMETERS = struct_cssm_applecspdl_db_settings_parameters;
pub const CSSM_APPLECSPDL_DB_SETTINGS_PARAMETERS_PTR = [*c]struct_cssm_applecspdl_db_settings_parameters;
pub const struct_cssm_applecspdl_db_is_locked_parameters = extern struct {
    isLocked: uint8,
};
pub const CSSM_APPLECSPDL_DB_IS_LOCKED_PARAMETERS = struct_cssm_applecspdl_db_is_locked_parameters;
pub const CSSM_APPLECSPDL_DB_IS_LOCKED_PARAMETERS_PTR = [*c]struct_cssm_applecspdl_db_is_locked_parameters;
pub const struct_cssm_applecspdl_db_change_password_parameters = extern struct {
    accessCredentials: [*c]CSSM_ACCESS_CREDENTIALS,
};
pub const CSSM_APPLECSPDL_DB_CHANGE_PASSWORD_PARAMETERS = struct_cssm_applecspdl_db_change_password_parameters;
pub const CSSM_APPLECSPDL_DB_CHANGE_PASSWORD_PARAMETERS_PTR = [*c]struct_cssm_applecspdl_db_change_password_parameters;
pub const CSSM_KEYBLOB_WRAPPED_FORMAT_APPLE_CUSTOM: c_int = 100;
pub const CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSL: c_int = 101;
pub const CSSM_KEYBLOB_WRAPPED_FORMAT_OPENSSH1: c_int = 102;
const enum_unnamed_1100 = c_uint;
pub const CSSM_ATTRIBUTE_VENDOR_DEFINED: c_int = 8388608;
const enum_unnamed_1101 = c_uint;
pub const CSSM_ATTRIBUTE_PUBLIC_KEY: c_int = 1082130432;
pub const CSSM_ATTRIBUTE_FEE_PRIME_TYPE: c_int = 276824065;
pub const CSSM_ATTRIBUTE_FEE_CURVE_TYPE: c_int = 276824066;
pub const CSSM_ATTRIBUTE_ASC_OPTIMIZATION: c_int = 276824067;
pub const CSSM_ATTRIBUTE_RSA_BLINDING: c_int = 276824068;
pub const CSSM_ATTRIBUTE_PARAM_KEY: c_int = 1082130437;
pub const CSSM_ATTRIBUTE_PROMPT: c_int = 545259526;
pub const CSSM_ATTRIBUTE_ALERT_TITLE: c_int = 545259527;
pub const CSSM_ATTRIBUTE_VERIFY_PASSPHRASE: c_int = 276824072;
const enum_unnamed_1102 = c_uint;
pub const CSSM_FEE_PRIME_TYPE_DEFAULT: c_int = 0;
pub const CSSM_FEE_PRIME_TYPE_MERSENNE: c_int = 1;
pub const CSSM_FEE_PRIME_TYPE_FEE: c_int = 2;
pub const CSSM_FEE_PRIME_TYPE_GENERAL: c_int = 3;
const enum_unnamed_1103 = c_uint;
pub const CSSM_FEE_CURVE_TYPE_DEFAULT: c_int = 0;
pub const CSSM_FEE_CURVE_TYPE_MONTGOMERY: c_int = 1;
pub const CSSM_FEE_CURVE_TYPE_WEIERSTRASS: c_int = 2;
pub const CSSM_FEE_CURVE_TYPE_ANSI_X9_62: c_int = 3;
const enum_unnamed_1104 = c_uint;
pub const CSSM_ASC_OPTIMIZE_DEFAULT: c_int = 0;
pub const CSSM_ASC_OPTIMIZE_SIZE: c_int = 1;
pub const CSSM_ASC_OPTIMIZE_SECURITY: c_int = 2;
pub const CSSM_ASC_OPTIMIZE_TIME: c_int = 3;
pub const CSSM_ASC_OPTIMIZE_TIME_SIZE: c_int = 4;
pub const CSSM_ASC_OPTIMIZE_ASCII: c_int = 5;
const enum_unnamed_1105 = c_uint;
pub const CSSM_KEYATTR_PARTIAL: c_int = 65536;
pub const CSSM_KEYATTR_PUBLIC_KEY_ENCRYPT: c_int = 131072;
const enum_unnamed_1106 = c_uint;
pub const CSSM_APPLE_TP_NAME_OID = extern struct {
    string: [*c]const u8,
    oid: [*c]const SecAsn1Oid,
};
pub const CSSM_APPLE_TP_CERT_REQUEST = extern struct {
    cspHand: CSSM_CSP_HANDLE,
    clHand: CSSM_CL_HANDLE,
    serialNumber: uint32,
    numSubjectNames: uint32,
    subjectNames: [*c]CSSM_APPLE_TP_NAME_OID,
    numIssuerNames: uint32,
    issuerNames: [*c]CSSM_APPLE_TP_NAME_OID,
    issuerNameX509: CSSM_X509_NAME_PTR,
    certPublicKey: [*c]const CSSM_KEY,
    issuerPrivateKey: [*c]const CSSM_KEY,
    signatureAlg: CSSM_ALGORITHMS,
    signatureOid: SecAsn1Oid,
    notBefore: uint32,
    notAfter: uint32,
    numExtensions: uint32,
    extensions: [*c]CE_DataAndType,
    challengeString: [*c]const u8,
};
pub const CSSM_APPLE_TP_SSL_OPTIONS = extern struct {
    Version: uint32,
    ServerNameLen: uint32,
    ServerName: [*c]const u8,
    Flags: uint32,
};
pub const CSSM_APPLE_TP_CRL_OPT_FLAGS = uint32;
pub const CSSM_TP_ACTION_REQUIRE_CRL_PER_CERT: c_int = 1;
pub const CSSM_TP_ACTION_FETCH_CRL_FROM_NET: c_int = 2;
pub const CSSM_TP_ACTION_CRL_SUFFICIENT: c_int = 4;
pub const CSSM_TP_ACTION_REQUIRE_CRL_IF_PRESENT: c_int = 8;
const enum_unnamed_1107 = c_uint;
pub const CSSM_APPLE_TP_CRL_OPTIONS = extern struct {
    Version: uint32,
    CrlFlags: CSSM_APPLE_TP_CRL_OPT_FLAGS,
    crlStore: CSSM_DL_DB_HANDLE_PTR,
};
pub const CSSM_APPLE_TP_SMIME_OPTIONS = extern struct {
    Version: uint32,
    IntendedUsage: CE_KeyUsage,
    SenderEmailLen: uint32,
    SenderEmail: [*c]const u8,
};
pub const CSSM_APPLE_TP_ACTION_FLAGS = uint32;
pub const CSSM_TP_ACTION_ALLOW_EXPIRED: c_int = 1;
pub const CSSM_TP_ACTION_LEAF_IS_CA: c_int = 2;
pub const CSSM_TP_ACTION_FETCH_CERT_FROM_NET: c_int = 4;
pub const CSSM_TP_ACTION_ALLOW_EXPIRED_ROOT: c_int = 8;
pub const CSSM_TP_ACTION_REQUIRE_REV_PER_CERT: c_int = 16;
pub const CSSM_TP_ACTION_TRUST_SETTINGS: c_int = 32;
pub const CSSM_TP_ACTION_IMPLICIT_ANCHORS: c_int = 64;
const enum_unnamed_1108 = c_uint;
pub const CSSM_APPLE_TP_ACTION_DATA = extern struct {
    Version: uint32,
    ActionFlags: CSSM_APPLE_TP_ACTION_FLAGS,
};
pub const CSSM_TP_APPLE_CERT_STATUS = uint32;
pub const CSSM_CERT_STATUS_EXPIRED: c_int = 1;
pub const CSSM_CERT_STATUS_NOT_VALID_YET: c_int = 2;
pub const CSSM_CERT_STATUS_IS_IN_INPUT_CERTS: c_int = 4;
pub const CSSM_CERT_STATUS_IS_IN_ANCHORS: c_int = 8;
pub const CSSM_CERT_STATUS_IS_ROOT: c_int = 16;
pub const CSSM_CERT_STATUS_IS_FROM_NET: c_int = 32;
pub const CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_USER: c_int = 64;
pub const CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_ADMIN: c_int = 128;
pub const CSSM_CERT_STATUS_TRUST_SETTINGS_FOUND_SYSTEM: c_int = 256;
pub const CSSM_CERT_STATUS_TRUST_SETTINGS_TRUST: c_int = 512;
pub const CSSM_CERT_STATUS_TRUST_SETTINGS_DENY: c_int = 1024;
pub const CSSM_CERT_STATUS_TRUST_SETTINGS_IGNORED_ERROR: c_int = 2048;
const enum_unnamed_1109 = c_uint;
pub const CSSM_TP_APPLE_EVIDENCE_INFO = extern struct {
    StatusBits: CSSM_TP_APPLE_CERT_STATUS,
    NumStatusCodes: uint32,
    StatusCodes: [*c]CSSM_RETURN,
    Index: uint32,
    DlDbHandle: CSSM_DL_DB_HANDLE,
    UniqueRecord: CSSM_DB_UNIQUE_RECORD_PTR,
};
pub const CSSM_TP_APPLE_EVIDENCE_HEADER = extern struct {
    Version: uint32,
};
pub const CSSM_EVIDENCE_FORM_APPLE_HEADER: c_uint = 2147483648;
pub const CSSM_EVIDENCE_FORM_APPLE_CERTGROUP: c_uint = 2147483649;
pub const CSSM_EVIDENCE_FORM_APPLE_CERT_INFO: c_uint = 2147483650;
const enum_unnamed_1110 = c_uint;
pub const CSSM_APPLEX509CL_OBTAIN_CSR: c_int = 0;
pub const CSSM_APPLEX509CL_VERIFY_CSR: c_int = 1;
const enum_unnamed_1111 = c_uint;
pub const CSSM_APPLE_CL_CSR_REQUEST = extern struct {
    subjectNameX509: CSSM_X509_NAME_PTR,
    signatureAlg: CSSM_ALGORITHMS,
    signatureOid: SecAsn1Oid,
    cspHand: CSSM_CSP_HANDLE,
    subjectPublicKey: [*c]const CSSM_KEY,
    subjectPrivateKey: [*c]const CSSM_KEY,
    challengeString: [*c]const u8,
};
pub extern fn cssmPerror(how: [*c]const u8, @"error": CSSM_RETURN) void;
pub extern fn cssmOidToAlg(oid: [*c]const SecAsn1Oid, alg: [*c]CSSM_ALGORITHMS) bool;
pub extern fn cssmAlgToOid(algId: CSSM_ALGORITHMS) [*c]const SecAsn1Oid;
pub const kSecUnlockStateStatus: c_int = 1;
pub const kSecReadPermStatus: c_int = 2;
pub const kSecWritePermStatus: c_int = 4;
const enum_unnamed_1112 = c_uint;
pub const struct_SecKeychainSettings = extern struct {
    version: UInt32,
    lockOnSleep: Boolean,
    useLockInterval: Boolean,
    lockInterval: UInt32,
};
pub const SecKeychainSettings = struct_SecKeychainSettings;
pub const SecAuthenticationType = FourCharCode;
pub const kSecAuthenticationTypeNTLM: c_int = 1835824238;
pub const kSecAuthenticationTypeMSN: c_int = 1634628461;
pub const kSecAuthenticationTypeDPA: c_int = 1633775716;
pub const kSecAuthenticationTypeRPA: c_int = 1633775730;
pub const kSecAuthenticationTypeHTTPBasic: c_int = 1886680168;
pub const kSecAuthenticationTypeHTTPDigest: c_int = 1685353576;
pub const kSecAuthenticationTypeHTMLForm: c_int = 1836216166;
pub const kSecAuthenticationTypeDefault: c_int = 1953261156;
pub const kSecAuthenticationTypeAny: c_int = 0;
const enum_unnamed_1113 = c_uint;
pub const SecProtocolType = FourCharCode;
pub const kSecProtocolTypeFTP: c_int = 1718906912;
pub const kSecProtocolTypeFTPAccount: c_int = 1718906977;
pub const kSecProtocolTypeHTTP: c_int = 1752462448;
pub const kSecProtocolTypeIRC: c_int = 1769104160;
pub const kSecProtocolTypeNNTP: c_int = 1852732528;
pub const kSecProtocolTypePOP3: c_int = 1886351411;
pub const kSecProtocolTypeSMTP: c_int = 1936553072;
pub const kSecProtocolTypeSOCKS: c_int = 1936685088;
pub const kSecProtocolTypeIMAP: c_int = 1768776048;
pub const kSecProtocolTypeLDAP: c_int = 1818517872;
pub const kSecProtocolTypeAppleTalk: c_int = 1635019883;
pub const kSecProtocolTypeAFP: c_int = 1634103328;
pub const kSecProtocolTypeTelnet: c_int = 1952803950;
pub const kSecProtocolTypeSSH: c_int = 1936943136;
pub const kSecProtocolTypeFTPS: c_int = 1718906995;
pub const kSecProtocolTypeHTTPS: c_int = 1752461427;
pub const kSecProtocolTypeHTTPProxy: c_int = 1752461432;
pub const kSecProtocolTypeHTTPSProxy: c_int = 1752462200;
pub const kSecProtocolTypeFTPProxy: c_int = 1718907000;
pub const kSecProtocolTypeCIFS: c_int = 1667851891;
pub const kSecProtocolTypeSMB: c_int = 1936548384;
pub const kSecProtocolTypeRTSP: c_int = 1920234352;
pub const kSecProtocolTypeRTSPProxy: c_int = 1920234360;
pub const kSecProtocolTypeDAAP: c_int = 1684103536;
pub const kSecProtocolTypeEPPC: c_int = 1701867619;
pub const kSecProtocolTypeIPP: c_int = 1768976416;
pub const kSecProtocolTypeNNTPS: c_int = 1853124723;
pub const kSecProtocolTypeLDAPS: c_int = 1818521715;
pub const kSecProtocolTypeTelnetS: c_int = 1952803955;
pub const kSecProtocolTypeIMAPS: c_int = 1768779891;
pub const kSecProtocolTypeIRCS: c_int = 1769104243;
pub const kSecProtocolTypePOP3S: c_int = 1886351475;
pub const kSecProtocolTypeCVSpserver: c_int = 1668707184;
pub const kSecProtocolTypeSVN: c_int = 1937141280;
pub const kSecProtocolTypeAny: c_int = 0;
const enum_unnamed_1114 = c_uint;
pub const SecKeychainEvent = UInt32;
pub const kSecLockEvent: c_int = 1;
pub const kSecUnlockEvent: c_int = 2;
pub const kSecAddEvent: c_int = 3;
pub const kSecDeleteEvent: c_int = 4;
pub const kSecUpdateEvent: c_int = 5;
pub const kSecPasswordChangedEvent: c_int = 6;
pub const kSecDefaultChangedEvent: c_int = 9;
pub const kSecDataAccessEvent: c_int = 10;
pub const kSecKeychainListChangedEvent: c_int = 11;
pub const kSecTrustSettingsChangedEvent: c_int = 12;
const enum_unnamed_1115 = c_uint;
pub const SecKeychainEventMask = UInt32;
pub const kSecLockEventMask: c_int = 2;
pub const kSecUnlockEventMask: c_int = 4;
pub const kSecAddEventMask: c_int = 8;
pub const kSecDeleteEventMask: c_int = 16;
pub const kSecUpdateEventMask: c_int = 32;
pub const kSecPasswordChangedEventMask: c_int = 64;
pub const kSecDefaultChangedEventMask: c_int = 512;
pub const kSecDataAccessEventMask: c_int = 1024;
pub const kSecKeychainListChangedMask: c_int = 2048;
pub const kSecTrustSettingsChangedEventMask: c_int = 4096;
pub const kSecEveryEventMask: c_uint = 4294967295;
const enum_unnamed_1116 = c_uint;
pub const struct_SecKeychainCallbackInfo = extern struct {
    version: UInt32,
    item: SecKeychainItemRef,
    keychain: SecKeychainRef,
    pid: pid_t,
};
pub const SecKeychainCallbackInfo = struct_SecKeychainCallbackInfo;
pub extern fn SecKeychainGetTypeID() CFTypeID;
pub extern fn SecKeychainGetVersion(returnVers: [*c]UInt32) OSStatus;
pub extern fn SecKeychainOpen(pathName: [*c]const u8, keychain: [*c]SecKeychainRef) OSStatus;
pub extern fn SecKeychainCreate(pathName: [*c]const u8, passwordLength: UInt32, password: ?*const anyopaque, promptUser: Boolean, initialAccess: SecAccessRef, keychain: [*c]SecKeychainRef) OSStatus;
pub extern fn SecKeychainDelete(keychainOrArray: SecKeychainRef) OSStatus;
pub extern fn SecKeychainSetSettings(keychain: SecKeychainRef, newSettings: [*c]const SecKeychainSettings) OSStatus;
pub extern fn SecKeychainCopySettings(keychain: SecKeychainRef, outSettings: [*c]SecKeychainSettings) OSStatus;
pub extern fn SecKeychainUnlock(keychain: SecKeychainRef, passwordLength: UInt32, password: ?*const anyopaque, usePassword: Boolean) OSStatus;
pub extern fn SecKeychainLock(keychain: SecKeychainRef) OSStatus;
pub extern fn SecKeychainLockAll() OSStatus;
pub extern fn SecKeychainCopyDefault(keychain: [*c]SecKeychainRef) OSStatus;
pub extern fn SecKeychainSetDefault(keychain: SecKeychainRef) OSStatus;
pub extern fn SecKeychainCopySearchList(searchList: [*c]CFArrayRef) OSStatus;
pub extern fn SecKeychainSetSearchList(searchList: CFArrayRef) OSStatus;
pub const SecPreferencesDomain = c_int;
pub const kSecPreferencesDomainUser: c_int = 0;
pub const kSecPreferencesDomainSystem: c_int = 1;
pub const kSecPreferencesDomainCommon: c_int = 2;
pub const kSecPreferencesDomainDynamic: c_int = 3;
const enum_unnamed_1117 = c_uint;
pub extern fn SecKeychainCopyDomainDefault(domain: SecPreferencesDomain, keychain: [*c]SecKeychainRef) OSStatus;
pub extern fn SecKeychainSetDomainDefault(domain: SecPreferencesDomain, keychain: SecKeychainRef) OSStatus;
pub extern fn SecKeychainCopyDomainSearchList(domain: SecPreferencesDomain, searchList: [*c]CFArrayRef) OSStatus;
pub extern fn SecKeychainSetDomainSearchList(domain: SecPreferencesDomain, searchList: CFArrayRef) OSStatus;
pub extern fn SecKeychainSetPreferenceDomain(domain: SecPreferencesDomain) OSStatus;
pub extern fn SecKeychainGetPreferenceDomain(domain: [*c]SecPreferencesDomain) OSStatus;
pub extern fn SecKeychainGetStatus(keychain: SecKeychainRef, keychainStatus: [*c]SecKeychainStatus) OSStatus;
pub extern fn SecKeychainGetPath(keychain: SecKeychainRef, ioPathLength: [*c]UInt32, pathName: [*c]u8) OSStatus;
pub extern fn SecKeychainAttributeInfoForItemID(keychain: SecKeychainRef, itemID: UInt32, info: [*c][*c]SecKeychainAttributeInfo) OSStatus;
pub extern fn SecKeychainFreeAttributeInfo(info: [*c]SecKeychainAttributeInfo) OSStatus;
pub const SecKeychainCallback = ?*const fn (SecKeychainEvent, [*c]SecKeychainCallbackInfo, ?*anyopaque) callconv(.C) OSStatus;
pub extern fn SecKeychainAddCallback(callbackFunction: SecKeychainCallback, eventMask: SecKeychainEventMask, userContext: ?*anyopaque) OSStatus;
pub extern fn SecKeychainRemoveCallback(callbackFunction: SecKeychainCallback) OSStatus;
pub extern fn SecKeychainAddInternetPassword(keychain: SecKeychainRef, serverNameLength: UInt32, serverName: [*c]const u8, securityDomainLength: UInt32, securityDomain: [*c]const u8, accountNameLength: UInt32, accountName: [*c]const u8, pathLength: UInt32, path: [*c]const u8, port: UInt16, protocol: SecProtocolType, authenticationType: SecAuthenticationType, passwordLength: UInt32, passwordData: ?*const anyopaque, itemRef: [*c]SecKeychainItemRef) OSStatus;
pub extern fn SecKeychainFindInternetPassword(keychainOrArray: CFTypeRef, serverNameLength: UInt32, serverName: [*c]const u8, securityDomainLength: UInt32, securityDomain: [*c]const u8, accountNameLength: UInt32, accountName: [*c]const u8, pathLength: UInt32, path: [*c]const u8, port: UInt16, protocol: SecProtocolType, authenticationType: SecAuthenticationType, passwordLength: [*c]UInt32, passwordData: [*c]?*anyopaque, itemRef: [*c]SecKeychainItemRef) OSStatus;
pub extern fn SecKeychainAddGenericPassword(keychain: SecKeychainRef, serviceNameLength: UInt32, serviceName: [*c]const u8, accountNameLength: UInt32, accountName: [*c]const u8, passwordLength: UInt32, passwordData: ?*const anyopaque, itemRef: [*c]SecKeychainItemRef) OSStatus;
pub extern fn SecKeychainFindGenericPassword(keychainOrArray: CFTypeRef, serviceNameLength: UInt32, serviceName: [*c]const u8, accountNameLength: UInt32, accountName: [*c]const u8, passwordLength: [*c]UInt32, passwordData: [*c]?*anyopaque, itemRef: [*c]SecKeychainItemRef) OSStatus;
pub extern fn SecKeychainSetUserInteractionAllowed(state: Boolean) OSStatus;
pub extern fn SecKeychainGetUserInteractionAllowed(state: [*c]Boolean) OSStatus;
pub extern fn SecKeychainGetCSPHandle(keychain: SecKeychainRef, cspHandle: [*c]CSSM_CSP_HANDLE) OSStatus;
pub extern fn SecKeychainGetDLDBHandle(keychain: SecKeychainRef, dldbHandle: [*c]CSSM_DL_DB_HANDLE) OSStatus;
pub extern fn SecKeychainCopyAccess(keychain: SecKeychainRef, access: [*c]SecAccessRef) OSStatus;
pub extern fn SecKeychainSetAccess(keychain: SecKeychainRef, access: SecAccessRef) OSStatus;
pub const SecExternalFormat = u32;
pub const kSecFormatUnknown: c_int = 0;
pub const kSecFormatOpenSSL: c_int = 1;
pub const kSecFormatSSH: c_int = 2;
pub const kSecFormatBSAFE: c_int = 3;
pub const kSecFormatRawKey: c_int = 4;
pub const kSecFormatWrappedPKCS8: c_int = 5;
pub const kSecFormatWrappedOpenSSL: c_int = 6;
pub const kSecFormatWrappedSSH: c_int = 7;
pub const kSecFormatWrappedLSH: c_int = 8;
pub const kSecFormatX509Cert: c_int = 9;
pub const kSecFormatPEMSequence: c_int = 10;
pub const kSecFormatPKCS7: c_int = 11;
pub const kSecFormatPKCS12: c_int = 12;
pub const kSecFormatNetscapeCertSequence: c_int = 13;
pub const kSecFormatSSHv2: c_int = 14;
const enum_unnamed_1118 = c_uint;
pub const SecExternalItemType = u32;
pub const kSecItemTypeUnknown: c_int = 0;
pub const kSecItemTypePrivateKey: c_int = 1;
pub const kSecItemTypePublicKey: c_int = 2;
pub const kSecItemTypeSessionKey: c_int = 3;
pub const kSecItemTypeCertificate: c_int = 4;
pub const kSecItemTypeAggregate: c_int = 5;
const enum_unnamed_1119 = c_uint;
pub const SecItemImportExportFlags = u32;
pub const kSecItemPemArmour: c_int = 1;
const enum_unnamed_1120 = c_uint;
pub const SecKeyImportExportFlags = u32;
pub const kSecKeyImportOnlyOne: c_int = 1;
pub const kSecKeySecurePassphrase: c_int = 2;
pub const kSecKeyNoAccessControl: c_int = 4;
const enum_unnamed_1121 = c_uint;
pub const SecKeyImportExportParameters = extern struct {
    version: u32,
    flags: SecKeyImportExportFlags,
    passphrase: CFTypeRef,
    alertTitle: CFStringRef,
    alertPrompt: CFStringRef,
    accessRef: SecAccessRef,
    keyUsage: CSSM_KEYUSE,
    keyAttributes: CSSM_KEYATTR_FLAGS,
};
pub const SecItemImportExportKeyParameters = extern struct {
    version: u32,
    flags: SecKeyImportExportFlags,
    passphrase: CFTypeRef,
    alertTitle: CFStringRef,
    alertPrompt: CFStringRef,
    accessRef: SecAccessRef,
    keyUsage: CFArrayRef,
    keyAttributes: CFArrayRef,
};
pub extern fn SecKeychainItemExport(keychainItemOrArray: CFTypeRef, outputFormat: SecExternalFormat, flags: SecItemImportExportFlags, keyParams: [*c]const SecKeyImportExportParameters, exportedData: [*c]CFDataRef) OSStatus;
pub extern fn SecItemExport(secItemOrArray: CFTypeRef, outputFormat: SecExternalFormat, flags: SecItemImportExportFlags, keyParams: [*c]const SecItemImportExportKeyParameters, exportedData: [*c]CFDataRef) OSStatus;
pub extern fn SecKeychainItemImport(importedData: CFDataRef, fileNameOrExtension: CFStringRef, inputFormat: [*c]SecExternalFormat, itemType: [*c]SecExternalItemType, flags: SecItemImportExportFlags, keyParams: [*c]const SecKeyImportExportParameters, importKeychain: SecKeychainRef, outItems: [*c]CFArrayRef) OSStatus;
pub extern fn SecItemImport(importedData: CFDataRef, fileNameOrExtension: CFStringRef, inputFormat: [*c]SecExternalFormat, itemType: [*c]SecExternalItemType, flags: SecItemImportExportFlags, keyParams: [*c]const SecItemImportExportKeyParameters, importKeychain: SecKeychainRef, outItems: [*c]CFArrayRef) OSStatus;
pub extern const kSecImportExportPassphrase: CFStringRef;
pub extern const kSecImportExportKeychain: CFStringRef;
pub extern const kSecImportExportAccess: CFStringRef;
pub extern const kSecImportItemLabel: CFStringRef;
pub extern const kSecImportItemKeyID: CFStringRef;
pub extern const kSecImportItemTrust: CFStringRef;
pub extern const kSecImportItemCertChain: CFStringRef;
pub extern const kSecImportItemIdentity: CFStringRef;
pub extern fn SecPKCS12Import(pkcs12_data: CFDataRef, options: CFDictionaryRef, items: [*c]CFArrayRef) OSStatus;
pub const SecTrustResultType = u32;
pub const kSecTrustResultInvalid: c_int = 0;
pub const kSecTrustResultProceed: c_int = 1;
pub const kSecTrustResultConfirm: c_int = 2;
pub const kSecTrustResultDeny: c_int = 3;
pub const kSecTrustResultUnspecified: c_int = 4;
pub const kSecTrustResultRecoverableTrustFailure: c_int = 5;
pub const kSecTrustResultFatalTrustFailure: c_int = 6;
pub const kSecTrustResultOtherError: c_int = 7;
const enum_unnamed_1122 = c_uint;
pub const struct___SecTrust = opaque {};
pub const SecTrustRef = ?*struct___SecTrust;
pub extern const kSecPropertyTypeTitle: CFStringRef;
pub extern const kSecPropertyTypeError: CFStringRef;
pub extern const kSecTrustEvaluationDate: CFStringRef;
pub extern const kSecTrustExtendedValidation: CFStringRef;
pub extern const kSecTrustOrganizationName: CFStringRef;
pub extern const kSecTrustResultValue: CFStringRef;
pub extern const kSecTrustRevocationChecked: CFStringRef;
pub extern const kSecTrustRevocationValidUntilDate: CFStringRef;
pub extern const kSecTrustCertificateTransparency: CFStringRef;
pub extern const kSecTrustCertificateTransparencyWhiteList: CFStringRef; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecTrust.h:188:16: warning: unsupported type: 'BlockPointer'
pub const SecTrustCallback = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecTrust.h:188:16
pub extern fn SecTrustGetTypeID() CFTypeID;
pub extern fn SecTrustCreateWithCertificates(certificates: CFTypeRef, policies: CFTypeRef, trust: [*c]SecTrustRef) OSStatus;
pub extern fn SecTrustSetPolicies(trust: SecTrustRef, policies: CFTypeRef) OSStatus;
pub extern fn SecTrustCopyPolicies(trust: SecTrustRef, policies: [*c]CFArrayRef) OSStatus;
pub extern fn SecTrustSetNetworkFetchAllowed(trust: SecTrustRef, allowFetch: Boolean) OSStatus;
pub extern fn SecTrustGetNetworkFetchAllowed(trust: SecTrustRef, allowFetch: [*c]Boolean) OSStatus;
pub extern fn SecTrustSetAnchorCertificates(trust: SecTrustRef, anchorCertificates: CFArrayRef) OSStatus;
pub extern fn SecTrustSetAnchorCertificatesOnly(trust: SecTrustRef, anchorCertificatesOnly: Boolean) OSStatus;
pub extern fn SecTrustCopyCustomAnchorCertificates(trust: SecTrustRef, anchors: [*c]CFArrayRef) OSStatus;
pub extern fn SecTrustSetVerifyDate(trust: SecTrustRef, verifyDate: CFDateRef) OSStatus;
pub extern fn SecTrustGetVerifyTime(trust: SecTrustRef) CFAbsoluteTime;
pub extern fn SecTrustEvaluate(trust: SecTrustRef, result: [*c]SecTrustResultType) OSStatus;
pub extern fn SecTrustEvaluateAsync(trust: SecTrustRef, queue: dispatch_queue_t, result: SecTrustCallback) OSStatus;
pub extern fn SecTrustEvaluateWithError(trust: SecTrustRef, @"error": [*c]CFErrorRef) bool; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecTrust.h:419:16: warning: unsupported type: 'BlockPointer'
pub const SecTrustWithErrorCallback = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecTrust.h:419:16
pub extern fn SecTrustEvaluateAsyncWithError(trust: SecTrustRef, queue: dispatch_queue_t, result: SecTrustWithErrorCallback) OSStatus;
pub extern fn SecTrustGetTrustResult(trust: SecTrustRef, result: [*c]SecTrustResultType) OSStatus;
pub extern fn SecTrustCopyPublicKey(trust: SecTrustRef) SecKeyRef;
pub extern fn SecTrustCopyKey(trust: SecTrustRef) SecKeyRef;
pub extern fn SecTrustGetCertificateCount(trust: SecTrustRef) CFIndex;
pub extern fn SecTrustGetCertificateAtIndex(trust: SecTrustRef, ix: CFIndex) SecCertificateRef;
pub extern fn SecTrustCopyExceptions(trust: SecTrustRef) CFDataRef;
pub extern fn SecTrustSetExceptions(trust: SecTrustRef, exceptions: CFDataRef) bool;
pub extern fn SecTrustCopyProperties(trust: SecTrustRef) CFArrayRef;
pub extern fn SecTrustCopyResult(trust: SecTrustRef) CFDictionaryRef;
pub extern fn SecTrustSetOCSPResponse(trust: SecTrustRef, responseData: CFTypeRef) OSStatus;
pub extern fn SecTrustSetSignedCertificateTimestamps(trust: SecTrustRef, sctArray: CFArrayRef) OSStatus;
pub extern fn SecTrustCopyCertificateChain(trust: SecTrustRef) CFArrayRef;
pub const SecTrustUserSetting = SecTrustResultType;
pub const SecTrustOptionFlags = u32;
pub const kSecTrustOptionAllowExpired: c_int = 1;
pub const kSecTrustOptionLeafIsCA: c_int = 2;
pub const kSecTrustOptionFetchIssuerFromNet: c_int = 4;
pub const kSecTrustOptionAllowExpiredRoot: c_int = 8;
pub const kSecTrustOptionRequireRevPerCert: c_int = 16;
pub const kSecTrustOptionUseTrustSettings: c_int = 32;
pub const kSecTrustOptionImplicitAnchors: c_int = 64;
const enum_unnamed_1123 = c_uint;
pub extern fn SecTrustSetOptions(trustRef: SecTrustRef, options: SecTrustOptionFlags) OSStatus;
pub extern fn SecTrustSetParameters(trustRef: SecTrustRef, action: CSSM_TP_ACTION, actionData: CFDataRef) OSStatus;
pub extern fn SecTrustSetKeychains(trust: SecTrustRef, keychainOrArray: CFTypeRef) OSStatus;
pub extern fn SecTrustGetResult(trustRef: SecTrustRef, result: [*c]SecTrustResultType, certChain: [*c]CFArrayRef, statusChain: [*c][*c]CSSM_TP_APPLE_EVIDENCE_INFO) OSStatus;
pub extern fn SecTrustGetCssmResult(trust: SecTrustRef, result: [*c]CSSM_TP_VERIFY_CONTEXT_RESULT_PTR) OSStatus;
pub extern fn SecTrustGetCssmResultCode(trust: SecTrustRef, resultCode: [*c]OSStatus) OSStatus;
pub extern fn SecTrustGetTPHandle(trust: SecTrustRef, handle: [*c]CSSM_TP_HANDLE) OSStatus;
pub extern fn SecTrustCopyAnchorCertificates(anchors: [*c]CFArrayRef) OSStatus;
pub extern const kSecSharedPassword: CFStringRef; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecSharedCredential.h:70:6: warning: unsupported type: 'BlockPointer'
pub const SecAddSharedWebCredential = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecSharedCredential.h:70:6
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecSharedCredential.h:93:6: warning: unsupported type: 'BlockPointer'
pub const SecRequestSharedWebCredential = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecSharedCredential.h:93:6
pub extern fn SecCreateSharedWebCredentialPassword() CFStringRef;
pub extern fn sec_retain(obj: ?*anyopaque) ?*anyopaque;
pub extern fn sec_release(obj: ?*anyopaque) void;
pub const struct_sec_object = opaque {};
pub const sec_object_t = ?*struct_sec_object;
pub const SSLCipherSuite = u16;
pub const SSL_NULL_WITH_NULL_NULL: c_int = 0;
pub const SSL_RSA_WITH_NULL_MD5: c_int = 1;
pub const SSL_RSA_WITH_NULL_SHA: c_int = 2;
pub const SSL_RSA_EXPORT_WITH_RC4_40_MD5: c_int = 3;
pub const SSL_RSA_WITH_RC4_128_MD5: c_int = 4;
pub const SSL_RSA_WITH_RC4_128_SHA: c_int = 5;
pub const SSL_RSA_EXPORT_WITH_RC2_CBC_40_MD5: c_int = 6;
pub const SSL_RSA_WITH_IDEA_CBC_SHA: c_int = 7;
pub const SSL_RSA_EXPORT_WITH_DES40_CBC_SHA: c_int = 8;
pub const SSL_RSA_WITH_DES_CBC_SHA: c_int = 9;
pub const SSL_RSA_WITH_3DES_EDE_CBC_SHA: c_int = 10;
pub const SSL_DH_DSS_EXPORT_WITH_DES40_CBC_SHA: c_int = 11;
pub const SSL_DH_DSS_WITH_DES_CBC_SHA: c_int = 12;
pub const SSL_DH_DSS_WITH_3DES_EDE_CBC_SHA: c_int = 13;
pub const SSL_DH_RSA_EXPORT_WITH_DES40_CBC_SHA: c_int = 14;
pub const SSL_DH_RSA_WITH_DES_CBC_SHA: c_int = 15;
pub const SSL_DH_RSA_WITH_3DES_EDE_CBC_SHA: c_int = 16;
pub const SSL_DHE_DSS_EXPORT_WITH_DES40_CBC_SHA: c_int = 17;
pub const SSL_DHE_DSS_WITH_DES_CBC_SHA: c_int = 18;
pub const SSL_DHE_DSS_WITH_3DES_EDE_CBC_SHA: c_int = 19;
pub const SSL_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA: c_int = 20;
pub const SSL_DHE_RSA_WITH_DES_CBC_SHA: c_int = 21;
pub const SSL_DHE_RSA_WITH_3DES_EDE_CBC_SHA: c_int = 22;
pub const SSL_DH_anon_EXPORT_WITH_RC4_40_MD5: c_int = 23;
pub const SSL_DH_anon_WITH_RC4_128_MD5: c_int = 24;
pub const SSL_DH_anon_EXPORT_WITH_DES40_CBC_SHA: c_int = 25;
pub const SSL_DH_anon_WITH_DES_CBC_SHA: c_int = 26;
pub const SSL_DH_anon_WITH_3DES_EDE_CBC_SHA: c_int = 27;
pub const SSL_FORTEZZA_DMS_WITH_NULL_SHA: c_int = 28;
pub const SSL_FORTEZZA_DMS_WITH_FORTEZZA_CBC_SHA: c_int = 29;
pub const TLS_RSA_WITH_AES_128_CBC_SHA: c_int = 47;
pub const TLS_DH_DSS_WITH_AES_128_CBC_SHA: c_int = 48;
pub const TLS_DH_RSA_WITH_AES_128_CBC_SHA: c_int = 49;
pub const TLS_DHE_DSS_WITH_AES_128_CBC_SHA: c_int = 50;
pub const TLS_DHE_RSA_WITH_AES_128_CBC_SHA: c_int = 51;
pub const TLS_DH_anon_WITH_AES_128_CBC_SHA: c_int = 52;
pub const TLS_RSA_WITH_AES_256_CBC_SHA: c_int = 53;
pub const TLS_DH_DSS_WITH_AES_256_CBC_SHA: c_int = 54;
pub const TLS_DH_RSA_WITH_AES_256_CBC_SHA: c_int = 55;
pub const TLS_DHE_DSS_WITH_AES_256_CBC_SHA: c_int = 56;
pub const TLS_DHE_RSA_WITH_AES_256_CBC_SHA: c_int = 57;
pub const TLS_DH_anon_WITH_AES_256_CBC_SHA: c_int = 58;
pub const TLS_ECDH_ECDSA_WITH_NULL_SHA: c_int = 49153;
pub const TLS_ECDH_ECDSA_WITH_RC4_128_SHA: c_int = 49154;
pub const TLS_ECDH_ECDSA_WITH_3DES_EDE_CBC_SHA: c_int = 49155;
pub const TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA: c_int = 49156;
pub const TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA: c_int = 49157;
pub const TLS_ECDHE_ECDSA_WITH_NULL_SHA: c_int = 49158;
pub const TLS_ECDHE_ECDSA_WITH_RC4_128_SHA: c_int = 49159;
pub const TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: c_int = 49160;
pub const TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: c_int = 49161;
pub const TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: c_int = 49162;
pub const TLS_ECDH_RSA_WITH_NULL_SHA: c_int = 49163;
pub const TLS_ECDH_RSA_WITH_RC4_128_SHA: c_int = 49164;
pub const TLS_ECDH_RSA_WITH_3DES_EDE_CBC_SHA: c_int = 49165;
pub const TLS_ECDH_RSA_WITH_AES_128_CBC_SHA: c_int = 49166;
pub const TLS_ECDH_RSA_WITH_AES_256_CBC_SHA: c_int = 49167;
pub const TLS_ECDHE_RSA_WITH_NULL_SHA: c_int = 49168;
pub const TLS_ECDHE_RSA_WITH_RC4_128_SHA: c_int = 49169;
pub const TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: c_int = 49170;
pub const TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA: c_int = 49171;
pub const TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA: c_int = 49172;
pub const TLS_ECDH_anon_WITH_NULL_SHA: c_int = 49173;
pub const TLS_ECDH_anon_WITH_RC4_128_SHA: c_int = 49174;
pub const TLS_ECDH_anon_WITH_3DES_EDE_CBC_SHA: c_int = 49175;
pub const TLS_ECDH_anon_WITH_AES_128_CBC_SHA: c_int = 49176;
pub const TLS_ECDH_anon_WITH_AES_256_CBC_SHA: c_int = 49177;
pub const TLS_ECDHE_PSK_WITH_AES_128_CBC_SHA: c_int = 49205;
pub const TLS_ECDHE_PSK_WITH_AES_256_CBC_SHA: c_int = 49206;
pub const TLS_PSK_WITH_CHACHA20_POLY1305_SHA256: c_int = 52395;
pub const TLS_NULL_WITH_NULL_NULL: c_int = 0;
pub const TLS_RSA_WITH_NULL_MD5: c_int = 1;
pub const TLS_RSA_WITH_NULL_SHA: c_int = 2;
pub const TLS_RSA_WITH_RC4_128_MD5: c_int = 4;
pub const TLS_RSA_WITH_RC4_128_SHA: c_int = 5;
pub const TLS_RSA_WITH_3DES_EDE_CBC_SHA: c_int = 10;
pub const TLS_RSA_WITH_NULL_SHA256: c_int = 59;
pub const TLS_RSA_WITH_AES_128_CBC_SHA256: c_int = 60;
pub const TLS_RSA_WITH_AES_256_CBC_SHA256: c_int = 61;
pub const TLS_DH_DSS_WITH_3DES_EDE_CBC_SHA: c_int = 13;
pub const TLS_DH_RSA_WITH_3DES_EDE_CBC_SHA: c_int = 16;
pub const TLS_DHE_DSS_WITH_3DES_EDE_CBC_SHA: c_int = 19;
pub const TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA: c_int = 22;
pub const TLS_DH_DSS_WITH_AES_128_CBC_SHA256: c_int = 62;
pub const TLS_DH_RSA_WITH_AES_128_CBC_SHA256: c_int = 63;
pub const TLS_DHE_DSS_WITH_AES_128_CBC_SHA256: c_int = 64;
pub const TLS_DHE_RSA_WITH_AES_128_CBC_SHA256: c_int = 103;
pub const TLS_DH_DSS_WITH_AES_256_CBC_SHA256: c_int = 104;
pub const TLS_DH_RSA_WITH_AES_256_CBC_SHA256: c_int = 105;
pub const TLS_DHE_DSS_WITH_AES_256_CBC_SHA256: c_int = 106;
pub const TLS_DHE_RSA_WITH_AES_256_CBC_SHA256: c_int = 107;
pub const TLS_DH_anon_WITH_RC4_128_MD5: c_int = 24;
pub const TLS_DH_anon_WITH_3DES_EDE_CBC_SHA: c_int = 27;
pub const TLS_DH_anon_WITH_AES_128_CBC_SHA256: c_int = 108;
pub const TLS_DH_anon_WITH_AES_256_CBC_SHA256: c_int = 109;
pub const TLS_PSK_WITH_RC4_128_SHA: c_int = 138;
pub const TLS_PSK_WITH_3DES_EDE_CBC_SHA: c_int = 139;
pub const TLS_PSK_WITH_AES_128_CBC_SHA: c_int = 140;
pub const TLS_PSK_WITH_AES_256_CBC_SHA: c_int = 141;
pub const TLS_DHE_PSK_WITH_RC4_128_SHA: c_int = 142;
pub const TLS_DHE_PSK_WITH_3DES_EDE_CBC_SHA: c_int = 143;
pub const TLS_DHE_PSK_WITH_AES_128_CBC_SHA: c_int = 144;
pub const TLS_DHE_PSK_WITH_AES_256_CBC_SHA: c_int = 145;
pub const TLS_RSA_PSK_WITH_RC4_128_SHA: c_int = 146;
pub const TLS_RSA_PSK_WITH_3DES_EDE_CBC_SHA: c_int = 147;
pub const TLS_RSA_PSK_WITH_AES_128_CBC_SHA: c_int = 148;
pub const TLS_RSA_PSK_WITH_AES_256_CBC_SHA: c_int = 149;
pub const TLS_PSK_WITH_NULL_SHA: c_int = 44;
pub const TLS_DHE_PSK_WITH_NULL_SHA: c_int = 45;
pub const TLS_RSA_PSK_WITH_NULL_SHA: c_int = 46;
pub const TLS_RSA_WITH_AES_128_GCM_SHA256: c_int = 156;
pub const TLS_RSA_WITH_AES_256_GCM_SHA384: c_int = 157;
pub const TLS_DHE_RSA_WITH_AES_128_GCM_SHA256: c_int = 158;
pub const TLS_DHE_RSA_WITH_AES_256_GCM_SHA384: c_int = 159;
pub const TLS_DH_RSA_WITH_AES_128_GCM_SHA256: c_int = 160;
pub const TLS_DH_RSA_WITH_AES_256_GCM_SHA384: c_int = 161;
pub const TLS_DHE_DSS_WITH_AES_128_GCM_SHA256: c_int = 162;
pub const TLS_DHE_DSS_WITH_AES_256_GCM_SHA384: c_int = 163;
pub const TLS_DH_DSS_WITH_AES_128_GCM_SHA256: c_int = 164;
pub const TLS_DH_DSS_WITH_AES_256_GCM_SHA384: c_int = 165;
pub const TLS_DH_anon_WITH_AES_128_GCM_SHA256: c_int = 166;
pub const TLS_DH_anon_WITH_AES_256_GCM_SHA384: c_int = 167;
pub const TLS_PSK_WITH_AES_128_GCM_SHA256: c_int = 168;
pub const TLS_PSK_WITH_AES_256_GCM_SHA384: c_int = 169;
pub const TLS_DHE_PSK_WITH_AES_128_GCM_SHA256: c_int = 170;
pub const TLS_DHE_PSK_WITH_AES_256_GCM_SHA384: c_int = 171;
pub const TLS_RSA_PSK_WITH_AES_128_GCM_SHA256: c_int = 172;
pub const TLS_RSA_PSK_WITH_AES_256_GCM_SHA384: c_int = 173;
pub const TLS_PSK_WITH_AES_128_CBC_SHA256: c_int = 174;
pub const TLS_PSK_WITH_AES_256_CBC_SHA384: c_int = 175;
pub const TLS_PSK_WITH_NULL_SHA256: c_int = 176;
pub const TLS_PSK_WITH_NULL_SHA384: c_int = 177;
pub const TLS_DHE_PSK_WITH_AES_128_CBC_SHA256: c_int = 178;
pub const TLS_DHE_PSK_WITH_AES_256_CBC_SHA384: c_int = 179;
pub const TLS_DHE_PSK_WITH_NULL_SHA256: c_int = 180;
pub const TLS_DHE_PSK_WITH_NULL_SHA384: c_int = 181;
pub const TLS_RSA_PSK_WITH_AES_128_CBC_SHA256: c_int = 182;
pub const TLS_RSA_PSK_WITH_AES_256_CBC_SHA384: c_int = 183;
pub const TLS_RSA_PSK_WITH_NULL_SHA256: c_int = 184;
pub const TLS_RSA_PSK_WITH_NULL_SHA384: c_int = 185;
pub const TLS_AES_128_GCM_SHA256: c_int = 4865;
pub const TLS_AES_256_GCM_SHA384: c_int = 4866;
pub const TLS_CHACHA20_POLY1305_SHA256: c_int = 4867;
pub const TLS_AES_128_CCM_SHA256: c_int = 4868;
pub const TLS_AES_128_CCM_8_SHA256: c_int = 4869;
pub const TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: c_int = 49187;
pub const TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: c_int = 49188;
pub const TLS_ECDH_ECDSA_WITH_AES_128_CBC_SHA256: c_int = 49189;
pub const TLS_ECDH_ECDSA_WITH_AES_256_CBC_SHA384: c_int = 49190;
pub const TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256: c_int = 49191;
pub const TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA384: c_int = 49192;
pub const TLS_ECDH_RSA_WITH_AES_128_CBC_SHA256: c_int = 49193;
pub const TLS_ECDH_RSA_WITH_AES_256_CBC_SHA384: c_int = 49194;
pub const TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: c_int = 49195;
pub const TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: c_int = 49196;
pub const TLS_ECDH_ECDSA_WITH_AES_128_GCM_SHA256: c_int = 49197;
pub const TLS_ECDH_ECDSA_WITH_AES_256_GCM_SHA384: c_int = 49198;
pub const TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256: c_int = 49199;
pub const TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384: c_int = 49200;
pub const TLS_ECDH_RSA_WITH_AES_128_GCM_SHA256: c_int = 49201;
pub const TLS_ECDH_RSA_WITH_AES_256_GCM_SHA384: c_int = 49202;
pub const TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: c_int = 52392;
pub const TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: c_int = 52393;
pub const TLS_EMPTY_RENEGOTIATION_INFO_SCSV: c_int = 255;
pub const SSL_RSA_WITH_RC2_CBC_MD5: c_int = 65408;
pub const SSL_RSA_WITH_IDEA_CBC_MD5: c_int = 65409;
pub const SSL_RSA_WITH_DES_CBC_MD5: c_int = 65410;
pub const SSL_RSA_WITH_3DES_EDE_CBC_MD5: c_int = 65411;
pub const SSL_NO_SUCH_CIPHERSUITE: c_int = 65535;
const enum_unnamed_1124 = c_uint;
pub const SSLCiphersuiteGroup = c_int;
pub const kSSLCiphersuiteGroupDefault: c_int = 0;
pub const kSSLCiphersuiteGroupCompatibility: c_int = 1;
pub const kSSLCiphersuiteGroupLegacy: c_int = 2;
pub const kSSLCiphersuiteGroupATS: c_int = 3;
pub const kSSLCiphersuiteGroupATSCompatibility: c_int = 4;
const enum_unnamed_1125 = c_uint;
pub const struct_sec_trust = opaque {};
pub const sec_trust_t = ?*struct_sec_trust;
pub const struct_sec_identity = opaque {};
pub const sec_identity_t = ?*struct_sec_identity;
pub const struct_sec_certificate = opaque {};
pub const sec_certificate_t = ?*struct_sec_certificate;
pub const tls_protocol_version_t = u16;
pub const tls_protocol_version_TLSv10: c_int = 769;
pub const tls_protocol_version_TLSv11: c_int = 770;
pub const tls_protocol_version_TLSv12: c_int = 771;
pub const tls_protocol_version_TLSv13: c_int = 772;
pub const tls_protocol_version_DTLSv10: c_int = 65279;
pub const tls_protocol_version_DTLSv12: c_int = 65277;
const enum_unnamed_1126 = c_uint;
pub const tls_ciphersuite_t = u16;
pub const tls_ciphersuite_RSA_WITH_3DES_EDE_CBC_SHA: c_int = 10;
pub const tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA: c_int = 47;
pub const tls_ciphersuite_RSA_WITH_AES_256_CBC_SHA: c_int = 53;
pub const tls_ciphersuite_RSA_WITH_AES_128_GCM_SHA256: c_int = 156;
pub const tls_ciphersuite_RSA_WITH_AES_256_GCM_SHA384: c_int = 157;
pub const tls_ciphersuite_RSA_WITH_AES_128_CBC_SHA256: c_int = 60;
pub const tls_ciphersuite_RSA_WITH_AES_256_CBC_SHA256: c_int = 61;
pub const tls_ciphersuite_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA: c_int = 49160;
pub const tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_CBC_SHA: c_int = 49161;
pub const tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_CBC_SHA: c_int = 49162;
pub const tls_ciphersuite_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA: c_int = 49170;
pub const tls_ciphersuite_ECDHE_RSA_WITH_AES_128_CBC_SHA: c_int = 49171;
pub const tls_ciphersuite_ECDHE_RSA_WITH_AES_256_CBC_SHA: c_int = 49172;
pub const tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256: c_int = 49187;
pub const tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384: c_int = 49188;
pub const tls_ciphersuite_ECDHE_RSA_WITH_AES_128_CBC_SHA256: c_int = 49191;
pub const tls_ciphersuite_ECDHE_RSA_WITH_AES_256_CBC_SHA384: c_int = 49192;
pub const tls_ciphersuite_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256: c_int = 49195;
pub const tls_ciphersuite_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384: c_int = 49196;
pub const tls_ciphersuite_ECDHE_RSA_WITH_AES_128_GCM_SHA256: c_int = 49199;
pub const tls_ciphersuite_ECDHE_RSA_WITH_AES_256_GCM_SHA384: c_int = 49200;
pub const tls_ciphersuite_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256: c_int = 52392;
pub const tls_ciphersuite_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256: c_int = 52393;
pub const tls_ciphersuite_AES_128_GCM_SHA256: c_int = 4865;
pub const tls_ciphersuite_AES_256_GCM_SHA384: c_int = 4866;
pub const tls_ciphersuite_CHACHA20_POLY1305_SHA256: c_int = 4867;
const enum_unnamed_1127 = c_uint;
pub const tls_ciphersuite_group_t = u16;
pub const tls_ciphersuite_group_default: c_int = 0;
pub const tls_ciphersuite_group_compatibility: c_int = 1;
pub const tls_ciphersuite_group_legacy: c_int = 2;
pub const tls_ciphersuite_group_ats: c_int = 3;
pub const tls_ciphersuite_group_ats_compatibility: c_int = 4;
const enum_unnamed_1128 = c_uint;
pub const SSLProtocol = c_int;
pub const kSSLProtocolUnknown: c_int = 0;
pub const kTLSProtocol1: c_int = 4;
pub const kTLSProtocol11: c_int = 7;
pub const kTLSProtocol12: c_int = 8;
pub const kDTLSProtocol1: c_int = 9;
pub const kTLSProtocol13: c_int = 10;
pub const kDTLSProtocol12: c_int = 11;
pub const kTLSProtocolMaxSupported: c_int = 999;
pub const kSSLProtocol2: c_int = 1;
pub const kSSLProtocol3: c_int = 2;
pub const kSSLProtocol3Only: c_int = 3;
pub const kTLSProtocol1Only: c_int = 5;
pub const kSSLProtocolAll: c_int = 6;
const enum_unnamed_1129 = c_uint;
pub extern fn sec_trust_create(trust: SecTrustRef) sec_trust_t;
pub extern fn sec_trust_copy_ref(trust: sec_trust_t) SecTrustRef;
pub extern fn sec_identity_create(identity: SecIdentityRef) sec_identity_t;
pub extern fn sec_identity_create_with_certificates(identity: SecIdentityRef, certificates: CFArrayRef) sec_identity_t; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolTypes.h:255:1: warning: unsupported type: 'BlockPointer'
pub const sec_identity_access_certificates = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolTypes.h:255:1
pub extern fn sec_identity_copy_ref(identity: sec_identity_t) SecIdentityRef;
pub extern fn sec_identity_copy_certificates_ref(identity: sec_identity_t) CFArrayRef;
pub extern fn sec_certificate_create(certificate: SecCertificateRef) sec_certificate_t;
pub extern fn sec_certificate_copy_ref(certificate: sec_certificate_t) SecCertificateRef;
pub const struct_sec_protocol_metadata = opaque {};
pub const sec_protocol_metadata_t = ?*struct_sec_protocol_metadata;
pub extern fn sec_protocol_metadata_get_negotiated_protocol(metadata: sec_protocol_metadata_t) [*c]const u8;
pub extern fn sec_protocol_metadata_copy_peer_public_key(metadata: sec_protocol_metadata_t) dispatch_data_t;
pub extern fn sec_protocol_metadata_get_negotiated_tls_protocol_version(metadata: sec_protocol_metadata_t) tls_protocol_version_t;
pub extern fn sec_protocol_metadata_get_negotiated_protocol_version(metadata: sec_protocol_metadata_t) SSLProtocol;
pub extern fn sec_protocol_metadata_get_negotiated_tls_ciphersuite(metadata: sec_protocol_metadata_t) tls_ciphersuite_t;
pub extern fn sec_protocol_metadata_get_negotiated_ciphersuite(metadata: sec_protocol_metadata_t) SSLCipherSuite;
pub extern fn sec_protocol_metadata_get_early_data_accepted(metadata: sec_protocol_metadata_t) bool; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolMetadata.h:190:1: warning: unsupported type: 'BlockPointer'
pub const sec_protocol_metadata_access_peer_certificate_chain = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolMetadata.h:190:1
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolMetadata.h:209:1: warning: unsupported type: 'BlockPointer'
pub const sec_protocol_metadata_access_ocsp_response = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolMetadata.h:209:1
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolMetadata.h:229:1: warning: unsupported type: 'BlockPointer'
pub const sec_protocol_metadata_access_supported_signature_algorithms = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolMetadata.h:229:1
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolMetadata.h:248:1: warning: unsupported type: 'BlockPointer'
pub const sec_protocol_metadata_access_distinguished_names = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolMetadata.h:248:1
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolMetadata.h:267:1: warning: unsupported type: 'BlockPointer'
pub const sec_protocol_metadata_access_pre_shared_keys = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolMetadata.h:267:1
pub extern fn sec_protocol_metadata_get_server_name(metadata: sec_protocol_metadata_t) [*c]const u8;
pub extern fn sec_protocol_metadata_peers_are_equal(metadataA: sec_protocol_metadata_t, metadataB: sec_protocol_metadata_t) bool;
pub extern fn sec_protocol_metadata_challenge_parameters_are_equal(metadataA: sec_protocol_metadata_t, metadataB: sec_protocol_metadata_t) bool;
pub extern fn sec_protocol_metadata_create_secret(metadata: sec_protocol_metadata_t, label_len: usize, label: [*c]const u8, exporter_length: usize) dispatch_data_t;
pub extern fn sec_protocol_metadata_create_secret_with_context(metadata: sec_protocol_metadata_t, label_len: usize, label: [*c]const u8, context_len: usize, context: [*c]const u8, exporter_length: usize) dispatch_data_t;
pub const struct_sec_protocol_options = opaque {};
pub const sec_protocol_options_t = ?*struct_sec_protocol_options;
pub extern fn sec_protocol_options_are_equal(optionsA: sec_protocol_options_t, optionsB: sec_protocol_options_t) bool;
pub extern fn sec_protocol_options_set_local_identity(options: sec_protocol_options_t, identity: sec_identity_t) void;
pub extern fn sec_protocol_options_append_tls_ciphersuite(options: sec_protocol_options_t, ciphersuite: tls_ciphersuite_t) void;
pub extern fn sec_protocol_options_add_tls_ciphersuite(options: sec_protocol_options_t, ciphersuite: SSLCipherSuite) void;
pub extern fn sec_protocol_options_append_tls_ciphersuite_group(options: sec_protocol_options_t, group: tls_ciphersuite_group_t) void;
pub extern fn sec_protocol_options_add_tls_ciphersuite_group(options: sec_protocol_options_t, group: SSLCiphersuiteGroup) void;
pub extern fn sec_protocol_options_set_tls_min_version(options: sec_protocol_options_t, version: SSLProtocol) void;
pub extern fn sec_protocol_options_set_min_tls_protocol_version(options: sec_protocol_options_t, version: tls_protocol_version_t) void;
pub extern fn sec_protocol_options_get_default_min_tls_protocol_version() tls_protocol_version_t;
pub extern fn sec_protocol_options_get_default_min_dtls_protocol_version() tls_protocol_version_t;
pub extern fn sec_protocol_options_set_tls_max_version(options: sec_protocol_options_t, version: SSLProtocol) void;
pub extern fn sec_protocol_options_set_max_tls_protocol_version(options: sec_protocol_options_t, version: tls_protocol_version_t) void;
pub extern fn sec_protocol_options_get_default_max_tls_protocol_version() tls_protocol_version_t;
pub extern fn sec_protocol_options_get_default_max_dtls_protocol_version() tls_protocol_version_t;
pub extern fn sec_protocol_options_get_enable_encrypted_client_hello(options: sec_protocol_options_t) bool;
pub extern fn sec_protocol_options_get_quic_use_legacy_codepoint(options: sec_protocol_options_t) bool;
pub extern fn sec_protocol_options_add_tls_application_protocol(options: sec_protocol_options_t, application_protocol: [*c]const u8) void;
pub extern fn sec_protocol_options_set_tls_server_name(options: sec_protocol_options_t, server_name: [*c]const u8) void;
pub extern fn sec_protocol_options_set_tls_diffie_hellman_parameters(options: sec_protocol_options_t, params: dispatch_data_t) void;
pub extern fn sec_protocol_options_add_pre_shared_key(options: sec_protocol_options_t, psk: dispatch_data_t, psk_identity: dispatch_data_t) void;
pub extern fn sec_protocol_options_set_tls_pre_shared_key_identity_hint(options: sec_protocol_options_t, psk_identity_hint: dispatch_data_t) void; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolOptions.h:405:16: warning: unsupported type: 'BlockPointer'
pub const sec_protocol_pre_shared_key_selection_complete_t = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolOptions.h:405:16
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolOptions.h:422:16: warning: unsupported type: 'BlockPointer'
pub const sec_protocol_pre_shared_key_selection_t = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolOptions.h:422:16
pub extern fn sec_protocol_options_set_pre_shared_key_selection_block(options: sec_protocol_options_t, psk_selection_block: sec_protocol_pre_shared_key_selection_t, psk_selection_queue: dispatch_queue_t) void;
pub extern fn sec_protocol_options_set_tls_tickets_enabled(options: sec_protocol_options_t, tickets_enabled: bool) void;
pub extern fn sec_protocol_options_set_tls_is_fallback_attempt(options: sec_protocol_options_t, is_fallback_attempt: bool) void;
pub extern fn sec_protocol_options_set_tls_resumption_enabled(options: sec_protocol_options_t, resumption_enabled: bool) void;
pub extern fn sec_protocol_options_set_tls_false_start_enabled(options: sec_protocol_options_t, false_start_enabled: bool) void;
pub extern fn sec_protocol_options_set_tls_ocsp_enabled(options: sec_protocol_options_t, ocsp_enabled: bool) void;
pub extern fn sec_protocol_options_set_tls_sct_enabled(options: sec_protocol_options_t, sct_enabled: bool) void;
pub extern fn sec_protocol_options_set_tls_renegotiation_enabled(options: sec_protocol_options_t, renegotiation_enabled: bool) void;
pub extern fn sec_protocol_options_set_peer_authentication_required(options: sec_protocol_options_t, peer_authentication_required: bool) void;
pub extern fn sec_protocol_options_set_peer_authentication_optional(options: sec_protocol_options_t, peer_authentication_optional: bool) void;
pub extern fn sec_protocol_options_set_enable_encrypted_client_hello(options: sec_protocol_options_t, enable_encrypted_client_hello: bool) void;
pub extern fn sec_protocol_options_set_quic_use_legacy_codepoint(options: sec_protocol_options_t, quic_use_legacy_codepoint: bool) void; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolOptions.h:640:16: warning: unsupported type: 'BlockPointer'
pub const sec_protocol_key_update_complete_t = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolOptions.h:640:16
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolOptions.h:654:16: warning: unsupported type: 'BlockPointer'
pub const sec_protocol_key_update_t = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolOptions.h:654:16
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolOptions.h:668:16: warning: unsupported type: 'BlockPointer'
pub const sec_protocol_challenge_complete_t = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolOptions.h:668:16
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolOptions.h:682:16: warning: unsupported type: 'BlockPointer'
pub const sec_protocol_challenge_t = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolOptions.h:682:16
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolOptions.h:693:16: warning: unsupported type: 'BlockPointer'
pub const sec_protocol_verify_complete_t = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolOptions.h:693:16
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolOptions.h:712:16: warning: unsupported type: 'BlockPointer'
pub const sec_protocol_verify_t = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolOptions.h:712:16
pub extern fn sec_protocol_options_set_key_update_block(options: sec_protocol_options_t, key_update_block: sec_protocol_key_update_t, key_update_queue: dispatch_queue_t) void;
pub extern fn sec_protocol_options_set_challenge_block(options: sec_protocol_options_t, challenge_block: sec_protocol_challenge_t, challenge_queue: dispatch_queue_t) void;
pub extern fn sec_protocol_options_set_verify_block(options: sec_protocol_options_t, verify_block: sec_protocol_verify_t, verify_block_queue: dispatch_queue_t) void;
pub const errAuthorizationSuccess: c_int = 0;
pub const errAuthorizationInvalidSet: c_int = -60001;
pub const errAuthorizationInvalidRef: c_int = -60002;
pub const errAuthorizationInvalidTag: c_int = -60003;
pub const errAuthorizationInvalidPointer: c_int = -60004;
pub const errAuthorizationDenied: c_int = -60005;
pub const errAuthorizationCanceled: c_int = -60006;
pub const errAuthorizationInteractionNotAllowed: c_int = -60007;
pub const errAuthorizationInternal: c_int = -60008;
pub const errAuthorizationExternalizeNotAllowed: c_int = -60009;
pub const errAuthorizationInternalizeNotAllowed: c_int = -60010;
pub const errAuthorizationInvalidFlags: c_int = -60011;
pub const errAuthorizationToolExecuteFailure: c_int = -60031;
pub const errAuthorizationToolEnvironmentError: c_int = -60032;
pub const errAuthorizationBadAddress: c_int = -60033;
const enum_unnamed_1130 = c_int;
pub const AuthorizationFlags = UInt32;
pub const kAuthorizationFlagDefaults: c_int = 0;
pub const kAuthorizationFlagInteractionAllowed: c_int = 1;
pub const kAuthorizationFlagExtendRights: c_int = 2;
pub const kAuthorizationFlagPartialRights: c_int = 4;
pub const kAuthorizationFlagDestroyRights: c_int = 8;
pub const kAuthorizationFlagPreAuthorize: c_int = 16;
pub const kAuthorizationFlagNoData: c_int = 1048576;
const enum_unnamed_1131 = c_uint;
pub const kAuthorizationFlagCanNotPreAuthorize: c_int = 1;
const enum_unnamed_1132 = c_uint;
pub const struct_AuthorizationOpaqueRef = opaque {};
pub const AuthorizationRef = ?*const struct_AuthorizationOpaqueRef;
pub const AuthorizationString = [*c]const u8;
pub const AuthorizationItem = extern struct {
    name: AuthorizationString,
    valueLength: usize,
    value: ?*anyopaque,
    flags: UInt32,
};
pub const AuthorizationItemSet = extern struct {
    count: UInt32,
    items: [*c]AuthorizationItem,
};
pub const kAuthorizationExternalFormLength: usize = 32;
pub const AuthorizationExternalForm = extern struct {
    bytes: [32]u8,
};
pub const AuthorizationRights = AuthorizationItemSet;
pub const AuthorizationEnvironment = AuthorizationItemSet;
pub extern fn AuthorizationCreate(rights: [*c]const AuthorizationRights, environment: [*c]const AuthorizationEnvironment, flags: AuthorizationFlags, authorization: [*c]AuthorizationRef) OSStatus;
pub extern fn AuthorizationFree(authorization: AuthorizationRef, flags: AuthorizationFlags) OSStatus;
pub extern fn AuthorizationCopyRights(authorization: AuthorizationRef, rights: [*c]const AuthorizationRights, environment: [*c]const AuthorizationEnvironment, flags: AuthorizationFlags, authorizedRights: [*c][*c]AuthorizationRights) OSStatus; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/Authorization.h:318:16: warning: unsupported type: 'BlockPointer'
pub const AuthorizationAsyncCallback = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/Authorization.h:318:16
pub extern fn AuthorizationCopyRightsAsync(authorization: AuthorizationRef, rights: [*c]const AuthorizationRights, environment: [*c]const AuthorizationEnvironment, flags: AuthorizationFlags, callbackBlock: AuthorizationAsyncCallback) void;
pub extern fn AuthorizationCopyInfo(authorization: AuthorizationRef, tag: AuthorizationString, info: [*c][*c]AuthorizationItemSet) OSStatus;
pub extern fn AuthorizationMakeExternalForm(authorization: AuthorizationRef, extForm: [*c]AuthorizationExternalForm) OSStatus;
pub extern fn AuthorizationCreateFromExternalForm(extForm: [*c]const AuthorizationExternalForm, authorization: [*c]AuthorizationRef) OSStatus;
pub extern fn AuthorizationFreeItemSet(set: [*c]AuthorizationItemSet) OSStatus;
pub extern fn AuthorizationExecuteWithPrivileges(authorization: AuthorizationRef, pathToTool: [*c]const u8, options: AuthorizationFlags, arguments: [*c]const [*c]u8, communicationsPipe: [*c][*c]FILE) OSStatus;
pub extern fn AuthorizationCopyPrivilegedReference(authorization: [*c]AuthorizationRef, flags: AuthorizationFlags) OSStatus;
pub const SecuritySessionId = UInt32;
pub const noSecuritySession: c_int = 0;
pub const callerSecuritySession: c_uint = 4294967295;
const enum_unnamed_1133 = c_uint;
pub const SessionAttributeBits = UInt32;
pub const sessionIsRoot: c_int = 1;
pub const sessionHasGraphicAccess: c_int = 16;
pub const sessionHasTTY: c_int = 32;
pub const sessionIsRemote: c_int = 4096;
const enum_unnamed_1134 = c_uint;
pub const SessionCreationFlags = UInt32;
pub const sessionKeepCurrentBootstrap: c_int = 32768;
const enum_unnamed_1135 = c_uint;
pub const errSessionSuccess: c_int = 0;
pub const errSessionInvalidId: c_int = -60500;
pub const errSessionInvalidAttributes: c_int = -60501;
pub const errSessionAuthorizationDenied: c_int = -60502;
pub const errSessionValueNotSet: c_int = -60503;
pub const errSessionInternal: c_int = -60008;
pub const errSessionInvalidFlags: c_int = -60011;
const enum_unnamed_1136 = c_int;
pub extern fn SessionGetInfo(session: SecuritySessionId, sessionId: [*c]SecuritySessionId, attributes: [*c]SessionAttributeBits) OSStatus;
pub extern fn SessionCreate(flags: SessionCreationFlags, attributes: SessionAttributeBits) OSStatus;
pub const CSSM_MANAGER_EVENT_TYPES = uint32;
pub const struct_cssm_manager_event_notification = extern struct {
    DestinationModuleManagerType: CSSM_SERVICE_MASK,
    SourceModuleManagerType: CSSM_SERVICE_MASK,
    Event: CSSM_MANAGER_EVENT_TYPES,
    EventId: uint32,
    EventData: SecAsn1Item,
};
pub const CSSM_MANAGER_EVENT_NOTIFICATION = struct_cssm_manager_event_notification;
pub const CSSM_MANAGER_EVENT_NOTIFICATION_PTR = [*c]struct_cssm_manager_event_notification;
pub extern fn CSSM_Init(Version: [*c]const CSSM_VERSION, Scope: CSSM_PRIVILEGE_SCOPE, CallerGuid: [*c]const CSSM_GUID, KeyHierarchy: CSSM_KEY_HIERARCHY, PvcPolicy: [*c]CSSM_PVC_MODE, Reserved: ?*const anyopaque) CSSM_RETURN;
pub extern fn CSSM_Terminate() CSSM_RETURN;
pub extern fn CSSM_ModuleLoad(ModuleGuid: [*c]const CSSM_GUID, KeyHierarchy: CSSM_KEY_HIERARCHY, AppNotifyCallback: CSSM_API_ModuleEventHandler, AppNotifyCallbackCtx: ?*anyopaque) CSSM_RETURN;
pub extern fn CSSM_ModuleUnload(ModuleGuid: [*c]const CSSM_GUID, AppNotifyCallback: CSSM_API_ModuleEventHandler, AppNotifyCallbackCtx: ?*anyopaque) CSSM_RETURN;
pub extern fn CSSM_Introduce(ModuleID: [*c]const CSSM_GUID, KeyHierarchy: CSSM_KEY_HIERARCHY) CSSM_RETURN;
pub extern fn CSSM_Unintroduce(ModuleID: [*c]const CSSM_GUID) CSSM_RETURN;
pub extern fn CSSM_ModuleAttach(ModuleGuid: [*c]const CSSM_GUID, Version: [*c]const CSSM_VERSION, MemoryFuncs: [*c]const CSSM_API_MEMORY_FUNCS, SubserviceID: uint32, SubServiceType: CSSM_SERVICE_TYPE, AttachFlags: CSSM_ATTACH_FLAGS, KeyHierarchy: CSSM_KEY_HIERARCHY, FunctionTable: [*c]CSSM_FUNC_NAME_ADDR, NumFunctionTable: uint32, Reserved: ?*const anyopaque, NewModuleHandle: CSSM_MODULE_HANDLE_PTR) CSSM_RETURN;
pub extern fn CSSM_ModuleDetach(ModuleHandle: CSSM_MODULE_HANDLE) CSSM_RETURN;
pub extern fn CSSM_SetPrivilege(Privilege: CSSM_PRIVILEGE) CSSM_RETURN;
pub extern fn CSSM_GetPrivilege(Privilege: [*c]CSSM_PRIVILEGE) CSSM_RETURN;
pub extern fn CSSM_GetModuleGUIDFromHandle(ModuleHandle: CSSM_MODULE_HANDLE, ModuleGUID: CSSM_GUID_PTR) CSSM_RETURN;
pub extern fn CSSM_GetSubserviceUIDFromHandle(ModuleHandle: CSSM_MODULE_HANDLE, SubserviceUID: CSSM_SUBSERVICE_UID_PTR) CSSM_RETURN;
pub extern fn CSSM_ListAttachedModuleManagers(NumberOfModuleManagers: [*c]uint32, ModuleManagerGuids: CSSM_GUID_PTR) CSSM_RETURN;
pub extern fn CSSM_GetAPIMemoryFunctions(AddInHandle: CSSM_MODULE_HANDLE, AppMemoryFuncs: CSSM_API_MEMORY_FUNCS_PTR) CSSM_RETURN;
pub extern fn CSSM_CSP_CreateSignatureContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS, Key: [*c]const CSSM_KEY, NewContextHandle: [*c]CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_CSP_CreateSymmetricContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, Mode: CSSM_ENCRYPT_MODE, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS, Key: [*c]const CSSM_KEY, InitVector: [*c]const SecAsn1Item, Padding: CSSM_PADDING, Reserved: ?*anyopaque, NewContextHandle: [*c]CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_CSP_CreateDigestContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, NewContextHandle: [*c]CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_CSP_CreateMacContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, Key: [*c]const CSSM_KEY, NewContextHandle: [*c]CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_CSP_CreateRandomGenContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, Seed: [*c]const CSSM_CRYPTO_DATA, Length: CSSM_SIZE, NewContextHandle: [*c]CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_CSP_CreateAsymmetricContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS, Key: [*c]const CSSM_KEY, Padding: CSSM_PADDING, NewContextHandle: [*c]CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_CSP_CreateDeriveKeyContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, DeriveKeyType: CSSM_KEY_TYPE, DeriveKeyLengthInBits: uint32, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS, BaseKey: [*c]const CSSM_KEY, IterationCount: uint32, Salt: [*c]const SecAsn1Item, Seed: [*c]const CSSM_CRYPTO_DATA, NewContextHandle: [*c]CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_CSP_CreateKeyGenContext(CSPHandle: CSSM_CSP_HANDLE, AlgorithmID: CSSM_ALGORITHMS, KeySizeInBits: uint32, Seed: [*c]const CSSM_CRYPTO_DATA, Salt: [*c]const SecAsn1Item, StartDate: [*c]const CSSM_DATE, EndDate: [*c]const CSSM_DATE, Params: [*c]const SecAsn1Item, NewContextHandle: [*c]CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_CSP_CreatePassThroughContext(CSPHandle: CSSM_CSP_HANDLE, Key: [*c]const CSSM_KEY, NewContextHandle: [*c]CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_GetContext(CCHandle: CSSM_CC_HANDLE, Context: [*c]CSSM_CONTEXT_PTR) CSSM_RETURN;
pub extern fn CSSM_FreeContext(Context: CSSM_CONTEXT_PTR) CSSM_RETURN;
pub extern fn CSSM_SetContext(CCHandle: CSSM_CC_HANDLE, Context: [*c]const CSSM_CONTEXT) CSSM_RETURN;
pub extern fn CSSM_DeleteContext(CCHandle: CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_GetContextAttribute(Context: [*c]const CSSM_CONTEXT, AttributeType: uint32, ContextAttribute: [*c]CSSM_CONTEXT_ATTRIBUTE_PTR) CSSM_RETURN;
pub extern fn CSSM_UpdateContextAttributes(CCHandle: CSSM_CC_HANDLE, NumberOfAttributes: uint32, ContextAttributes: [*c]const CSSM_CONTEXT_ATTRIBUTE) CSSM_RETURN;
pub extern fn CSSM_DeleteContextAttributes(CCHandle: CSSM_CC_HANDLE, NumberOfAttributes: uint32, ContextAttributes: [*c]const CSSM_CONTEXT_ATTRIBUTE) CSSM_RETURN;
pub extern fn CSSM_CSP_Login(CSPHandle: CSSM_CSP_HANDLE, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS, LoginName: [*c]const SecAsn1Item, Reserved: ?*const anyopaque) CSSM_RETURN;
pub extern fn CSSM_CSP_Logout(CSPHandle: CSSM_CSP_HANDLE) CSSM_RETURN;
pub extern fn CSSM_CSP_GetLoginAcl(CSPHandle: CSSM_CSP_HANDLE, SelectionTag: [*c]const CSSM_STRING, NumberOfAclInfos: [*c]uint32, AclInfos: [*c]CSSM_ACL_ENTRY_INFO_PTR) CSSM_RETURN;
pub extern fn CSSM_CSP_ChangeLoginAcl(CSPHandle: CSSM_CSP_HANDLE, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS, AclEdit: [*c]const CSSM_ACL_EDIT) CSSM_RETURN;
pub extern fn CSSM_GetKeyAcl(CSPHandle: CSSM_CSP_HANDLE, Key: [*c]const CSSM_KEY, SelectionTag: [*c]const CSSM_STRING, NumberOfAclInfos: [*c]uint32, AclInfos: [*c]CSSM_ACL_ENTRY_INFO_PTR) CSSM_RETURN;
pub extern fn CSSM_ChangeKeyAcl(CSPHandle: CSSM_CSP_HANDLE, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS, AclEdit: [*c]const CSSM_ACL_EDIT, Key: [*c]const CSSM_KEY) CSSM_RETURN;
pub extern fn CSSM_GetKeyOwner(CSPHandle: CSSM_CSP_HANDLE, Key: [*c]const CSSM_KEY, Owner: CSSM_ACL_OWNER_PROTOTYPE_PTR) CSSM_RETURN;
pub extern fn CSSM_ChangeKeyOwner(CSPHandle: CSSM_CSP_HANDLE, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS, Key: [*c]const CSSM_KEY, NewOwner: [*c]const CSSM_ACL_OWNER_PROTOTYPE) CSSM_RETURN;
pub extern fn CSSM_CSP_GetLoginOwner(CSPHandle: CSSM_CSP_HANDLE, Owner: CSSM_ACL_OWNER_PROTOTYPE_PTR) CSSM_RETURN;
pub extern fn CSSM_CSP_ChangeLoginOwner(CSPHandle: CSSM_CSP_HANDLE, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS, NewOwner: [*c]const CSSM_ACL_OWNER_PROTOTYPE) CSSM_RETURN;
pub extern fn CSSM_SignData(CCHandle: CSSM_CC_HANDLE, DataBufs: [*c]const SecAsn1Item, DataBufCount: uint32, DigestAlgorithm: CSSM_ALGORITHMS, Signature: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_SignDataInit(CCHandle: CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_SignDataUpdate(CCHandle: CSSM_CC_HANDLE, DataBufs: [*c]const SecAsn1Item, DataBufCount: uint32) CSSM_RETURN;
pub extern fn CSSM_SignDataFinal(CCHandle: CSSM_CC_HANDLE, Signature: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_VerifyData(CCHandle: CSSM_CC_HANDLE, DataBufs: [*c]const SecAsn1Item, DataBufCount: uint32, DigestAlgorithm: CSSM_ALGORITHMS, Signature: [*c]const SecAsn1Item) CSSM_RETURN;
pub extern fn CSSM_VerifyDataInit(CCHandle: CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_VerifyDataUpdate(CCHandle: CSSM_CC_HANDLE, DataBufs: [*c]const SecAsn1Item, DataBufCount: uint32) CSSM_RETURN;
pub extern fn CSSM_VerifyDataFinal(CCHandle: CSSM_CC_HANDLE, Signature: [*c]const SecAsn1Item) CSSM_RETURN;
pub extern fn CSSM_DigestData(CCHandle: CSSM_CC_HANDLE, DataBufs: [*c]const SecAsn1Item, DataBufCount: uint32, Digest: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_DigestDataInit(CCHandle: CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_DigestDataUpdate(CCHandle: CSSM_CC_HANDLE, DataBufs: [*c]const SecAsn1Item, DataBufCount: uint32) CSSM_RETURN;
pub extern fn CSSM_DigestDataClone(CCHandle: CSSM_CC_HANDLE, ClonednewCCHandle: [*c]CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_DigestDataFinal(CCHandle: CSSM_CC_HANDLE, Digest: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_GenerateMac(CCHandle: CSSM_CC_HANDLE, DataBufs: [*c]const SecAsn1Item, DataBufCount: uint32, Mac: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_GenerateMacInit(CCHandle: CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_GenerateMacUpdate(CCHandle: CSSM_CC_HANDLE, DataBufs: [*c]const SecAsn1Item, DataBufCount: uint32) CSSM_RETURN;
pub extern fn CSSM_GenerateMacFinal(CCHandle: CSSM_CC_HANDLE, Mac: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_VerifyMac(CCHandle: CSSM_CC_HANDLE, DataBufs: [*c]const SecAsn1Item, DataBufCount: uint32, Mac: [*c]const SecAsn1Item) CSSM_RETURN;
pub extern fn CSSM_VerifyMacInit(CCHandle: CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_VerifyMacUpdate(CCHandle: CSSM_CC_HANDLE, DataBufs: [*c]const SecAsn1Item, DataBufCount: uint32) CSSM_RETURN;
pub extern fn CSSM_VerifyMacFinal(CCHandle: CSSM_CC_HANDLE, Mac: [*c]const SecAsn1Item) CSSM_RETURN;
pub extern fn CSSM_QuerySize(CCHandle: CSSM_CC_HANDLE, Encrypt: CSSM_BOOL, QuerySizeCount: uint32, DataBlockSizes: CSSM_QUERY_SIZE_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_EncryptData(CCHandle: CSSM_CC_HANDLE, ClearBufs: [*c]const SecAsn1Item, ClearBufCount: uint32, CipherBufs: CSSM_DATA_PTR, CipherBufCount: uint32, bytesEncrypted: [*c]CSSM_SIZE, RemData: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_EncryptDataP(CCHandle: CSSM_CC_HANDLE, ClearBufs: [*c]const SecAsn1Item, ClearBufCount: uint32, CipherBufs: CSSM_DATA_PTR, CipherBufCount: uint32, bytesEncrypted: [*c]CSSM_SIZE, RemData: CSSM_DATA_PTR, Privilege: CSSM_PRIVILEGE) CSSM_RETURN;
pub extern fn CSSM_EncryptDataInit(CCHandle: CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_EncryptDataInitP(CCHandle: CSSM_CC_HANDLE, Privilege: CSSM_PRIVILEGE) CSSM_RETURN;
pub extern fn CSSM_EncryptDataUpdate(CCHandle: CSSM_CC_HANDLE, ClearBufs: [*c]const SecAsn1Item, ClearBufCount: uint32, CipherBufs: CSSM_DATA_PTR, CipherBufCount: uint32, bytesEncrypted: [*c]CSSM_SIZE) CSSM_RETURN;
pub extern fn CSSM_EncryptDataFinal(CCHandle: CSSM_CC_HANDLE, RemData: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_DecryptData(CCHandle: CSSM_CC_HANDLE, CipherBufs: [*c]const SecAsn1Item, CipherBufCount: uint32, ClearBufs: CSSM_DATA_PTR, ClearBufCount: uint32, bytesDecrypted: [*c]CSSM_SIZE, RemData: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_DecryptDataP(CCHandle: CSSM_CC_HANDLE, CipherBufs: [*c]const SecAsn1Item, CipherBufCount: uint32, ClearBufs: CSSM_DATA_PTR, ClearBufCount: uint32, bytesDecrypted: [*c]CSSM_SIZE, RemData: CSSM_DATA_PTR, Privilege: CSSM_PRIVILEGE) CSSM_RETURN;
pub extern fn CSSM_DecryptDataInit(CCHandle: CSSM_CC_HANDLE) CSSM_RETURN;
pub extern fn CSSM_DecryptDataInitP(CCHandle: CSSM_CC_HANDLE, Privilege: CSSM_PRIVILEGE) CSSM_RETURN;
pub extern fn CSSM_DecryptDataUpdate(CCHandle: CSSM_CC_HANDLE, CipherBufs: [*c]const SecAsn1Item, CipherBufCount: uint32, ClearBufs: CSSM_DATA_PTR, ClearBufCount: uint32, bytesDecrypted: [*c]CSSM_SIZE) CSSM_RETURN;
pub extern fn CSSM_DecryptDataFinal(CCHandle: CSSM_CC_HANDLE, RemData: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_QueryKeySizeInBits(CSPHandle: CSSM_CSP_HANDLE, CCHandle: CSSM_CC_HANDLE, Key: [*c]const CSSM_KEY, KeySize: CSSM_KEY_SIZE_PTR) CSSM_RETURN;
pub extern fn CSSM_GenerateKey(CCHandle: CSSM_CC_HANDLE, KeyUsage: uint32, KeyAttr: uint32, KeyLabel: [*c]const SecAsn1Item, CredAndAclEntry: [*c]const CSSM_RESOURCE_CONTROL_CONTEXT, Key: CSSM_KEY_PTR) CSSM_RETURN;
pub extern fn CSSM_GenerateKeyP(CCHandle: CSSM_CC_HANDLE, KeyUsage: uint32, KeyAttr: uint32, KeyLabel: [*c]const SecAsn1Item, CredAndAclEntry: [*c]const CSSM_RESOURCE_CONTROL_CONTEXT, Key: CSSM_KEY_PTR, Privilege: CSSM_PRIVILEGE) CSSM_RETURN;
pub extern fn CSSM_GenerateKeyPair(CCHandle: CSSM_CC_HANDLE, PublicKeyUsage: uint32, PublicKeyAttr: uint32, PublicKeyLabel: [*c]const SecAsn1Item, PublicKey: CSSM_KEY_PTR, PrivateKeyUsage: uint32, PrivateKeyAttr: uint32, PrivateKeyLabel: [*c]const SecAsn1Item, CredAndAclEntry: [*c]const CSSM_RESOURCE_CONTROL_CONTEXT, PrivateKey: CSSM_KEY_PTR) CSSM_RETURN;
pub extern fn CSSM_GenerateKeyPairP(CCHandle: CSSM_CC_HANDLE, PublicKeyUsage: uint32, PublicKeyAttr: uint32, PublicKeyLabel: [*c]const SecAsn1Item, PublicKey: CSSM_KEY_PTR, PrivateKeyUsage: uint32, PrivateKeyAttr: uint32, PrivateKeyLabel: [*c]const SecAsn1Item, CredAndAclEntry: [*c]const CSSM_RESOURCE_CONTROL_CONTEXT, PrivateKey: CSSM_KEY_PTR, Privilege: CSSM_PRIVILEGE) CSSM_RETURN;
pub extern fn CSSM_GenerateRandom(CCHandle: CSSM_CC_HANDLE, RandomNumber: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CSP_ObtainPrivateKeyFromPublicKey(CSPHandle: CSSM_CSP_HANDLE, PublicKey: [*c]const CSSM_KEY, PrivateKey: CSSM_KEY_PTR) CSSM_RETURN;
pub extern fn CSSM_WrapKey(CCHandle: CSSM_CC_HANDLE, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS, Key: [*c]const CSSM_KEY, DescriptiveData: [*c]const SecAsn1Item, WrappedKey: CSSM_WRAP_KEY_PTR) CSSM_RETURN;
pub extern fn CSSM_UnwrapKey(CCHandle: CSSM_CC_HANDLE, PublicKey: [*c]const CSSM_KEY, WrappedKey: [*c]const CSSM_WRAP_KEY, KeyUsage: uint32, KeyAttr: uint32, KeyLabel: [*c]const SecAsn1Item, CredAndAclEntry: [*c]const CSSM_RESOURCE_CONTROL_CONTEXT, UnwrappedKey: CSSM_KEY_PTR, DescriptiveData: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_WrapKeyP(CCHandle: CSSM_CC_HANDLE, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS, Key: [*c]const CSSM_KEY, DescriptiveData: [*c]const SecAsn1Item, WrappedKey: CSSM_WRAP_KEY_PTR, Privilege: CSSM_PRIVILEGE) CSSM_RETURN;
pub extern fn CSSM_UnwrapKeyP(CCHandle: CSSM_CC_HANDLE, PublicKey: [*c]const CSSM_KEY, WrappedKey: [*c]const CSSM_WRAP_KEY, KeyUsage: uint32, KeyAttr: uint32, KeyLabel: [*c]const SecAsn1Item, CredAndAclEntry: [*c]const CSSM_RESOURCE_CONTROL_CONTEXT, UnwrappedKey: CSSM_KEY_PTR, DescriptiveData: CSSM_DATA_PTR, Privilege: CSSM_PRIVILEGE) CSSM_RETURN;
pub extern fn CSSM_DeriveKey(CCHandle: CSSM_CC_HANDLE, Param: CSSM_DATA_PTR, KeyUsage: uint32, KeyAttr: uint32, KeyLabel: [*c]const SecAsn1Item, CredAndAclEntry: [*c]const CSSM_RESOURCE_CONTROL_CONTEXT, DerivedKey: CSSM_KEY_PTR) CSSM_RETURN;
pub extern fn CSSM_FreeKey(CSPHandle: CSSM_CSP_HANDLE, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS, KeyPtr: CSSM_KEY_PTR, Delete: CSSM_BOOL) CSSM_RETURN;
pub extern fn CSSM_GenerateAlgorithmParams(CCHandle: CSSM_CC_HANDLE, ParamBits: uint32, Param: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CSP_GetOperationalStatistics(CSPHandle: CSSM_CSP_HANDLE, Statistics: [*c]CSSM_CSP_OPERATIONAL_STATISTICS) CSSM_RETURN;
pub extern fn CSSM_GetTimeValue(CSPHandle: CSSM_CSP_HANDLE, TimeAlgorithm: CSSM_ALGORITHMS, TimeData: [*c]SecAsn1Item) CSSM_RETURN;
pub extern fn CSSM_RetrieveUniqueId(CSPHandle: CSSM_CSP_HANDLE, UniqueID: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_RetrieveCounter(CSPHandle: CSSM_CSP_HANDLE, Counter: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_VerifyDevice(CSPHandle: CSSM_CSP_HANDLE, DeviceCert: [*c]const SecAsn1Item) CSSM_RETURN;
pub extern fn CSSM_CSP_PassThrough(CCHandle: CSSM_CC_HANDLE, PassThroughId: uint32, InData: ?*const anyopaque, OutData: [*c]?*anyopaque) CSSM_RETURN;
pub extern fn CSSM_TP_SubmitCredRequest(TPHandle: CSSM_TP_HANDLE, PreferredAuthority: [*c]const CSSM_TP_AUTHORITY_ID, RequestType: CSSM_TP_AUTHORITY_REQUEST_TYPE, RequestInput: [*c]const CSSM_TP_REQUEST_SET, CallerAuthContext: [*c]const CSSM_TP_CALLERAUTH_CONTEXT, EstimatedTime: [*c]sint32, ReferenceIdentifier: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_RetrieveCredResult(TPHandle: CSSM_TP_HANDLE, ReferenceIdentifier: [*c]const SecAsn1Item, CallerAuthCredentials: [*c]const CSSM_TP_CALLERAUTH_CONTEXT, EstimatedTime: [*c]sint32, ConfirmationRequired: [*c]CSSM_BOOL, RetrieveOutput: [*c]CSSM_TP_RESULT_SET_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_ConfirmCredResult(TPHandle: CSSM_TP_HANDLE, ReferenceIdentifier: [*c]const SecAsn1Item, CallerAuthCredentials: [*c]const CSSM_TP_CALLERAUTH_CONTEXT, Responses: [*c]const CSSM_TP_CONFIRM_RESPONSE, PreferredAuthority: [*c]const CSSM_TP_AUTHORITY_ID) CSSM_RETURN;
pub extern fn CSSM_TP_ReceiveConfirmation(TPHandle: CSSM_TP_HANDLE, ReferenceIdentifier: [*c]const SecAsn1Item, Responses: [*c]CSSM_TP_CONFIRM_RESPONSE_PTR, ElapsedTime: [*c]sint32) CSSM_RETURN;
pub extern fn CSSM_TP_CertReclaimKey(TPHandle: CSSM_TP_HANDLE, CertGroup: [*c]const CSSM_CERTGROUP, CertIndex: uint32, KeyCacheHandle: CSSM_LONG_HANDLE, CSPHandle: CSSM_CSP_HANDLE, CredAndAclEntry: [*c]const CSSM_RESOURCE_CONTROL_CONTEXT) CSSM_RETURN;
pub extern fn CSSM_TP_CertReclaimAbort(TPHandle: CSSM_TP_HANDLE, KeyCacheHandle: CSSM_LONG_HANDLE) CSSM_RETURN;
pub extern fn CSSM_TP_FormRequest(TPHandle: CSSM_TP_HANDLE, PreferredAuthority: [*c]const CSSM_TP_AUTHORITY_ID, FormType: CSSM_TP_FORM_TYPE, BlankForm: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_FormSubmit(TPHandle: CSSM_TP_HANDLE, FormType: CSSM_TP_FORM_TYPE, Form: [*c]const SecAsn1Item, ClearanceAuthority: [*c]const CSSM_TP_AUTHORITY_ID, RepresentedAuthority: [*c]const CSSM_TP_AUTHORITY_ID, Credentials: CSSM_ACCESS_CREDENTIALS_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_CertGroupVerify(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CSPHandle: CSSM_CSP_HANDLE, CertGroupToBeVerified: [*c]const CSSM_CERTGROUP, VerifyContext: [*c]const CSSM_TP_VERIFY_CONTEXT, VerifyContextResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_CertCreateTemplate(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, NumberOfFields: uint32, CertFields: [*c]const CSSM_FIELD, CertTemplate: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_CertGetAllTemplateFields(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CertTemplate: [*c]const SecAsn1Item, NumberOfFields: [*c]uint32, CertFields: [*c]CSSM_FIELD_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_CertSign(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CertTemplateToBeSigned: [*c]const SecAsn1Item, SignerCertGroup: [*c]const CSSM_CERTGROUP, SignerVerifyContext: [*c]const CSSM_TP_VERIFY_CONTEXT, SignerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, SignedCert: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_CrlVerify(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CSPHandle: CSSM_CSP_HANDLE, CrlToBeVerified: [*c]const CSSM_ENCODED_CRL, SignerCertGroup: [*c]const CSSM_CERTGROUP, VerifyContext: [*c]const CSSM_TP_VERIFY_CONTEXT, RevokerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_CrlCreateTemplate(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, NumberOfFields: uint32, CrlFields: [*c]const CSSM_FIELD, NewCrlTemplate: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_CertRevoke(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CSPHandle: CSSM_CSP_HANDLE, OldCrlTemplate: [*c]const SecAsn1Item, CertGroupToBeRevoked: [*c]const CSSM_CERTGROUP, RevokerCertGroup: [*c]const CSSM_CERTGROUP, RevokerVerifyContext: [*c]const CSSM_TP_VERIFY_CONTEXT, RevokerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, Reason: CSSM_TP_CERTCHANGE_REASON, NewCrlTemplate: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_CertRemoveFromCrlTemplate(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CSPHandle: CSSM_CSP_HANDLE, OldCrlTemplate: [*c]const SecAsn1Item, CertGroupToBeRemoved: [*c]const CSSM_CERTGROUP, RevokerCertGroup: [*c]const CSSM_CERTGROUP, RevokerVerifyContext: [*c]const CSSM_TP_VERIFY_CONTEXT, RevokerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, NewCrlTemplate: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_CrlSign(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CrlToBeSigned: [*c]const CSSM_ENCODED_CRL, SignerCertGroup: [*c]const CSSM_CERTGROUP, SignerVerifyContext: [*c]const CSSM_TP_VERIFY_CONTEXT, SignerVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, SignedCrl: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_ApplyCrlToDb(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CSPHandle: CSSM_CSP_HANDLE, CrlToBeApplied: [*c]const CSSM_ENCODED_CRL, SignerCertGroup: [*c]const CSSM_CERTGROUP, ApplyCrlVerifyContext: [*c]const CSSM_TP_VERIFY_CONTEXT, ApplyCrlVerifyResult: CSSM_TP_VERIFY_CONTEXT_RESULT_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_CertGroupConstruct(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CSPHandle: CSSM_CSP_HANDLE, DBList: [*c]const CSSM_DL_DB_LIST, ConstructParams: ?*const anyopaque, CertGroupFrag: [*c]const CSSM_CERTGROUP, CertGroup: [*c]CSSM_CERTGROUP_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_CertGroupPrune(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, DBList: [*c]const CSSM_DL_DB_LIST, OrderedCertGroup: [*c]const CSSM_CERTGROUP, PrunedCertGroup: [*c]CSSM_CERTGROUP_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_CertGroupToTupleGroup(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CertGroup: [*c]const CSSM_CERTGROUP, TupleGroup: [*c]CSSM_TUPLEGROUP_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_TupleGroupToCertGroup(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, TupleGroup: [*c]const CSSM_TUPLEGROUP, CertTemplates: [*c]CSSM_CERTGROUP_PTR) CSSM_RETURN;
pub extern fn CSSM_TP_PassThrough(TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, DBList: [*c]const CSSM_DL_DB_LIST, PassThroughId: uint32, InputParams: ?*const anyopaque, OutputParams: [*c]?*anyopaque) CSSM_RETURN;
pub extern fn CSSM_AC_AuthCompute(ACHandle: CSSM_AC_HANDLE, BaseAuthorizations: [*c]const CSSM_TUPLEGROUP, Credentials: [*c]const CSSM_TUPLEGROUP, NumberOfRequestors: uint32, Requestors: [*c]const CSSM_LIST, RequestedAuthorizationPeriod: [*c]const CSSM_LIST, RequestedAuthorization: [*c]const CSSM_LIST, AuthorizationResult: CSSM_TUPLEGROUP_PTR) CSSM_RETURN;
pub extern fn CSSM_AC_PassThrough(ACHandle: CSSM_AC_HANDLE, TPHandle: CSSM_TP_HANDLE, CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, DBList: [*c]const CSSM_DL_DB_LIST, PassThroughId: uint32, InputParams: ?*const anyopaque, OutputParams: [*c]?*anyopaque) CSSM_RETURN;
pub extern fn CSSM_CL_CertCreateTemplate(CLHandle: CSSM_CL_HANDLE, NumberOfFields: uint32, CertFields: [*c]const CSSM_FIELD, CertTemplate: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CertGetAllTemplateFields(CLHandle: CSSM_CL_HANDLE, CertTemplate: [*c]const SecAsn1Item, NumberOfFields: [*c]uint32, CertFields: [*c]CSSM_FIELD_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CertSign(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CertTemplate: [*c]const SecAsn1Item, SignScope: [*c]const CSSM_FIELD, ScopeSize: uint32, SignedCert: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CertVerify(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CertToBeVerified: [*c]const SecAsn1Item, SignerCert: [*c]const SecAsn1Item, VerifyScope: [*c]const CSSM_FIELD, ScopeSize: uint32) CSSM_RETURN;
pub extern fn CSSM_CL_CertVerifyWithKey(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CertToBeVerified: [*c]const SecAsn1Item) CSSM_RETURN;
pub extern fn CSSM_CL_CertGetFirstFieldValue(CLHandle: CSSM_CL_HANDLE, Cert: [*c]const SecAsn1Item, CertField: [*c]const SecAsn1Oid, ResultsHandle: CSSM_HANDLE_PTR, NumberOfMatchedFields: [*c]uint32, Value: [*c]CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CertGetNextFieldValue(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE, Value: [*c]CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CertAbortQuery(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE) CSSM_RETURN;
pub extern fn CSSM_CL_CertGetKeyInfo(CLHandle: CSSM_CL_HANDLE, Cert: [*c]const SecAsn1Item, Key: [*c]CSSM_KEY_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CertGetAllFields(CLHandle: CSSM_CL_HANDLE, Cert: [*c]const SecAsn1Item, NumberOfFields: [*c]uint32, CertFields: [*c]CSSM_FIELD_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_FreeFields(CLHandle: CSSM_CL_HANDLE, NumberOfFields: uint32, Fields: [*c]CSSM_FIELD_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_FreeFieldValue(CLHandle: CSSM_CL_HANDLE, CertOrCrlOid: [*c]const SecAsn1Oid, Value: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CertCache(CLHandle: CSSM_CL_HANDLE, Cert: [*c]const SecAsn1Item, CertHandle: CSSM_HANDLE_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CertGetFirstCachedFieldValue(CLHandle: CSSM_CL_HANDLE, CertHandle: CSSM_HANDLE, CertField: [*c]const SecAsn1Oid, ResultsHandle: CSSM_HANDLE_PTR, NumberOfMatchedFields: [*c]uint32, Value: [*c]CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CertGetNextCachedFieldValue(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE, Value: [*c]CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CertAbortCache(CLHandle: CSSM_CL_HANDLE, CertHandle: CSSM_HANDLE) CSSM_RETURN;
pub extern fn CSSM_CL_CertGroupToSignedBundle(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CertGroupToBundle: [*c]const CSSM_CERTGROUP, BundleInfo: [*c]const CSSM_CERT_BUNDLE_HEADER, SignedBundle: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CertGroupFromVerifiedBundle(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CertBundle: [*c]const CSSM_CERT_BUNDLE, SignerCert: [*c]const SecAsn1Item, CertGroup: [*c]CSSM_CERTGROUP_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CertDescribeFormat(CLHandle: CSSM_CL_HANDLE, NumberOfFields: [*c]uint32, OidList: [*c]CSSM_OID_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CrlCreateTemplate(CLHandle: CSSM_CL_HANDLE, NumberOfFields: uint32, CrlTemplate: [*c]const CSSM_FIELD, NewCrl: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CrlSetFields(CLHandle: CSSM_CL_HANDLE, NumberOfFields: uint32, CrlTemplate: [*c]const CSSM_FIELD, OldCrl: [*c]const SecAsn1Item, ModifiedCrl: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CrlAddCert(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, Cert: [*c]const SecAsn1Item, NumberOfFields: uint32, CrlEntryFields: [*c]const CSSM_FIELD, OldCrl: [*c]const SecAsn1Item, NewCrl: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CrlRemoveCert(CLHandle: CSSM_CL_HANDLE, Cert: [*c]const SecAsn1Item, OldCrl: [*c]const SecAsn1Item, NewCrl: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CrlSign(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, UnsignedCrl: [*c]const SecAsn1Item, SignScope: [*c]const CSSM_FIELD, ScopeSize: uint32, SignedCrl: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CrlVerify(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CrlToBeVerified: [*c]const SecAsn1Item, SignerCert: [*c]const SecAsn1Item, VerifyScope: [*c]const CSSM_FIELD, ScopeSize: uint32) CSSM_RETURN;
pub extern fn CSSM_CL_CrlVerifyWithKey(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, CrlToBeVerified: [*c]const SecAsn1Item) CSSM_RETURN;
pub extern fn CSSM_CL_IsCertInCrl(CLHandle: CSSM_CL_HANDLE, Cert: [*c]const SecAsn1Item, Crl: [*c]const SecAsn1Item, CertFound: [*c]CSSM_BOOL) CSSM_RETURN;
pub extern fn CSSM_CL_CrlGetFirstFieldValue(CLHandle: CSSM_CL_HANDLE, Crl: [*c]const SecAsn1Item, CrlField: [*c]const SecAsn1Oid, ResultsHandle: CSSM_HANDLE_PTR, NumberOfMatchedFields: [*c]uint32, Value: [*c]CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CrlGetNextFieldValue(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE, Value: [*c]CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CrlAbortQuery(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE) CSSM_RETURN;
pub extern fn CSSM_CL_CrlGetAllFields(CLHandle: CSSM_CL_HANDLE, Crl: [*c]const SecAsn1Item, NumberOfCrlFields: [*c]uint32, CrlFields: [*c]CSSM_FIELD_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CrlCache(CLHandle: CSSM_CL_HANDLE, Crl: [*c]const SecAsn1Item, CrlHandle: CSSM_HANDLE_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_IsCertInCachedCrl(CLHandle: CSSM_CL_HANDLE, Cert: [*c]const SecAsn1Item, CrlHandle: CSSM_HANDLE, CertFound: [*c]CSSM_BOOL, CrlRecordIndex: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CrlGetFirstCachedFieldValue(CLHandle: CSSM_CL_HANDLE, CrlHandle: CSSM_HANDLE, CrlRecordIndex: [*c]const SecAsn1Item, CrlField: [*c]const SecAsn1Oid, ResultsHandle: CSSM_HANDLE_PTR, NumberOfMatchedFields: [*c]uint32, Value: [*c]CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CrlGetNextCachedFieldValue(CLHandle: CSSM_CL_HANDLE, ResultsHandle: CSSM_HANDLE, Value: [*c]CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CrlGetAllCachedRecordFields(CLHandle: CSSM_CL_HANDLE, CrlHandle: CSSM_HANDLE, CrlRecordIndex: [*c]const SecAsn1Item, NumberOfFields: [*c]uint32, CrlFields: [*c]CSSM_FIELD_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_CrlAbortCache(CLHandle: CSSM_CL_HANDLE, CrlHandle: CSSM_HANDLE) CSSM_RETURN;
pub extern fn CSSM_CL_CrlDescribeFormat(CLHandle: CSSM_CL_HANDLE, NumberOfFields: [*c]uint32, OidList: [*c]CSSM_OID_PTR) CSSM_RETURN;
pub extern fn CSSM_CL_PassThrough(CLHandle: CSSM_CL_HANDLE, CCHandle: CSSM_CC_HANDLE, PassThroughId: uint32, InputParams: ?*const anyopaque, OutputParams: [*c]?*anyopaque) CSSM_RETURN;
pub extern fn CSSM_DL_DbOpen(DLHandle: CSSM_DL_HANDLE, DbName: [*c]const u8, DbLocation: [*c]const CSSM_NET_ADDRESS, AccessRequest: CSSM_DB_ACCESS_TYPE, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS, OpenParameters: ?*const anyopaque, DbHandle: [*c]CSSM_DB_HANDLE) CSSM_RETURN;
pub extern fn CSSM_DL_DbClose(DLDBHandle: CSSM_DL_DB_HANDLE) CSSM_RETURN;
pub extern fn CSSM_DL_DbCreate(DLHandle: CSSM_DL_HANDLE, DbName: [*c]const u8, DbLocation: [*c]const CSSM_NET_ADDRESS, DBInfo: [*c]const CSSM_DBINFO, AccessRequest: CSSM_DB_ACCESS_TYPE, CredAndAclEntry: [*c]const CSSM_RESOURCE_CONTROL_CONTEXT, OpenParameters: ?*const anyopaque, DbHandle: [*c]CSSM_DB_HANDLE) CSSM_RETURN;
pub extern fn CSSM_DL_DbDelete(DLHandle: CSSM_DL_HANDLE, DbName: [*c]const u8, DbLocation: [*c]const CSSM_NET_ADDRESS, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS) CSSM_RETURN;
pub extern fn CSSM_DL_CreateRelation(DLDBHandle: CSSM_DL_DB_HANDLE, RelationID: CSSM_DB_RECORDTYPE, RelationName: [*c]const u8, NumberOfAttributes: uint32, pAttributeInfo: [*c]const CSSM_DB_SCHEMA_ATTRIBUTE_INFO, NumberOfIndexes: uint32, pIndexInfo: [*c]const CSSM_DB_SCHEMA_INDEX_INFO) CSSM_RETURN;
pub extern fn CSSM_DL_DestroyRelation(DLDBHandle: CSSM_DL_DB_HANDLE, RelationID: CSSM_DB_RECORDTYPE) CSSM_RETURN;
pub extern fn CSSM_DL_Authenticate(DLDBHandle: CSSM_DL_DB_HANDLE, AccessRequest: CSSM_DB_ACCESS_TYPE, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS) CSSM_RETURN;
pub extern fn CSSM_DL_GetDbAcl(DLDBHandle: CSSM_DL_DB_HANDLE, SelectionTag: [*c]const CSSM_STRING, NumberOfAclInfos: [*c]uint32, AclInfos: [*c]CSSM_ACL_ENTRY_INFO_PTR) CSSM_RETURN;
pub extern fn CSSM_DL_ChangeDbAcl(DLDBHandle: CSSM_DL_DB_HANDLE, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS, AclEdit: [*c]const CSSM_ACL_EDIT) CSSM_RETURN;
pub extern fn CSSM_DL_GetDbOwner(DLDBHandle: CSSM_DL_DB_HANDLE, Owner: CSSM_ACL_OWNER_PROTOTYPE_PTR) CSSM_RETURN;
pub extern fn CSSM_DL_ChangeDbOwner(DLDBHandle: CSSM_DL_DB_HANDLE, AccessCred: [*c]const CSSM_ACCESS_CREDENTIALS, NewOwner: [*c]const CSSM_ACL_OWNER_PROTOTYPE) CSSM_RETURN;
pub extern fn CSSM_DL_GetDbNames(DLHandle: CSSM_DL_HANDLE, NameList: [*c]CSSM_NAME_LIST_PTR) CSSM_RETURN;
pub extern fn CSSM_DL_GetDbNameFromHandle(DLDBHandle: CSSM_DL_DB_HANDLE, DbName: [*c][*c]u8) CSSM_RETURN;
pub extern fn CSSM_DL_FreeNameList(DLHandle: CSSM_DL_HANDLE, NameList: CSSM_NAME_LIST_PTR) CSSM_RETURN;
pub extern fn CSSM_DL_DataInsert(DLDBHandle: CSSM_DL_DB_HANDLE, RecordType: CSSM_DB_RECORDTYPE, Attributes: [*c]const CSSM_DB_RECORD_ATTRIBUTE_DATA, Data: [*c]const SecAsn1Item, UniqueId: [*c]CSSM_DB_UNIQUE_RECORD_PTR) CSSM_RETURN;
pub extern fn CSSM_DL_DataDelete(DLDBHandle: CSSM_DL_DB_HANDLE, UniqueRecordIdentifier: [*c]const CSSM_DB_UNIQUE_RECORD) CSSM_RETURN;
pub extern fn CSSM_DL_DataModify(DLDBHandle: CSSM_DL_DB_HANDLE, RecordType: CSSM_DB_RECORDTYPE, UniqueRecordIdentifier: CSSM_DB_UNIQUE_RECORD_PTR, AttributesToBeModified: [*c]const CSSM_DB_RECORD_ATTRIBUTE_DATA, DataToBeModified: [*c]const SecAsn1Item, ModifyMode: CSSM_DB_MODIFY_MODE) CSSM_RETURN;
pub extern fn CSSM_DL_DataGetFirst(DLDBHandle: CSSM_DL_DB_HANDLE, Query: [*c]const CSSM_QUERY, ResultsHandle: CSSM_HANDLE_PTR, Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, Data: CSSM_DATA_PTR, UniqueId: [*c]CSSM_DB_UNIQUE_RECORD_PTR) CSSM_RETURN;
pub extern fn CSSM_DL_DataGetNext(DLDBHandle: CSSM_DL_DB_HANDLE, ResultsHandle: CSSM_HANDLE, Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, Data: CSSM_DATA_PTR, UniqueId: [*c]CSSM_DB_UNIQUE_RECORD_PTR) CSSM_RETURN;
pub extern fn CSSM_DL_DataAbortQuery(DLDBHandle: CSSM_DL_DB_HANDLE, ResultsHandle: CSSM_HANDLE) CSSM_RETURN;
pub extern fn CSSM_DL_DataGetFromUniqueRecordId(DLDBHandle: CSSM_DL_DB_HANDLE, UniqueRecord: [*c]const CSSM_DB_UNIQUE_RECORD, Attributes: CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, Data: CSSM_DATA_PTR) CSSM_RETURN;
pub extern fn CSSM_DL_FreeUniqueRecord(DLDBHandle: CSSM_DL_DB_HANDLE, UniqueRecord: CSSM_DB_UNIQUE_RECORD_PTR) CSSM_RETURN;
pub extern fn CSSM_DL_PassThrough(DLDBHandle: CSSM_DL_DB_HANDLE, PassThroughId: uint32, InputParams: ?*const anyopaque, OutputParams: [*c]?*anyopaque) CSSM_RETURN;
pub const struct_cssm_spi_ac_funcs = extern struct {
    AuthCompute: ?fn (CSSM_AC_HANDLE, [*c]const CSSM_TUPLEGROUP, [*c]const CSSM_TUPLEGROUP, uint32, [*c]const CSSM_LIST, [*c]const CSSM_LIST, [*c]const CSSM_LIST, CSSM_TUPLEGROUP_PTR) callconv(.C) CSSM_RETURN,
    PassThrough: ?fn (CSSM_AC_HANDLE, CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_DL_DB_LIST, uint32, ?*const anyopaque, [*c]?*anyopaque) callconv(.C) CSSM_RETURN,
};
pub const CSSM_SPI_AC_FUNCS = struct_cssm_spi_ac_funcs;
pub const CSSM_SPI_AC_FUNCS_PTR = [*c]struct_cssm_spi_ac_funcs;
pub const struct_cssm_spi_cl_funcs = extern struct {
    CertCreateTemplate: ?fn (CSSM_CL_HANDLE, uint32, [*c]const CSSM_FIELD, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CertGetAllTemplateFields: ?fn (CSSM_CL_HANDLE, [*c]const SecAsn1Item, [*c]uint32, [*c]CSSM_FIELD_PTR) callconv(.C) CSSM_RETURN,
    CertSign: ?fn (CSSM_CL_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item, [*c]const CSSM_FIELD, uint32, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CertVerify: ?fn (CSSM_CL_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item, [*c]const SecAsn1Item, [*c]const CSSM_FIELD, uint32) callconv(.C) CSSM_RETURN,
    CertVerifyWithKey: ?fn (CSSM_CL_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item) callconv(.C) CSSM_RETURN,
    CertGetFirstFieldValue: ?fn (CSSM_CL_HANDLE, [*c]const SecAsn1Item, [*c]const SecAsn1Oid, CSSM_HANDLE_PTR, [*c]uint32, [*c]CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CertGetNextFieldValue: ?fn (CSSM_CL_HANDLE, CSSM_HANDLE, [*c]CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CertAbortQuery: ?fn (CSSM_CL_HANDLE, CSSM_HANDLE) callconv(.C) CSSM_RETURN,
    CertGetKeyInfo: ?fn (CSSM_CL_HANDLE, [*c]const SecAsn1Item, [*c]CSSM_KEY_PTR) callconv(.C) CSSM_RETURN,
    CertGetAllFields: ?fn (CSSM_CL_HANDLE, [*c]const SecAsn1Item, [*c]uint32, [*c]CSSM_FIELD_PTR) callconv(.C) CSSM_RETURN,
    FreeFields: ?fn (CSSM_CL_HANDLE, uint32, [*c]CSSM_FIELD_PTR) callconv(.C) CSSM_RETURN,
    FreeFieldValue: ?fn (CSSM_CL_HANDLE, [*c]const SecAsn1Oid, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CertCache: ?fn (CSSM_CL_HANDLE, [*c]const SecAsn1Item, CSSM_HANDLE_PTR) callconv(.C) CSSM_RETURN,
    CertGetFirstCachedFieldValue: ?fn (CSSM_CL_HANDLE, CSSM_HANDLE, [*c]const SecAsn1Oid, CSSM_HANDLE_PTR, [*c]uint32, [*c]CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CertGetNextCachedFieldValue: ?fn (CSSM_CL_HANDLE, CSSM_HANDLE, [*c]CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CertAbortCache: ?fn (CSSM_CL_HANDLE, CSSM_HANDLE) callconv(.C) CSSM_RETURN,
    CertGroupToSignedBundle: ?fn (CSSM_CL_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CERTGROUP, [*c]const CSSM_CERT_BUNDLE_HEADER, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CertGroupFromVerifiedBundle: ?fn (CSSM_CL_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CERT_BUNDLE, [*c]const SecAsn1Item, [*c]CSSM_CERTGROUP_PTR) callconv(.C) CSSM_RETURN,
    CertDescribeFormat: ?fn (CSSM_CL_HANDLE, [*c]uint32, [*c]CSSM_OID_PTR) callconv(.C) CSSM_RETURN,
    CrlCreateTemplate: ?fn (CSSM_CL_HANDLE, uint32, [*c]const CSSM_FIELD, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CrlSetFields: ?fn (CSSM_CL_HANDLE, uint32, [*c]const CSSM_FIELD, [*c]const SecAsn1Item, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CrlAddCert: ?fn (CSSM_CL_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item, uint32, [*c]const CSSM_FIELD, [*c]const SecAsn1Item, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CrlRemoveCert: ?fn (CSSM_CL_HANDLE, [*c]const SecAsn1Item, [*c]const SecAsn1Item, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CrlSign: ?fn (CSSM_CL_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item, [*c]const CSSM_FIELD, uint32, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CrlVerify: ?fn (CSSM_CL_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item, [*c]const SecAsn1Item, [*c]const CSSM_FIELD, uint32) callconv(.C) CSSM_RETURN,
    CrlVerifyWithKey: ?fn (CSSM_CL_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item) callconv(.C) CSSM_RETURN,
    IsCertInCrl: ?fn (CSSM_CL_HANDLE, [*c]const SecAsn1Item, [*c]const SecAsn1Item, [*c]CSSM_BOOL) callconv(.C) CSSM_RETURN,
    CrlGetFirstFieldValue: ?fn (CSSM_CL_HANDLE, [*c]const SecAsn1Item, [*c]const SecAsn1Oid, CSSM_HANDLE_PTR, [*c]uint32, [*c]CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CrlGetNextFieldValue: ?fn (CSSM_CL_HANDLE, CSSM_HANDLE, [*c]CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CrlAbortQuery: ?fn (CSSM_CL_HANDLE, CSSM_HANDLE) callconv(.C) CSSM_RETURN,
    CrlGetAllFields: ?fn (CSSM_CL_HANDLE, [*c]const SecAsn1Item, [*c]uint32, [*c]CSSM_FIELD_PTR) callconv(.C) CSSM_RETURN,
    CrlCache: ?fn (CSSM_CL_HANDLE, [*c]const SecAsn1Item, CSSM_HANDLE_PTR) callconv(.C) CSSM_RETURN,
    IsCertInCachedCrl: ?fn (CSSM_CL_HANDLE, [*c]const SecAsn1Item, CSSM_HANDLE, [*c]CSSM_BOOL, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CrlGetFirstCachedFieldValue: ?fn (CSSM_CL_HANDLE, CSSM_HANDLE, [*c]const SecAsn1Item, [*c]const SecAsn1Oid, CSSM_HANDLE_PTR, [*c]uint32, [*c]CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CrlGetNextCachedFieldValue: ?fn (CSSM_CL_HANDLE, CSSM_HANDLE, [*c]CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CrlGetAllCachedRecordFields: ?fn (CSSM_CL_HANDLE, CSSM_HANDLE, [*c]const SecAsn1Item, [*c]uint32, [*c]CSSM_FIELD_PTR) callconv(.C) CSSM_RETURN,
    CrlAbortCache: ?fn (CSSM_CL_HANDLE, CSSM_HANDLE) callconv(.C) CSSM_RETURN,
    CrlDescribeFormat: ?fn (CSSM_CL_HANDLE, [*c]uint32, [*c]CSSM_OID_PTR) callconv(.C) CSSM_RETURN,
    PassThrough: ?fn (CSSM_CL_HANDLE, CSSM_CC_HANDLE, uint32, ?*const anyopaque, [*c]?*anyopaque) callconv(.C) CSSM_RETURN,
};
pub const CSSM_SPI_CL_FUNCS = struct_cssm_spi_cl_funcs;
pub const CSSM_SPI_CL_FUNCS_PTR = [*c]struct_cssm_spi_cl_funcs;
pub const CSSM_SPI_ModuleEventHandler = ?*const fn ([*c]const CSSM_GUID, ?*anyopaque, uint32, CSSM_SERVICE_TYPE, CSSM_MODULE_EVENT) callconv(.C) CSSM_RETURN;
pub const CSSM_CONTEXT_EVENT = uint32;
pub const CSSM_CONTEXT_EVENT_CREATE: c_int = 1;
pub const CSSM_CONTEXT_EVENT_DELETE: c_int = 2;
pub const CSSM_CONTEXT_EVENT_UPDATE: c_int = 3;
const enum_unnamed_1137 = c_uint;
pub const struct_cssm_module_funcs = extern struct {
    ServiceType: CSSM_SERVICE_TYPE,
    NumberOfServiceFuncs: uint32,
    ServiceFuncs: [*c]const CSSM_PROC_ADDR,
};
pub const CSSM_MODULE_FUNCS = struct_cssm_module_funcs;
pub const CSSM_MODULE_FUNCS_PTR = [*c]struct_cssm_module_funcs;
pub const CSSM_UPCALLS_MALLOC = ?*const fn (CSSM_HANDLE, usize) callconv(.C) ?*anyopaque;
pub const CSSM_UPCALLS_FREE = ?*const fn (CSSM_HANDLE, ?*anyopaque) callconv(.C) void;
pub const CSSM_UPCALLS_REALLOC = ?*const fn (CSSM_HANDLE, ?*anyopaque, usize) callconv(.C) ?*anyopaque;
pub const CSSM_UPCALLS_CALLOC = ?*const fn (CSSM_HANDLE, usize, usize) callconv(.C) ?*anyopaque;
pub const struct_cssm_upcalls = extern struct {
    malloc_func: CSSM_UPCALLS_MALLOC,
    free_func: CSSM_UPCALLS_FREE,
    realloc_func: CSSM_UPCALLS_REALLOC,
    calloc_func: CSSM_UPCALLS_CALLOC,
    CcToHandle_func: ?fn (CSSM_CC_HANDLE, CSSM_MODULE_HANDLE_PTR) callconv(.C) CSSM_RETURN,
    GetModuleInfo_func: ?fn (CSSM_MODULE_HANDLE, CSSM_GUID_PTR, CSSM_VERSION_PTR, [*c]uint32, [*c]CSSM_SERVICE_TYPE, [*c]CSSM_ATTACH_FLAGS, [*c]CSSM_KEY_HIERARCHY, CSSM_API_MEMORY_FUNCS_PTR, CSSM_FUNC_NAME_ADDR_PTR, uint32) callconv(.C) CSSM_RETURN,
};
pub const CSSM_UPCALLS = struct_cssm_upcalls;
pub const CSSM_UPCALLS_PTR = [*c]struct_cssm_upcalls;
pub const struct_cssm_spi_csp_funcs = extern struct {
    EventNotify: ?fn (CSSM_CSP_HANDLE, CSSM_CONTEXT_EVENT, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT) callconv(.C) CSSM_RETURN,
    QuerySize: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, CSSM_BOOL, uint32, CSSM_QUERY_SIZE_DATA_PTR) callconv(.C) CSSM_RETURN,
    SignData: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, [*c]const SecAsn1Item, uint32, CSSM_ALGORITHMS, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    SignDataInit: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT) callconv(.C) CSSM_RETURN,
    SignDataUpdate: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item, uint32) callconv(.C) CSSM_RETURN,
    SignDataFinal: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    VerifyData: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, [*c]const SecAsn1Item, uint32, CSSM_ALGORITHMS, [*c]const SecAsn1Item) callconv(.C) CSSM_RETURN,
    VerifyDataInit: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT) callconv(.C) CSSM_RETURN,
    VerifyDataUpdate: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item, uint32) callconv(.C) CSSM_RETURN,
    VerifyDataFinal: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item) callconv(.C) CSSM_RETURN,
    DigestData: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, [*c]const SecAsn1Item, uint32, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    DigestDataInit: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT) callconv(.C) CSSM_RETURN,
    DigestDataUpdate: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item, uint32) callconv(.C) CSSM_RETURN,
    DigestDataClone: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_CC_HANDLE) callconv(.C) CSSM_RETURN,
    DigestDataFinal: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    GenerateMac: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, [*c]const SecAsn1Item, uint32, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    GenerateMacInit: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT) callconv(.C) CSSM_RETURN,
    GenerateMacUpdate: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item, uint32) callconv(.C) CSSM_RETURN,
    GenerateMacFinal: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    VerifyMac: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, [*c]const SecAsn1Item, uint32, [*c]const SecAsn1Item) callconv(.C) CSSM_RETURN,
    VerifyMacInit: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT) callconv(.C) CSSM_RETURN,
    VerifyMacUpdate: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item, uint32) callconv(.C) CSSM_RETURN,
    VerifyMacFinal: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item) callconv(.C) CSSM_RETURN,
    EncryptData: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, [*c]const SecAsn1Item, uint32, CSSM_DATA_PTR, uint32, [*c]CSSM_SIZE, CSSM_DATA_PTR, CSSM_PRIVILEGE) callconv(.C) CSSM_RETURN,
    EncryptDataInit: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, CSSM_PRIVILEGE) callconv(.C) CSSM_RETURN,
    EncryptDataUpdate: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item, uint32, CSSM_DATA_PTR, uint32, [*c]CSSM_SIZE) callconv(.C) CSSM_RETURN,
    EncryptDataFinal: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    DecryptData: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, [*c]const SecAsn1Item, uint32, CSSM_DATA_PTR, uint32, [*c]CSSM_SIZE, CSSM_DATA_PTR, CSSM_PRIVILEGE) callconv(.C) CSSM_RETURN,
    DecryptDataInit: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, CSSM_PRIVILEGE) callconv(.C) CSSM_RETURN,
    DecryptDataUpdate: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item, uint32, CSSM_DATA_PTR, uint32, [*c]CSSM_SIZE) callconv(.C) CSSM_RETURN,
    DecryptDataFinal: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    QueryKeySizeInBits: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, [*c]const CSSM_KEY, CSSM_KEY_SIZE_PTR) callconv(.C) CSSM_RETURN,
    GenerateKey: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, uint32, uint32, [*c]const SecAsn1Item, [*c]const CSSM_RESOURCE_CONTROL_CONTEXT, CSSM_KEY_PTR, CSSM_PRIVILEGE) callconv(.C) CSSM_RETURN,
    GenerateKeyPair: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, uint32, uint32, [*c]const SecAsn1Item, CSSM_KEY_PTR, uint32, uint32, [*c]const SecAsn1Item, [*c]const CSSM_RESOURCE_CONTROL_CONTEXT, CSSM_KEY_PTR, CSSM_PRIVILEGE) callconv(.C) CSSM_RETURN,
    GenerateRandom: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    GenerateAlgorithmParams: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, uint32, CSSM_DATA_PTR, [*c]uint32, [*c]CSSM_CONTEXT_ATTRIBUTE_PTR) callconv(.C) CSSM_RETURN,
    WrapKey: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, [*c]const CSSM_ACCESS_CREDENTIALS, [*c]const CSSM_KEY, [*c]const SecAsn1Item, CSSM_WRAP_KEY_PTR, CSSM_PRIVILEGE) callconv(.C) CSSM_RETURN,
    UnwrapKey: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, [*c]const CSSM_KEY, [*c]const CSSM_WRAP_KEY, uint32, uint32, [*c]const SecAsn1Item, [*c]const CSSM_RESOURCE_CONTROL_CONTEXT, CSSM_KEY_PTR, CSSM_DATA_PTR, CSSM_PRIVILEGE) callconv(.C) CSSM_RETURN,
    DeriveKey: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, CSSM_DATA_PTR, uint32, uint32, [*c]const SecAsn1Item, [*c]const CSSM_RESOURCE_CONTROL_CONTEXT, CSSM_KEY_PTR) callconv(.C) CSSM_RETURN,
    FreeKey: ?fn (CSSM_CSP_HANDLE, [*c]const CSSM_ACCESS_CREDENTIALS, CSSM_KEY_PTR, CSSM_BOOL) callconv(.C) CSSM_RETURN,
    PassThrough: ?fn (CSSM_CSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, uint32, ?*const anyopaque, [*c]?*anyopaque) callconv(.C) CSSM_RETURN,
    Login: ?fn (CSSM_CSP_HANDLE, [*c]const CSSM_ACCESS_CREDENTIALS, [*c]const SecAsn1Item, ?*const anyopaque) callconv(.C) CSSM_RETURN,
    Logout: ?fn (CSSM_CSP_HANDLE) callconv(.C) CSSM_RETURN,
    ChangeLoginAcl: ?fn (CSSM_CSP_HANDLE, [*c]const CSSM_ACCESS_CREDENTIALS, [*c]const CSSM_ACL_EDIT) callconv(.C) CSSM_RETURN,
    ObtainPrivateKeyFromPublicKey: ?fn (CSSM_CSP_HANDLE, [*c]const CSSM_KEY, CSSM_KEY_PTR) callconv(.C) CSSM_RETURN,
    RetrieveUniqueId: ?fn (CSSM_CSP_HANDLE, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    RetrieveCounter: ?fn (CSSM_CSP_HANDLE, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    VerifyDevice: ?fn (CSSM_CSP_HANDLE, [*c]const SecAsn1Item) callconv(.C) CSSM_RETURN,
    GetTimeValue: ?fn (CSSM_CSP_HANDLE, CSSM_ALGORITHMS, [*c]SecAsn1Item) callconv(.C) CSSM_RETURN,
    GetOperationalStatistics: ?fn (CSSM_CSP_HANDLE, [*c]CSSM_CSP_OPERATIONAL_STATISTICS) callconv(.C) CSSM_RETURN,
    GetLoginAcl: ?fn (CSSM_CSP_HANDLE, [*c]const CSSM_STRING, [*c]uint32, [*c]CSSM_ACL_ENTRY_INFO_PTR) callconv(.C) CSSM_RETURN,
    GetKeyAcl: ?fn (CSSM_CSP_HANDLE, [*c]const CSSM_KEY, [*c]const CSSM_STRING, [*c]uint32, [*c]CSSM_ACL_ENTRY_INFO_PTR) callconv(.C) CSSM_RETURN,
    ChangeKeyAcl: ?fn (CSSM_CSP_HANDLE, [*c]const CSSM_ACCESS_CREDENTIALS, [*c]const CSSM_ACL_EDIT, [*c]const CSSM_KEY) callconv(.C) CSSM_RETURN,
    GetKeyOwner: ?fn (CSSM_CSP_HANDLE, [*c]const CSSM_KEY, CSSM_ACL_OWNER_PROTOTYPE_PTR) callconv(.C) CSSM_RETURN,
    ChangeKeyOwner: ?fn (CSSM_CSP_HANDLE, [*c]const CSSM_ACCESS_CREDENTIALS, [*c]const CSSM_KEY, [*c]const CSSM_ACL_OWNER_PROTOTYPE) callconv(.C) CSSM_RETURN,
    GetLoginOwner: ?fn (CSSM_CSP_HANDLE, CSSM_ACL_OWNER_PROTOTYPE_PTR) callconv(.C) CSSM_RETURN,
    ChangeLoginOwner: ?fn (CSSM_CSP_HANDLE, [*c]const CSSM_ACCESS_CREDENTIALS, [*c]const CSSM_ACL_OWNER_PROTOTYPE) callconv(.C) CSSM_RETURN,
};
pub const CSSM_SPI_CSP_FUNCS = struct_cssm_spi_csp_funcs;
pub const CSSM_SPI_CSP_FUNCS_PTR = [*c]struct_cssm_spi_csp_funcs;
pub const struct_cssm_spi_dl_funcs = extern struct {
    DbOpen: ?fn (CSSM_DL_HANDLE, [*c]const u8, [*c]const CSSM_NET_ADDRESS, CSSM_DB_ACCESS_TYPE, [*c]const CSSM_ACCESS_CREDENTIALS, ?*const anyopaque, [*c]CSSM_DB_HANDLE) callconv(.C) CSSM_RETURN,
    DbClose: ?fn (CSSM_DL_DB_HANDLE) callconv(.C) CSSM_RETURN,
    DbCreate: ?fn (CSSM_DL_HANDLE, [*c]const u8, [*c]const CSSM_NET_ADDRESS, [*c]const CSSM_DBINFO, CSSM_DB_ACCESS_TYPE, [*c]const CSSM_RESOURCE_CONTROL_CONTEXT, ?*const anyopaque, [*c]CSSM_DB_HANDLE) callconv(.C) CSSM_RETURN,
    DbDelete: ?fn (CSSM_DL_HANDLE, [*c]const u8, [*c]const CSSM_NET_ADDRESS, [*c]const CSSM_ACCESS_CREDENTIALS) callconv(.C) CSSM_RETURN,
    CreateRelation: ?fn (CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, [*c]const u8, uint32, [*c]const CSSM_DB_SCHEMA_ATTRIBUTE_INFO, uint32, [*c]const CSSM_DB_SCHEMA_INDEX_INFO) callconv(.C) CSSM_RETURN,
    DestroyRelation: ?fn (CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE) callconv(.C) CSSM_RETURN,
    Authenticate: ?fn (CSSM_DL_DB_HANDLE, CSSM_DB_ACCESS_TYPE, [*c]const CSSM_ACCESS_CREDENTIALS) callconv(.C) CSSM_RETURN,
    GetDbAcl: ?fn (CSSM_DL_DB_HANDLE, [*c]const CSSM_STRING, [*c]uint32, [*c]CSSM_ACL_ENTRY_INFO_PTR) callconv(.C) CSSM_RETURN,
    ChangeDbAcl: ?fn (CSSM_DL_DB_HANDLE, [*c]const CSSM_ACCESS_CREDENTIALS, [*c]const CSSM_ACL_EDIT) callconv(.C) CSSM_RETURN,
    GetDbOwner: ?fn (CSSM_DL_DB_HANDLE, CSSM_ACL_OWNER_PROTOTYPE_PTR) callconv(.C) CSSM_RETURN,
    ChangeDbOwner: ?fn (CSSM_DL_DB_HANDLE, [*c]const CSSM_ACCESS_CREDENTIALS, [*c]const CSSM_ACL_OWNER_PROTOTYPE) callconv(.C) CSSM_RETURN,
    GetDbNames: ?fn (CSSM_DL_HANDLE, [*c]CSSM_NAME_LIST_PTR) callconv(.C) CSSM_RETURN,
    GetDbNameFromHandle: ?fn (CSSM_DL_DB_HANDLE, [*c][*c]u8) callconv(.C) CSSM_RETURN,
    FreeNameList: ?fn (CSSM_DL_HANDLE, CSSM_NAME_LIST_PTR) callconv(.C) CSSM_RETURN,
    DataInsert: ?fn (CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, [*c]const CSSM_DB_RECORD_ATTRIBUTE_DATA, [*c]const SecAsn1Item, [*c]CSSM_DB_UNIQUE_RECORD_PTR) callconv(.C) CSSM_RETURN,
    DataDelete: ?fn (CSSM_DL_DB_HANDLE, [*c]const CSSM_DB_UNIQUE_RECORD) callconv(.C) CSSM_RETURN,
    DataModify: ?fn (CSSM_DL_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_UNIQUE_RECORD_PTR, [*c]const CSSM_DB_RECORD_ATTRIBUTE_DATA, [*c]const SecAsn1Item, CSSM_DB_MODIFY_MODE) callconv(.C) CSSM_RETURN,
    DataGetFirst: ?fn (CSSM_DL_DB_HANDLE, [*c]const CSSM_QUERY, CSSM_HANDLE_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, [*c]CSSM_DB_UNIQUE_RECORD_PTR) callconv(.C) CSSM_RETURN,
    DataGetNext: ?fn (CSSM_DL_DB_HANDLE, CSSM_HANDLE, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, [*c]CSSM_DB_UNIQUE_RECORD_PTR) callconv(.C) CSSM_RETURN,
    DataAbortQuery: ?fn (CSSM_DL_DB_HANDLE, CSSM_HANDLE) callconv(.C) CSSM_RETURN,
    DataGetFromUniqueRecordId: ?fn (CSSM_DL_DB_HANDLE, [*c]const CSSM_DB_UNIQUE_RECORD, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    FreeUniqueRecord: ?fn (CSSM_DL_DB_HANDLE, CSSM_DB_UNIQUE_RECORD_PTR) callconv(.C) CSSM_RETURN,
    PassThrough: ?fn (CSSM_DL_DB_HANDLE, uint32, ?*const anyopaque, [*c]?*anyopaque) callconv(.C) CSSM_RETURN,
};
pub const CSSM_SPI_DL_FUNCS = struct_cssm_spi_dl_funcs;
pub const CSSM_SPI_DL_FUNCS_PTR = [*c]struct_cssm_spi_dl_funcs;
pub const CSSM_KRSP_HANDLE = uint32;
pub const CSSM_KR_PROFILE = struct_cssm_kr_profile;
pub const CSSM_KR_PROFILE_PTR = [*c]struct_cssm_kr_profile;
pub const struct_cssm_kr_wrappedproductinfo = extern struct {
    StandardVersion: CSSM_VERSION,
    StandardDescription: CSSM_STRING,
    ProductVersion: CSSM_VERSION,
    ProductDescription: CSSM_STRING,
    ProductVendor: CSSM_STRING,
    ProductFlags: uint32,
};
pub const CSSM_KR_WRAPPEDPRODUCT_INFO = struct_cssm_kr_wrappedproductinfo;
pub const CSSM_KR_WRAPPEDPRODUCT_INFO_PTR = [*c]struct_cssm_kr_wrappedproductinfo;
pub const struct_cssm_krsubservice = extern struct {
    SubServiceId: uint32,
    Description: [*c]u8,
    WrappedProduct: CSSM_KR_WRAPPEDPRODUCT_INFO,
};
pub const CSSM_KRSUBSERVICE = struct_cssm_krsubservice;
pub const CSSM_KRSUBSERVICE_PTR = [*c]struct_cssm_krsubservice;
pub const CSSM_KR_POLICY_TYPE = uint32;
pub const CSSM_KR_POLICY_FLAGS = uint32;
pub const struct_kr_policy_list_item = opaque {};
pub const struct_cssm_kr_policy_list_item = extern struct {
    next: ?*struct_kr_policy_list_item,
    AlgorithmId: CSSM_ALGORITHMS,
    Mode: CSSM_ENCRYPT_MODE,
    MaxKeyLength: uint32,
    MaxRounds: uint32,
    WorkFactor: uint8,
    PolicyFlags: CSSM_KR_POLICY_FLAGS,
    AlgClass: CSSM_CONTEXT_TYPE,
};
pub const CSSM_KR_POLICY_LIST_ITEM = struct_cssm_kr_policy_list_item;
pub const CSSM_KR_POLICY_LIST_ITEM_PTR = [*c]struct_cssm_kr_policy_list_item;
pub const struct_cssm_kr_policy_info = extern struct {
    krbNotAllowed: CSSM_BOOL,
    numberOfEntries: uint32,
    policyEntry: [*c]CSSM_KR_POLICY_LIST_ITEM,
};
pub const CSSM_KR_POLICY_INFO = struct_cssm_kr_policy_info;
pub const CSSM_KR_POLICY_INFO_PTR = [*c]struct_cssm_kr_policy_info;
pub const struct_cssm_spi_kr_funcs = extern struct {
    RegistrationRequest: ?fn (CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, [*c]const SecAsn1Item, [*c]const CSSM_ACCESS_CREDENTIALS, CSSM_KR_POLICY_FLAGS, [*c]sint32, CSSM_HANDLE_PTR) callconv(.C) CSSM_RETURN,
    RegistrationRetrieve: ?fn (CSSM_KRSP_HANDLE, CSSM_HANDLE, [*c]sint32, CSSM_KR_PROFILE_PTR) callconv(.C) CSSM_RETURN,
    GenerateRecoveryFields: ?fn (CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, [*c]const SecAsn1Item, CSSM_KR_POLICY_FLAGS, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    ProcessRecoveryFields: ?fn (CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, [*c]const SecAsn1Item, CSSM_KR_POLICY_FLAGS, [*c]const SecAsn1Item) callconv(.C) CSSM_RETURN,
    RecoveryRequest: ?fn (CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, [*c]const SecAsn1Item, [*c]const CSSM_ACCESS_CREDENTIALS, [*c]sint32, CSSM_HANDLE_PTR) callconv(.C) CSSM_RETURN,
    RecoveryRetrieve: ?fn (CSSM_KRSP_HANDLE, CSSM_HANDLE, [*c]sint32, CSSM_HANDLE_PTR, [*c]uint32) callconv(.C) CSSM_RETURN,
    GetRecoveredObject: ?fn (CSSM_KRSP_HANDLE, CSSM_HANDLE, uint32, CSSM_CSP_HANDLE, [*c]const CSSM_RESOURCE_CONTROL_CONTEXT, uint32, CSSM_KEY_PTR, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    RecoveryRequestAbort: ?fn (CSSM_KRSP_HANDLE, CSSM_HANDLE) callconv(.C) CSSM_RETURN,
    PassThrough: ?fn (CSSM_KRSP_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, CSSM_CC_HANDLE, [*c]const CSSM_CONTEXT, uint32, ?*const anyopaque, [*c]?*anyopaque) callconv(.C) CSSM_RETURN,
};
pub const CSSM_SPI_KR_FUNCS = struct_cssm_spi_kr_funcs;
pub const CSSM_SPI_KR_FUNCS_PTR = [*c]struct_cssm_spi_kr_funcs;
pub const struct_cssm_spi_tp_funcs = extern struct {
    SubmitCredRequest: ?fn (CSSM_TP_HANDLE, [*c]const CSSM_TP_AUTHORITY_ID, CSSM_TP_AUTHORITY_REQUEST_TYPE, [*c]const CSSM_TP_REQUEST_SET, [*c]const CSSM_TP_CALLERAUTH_CONTEXT, [*c]sint32, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    RetrieveCredResult: ?fn (CSSM_TP_HANDLE, [*c]const SecAsn1Item, [*c]const CSSM_TP_CALLERAUTH_CONTEXT, [*c]sint32, [*c]CSSM_BOOL, [*c]CSSM_TP_RESULT_SET_PTR) callconv(.C) CSSM_RETURN,
    ConfirmCredResult: ?fn (CSSM_TP_HANDLE, [*c]const SecAsn1Item, [*c]const CSSM_TP_CALLERAUTH_CONTEXT, [*c]const CSSM_TP_CONFIRM_RESPONSE, [*c]const CSSM_TP_AUTHORITY_ID) callconv(.C) CSSM_RETURN,
    ReceiveConfirmation: ?fn (CSSM_TP_HANDLE, [*c]const SecAsn1Item, [*c]CSSM_TP_CONFIRM_RESPONSE_PTR, [*c]sint32) callconv(.C) CSSM_RETURN,
    CertReclaimKey: ?fn (CSSM_TP_HANDLE, [*c]const CSSM_CERTGROUP, uint32, CSSM_LONG_HANDLE, CSSM_CSP_HANDLE, [*c]const CSSM_RESOURCE_CONTROL_CONTEXT) callconv(.C) CSSM_RETURN,
    CertReclaimAbort: ?fn (CSSM_TP_HANDLE, CSSM_LONG_HANDLE) callconv(.C) CSSM_RETURN,
    FormRequest: ?fn (CSSM_TP_HANDLE, [*c]const CSSM_TP_AUTHORITY_ID, CSSM_TP_FORM_TYPE, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    FormSubmit: ?fn (CSSM_TP_HANDLE, CSSM_TP_FORM_TYPE, [*c]const SecAsn1Item, [*c]const CSSM_TP_AUTHORITY_ID, [*c]const CSSM_TP_AUTHORITY_ID, CSSM_ACCESS_CREDENTIALS_PTR) callconv(.C) CSSM_RETURN,
    CertGroupVerify: ?fn (CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, [*c]const CSSM_CERTGROUP, [*c]const CSSM_TP_VERIFY_CONTEXT, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR) callconv(.C) CSSM_RETURN,
    CertCreateTemplate: ?fn (CSSM_TP_HANDLE, CSSM_CL_HANDLE, uint32, [*c]const CSSM_FIELD, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CertGetAllTemplateFields: ?fn (CSSM_TP_HANDLE, CSSM_CL_HANDLE, [*c]const SecAsn1Item, [*c]uint32, [*c]CSSM_FIELD_PTR) callconv(.C) CSSM_RETURN,
    CertSign: ?fn (CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, [*c]const SecAsn1Item, [*c]const CSSM_CERTGROUP, [*c]const CSSM_TP_VERIFY_CONTEXT, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CrlVerify: ?fn (CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, [*c]const CSSM_ENCODED_CRL, [*c]const CSSM_CERTGROUP, [*c]const CSSM_TP_VERIFY_CONTEXT, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR) callconv(.C) CSSM_RETURN,
    CrlCreateTemplate: ?fn (CSSM_TP_HANDLE, CSSM_CL_HANDLE, uint32, [*c]const CSSM_FIELD, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CertRevoke: ?fn (CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, [*c]const SecAsn1Item, [*c]const CSSM_CERTGROUP, [*c]const CSSM_CERTGROUP, [*c]const CSSM_TP_VERIFY_CONTEXT, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_TP_CERTCHANGE_REASON, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CertRemoveFromCrlTemplate: ?fn (CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, [*c]const SecAsn1Item, [*c]const CSSM_CERTGROUP, [*c]const CSSM_CERTGROUP, [*c]const CSSM_TP_VERIFY_CONTEXT, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    CrlSign: ?fn (CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_ENCODED_CRL, [*c]const CSSM_CERTGROUP, [*c]const CSSM_TP_VERIFY_CONTEXT, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    ApplyCrlToDb: ?fn (CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, [*c]const CSSM_ENCODED_CRL, [*c]const CSSM_CERTGROUP, [*c]const CSSM_TP_VERIFY_CONTEXT, CSSM_TP_VERIFY_CONTEXT_RESULT_PTR) callconv(.C) CSSM_RETURN,
    CertGroupConstruct: ?fn (CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CSP_HANDLE, [*c]const CSSM_DL_DB_LIST, ?*const anyopaque, [*c]const CSSM_CERTGROUP, [*c]CSSM_CERTGROUP_PTR) callconv(.C) CSSM_RETURN,
    CertGroupPrune: ?fn (CSSM_TP_HANDLE, CSSM_CL_HANDLE, [*c]const CSSM_DL_DB_LIST, [*c]const CSSM_CERTGROUP, [*c]CSSM_CERTGROUP_PTR) callconv(.C) CSSM_RETURN,
    CertGroupToTupleGroup: ?fn (CSSM_TP_HANDLE, CSSM_CL_HANDLE, [*c]const CSSM_CERTGROUP, [*c]CSSM_TUPLEGROUP_PTR) callconv(.C) CSSM_RETURN,
    TupleGroupToCertGroup: ?fn (CSSM_TP_HANDLE, CSSM_CL_HANDLE, [*c]const CSSM_TUPLEGROUP, [*c]CSSM_CERTGROUP_PTR) callconv(.C) CSSM_RETURN,
    PassThrough: ?fn (CSSM_TP_HANDLE, CSSM_CL_HANDLE, CSSM_CC_HANDLE, [*c]const CSSM_DL_DB_LIST, uint32, ?*const anyopaque, [*c]?*anyopaque) callconv(.C) CSSM_RETURN,
};
pub const CSSM_SPI_TP_FUNCS = struct_cssm_spi_tp_funcs;
pub const CSSM_SPI_TP_FUNCS_PTR = [*c]struct_cssm_spi_tp_funcs;
pub const struct_cssm_state_funcs = extern struct {
    cssm_GetAttachFunctions: ?fn (CSSM_MODULE_HANDLE, CSSM_SERVICE_MASK, [*c]?*anyopaque, CSSM_GUID_PTR, [*c]CSSM_BOOL) callconv(.C) CSSM_RETURN,
    cssm_ReleaseAttachFunctions: ?fn (CSSM_MODULE_HANDLE) callconv(.C) CSSM_RETURN,
    cssm_GetAppMemoryFunctions: ?fn (CSSM_MODULE_HANDLE, CSSM_UPCALLS_PTR) callconv(.C) CSSM_RETURN,
    cssm_IsFuncCallValid: ?fn (CSSM_MODULE_HANDLE, CSSM_PROC_ADDR, CSSM_PROC_ADDR, CSSM_PRIVILEGE, [*c]CSSM_PRIVILEGE, CSSM_BITMASK, [*c]CSSM_BOOL) callconv(.C) CSSM_RETURN,
    cssm_DeregisterManagerServices: ?fn ([*c]const CSSM_GUID) callconv(.C) CSSM_RETURN,
    cssm_DeliverModuleManagerEvent: ?fn ([*c]const CSSM_MANAGER_EVENT_NOTIFICATION) callconv(.C) CSSM_RETURN,
};
pub const CSSM_STATE_FUNCS = struct_cssm_state_funcs;
pub const CSSM_STATE_FUNCS_PTR = [*c]struct_cssm_state_funcs;
pub const struct_cssm_manager_registration_info = extern struct {
    Initialize: ?fn (uint32, uint32) callconv(.C) CSSM_RETURN,
    Terminate: ?fn () callconv(.C) CSSM_RETURN,
    RegisterDispatchTable: ?fn (CSSM_STATE_FUNCS_PTR) callconv(.C) CSSM_RETURN,
    DeregisterDispatchTable: ?fn () callconv(.C) CSSM_RETURN,
    EventNotifyManager: ?fn ([*c]const CSSM_MANAGER_EVENT_NOTIFICATION) callconv(.C) CSSM_RETURN,
    RefreshFunctionTable: ?fn (CSSM_FUNC_NAME_ADDR_PTR, uint32) callconv(.C) CSSM_RETURN,
};
pub const CSSM_MANAGER_REGISTRATION_INFO = struct_cssm_manager_registration_info;
pub const CSSM_MANAGER_REGISTRATION_INFO_PTR = [*c]struct_cssm_manager_registration_info;
pub const CSSM_HINT_NONE: c_int = 0;
pub const CSSM_HINT_ADDRESS_APP: c_int = 1;
pub const CSSM_HINT_ADDRESS_SP: c_int = 2;
const enum_unnamed_1138 = c_uint;
pub const MDS_HANDLE = CSSM_DL_HANDLE;
pub const MDS_DB_HANDLE = CSSM_DL_DB_HANDLE;
pub const struct_mds_funcs = extern struct {
    DbOpen: ?fn (MDS_HANDLE, [*c]const u8, [*c]const CSSM_NET_ADDRESS, CSSM_DB_ACCESS_TYPE, [*c]const CSSM_ACCESS_CREDENTIALS, ?*const anyopaque, [*c]CSSM_DB_HANDLE) callconv(.C) CSSM_RETURN,
    DbClose: ?fn (MDS_DB_HANDLE) callconv(.C) CSSM_RETURN,
    GetDbNames: ?fn (MDS_HANDLE, [*c]CSSM_NAME_LIST_PTR) callconv(.C) CSSM_RETURN,
    GetDbNameFromHandle: ?fn (MDS_DB_HANDLE, [*c][*c]u8) callconv(.C) CSSM_RETURN,
    FreeNameList: ?fn (MDS_HANDLE, CSSM_NAME_LIST_PTR) callconv(.C) CSSM_RETURN,
    DataInsert: ?fn (MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, [*c]const CSSM_DB_RECORD_ATTRIBUTE_DATA, [*c]const SecAsn1Item, [*c]CSSM_DB_UNIQUE_RECORD_PTR) callconv(.C) CSSM_RETURN,
    DataDelete: ?fn (MDS_DB_HANDLE, [*c]const CSSM_DB_UNIQUE_RECORD) callconv(.C) CSSM_RETURN,
    DataModify: ?fn (MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, CSSM_DB_UNIQUE_RECORD_PTR, [*c]const CSSM_DB_RECORD_ATTRIBUTE_DATA, [*c]const SecAsn1Item, CSSM_DB_MODIFY_MODE) callconv(.C) CSSM_RETURN,
    DataGetFirst: ?fn (MDS_DB_HANDLE, [*c]const CSSM_QUERY, CSSM_HANDLE_PTR, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, [*c]CSSM_DB_UNIQUE_RECORD_PTR) callconv(.C) CSSM_RETURN,
    DataGetNext: ?fn (MDS_DB_HANDLE, CSSM_HANDLE, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR, [*c]CSSM_DB_UNIQUE_RECORD_PTR) callconv(.C) CSSM_RETURN,
    DataAbortQuery: ?fn (MDS_DB_HANDLE, CSSM_HANDLE) callconv(.C) CSSM_RETURN,
    DataGetFromUniqueRecordId: ?fn (MDS_DB_HANDLE, [*c]const CSSM_DB_UNIQUE_RECORD, CSSM_DB_RECORD_ATTRIBUTE_DATA_PTR, CSSM_DATA_PTR) callconv(.C) CSSM_RETURN,
    FreeUniqueRecord: ?fn (MDS_DB_HANDLE, CSSM_DB_UNIQUE_RECORD_PTR) callconv(.C) CSSM_RETURN,
    CreateRelation: ?fn (MDS_DB_HANDLE, CSSM_DB_RECORDTYPE, [*c]const u8, uint32, [*c]const CSSM_DB_SCHEMA_ATTRIBUTE_INFO, uint32, [*c]const CSSM_DB_SCHEMA_INDEX_INFO) callconv(.C) CSSM_RETURN,
    DestroyRelation: ?fn (MDS_DB_HANDLE, CSSM_DB_RECORDTYPE) callconv(.C) CSSM_RETURN,
};
pub const MDS_FUNCS = struct_mds_funcs;
pub const MDS_FUNCS_PTR = [*c]struct_mds_funcs;
pub extern fn MDS_Initialize(pCallerGuid: [*c]const CSSM_GUID, pMemoryFunctions: [*c]const CSSM_MEMORY_FUNCS, pDlFunctions: MDS_FUNCS_PTR, hMds: [*c]MDS_HANDLE) CSSM_RETURN;
pub extern fn MDS_Terminate(MdsHandle: MDS_HANDLE) CSSM_RETURN;
pub extern fn MDS_Install(MdsHandle: MDS_HANDLE) CSSM_RETURN;
pub extern fn MDS_Uninstall(MdsHandle: MDS_HANDLE) CSSM_RETURN;
pub extern const CSSMOID_MD2: SecAsn1Oid;
pub extern const CSSMOID_MD4: SecAsn1Oid;
pub extern const CSSMOID_MD5: SecAsn1Oid;
pub extern const CSSMOID_RSA: SecAsn1Oid;
pub extern const CSSMOID_MD2WithRSA: SecAsn1Oid;
pub extern const CSSMOID_MD4WithRSA: SecAsn1Oid;
pub extern const CSSMOID_MD5WithRSA: SecAsn1Oid;
pub extern const CSSMOID_SHA1WithRSA: SecAsn1Oid;
pub extern const CSSMOID_SHA224WithRSA: SecAsn1Oid;
pub extern const CSSMOID_SHA256WithRSA: SecAsn1Oid;
pub extern const CSSMOID_SHA384WithRSA: SecAsn1Oid;
pub extern const CSSMOID_SHA512WithRSA: SecAsn1Oid;
pub extern const CSSMOID_SHA1WithRSA_OIW: SecAsn1Oid;
pub extern const CSSMOID_RSAWithOAEP: SecAsn1Oid;
pub extern const CSSMOID_OAEP_MGF1: SecAsn1Oid;
pub extern const CSSMOID_OAEP_ID_PSPECIFIED: SecAsn1Oid;
pub extern const CSSMOID_DES_CBC: SecAsn1Oid;
pub extern const CSSMOID_ANSI_DH_PUB_NUMBER: SecAsn1Oid;
pub extern const CSSMOID_ANSI_DH_STATIC: SecAsn1Oid;
pub extern const CSSMOID_ANSI_DH_ONE_FLOW: SecAsn1Oid;
pub extern const CSSMOID_ANSI_DH_EPHEM: SecAsn1Oid;
pub extern const CSSMOID_ANSI_DH_HYBRID1: SecAsn1Oid;
pub extern const CSSMOID_ANSI_DH_HYBRID2: SecAsn1Oid;
pub extern const CSSMOID_ANSI_DH_HYBRID_ONEFLOW: SecAsn1Oid;
pub extern const CSSMOID_ANSI_MQV1: SecAsn1Oid;
pub extern const CSSMOID_ANSI_MQV2: SecAsn1Oid;
pub extern const CSSMOID_ANSI_DH_STATIC_SHA1: SecAsn1Oid;
pub extern const CSSMOID_ANSI_DH_ONE_FLOW_SHA1: SecAsn1Oid;
pub extern const CSSMOID_ANSI_DH_EPHEM_SHA1: SecAsn1Oid;
pub extern const CSSMOID_ANSI_DH_HYBRID1_SHA1: SecAsn1Oid;
pub extern const CSSMOID_ANSI_DH_HYBRID2_SHA1: SecAsn1Oid;
pub extern const CSSMOID_ANSI_MQV1_SHA1: SecAsn1Oid;
pub extern const CSSMOID_ANSI_MQV2_SHA1: SecAsn1Oid;
pub extern const CSSMOID_PKCS3: SecAsn1Oid;
pub extern const CSSMOID_DH: SecAsn1Oid;
pub extern const CSSMOID_DSA: SecAsn1Oid;
pub extern const CSSMOID_DSA_CMS: SecAsn1Oid;
pub extern const CSSMOID_DSA_JDK: SecAsn1Oid;
pub extern const CSSMOID_SHA1WithDSA: SecAsn1Oid;
pub extern const CSSMOID_SHA1WithDSA_CMS: SecAsn1Oid;
pub extern const CSSMOID_SHA1WithDSA_JDK: SecAsn1Oid;
pub extern const CSSMOID_SHA1: SecAsn1Oid;
pub extern const CSSMOID_SHA224: SecAsn1Oid;
pub extern const CSSMOID_SHA256: SecAsn1Oid;
pub extern const CSSMOID_SHA384: SecAsn1Oid;
pub extern const CSSMOID_SHA512: SecAsn1Oid;
pub extern const CSSMOID_ecPublicKey: SecAsn1Oid;
pub extern const CSSMOID_ECDSA_WithSHA1: SecAsn1Oid;
pub extern const CSSMOID_ECDSA_WithSHA224: SecAsn1Oid;
pub extern const CSSMOID_ECDSA_WithSHA256: SecAsn1Oid;
pub extern const CSSMOID_ECDSA_WithSHA384: SecAsn1Oid;
pub extern const CSSMOID_ECDSA_WithSHA512: SecAsn1Oid;
pub extern const CSSMOID_ECDSA_WithSpecified: SecAsn1Oid;
pub extern const CSSMOID_APPLE_ISIGN: SecAsn1Oid;
pub extern const CSSMOID_APPLE_X509_BASIC: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_SSL: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_LOCAL_CERT_GEN: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_CSR_GEN: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_REVOCATION_CRL: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_REVOCATION_OCSP: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_SMIME: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_EAP: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_CODE_SIGN: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_SW_UPDATE_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_IP_SEC: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_ICHAT: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_RESOURCE_SIGN: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_PKINIT_CLIENT: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_PKINIT_SERVER: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_CODE_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_PACKAGE_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_MACAPPSTORE_RECEIPT: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_APPLEID_SHARING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_TIMESTAMPING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_REVOCATION: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_PASSBOOK_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_MOBILE_STORE: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_ESCROW_SERVICE: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_PROFILE_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_QA_PROFILE_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_TEST_MOBILE_STORE: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_PCS_ESCROW_SERVICE: SecAsn1Oid;
pub extern const CSSMOID_APPLE_TP_PROVISIONING_PROFILE_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_FEE: SecAsn1Oid;
pub extern const CSSMOID_APPLE_ASC: SecAsn1Oid;
pub extern const CSSMOID_APPLE_FEE_MD5: SecAsn1Oid;
pub extern const CSSMOID_APPLE_FEE_SHA1: SecAsn1Oid;
pub extern const CSSMOID_APPLE_FEED: SecAsn1Oid;
pub extern const CSSMOID_APPLE_FEEDEXP: SecAsn1Oid;
pub extern const CSSMOID_APPLE_ECDSA: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_REQ: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_REQ_IDENTITY: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_REQ_EMAIL_SIGN: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_REQ_EMAIL_ENCRYPT: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_LIST: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_STORE: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_FETCH: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_REQ_ARCHIVE_REMOVE: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_REQ_SHARED_SERVICES: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_REQ_VALUE_USERNAME: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_REQ_VALUE_PASSWORD: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_REQ_VALUE_HOSTNAME: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_REQ_VALUE_RENEW: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_REQ_VALUE_ASYNC: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_REQ_VALUE_IS_PENDING: SecAsn1Oid;
pub extern const CSSMOID_PKCS5_DIGEST_ALG: SecAsn1Oid;
pub extern const CSSMOID_PKCS5_ENCRYPT_ALG: SecAsn1Oid;
pub extern const CSSMOID_PKCS5_HMAC_SHA1: SecAsn1Oid;
pub extern const CSSMOID_PKCS5_pbeWithMD2AndDES: SecAsn1Oid;
pub extern const CSSMOID_PKCS5_pbeWithMD2AndRC2: SecAsn1Oid;
pub extern const CSSMOID_PKCS5_pbeWithMD5AndDES: SecAsn1Oid;
pub extern const CSSMOID_PKCS5_pbeWithMD5AndRC2: SecAsn1Oid;
pub extern const CSSMOID_PKCS5_pbeWithSHA1AndDES: SecAsn1Oid;
pub extern const CSSMOID_PKCS5_pbeWithSHA1AndRC2: SecAsn1Oid;
pub extern const CSSMOID_PKCS5_PBKDF2: SecAsn1Oid;
pub extern const CSSMOID_PKCS5_PBES2: SecAsn1Oid;
pub extern const CSSMOID_PKCS5_PBMAC1: SecAsn1Oid;
pub extern const CSSMOID_PKCS5_RC2_CBC: SecAsn1Oid;
pub extern const CSSMOID_PKCS5_DES_EDE3_CBC: SecAsn1Oid;
pub extern const CSSMOID_PKCS5_RC5_CBC: SecAsn1Oid;
pub extern const CSSMOID_PKCS12_pbeWithSHAAnd128BitRC4: SecAsn1Oid;
pub extern const CSSMOID_PKCS12_pbeWithSHAAnd40BitRC4: SecAsn1Oid;
pub extern const CSSMOID_PKCS12_pbeWithSHAAnd3Key3DESCBC: SecAsn1Oid;
pub extern const CSSMOID_PKCS12_pbeWithSHAAnd2Key3DESCBC: SecAsn1Oid;
pub extern const CSSMOID_PKCS12_pbeWithSHAAnd128BitRC2CBC: SecAsn1Oid;
pub extern const CSSMOID_PKCS12_pbewithSHAAnd40BitRC2CBC: SecAsn1Oid;
pub extern const CSSMOID_ObjectClass: SecAsn1Oid;
pub extern const CSSMOID_AliasedEntryName: SecAsn1Oid;
pub extern const CSSMOID_KnowledgeInformation: SecAsn1Oid;
pub extern const CSSMOID_CommonName: SecAsn1Oid;
pub extern const CSSMOID_Surname: SecAsn1Oid;
pub extern const CSSMOID_SerialNumber: SecAsn1Oid;
pub extern const CSSMOID_CountryName: SecAsn1Oid;
pub extern const CSSMOID_LocalityName: SecAsn1Oid;
pub extern const CSSMOID_StateProvinceName: SecAsn1Oid;
pub extern const CSSMOID_CollectiveStateProvinceName: SecAsn1Oid;
pub extern const CSSMOID_StreetAddress: SecAsn1Oid;
pub extern const CSSMOID_CollectiveStreetAddress: SecAsn1Oid;
pub extern const CSSMOID_OrganizationName: SecAsn1Oid;
pub extern const CSSMOID_CollectiveOrganizationName: SecAsn1Oid;
pub extern const CSSMOID_OrganizationalUnitName: SecAsn1Oid;
pub extern const CSSMOID_CollectiveOrganizationalUnitName: SecAsn1Oid;
pub extern const CSSMOID_Title: SecAsn1Oid;
pub extern const CSSMOID_Description: SecAsn1Oid;
pub extern const CSSMOID_SearchGuide: SecAsn1Oid;
pub extern const CSSMOID_BusinessCategory: SecAsn1Oid;
pub extern const CSSMOID_PostalAddress: SecAsn1Oid;
pub extern const CSSMOID_CollectivePostalAddress: SecAsn1Oid;
pub extern const CSSMOID_PostalCode: SecAsn1Oid;
pub extern const CSSMOID_CollectivePostalCode: SecAsn1Oid;
pub extern const CSSMOID_PostOfficeBox: SecAsn1Oid;
pub extern const CSSMOID_CollectivePostOfficeBox: SecAsn1Oid;
pub extern const CSSMOID_PhysicalDeliveryOfficeName: SecAsn1Oid;
pub extern const CSSMOID_CollectivePhysicalDeliveryOfficeName: SecAsn1Oid;
pub extern const CSSMOID_TelephoneNumber: SecAsn1Oid;
pub extern const CSSMOID_CollectiveTelephoneNumber: SecAsn1Oid;
pub extern const CSSMOID_TelexNumber: SecAsn1Oid;
pub extern const CSSMOID_CollectiveTelexNumber: SecAsn1Oid;
pub extern const CSSMOID_TelexTerminalIdentifier: SecAsn1Oid;
pub extern const CSSMOID_CollectiveTelexTerminalIdentifier: SecAsn1Oid;
pub extern const CSSMOID_FacsimileTelephoneNumber: SecAsn1Oid;
pub extern const CSSMOID_CollectiveFacsimileTelephoneNumber: SecAsn1Oid;
pub extern const CSSMOID_X_121Address: SecAsn1Oid;
pub extern const CSSMOID_InternationalISDNNumber: SecAsn1Oid;
pub extern const CSSMOID_CollectiveInternationalISDNNumber: SecAsn1Oid;
pub extern const CSSMOID_RegisteredAddress: SecAsn1Oid;
pub extern const CSSMOID_DestinationIndicator: SecAsn1Oid;
pub extern const CSSMOID_PreferredDeliveryMethod: SecAsn1Oid;
pub extern const CSSMOID_PresentationAddress: SecAsn1Oid;
pub extern const CSSMOID_SupportedApplicationContext: SecAsn1Oid;
pub extern const CSSMOID_Member: SecAsn1Oid;
pub extern const CSSMOID_Owner: SecAsn1Oid;
pub extern const CSSMOID_RoleOccupant: SecAsn1Oid;
pub extern const CSSMOID_SeeAlso: SecAsn1Oid;
pub extern const CSSMOID_UserPassword: SecAsn1Oid;
pub extern const CSSMOID_UserCertificate: SecAsn1Oid;
pub extern const CSSMOID_CACertificate: SecAsn1Oid;
pub extern const CSSMOID_AuthorityRevocationList: SecAsn1Oid;
pub extern const CSSMOID_CertificateRevocationList: SecAsn1Oid;
pub extern const CSSMOID_CrossCertificatePair: SecAsn1Oid;
pub extern const CSSMOID_Name: SecAsn1Oid;
pub extern const CSSMOID_GivenName: SecAsn1Oid;
pub extern const CSSMOID_Initials: SecAsn1Oid;
pub extern const CSSMOID_GenerationQualifier: SecAsn1Oid;
pub extern const CSSMOID_UniqueIdentifier: SecAsn1Oid;
pub extern const CSSMOID_DNQualifier: SecAsn1Oid;
pub extern const CSSMOID_EnhancedSearchGuide: SecAsn1Oid;
pub extern const CSSMOID_ProtocolInformation: SecAsn1Oid;
pub extern const CSSMOID_DistinguishedName: SecAsn1Oid;
pub extern const CSSMOID_UniqueMember: SecAsn1Oid;
pub extern const CSSMOID_HouseIdentifier: SecAsn1Oid;
pub extern const CSSMOID_EmailAddress: SecAsn1Oid;
pub extern const CSSMOID_UnstructuredName: SecAsn1Oid;
pub extern const CSSMOID_ContentType: SecAsn1Oid;
pub extern const CSSMOID_MessageDigest: SecAsn1Oid;
pub extern const CSSMOID_SigningTime: SecAsn1Oid;
pub extern const CSSMOID_CounterSignature: SecAsn1Oid;
pub extern const CSSMOID_ChallengePassword: SecAsn1Oid;
pub extern const CSSMOID_UnstructuredAddress: SecAsn1Oid;
pub extern const CSSMOID_ExtendedCertificateAttributes: SecAsn1Oid;
pub extern const CSSMOID_PKCS9_Id_Ct_TSTInfo: SecAsn1Oid;
pub extern const CSSMOID_PKCS9_TimeStampToken: SecAsn1Oid;
pub extern const CSSMOID_QT_CPS: SecAsn1Oid;
pub extern const CSSMOID_QT_UNOTICE: SecAsn1Oid;
pub extern const CSSMOID_AD_OCSP: SecAsn1Oid;
pub extern const CSSMOID_AD_CA_ISSUERS: SecAsn1Oid;
pub extern const CSSMOID_AD_TIME_STAMPING: SecAsn1Oid;
pub extern const CSSMOID_AD_CA_REPOSITORY: SecAsn1Oid;
pub extern const CSSMOID_PDA_DATE_OF_BIRTH: SecAsn1Oid;
pub extern const CSSMOID_PDA_PLACE_OF_BIRTH: SecAsn1Oid;
pub extern const CSSMOID_PDA_GENDER: SecAsn1Oid;
pub extern const CSSMOID_PDA_COUNTRY_CITIZEN: SecAsn1Oid;
pub extern const CSSMOID_PDA_COUNTRY_RESIDENCE: SecAsn1Oid;
pub extern const CSSMOID_OID_QCS_SYNTAX_V1: SecAsn1Oid;
pub extern const CSSMOID_OID_QCS_SYNTAX_V2: SecAsn1Oid;
pub extern const CSSMOID_ETSI_QCS_QC_COMPLIANCE: SecAsn1Oid;
pub extern const CSSMOID_ETSI_QCS_QC_LIMIT_VALUE: SecAsn1Oid;
pub extern const CSSMOID_ETSI_QCS_QC_RETENTION: SecAsn1Oid;
pub extern const CSSMOID_ETSI_QCS_QC_SSCD: SecAsn1Oid;
pub extern const CSSMOID_PKCS7_Data: SecAsn1Oid;
pub extern const CSSMOID_PKCS7_SignedData: SecAsn1Oid;
pub extern const CSSMOID_PKCS7_EnvelopedData: SecAsn1Oid;
pub extern const CSSMOID_PKCS7_SignedAndEnvelopedData: SecAsn1Oid;
pub extern const CSSMOID_PKCS7_DigestedData: SecAsn1Oid;
pub extern const CSSMOID_PKCS7_EncryptedData: SecAsn1Oid;
pub extern const CSSMOID_PKCS7_DataWithAttributes: SecAsn1Oid;
pub extern const CSSMOID_PKCS7_EncryptedPrivateKeyInfo: SecAsn1Oid;
pub extern const CSSMOID_PKCS9_FriendlyName: SecAsn1Oid;
pub extern const CSSMOID_PKCS9_LocalKeyId: SecAsn1Oid;
pub extern const CSSMOID_PKCS9_CertTypes: SecAsn1Oid;
pub extern const CSSMOID_PKCS9_CrlTypes: SecAsn1Oid;
pub extern const CSSMOID_PKCS9_X509Certificate: SecAsn1Oid;
pub extern const CSSMOID_PKCS9_SdsiCertificate: SecAsn1Oid;
pub extern const CSSMOID_PKCS9_X509Crl: SecAsn1Oid;
pub extern const CSSMOID_PKCS12_keyBag: SecAsn1Oid;
pub extern const CSSMOID_PKCS12_shroudedKeyBag: SecAsn1Oid;
pub extern const CSSMOID_PKCS12_certBag: SecAsn1Oid;
pub extern const CSSMOID_PKCS12_crlBag: SecAsn1Oid;
pub extern const CSSMOID_PKCS12_secretBag: SecAsn1Oid;
pub extern const CSSMOID_PKCS12_safeContentsBag: SecAsn1Oid;
pub extern const CSSMOID_UserID: SecAsn1Oid;
pub extern const CSSMOID_DomainComponent: SecAsn1Oid;
pub extern const CSSMOID_KERBv5_PKINIT_AUTH_DATA: SecAsn1Oid;
pub extern const CSSMOID_KERBv5_PKINIT_DH_KEY_DATA: SecAsn1Oid;
pub extern const CSSMOID_KERBv5_PKINIT_RKEY_DATA: SecAsn1Oid;
pub extern const CSSMOID_X9_62: SecAsn1Oid;
pub extern const CSSMOID_X9_62_FieldType: SecAsn1Oid;
pub extern const CSSMOID_X9_62_PubKeyType: SecAsn1Oid;
pub extern const CSSMOID_X9_62_EllCurve: SecAsn1Oid;
pub extern const CSSMOID_X9_62_C_TwoCurve: SecAsn1Oid;
pub extern const CSSMOID_X9_62_PrimeCurve: SecAsn1Oid;
pub extern const CSSMOID_X9_62_SigType: SecAsn1Oid;
pub extern const CSSMOID_secp192r1: SecAsn1Oid;
pub extern const CSSMOID_secp256r1: SecAsn1Oid;
pub extern const CSSMOID_Certicom: SecAsn1Oid;
pub extern const CSSMOID_CerticomEllCurve: SecAsn1Oid;
pub extern const CSSMOID_secp112r1: SecAsn1Oid;
pub extern const CSSMOID_secp112r2: SecAsn1Oid;
pub extern const CSSMOID_secp128r1: SecAsn1Oid;
pub extern const CSSMOID_secp128r2: SecAsn1Oid;
pub extern const CSSMOID_secp160k1: SecAsn1Oid;
pub extern const CSSMOID_secp160r1: SecAsn1Oid;
pub extern const CSSMOID_secp160r2: SecAsn1Oid;
pub extern const CSSMOID_secp192k1: SecAsn1Oid;
pub extern const CSSMOID_secp224k1: SecAsn1Oid;
pub extern const CSSMOID_secp224r1: SecAsn1Oid;
pub extern const CSSMOID_secp256k1: SecAsn1Oid;
pub extern const CSSMOID_secp384r1: SecAsn1Oid;
pub extern const CSSMOID_secp521r1: SecAsn1Oid;
pub extern const CSSMOID_sect113r1: SecAsn1Oid;
pub extern const CSSMOID_sect113r2: SecAsn1Oid;
pub extern const CSSMOID_sect131r1: SecAsn1Oid;
pub extern const CSSMOID_sect131r2: SecAsn1Oid;
pub extern const CSSMOID_sect163k1: SecAsn1Oid;
pub extern const CSSMOID_sect163r1: SecAsn1Oid;
pub extern const CSSMOID_sect163r2: SecAsn1Oid;
pub extern const CSSMOID_sect193r1: SecAsn1Oid;
pub extern const CSSMOID_sect193r2: SecAsn1Oid;
pub extern const CSSMOID_sect233k1: SecAsn1Oid;
pub extern const CSSMOID_sect233r1: SecAsn1Oid;
pub extern const CSSMOID_sect239k1: SecAsn1Oid;
pub extern const CSSMOID_sect283k1: SecAsn1Oid;
pub extern const CSSMOID_sect283r1: SecAsn1Oid;
pub extern const CSSMOID_sect409k1: SecAsn1Oid;
pub extern const CSSMOID_sect409r1: SecAsn1Oid;
pub extern const CSSMOID_sect571k1: SecAsn1Oid;
pub extern const CSSMOID_sect571r1: SecAsn1Oid;
pub extern const CSSMOID_X509V3SignedCertificate: SecAsn1Oid;
pub extern const CSSMOID_X509V3SignedCertificateCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V3Certificate: SecAsn1Oid;
pub extern const CSSMOID_X509V3CertificateCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V1Version: SecAsn1Oid;
pub extern const CSSMOID_X509V1SerialNumber: SecAsn1Oid;
pub extern const CSSMOID_X509V1IssuerName: SecAsn1Oid;
pub extern const CSSMOID_X509V1IssuerNameStd: SecAsn1Oid;
pub extern const CSSMOID_X509V1IssuerNameCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V1IssuerNameLDAP: SecAsn1Oid;
pub extern const CSSMOID_X509V1ValidityNotBefore: SecAsn1Oid;
pub extern const CSSMOID_X509V1ValidityNotAfter: SecAsn1Oid;
pub extern const CSSMOID_X509V1SubjectName: SecAsn1Oid;
pub extern const CSSMOID_X509V1SubjectNameStd: SecAsn1Oid;
pub extern const CSSMOID_X509V1SubjectNameCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V1SubjectNameLDAP: SecAsn1Oid;
pub extern const CSSMOID_CSSMKeyStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V1SubjectPublicKeyCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V1SubjectPublicKeyAlgorithm: SecAsn1Oid;
pub extern const CSSMOID_X509V1SubjectPublicKeyAlgorithmParameters: SecAsn1Oid;
pub extern const CSSMOID_X509V1SubjectPublicKey: SecAsn1Oid;
pub extern const CSSMOID_X509V1CertificateIssuerUniqueId: SecAsn1Oid;
pub extern const CSSMOID_X509V1CertificateSubjectUniqueId: SecAsn1Oid;
pub extern const CSSMOID_X509V3CertificateExtensionsStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V3CertificateExtensionsCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V3CertificateNumberOfExtensions: SecAsn1Oid;
pub extern const CSSMOID_X509V3CertificateExtensionStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V3CertificateExtensionCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V3CertificateExtensionId: SecAsn1Oid;
pub extern const CSSMOID_X509V3CertificateExtensionCritical: SecAsn1Oid;
pub extern const CSSMOID_X509V3CertificateExtensionType: SecAsn1Oid;
pub extern const CSSMOID_X509V3CertificateExtensionValue: SecAsn1Oid;
pub extern const CSSMOID_X509V1SignatureStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V1SignatureCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V1SignatureAlgorithm: SecAsn1Oid;
pub extern const CSSMOID_X509V1SignatureAlgorithmTBS: SecAsn1Oid;
pub extern const CSSMOID_X509V1SignatureAlgorithmParameters: SecAsn1Oid;
pub extern const CSSMOID_X509V1Signature: SecAsn1Oid;
pub extern const CSSMOID_SubjectSignatureBitmap: SecAsn1Oid;
pub extern const CSSMOID_SubjectPicture: SecAsn1Oid;
pub extern const CSSMOID_SubjectEmailAddress: SecAsn1Oid;
pub extern const CSSMOID_UseExemptions: SecAsn1Oid;
pub extern const CSSMOID_SubjectDirectoryAttributes: SecAsn1Oid;
pub extern const CSSMOID_SubjectKeyIdentifier: SecAsn1Oid;
pub extern const CSSMOID_KeyUsage: SecAsn1Oid;
pub extern const CSSMOID_PrivateKeyUsagePeriod: SecAsn1Oid;
pub extern const CSSMOID_SubjectAltName: SecAsn1Oid;
pub extern const CSSMOID_IssuerAltName: SecAsn1Oid;
pub extern const CSSMOID_BasicConstraints: SecAsn1Oid;
pub extern const CSSMOID_CrlNumber: SecAsn1Oid;
pub extern const CSSMOID_CrlReason: SecAsn1Oid;
pub extern const CSSMOID_HoldInstructionCode: SecAsn1Oid;
pub extern const CSSMOID_InvalidityDate: SecAsn1Oid;
pub extern const CSSMOID_DeltaCrlIndicator: SecAsn1Oid;
pub extern const CSSMOID_IssuingDistributionPoint: SecAsn1Oid;
pub extern const CSSMOID_IssuingDistributionPoints: SecAsn1Oid;
pub extern const CSSMOID_CertIssuer: SecAsn1Oid;
pub extern const CSSMOID_NameConstraints: SecAsn1Oid;
pub extern const CSSMOID_CrlDistributionPoints: SecAsn1Oid;
pub extern const CSSMOID_CertificatePolicies: SecAsn1Oid;
pub extern const CSSMOID_PolicyMappings: SecAsn1Oid;
pub extern const CSSMOID_PolicyConstraints: SecAsn1Oid;
pub extern const CSSMOID_AuthorityKeyIdentifier: SecAsn1Oid;
pub extern const CSSMOID_ExtendedKeyUsage: SecAsn1Oid;
pub extern const CSSMOID_InhibitAnyPolicy: SecAsn1Oid;
pub extern const CSSMOID_AuthorityInfoAccess: SecAsn1Oid;
pub extern const CSSMOID_BiometricInfo: SecAsn1Oid;
pub extern const CSSMOID_QC_Statements: SecAsn1Oid;
pub extern const CSSMOID_SubjectInfoAccess: SecAsn1Oid;
pub extern const CSSMOID_ExtendedKeyUsageAny: SecAsn1Oid;
pub extern const CSSMOID_ServerAuth: SecAsn1Oid;
pub extern const CSSMOID_ClientAuth: SecAsn1Oid;
pub extern const CSSMOID_ExtendedUseCodeSigning: SecAsn1Oid;
pub extern const CSSMOID_EmailProtection: SecAsn1Oid;
pub extern const CSSMOID_TimeStamping: SecAsn1Oid;
pub extern const CSSMOID_OCSPSigning: SecAsn1Oid;
pub extern const CSSMOID_KERBv5_PKINIT_KP_CLIENT_AUTH: SecAsn1Oid;
pub extern const CSSMOID_KERBv5_PKINIT_KP_KDC: SecAsn1Oid;
pub extern const CSSMOID_EKU_IPSec: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_EXTENSION: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_IDENTITY: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_EMAIL_SIGN: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_EMAIL_ENCRYPT: SecAsn1Oid;
pub extern const CSSMOID_APPLE_CERT_POLICY: SecAsn1Oid;
pub extern const CSSMOID_DOTMAC_CERT_POLICY: SecAsn1Oid;
pub extern const CSSMOID_ADC_CERT_POLICY: SecAsn1Oid;
pub extern const CSSMOID_MACAPPSTORE_CERT_POLICY: SecAsn1Oid;
pub extern const CSSMOID_MACAPPSTORE_RECEIPT_CERT_POLICY: SecAsn1Oid;
pub extern const CSSMOID_APPLEID_CERT_POLICY: SecAsn1Oid;
pub extern const CSSMOID_APPLEID_SHARING_CERT_POLICY: SecAsn1Oid;
pub extern const CSSMOID_MOBILE_STORE_SIGNING_POLICY: SecAsn1Oid;
pub extern const CSSMOID_TEST_MOBILE_STORE_SIGNING_POLICY: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EKU_CODE_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EKU_CODE_SIGNING_DEV: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EKU_RESOURCE_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EKU_ICHAT_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EKU_ICHAT_ENCRYPTION: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EKU_SYSTEM_IDENTITY: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EKU_PASSBOOK_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EKU_PROFILE_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EKU_QA_PROFILE_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_CODE_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_APPLE_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_ADC_DEV_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_ADC_APPLE_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_PASSBOOK_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_MACAPPSTORE_RECEIPT: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_INTERMEDIATE_MARKER: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_WWDR_INTERMEDIATE: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_ITMS_INTERMEDIATE: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_AAI_INTERMEDIATE: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_APPLEID_INTERMEDIATE: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_APPLEID_SHARING: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_SYSINT2_INTERMEDIATE: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_DEVELOPER_AUTHENTICATION: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_SERVER_AUTHENTICATION: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_ESCROW_SERVICE: SecAsn1Oid;
pub extern const CSSMOID_APPLE_EXTENSION_PROVISIONING_PROFILE_SIGNING: SecAsn1Oid;
pub extern const CSSMOID_NetscapeCertType: SecAsn1Oid;
pub extern const CSSMOID_NetscapeCertSequence: SecAsn1Oid;
pub extern const CSSMOID_NetscapeSGC: SecAsn1Oid;
pub extern const CSSMOID_MicrosoftSGC: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLSignedCrlStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLSignedCrlCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLTbsCertListStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLTbsCertListCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLVersion: SecAsn1Oid;
pub extern const CSSMOID_X509V1CRLIssuerStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V1CRLIssuerNameCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V1CRLIssuerNameLDAP: SecAsn1Oid;
pub extern const CSSMOID_X509V1CRLThisUpdate: SecAsn1Oid;
pub extern const CSSMOID_X509V1CRLNextUpdate: SecAsn1Oid;
pub extern const CSSMOID_X509V1CRLRevokedCertificatesStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V1CRLRevokedCertificatesCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V1CRLNumberOfRevokedCertEntries: SecAsn1Oid;
pub extern const CSSMOID_X509V1CRLRevokedEntryStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V1CRLRevokedEntryCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V1CRLRevokedEntrySerialNumber: SecAsn1Oid;
pub extern const CSSMOID_X509V1CRLRevokedEntryRevocationDate: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLRevokedEntryAllExtensionsStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLRevokedEntryAllExtensionsCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLRevokedEntryNumberOfExtensions: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLRevokedEntrySingleExtensionStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLRevokedEntrySingleExtensionCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLRevokedEntryExtensionId: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLRevokedEntryExtensionCritical: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLRevokedEntryExtensionType: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLRevokedEntryExtensionValue: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLAllExtensionsStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLAllExtensionsCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLNumberOfExtensions: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLSingleExtensionStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLSingleExtensionCStruct: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLExtensionId: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLExtensionCritical: SecAsn1Oid;
pub extern const CSSMOID_X509V2CRLExtensionType: SecAsn1Oid;
pub extern const CSSMOID_PKIX_OCSP: SecAsn1Oid;
pub extern const CSSMOID_PKIX_OCSP_BASIC: SecAsn1Oid;
pub extern const CSSMOID_PKIX_OCSP_NONCE: SecAsn1Oid;
pub extern const CSSMOID_PKIX_OCSP_CRL: SecAsn1Oid;
pub extern const CSSMOID_PKIX_OCSP_RESPONSE: SecAsn1Oid;
pub extern const CSSMOID_PKIX_OCSP_NOCHECK: SecAsn1Oid;
pub extern const CSSMOID_PKIX_OCSP_ARCHIVE_CUTOFF: SecAsn1Oid;
pub extern const CSSMOID_PKIX_OCSP_SERVICE_LOCATOR: SecAsn1Oid;
pub const SecKeychainPromptSelector = uint16;
pub const kSecKeychainPromptRequirePassphase: c_int = 1;
pub const kSecKeychainPromptUnsigned: c_int = 16;
pub const kSecKeychainPromptUnsignedAct: c_int = 32;
pub const kSecKeychainPromptInvalid: c_int = 64;
pub const kSecKeychainPromptInvalidAct: c_int = 128;
const enum_unnamed_1139 = c_uint;
pub extern fn SecACLGetTypeID() CFTypeID;
pub extern fn SecACLCreateFromSimpleContents(access: SecAccessRef, applicationList: CFArrayRef, description: CFStringRef, promptSelector: [*c]const CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR, newAcl: [*c]SecACLRef) OSStatus;
pub extern fn SecACLCreateWithSimpleContents(access: SecAccessRef, applicationList: CFArrayRef, description: CFStringRef, promptSelector: SecKeychainPromptSelector, newAcl: [*c]SecACLRef) OSStatus;
pub extern fn SecACLRemove(aclRef: SecACLRef) OSStatus;
pub extern fn SecACLCopySimpleContents(acl: SecACLRef, applicationList: [*c]CFArrayRef, description: [*c]CFStringRef, promptSelector: [*c]CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR) OSStatus;
pub extern fn SecACLCopyContents(acl: SecACLRef, applicationList: [*c]CFArrayRef, description: [*c]CFStringRef, promptSelector: [*c]SecKeychainPromptSelector) OSStatus;
pub extern fn SecACLSetSimpleContents(acl: SecACLRef, applicationList: CFArrayRef, description: CFStringRef, promptSelector: [*c]const CSSM_ACL_KEYCHAIN_PROMPT_SELECTOR) OSStatus;
pub extern fn SecACLSetContents(acl: SecACLRef, applicationList: CFArrayRef, description: CFStringRef, promptSelector: SecKeychainPromptSelector) OSStatus;
pub extern fn SecACLGetAuthorizations(acl: SecACLRef, tags: [*c]CSSM_ACL_AUTHORIZATION_TAG, tagCount: [*c]uint32) OSStatus;
pub extern fn SecACLCopyAuthorizations(acl: SecACLRef) CFArrayRef;
pub extern fn SecACLSetAuthorizations(acl: SecACLRef, tags: [*c]CSSM_ACL_AUTHORIZATION_TAG, tagCount: uint32) OSStatus;
pub extern fn SecACLUpdateAuthorizations(acl: SecACLRef, authorizations: CFArrayRef) OSStatus;
pub extern const kSecOIDADC_CERT_POLICY: CFStringRef;
pub extern const kSecOIDAPPLE_CERT_POLICY: CFStringRef;
pub extern const kSecOIDAPPLE_EKU_CODE_SIGNING: CFStringRef;
pub extern const kSecOIDAPPLE_EKU_CODE_SIGNING_DEV: CFStringRef;
pub extern const kSecOIDAPPLE_EKU_ICHAT_ENCRYPTION: CFStringRef;
pub extern const kSecOIDAPPLE_EKU_ICHAT_SIGNING: CFStringRef;
pub extern const kSecOIDAPPLE_EKU_RESOURCE_SIGNING: CFStringRef;
pub extern const kSecOIDAPPLE_EKU_SYSTEM_IDENTITY: CFStringRef;
pub extern const kSecOIDAPPLE_EXTENSION: CFStringRef;
pub extern const kSecOIDAPPLE_EXTENSION_ADC_APPLE_SIGNING: CFStringRef;
pub extern const kSecOIDAPPLE_EXTENSION_ADC_DEV_SIGNING: CFStringRef;
pub extern const kSecOIDAPPLE_EXTENSION_APPLE_SIGNING: CFStringRef;
pub extern const kSecOIDAPPLE_EXTENSION_CODE_SIGNING: CFStringRef;
pub extern const kSecOIDAPPLE_EXTENSION_INTERMEDIATE_MARKER: CFStringRef;
pub extern const kSecOIDAPPLE_EXTENSION_WWDR_INTERMEDIATE: CFStringRef;
pub extern const kSecOIDAPPLE_EXTENSION_ITMS_INTERMEDIATE: CFStringRef;
pub extern const kSecOIDAPPLE_EXTENSION_AAI_INTERMEDIATE: CFStringRef;
pub extern const kSecOIDAPPLE_EXTENSION_APPLEID_INTERMEDIATE: CFStringRef;
pub extern const kSecOIDAuthorityInfoAccess: CFStringRef;
pub extern const kSecOIDAuthorityKeyIdentifier: CFStringRef;
pub extern const kSecOIDBasicConstraints: CFStringRef;
pub extern const kSecOIDBiometricInfo: CFStringRef;
pub extern const kSecOIDCSSMKeyStruct: CFStringRef;
pub extern const kSecOIDCertIssuer: CFStringRef;
pub extern const kSecOIDCertificatePolicies: CFStringRef;
pub extern const kSecOIDClientAuth: CFStringRef;
pub extern const kSecOIDCollectiveStateProvinceName: CFStringRef;
pub extern const kSecOIDCollectiveStreetAddress: CFStringRef;
pub extern const kSecOIDCommonName: CFStringRef;
pub extern const kSecOIDCountryName: CFStringRef;
pub extern const kSecOIDCrlDistributionPoints: CFStringRef;
pub extern const kSecOIDCrlNumber: CFStringRef;
pub extern const kSecOIDCrlReason: CFStringRef;
pub extern const kSecOIDDOTMAC_CERT_EMAIL_ENCRYPT: CFStringRef;
pub extern const kSecOIDDOTMAC_CERT_EMAIL_SIGN: CFStringRef;
pub extern const kSecOIDDOTMAC_CERT_EXTENSION: CFStringRef;
pub extern const kSecOIDDOTMAC_CERT_IDENTITY: CFStringRef;
pub extern const kSecOIDDOTMAC_CERT_POLICY: CFStringRef;
pub extern const kSecOIDDeltaCrlIndicator: CFStringRef;
pub extern const kSecOIDDescription: CFStringRef;
pub extern const kSecOIDEKU_IPSec: CFStringRef;
pub extern const kSecOIDEmailAddress: CFStringRef;
pub extern const kSecOIDEmailProtection: CFStringRef;
pub extern const kSecOIDExtendedKeyUsage: CFStringRef;
pub extern const kSecOIDExtendedKeyUsageAny: CFStringRef;
pub extern const kSecOIDExtendedUseCodeSigning: CFStringRef;
pub extern const kSecOIDGivenName: CFStringRef;
pub extern const kSecOIDHoldInstructionCode: CFStringRef;
pub extern const kSecOIDInvalidityDate: CFStringRef;
pub extern const kSecOIDIssuerAltName: CFStringRef;
pub extern const kSecOIDIssuingDistributionPoint: CFStringRef;
pub extern const kSecOIDIssuingDistributionPoints: CFStringRef;
pub extern const kSecOIDKERBv5_PKINIT_KP_CLIENT_AUTH: CFStringRef;
pub extern const kSecOIDKERBv5_PKINIT_KP_KDC: CFStringRef;
pub extern const kSecOIDKeyUsage: CFStringRef;
pub extern const kSecOIDLocalityName: CFStringRef;
pub extern const kSecOIDMS_NTPrincipalName: CFStringRef;
pub extern const kSecOIDMicrosoftSGC: CFStringRef;
pub extern const kSecOIDNameConstraints: CFStringRef;
pub extern const kSecOIDNetscapeCertSequence: CFStringRef;
pub extern const kSecOIDNetscapeCertType: CFStringRef;
pub extern const kSecOIDNetscapeSGC: CFStringRef;
pub extern const kSecOIDOCSPSigning: CFStringRef;
pub extern const kSecOIDOrganizationName: CFStringRef;
pub extern const kSecOIDOrganizationalUnitName: CFStringRef;
pub extern const kSecOIDPolicyConstraints: CFStringRef;
pub extern const kSecOIDPolicyMappings: CFStringRef;
pub extern const kSecOIDPrivateKeyUsagePeriod: CFStringRef;
pub extern const kSecOIDQC_Statements: CFStringRef;
pub extern const kSecOIDSerialNumber: CFStringRef;
pub extern const kSecOIDServerAuth: CFStringRef;
pub extern const kSecOIDStateProvinceName: CFStringRef;
pub extern const kSecOIDStreetAddress: CFStringRef;
pub extern const kSecOIDSubjectAltName: CFStringRef;
pub extern const kSecOIDSubjectDirectoryAttributes: CFStringRef;
pub extern const kSecOIDSubjectEmailAddress: CFStringRef;
pub extern const kSecOIDSubjectInfoAccess: CFStringRef;
pub extern const kSecOIDSubjectKeyIdentifier: CFStringRef;
pub extern const kSecOIDSubjectPicture: CFStringRef;
pub extern const kSecOIDSubjectSignatureBitmap: CFStringRef;
pub extern const kSecOIDSurname: CFStringRef;
pub extern const kSecOIDTimeStamping: CFStringRef;
pub extern const kSecOIDTitle: CFStringRef;
pub extern const kSecOIDUseExemptions: CFStringRef;
pub extern const kSecOIDX509V1CertificateIssuerUniqueId: CFStringRef;
pub extern const kSecOIDX509V1CertificateSubjectUniqueId: CFStringRef;
pub extern const kSecOIDX509V1IssuerName: CFStringRef;
pub extern const kSecOIDX509V1IssuerNameCStruct: CFStringRef;
pub extern const kSecOIDX509V1IssuerNameLDAP: CFStringRef;
pub extern const kSecOIDX509V1IssuerNameStd: CFStringRef;
pub extern const kSecOIDX509V1SerialNumber: CFStringRef;
pub extern const kSecOIDX509V1Signature: CFStringRef;
pub extern const kSecOIDX509V1SignatureAlgorithm: CFStringRef;
pub extern const kSecOIDX509V1SignatureAlgorithmParameters: CFStringRef;
pub extern const kSecOIDX509V1SignatureAlgorithmTBS: CFStringRef;
pub extern const kSecOIDX509V1SignatureCStruct: CFStringRef;
pub extern const kSecOIDX509V1SignatureStruct: CFStringRef;
pub extern const kSecOIDX509V1SubjectName: CFStringRef;
pub extern const kSecOIDX509V1SubjectNameCStruct: CFStringRef;
pub extern const kSecOIDX509V1SubjectNameLDAP: CFStringRef;
pub extern const kSecOIDX509V1SubjectNameStd: CFStringRef;
pub extern const kSecOIDX509V1SubjectPublicKey: CFStringRef;
pub extern const kSecOIDX509V1SubjectPublicKeyAlgorithm: CFStringRef;
pub extern const kSecOIDX509V1SubjectPublicKeyAlgorithmParameters: CFStringRef;
pub extern const kSecOIDX509V1SubjectPublicKeyCStruct: CFStringRef;
pub extern const kSecOIDX509V1ValidityNotAfter: CFStringRef;
pub extern const kSecOIDX509V1ValidityNotBefore: CFStringRef;
pub extern const kSecOIDX509V1Version: CFStringRef;
pub extern const kSecOIDX509V3Certificate: CFStringRef;
pub extern const kSecOIDX509V3CertificateCStruct: CFStringRef;
pub extern const kSecOIDX509V3CertificateExtensionCStruct: CFStringRef;
pub extern const kSecOIDX509V3CertificateExtensionCritical: CFStringRef;
pub extern const kSecOIDX509V3CertificateExtensionId: CFStringRef;
pub extern const kSecOIDX509V3CertificateExtensionStruct: CFStringRef;
pub extern const kSecOIDX509V3CertificateExtensionType: CFStringRef;
pub extern const kSecOIDX509V3CertificateExtensionValue: CFStringRef;
pub extern const kSecOIDX509V3CertificateExtensionsCStruct: CFStringRef;
pub extern const kSecOIDX509V3CertificateExtensionsStruct: CFStringRef;
pub extern const kSecOIDX509V3CertificateNumberOfExtensions: CFStringRef;
pub extern const kSecOIDX509V3SignedCertificate: CFStringRef;
pub extern const kSecOIDX509V3SignedCertificateCStruct: CFStringRef;
pub extern const kSecOIDSRVName: CFStringRef;
pub const struct_OpaqueSecIdentitySearchRef = opaque {};
pub const SecIdentitySearchRef = ?*struct_OpaqueSecIdentitySearchRef;
pub extern fn SecIdentitySearchGetTypeID() CFTypeID;
pub extern fn SecIdentitySearchCreate(keychainOrArray: CFTypeRef, keyUsage: CSSM_KEYUSE, searchRef: [*c]SecIdentitySearchRef) OSStatus;
pub extern fn SecIdentitySearchCopyNext(searchRef: SecIdentitySearchRef, identity: [*c]SecIdentityRef) OSStatus;
pub const SecItemClass = FourCharCode;
pub const kSecInternetPasswordItemClass: c_int = 1768842612;
pub const kSecGenericPasswordItemClass: c_int = 1734700656;
pub const kSecAppleSharePasswordItemClass: c_int = 1634953328;
pub const kSecCertificateItemClass: c_uint = 2147487744;
pub const kSecPublicKeyItemClass: c_int = 15;
pub const kSecPrivateKeyItemClass: c_int = 16;
pub const kSecSymmetricKeyItemClass: c_int = 17;
const enum_unnamed_1140 = c_uint;
pub const SecItemAttr = FourCharCode;
pub const kSecCreationDateItemAttr: c_int = 1667522932;
pub const kSecModDateItemAttr: c_int = 1835295092;
pub const kSecDescriptionItemAttr: c_int = 1684370275;
pub const kSecCommentItemAttr: c_int = 1768123764;
pub const kSecCreatorItemAttr: c_int = 1668445298;
pub const kSecTypeItemAttr: c_int = 1954115685;
pub const kSecScriptCodeItemAttr: c_int = 1935897200;
pub const kSecLabelItemAttr: c_int = 1818321516;
pub const kSecInvisibleItemAttr: c_int = 1768846953;
pub const kSecNegativeItemAttr: c_int = 1852139361;
pub const kSecCustomIconItemAttr: c_int = 1668641641;
pub const kSecAccountItemAttr: c_int = 1633903476;
pub const kSecServiceItemAttr: c_int = 1937138533;
pub const kSecGenericItemAttr: c_int = 1734700641;
pub const kSecSecurityDomainItemAttr: c_int = 1935961454;
pub const kSecServerItemAttr: c_int = 1936881266;
pub const kSecAuthenticationTypeItemAttr: c_int = 1635023216;
pub const kSecPortItemAttr: c_int = 1886351988;
pub const kSecPathItemAttr: c_int = 1885434984;
pub const kSecVolumeItemAttr: c_int = 1986817381;
pub const kSecAddressItemAttr: c_int = 1633969266;
pub const kSecSignatureItemAttr: c_int = 1936943463;
pub const kSecProtocolItemAttr: c_int = 1886675820;
pub const kSecCertificateType: c_int = 1668577648;
pub const kSecCertificateEncoding: c_int = 1667591779;
pub const kSecCrlType: c_int = 1668445296;
pub const kSecCrlEncoding: c_int = 1668443747;
pub const kSecAlias: c_int = 1634494835;
const enum_unnamed_1141 = c_uint;
pub const SecAFPServerSignature = [16]UInt8;
pub const SecPublicKeyHash = [20]UInt8;
pub extern fn SecKeychainItemGetTypeID() CFTypeID;
pub extern fn SecKeychainItemModifyAttributesAndData(itemRef: SecKeychainItemRef, attrList: [*c]const SecKeychainAttributeList, length: UInt32, data: ?*const anyopaque) OSStatus;
pub extern fn SecKeychainItemCreateFromContent(itemClass: SecItemClass, attrList: [*c]SecKeychainAttributeList, length: UInt32, data: ?*const anyopaque, keychainRef: SecKeychainRef, initialAccess: SecAccessRef, itemRef: [*c]SecKeychainItemRef) OSStatus;
pub extern fn SecKeychainItemModifyContent(itemRef: SecKeychainItemRef, attrList: [*c]const SecKeychainAttributeList, length: UInt32, data: ?*const anyopaque) OSStatus;
pub extern fn SecKeychainItemCopyContent(itemRef: SecKeychainItemRef, itemClass: [*c]SecItemClass, attrList: [*c]SecKeychainAttributeList, length: [*c]UInt32, outData: [*c]?*anyopaque) OSStatus;
pub extern fn SecKeychainItemFreeContent(attrList: [*c]SecKeychainAttributeList, data: ?*anyopaque) OSStatus;
pub extern fn SecKeychainItemCopyAttributesAndData(itemRef: SecKeychainItemRef, info: [*c]SecKeychainAttributeInfo, itemClass: [*c]SecItemClass, attrList: [*c][*c]SecKeychainAttributeList, length: [*c]UInt32, outData: [*c]?*anyopaque) OSStatus;
pub extern fn SecKeychainItemFreeAttributesAndData(attrList: [*c]SecKeychainAttributeList, data: ?*anyopaque) OSStatus;
pub extern fn SecKeychainItemDelete(itemRef: SecKeychainItemRef) OSStatus;
pub extern fn SecKeychainItemCopyKeychain(itemRef: SecKeychainItemRef, keychainRef: [*c]SecKeychainRef) OSStatus;
pub extern fn SecKeychainItemCreateCopy(itemRef: SecKeychainItemRef, destKeychainRef: SecKeychainRef, initialAccess: SecAccessRef, itemCopy: [*c]SecKeychainItemRef) OSStatus;
pub extern fn SecKeychainItemCreatePersistentReference(itemRef: SecKeychainItemRef, persistentItemRef: [*c]CFDataRef) OSStatus;
pub extern fn SecKeychainItemCopyFromPersistentReference(persistentItemRef: CFDataRef, itemRef: [*c]SecKeychainItemRef) OSStatus;
pub extern fn SecKeychainItemGetDLDBHandle(keyItemRef: SecKeychainItemRef, dldbHandle: [*c]CSSM_DL_DB_HANDLE) OSStatus;
pub extern fn SecKeychainItemGetUniqueRecordID(itemRef: SecKeychainItemRef, uniqueRecordID: [*c][*c]const CSSM_DB_UNIQUE_RECORD) OSStatus;
pub extern fn SecKeychainItemCopyAccess(itemRef: SecKeychainItemRef, access: [*c]SecAccessRef) OSStatus;
pub extern fn SecKeychainItemSetAccess(itemRef: SecKeychainItemRef, access: SecAccessRef) OSStatus;
pub extern fn SecKeychainSearchGetTypeID() CFTypeID;
pub extern fn SecKeychainSearchCreateFromAttributes(keychainOrArray: CFTypeRef, itemClass: SecItemClass, attrList: [*c]const SecKeychainAttributeList, searchRef: [*c]SecKeychainSearchRef) OSStatus;
pub extern fn SecKeychainSearchCopyNext(searchRef: SecKeychainSearchRef, itemRef: [*c]SecKeychainItemRef) OSStatus;
pub const struct_OpaquePolicySearchRef = opaque {};
pub const SecPolicySearchRef = ?*struct_OpaquePolicySearchRef;
pub extern fn SecPolicySearchGetTypeID() CFTypeID;
pub extern fn SecPolicySearchCreate(certType: CSSM_CERT_TYPE, policyOID: [*c]const SecAsn1Oid, value: [*c]const SecAsn1Item, searchRef: [*c]SecPolicySearchRef) OSStatus;
pub extern fn SecPolicySearchCopyNext(searchRef: SecPolicySearchRef, policyRef: [*c]SecPolicyRef) OSStatus;
pub extern fn SecTrustedApplicationGetTypeID() CFTypeID;
pub extern fn SecTrustedApplicationCreateFromPath(path: [*c]const u8, app: [*c]SecTrustedApplicationRef) OSStatus;
pub extern fn SecTrustedApplicationCopyData(appRef: SecTrustedApplicationRef, data: [*c]CFDataRef) OSStatus;
pub extern fn SecTrustedApplicationSetData(appRef: SecTrustedApplicationRef, data: CFDataRef) OSStatus;
pub const SecTrustSettingsKeyUsage = u32;
pub const kSecTrustSettingsKeyUseSignature: c_int = 1;
pub const kSecTrustSettingsKeyUseEnDecryptData: c_int = 2;
pub const kSecTrustSettingsKeyUseEnDecryptKey: c_int = 4;
pub const kSecTrustSettingsKeyUseSignCert: c_int = 8;
pub const kSecTrustSettingsKeyUseSignRevocation: c_int = 16;
pub const kSecTrustSettingsKeyUseKeyExchange: c_int = 32;
pub const kSecTrustSettingsKeyUseAny: c_uint = 4294967295;
const enum_unnamed_1142 = c_uint;
pub const SecTrustSettingsResult = u32;
pub const kSecTrustSettingsResultInvalid: c_int = 0;
pub const kSecTrustSettingsResultTrustRoot: c_int = 1;
pub const kSecTrustSettingsResultTrustAsRoot: c_int = 2;
pub const kSecTrustSettingsResultDeny: c_int = 3;
pub const kSecTrustSettingsResultUnspecified: c_int = 4;
const enum_unnamed_1143 = c_uint;
pub const SecTrustSettingsDomain = u32;
pub const kSecTrustSettingsDomainUser: c_int = 0;
pub const kSecTrustSettingsDomainAdmin: c_int = 1;
pub const kSecTrustSettingsDomainSystem: c_int = 2;
const enum_unnamed_1144 = c_uint;
pub extern fn SecTrustSettingsCopyTrustSettings(certRef: SecCertificateRef, domain: SecTrustSettingsDomain, trustSettings: [*c]CFArrayRef) OSStatus;
pub extern fn SecTrustSettingsSetTrustSettings(certRef: SecCertificateRef, domain: SecTrustSettingsDomain, trustSettingsDictOrArray: CFTypeRef) OSStatus;
pub extern fn SecTrustSettingsRemoveTrustSettings(certRef: SecCertificateRef, domain: SecTrustSettingsDomain) OSStatus;
pub extern fn SecTrustSettingsCopyCertificates(domain: SecTrustSettingsDomain, certArray: [*c]CFArrayRef) OSStatus;
pub extern fn SecTrustSettingsCopyModificationDate(certRef: SecCertificateRef, domain: SecTrustSettingsDomain, modificationDate: [*c]CFDateRef) OSStatus;
pub extern fn SecTrustSettingsCreateExternalRepresentation(domain: SecTrustSettingsDomain, trustSettings: [*c]CFDataRef) OSStatus;
pub extern fn SecTrustSettingsImportExternalRepresentation(domain: SecTrustSettingsDomain, trustSettings: CFDataRef) OSStatus;
pub const errSecCSUnimplemented: c_int = -67072;
pub const errSecCSInvalidObjectRef: c_int = -67071;
pub const errSecCSInvalidFlags: c_int = -67070;
pub const errSecCSObjectRequired: c_int = -67069;
pub const errSecCSStaticCodeNotFound: c_int = -67068;
pub const errSecCSUnsupportedGuestAttributes: c_int = -67067;
pub const errSecCSInvalidAttributeValues: c_int = -67066;
pub const errSecCSNoSuchCode: c_int = -67065;
pub const errSecCSMultipleGuests: c_int = -67064;
pub const errSecCSGuestInvalid: c_int = -67063;
pub const errSecCSUnsigned: c_int = -67062;
pub const errSecCSSignatureFailed: c_int = -67061;
pub const errSecCSSignatureNotVerifiable: c_int = -67060;
pub const errSecCSSignatureUnsupported: c_int = -67059;
pub const errSecCSBadDictionaryFormat: c_int = -67058;
pub const errSecCSResourcesNotSealed: c_int = -67057;
pub const errSecCSResourcesNotFound: c_int = -67056;
pub const errSecCSResourcesInvalid: c_int = -67055;
pub const errSecCSBadResource: c_int = -67054;
pub const errSecCSResourceRulesInvalid: c_int = -67053;
pub const errSecCSReqInvalid: c_int = -67052;
pub const errSecCSReqUnsupported: c_int = -67051;
pub const errSecCSReqFailed: c_int = -67050;
pub const errSecCSBadObjectFormat: c_int = -67049;
pub const errSecCSInternalError: c_int = -67048;
pub const errSecCSHostReject: c_int = -67047;
pub const errSecCSNotAHost: c_int = -67046;
pub const errSecCSSignatureInvalid: c_int = -67045;
pub const errSecCSHostProtocolRelativePath: c_int = -67044;
pub const errSecCSHostProtocolContradiction: c_int = -67043;
pub const errSecCSHostProtocolDedicationError: c_int = -67042;
pub const errSecCSHostProtocolNotProxy: c_int = -67041;
pub const errSecCSHostProtocolStateError: c_int = -67040;
pub const errSecCSHostProtocolUnrelated: c_int = -67039;
pub const errSecCSNotSupported: c_int = -67037;
pub const errSecCSCMSTooLarge: c_int = -67036;
pub const errSecCSHostProtocolInvalidHash: c_int = -67035;
pub const errSecCSStaticCodeChanged: c_int = -67034;
pub const errSecCSDBDenied: c_int = -67033;
pub const errSecCSDBAccess: c_int = -67032;
pub const errSecCSSigDBDenied: c_int = -67033;
pub const errSecCSSigDBAccess: c_int = -67032;
pub const errSecCSHostProtocolInvalidAttribute: c_int = -67031;
pub const errSecCSInfoPlistFailed: c_int = -67030;
pub const errSecCSNoMainExecutable: c_int = -67029;
pub const errSecCSBadBundleFormat: c_int = -67028;
pub const errSecCSNoMatches: c_int = -67027;
pub const errSecCSFileHardQuarantined: c_int = -67026;
pub const errSecCSOutdated: c_int = -67025;
pub const errSecCSDbCorrupt: c_int = -67024;
pub const errSecCSResourceDirectoryFailed: c_int = -67023;
pub const errSecCSUnsignedNestedCode: c_int = -67022;
pub const errSecCSBadNestedCode: c_int = -67021;
pub const errSecCSBadCallbackValue: c_int = -67020;
pub const errSecCSHelperFailed: c_int = -67019;
pub const errSecCSVetoed: c_int = -67018;
pub const errSecCSBadLVArch: c_int = -67017;
pub const errSecCSResourceNotSupported: c_int = -67016;
pub const errSecCSRegularFile: c_int = -67015;
pub const errSecCSUnsealedAppRoot: c_int = -67014;
pub const errSecCSWeakResourceRules: c_int = -67013;
pub const errSecCSDSStoreSymlink: c_int = -67012;
pub const errSecCSAmbiguousBundleFormat: c_int = -67011;
pub const errSecCSBadMainExecutable: c_int = -67010;
pub const errSecCSBadFrameworkVersion: c_int = -67009;
pub const errSecCSUnsealedFrameworkRoot: c_int = -67008;
pub const errSecCSWeakResourceEnvelope: c_int = -67007;
pub const errSecCSCancelled: c_int = -67006;
pub const errSecCSInvalidPlatform: c_int = -67005;
pub const errSecCSTooBig: c_int = -67004;
pub const errSecCSInvalidSymlink: c_int = -67003;
pub const errSecCSNotAppLike: c_int = -67002;
pub const errSecCSBadDiskImageFormat: c_int = -67001;
pub const errSecCSUnsupportedDigestAlgorithm: c_int = -67000;
pub const errSecCSInvalidAssociatedFileData: c_int = -66999;
pub const errSecCSInvalidTeamIdentifier: c_int = -66998;
pub const errSecCSBadTeamIdentifier: c_int = -66997;
pub const errSecCSSignatureUntrusted: c_int = -66996;
pub const errSecMultipleExecSegments: c_int = -66995;
pub const errSecCSInvalidEntitlements: c_int = -66994;
pub const errSecCSInvalidRuntimeVersion: c_int = -66993;
pub const errSecCSRevokedNotarization: c_int = -66992;
const enum_unnamed_1145 = c_int;
pub extern const kSecCFErrorArchitecture: CFStringRef;
pub extern const kSecCFErrorPattern: CFStringRef;
pub extern const kSecCFErrorResourceSeal: CFStringRef;
pub extern const kSecCFErrorResourceAdded: CFStringRef;
pub extern const kSecCFErrorResourceAltered: CFStringRef;
pub extern const kSecCFErrorResourceMissing: CFStringRef;
pub extern const kSecCFErrorResourceSideband: CFStringRef;
pub extern const kSecCFErrorInfoPlist: CFStringRef;
pub extern const kSecCFErrorGuestAttributes: CFStringRef;
pub extern const kSecCFErrorRequirementSyntax: CFStringRef;
pub extern const kSecCFErrorPath: CFStringRef;
pub const struct___SecCode = opaque {};
pub const SecCodeRef = ?*struct___SecCode;
pub const SecStaticCodeRef = ?*const struct___SecCode;
pub const struct___SecRequirement = opaque {};
pub const SecRequirementRef = ?*struct___SecRequirement;
pub const SecGuestRef = u_int32_t;
pub const kSecNoGuest: c_int = 0;
const enum_unnamed_1146 = c_uint;
pub const SecCSFlags = u32;
pub const kSecCSDefaultFlags: c_int = 0;
pub const kSecCSConsiderExpiration: c_uint = 2147483648;
pub const kSecCSEnforceRevocationChecks: c_int = 1073741824;
pub const kSecCSNoNetworkAccess: c_int = 536870912;
pub const kSecCSReportProgress: c_int = 268435456;
pub const kSecCSCheckTrustedAnchors: c_int = 134217728;
pub const kSecCSQuickCheck: c_int = 67108864;
pub const kSecCSApplyEmbeddedPolicy: c_int = 33554432;
const enum_unnamed_1147 = c_uint;
pub const SecCodeSignatureFlags = u32;
pub const kSecCodeSignatureHost: c_int = 1;
pub const kSecCodeSignatureAdhoc: c_int = 2;
pub const kSecCodeSignatureForceHard: c_int = 256;
pub const kSecCodeSignatureForceKill: c_int = 512;
pub const kSecCodeSignatureForceExpiration: c_int = 1024;
pub const kSecCodeSignatureRestrict: c_int = 2048;
pub const kSecCodeSignatureEnforcement: c_int = 4096;
pub const kSecCodeSignatureLibraryValidation: c_int = 8192;
pub const kSecCodeSignatureRuntime: c_int = 65536;
pub const kSecCodeSignatureLinkerSigned: c_int = 131072;
const enum_unnamed_1148 = c_uint;
pub const SecCodeStatus = u32;
pub const kSecCodeStatusValid: c_int = 1;
pub const kSecCodeStatusHard: c_int = 256;
pub const kSecCodeStatusKill: c_int = 512;
pub const kSecCodeStatusDebugged: c_int = 268435456;
pub const kSecCodeStatusPlatform: c_int = 67108864;
const enum_unnamed_1149 = c_uint;
pub const SecRequirementType = u32;
pub const kSecHostRequirementType: c_int = 1;
pub const kSecGuestRequirementType: c_int = 2;
pub const kSecDesignatedRequirementType: c_int = 3;
pub const kSecLibraryRequirementType: c_int = 4;
pub const kSecPluginRequirementType: c_int = 5;
pub const kSecInvalidRequirementType: c_int = 6;
pub const kSecRequirementTypeCount: c_int = 6;
const enum_unnamed_1150 = c_uint;
pub const SecCSDigestAlgorithm = u32;
pub const kSecCodeSignatureNoHash: c_int = 0;
pub const kSecCodeSignatureHashSHA1: c_int = 1;
pub const kSecCodeSignatureHashSHA256: c_int = 2;
pub const kSecCodeSignatureHashSHA256Truncated: c_int = 3;
pub const kSecCodeSignatureHashSHA384: c_int = 4;
pub const kSecCodeSignatureHashSHA512: c_int = 5;
const enum_unnamed_1151 = c_uint;
pub extern fn SecStaticCodeGetTypeID() CFTypeID;
pub extern fn SecStaticCodeCreateWithPath(path: CFURLRef, flags: SecCSFlags, staticCode: [*c]SecStaticCodeRef) OSStatus;
pub extern const kSecCodeAttributeArchitecture: CFStringRef;
pub extern const kSecCodeAttributeSubarchitecture: CFStringRef;
pub extern const kSecCodeAttributeUniversalFileOffset: CFStringRef;
pub extern const kSecCodeAttributeBundleVersion: CFStringRef;
pub extern fn SecStaticCodeCreateWithPathAndAttributes(path: CFURLRef, flags: SecCSFlags, attributes: CFDictionaryRef, staticCode: [*c]SecStaticCodeRef) OSStatus;
pub const kSecCSCheckAllArchitectures: c_int = 1;
pub const kSecCSDoNotValidateExecutable: c_int = 2;
pub const kSecCSDoNotValidateResources: c_int = 4;
pub const kSecCSBasicValidateOnly: c_int = 6;
pub const kSecCSCheckNestedCode: c_int = 8;
pub const kSecCSStrictValidate: c_int = 16;
pub const kSecCSFullReport: c_int = 32;
pub const kSecCSCheckGatekeeperArchitectures: c_int = 65;
pub const kSecCSRestrictSymlinks: c_int = 128;
pub const kSecCSRestrictToAppLike: c_int = 256;
pub const kSecCSRestrictSidebandData: c_int = 512;
pub const kSecCSUseSoftwareSigningCert: c_int = 1024;
pub const kSecCSValidatePEH: c_int = 2048;
pub const kSecCSSingleThreaded: c_int = 4096;
pub const kSecCSAllowNetworkAccess: c_int = 65536;
pub const kSecCSFastExecutableValidation: c_int = 131072;
const enum_unnamed_1152 = c_uint;
pub extern fn SecStaticCodeCheckValidity(staticCode: SecStaticCodeRef, flags: SecCSFlags, requirement: SecRequirementRef) OSStatus;
pub extern fn SecStaticCodeCheckValidityWithErrors(staticCode: SecStaticCodeRef, flags: SecCSFlags, requirement: SecRequirementRef, errors: [*c]CFErrorRef) OSStatus;
pub extern fn mlockall(c_int) c_int;
pub extern fn munlockall() c_int;
pub extern fn mlock(?*const anyopaque, usize) c_int;
pub extern fn mmap(?*anyopaque, usize, c_int, c_int, c_int, off_t) ?*anyopaque;
pub extern fn mprotect(?*anyopaque, usize, c_int) c_int;
pub extern fn msync(?*anyopaque, usize, c_int) c_int;
pub extern fn munlock(?*const anyopaque, usize) c_int;
pub extern fn munmap(?*anyopaque, usize) c_int;
pub extern fn shm_open([*c]const u8, c_int, ...) c_int;
pub extern fn shm_unlink([*c]const u8) c_int;
pub extern fn posix_madvise(?*anyopaque, usize, c_int) c_int;
pub extern fn madvise(?*anyopaque, usize, c_int) c_int;
pub extern fn mincore(?*const anyopaque, usize, [*c]u8) c_int;
pub extern fn minherit(?*anyopaque, usize, c_int) c_int;
pub const au_id_t = uid_t;
pub const au_asid_t = pid_t;
pub const au_event_t = u_int16_t;
pub const au_emod_t = u_int16_t;
pub const au_class_t = u_int32_t;
pub const au_asflgs_t = u_int64_t;
pub const au_ctlmode_t = u8;
pub const struct_au_tid = extern struct {
    port: dev_t,
    machine: u_int32_t,
};
pub const au_tid_t = struct_au_tid;
pub const struct_au_tid_addr = extern struct {
    at_port: dev_t,
    at_type: u_int32_t,
    at_addr: [4]u_int32_t,
};
pub const au_tid_addr_t = struct_au_tid_addr;
pub const struct_au_mask = extern struct {
    am_success: c_uint,
    am_failure: c_uint,
};
pub const au_mask_t = struct_au_mask;
pub const struct_auditinfo = extern struct {
    ai_auid: au_id_t,
    ai_mask: au_mask_t,
    ai_termid: au_tid_t,
    ai_asid: au_asid_t,
};
pub const auditinfo_t = struct_auditinfo;
pub const struct_auditinfo_addr = extern struct {
    ai_auid: au_id_t,
    ai_mask: au_mask_t,
    ai_termid: au_tid_addr_t,
    ai_asid: au_asid_t,
    ai_flags: au_asflgs_t,
};
pub const auditinfo_addr_t = struct_auditinfo_addr;
pub const struct_auditpinfo = extern struct {
    ap_pid: pid_t,
    ap_auid: au_id_t,
    ap_mask: au_mask_t,
    ap_termid: au_tid_t,
    ap_asid: au_asid_t,
};
pub const auditpinfo_t = struct_auditpinfo;
pub const struct_auditpinfo_addr = extern struct {
    ap_pid: pid_t,
    ap_auid: au_id_t,
    ap_mask: au_mask_t,
    ap_termid: au_tid_addr_t,
    ap_asid: au_asid_t,
    ap_flags: au_asflgs_t,
};
pub const auditpinfo_addr_t = struct_auditpinfo_addr;
pub const struct_au_session = extern struct {
    as_aia_p: [*c]auditinfo_addr_t,
    as_mask: au_mask_t,
};
pub const au_session_t = struct_au_session;
pub const struct_au_expire_after = extern struct {
    age: time_t,
    size: usize,
    op_type: u8,
};
pub const au_expire_after_t = struct_au_expire_after;
pub const struct_au_token = opaque {};
pub const token_t = struct_au_token;
pub const struct_au_qctrl = extern struct {
    aq_hiwater: c_int,
    aq_lowater: c_int,
    aq_bufsz: c_int,
    aq_delay: c_int,
    aq_minfree: c_int,
};
pub const au_qctrl_t = struct_au_qctrl;
pub const struct_audit_stat = extern struct {
    as_version: c_uint,
    as_numevent: c_uint,
    as_generated: c_int,
    as_nonattrib: c_int,
    as_kernel: c_int,
    as_audit: c_int,
    as_auditctl: c_int,
    as_enqueue: c_int,
    as_written: c_int,
    as_wblocked: c_int,
    as_rblocked: c_int,
    as_dropped: c_int,
    as_totalsize: c_int,
    as_memused: c_uint,
};
pub const au_stat_t = struct_audit_stat;
pub const struct_audit_fstat = extern struct {
    af_filesz: u_int64_t,
    af_currsz: u_int64_t,
};
pub const au_fstat_t = struct_audit_fstat;
pub const struct_au_evclass_map = extern struct {
    ec_number: au_event_t,
    ec_class: au_class_t,
};
pub const au_evclass_map_t = struct_au_evclass_map;
pub extern fn audit(?*const anyopaque, c_int) c_int;
pub extern fn auditon(c_int, ?*anyopaque, c_int) c_int;
pub extern fn auditctl([*c]const u8) c_int;
pub extern fn getauid([*c]au_id_t) c_int;
pub extern fn setauid([*c]const au_id_t) c_int;
pub extern fn getaudit_addr([*c]struct_auditinfo_addr, c_int) c_int;
pub extern fn setaudit_addr([*c]const struct_auditinfo_addr, c_int) c_int;
pub extern fn getaudit([*c]struct_auditinfo) c_int;
pub extern fn setaudit([*c]const struct_auditinfo) c_int;
pub extern fn audit_session_self() mach_port_name_t;
pub extern fn audit_session_join(port: mach_port_name_t) au_asid_t;
pub extern fn audit_session_port(asid: au_asid_t, portname: [*c]mach_port_name_t) c_int;
pub const struct__xpc_type_s = opaque {};
pub const xpc_type_t = ?*const struct__xpc_type_s;
pub const xpc_object_t = ?*anyopaque; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/xpc.h:101:16: warning: unsupported type: 'BlockPointer'
pub const xpc_handler_t = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/xpc.h:101:16
pub extern const _xpc_type_connection: struct__xpc_type_s;
pub const struct__xpc_connection_s = opaque {};
pub const xpc_connection_t = ?*struct__xpc_connection_s;
pub const xpc_connection_handler_t = ?*const fn (xpc_connection_t) callconv(.C) void;
pub extern const _xpc_type_endpoint: struct__xpc_type_s;
pub const struct__xpc_endpoint_s = opaque {};
pub const xpc_endpoint_t = ?*struct__xpc_endpoint_s;
pub extern const _xpc_type_null: struct__xpc_type_s;
pub extern const _xpc_type_bool: struct__xpc_type_s;
pub const struct__xpc_bool_s = opaque {};
pub extern const _xpc_bool_true: struct__xpc_bool_s;
pub extern const _xpc_bool_false: struct__xpc_bool_s;
pub extern const _xpc_type_int64: struct__xpc_type_s;
pub extern const _xpc_type_uint64: struct__xpc_type_s;
pub extern const _xpc_type_double: struct__xpc_type_s;
pub extern const _xpc_type_date: struct__xpc_type_s;
pub extern const _xpc_type_data: struct__xpc_type_s;
pub extern const _xpc_type_string: struct__xpc_type_s;
pub extern const _xpc_type_uuid: struct__xpc_type_s;
pub extern const _xpc_type_fd: struct__xpc_type_s;
pub extern const _xpc_type_shmem: struct__xpc_type_s;
pub extern const _xpc_type_array: struct__xpc_type_s;
pub extern const _xpc_type_dictionary: struct__xpc_type_s;
pub extern const _xpc_type_error: struct__xpc_type_s;
pub extern const _xpc_error_key_description: [*c]const u8;
pub extern const _xpc_event_key_name: [*c]const u8;
pub extern fn xpc_endpoint_create(connection: xpc_connection_t) xpc_endpoint_t;
pub extern fn xpc_debugger_api_misuse_info() [*c]const u8;
pub const struct__xpc_dictionary_s = opaque {};
pub extern const _xpc_error_connection_interrupted: struct__xpc_dictionary_s;
pub extern const _xpc_error_connection_invalid: struct__xpc_dictionary_s;
pub extern const _xpc_error_termination_imminent: struct__xpc_dictionary_s;
pub extern const _xpc_error_peer_code_signing_requirement: struct__xpc_dictionary_s;
pub const xpc_finalizer_t = ?*const fn (?*anyopaque) callconv(.C) void;
pub extern fn xpc_connection_create(name: [*c]const u8, targetq: dispatch_queue_t) xpc_connection_t;
pub extern fn xpc_connection_create_mach_service(name: [*c]const u8, targetq: dispatch_queue_t, flags: u64) xpc_connection_t;
pub extern fn xpc_connection_create_from_endpoint(endpoint: xpc_endpoint_t) xpc_connection_t;
pub extern fn xpc_connection_set_target_queue(connection: xpc_connection_t, targetq: dispatch_queue_t) void;
pub extern fn xpc_connection_set_event_handler(connection: xpc_connection_t, handler: xpc_handler_t) void;
pub extern fn xpc_connection_activate(connection: xpc_connection_t) void;
pub extern fn xpc_connection_suspend(connection: xpc_connection_t) void;
pub extern fn xpc_connection_resume(connection: xpc_connection_t) void;
pub extern fn xpc_connection_send_message(connection: xpc_connection_t, message: xpc_object_t) void;
pub extern fn xpc_connection_send_barrier(connection: xpc_connection_t, barrier: dispatch_block_t) void;
pub extern fn xpc_connection_send_message_with_reply(connection: xpc_connection_t, message: xpc_object_t, replyq: dispatch_queue_t, handler: xpc_handler_t) void;
pub extern fn xpc_connection_send_message_with_reply_sync(connection: xpc_connection_t, message: xpc_object_t) xpc_object_t;
pub extern fn xpc_connection_cancel(connection: xpc_connection_t) void;
pub extern fn xpc_connection_get_name(connection: xpc_connection_t) [*c]const u8;
pub extern fn xpc_connection_get_euid(connection: xpc_connection_t) uid_t;
pub extern fn xpc_connection_get_egid(connection: xpc_connection_t) gid_t;
pub extern fn xpc_connection_get_pid(connection: xpc_connection_t) pid_t;
pub extern fn xpc_connection_get_asid(connection: xpc_connection_t) au_asid_t;
pub extern fn xpc_connection_set_context(connection: xpc_connection_t, context: ?*anyopaque) void;
pub extern fn xpc_connection_get_context(connection: xpc_connection_t) ?*anyopaque;
pub extern fn xpc_connection_set_finalizer_f(connection: xpc_connection_t, finalizer: xpc_finalizer_t) void;
pub extern fn xpc_connection_set_peer_code_signing_requirement(connection: xpc_connection_t, requirement: [*c]const u8) c_int;
pub extern const XPC_ACTIVITY_INTERVAL: [*c]const u8;
pub extern const XPC_ACTIVITY_REPEATING: [*c]const u8;
pub extern const XPC_ACTIVITY_DELAY: [*c]const u8;
pub extern const XPC_ACTIVITY_GRACE_PERIOD: [*c]const u8;
pub extern const XPC_ACTIVITY_INTERVAL_1_MIN: i64;
pub extern const XPC_ACTIVITY_INTERVAL_5_MIN: i64;
pub extern const XPC_ACTIVITY_INTERVAL_15_MIN: i64;
pub extern const XPC_ACTIVITY_INTERVAL_30_MIN: i64;
pub extern const XPC_ACTIVITY_INTERVAL_1_HOUR: i64;
pub extern const XPC_ACTIVITY_INTERVAL_4_HOURS: i64;
pub extern const XPC_ACTIVITY_INTERVAL_8_HOURS: i64;
pub extern const XPC_ACTIVITY_INTERVAL_1_DAY: i64;
pub extern const XPC_ACTIVITY_INTERVAL_7_DAYS: i64;
pub extern const XPC_ACTIVITY_PRIORITY: [*c]const u8;
pub extern const XPC_ACTIVITY_PRIORITY_MAINTENANCE: [*c]const u8;
pub extern const XPC_ACTIVITY_PRIORITY_UTILITY: [*c]const u8;
pub extern const XPC_ACTIVITY_ALLOW_BATTERY: [*c]const u8;
pub extern const XPC_ACTIVITY_REQUIRE_SCREEN_SLEEP: [*c]const u8;
pub extern const XPC_ACTIVITY_PREVENT_DEVICE_SLEEP: [*c]const u8;
pub extern const XPC_ACTIVITY_REQUIRE_BATTERY_LEVEL: [*c]const u8;
pub extern const XPC_ACTIVITY_REQUIRE_HDD_SPINNING: [*c]const u8;
pub extern const _xpc_type_activity: struct__xpc_type_s;
pub const struct__xpc_activity_s = opaque {};
pub const xpc_activity_t = ?*struct__xpc_activity_s; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/activity.h:235:16: warning: unsupported type: 'BlockPointer'
pub const xpc_activity_handler_t = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/activity.h:235:16
pub extern const XPC_ACTIVITY_CHECK_IN: xpc_object_t;
pub extern fn xpc_activity_register(identifier: [*c]const u8, criteria: xpc_object_t, handler: xpc_activity_handler_t) void;
pub extern fn xpc_activity_copy_criteria(activity: xpc_activity_t) xpc_object_t;
pub extern fn xpc_activity_set_criteria(activity: xpc_activity_t, criteria: xpc_object_t) void;
pub const XPC_ACTIVITY_STATE_CHECK_IN: c_int = 0;
pub const XPC_ACTIVITY_STATE_WAIT: c_int = 1;
pub const XPC_ACTIVITY_STATE_RUN: c_int = 2;
pub const XPC_ACTIVITY_STATE_DEFER: c_int = 3;
pub const XPC_ACTIVITY_STATE_CONTINUE: c_int = 4;
pub const XPC_ACTIVITY_STATE_DONE: c_int = 5;
const enum_unnamed_1153 = c_uint;
pub const xpc_activity_state_t = c_long;
pub extern fn xpc_activity_get_state(activity: xpc_activity_t) xpc_activity_state_t;
pub extern fn xpc_activity_set_state(activity: xpc_activity_t, state: xpc_activity_state_t) bool;
pub extern fn xpc_activity_should_defer(activity: xpc_activity_t) bool;
pub extern fn xpc_activity_unregister(identifier: [*c]const u8) void;
pub const NDR_record_t = extern struct {
    mig_vers: u8,
    if_vers: u8,
    reserved1: u8,
    mig_encoding: u8,
    int_rep: u8,
    char_rep: u8,
    float_rep: u8,
    reserved2: u8,
};
pub extern var NDR_record: NDR_record_t;
pub const notify_port_t = mach_port_t;
pub const mach_port_deleted_notification_t = extern struct {
    not_header: mach_msg_header_t,
    NDR: NDR_record_t,
    not_port: mach_port_name_t,
    trailer: mach_msg_format_0_trailer_t,
};
pub const mach_send_possible_notification_t = extern struct {
    not_header: mach_msg_header_t,
    NDR: NDR_record_t,
    not_port: mach_port_name_t,
    trailer: mach_msg_format_0_trailer_t,
};
pub const mach_port_destroyed_notification_t = extern struct {
    not_header: mach_msg_header_t,
    not_body: mach_msg_body_t,
    not_port: mach_msg_port_descriptor_t,
    trailer: mach_msg_format_0_trailer_t,
};
pub const mach_no_senders_notification_t = extern struct {
    not_header: mach_msg_header_t,
    NDR: NDR_record_t,
    not_count: mach_msg_type_number_t,
    trailer: mach_msg_format_0_trailer_t,
};
pub const mach_send_once_notification_t = extern struct {
    not_header: mach_msg_header_t,
    trailer: mach_msg_format_0_trailer_t,
};
pub const mach_dead_name_notification_t = extern struct {
    not_header: mach_msg_header_t,
    NDR: NDR_record_t,
    not_port: mach_port_name_t,
    trailer: mach_msg_format_0_trailer_t,
};
pub const mig_stub_routine_t = ?*const fn ([*c]mach_msg_header_t, [*c]mach_msg_header_t) callconv(.C) void;
pub const mig_routine_t = mig_stub_routine_t;
pub const mig_server_routine_t = ?*const fn ([*c]mach_msg_header_t) callconv(.C) mig_routine_t;
pub const mig_impl_routine_t = ?*const fn () callconv(.C) kern_return_t;
pub const routine_arg_descriptor = mach_msg_type_descriptor_t;
pub const routine_arg_descriptor_t = ?*mach_msg_type_descriptor_t;
pub const mig_routine_arg_descriptor_t = ?*mach_msg_type_descriptor_t;
pub const struct_routine_descriptor = extern struct {
    impl_routine: mig_impl_routine_t,
    stub_routine: mig_stub_routine_t,
    argc: c_uint,
    descr_count: c_uint,
    arg_descr: routine_arg_descriptor_t,
    max_reply_msg: c_uint,
};
pub const routine_descriptor_t = [*c]struct_routine_descriptor;
pub const mig_routine_descriptor = struct_routine_descriptor;
pub const mig_routine_descriptor_t = [*c]mig_routine_descriptor;
pub const struct_mig_subsystem = extern struct {
    server: mig_server_routine_t,
    start: mach_msg_id_t,
    end: mach_msg_id_t,
    maxsize: mach_msg_size_t,
    reserved: vm_address_t,
    routine: [1]mig_routine_descriptor,
};
pub const mig_subsystem_t = [*c]struct_mig_subsystem;
pub const struct_mig_symtab = extern struct {
    ms_routine_name: [*c]u8,
    ms_routine_number: c_int,
    ms_routine: ?fn () callconv(.C) void,
};
pub const mig_symtab_t = struct_mig_symtab;
pub extern fn mig_get_reply_port() mach_port_t;
pub extern fn mig_dealloc_reply_port(reply_port: mach_port_t) void;
pub extern fn mig_put_reply_port(reply_port: mach_port_t) void;
pub extern fn mig_strncpy(dest: [*c]u8, src: [*c]const u8, len: c_int) c_int;
pub extern fn mig_strncpy_zerofill(dest: [*c]u8, src: [*c]const u8, len: c_int) c_int;
pub extern fn mig_allocate([*c]vm_address_t, vm_size_t) void;
pub extern fn mig_deallocate(vm_address_t, vm_size_t) void;
pub const mig_reply_error_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub fn __NDR_convert__mig_reply_error_t(arg_x: [*c]mig_reply_error_t) callconv(.C) void {
    var x = arg_x;
    _ = x;
}
pub extern fn clock_set_time(clock_ctrl: clock_ctrl_t, new_time: mach_timespec_t) kern_return_t;
pub extern fn clock_set_attributes(clock_ctrl: clock_ctrl_t, flavor: clock_flavor_t, clock_attr: clock_attr_t, clock_attrCnt: mach_msg_type_number_t) kern_return_t;
pub const __Request__clock_set_time_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    new_time: mach_timespec_t,
};
pub const __Request__clock_set_attributes_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: clock_flavor_t,
    clock_attrCnt: mach_msg_type_number_t,
    clock_attr: [1]c_int,
};
pub const union___RequestUnion__clock_priv_subsystem = extern union {
    Request_clock_set_time: __Request__clock_set_time_t,
    Request_clock_set_attributes: __Request__clock_set_attributes_t,
};
pub const __Reply__clock_set_time_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__clock_set_attributes_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const union___ReplyUnion__clock_priv_subsystem = extern union {
    Reply_clock_set_time: __Reply__clock_set_time_t,
    Reply_clock_set_attributes: __Reply__clock_set_attributes_t,
};
pub const struct_mach_vm_info_region = extern struct {
    vir_start: mach_vm_offset_t,
    vir_end: mach_vm_offset_t,
    vir_object: mach_vm_offset_t,
    vir_offset: memory_object_offset_t,
    vir_needs_copy: boolean_t,
    vir_protection: vm_prot_t,
    vir_max_protection: vm_prot_t,
    vir_inheritance: vm_inherit_t,
    vir_wired_count: natural_t,
    vir_user_wired_count: natural_t,
};
pub const mach_vm_info_region_t = struct_mach_vm_info_region;
pub const struct_vm_info_region_64 = extern struct {
    vir_start: natural_t,
    vir_end: natural_t,
    vir_object: natural_t,
    vir_offset: memory_object_offset_t,
    vir_needs_copy: boolean_t,
    vir_protection: vm_prot_t,
    vir_max_protection: vm_prot_t,
    vir_inheritance: vm_inherit_t,
    vir_wired_count: natural_t,
    vir_user_wired_count: natural_t,
};
pub const vm_info_region_64_t = struct_vm_info_region_64;
pub const struct_vm_info_region = extern struct {
    vir_start: natural_t,
    vir_end: natural_t,
    vir_object: natural_t,
    vir_offset: natural_t,
    vir_needs_copy: boolean_t,
    vir_protection: vm_prot_t,
    vir_max_protection: vm_prot_t,
    vir_inheritance: vm_inherit_t,
    vir_wired_count: natural_t,
    vir_user_wired_count: natural_t,
};
pub const vm_info_region_t = struct_vm_info_region;
pub const struct_vm_info_object = extern struct {
    vio_object: natural_t,
    vio_size: natural_t,
    vio_ref_count: c_uint,
    vio_resident_page_count: c_uint,
    vio_absent_count: c_uint,
    vio_copy: natural_t,
    vio_shadow: natural_t,
    vio_shadow_offset: natural_t,
    vio_paging_offset: natural_t,
    vio_copy_strategy: memory_object_copy_strategy_t,
    vio_last_alloc: vm_offset_t,
    vio_paging_in_progress: c_uint,
    vio_pager_created: boolean_t,
    vio_pager_initialized: boolean_t,
    vio_pager_ready: boolean_t,
    vio_can_persist: boolean_t,
    vio_internal: boolean_t,
    vio_temporary: boolean_t,
    vio_alive: boolean_t,
    vio_purgable: boolean_t,
    vio_purgable_volatile: boolean_t,
};
pub const vm_info_object_t = struct_vm_info_object;
pub const vm_info_object_array_t = [*c]vm_info_object_t;
pub const struct_zone_name = extern struct {
    zn_name: [80]u8,
};
pub const zone_name_t = struct_zone_name;
pub const zone_name_array_t = [*c]zone_name_t;
pub const struct_zone_info = extern struct {
    zi_count: integer_t,
    zi_cur_size: vm_size_t,
    zi_max_size: vm_size_t,
    zi_elem_size: vm_size_t,
    zi_alloc_size: vm_size_t,
    zi_pageable: integer_t,
    zi_sleepable: integer_t,
    zi_exhaustible: integer_t,
    zi_collectable: integer_t,
};
pub const zone_info_t = struct_zone_info;
pub const zone_info_array_t = [*c]zone_info_t;
pub const struct_mach_zone_name = extern struct {
    mzn_name: [80]u8,
};
pub const mach_zone_name_t = struct_mach_zone_name;
pub const mach_zone_name_array_t = [*c]mach_zone_name_t;
pub const struct_mach_zone_info_data = extern struct {
    mzi_count: u64,
    mzi_cur_size: u64,
    mzi_max_size: u64,
    mzi_elem_size: u64,
    mzi_alloc_size: u64,
    mzi_sum_size: u64,
    mzi_exhaustible: u64,
    mzi_collectable: u64,
};
pub const mach_zone_info_t = struct_mach_zone_info_data;
pub const mach_zone_info_array_t = [*c]mach_zone_info_t;
pub const struct_task_zone_info_data = extern struct {
    tzi_count: u64,
    tzi_cur_size: u64,
    tzi_max_size: u64,
    tzi_elem_size: u64,
    tzi_alloc_size: u64,
    tzi_sum_size: u64,
    tzi_exhaustible: u64,
    tzi_collectable: u64,
    tzi_caller_acct: u64,
    tzi_task_alloc: u64,
    tzi_task_free: u64,
};
pub const task_zone_info_t = struct_task_zone_info_data;
pub const task_zone_info_array_t = [*c]task_zone_info_t;
pub const struct_mach_memory_info = extern struct {
    flags: u64,
    site: u64,
    size: u64,
    free: u64,
    largest: u64,
    collectable_bytes: u64,
    mapped: u64,
    peak: u64,
    tag: u16,
    zone: u16,
    _resvA: [2]u16,
    _resv: [3]u64,
    name: [80]u8,
};
pub const mach_memory_info_t = struct_mach_memory_info;
pub const mach_memory_info_array_t = [*c]mach_memory_info_t;
pub const struct_zone_btrecord = extern struct {
    ref_count: u32,
    operation_type: u32,
    bt: [15]u64,
};
pub const zone_btrecord_t = struct_zone_btrecord;
pub const zone_btrecord_array_t = [*c]zone_btrecord_t;
pub const page_address_array_t = [*c]vm_offset_t;
pub const struct_hash_info_bucket = extern struct {
    hib_count: natural_t,
};
pub const hash_info_bucket_t = struct_hash_info_bucket;
pub const hash_info_bucket_array_t = [*c]hash_info_bucket_t;
pub const struct_lockgroup_info = extern struct {
    lockgroup_name: [64]u8,
    lockgroup_attr: u64,
    lock_spin_cnt: u64,
    lock_spin_util_cnt: u64,
    lock_spin_held_cnt: u64,
    lock_spin_miss_cnt: u64,
    lock_spin_held_max: u64,
    lock_spin_held_cum: u64,
    lock_mtx_cnt: u64,
    lock_mtx_util_cnt: u64,
    lock_mtx_held_cnt: u64,
    lock_mtx_miss_cnt: u64,
    lock_mtx_wait_cnt: u64,
    lock_mtx_held_max: u64,
    lock_mtx_held_cum: u64,
    lock_mtx_wait_max: u64,
    lock_mtx_wait_cum: u64,
    lock_rw_cnt: u64,
    lock_rw_util_cnt: u64,
    lock_rw_held_cnt: u64,
    lock_rw_miss_cnt: u64,
    lock_rw_wait_cnt: u64,
    lock_rw_held_max: u64,
    lock_rw_held_cum: u64,
    lock_rw_wait_max: u64,
    lock_rw_wait_cum: u64,
};
pub const lockgroup_info_t = struct_lockgroup_info;
pub const lockgroup_info_array_t = [*c]lockgroup_info_t;
pub const symtab_name_t = [32]u8;
pub const struct_mach_core_details = extern struct {
    gzip_offset: u64,
    gzip_length: u64,
    core_name: [16]u8,
};
pub const struct_mach_core_fileheader = extern struct {
    signature: u64,
    log_offset: u64,
    log_length: u64,
    num_files: u64,
    files: [16]struct_mach_core_details,
};
pub const struct_mach_core_details_v2 = extern struct {
    flags: u64,
    offset: u64,
    length: u64,
    core_name: [16]u8,
};
pub const struct_mach_core_fileheader_base = extern struct {
    signature: u64,
    version: u32,
};
pub const struct_mach_core_fileheader_v2 = extern struct {
    signature: u64 align(8),
    version: u32,
    flags: u64,
    pub_key_offset: u64,
    pub_key_length: u16,
    log_offset: u64,
    log_length: u64,
    num_files: u64,
    pub fn files(self: anytype) @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), struct_mach_core_details_v2) {
        const Intermediate = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), u8);
        const ReturnType = @import("std").zig.c_translation.FlexibleArrayType(@TypeOf(self), struct_mach_core_details_v2);
        return @ptrCast(ReturnType, @alignCast(@alignOf(struct_mach_core_details_v2), @ptrCast(Intermediate, self) + 64));
    }
};
pub const kobject_description_t = [512]u8;
pub extern fn host_get_boot_info(host_priv: host_priv_t, boot_info: [*c]u8) kern_return_t;
pub extern fn host_reboot(host_priv: host_priv_t, options: c_int) kern_return_t;
pub extern fn host_priv_statistics(host_priv: host_priv_t, flavor: host_flavor_t, host_info_out: host_info_t, host_info_outCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn host_default_memory_manager(host_priv: host_priv_t, default_manager: [*c]memory_object_default_t, cluster_size: memory_object_cluster_size_t) kern_return_t;
pub extern fn vm_wire(host_priv: host_priv_t, task: vm_map_t, address: vm_address_t, size: vm_size_t, desired_access: vm_prot_t) kern_return_t;
pub extern fn thread_wire(host_priv: host_priv_t, thread: thread_act_t, wired: boolean_t) kern_return_t;
pub extern fn vm_allocate_cpm(host_priv: host_priv_t, task: vm_map_t, address: [*c]vm_address_t, size: vm_size_t, flags: c_int) kern_return_t;
pub extern fn host_processors(host_priv: host_priv_t, out_processor_list: [*c]processor_array_t, out_processor_listCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn host_get_clock_control(host_priv: host_priv_t, clock_id: clock_id_t, clock_ctrl: [*c]clock_ctrl_t) kern_return_t;
pub extern fn kmod_create(host_priv: host_priv_t, info: vm_address_t, module: [*c]kmod_t) kern_return_t;
pub extern fn kmod_destroy(host_priv: host_priv_t, module: kmod_t) kern_return_t;
pub extern fn kmod_control(host_priv: host_priv_t, module: kmod_t, flavor: kmod_control_flavor_t, data: [*c]kmod_args_t, dataCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn host_get_special_port(host_priv: host_priv_t, node: c_int, which: c_int, port: [*c]mach_port_t) kern_return_t;
pub extern fn host_set_special_port(host_priv: host_priv_t, which: c_int, port: mach_port_t) kern_return_t;
pub extern fn host_set_exception_ports(host_priv: host_priv_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t) kern_return_t;
pub extern fn host_get_exception_ports(host_priv: host_priv_t, exception_mask: exception_mask_t, masks: exception_mask_array_t, masksCnt: [*c]mach_msg_type_number_t, old_handlers: exception_handler_array_t, old_behaviors: exception_behavior_array_t, old_flavors: exception_flavor_array_t) kern_return_t;
pub extern fn host_swap_exception_ports(host_priv: host_priv_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t, masks: exception_mask_array_t, masksCnt: [*c]mach_msg_type_number_t, old_handlerss: exception_handler_array_t, old_behaviors: exception_behavior_array_t, old_flavors: exception_flavor_array_t) kern_return_t;
pub extern fn mach_vm_wire(host_priv: host_priv_t, task: vm_map_t, address: mach_vm_address_t, size: mach_vm_size_t, desired_access: vm_prot_t) kern_return_t;
pub extern fn host_processor_sets(host_priv: host_priv_t, processor_sets: [*c]processor_set_name_array_t, processor_setsCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn host_processor_set_priv(host_priv: host_priv_t, set_name: processor_set_name_t, set: [*c]processor_set_t) kern_return_t;
pub extern fn host_set_UNDServer(host: host_priv_t, server: UNDServerRef) kern_return_t;
pub extern fn host_get_UNDServer(host: host_priv_t, server: [*c]UNDServerRef) kern_return_t;
pub extern fn kext_request(host_priv: host_priv_t, user_log_flags: u32, request_data: vm_offset_t, request_dataCnt: mach_msg_type_number_t, response_data: [*c]vm_offset_t, response_dataCnt: [*c]mach_msg_type_number_t, log_data: [*c]vm_offset_t, log_dataCnt: [*c]mach_msg_type_number_t, op_result: [*c]kern_return_t) kern_return_t;
pub const __Request__host_get_boot_info_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__host_reboot_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    options: c_int,
};
pub const __Request__host_priv_statistics_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: host_flavor_t,
    host_info_outCnt: mach_msg_type_number_t,
};
pub const __Request__host_default_memory_manager_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    default_manager: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    cluster_size: memory_object_cluster_size_t,
};
pub const __Request__vm_wire_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    task: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    size: vm_size_t,
    desired_access: vm_prot_t,
};
pub const __Request__thread_wire_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    thread: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    wired: boolean_t,
};
pub const __Request__vm_allocate_cpm_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    task: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    size: vm_size_t,
    flags: c_int,
};
pub const __Request__host_processors_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__host_get_clock_control_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    clock_id: clock_id_t,
};
pub const __Request__kmod_create_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    info: vm_address_t,
};
pub const __Request__kmod_destroy_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    module: kmod_t,
};
pub const __Request__kmod_control_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    data: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    module: kmod_t,
    flavor: kmod_control_flavor_t,
    dataCnt: mach_msg_type_number_t,
};
pub const __Request__host_get_special_port_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    node: c_int,
    which: c_int,
};
pub const __Request__host_set_special_port_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    port: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    which: c_int,
};
pub const __Request__host_set_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    new_port: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    exception_mask: exception_mask_t,
    behavior: exception_behavior_t,
    new_flavor: thread_state_flavor_t,
};
pub const __Request__host_get_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    exception_mask: exception_mask_t,
};
pub const __Request__host_swap_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    new_port: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    exception_mask: exception_mask_t,
    behavior: exception_behavior_t,
    new_flavor: thread_state_flavor_t,
};
pub const __Request__mach_vm_wire_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    task: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    address: mach_vm_address_t,
    size: mach_vm_size_t,
    desired_access: vm_prot_t,
};
pub const __Request__host_processor_sets_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__host_processor_set_priv_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    set_name: mach_msg_port_descriptor_t,
};
pub const __Request__host_set_UNDServer_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    server: mach_msg_port_descriptor_t,
};
pub const __Request__host_get_UNDServer_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__kext_request_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    request_data: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    user_log_flags: u32,
    request_dataCnt: mach_msg_type_number_t,
};
pub const union___RequestUnion__host_priv_subsystem = extern union {
    Request_host_get_boot_info: __Request__host_get_boot_info_t,
    Request_host_reboot: __Request__host_reboot_t,
    Request_host_priv_statistics: __Request__host_priv_statistics_t,
    Request_host_default_memory_manager: __Request__host_default_memory_manager_t,
    Request_vm_wire: __Request__vm_wire_t,
    Request_thread_wire: __Request__thread_wire_t,
    Request_vm_allocate_cpm: __Request__vm_allocate_cpm_t,
    Request_host_processors: __Request__host_processors_t,
    Request_host_get_clock_control: __Request__host_get_clock_control_t,
    Request_kmod_create: __Request__kmod_create_t,
    Request_kmod_destroy: __Request__kmod_destroy_t,
    Request_kmod_control: __Request__kmod_control_t,
    Request_host_get_special_port: __Request__host_get_special_port_t,
    Request_host_set_special_port: __Request__host_set_special_port_t,
    Request_host_set_exception_ports: __Request__host_set_exception_ports_t,
    Request_host_get_exception_ports: __Request__host_get_exception_ports_t,
    Request_host_swap_exception_ports: __Request__host_swap_exception_ports_t,
    Request_mach_vm_wire: __Request__mach_vm_wire_t,
    Request_host_processor_sets: __Request__host_processor_sets_t,
    Request_host_processor_set_priv: __Request__host_processor_set_priv_t,
    Request_host_set_UNDServer: __Request__host_set_UNDServer_t,
    Request_host_get_UNDServer: __Request__host_get_UNDServer_t,
    Request_kext_request: __Request__kext_request_t,
};
pub const __Reply__host_get_boot_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    boot_infoOffset: mach_msg_type_number_t,
    boot_infoCnt: mach_msg_type_number_t,
    boot_info: [4096]u8,
};
pub const __Reply__host_reboot_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__host_priv_statistics_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    host_info_outCnt: mach_msg_type_number_t,
    host_info_out: [68]integer_t,
};
pub const __Reply__host_default_memory_manager_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    default_manager: mach_msg_port_descriptor_t,
};
pub const __Reply__vm_wire_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_wire_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__vm_allocate_cpm_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    address: vm_address_t,
};
pub const __Reply__host_processors_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    out_processor_list: mach_msg_ool_ports_descriptor_t,
    NDR: NDR_record_t,
    out_processor_listCnt: mach_msg_type_number_t,
};
pub const __Reply__host_get_clock_control_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    clock_ctrl: mach_msg_port_descriptor_t,
};
pub const __Reply__kmod_create_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    module: kmod_t,
};
pub const __Reply__kmod_destroy_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__kmod_control_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    data: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    dataCnt: mach_msg_type_number_t,
};
pub const __Reply__host_get_special_port_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    port: mach_msg_port_descriptor_t,
};
pub const __Reply__host_set_special_port_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__host_set_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__host_get_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    old_handlers: [32]mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    masksCnt: mach_msg_type_number_t,
    masks: [32]exception_mask_t,
    old_behaviors: [32]exception_behavior_t,
    old_flavors: [32]thread_state_flavor_t,
};
pub const __Reply__host_swap_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    old_handlerss: [32]mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    masksCnt: mach_msg_type_number_t,
    masks: [32]exception_mask_t,
    old_behaviors: [32]exception_behavior_t,
    old_flavors: [32]thread_state_flavor_t,
};
pub const __Reply__mach_vm_wire_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__host_processor_sets_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    processor_sets: mach_msg_ool_ports_descriptor_t,
    NDR: NDR_record_t,
    processor_setsCnt: mach_msg_type_number_t,
};
pub const __Reply__host_processor_set_priv_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    set: mach_msg_port_descriptor_t,
};
pub const __Reply__host_set_UNDServer_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__host_get_UNDServer_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    server: mach_msg_port_descriptor_t,
};
pub const __Reply__kext_request_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    response_data: mach_msg_ool_descriptor_t,
    log_data: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    response_dataCnt: mach_msg_type_number_t,
    log_dataCnt: mach_msg_type_number_t,
    op_result: kern_return_t,
};
pub const union___ReplyUnion__host_priv_subsystem = extern union {
    Reply_host_get_boot_info: __Reply__host_get_boot_info_t,
    Reply_host_reboot: __Reply__host_reboot_t,
    Reply_host_priv_statistics: __Reply__host_priv_statistics_t,
    Reply_host_default_memory_manager: __Reply__host_default_memory_manager_t,
    Reply_vm_wire: __Reply__vm_wire_t,
    Reply_thread_wire: __Reply__thread_wire_t,
    Reply_vm_allocate_cpm: __Reply__vm_allocate_cpm_t,
    Reply_host_processors: __Reply__host_processors_t,
    Reply_host_get_clock_control: __Reply__host_get_clock_control_t,
    Reply_kmod_create: __Reply__kmod_create_t,
    Reply_kmod_destroy: __Reply__kmod_destroy_t,
    Reply_kmod_control: __Reply__kmod_control_t,
    Reply_host_get_special_port: __Reply__host_get_special_port_t,
    Reply_host_set_special_port: __Reply__host_set_special_port_t,
    Reply_host_set_exception_ports: __Reply__host_set_exception_ports_t,
    Reply_host_get_exception_ports: __Reply__host_get_exception_ports_t,
    Reply_host_swap_exception_ports: __Reply__host_swap_exception_ports_t,
    Reply_mach_vm_wire: __Reply__mach_vm_wire_t,
    Reply_host_processor_sets: __Reply__host_processor_sets_t,
    Reply_host_processor_set_priv: __Reply__host_processor_set_priv_t,
    Reply_host_set_UNDServer: __Reply__host_set_UNDServer_t,
    Reply_host_get_UNDServer: __Reply__host_get_UNDServer_t,
    Reply_kext_request: __Reply__kext_request_t,
};
pub extern fn host_security_create_task_token(host_security: host_security_t, parent_task: task_t, sec_token: security_token_t, audit_token: audit_token_t, host: host_t, ledgers: ledger_array_t, ledgersCnt: mach_msg_type_number_t, inherit_memory: boolean_t, child_task: [*c]task_t) kern_return_t;
pub extern fn host_security_set_task_token(host_security: host_security_t, target_task: task_t, sec_token: security_token_t, audit_token: audit_token_t, host: host_t) kern_return_t;
pub const __Request__host_security_create_task_token_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    parent_task: mach_msg_port_descriptor_t,
    host: mach_msg_port_descriptor_t,
    ledgers: mach_msg_ool_ports_descriptor_t,
    NDR: NDR_record_t,
    sec_token: security_token_t,
    audit_token: audit_token_t,
    ledgersCnt: mach_msg_type_number_t,
    inherit_memory: boolean_t,
};
pub const __Request__host_security_set_task_token_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    target_task: mach_msg_port_descriptor_t,
    host: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    sec_token: security_token_t,
    audit_token: audit_token_t,
};
pub const union___RequestUnion__host_security_subsystem = extern union {
    Request_host_security_create_task_token: __Request__host_security_create_task_token_t,
    Request_host_security_set_task_token: __Request__host_security_set_task_token_t,
};
pub const __Reply__host_security_create_task_token_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    child_task: mach_msg_port_descriptor_t,
};
pub const __Reply__host_security_set_task_token_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const union___ReplyUnion__host_security_subsystem = extern union {
    Reply_host_security_create_task_token: __Reply__host_security_create_task_token_t,
    Reply_host_security_set_task_token: __Reply__host_security_set_task_token_t,
};
pub extern fn lock_acquire(lock_set: lock_set_t, lock_id: c_int) kern_return_t;
pub extern fn lock_release(lock_set: lock_set_t, lock_id: c_int) kern_return_t;
pub extern fn lock_try(lock_set: lock_set_t, lock_id: c_int) kern_return_t;
pub extern fn lock_make_stable(lock_set: lock_set_t, lock_id: c_int) kern_return_t;
pub extern fn lock_handoff(lock_set: lock_set_t, lock_id: c_int) kern_return_t;
pub extern fn lock_handoff_accept(lock_set: lock_set_t, lock_id: c_int) kern_return_t;
pub const __Request__lock_acquire_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    lock_id: c_int,
};
pub const __Request__lock_release_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    lock_id: c_int,
};
pub const __Request__lock_try_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    lock_id: c_int,
};
pub const __Request__lock_make_stable_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    lock_id: c_int,
};
pub const __Request__lock_handoff_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    lock_id: c_int,
};
pub const __Request__lock_handoff_accept_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    lock_id: c_int,
};
pub const union___RequestUnion__lock_set_subsystem = extern union {
    Request_lock_acquire: __Request__lock_acquire_t,
    Request_lock_release: __Request__lock_release_t,
    Request_lock_try: __Request__lock_try_t,
    Request_lock_make_stable: __Request__lock_make_stable_t,
    Request_lock_handoff: __Request__lock_handoff_t,
    Request_lock_handoff_accept: __Request__lock_handoff_accept_t,
};
pub const __Reply__lock_acquire_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__lock_release_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__lock_try_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__lock_make_stable_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__lock_handoff_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__lock_handoff_accept_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const union___ReplyUnion__lock_set_subsystem = extern union {
    Reply_lock_acquire: __Reply__lock_acquire_t,
    Reply_lock_release: __Reply__lock_release_t,
    Reply_lock_try: __Reply__lock_try_t,
    Reply_lock_make_stable: __Reply__lock_make_stable_t,
    Reply_lock_handoff: __Reply__lock_handoff_t,
    Reply_lock_handoff_accept: __Reply__lock_handoff_accept_t,
};
pub extern fn processor_start(processor: processor_t) kern_return_t;
pub extern fn processor_exit(processor: processor_t) kern_return_t;
pub extern fn processor_info(processor: processor_t, flavor: processor_flavor_t, host: [*c]host_t, processor_info_out: processor_info_t, processor_info_outCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn processor_control(processor: processor_t, processor_cmd: processor_info_t, processor_cmdCnt: mach_msg_type_number_t) kern_return_t;
pub extern fn processor_assign(processor: processor_t, new_set: processor_set_t, wait: boolean_t) kern_return_t;
pub extern fn processor_get_assignment(processor: processor_t, assigned_set: [*c]processor_set_name_t) kern_return_t;
pub const __Request__processor_start_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__processor_exit_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__processor_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: processor_flavor_t,
    processor_info_outCnt: mach_msg_type_number_t,
};
pub const __Request__processor_control_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    processor_cmdCnt: mach_msg_type_number_t,
    processor_cmd: [20]integer_t,
};
pub const __Request__processor_assign_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    new_set: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    wait: boolean_t,
};
pub const __Request__processor_get_assignment_t = extern struct {
    Head: mach_msg_header_t,
};
pub const union___RequestUnion__processor_subsystem = extern union {
    Request_processor_start: __Request__processor_start_t,
    Request_processor_exit: __Request__processor_exit_t,
    Request_processor_info: __Request__processor_info_t,
    Request_processor_control: __Request__processor_control_t,
    Request_processor_assign: __Request__processor_assign_t,
    Request_processor_get_assignment: __Request__processor_get_assignment_t,
};
pub const __Reply__processor_start_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__processor_exit_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__processor_info_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    host: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    processor_info_outCnt: mach_msg_type_number_t,
    processor_info_out: [20]integer_t,
};
pub const __Reply__processor_control_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__processor_assign_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__processor_get_assignment_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    assigned_set: mach_msg_port_descriptor_t,
};
pub const union___ReplyUnion__processor_subsystem = extern union {
    Reply_processor_start: __Reply__processor_start_t,
    Reply_processor_exit: __Reply__processor_exit_t,
    Reply_processor_info: __Reply__processor_info_t,
    Reply_processor_control: __Reply__processor_control_t,
    Reply_processor_assign: __Reply__processor_assign_t,
    Reply_processor_get_assignment: __Reply__processor_get_assignment_t,
};
pub extern fn processor_set_statistics(pset: processor_set_name_t, flavor: processor_set_flavor_t, info_out: processor_set_info_t, info_outCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn processor_set_destroy(set: processor_set_t) kern_return_t;
pub extern fn processor_set_max_priority(processor_set: processor_set_t, max_priority: c_int, change_threads: boolean_t) kern_return_t;
pub extern fn processor_set_policy_enable(processor_set: processor_set_t, policy: c_int) kern_return_t;
pub extern fn processor_set_policy_disable(processor_set: processor_set_t, policy: c_int, change_threads: boolean_t) kern_return_t;
pub extern fn processor_set_tasks(processor_set: processor_set_t, task_list: [*c]task_array_t, task_listCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn processor_set_threads(processor_set: processor_set_t, thread_list: [*c]thread_act_array_t, thread_listCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn processor_set_policy_control(pset: processor_set_t, flavor: processor_set_flavor_t, policy_info: processor_set_info_t, policy_infoCnt: mach_msg_type_number_t, change: boolean_t) kern_return_t;
pub extern fn processor_set_stack_usage(pset: processor_set_t, ltotal: [*c]c_uint, space: [*c]vm_size_t, resident: [*c]vm_size_t, maxusage: [*c]vm_size_t, maxstack: [*c]vm_offset_t) kern_return_t;
pub extern fn processor_set_info(set_name: processor_set_name_t, flavor: c_int, host: [*c]host_t, info_out: processor_set_info_t, info_outCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn processor_set_tasks_with_flavor(processor_set: processor_set_t, flavor: mach_task_flavor_t, task_list: [*c]task_array_t, task_listCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub const __Request__processor_set_statistics_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: processor_set_flavor_t,
    info_outCnt: mach_msg_type_number_t,
};
pub const __Request__processor_set_destroy_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__processor_set_max_priority_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    max_priority: c_int,
    change_threads: boolean_t,
};
pub const __Request__processor_set_policy_enable_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    policy: c_int,
};
pub const __Request__processor_set_policy_disable_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    policy: c_int,
    change_threads: boolean_t,
};
pub const __Request__processor_set_tasks_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__processor_set_threads_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__processor_set_policy_control_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: processor_set_flavor_t,
    policy_infoCnt: mach_msg_type_number_t,
    policy_info: [5]integer_t,
    change: boolean_t,
};
pub const __Request__processor_set_stack_usage_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__processor_set_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: c_int,
    info_outCnt: mach_msg_type_number_t,
};
pub const __Request__processor_set_tasks_with_flavor_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: mach_task_flavor_t,
};
pub const union___RequestUnion__processor_set_subsystem = extern union {
    Request_processor_set_statistics: __Request__processor_set_statistics_t,
    Request_processor_set_destroy: __Request__processor_set_destroy_t,
    Request_processor_set_max_priority: __Request__processor_set_max_priority_t,
    Request_processor_set_policy_enable: __Request__processor_set_policy_enable_t,
    Request_processor_set_policy_disable: __Request__processor_set_policy_disable_t,
    Request_processor_set_tasks: __Request__processor_set_tasks_t,
    Request_processor_set_threads: __Request__processor_set_threads_t,
    Request_processor_set_policy_control: __Request__processor_set_policy_control_t,
    Request_processor_set_stack_usage: __Request__processor_set_stack_usage_t,
    Request_processor_set_info: __Request__processor_set_info_t,
    Request_processor_set_tasks_with_flavor: __Request__processor_set_tasks_with_flavor_t,
};
pub const __Reply__processor_set_statistics_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    info_outCnt: mach_msg_type_number_t,
    info_out: [5]integer_t,
};
pub const __Reply__processor_set_destroy_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__processor_set_max_priority_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__processor_set_policy_enable_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__processor_set_policy_disable_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__processor_set_tasks_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    task_list: mach_msg_ool_ports_descriptor_t,
    NDR: NDR_record_t,
    task_listCnt: mach_msg_type_number_t,
};
pub const __Reply__processor_set_threads_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    thread_list: mach_msg_ool_ports_descriptor_t,
    NDR: NDR_record_t,
    thread_listCnt: mach_msg_type_number_t,
};
pub const __Reply__processor_set_policy_control_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__processor_set_stack_usage_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    ltotal: c_uint,
    space: vm_size_t,
    resident: vm_size_t,
    maxusage: vm_size_t,
    maxstack: vm_offset_t,
};
pub const __Reply__processor_set_info_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    host: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    info_outCnt: mach_msg_type_number_t,
    info_out: [5]integer_t,
};
pub const __Reply__processor_set_tasks_with_flavor_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    task_list: mach_msg_ool_ports_descriptor_t,
    NDR: NDR_record_t,
    task_listCnt: mach_msg_type_number_t,
};
pub const union___ReplyUnion__processor_set_subsystem = extern union {
    Reply_processor_set_statistics: __Reply__processor_set_statistics_t,
    Reply_processor_set_destroy: __Reply__processor_set_destroy_t,
    Reply_processor_set_max_priority: __Reply__processor_set_max_priority_t,
    Reply_processor_set_policy_enable: __Reply__processor_set_policy_enable_t,
    Reply_processor_set_policy_disable: __Reply__processor_set_policy_disable_t,
    Reply_processor_set_tasks: __Reply__processor_set_tasks_t,
    Reply_processor_set_threads: __Reply__processor_set_threads_t,
    Reply_processor_set_policy_control: __Reply__processor_set_policy_control_t,
    Reply_processor_set_stack_usage: __Reply__processor_set_stack_usage_t,
    Reply_processor_set_info: __Reply__processor_set_info_t,
    Reply_processor_set_tasks_with_flavor: __Reply__processor_set_tasks_with_flavor_t,
};
pub const sync_policy_t = c_int;
pub extern fn semaphore_signal(semaphore: semaphore_t) kern_return_t;
pub extern fn semaphore_signal_all(semaphore: semaphore_t) kern_return_t;
pub extern fn semaphore_wait(semaphore: semaphore_t) kern_return_t;
pub extern fn semaphore_timedwait(semaphore: semaphore_t, wait_time: mach_timespec_t) kern_return_t;
pub extern fn semaphore_timedwait_signal(wait_semaphore: semaphore_t, signal_semaphore: semaphore_t, wait_time: mach_timespec_t) kern_return_t;
pub extern fn semaphore_wait_signal(wait_semaphore: semaphore_t, signal_semaphore: semaphore_t) kern_return_t;
pub extern fn semaphore_signal_thread(semaphore: semaphore_t, thread: thread_t) kern_return_t;
pub extern fn task_create(target_task: task_t, ledgers: ledger_array_t, ledgersCnt: mach_msg_type_number_t, inherit_memory: boolean_t, child_task: [*c]task_t) kern_return_t;
pub extern fn task_terminate(target_task: task_t) kern_return_t;
pub extern fn task_threads(target_task: task_inspect_t, act_list: [*c]thread_act_array_t, act_listCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn mach_ports_register(target_task: task_t, init_port_set: mach_port_array_t, init_port_setCnt: mach_msg_type_number_t) kern_return_t;
pub extern fn mach_ports_lookup(target_task: task_t, init_port_set: [*c]mach_port_array_t, init_port_setCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn task_info(target_task: task_name_t, flavor: task_flavor_t, task_info_out: task_info_t, task_info_outCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn task_set_info(target_task: task_t, flavor: task_flavor_t, task_info_in: task_info_t, task_info_inCnt: mach_msg_type_number_t) kern_return_t;
pub extern fn task_suspend(target_task: task_read_t) kern_return_t;
pub extern fn task_resume(target_task: task_read_t) kern_return_t;
pub extern fn task_get_special_port(task: task_inspect_t, which_port: c_int, special_port: [*c]mach_port_t) kern_return_t;
pub extern fn task_set_special_port(task: task_t, which_port: c_int, special_port: mach_port_t) kern_return_t;
pub extern fn thread_create(parent_task: task_t, child_act: [*c]thread_act_t) kern_return_t;
pub extern fn thread_create_running(parent_task: task_t, flavor: thread_state_flavor_t, new_state: thread_state_t, new_stateCnt: mach_msg_type_number_t, child_act: [*c]thread_act_t) kern_return_t;
pub extern fn task_set_exception_ports(task: task_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t) kern_return_t;
pub extern fn task_get_exception_ports(task: task_t, exception_mask: exception_mask_t, masks: exception_mask_array_t, masksCnt: [*c]mach_msg_type_number_t, old_handlers: exception_handler_array_t, old_behaviors: exception_behavior_array_t, old_flavors: exception_flavor_array_t) kern_return_t;
pub extern fn task_swap_exception_ports(task: task_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t, masks: exception_mask_array_t, masksCnt: [*c]mach_msg_type_number_t, old_handlers: exception_handler_array_t, old_behaviors: exception_behavior_array_t, old_flavors: exception_flavor_array_t) kern_return_t;
pub extern fn lock_set_create(task: task_t, new_lock_set: [*c]lock_set_t, n_ulocks: c_int, policy: c_int) kern_return_t;
pub extern fn lock_set_destroy(task: task_t, lock_set: lock_set_t) kern_return_t;
pub extern fn semaphore_create(task: task_t, semaphore: [*c]semaphore_t, policy: c_int, value: c_int) kern_return_t;
pub extern fn semaphore_destroy(task: task_t, semaphore: semaphore_t) kern_return_t;
pub extern fn task_policy_set(task: task_policy_set_t, flavor: task_policy_flavor_t, policy_info: task_policy_t, policy_infoCnt: mach_msg_type_number_t) kern_return_t;
pub extern fn task_policy_get(task: task_policy_get_t, flavor: task_policy_flavor_t, policy_info: task_policy_t, policy_infoCnt: [*c]mach_msg_type_number_t, get_default: [*c]boolean_t) kern_return_t;
pub extern fn task_sample(task: task_t, reply: mach_port_t) kern_return_t;
pub extern fn task_policy(task: task_t, policy: policy_t, base: policy_base_t, baseCnt: mach_msg_type_number_t, set_limit: boolean_t, change: boolean_t) kern_return_t;
pub extern fn task_set_emulation(target_port: task_t, routine_entry_pt: vm_address_t, routine_number: c_int) kern_return_t;
pub extern fn task_get_emulation_vector(task: task_t, vector_start: [*c]c_int, emulation_vector: [*c]emulation_vector_t, emulation_vectorCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn task_set_emulation_vector(task: task_t, vector_start: c_int, emulation_vector: emulation_vector_t, emulation_vectorCnt: mach_msg_type_number_t) kern_return_t;
pub extern fn task_set_ras_pc(target_task: task_t, basepc: vm_address_t, boundspc: vm_address_t) kern_return_t;
pub extern fn task_zone_info(target_task: task_inspect_t, names: [*c]mach_zone_name_array_t, namesCnt: [*c]mach_msg_type_number_t, info: [*c]task_zone_info_array_t, infoCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn task_assign(task: task_t, new_set: processor_set_t, assign_threads: boolean_t) kern_return_t;
pub extern fn task_assign_default(task: task_t, assign_threads: boolean_t) kern_return_t;
pub extern fn task_get_assignment(task: task_inspect_t, assigned_set: [*c]processor_set_name_t) kern_return_t;
pub extern fn task_set_policy(task: task_t, pset: processor_set_t, policy: policy_t, base: policy_base_t, baseCnt: mach_msg_type_number_t, limit: policy_limit_t, limitCnt: mach_msg_type_number_t, change: boolean_t) kern_return_t;
pub extern fn task_get_state(task: task_read_t, flavor: thread_state_flavor_t, old_state: thread_state_t, old_stateCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn task_set_state(task: task_t, flavor: thread_state_flavor_t, new_state: thread_state_t, new_stateCnt: mach_msg_type_number_t) kern_return_t;
pub extern fn task_set_phys_footprint_limit(task: task_t, new_limit: c_int, old_limit: [*c]c_int) kern_return_t;
pub extern fn task_suspend2(target_task: task_read_t, suspend_token: [*c]task_suspension_token_t) kern_return_t;
pub extern fn task_resume2(suspend_token: task_suspension_token_t) kern_return_t;
pub extern fn task_purgable_info(task: task_inspect_t, stats: [*c]task_purgable_info_t) kern_return_t;
pub extern fn task_get_mach_voucher(task: task_read_t, which: mach_voucher_selector_t, voucher: [*c]ipc_voucher_t) kern_return_t;
pub extern fn task_set_mach_voucher(task: task_t, voucher: ipc_voucher_t) kern_return_t;
pub extern fn task_swap_mach_voucher(task: task_t, new_voucher: ipc_voucher_t, old_voucher: [*c]ipc_voucher_t) kern_return_t;
pub extern fn task_generate_corpse(task: task_read_t, corpse_task_port: [*c]mach_port_t) kern_return_t;
pub extern fn task_map_corpse_info(task: task_t, corspe_task: task_read_t, kcd_addr_begin: [*c]vm_address_t, kcd_size: [*c]u32) kern_return_t;
pub extern fn task_register_dyld_image_infos(task: task_t, dyld_images: dyld_kernel_image_info_array_t, dyld_imagesCnt: mach_msg_type_number_t) kern_return_t;
pub extern fn task_unregister_dyld_image_infos(task: task_t, dyld_images: dyld_kernel_image_info_array_t, dyld_imagesCnt: mach_msg_type_number_t) kern_return_t;
pub extern fn task_get_dyld_image_infos(task: task_read_t, dyld_images: [*c]dyld_kernel_image_info_array_t, dyld_imagesCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn task_register_dyld_shared_cache_image_info(task: task_t, dyld_cache_image: dyld_kernel_image_info_t, no_cache: boolean_t, private_cache: boolean_t) kern_return_t;
pub extern fn task_register_dyld_set_dyld_state(task: task_t, dyld_state: u8) kern_return_t;
pub extern fn task_register_dyld_get_process_state(task: task_t, dyld_process_state: [*c]dyld_kernel_process_info_t) kern_return_t;
pub extern fn task_map_corpse_info_64(task: task_t, corspe_task: task_read_t, kcd_addr_begin: [*c]mach_vm_address_t, kcd_size: [*c]mach_vm_size_t) kern_return_t;
pub extern fn task_inspect(task: task_inspect_t, flavor: task_inspect_flavor_t, info_out: task_inspect_info_t, info_outCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn task_get_exc_guard_behavior(task: task_inspect_t, behavior: [*c]task_exc_guard_behavior_t) kern_return_t;
pub extern fn task_set_exc_guard_behavior(task: task_t, behavior: task_exc_guard_behavior_t) kern_return_t;
pub extern fn task_create_suid_cred(task: task_t, path: [*c]u8, uid: suid_cred_uid_t, delegation: [*c]suid_cred_t) kern_return_t;
pub extern fn task_dyld_process_info_notify_register(target_task: task_read_t, notify: mach_port_t) kern_return_t;
pub extern fn task_create_identity_token(task: task_t, token: [*c]task_id_token_t) kern_return_t;
pub extern fn task_identity_token_get_task_port(token: task_id_token_t, flavor: task_flavor_t, task_port: [*c]mach_port_t) kern_return_t;
pub extern fn task_dyld_process_info_notify_deregister(target_task: task_read_t, notify: mach_port_name_t) kern_return_t;
pub extern fn task_get_exception_ports_info(port: mach_port_t, exception_mask: exception_mask_t, masks: exception_mask_array_t, masksCnt: [*c]mach_msg_type_number_t, old_handlers_info: exception_handler_info_array_t, old_behaviors: exception_behavior_array_t, old_flavors: exception_flavor_array_t) kern_return_t;
pub extern fn task_test_sync_upcall(task: task_t, port: mach_port_t) kern_return_t;
pub extern fn task_set_corpse_forking_behavior(task: task_t, behavior: task_corpse_forking_behavior_t) kern_return_t;
pub const __Request__task_create_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    ledgers: mach_msg_ool_ports_descriptor_t,
    NDR: NDR_record_t,
    ledgersCnt: mach_msg_type_number_t,
    inherit_memory: boolean_t,
};
pub const __Request__task_terminate_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__task_threads_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__mach_ports_register_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    init_port_set: mach_msg_ool_ports_descriptor_t,
    NDR: NDR_record_t,
    init_port_setCnt: mach_msg_type_number_t,
};
pub const __Request__mach_ports_lookup_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__task_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: task_flavor_t,
    task_info_outCnt: mach_msg_type_number_t,
};
pub const __Request__task_set_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: task_flavor_t,
    task_info_inCnt: mach_msg_type_number_t,
    task_info_in: [87]integer_t,
};
pub const __Request__task_suspend_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__task_resume_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__task_get_special_port_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    which_port: c_int,
};
pub const __Request__task_set_special_port_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    special_port: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    which_port: c_int,
};
pub const __Request__thread_create_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__thread_create_running_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: thread_state_flavor_t,
    new_stateCnt: mach_msg_type_number_t,
    new_state: [1296]natural_t,
};
pub const __Request__task_set_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    new_port: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    exception_mask: exception_mask_t,
    behavior: exception_behavior_t,
    new_flavor: thread_state_flavor_t,
};
pub const __Request__task_get_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    exception_mask: exception_mask_t,
};
pub const __Request__task_swap_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    new_port: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    exception_mask: exception_mask_t,
    behavior: exception_behavior_t,
    new_flavor: thread_state_flavor_t,
};
pub const __Request__lock_set_create_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    n_ulocks: c_int,
    policy: c_int,
};
pub const __Request__lock_set_destroy_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    lock_set: mach_msg_port_descriptor_t,
};
pub const __Request__semaphore_create_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    policy: c_int,
    value: c_int,
};
pub const __Request__semaphore_destroy_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    semaphore: mach_msg_port_descriptor_t,
};
pub const __Request__task_policy_set_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: task_policy_flavor_t,
    policy_infoCnt: mach_msg_type_number_t,
    policy_info: [16]integer_t,
};
pub const __Request__task_policy_get_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: task_policy_flavor_t,
    policy_infoCnt: mach_msg_type_number_t,
    get_default: boolean_t,
};
pub const __Request__task_sample_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    reply: mach_msg_port_descriptor_t,
};
pub const __Request__task_policy_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    policy: policy_t,
    baseCnt: mach_msg_type_number_t,
    base: [5]integer_t,
    set_limit: boolean_t,
    change: boolean_t,
};
pub const __Request__task_set_emulation_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    routine_entry_pt: vm_address_t,
    routine_number: c_int,
};
pub const __Request__task_get_emulation_vector_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__task_set_emulation_vector_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    emulation_vector: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    vector_start: c_int,
    emulation_vectorCnt: mach_msg_type_number_t,
};
pub const __Request__task_set_ras_pc_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    basepc: vm_address_t,
    boundspc: vm_address_t,
};
pub const __Request__task_zone_info_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__task_assign_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    new_set: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    assign_threads: boolean_t,
};
pub const __Request__task_assign_default_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    assign_threads: boolean_t,
};
pub const __Request__task_get_assignment_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__task_set_policy_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    pset: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    policy: policy_t,
    baseCnt: mach_msg_type_number_t,
    base: [5]integer_t,
    limitCnt: mach_msg_type_number_t,
    limit: [1]integer_t,
    change: boolean_t,
};
pub const __Request__task_get_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: thread_state_flavor_t,
    old_stateCnt: mach_msg_type_number_t,
};
pub const __Request__task_set_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: thread_state_flavor_t,
    new_stateCnt: mach_msg_type_number_t,
    new_state: [1296]natural_t,
};
pub const __Request__task_set_phys_footprint_limit_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    new_limit: c_int,
};
pub const __Request__task_suspend2_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__task_resume2_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__task_purgable_info_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__task_get_mach_voucher_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    which: mach_voucher_selector_t,
};
pub const __Request__task_set_mach_voucher_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    voucher: mach_msg_port_descriptor_t,
};
pub const __Request__task_swap_mach_voucher_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    new_voucher: mach_msg_port_descriptor_t,
    old_voucher: mach_msg_port_descriptor_t,
};
pub const __Request__task_generate_corpse_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__task_map_corpse_info_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    corspe_task: mach_msg_port_descriptor_t,
};
pub const __Request__task_register_dyld_image_infos_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    dyld_images: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    dyld_imagesCnt: mach_msg_type_number_t,
};
pub const __Request__task_unregister_dyld_image_infos_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    dyld_images: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    dyld_imagesCnt: mach_msg_type_number_t,
};
pub const __Request__task_get_dyld_image_infos_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__task_register_dyld_shared_cache_image_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    dyld_cache_image: dyld_kernel_image_info_t,
    no_cache: boolean_t,
    private_cache: boolean_t,
};
pub const __Request__task_register_dyld_set_dyld_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    dyld_state: u8,
    dyld_statePad: [3]u8,
};
pub const __Request__task_register_dyld_get_process_state_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__task_map_corpse_info_64_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    corspe_task: mach_msg_port_descriptor_t,
};
pub const __Request__task_inspect_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: task_inspect_flavor_t,
    info_outCnt: mach_msg_type_number_t,
};
pub const __Request__task_get_exc_guard_behavior_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__task_set_exc_guard_behavior_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    behavior: task_exc_guard_behavior_t,
};
pub const __Request__task_create_suid_cred_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    pathOffset: mach_msg_type_number_t,
    pathCnt: mach_msg_type_number_t,
    path: [1024]u8,
    uid: suid_cred_uid_t,
};
pub const __Request__task_dyld_process_info_notify_register_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    notify: mach_msg_port_descriptor_t,
};
pub const __Request__task_create_identity_token_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__task_identity_token_get_task_port_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: task_flavor_t,
};
pub const __Request__task_dyld_process_info_notify_deregister_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    notify: mach_port_name_t,
};
pub const __Request__task_get_exception_ports_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    exception_mask: exception_mask_t,
};
pub const __Request__task_test_sync_upcall_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    port: mach_msg_port_descriptor_t,
};
pub const __Request__task_set_corpse_forking_behavior_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    behavior: task_corpse_forking_behavior_t,
};
pub const union___RequestUnion__task_subsystem = extern union {
    Request_task_create: __Request__task_create_t,
    Request_task_terminate: __Request__task_terminate_t,
    Request_task_threads: __Request__task_threads_t,
    Request_mach_ports_register: __Request__mach_ports_register_t,
    Request_mach_ports_lookup: __Request__mach_ports_lookup_t,
    Request_task_info: __Request__task_info_t,
    Request_task_set_info: __Request__task_set_info_t,
    Request_task_suspend: __Request__task_suspend_t,
    Request_task_resume: __Request__task_resume_t,
    Request_task_get_special_port: __Request__task_get_special_port_t,
    Request_task_set_special_port: __Request__task_set_special_port_t,
    Request_thread_create: __Request__thread_create_t,
    Request_thread_create_running: __Request__thread_create_running_t,
    Request_task_set_exception_ports: __Request__task_set_exception_ports_t,
    Request_task_get_exception_ports: __Request__task_get_exception_ports_t,
    Request_task_swap_exception_ports: __Request__task_swap_exception_ports_t,
    Request_lock_set_create: __Request__lock_set_create_t,
    Request_lock_set_destroy: __Request__lock_set_destroy_t,
    Request_semaphore_create: __Request__semaphore_create_t,
    Request_semaphore_destroy: __Request__semaphore_destroy_t,
    Request_task_policy_set: __Request__task_policy_set_t,
    Request_task_policy_get: __Request__task_policy_get_t,
    Request_task_sample: __Request__task_sample_t,
    Request_task_policy: __Request__task_policy_t,
    Request_task_set_emulation: __Request__task_set_emulation_t,
    Request_task_get_emulation_vector: __Request__task_get_emulation_vector_t,
    Request_task_set_emulation_vector: __Request__task_set_emulation_vector_t,
    Request_task_set_ras_pc: __Request__task_set_ras_pc_t,
    Request_task_zone_info: __Request__task_zone_info_t,
    Request_task_assign: __Request__task_assign_t,
    Request_task_assign_default: __Request__task_assign_default_t,
    Request_task_get_assignment: __Request__task_get_assignment_t,
    Request_task_set_policy: __Request__task_set_policy_t,
    Request_task_get_state: __Request__task_get_state_t,
    Request_task_set_state: __Request__task_set_state_t,
    Request_task_set_phys_footprint_limit: __Request__task_set_phys_footprint_limit_t,
    Request_task_suspend2: __Request__task_suspend2_t,
    Request_task_resume2: __Request__task_resume2_t,
    Request_task_purgable_info: __Request__task_purgable_info_t,
    Request_task_get_mach_voucher: __Request__task_get_mach_voucher_t,
    Request_task_set_mach_voucher: __Request__task_set_mach_voucher_t,
    Request_task_swap_mach_voucher: __Request__task_swap_mach_voucher_t,
    Request_task_generate_corpse: __Request__task_generate_corpse_t,
    Request_task_map_corpse_info: __Request__task_map_corpse_info_t,
    Request_task_register_dyld_image_infos: __Request__task_register_dyld_image_infos_t,
    Request_task_unregister_dyld_image_infos: __Request__task_unregister_dyld_image_infos_t,
    Request_task_get_dyld_image_infos: __Request__task_get_dyld_image_infos_t,
    Request_task_register_dyld_shared_cache_image_info: __Request__task_register_dyld_shared_cache_image_info_t,
    Request_task_register_dyld_set_dyld_state: __Request__task_register_dyld_set_dyld_state_t,
    Request_task_register_dyld_get_process_state: __Request__task_register_dyld_get_process_state_t,
    Request_task_map_corpse_info_64: __Request__task_map_corpse_info_64_t,
    Request_task_inspect: __Request__task_inspect_t,
    Request_task_get_exc_guard_behavior: __Request__task_get_exc_guard_behavior_t,
    Request_task_set_exc_guard_behavior: __Request__task_set_exc_guard_behavior_t,
    Request_task_create_suid_cred: __Request__task_create_suid_cred_t,
    Request_task_dyld_process_info_notify_register: __Request__task_dyld_process_info_notify_register_t,
    Request_task_create_identity_token: __Request__task_create_identity_token_t,
    Request_task_identity_token_get_task_port: __Request__task_identity_token_get_task_port_t,
    Request_task_dyld_process_info_notify_deregister: __Request__task_dyld_process_info_notify_deregister_t,
    Request_task_get_exception_ports_info: __Request__task_get_exception_ports_info_t,
    Request_task_test_sync_upcall: __Request__task_test_sync_upcall_t,
    Request_task_set_corpse_forking_behavior: __Request__task_set_corpse_forking_behavior_t,
};
pub const __Reply__task_create_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    child_task: mach_msg_port_descriptor_t,
};
pub const __Reply__task_terminate_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_threads_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    act_list: mach_msg_ool_ports_descriptor_t,
    NDR: NDR_record_t,
    act_listCnt: mach_msg_type_number_t,
};
pub const __Reply__mach_ports_register_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_ports_lookup_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    init_port_set: mach_msg_ool_ports_descriptor_t,
    NDR: NDR_record_t,
    init_port_setCnt: mach_msg_type_number_t,
};
pub const __Reply__task_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    task_info_outCnt: mach_msg_type_number_t,
    task_info_out: [87]integer_t,
};
pub const __Reply__task_set_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_suspend_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_resume_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_get_special_port_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    special_port: mach_msg_port_descriptor_t,
};
pub const __Reply__task_set_special_port_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_create_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    child_act: mach_msg_port_descriptor_t,
};
pub const __Reply__thread_create_running_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    child_act: mach_msg_port_descriptor_t,
};
pub const __Reply__task_set_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_get_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    old_handlers: [32]mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    masksCnt: mach_msg_type_number_t,
    masks: [32]exception_mask_t,
    old_behaviors: [32]exception_behavior_t,
    old_flavors: [32]thread_state_flavor_t,
};
pub const __Reply__task_swap_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    old_handlers: [32]mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    masksCnt: mach_msg_type_number_t,
    masks: [32]exception_mask_t,
    old_behaviors: [32]exception_behavior_t,
    old_flavors: [32]thread_state_flavor_t,
};
pub const __Reply__lock_set_create_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    new_lock_set: mach_msg_port_descriptor_t,
};
pub const __Reply__lock_set_destroy_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__semaphore_create_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    semaphore: mach_msg_port_descriptor_t,
};
pub const __Reply__semaphore_destroy_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_policy_set_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_policy_get_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    policy_infoCnt: mach_msg_type_number_t,
    policy_info: [16]integer_t,
    get_default: boolean_t,
};
pub const __Reply__task_sample_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_policy_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_set_emulation_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_get_emulation_vector_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    emulation_vector: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    vector_start: c_int,
    emulation_vectorCnt: mach_msg_type_number_t,
};
pub const __Reply__task_set_emulation_vector_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_set_ras_pc_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_zone_info_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    names: mach_msg_ool_descriptor_t,
    info: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    namesCnt: mach_msg_type_number_t,
    infoCnt: mach_msg_type_number_t,
};
pub const __Reply__task_assign_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_assign_default_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_get_assignment_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    assigned_set: mach_msg_port_descriptor_t,
};
pub const __Reply__task_set_policy_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_get_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    old_stateCnt: mach_msg_type_number_t,
    old_state: [1296]natural_t,
};
pub const __Reply__task_set_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_set_phys_footprint_limit_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    old_limit: c_int,
};
pub const __Reply__task_suspend2_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    suspend_token: mach_msg_port_descriptor_t,
};
pub const __Reply__task_resume2_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_purgable_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    stats: task_purgable_info_t,
};
pub const __Reply__task_get_mach_voucher_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    voucher: mach_msg_port_descriptor_t,
};
pub const __Reply__task_set_mach_voucher_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_swap_mach_voucher_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    old_voucher: mach_msg_port_descriptor_t,
};
pub const __Reply__task_generate_corpse_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    corpse_task_port: mach_msg_port_descriptor_t,
};
pub const __Reply__task_map_corpse_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    kcd_addr_begin: vm_address_t,
    kcd_size: u32,
};
pub const __Reply__task_register_dyld_image_infos_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_unregister_dyld_image_infos_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_get_dyld_image_infos_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    dyld_images: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    dyld_imagesCnt: mach_msg_type_number_t,
};
pub const __Reply__task_register_dyld_shared_cache_image_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_register_dyld_set_dyld_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_register_dyld_get_process_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    dyld_process_state: dyld_kernel_process_info_t,
};
pub const __Reply__task_map_corpse_info_64_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    kcd_addr_begin: mach_vm_address_t,
    kcd_size: mach_vm_size_t,
};
pub const __Reply__task_inspect_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    info_outCnt: mach_msg_type_number_t,
    info_out: [4]integer_t,
};
pub const __Reply__task_get_exc_guard_behavior_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    behavior: task_exc_guard_behavior_t,
};
pub const __Reply__task_set_exc_guard_behavior_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_create_suid_cred_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    delegation: mach_msg_port_descriptor_t,
};
pub const __Reply__task_dyld_process_info_notify_register_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_create_identity_token_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    token: mach_msg_port_descriptor_t,
};
pub const __Reply__task_identity_token_get_task_port_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    task_port: mach_msg_port_descriptor_t,
};
pub const __Reply__task_dyld_process_info_notify_deregister_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_get_exception_ports_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    masksCnt: mach_msg_type_number_t,
    masks: [32]exception_mask_t,
    old_handlers_info: [32]exception_handler_info_t,
    old_behaviors: [32]exception_behavior_t,
    old_flavors: [32]thread_state_flavor_t,
};
pub const __Reply__task_test_sync_upcall_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__task_set_corpse_forking_behavior_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const union___ReplyUnion__task_subsystem = extern union {
    Reply_task_create: __Reply__task_create_t,
    Reply_task_terminate: __Reply__task_terminate_t,
    Reply_task_threads: __Reply__task_threads_t,
    Reply_mach_ports_register: __Reply__mach_ports_register_t,
    Reply_mach_ports_lookup: __Reply__mach_ports_lookup_t,
    Reply_task_info: __Reply__task_info_t,
    Reply_task_set_info: __Reply__task_set_info_t,
    Reply_task_suspend: __Reply__task_suspend_t,
    Reply_task_resume: __Reply__task_resume_t,
    Reply_task_get_special_port: __Reply__task_get_special_port_t,
    Reply_task_set_special_port: __Reply__task_set_special_port_t,
    Reply_thread_create: __Reply__thread_create_t,
    Reply_thread_create_running: __Reply__thread_create_running_t,
    Reply_task_set_exception_ports: __Reply__task_set_exception_ports_t,
    Reply_task_get_exception_ports: __Reply__task_get_exception_ports_t,
    Reply_task_swap_exception_ports: __Reply__task_swap_exception_ports_t,
    Reply_lock_set_create: __Reply__lock_set_create_t,
    Reply_lock_set_destroy: __Reply__lock_set_destroy_t,
    Reply_semaphore_create: __Reply__semaphore_create_t,
    Reply_semaphore_destroy: __Reply__semaphore_destroy_t,
    Reply_task_policy_set: __Reply__task_policy_set_t,
    Reply_task_policy_get: __Reply__task_policy_get_t,
    Reply_task_sample: __Reply__task_sample_t,
    Reply_task_policy: __Reply__task_policy_t,
    Reply_task_set_emulation: __Reply__task_set_emulation_t,
    Reply_task_get_emulation_vector: __Reply__task_get_emulation_vector_t,
    Reply_task_set_emulation_vector: __Reply__task_set_emulation_vector_t,
    Reply_task_set_ras_pc: __Reply__task_set_ras_pc_t,
    Reply_task_zone_info: __Reply__task_zone_info_t,
    Reply_task_assign: __Reply__task_assign_t,
    Reply_task_assign_default: __Reply__task_assign_default_t,
    Reply_task_get_assignment: __Reply__task_get_assignment_t,
    Reply_task_set_policy: __Reply__task_set_policy_t,
    Reply_task_get_state: __Reply__task_get_state_t,
    Reply_task_set_state: __Reply__task_set_state_t,
    Reply_task_set_phys_footprint_limit: __Reply__task_set_phys_footprint_limit_t,
    Reply_task_suspend2: __Reply__task_suspend2_t,
    Reply_task_resume2: __Reply__task_resume2_t,
    Reply_task_purgable_info: __Reply__task_purgable_info_t,
    Reply_task_get_mach_voucher: __Reply__task_get_mach_voucher_t,
    Reply_task_set_mach_voucher: __Reply__task_set_mach_voucher_t,
    Reply_task_swap_mach_voucher: __Reply__task_swap_mach_voucher_t,
    Reply_task_generate_corpse: __Reply__task_generate_corpse_t,
    Reply_task_map_corpse_info: __Reply__task_map_corpse_info_t,
    Reply_task_register_dyld_image_infos: __Reply__task_register_dyld_image_infos_t,
    Reply_task_unregister_dyld_image_infos: __Reply__task_unregister_dyld_image_infos_t,
    Reply_task_get_dyld_image_infos: __Reply__task_get_dyld_image_infos_t,
    Reply_task_register_dyld_shared_cache_image_info: __Reply__task_register_dyld_shared_cache_image_info_t,
    Reply_task_register_dyld_set_dyld_state: __Reply__task_register_dyld_set_dyld_state_t,
    Reply_task_register_dyld_get_process_state: __Reply__task_register_dyld_get_process_state_t,
    Reply_task_map_corpse_info_64: __Reply__task_map_corpse_info_64_t,
    Reply_task_inspect: __Reply__task_inspect_t,
    Reply_task_get_exc_guard_behavior: __Reply__task_get_exc_guard_behavior_t,
    Reply_task_set_exc_guard_behavior: __Reply__task_set_exc_guard_behavior_t,
    Reply_task_create_suid_cred: __Reply__task_create_suid_cred_t,
    Reply_task_dyld_process_info_notify_register: __Reply__task_dyld_process_info_notify_register_t,
    Reply_task_create_identity_token: __Reply__task_create_identity_token_t,
    Reply_task_identity_token_get_task_port: __Reply__task_identity_token_get_task_port_t,
    Reply_task_dyld_process_info_notify_deregister: __Reply__task_dyld_process_info_notify_deregister_t,
    Reply_task_get_exception_ports_info: __Reply__task_get_exception_ports_info_t,
    Reply_task_test_sync_upcall: __Reply__task_test_sync_upcall_t,
    Reply_task_set_corpse_forking_behavior: __Reply__task_set_corpse_forking_behavior_t,
};
pub extern fn thread_terminate(target_act: thread_act_t) kern_return_t;
pub extern fn act_get_state(target_act: thread_read_t, flavor: c_int, old_state: thread_state_t, old_stateCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn act_set_state(target_act: thread_act_t, flavor: c_int, new_state: thread_state_t, new_stateCnt: mach_msg_type_number_t) kern_return_t;
pub extern fn thread_get_state(target_act: thread_read_t, flavor: thread_state_flavor_t, old_state: thread_state_t, old_stateCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn thread_set_state(target_act: thread_act_t, flavor: thread_state_flavor_t, new_state: thread_state_t, new_stateCnt: mach_msg_type_number_t) kern_return_t;
pub extern fn thread_suspend(target_act: thread_read_t) kern_return_t;
pub extern fn thread_resume(target_act: thread_read_t) kern_return_t;
pub extern fn thread_abort(target_act: thread_act_t) kern_return_t;
pub extern fn thread_abort_safely(target_act: thread_act_t) kern_return_t;
pub extern fn thread_depress_abort(thread: thread_act_t) kern_return_t;
pub extern fn thread_get_special_port(thr_act: thread_inspect_t, which_port: c_int, special_port: [*c]mach_port_t) kern_return_t;
pub extern fn thread_set_special_port(thr_act: thread_act_t, which_port: c_int, special_port: mach_port_t) kern_return_t;
pub extern fn thread_info(target_act: thread_inspect_t, flavor: thread_flavor_t, thread_info_out: thread_info_t, thread_info_outCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn thread_set_exception_ports(thread: thread_act_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t) kern_return_t;
pub extern fn thread_get_exception_ports(thread: thread_act_t, exception_mask: exception_mask_t, masks: exception_mask_array_t, masksCnt: [*c]mach_msg_type_number_t, old_handlers: exception_handler_array_t, old_behaviors: exception_behavior_array_t, old_flavors: exception_flavor_array_t) kern_return_t;
pub extern fn thread_swap_exception_ports(thread: thread_act_t, exception_mask: exception_mask_t, new_port: mach_port_t, behavior: exception_behavior_t, new_flavor: thread_state_flavor_t, masks: exception_mask_array_t, masksCnt: [*c]mach_msg_type_number_t, old_handlers: exception_handler_array_t, old_behaviors: exception_behavior_array_t, old_flavors: exception_flavor_array_t) kern_return_t;
pub extern fn thread_policy(thr_act: thread_act_t, policy: policy_t, base: policy_base_t, baseCnt: mach_msg_type_number_t, set_limit: boolean_t) kern_return_t;
pub extern fn thread_policy_set(thread: thread_act_t, flavor: thread_policy_flavor_t, policy_info: thread_policy_t, policy_infoCnt: mach_msg_type_number_t) kern_return_t;
pub extern fn thread_policy_get(thread: thread_inspect_t, flavor: thread_policy_flavor_t, policy_info: thread_policy_t, policy_infoCnt: [*c]mach_msg_type_number_t, get_default: [*c]boolean_t) kern_return_t;
pub extern fn thread_sample(thread: thread_act_t, reply: mach_port_t) kern_return_t;
pub extern fn etap_trace_thread(target_act: thread_act_t, trace_status: boolean_t) kern_return_t;
pub extern fn thread_assign(thread: thread_act_t, new_set: processor_set_t) kern_return_t;
pub extern fn thread_assign_default(thread: thread_act_t) kern_return_t;
pub extern fn thread_get_assignment(thread: thread_inspect_t, assigned_set: [*c]processor_set_name_t) kern_return_t;
pub extern fn thread_set_policy(thr_act: thread_act_t, pset: processor_set_t, policy: policy_t, base: policy_base_t, baseCnt: mach_msg_type_number_t, limit: policy_limit_t, limitCnt: mach_msg_type_number_t) kern_return_t;
pub extern fn thread_get_mach_voucher(thr_act: thread_read_t, which: mach_voucher_selector_t, voucher: [*c]ipc_voucher_t) kern_return_t;
pub extern fn thread_set_mach_voucher(thr_act: thread_act_t, voucher: ipc_voucher_t) kern_return_t;
pub extern fn thread_swap_mach_voucher(thr_act: thread_act_t, new_voucher: ipc_voucher_t, old_voucher: [*c]ipc_voucher_t) kern_return_t;
pub extern fn thread_convert_thread_state(thread: thread_act_t, direction: c_int, flavor: thread_state_flavor_t, in_state: thread_state_t, in_stateCnt: mach_msg_type_number_t, out_state: thread_state_t, out_stateCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn thread_get_exception_ports_info(port: mach_port_t, exception_mask: exception_mask_t, masks: exception_mask_array_t, masksCnt: [*c]mach_msg_type_number_t, old_handlers_info: exception_handler_info_array_t, old_behaviors: exception_behavior_array_t, old_flavors: exception_flavor_array_t) kern_return_t;
pub const __Request__thread_terminate_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__act_get_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: c_int,
    old_stateCnt: mach_msg_type_number_t,
};
pub const __Request__act_set_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: c_int,
    new_stateCnt: mach_msg_type_number_t,
    new_state: [1296]natural_t,
};
pub const __Request__thread_get_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: thread_state_flavor_t,
    old_stateCnt: mach_msg_type_number_t,
};
pub const __Request__thread_set_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: thread_state_flavor_t,
    new_stateCnt: mach_msg_type_number_t,
    new_state: [1296]natural_t,
};
pub const __Request__thread_suspend_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__thread_resume_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__thread_abort_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__thread_abort_safely_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__thread_depress_abort_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__thread_get_special_port_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    which_port: c_int,
};
pub const __Request__thread_set_special_port_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    special_port: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    which_port: c_int,
};
pub const __Request__thread_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: thread_flavor_t,
    thread_info_outCnt: mach_msg_type_number_t,
};
pub const __Request__thread_set_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    new_port: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    exception_mask: exception_mask_t,
    behavior: exception_behavior_t,
    new_flavor: thread_state_flavor_t,
};
pub const __Request__thread_get_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    exception_mask: exception_mask_t,
};
pub const __Request__thread_swap_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    new_port: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    exception_mask: exception_mask_t,
    behavior: exception_behavior_t,
    new_flavor: thread_state_flavor_t,
};
pub const __Request__thread_policy_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    policy: policy_t,
    baseCnt: mach_msg_type_number_t,
    base: [5]integer_t,
    set_limit: boolean_t,
};
pub const __Request__thread_policy_set_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: thread_policy_flavor_t,
    policy_infoCnt: mach_msg_type_number_t,
    policy_info: [16]integer_t,
};
pub const __Request__thread_policy_get_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: thread_policy_flavor_t,
    policy_infoCnt: mach_msg_type_number_t,
    get_default: boolean_t,
};
pub const __Request__thread_sample_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    reply: mach_msg_port_descriptor_t,
};
pub const __Request__etap_trace_thread_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    trace_status: boolean_t,
};
pub const __Request__thread_assign_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    new_set: mach_msg_port_descriptor_t,
};
pub const __Request__thread_assign_default_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__thread_get_assignment_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__thread_set_policy_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    pset: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    policy: policy_t,
    baseCnt: mach_msg_type_number_t,
    base: [5]integer_t,
    limitCnt: mach_msg_type_number_t,
    limit: [1]integer_t,
};
pub const __Request__thread_get_mach_voucher_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    which: mach_voucher_selector_t,
};
pub const __Request__thread_set_mach_voucher_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    voucher: mach_msg_port_descriptor_t,
};
pub const __Request__thread_swap_mach_voucher_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    new_voucher: mach_msg_port_descriptor_t,
    old_voucher: mach_msg_port_descriptor_t,
};
pub const __Request__thread_convert_thread_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    direction: c_int,
    flavor: thread_state_flavor_t,
    in_stateCnt: mach_msg_type_number_t,
    in_state: [1296]natural_t,
    out_stateCnt: mach_msg_type_number_t,
};
pub const __Request__thread_get_exception_ports_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    exception_mask: exception_mask_t,
};
pub const union___RequestUnion__thread_act_subsystem = extern union {
    Request_thread_terminate: __Request__thread_terminate_t,
    Request_act_get_state: __Request__act_get_state_t,
    Request_act_set_state: __Request__act_set_state_t,
    Request_thread_get_state: __Request__thread_get_state_t,
    Request_thread_set_state: __Request__thread_set_state_t,
    Request_thread_suspend: __Request__thread_suspend_t,
    Request_thread_resume: __Request__thread_resume_t,
    Request_thread_abort: __Request__thread_abort_t,
    Request_thread_abort_safely: __Request__thread_abort_safely_t,
    Request_thread_depress_abort: __Request__thread_depress_abort_t,
    Request_thread_get_special_port: __Request__thread_get_special_port_t,
    Request_thread_set_special_port: __Request__thread_set_special_port_t,
    Request_thread_info: __Request__thread_info_t,
    Request_thread_set_exception_ports: __Request__thread_set_exception_ports_t,
    Request_thread_get_exception_ports: __Request__thread_get_exception_ports_t,
    Request_thread_swap_exception_ports: __Request__thread_swap_exception_ports_t,
    Request_thread_policy: __Request__thread_policy_t,
    Request_thread_policy_set: __Request__thread_policy_set_t,
    Request_thread_policy_get: __Request__thread_policy_get_t,
    Request_thread_sample: __Request__thread_sample_t,
    Request_etap_trace_thread: __Request__etap_trace_thread_t,
    Request_thread_assign: __Request__thread_assign_t,
    Request_thread_assign_default: __Request__thread_assign_default_t,
    Request_thread_get_assignment: __Request__thread_get_assignment_t,
    Request_thread_set_policy: __Request__thread_set_policy_t,
    Request_thread_get_mach_voucher: __Request__thread_get_mach_voucher_t,
    Request_thread_set_mach_voucher: __Request__thread_set_mach_voucher_t,
    Request_thread_swap_mach_voucher: __Request__thread_swap_mach_voucher_t,
    Request_thread_convert_thread_state: __Request__thread_convert_thread_state_t,
    Request_thread_get_exception_ports_info: __Request__thread_get_exception_ports_info_t,
};
pub const __Reply__thread_terminate_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__act_get_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    old_stateCnt: mach_msg_type_number_t,
    old_state: [1296]natural_t,
};
pub const __Reply__act_set_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_get_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    old_stateCnt: mach_msg_type_number_t,
    old_state: [1296]natural_t,
};
pub const __Reply__thread_set_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_suspend_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_resume_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_abort_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_abort_safely_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_depress_abort_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_get_special_port_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    special_port: mach_msg_port_descriptor_t,
};
pub const __Reply__thread_set_special_port_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    thread_info_outCnt: mach_msg_type_number_t,
    thread_info_out: [32]integer_t,
};
pub const __Reply__thread_set_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_get_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    old_handlers: [32]mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    masksCnt: mach_msg_type_number_t,
    masks: [32]exception_mask_t,
    old_behaviors: [32]exception_behavior_t,
    old_flavors: [32]thread_state_flavor_t,
};
pub const __Reply__thread_swap_exception_ports_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    old_handlers: [32]mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    masksCnt: mach_msg_type_number_t,
    masks: [32]exception_mask_t,
    old_behaviors: [32]exception_behavior_t,
    old_flavors: [32]thread_state_flavor_t,
};
pub const __Reply__thread_policy_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_policy_set_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_policy_get_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    policy_infoCnt: mach_msg_type_number_t,
    policy_info: [16]integer_t,
    get_default: boolean_t,
};
pub const __Reply__thread_sample_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__etap_trace_thread_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_assign_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_assign_default_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_get_assignment_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    assigned_set: mach_msg_port_descriptor_t,
};
pub const __Reply__thread_set_policy_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_get_mach_voucher_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    voucher: mach_msg_port_descriptor_t,
};
pub const __Reply__thread_set_mach_voucher_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__thread_swap_mach_voucher_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    old_voucher: mach_msg_port_descriptor_t,
};
pub const __Reply__thread_convert_thread_state_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    out_stateCnt: mach_msg_type_number_t,
    out_state: [1296]natural_t,
};
pub const __Reply__thread_get_exception_ports_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    masksCnt: mach_msg_type_number_t,
    masks: [32]exception_mask_t,
    old_handlers_info: [32]exception_handler_info_t,
    old_behaviors: [32]exception_behavior_t,
    old_flavors: [32]thread_state_flavor_t,
};
pub const union___ReplyUnion__thread_act_subsystem = extern union {
    Reply_thread_terminate: __Reply__thread_terminate_t,
    Reply_act_get_state: __Reply__act_get_state_t,
    Reply_act_set_state: __Reply__act_set_state_t,
    Reply_thread_get_state: __Reply__thread_get_state_t,
    Reply_thread_set_state: __Reply__thread_set_state_t,
    Reply_thread_suspend: __Reply__thread_suspend_t,
    Reply_thread_resume: __Reply__thread_resume_t,
    Reply_thread_abort: __Reply__thread_abort_t,
    Reply_thread_abort_safely: __Reply__thread_abort_safely_t,
    Reply_thread_depress_abort: __Reply__thread_depress_abort_t,
    Reply_thread_get_special_port: __Reply__thread_get_special_port_t,
    Reply_thread_set_special_port: __Reply__thread_set_special_port_t,
    Reply_thread_info: __Reply__thread_info_t,
    Reply_thread_set_exception_ports: __Reply__thread_set_exception_ports_t,
    Reply_thread_get_exception_ports: __Reply__thread_get_exception_ports_t,
    Reply_thread_swap_exception_ports: __Reply__thread_swap_exception_ports_t,
    Reply_thread_policy: __Reply__thread_policy_t,
    Reply_thread_policy_set: __Reply__thread_policy_set_t,
    Reply_thread_policy_get: __Reply__thread_policy_get_t,
    Reply_thread_sample: __Reply__thread_sample_t,
    Reply_etap_trace_thread: __Reply__etap_trace_thread_t,
    Reply_thread_assign: __Reply__thread_assign_t,
    Reply_thread_assign_default: __Reply__thread_assign_default_t,
    Reply_thread_get_assignment: __Reply__thread_get_assignment_t,
    Reply_thread_set_policy: __Reply__thread_set_policy_t,
    Reply_thread_get_mach_voucher: __Reply__thread_get_mach_voucher_t,
    Reply_thread_set_mach_voucher: __Reply__thread_set_mach_voucher_t,
    Reply_thread_swap_mach_voucher: __Reply__thread_swap_mach_voucher_t,
    Reply_thread_convert_thread_state: __Reply__thread_convert_thread_state_t,
    Reply_thread_get_exception_ports_info: __Reply__thread_get_exception_ports_info_t,
};
pub extern fn vm_region(target_task: vm_map_read_t, address: [*c]vm_address_t, size: [*c]vm_size_t, flavor: vm_region_flavor_t, info: vm_region_info_t, infoCnt: [*c]mach_msg_type_number_t, object_name: [*c]mach_port_t) kern_return_t;
pub extern fn vm_allocate(target_task: vm_map_t, address: [*c]vm_address_t, size: vm_size_t, flags: c_int) kern_return_t;
pub extern fn vm_deallocate(target_task: vm_map_t, address: vm_address_t, size: vm_size_t) kern_return_t;
pub extern fn vm_protect(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, set_maximum: boolean_t, new_protection: vm_prot_t) kern_return_t;
pub extern fn vm_inherit(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, new_inheritance: vm_inherit_t) kern_return_t;
pub extern fn vm_read(target_task: vm_map_read_t, address: vm_address_t, size: vm_size_t, data: [*c]vm_offset_t, dataCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn vm_read_list(target_task: vm_map_read_t, data_list: [*c]struct_vm_read_entry, count: natural_t) kern_return_t;
pub extern fn vm_write(target_task: vm_map_t, address: vm_address_t, data: vm_offset_t, dataCnt: mach_msg_type_number_t) kern_return_t;
pub extern fn vm_copy(target_task: vm_map_t, source_address: vm_address_t, size: vm_size_t, dest_address: vm_address_t) kern_return_t;
pub extern fn vm_read_overwrite(target_task: vm_map_read_t, address: vm_address_t, size: vm_size_t, data: vm_address_t, outsize: [*c]vm_size_t) kern_return_t;
pub extern fn vm_msync(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, sync_flags: vm_sync_t) kern_return_t;
pub extern fn vm_behavior_set(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, new_behavior: vm_behavior_t) kern_return_t;
pub extern fn vm_map(target_task: vm_map_t, address: [*c]vm_address_t, size: vm_size_t, mask: vm_address_t, flags: c_int, object: mem_entry_name_port_t, offset: vm_offset_t, copy: boolean_t, cur_protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t) kern_return_t;
pub extern fn vm_machine_attribute(target_task: vm_map_t, address: vm_address_t, size: vm_size_t, attribute: vm_machine_attribute_t, value: [*c]vm_machine_attribute_val_t) kern_return_t;
pub extern fn vm_remap(target_task: vm_map_t, target_address: [*c]vm_address_t, size: vm_size_t, mask: vm_address_t, flags: c_int, src_task: vm_map_t, src_address: vm_address_t, copy: boolean_t, cur_protection: [*c]vm_prot_t, max_protection: [*c]vm_prot_t, inheritance: vm_inherit_t) kern_return_t;
pub extern fn task_wire(target_task: vm_map_t, must_wire: boolean_t) kern_return_t;
pub extern fn mach_make_memory_entry(target_task: vm_map_t, size: [*c]vm_size_t, offset: vm_offset_t, permission: vm_prot_t, object_handle: [*c]mem_entry_name_port_t, parent_entry: mem_entry_name_port_t) kern_return_t;
pub extern fn vm_map_page_query(target_map: vm_map_read_t, offset: vm_offset_t, disposition: [*c]integer_t, ref_count: [*c]integer_t) kern_return_t;
pub extern fn mach_vm_region_info(task: vm_map_read_t, address: vm_address_t, region: [*c]vm_info_region_t, objects: [*c]vm_info_object_array_t, objectsCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn vm_mapped_pages_info(task: vm_map_read_t, pages: [*c]page_address_array_t, pagesCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn vm_region_recurse(target_task: vm_map_read_t, address: [*c]vm_address_t, size: [*c]vm_size_t, nesting_depth: [*c]natural_t, info: vm_region_recurse_info_t, infoCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn vm_region_recurse_64(target_task: vm_map_read_t, address: [*c]vm_address_t, size: [*c]vm_size_t, nesting_depth: [*c]natural_t, info: vm_region_recurse_info_t, infoCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn mach_vm_region_info_64(task: vm_map_read_t, address: vm_address_t, region: [*c]vm_info_region_64_t, objects: [*c]vm_info_object_array_t, objectsCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn vm_region_64(target_task: vm_map_read_t, address: [*c]vm_address_t, size: [*c]vm_size_t, flavor: vm_region_flavor_t, info: vm_region_info_t, infoCnt: [*c]mach_msg_type_number_t, object_name: [*c]mach_port_t) kern_return_t;
pub extern fn mach_make_memory_entry_64(target_task: vm_map_t, size: [*c]memory_object_size_t, offset: memory_object_offset_t, permission: vm_prot_t, object_handle: [*c]mach_port_t, parent_entry: mem_entry_name_port_t) kern_return_t;
pub extern fn vm_map_64(target_task: vm_map_t, address: [*c]vm_address_t, size: vm_size_t, mask: vm_address_t, flags: c_int, object: mem_entry_name_port_t, offset: memory_object_offset_t, copy: boolean_t, cur_protection: vm_prot_t, max_protection: vm_prot_t, inheritance: vm_inherit_t) kern_return_t;
pub extern fn vm_purgable_control(target_task: vm_map_t, address: vm_address_t, control: vm_purgable_t, state: [*c]c_int) kern_return_t;
pub extern fn vm_map_exec_lockdown(target_task: vm_map_t) kern_return_t;
pub extern fn vm_remap_new(target_task: vm_map_t, target_address: [*c]vm_address_t, size: vm_size_t, mask: vm_address_t, flags: c_int, src_task: vm_map_read_t, src_address: vm_address_t, copy: boolean_t, cur_protection: [*c]vm_prot_t, max_protection: [*c]vm_prot_t, inheritance: vm_inherit_t) kern_return_t;
pub const __Request__vm_region_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    flavor: vm_region_flavor_t,
    infoCnt: mach_msg_type_number_t,
};
pub const __Request__vm_allocate_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    size: vm_size_t,
    flags: c_int,
};
pub const __Request__vm_deallocate_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    size: vm_size_t,
};
pub const __Request__vm_protect_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    size: vm_size_t,
    set_maximum: boolean_t,
    new_protection: vm_prot_t,
};
pub const __Request__vm_inherit_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    size: vm_size_t,
    new_inheritance: vm_inherit_t,
};
pub const __Request__vm_read_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    size: vm_size_t,
};
pub const __Request__vm_read_list_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    data_list: vm_read_entry_t,
    count: natural_t,
};
pub const __Request__vm_write_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    data: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    dataCnt: mach_msg_type_number_t,
};
pub const __Request__vm_copy_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    source_address: vm_address_t,
    size: vm_size_t,
    dest_address: vm_address_t,
};
pub const __Request__vm_read_overwrite_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    size: vm_size_t,
    data: vm_address_t,
};
pub const __Request__vm_msync_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    size: vm_size_t,
    sync_flags: vm_sync_t,
};
pub const __Request__vm_behavior_set_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    size: vm_size_t,
    new_behavior: vm_behavior_t,
};
pub const __Request__vm_map_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    object: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    size: vm_size_t,
    mask: vm_address_t,
    flags: c_int,
    offset: vm_offset_t,
    copy: boolean_t,
    cur_protection: vm_prot_t,
    max_protection: vm_prot_t,
    inheritance: vm_inherit_t,
};
pub const __Request__vm_machine_attribute_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    size: vm_size_t,
    attribute: vm_machine_attribute_t,
    value: vm_machine_attribute_val_t,
};
pub const __Request__vm_remap_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    src_task: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    target_address: vm_address_t,
    size: vm_size_t,
    mask: vm_address_t,
    flags: c_int,
    src_address: vm_address_t,
    copy: boolean_t,
    inheritance: vm_inherit_t,
};
pub const __Request__task_wire_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    must_wire: boolean_t,
};
pub const __Request__mach_make_memory_entry_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    parent_entry: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    size: vm_size_t,
    offset: vm_offset_t,
    permission: vm_prot_t,
};
pub const __Request__vm_map_page_query_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    offset: vm_offset_t,
};
pub const __Request__mach_vm_region_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    address: vm_address_t,
};
pub const __Request__vm_mapped_pages_info_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__vm_region_recurse_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    nesting_depth: natural_t,
    infoCnt: mach_msg_type_number_t,
};
pub const __Request__vm_region_recurse_64_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    nesting_depth: natural_t,
    infoCnt: mach_msg_type_number_t,
};
pub const __Request__mach_vm_region_info_64_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    address: vm_address_t,
};
pub const __Request__vm_region_64_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    flavor: vm_region_flavor_t,
    infoCnt: mach_msg_type_number_t,
};
pub const __Request__mach_make_memory_entry_64_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    parent_entry: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    size: memory_object_size_t,
    offset: memory_object_offset_t,
    permission: vm_prot_t,
};
pub const __Request__vm_map_64_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    object: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    size: vm_size_t,
    mask: vm_address_t,
    flags: c_int,
    offset: memory_object_offset_t,
    copy: boolean_t,
    cur_protection: vm_prot_t,
    max_protection: vm_prot_t,
    inheritance: vm_inherit_t,
};
pub const __Request__vm_purgable_control_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    control: vm_purgable_t,
    state: c_int,
};
pub const __Request__vm_map_exec_lockdown_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__vm_remap_new_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    src_task: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    target_address: vm_address_t,
    size: vm_size_t,
    mask: vm_address_t,
    flags: c_int,
    src_address: vm_address_t,
    copy: boolean_t,
    cur_protection: vm_prot_t,
    max_protection: vm_prot_t,
    inheritance: vm_inherit_t,
};
pub const union___RequestUnion__vm_map_subsystem = extern union {
    Request_vm_region: __Request__vm_region_t,
    Request_vm_allocate: __Request__vm_allocate_t,
    Request_vm_deallocate: __Request__vm_deallocate_t,
    Request_vm_protect: __Request__vm_protect_t,
    Request_vm_inherit: __Request__vm_inherit_t,
    Request_vm_read: __Request__vm_read_t,
    Request_vm_read_list: __Request__vm_read_list_t,
    Request_vm_write: __Request__vm_write_t,
    Request_vm_copy: __Request__vm_copy_t,
    Request_vm_read_overwrite: __Request__vm_read_overwrite_t,
    Request_vm_msync: __Request__vm_msync_t,
    Request_vm_behavior_set: __Request__vm_behavior_set_t,
    Request_vm_map: __Request__vm_map_t,
    Request_vm_machine_attribute: __Request__vm_machine_attribute_t,
    Request_vm_remap: __Request__vm_remap_t,
    Request_task_wire: __Request__task_wire_t,
    Request_mach_make_memory_entry: __Request__mach_make_memory_entry_t,
    Request_vm_map_page_query: __Request__vm_map_page_query_t,
    Request_mach_vm_region_info: __Request__mach_vm_region_info_t,
    Request_vm_mapped_pages_info: __Request__vm_mapped_pages_info_t,
    Request_vm_region_recurse: __Request__vm_region_recurse_t,
    Request_vm_region_recurse_64: __Request__vm_region_recurse_64_t,
    Request_mach_vm_region_info_64: __Request__mach_vm_region_info_64_t,
    Request_vm_region_64: __Request__vm_region_64_t,
    Request_mach_make_memory_entry_64: __Request__mach_make_memory_entry_64_t,
    Request_vm_map_64: __Request__vm_map_64_t,
    Request_vm_purgable_control: __Request__vm_purgable_control_t,
    Request_vm_map_exec_lockdown: __Request__vm_map_exec_lockdown_t,
    Request_vm_remap_new: __Request__vm_remap_new_t,
};
pub const __Reply__vm_region_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    object_name: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    size: vm_size_t,
    infoCnt: mach_msg_type_number_t,
    info: [10]c_int,
};
pub const __Reply__vm_allocate_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    address: vm_address_t,
};
pub const __Reply__vm_deallocate_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__vm_protect_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__vm_inherit_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__vm_read_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    data: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    dataCnt: mach_msg_type_number_t,
};
pub const __Reply__vm_read_list_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    data_list: vm_read_entry_t,
};
pub const __Reply__vm_write_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__vm_copy_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__vm_read_overwrite_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    outsize: vm_size_t,
};
pub const __Reply__vm_msync_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__vm_behavior_set_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__vm_map_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    address: vm_address_t,
};
pub const __Reply__vm_machine_attribute_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    value: vm_machine_attribute_val_t,
};
pub const __Reply__vm_remap_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    target_address: vm_address_t,
    cur_protection: vm_prot_t,
    max_protection: vm_prot_t,
};
pub const __Reply__task_wire_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_make_memory_entry_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    object_handle: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    size: vm_size_t,
};
pub const __Reply__vm_map_page_query_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    disposition: integer_t,
    ref_count: integer_t,
};
pub const __Reply__mach_vm_region_info_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    objects: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    region: vm_info_region_t,
    objectsCnt: mach_msg_type_number_t,
};
pub const __Reply__vm_mapped_pages_info_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    pages: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    pagesCnt: mach_msg_type_number_t,
};
pub const __Reply__vm_region_recurse_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    address: vm_address_t,
    size: vm_size_t,
    nesting_depth: natural_t,
    infoCnt: mach_msg_type_number_t,
    info: [19]c_int,
};
pub const __Reply__vm_region_recurse_64_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    address: vm_address_t,
    size: vm_size_t,
    nesting_depth: natural_t,
    infoCnt: mach_msg_type_number_t,
    info: [19]c_int,
};
pub const __Reply__mach_vm_region_info_64_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    objects: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    region: vm_info_region_64_t,
    objectsCnt: mach_msg_type_number_t,
};
pub const __Reply__vm_region_64_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    object_name: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    address: vm_address_t,
    size: vm_size_t,
    infoCnt: mach_msg_type_number_t,
    info: [10]c_int,
};
pub const __Reply__mach_make_memory_entry_64_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    object_handle: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    size: memory_object_size_t,
};
pub const __Reply__vm_map_64_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    address: vm_address_t,
};
pub const __Reply__vm_purgable_control_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    state: c_int,
};
pub const __Reply__vm_map_exec_lockdown_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__vm_remap_new_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    target_address: vm_address_t,
    cur_protection: vm_prot_t,
    max_protection: vm_prot_t,
};
pub const union___ReplyUnion__vm_map_subsystem = extern union {
    Reply_vm_region: __Reply__vm_region_t,
    Reply_vm_allocate: __Reply__vm_allocate_t,
    Reply_vm_deallocate: __Reply__vm_deallocate_t,
    Reply_vm_protect: __Reply__vm_protect_t,
    Reply_vm_inherit: __Reply__vm_inherit_t,
    Reply_vm_read: __Reply__vm_read_t,
    Reply_vm_read_list: __Reply__vm_read_list_t,
    Reply_vm_write: __Reply__vm_write_t,
    Reply_vm_copy: __Reply__vm_copy_t,
    Reply_vm_read_overwrite: __Reply__vm_read_overwrite_t,
    Reply_vm_msync: __Reply__vm_msync_t,
    Reply_vm_behavior_set: __Reply__vm_behavior_set_t,
    Reply_vm_map: __Reply__vm_map_t,
    Reply_vm_machine_attribute: __Reply__vm_machine_attribute_t,
    Reply_vm_remap: __Reply__vm_remap_t,
    Reply_task_wire: __Reply__task_wire_t,
    Reply_mach_make_memory_entry: __Reply__mach_make_memory_entry_t,
    Reply_vm_map_page_query: __Reply__vm_map_page_query_t,
    Reply_mach_vm_region_info: __Reply__mach_vm_region_info_t,
    Reply_vm_mapped_pages_info: __Reply__vm_mapped_pages_info_t,
    Reply_vm_region_recurse: __Reply__vm_region_recurse_t,
    Reply_vm_region_recurse_64: __Reply__vm_region_recurse_64_t,
    Reply_mach_vm_region_info_64: __Reply__mach_vm_region_info_64_t,
    Reply_vm_region_64: __Reply__vm_region_64_t,
    Reply_mach_make_memory_entry_64: __Reply__mach_make_memory_entry_64_t,
    Reply_vm_map_64: __Reply__vm_map_64_t,
    Reply_vm_purgable_control: __Reply__vm_purgable_control_t,
    Reply_vm_map_exec_lockdown: __Reply__vm_map_exec_lockdown_t,
    Reply_vm_remap_new: __Reply__vm_remap_new_t,
};
pub extern fn mach_port_names(task: ipc_space_t, names: [*c]mach_port_name_array_t, namesCnt: [*c]mach_msg_type_number_t, types: [*c]mach_port_type_array_t, typesCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn mach_port_type(task: ipc_space_t, name: mach_port_name_t, ptype: [*c]mach_port_type_t) kern_return_t;
pub extern fn mach_port_rename(task: ipc_space_t, old_name: mach_port_name_t, new_name: mach_port_name_t) kern_return_t;
pub extern fn mach_port_allocate_name(task: ipc_space_t, right: mach_port_right_t, name: mach_port_name_t) kern_return_t;
pub extern fn mach_port_allocate(task: ipc_space_t, right: mach_port_right_t, name: [*c]mach_port_name_t) kern_return_t;
pub extern fn mach_port_destroy(task: ipc_space_t, name: mach_port_name_t) kern_return_t;
pub extern fn mach_port_deallocate(task: ipc_space_t, name: mach_port_name_t) kern_return_t;
pub extern fn mach_port_get_refs(task: ipc_space_t, name: mach_port_name_t, right: mach_port_right_t, refs: [*c]mach_port_urefs_t) kern_return_t;
pub extern fn mach_port_mod_refs(task: ipc_space_t, name: mach_port_name_t, right: mach_port_right_t, delta: mach_port_delta_t) kern_return_t;
pub extern fn mach_port_peek(task: ipc_space_t, name: mach_port_name_t, trailer_type: mach_msg_trailer_type_t, request_seqnop: [*c]mach_port_seqno_t, msg_sizep: [*c]mach_msg_size_t, msg_idp: [*c]mach_msg_id_t, trailer_infop: mach_msg_trailer_info_t, trailer_infopCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn mach_port_set_mscount(task: ipc_space_t, name: mach_port_name_t, mscount: mach_port_mscount_t) kern_return_t;
pub extern fn mach_port_get_set_status(task: ipc_space_read_t, name: mach_port_name_t, members: [*c]mach_port_name_array_t, membersCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn mach_port_move_member(task: ipc_space_t, member: mach_port_name_t, after: mach_port_name_t) kern_return_t;
pub extern fn mach_port_request_notification(task: ipc_space_t, name: mach_port_name_t, msgid: mach_msg_id_t, sync: mach_port_mscount_t, notify: mach_port_t, notifyPoly: mach_msg_type_name_t, previous: [*c]mach_port_t) kern_return_t;
pub extern fn mach_port_insert_right(task: ipc_space_t, name: mach_port_name_t, poly: mach_port_t, polyPoly: mach_msg_type_name_t) kern_return_t;
pub extern fn mach_port_extract_right(task: ipc_space_t, name: mach_port_name_t, msgt_name: mach_msg_type_name_t, poly: [*c]mach_port_t, polyPoly: [*c]mach_msg_type_name_t) kern_return_t;
pub extern fn mach_port_set_seqno(task: ipc_space_t, name: mach_port_name_t, seqno: mach_port_seqno_t) kern_return_t;
pub extern fn mach_port_get_attributes(task: ipc_space_read_t, name: mach_port_name_t, flavor: mach_port_flavor_t, port_info_out: mach_port_info_t, port_info_outCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn mach_port_set_attributes(task: ipc_space_t, name: mach_port_name_t, flavor: mach_port_flavor_t, port_info: mach_port_info_t, port_infoCnt: mach_msg_type_number_t) kern_return_t;
pub extern fn mach_port_allocate_qos(task: ipc_space_t, right: mach_port_right_t, qos: ?*mach_port_qos_t, name: [*c]mach_port_name_t) kern_return_t;
pub extern fn mach_port_allocate_full(task: ipc_space_t, right: mach_port_right_t, proto: mach_port_t, qos: ?*mach_port_qos_t, name: [*c]mach_port_name_t) kern_return_t;
pub extern fn task_set_port_space(task: ipc_space_t, table_entries: c_int) kern_return_t;
pub extern fn mach_port_get_srights(task: ipc_space_t, name: mach_port_name_t, srights: [*c]mach_port_rights_t) kern_return_t;
pub extern fn mach_port_space_info(space: ipc_space_read_t, space_info: [*c]ipc_info_space_t, table_info: [*c]ipc_info_name_array_t, table_infoCnt: [*c]mach_msg_type_number_t, tree_info: [*c]ipc_info_tree_name_array_t, tree_infoCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn mach_port_dnrequest_info(task: ipc_space_t, name: mach_port_name_t, dnr_total: [*c]c_uint, dnr_used: [*c]c_uint) kern_return_t;
pub extern fn mach_port_kernel_object(task: ipc_space_read_t, name: mach_port_name_t, object_type: [*c]c_uint, object_addr: [*c]c_uint) kern_return_t;
pub extern fn mach_port_insert_member(task: ipc_space_t, name: mach_port_name_t, pset: mach_port_name_t) kern_return_t;
pub extern fn mach_port_extract_member(task: ipc_space_t, name: mach_port_name_t, pset: mach_port_name_t) kern_return_t;
pub extern fn mach_port_get_context(task: ipc_space_read_t, name: mach_port_name_t, context: [*c]mach_port_context_t) kern_return_t;
pub extern fn mach_port_set_context(task: ipc_space_t, name: mach_port_name_t, context: mach_port_context_t) kern_return_t;
pub extern fn mach_port_kobject(task: ipc_space_read_t, name: mach_port_name_t, object_type: [*c]natural_t, object_addr: [*c]mach_vm_address_t) kern_return_t;
pub extern fn mach_port_construct(task: ipc_space_t, options: mach_port_options_ptr_t, context: mach_port_context_t, name: [*c]mach_port_name_t) kern_return_t;
pub extern fn mach_port_destruct(task: ipc_space_t, name: mach_port_name_t, srdelta: mach_port_delta_t, guard: mach_port_context_t) kern_return_t;
pub extern fn mach_port_guard(task: ipc_space_t, name: mach_port_name_t, guard: mach_port_context_t, strict: boolean_t) kern_return_t;
pub extern fn mach_port_unguard(task: ipc_space_t, name: mach_port_name_t, guard: mach_port_context_t) kern_return_t;
pub extern fn mach_port_space_basic_info(task: ipc_space_inspect_t, basic_info: [*c]ipc_info_space_basic_t) kern_return_t;
pub extern fn mach_port_guard_with_flags(task: ipc_space_t, name: mach_port_name_t, guard: mach_port_context_t, flags: u64) kern_return_t;
pub extern fn mach_port_swap_guard(task: ipc_space_t, name: mach_port_name_t, old_guard: mach_port_context_t, new_guard: mach_port_context_t) kern_return_t;
pub extern fn mach_port_kobject_description(task: ipc_space_read_t, name: mach_port_name_t, object_type: [*c]natural_t, object_addr: [*c]mach_vm_address_t, description: [*c]u8) kern_return_t;
pub extern fn mach_port_is_connection_for_service(task: ipc_space_t, connection_port: mach_port_name_t, service_port: mach_port_name_t, filter_policy_id: [*c]u64) kern_return_t;
pub extern fn mach_port_get_service_port_info(task: ipc_space_read_t, name: mach_port_name_t, sp_info_out: [*c]mach_service_port_info_data_t) kern_return_t;
pub extern fn mach_port_assert_attributes(task: ipc_space_t, name: mach_port_name_t, flavor: mach_port_flavor_t, info: mach_port_info_t, infoCnt: mach_msg_type_number_t) kern_return_t;
pub const __Request__mach_port_names_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__mach_port_type_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
};
pub const __Request__mach_port_rename_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    old_name: mach_port_name_t,
    new_name: mach_port_name_t,
};
pub const __Request__mach_port_allocate_name_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    right: mach_port_right_t,
    name: mach_port_name_t,
};
pub const __Request__mach_port_allocate_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    right: mach_port_right_t,
};
pub const __Request__mach_port_destroy_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
};
pub const __Request__mach_port_deallocate_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
};
pub const __Request__mach_port_get_refs_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    right: mach_port_right_t,
};
pub const __Request__mach_port_mod_refs_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    right: mach_port_right_t,
    delta: mach_port_delta_t,
};
pub const __Request__mach_port_peek_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    trailer_type: mach_msg_trailer_type_t,
    request_seqnop: mach_port_seqno_t,
    trailer_infopCnt: mach_msg_type_number_t,
};
pub const __Request__mach_port_set_mscount_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    mscount: mach_port_mscount_t,
};
pub const __Request__mach_port_get_set_status_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
};
pub const __Request__mach_port_move_member_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    member: mach_port_name_t,
    after: mach_port_name_t,
};
pub const __Request__mach_port_request_notification_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    notify: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    msgid: mach_msg_id_t,
    sync: mach_port_mscount_t,
};
pub const __Request__mach_port_insert_right_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    poly: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
};
pub const __Request__mach_port_extract_right_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    msgt_name: mach_msg_type_name_t,
};
pub const __Request__mach_port_set_seqno_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    seqno: mach_port_seqno_t,
};
pub const __Request__mach_port_get_attributes_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    flavor: mach_port_flavor_t,
    port_info_outCnt: mach_msg_type_number_t,
};
pub const __Request__mach_port_set_attributes_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    flavor: mach_port_flavor_t,
    port_infoCnt: mach_msg_type_number_t,
    port_info: [17]integer_t,
};
pub const __Request__mach_port_allocate_qos_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    right: mach_port_right_t,
    qos: mach_port_qos_t,
};
pub const __Request__mach_port_allocate_full_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    proto: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    right: mach_port_right_t,
    qos: mach_port_qos_t,
    name: mach_port_name_t,
};
pub const __Request__task_set_port_space_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    table_entries: c_int,
};
pub const __Request__mach_port_get_srights_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
};
pub const __Request__mach_port_space_info_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__mach_port_dnrequest_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
};
pub const __Request__mach_port_kernel_object_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
};
pub const __Request__mach_port_insert_member_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    pset: mach_port_name_t,
};
pub const __Request__mach_port_extract_member_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    pset: mach_port_name_t,
};
pub const __Request__mach_port_get_context_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
};
pub const __Request__mach_port_set_context_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    context: mach_port_context_t,
};
pub const __Request__mach_port_kobject_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
};
pub const __Request__mach_port_construct_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    options: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    context: mach_port_context_t,
};
pub const __Request__mach_port_destruct_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    srdelta: mach_port_delta_t,
    guard: mach_port_context_t,
};
pub const __Request__mach_port_guard_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    guard: mach_port_context_t,
    strict: boolean_t,
};
pub const __Request__mach_port_unguard_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    guard: mach_port_context_t,
};
pub const __Request__mach_port_space_basic_info_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__mach_port_guard_with_flags_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    guard: mach_port_context_t,
    flags: u64,
};
pub const __Request__mach_port_swap_guard_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    old_guard: mach_port_context_t,
    new_guard: mach_port_context_t,
};
pub const __Request__mach_port_kobject_description_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
};
pub const __Request__mach_port_is_connection_for_service_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    connection_port: mach_port_name_t,
    service_port: mach_port_name_t,
};
pub const __Request__mach_port_get_service_port_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
};
pub const __Request__mach_port_assert_attributes_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_port_name_t,
    flavor: mach_port_flavor_t,
    infoCnt: mach_msg_type_number_t,
    info: [17]integer_t,
};
pub const union___RequestUnion__mach_port_subsystem = extern union {
    Request_mach_port_names: __Request__mach_port_names_t,
    Request_mach_port_type: __Request__mach_port_type_t,
    Request_mach_port_rename: __Request__mach_port_rename_t,
    Request_mach_port_allocate_name: __Request__mach_port_allocate_name_t,
    Request_mach_port_allocate: __Request__mach_port_allocate_t,
    Request_mach_port_destroy: __Request__mach_port_destroy_t,
    Request_mach_port_deallocate: __Request__mach_port_deallocate_t,
    Request_mach_port_get_refs: __Request__mach_port_get_refs_t,
    Request_mach_port_mod_refs: __Request__mach_port_mod_refs_t,
    Request_mach_port_peek: __Request__mach_port_peek_t,
    Request_mach_port_set_mscount: __Request__mach_port_set_mscount_t,
    Request_mach_port_get_set_status: __Request__mach_port_get_set_status_t,
    Request_mach_port_move_member: __Request__mach_port_move_member_t,
    Request_mach_port_request_notification: __Request__mach_port_request_notification_t,
    Request_mach_port_insert_right: __Request__mach_port_insert_right_t,
    Request_mach_port_extract_right: __Request__mach_port_extract_right_t,
    Request_mach_port_set_seqno: __Request__mach_port_set_seqno_t,
    Request_mach_port_get_attributes: __Request__mach_port_get_attributes_t,
    Request_mach_port_set_attributes: __Request__mach_port_set_attributes_t,
    Request_mach_port_allocate_qos: __Request__mach_port_allocate_qos_t,
    Request_mach_port_allocate_full: __Request__mach_port_allocate_full_t,
    Request_task_set_port_space: __Request__task_set_port_space_t,
    Request_mach_port_get_srights: __Request__mach_port_get_srights_t,
    Request_mach_port_space_info: __Request__mach_port_space_info_t,
    Request_mach_port_dnrequest_info: __Request__mach_port_dnrequest_info_t,
    Request_mach_port_kernel_object: __Request__mach_port_kernel_object_t,
    Request_mach_port_insert_member: __Request__mach_port_insert_member_t,
    Request_mach_port_extract_member: __Request__mach_port_extract_member_t,
    Request_mach_port_get_context: __Request__mach_port_get_context_t,
    Request_mach_port_set_context: __Request__mach_port_set_context_t,
    Request_mach_port_kobject: __Request__mach_port_kobject_t,
    Request_mach_port_construct: __Request__mach_port_construct_t,
    Request_mach_port_destruct: __Request__mach_port_destruct_t,
    Request_mach_port_guard: __Request__mach_port_guard_t,
    Request_mach_port_unguard: __Request__mach_port_unguard_t,
    Request_mach_port_space_basic_info: __Request__mach_port_space_basic_info_t,
    Request_mach_port_guard_with_flags: __Request__mach_port_guard_with_flags_t,
    Request_mach_port_swap_guard: __Request__mach_port_swap_guard_t,
    Request_mach_port_kobject_description: __Request__mach_port_kobject_description_t,
    Request_mach_port_is_connection_for_service: __Request__mach_port_is_connection_for_service_t,
    Request_mach_port_get_service_port_info: __Request__mach_port_get_service_port_info_t,
    Request_mach_port_assert_attributes: __Request__mach_port_assert_attributes_t,
};
pub const __Reply__mach_port_names_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    names: mach_msg_ool_descriptor_t,
    types: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    namesCnt: mach_msg_type_number_t,
    typesCnt: mach_msg_type_number_t,
};
pub const __Reply__mach_port_type_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    ptype: mach_port_type_t,
};
pub const __Reply__mach_port_rename_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_allocate_name_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_allocate_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    name: mach_port_name_t,
};
pub const __Reply__mach_port_destroy_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_deallocate_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_get_refs_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    refs: mach_port_urefs_t,
};
pub const __Reply__mach_port_mod_refs_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_peek_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    request_seqnop: mach_port_seqno_t,
    msg_sizep: mach_msg_size_t,
    msg_idp: mach_msg_id_t,
    trailer_infopCnt: mach_msg_type_number_t,
    trailer_infop: [68]u8,
};
pub const __Reply__mach_port_set_mscount_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_get_set_status_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    members: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    membersCnt: mach_msg_type_number_t,
};
pub const __Reply__mach_port_move_member_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_request_notification_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    previous: mach_msg_port_descriptor_t,
};
pub const __Reply__mach_port_insert_right_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_extract_right_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    poly: mach_msg_port_descriptor_t,
};
pub const __Reply__mach_port_set_seqno_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_get_attributes_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    port_info_outCnt: mach_msg_type_number_t,
    port_info_out: [17]integer_t,
};
pub const __Reply__mach_port_set_attributes_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_allocate_qos_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    qos: mach_port_qos_t,
    name: mach_port_name_t,
};
pub const __Reply__mach_port_allocate_full_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    qos: mach_port_qos_t,
    name: mach_port_name_t,
};
pub const __Reply__task_set_port_space_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_get_srights_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    srights: mach_port_rights_t,
};
pub const __Reply__mach_port_space_info_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    table_info: mach_msg_ool_descriptor_t,
    tree_info: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    space_info: ipc_info_space_t,
    table_infoCnt: mach_msg_type_number_t,
    tree_infoCnt: mach_msg_type_number_t,
};
pub const __Reply__mach_port_dnrequest_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    dnr_total: c_uint,
    dnr_used: c_uint,
};
pub const __Reply__mach_port_kernel_object_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    object_type: c_uint,
    object_addr: c_uint,
};
pub const __Reply__mach_port_insert_member_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_extract_member_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_get_context_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    context: mach_port_context_t,
};
pub const __Reply__mach_port_set_context_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_kobject_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    object_type: natural_t,
    object_addr: mach_vm_address_t,
};
pub const __Reply__mach_port_construct_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    name: mach_port_name_t,
};
pub const __Reply__mach_port_destruct_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_guard_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_unguard_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_space_basic_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    basic_info: ipc_info_space_basic_t,
};
pub const __Reply__mach_port_guard_with_flags_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_swap_guard_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__mach_port_kobject_description_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    object_type: natural_t,
    object_addr: mach_vm_address_t,
    descriptionOffset: mach_msg_type_number_t,
    descriptionCnt: mach_msg_type_number_t,
    description: [512]u8,
};
pub const __Reply__mach_port_is_connection_for_service_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    filter_policy_id: u64,
};
pub const __Reply__mach_port_get_service_port_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    sp_info_out: mach_service_port_info_data_t,
};
pub const __Reply__mach_port_assert_attributes_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const union___ReplyUnion__mach_port_subsystem = extern union {
    Reply_mach_port_names: __Reply__mach_port_names_t,
    Reply_mach_port_type: __Reply__mach_port_type_t,
    Reply_mach_port_rename: __Reply__mach_port_rename_t,
    Reply_mach_port_allocate_name: __Reply__mach_port_allocate_name_t,
    Reply_mach_port_allocate: __Reply__mach_port_allocate_t,
    Reply_mach_port_destroy: __Reply__mach_port_destroy_t,
    Reply_mach_port_deallocate: __Reply__mach_port_deallocate_t,
    Reply_mach_port_get_refs: __Reply__mach_port_get_refs_t,
    Reply_mach_port_mod_refs: __Reply__mach_port_mod_refs_t,
    Reply_mach_port_peek: __Reply__mach_port_peek_t,
    Reply_mach_port_set_mscount: __Reply__mach_port_set_mscount_t,
    Reply_mach_port_get_set_status: __Reply__mach_port_get_set_status_t,
    Reply_mach_port_move_member: __Reply__mach_port_move_member_t,
    Reply_mach_port_request_notification: __Reply__mach_port_request_notification_t,
    Reply_mach_port_insert_right: __Reply__mach_port_insert_right_t,
    Reply_mach_port_extract_right: __Reply__mach_port_extract_right_t,
    Reply_mach_port_set_seqno: __Reply__mach_port_set_seqno_t,
    Reply_mach_port_get_attributes: __Reply__mach_port_get_attributes_t,
    Reply_mach_port_set_attributes: __Reply__mach_port_set_attributes_t,
    Reply_mach_port_allocate_qos: __Reply__mach_port_allocate_qos_t,
    Reply_mach_port_allocate_full: __Reply__mach_port_allocate_full_t,
    Reply_task_set_port_space: __Reply__task_set_port_space_t,
    Reply_mach_port_get_srights: __Reply__mach_port_get_srights_t,
    Reply_mach_port_space_info: __Reply__mach_port_space_info_t,
    Reply_mach_port_dnrequest_info: __Reply__mach_port_dnrequest_info_t,
    Reply_mach_port_kernel_object: __Reply__mach_port_kernel_object_t,
    Reply_mach_port_insert_member: __Reply__mach_port_insert_member_t,
    Reply_mach_port_extract_member: __Reply__mach_port_extract_member_t,
    Reply_mach_port_get_context: __Reply__mach_port_get_context_t,
    Reply_mach_port_set_context: __Reply__mach_port_set_context_t,
    Reply_mach_port_kobject: __Reply__mach_port_kobject_t,
    Reply_mach_port_construct: __Reply__mach_port_construct_t,
    Reply_mach_port_destruct: __Reply__mach_port_destruct_t,
    Reply_mach_port_guard: __Reply__mach_port_guard_t,
    Reply_mach_port_unguard: __Reply__mach_port_unguard_t,
    Reply_mach_port_space_basic_info: __Reply__mach_port_space_basic_info_t,
    Reply_mach_port_guard_with_flags: __Reply__mach_port_guard_with_flags_t,
    Reply_mach_port_swap_guard: __Reply__mach_port_swap_guard_t,
    Reply_mach_port_kobject_description: __Reply__mach_port_kobject_description_t,
    Reply_mach_port_is_connection_for_service: __Reply__mach_port_is_connection_for_service_t,
    Reply_mach_port_get_service_port_info: __Reply__mach_port_get_service_port_info_t,
    Reply_mach_port_assert_attributes: __Reply__mach_port_assert_attributes_t,
};
pub extern fn host_info(host: host_t, flavor: host_flavor_t, host_info_out: host_info_t, host_info_outCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn host_kernel_version(host: host_t, kernel_version: [*c]u8) kern_return_t;
pub extern fn _host_page_size(host: host_t, out_page_size: [*c]vm_size_t) kern_return_t;
pub extern fn mach_memory_object_memory_entry(host: host_t, internal: boolean_t, size: vm_size_t, permission: vm_prot_t, pager: memory_object_t, entry_handle: [*c]mach_port_t) kern_return_t;
pub extern fn host_processor_info(host: host_t, flavor: processor_flavor_t, out_processor_count: [*c]natural_t, out_processor_info: [*c]processor_info_array_t, out_processor_infoCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn host_get_io_master(host: host_t, io_master: [*c]io_master_t) kern_return_t;
pub extern fn host_get_clock_service(host: host_t, clock_id: clock_id_t, clock_serv: [*c]clock_serv_t) kern_return_t;
pub extern fn kmod_get_info(host: host_t, modules: [*c]kmod_args_t, modulesCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn host_virtual_physical_table_info(host: host_t, info: [*c]hash_info_bucket_array_t, infoCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn processor_set_default(host: host_t, default_set: [*c]processor_set_name_t) kern_return_t;
pub extern fn processor_set_create(host: host_t, new_set: [*c]processor_set_t, new_name: [*c]processor_set_name_t) kern_return_t;
pub extern fn mach_memory_object_memory_entry_64(host: host_t, internal: boolean_t, size: memory_object_size_t, permission: vm_prot_t, pager: memory_object_t, entry_handle: [*c]mach_port_t) kern_return_t;
pub extern fn host_statistics(host_priv: host_t, flavor: host_flavor_t, host_info_out: host_info_t, host_info_outCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn host_request_notification(host: host_t, notify_type: host_flavor_t, notify_port: mach_port_t) kern_return_t;
pub extern fn host_lockgroup_info(host: host_t, lockgroup_info: [*c]lockgroup_info_array_t, lockgroup_infoCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn host_statistics64(host_priv: host_t, flavor: host_flavor_t, host_info64_out: host_info64_t, host_info64_outCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn mach_zone_info(host: host_priv_t, names: [*c]mach_zone_name_array_t, namesCnt: [*c]mach_msg_type_number_t, info: [*c]mach_zone_info_array_t, infoCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn host_create_mach_voucher(host: host_t, recipes: mach_voucher_attr_raw_recipe_array_t, recipesCnt: mach_msg_type_number_t, voucher: [*c]ipc_voucher_t) kern_return_t;
pub extern fn host_register_mach_voucher_attr_manager(host: host_t, attr_manager: mach_voucher_attr_manager_t, default_value: mach_voucher_attr_value_handle_t, new_key: [*c]mach_voucher_attr_key_t, new_attr_control: [*c]ipc_voucher_attr_control_t) kern_return_t;
pub extern fn host_register_well_known_mach_voucher_attr_manager(host: host_t, attr_manager: mach_voucher_attr_manager_t, default_value: mach_voucher_attr_value_handle_t, key: mach_voucher_attr_key_t, new_attr_control: [*c]ipc_voucher_attr_control_t) kern_return_t;
pub extern fn host_set_atm_diagnostic_flag(host: host_t, diagnostic_flag: u32) kern_return_t;
pub extern fn host_get_atm_diagnostic_flag(host: host_t, diagnostic_flag: [*c]u32) kern_return_t;
pub extern fn mach_memory_info(host: host_priv_t, names: [*c]mach_zone_name_array_t, namesCnt: [*c]mach_msg_type_number_t, info: [*c]mach_zone_info_array_t, infoCnt: [*c]mach_msg_type_number_t, memory_info: [*c]mach_memory_info_array_t, memory_infoCnt: [*c]mach_msg_type_number_t) kern_return_t;
pub extern fn host_set_multiuser_config_flags(host_priv: host_priv_t, multiuser_flags: u32) kern_return_t;
pub extern fn host_get_multiuser_config_flags(host: host_t, multiuser_flags: [*c]u32) kern_return_t;
pub extern fn host_check_multiuser_mode(host: host_t, multiuser_mode: [*c]u32) kern_return_t;
pub extern fn mach_zone_info_for_zone(host: host_priv_t, name: mach_zone_name_t, info: [*c]mach_zone_info_t) kern_return_t;
pub const __Request__host_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: host_flavor_t,
    host_info_outCnt: mach_msg_type_number_t,
};
pub const __Request__host_kernel_version_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request___host_page_size_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__mach_memory_object_memory_entry_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    pager: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    internal: boolean_t,
    size: vm_size_t,
    permission: vm_prot_t,
};
pub const __Request__host_processor_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: processor_flavor_t,
};
pub const __Request__host_get_io_master_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__host_get_clock_service_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    clock_id: clock_id_t,
};
pub const __Request__kmod_get_info_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__host_virtual_physical_table_info_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__processor_set_default_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__processor_set_create_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__mach_memory_object_memory_entry_64_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    pager: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    internal: boolean_t,
    size: memory_object_size_t,
    permission: vm_prot_t,
};
pub const __Request__host_statistics_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: host_flavor_t,
    host_info_outCnt: mach_msg_type_number_t,
};
pub const __Request__host_request_notification_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    notify_port: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    notify_type: host_flavor_t,
};
pub const __Request__host_lockgroup_info_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__host_statistics64_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    flavor: host_flavor_t,
    host_info64_outCnt: mach_msg_type_number_t,
};
pub const __Request__mach_zone_info_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__host_create_mach_voucher_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    recipesCnt: mach_msg_type_number_t,
    recipes: [5120]u8,
};
pub const __Request__host_register_mach_voucher_attr_manager_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    attr_manager: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    default_value: mach_voucher_attr_value_handle_t,
};
pub const __Request__host_register_well_known_mach_voucher_attr_manager_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    attr_manager: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    default_value: mach_voucher_attr_value_handle_t,
    key: mach_voucher_attr_key_t,
};
pub const __Request__host_set_atm_diagnostic_flag_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    diagnostic_flag: u32,
};
pub const __Request__host_get_atm_diagnostic_flag_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__mach_memory_info_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__host_set_multiuser_config_flags_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    multiuser_flags: u32,
};
pub const __Request__host_get_multiuser_config_flags_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__host_check_multiuser_mode_t = extern struct {
    Head: mach_msg_header_t,
};
pub const __Request__mach_zone_info_for_zone_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    name: mach_zone_name_t,
};
pub const union___RequestUnion__mach_host_subsystem = extern union {
    Request_host_info: __Request__host_info_t,
    Request_host_kernel_version: __Request__host_kernel_version_t,
    Request__host_page_size: __Request___host_page_size_t,
    Request_mach_memory_object_memory_entry: __Request__mach_memory_object_memory_entry_t,
    Request_host_processor_info: __Request__host_processor_info_t,
    Request_host_get_io_master: __Request__host_get_io_master_t,
    Request_host_get_clock_service: __Request__host_get_clock_service_t,
    Request_kmod_get_info: __Request__kmod_get_info_t,
    Request_host_virtual_physical_table_info: __Request__host_virtual_physical_table_info_t,
    Request_processor_set_default: __Request__processor_set_default_t,
    Request_processor_set_create: __Request__processor_set_create_t,
    Request_mach_memory_object_memory_entry_64: __Request__mach_memory_object_memory_entry_64_t,
    Request_host_statistics: __Request__host_statistics_t,
    Request_host_request_notification: __Request__host_request_notification_t,
    Request_host_lockgroup_info: __Request__host_lockgroup_info_t,
    Request_host_statistics64: __Request__host_statistics64_t,
    Request_mach_zone_info: __Request__mach_zone_info_t,
    Request_host_create_mach_voucher: __Request__host_create_mach_voucher_t,
    Request_host_register_mach_voucher_attr_manager: __Request__host_register_mach_voucher_attr_manager_t,
    Request_host_register_well_known_mach_voucher_attr_manager: __Request__host_register_well_known_mach_voucher_attr_manager_t,
    Request_host_set_atm_diagnostic_flag: __Request__host_set_atm_diagnostic_flag_t,
    Request_host_get_atm_diagnostic_flag: __Request__host_get_atm_diagnostic_flag_t,
    Request_mach_memory_info: __Request__mach_memory_info_t,
    Request_host_set_multiuser_config_flags: __Request__host_set_multiuser_config_flags_t,
    Request_host_get_multiuser_config_flags: __Request__host_get_multiuser_config_flags_t,
    Request_host_check_multiuser_mode: __Request__host_check_multiuser_mode_t,
    Request_mach_zone_info_for_zone: __Request__mach_zone_info_for_zone_t,
};
pub const __Reply__host_info_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    host_info_outCnt: mach_msg_type_number_t,
    host_info_out: [68]integer_t,
};
pub const __Reply__host_kernel_version_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    kernel_versionOffset: mach_msg_type_number_t,
    kernel_versionCnt: mach_msg_type_number_t,
    kernel_version: [512]u8,
};
pub const __Reply___host_page_size_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    out_page_size: vm_size_t,
};
pub const __Reply__mach_memory_object_memory_entry_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    entry_handle: mach_msg_port_descriptor_t,
};
pub const __Reply__host_processor_info_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    out_processor_info: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    out_processor_count: natural_t,
    out_processor_infoCnt: mach_msg_type_number_t,
};
pub const __Reply__host_get_io_master_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    io_master: mach_msg_port_descriptor_t,
};
pub const __Reply__host_get_clock_service_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    clock_serv: mach_msg_port_descriptor_t,
};
pub const __Reply__kmod_get_info_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    modules: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    modulesCnt: mach_msg_type_number_t,
};
pub const __Reply__host_virtual_physical_table_info_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    info: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    infoCnt: mach_msg_type_number_t,
};
pub const __Reply__processor_set_default_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    default_set: mach_msg_port_descriptor_t,
};
pub const __Reply__processor_set_create_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    new_set: mach_msg_port_descriptor_t,
    new_name: mach_msg_port_descriptor_t,
};
pub const __Reply__mach_memory_object_memory_entry_64_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    entry_handle: mach_msg_port_descriptor_t,
};
pub const __Reply__host_statistics_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    host_info_outCnt: mach_msg_type_number_t,
    host_info_out: [68]integer_t,
};
pub const __Reply__host_request_notification_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__host_lockgroup_info_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    lockgroup_info: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    lockgroup_infoCnt: mach_msg_type_number_t,
};
pub const __Reply__host_statistics64_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    host_info64_outCnt: mach_msg_type_number_t,
    host_info64_out: [256]integer_t,
};
pub const __Reply__mach_zone_info_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    names: mach_msg_ool_descriptor_t,
    info: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    namesCnt: mach_msg_type_number_t,
    infoCnt: mach_msg_type_number_t,
};
pub const __Reply__host_create_mach_voucher_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    voucher: mach_msg_port_descriptor_t,
};
pub const __Reply__host_register_mach_voucher_attr_manager_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    new_attr_control: mach_msg_port_descriptor_t,
    NDR: NDR_record_t,
    new_key: mach_voucher_attr_key_t,
};
pub const __Reply__host_register_well_known_mach_voucher_attr_manager_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    new_attr_control: mach_msg_port_descriptor_t,
};
pub const __Reply__host_set_atm_diagnostic_flag_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__host_get_atm_diagnostic_flag_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    diagnostic_flag: u32,
};
pub const __Reply__mach_memory_info_t = extern struct {
    Head: mach_msg_header_t,
    msgh_body: mach_msg_body_t,
    names: mach_msg_ool_descriptor_t,
    info: mach_msg_ool_descriptor_t,
    memory_info: mach_msg_ool_descriptor_t,
    NDR: NDR_record_t,
    namesCnt: mach_msg_type_number_t,
    infoCnt: mach_msg_type_number_t,
    memory_infoCnt: mach_msg_type_number_t,
};
pub const __Reply__host_set_multiuser_config_flags_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
};
pub const __Reply__host_get_multiuser_config_flags_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    multiuser_flags: u32,
};
pub const __Reply__host_check_multiuser_mode_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    multiuser_mode: u32,
};
pub const __Reply__mach_zone_info_for_zone_t = extern struct {
    Head: mach_msg_header_t,
    NDR: NDR_record_t,
    RetCode: kern_return_t,
    info: mach_zone_info_t,
};
pub const union___ReplyUnion__mach_host_subsystem = extern union {
    Reply_host_info: __Reply__host_info_t,
    Reply_host_kernel_version: __Reply__host_kernel_version_t,
    Reply__host_page_size: __Reply___host_page_size_t,
    Reply_mach_memory_object_memory_entry: __Reply__mach_memory_object_memory_entry_t,
    Reply_host_processor_info: __Reply__host_processor_info_t,
    Reply_host_get_io_master: __Reply__host_get_io_master_t,
    Reply_host_get_clock_service: __Reply__host_get_clock_service_t,
    Reply_kmod_get_info: __Reply__kmod_get_info_t,
    Reply_host_virtual_physical_table_info: __Reply__host_virtual_physical_table_info_t,
    Reply_processor_set_default: __Reply__processor_set_default_t,
    Reply_processor_set_create: __Reply__processor_set_create_t,
    Reply_mach_memory_object_memory_entry_64: __Reply__mach_memory_object_memory_entry_64_t,
    Reply_host_statistics: __Reply__host_statistics_t,
    Reply_host_request_notification: __Reply__host_request_notification_t,
    Reply_host_lockgroup_info: __Reply__host_lockgroup_info_t,
    Reply_host_statistics64: __Reply__host_statistics64_t,
    Reply_mach_zone_info: __Reply__mach_zone_info_t,
    Reply_host_create_mach_voucher: __Reply__host_create_mach_voucher_t,
    Reply_host_register_mach_voucher_attr_manager: __Reply__host_register_mach_voucher_attr_manager_t,
    Reply_host_register_well_known_mach_voucher_attr_manager: __Reply__host_register_well_known_mach_voucher_attr_manager_t,
    Reply_host_set_atm_diagnostic_flag: __Reply__host_set_atm_diagnostic_flag_t,
    Reply_host_get_atm_diagnostic_flag: __Reply__host_get_atm_diagnostic_flag_t,
    Reply_mach_memory_info: __Reply__mach_memory_info_t,
    Reply_host_set_multiuser_config_flags: __Reply__host_set_multiuser_config_flags_t,
    Reply_host_get_multiuser_config_flags: __Reply__host_get_multiuser_config_flags_t,
    Reply_host_check_multiuser_mode: __Reply__host_check_multiuser_mode_t,
    Reply_mach_zone_info_for_zone: __Reply__mach_zone_info_for_zone_t,
};
pub const routine_arg_type = c_uint;
pub const routine_arg_offset = c_uint;
pub const routine_arg_size = c_uint;
pub const struct_rpc_routine_arg_descriptor = extern struct {
    type: routine_arg_type,
    size: routine_arg_size,
    count: routine_arg_size,
    offset: routine_arg_offset,
};
pub const rpc_routine_arg_descriptor_t = [*c]struct_rpc_routine_arg_descriptor;
pub const struct_rpc_routine_descriptor = extern struct {
    impl_routine: mig_impl_routine_t,
    stub_routine: mig_stub_routine_t,
    argc: c_uint,
    descr_count: c_uint,
    arg_descr: rpc_routine_arg_descriptor_t,
    max_reply_msg: c_uint,
};
pub const rpc_routine_descriptor_t = [*c]struct_rpc_routine_descriptor;
pub const struct_rpc_signature = extern struct {
    rd: struct_rpc_routine_descriptor,
    rad: [1]struct_rpc_routine_arg_descriptor,
};
pub const struct_rpc_subsystem = extern struct {
    reserved: ?*anyopaque,
    start: mach_msg_id_t,
    end: mach_msg_id_t,
    maxsize: c_uint,
    base_addr: vm_address_t,
    routine: [1]struct_rpc_routine_descriptor,
    arg_descriptor: [1]struct_rpc_routine_arg_descriptor,
};
pub const rpc_subsystem_t = [*c]struct_rpc_subsystem;
pub extern fn mach_error_string(error_value: mach_error_t) [*c]u8;
pub extern fn mach_error(str: [*c]const u8, error_value: mach_error_t) void;
pub extern fn mach_error_type(error_value: mach_error_t) [*c]u8;
pub extern fn panic_init(mach_port_t) void;
pub extern fn panic([*c]const u8, ...) void;
pub extern fn slot_name(cpu_type_t, cpu_subtype_t, [*c][*c]u8, [*c][*c]u8) void;
pub extern fn mig_reply_setup([*c]mach_msg_header_t, [*c]mach_msg_header_t) void;
pub extern fn mach_msg_destroy([*c]mach_msg_header_t) void;
pub extern fn mach_msg_receive([*c]mach_msg_header_t) mach_msg_return_t;
pub extern fn mach_msg_send([*c]mach_msg_header_t) mach_msg_return_t;
pub extern fn mach_msg_server_once(?fn ([*c]mach_msg_header_t, [*c]mach_msg_header_t) callconv(.C) boolean_t, mach_msg_size_t, mach_port_t, mach_msg_options_t) mach_msg_return_t;
pub extern fn mach_msg_server(?fn ([*c]mach_msg_header_t, [*c]mach_msg_header_t) callconv(.C) boolean_t, mach_msg_size_t, mach_port_t, mach_msg_options_t) mach_msg_return_t;
pub extern fn mach_msg_server_importance(?fn ([*c]mach_msg_header_t, [*c]mach_msg_header_t) callconv(.C) boolean_t, mach_msg_size_t, mach_port_t, mach_msg_options_t) mach_msg_return_t;
pub extern fn clock_get_res(mach_port_t, [*c]clock_res_t) kern_return_t;
pub extern fn clock_set_res(mach_port_t, clock_res_t) kern_return_t;
pub extern fn clock_sleep(mach_port_t, c_int, mach_timespec_t, [*c]mach_timespec_t) kern_return_t;
pub const struct_voucher_mach_msg_state_s = opaque {};
pub const voucher_mach_msg_state_t = ?*struct_voucher_mach_msg_state_s;
pub extern fn voucher_mach_msg_set(msg: [*c]mach_msg_header_t) boolean_t;
pub extern fn voucher_mach_msg_clear(msg: [*c]mach_msg_header_t) void;
pub extern fn voucher_mach_msg_adopt(msg: [*c]mach_msg_header_t) voucher_mach_msg_state_t;
pub extern fn voucher_mach_msg_revert(state: voucher_mach_msg_state_t) void;
pub extern fn launch_activate_socket(name: [*c]const u8, fds: [*c][*c]c_int, cnt: [*c]usize) c_int;
pub const struct__launch_data = opaque {};
pub const launch_data_t = ?*struct__launch_data;
pub const launch_data_dict_iterator_t = ?*const fn (launch_data_t, [*c]const u8, ?*anyopaque) callconv(.C) void;
pub const LAUNCH_DATA_DICTIONARY: c_int = 1;
pub const LAUNCH_DATA_ARRAY: c_int = 2;
pub const LAUNCH_DATA_FD: c_int = 3;
pub const LAUNCH_DATA_INTEGER: c_int = 4;
pub const LAUNCH_DATA_REAL: c_int = 5;
pub const LAUNCH_DATA_BOOL: c_int = 6;
pub const LAUNCH_DATA_STRING: c_int = 7;
pub const LAUNCH_DATA_OPAQUE: c_int = 8;
pub const LAUNCH_DATA_ERRNO: c_int = 9;
pub const LAUNCH_DATA_MACHPORT: c_int = 10;
pub const launch_data_type_t = c_uint;
pub extern fn launch_data_alloc(@"type": launch_data_type_t) launch_data_t;
pub extern fn launch_data_copy(ld: launch_data_t) launch_data_t;
pub extern fn launch_data_get_type(ld: launch_data_t) launch_data_type_t;
pub extern fn launch_data_free(ld: launch_data_t) void;
pub extern fn launch_data_dict_insert(ldict: launch_data_t, lval: launch_data_t, key: [*c]const u8) bool;
pub extern fn launch_data_dict_lookup(ldict: launch_data_t, key: [*c]const u8) launch_data_t;
pub extern fn launch_data_dict_remove(ldict: launch_data_t, key: [*c]const u8) bool;
pub extern fn launch_data_dict_iterate(ldict: launch_data_t, iterator: launch_data_dict_iterator_t, ctx: ?*anyopaque) void;
pub extern fn launch_data_dict_get_count(ldict: launch_data_t) usize;
pub extern fn launch_data_array_set_index(larray: launch_data_t, lval: launch_data_t, idx: usize) bool;
pub extern fn launch_data_array_get_index(larray: launch_data_t, idx: usize) launch_data_t;
pub extern fn launch_data_array_get_count(larray: launch_data_t) usize;
pub extern fn launch_data_new_fd(fd: c_int) launch_data_t;
pub extern fn launch_data_new_machport(val: mach_port_t) launch_data_t;
pub extern fn launch_data_new_integer(val: c_longlong) launch_data_t;
pub extern fn launch_data_new_bool(val: bool) launch_data_t;
pub extern fn launch_data_new_real(val: f64) launch_data_t;
pub extern fn launch_data_new_string(val: [*c]const u8) launch_data_t;
pub extern fn launch_data_new_opaque(bytes: ?*const anyopaque, sz: usize) launch_data_t;
pub extern fn launch_data_set_fd(ld: launch_data_t, fd: c_int) bool;
pub extern fn launch_data_set_machport(ld: launch_data_t, mp: mach_port_t) bool;
pub extern fn launch_data_set_integer(ld: launch_data_t, val: c_longlong) bool;
pub extern fn launch_data_set_bool(ld: launch_data_t, val: bool) bool;
pub extern fn launch_data_set_real(ld: launch_data_t, val: f64) bool;
pub extern fn launch_data_set_string(ld: launch_data_t, val: [*c]const u8) bool;
pub extern fn launch_data_set_opaque(ld: launch_data_t, bytes: ?*const anyopaque, sz: usize) bool;
pub extern fn launch_data_get_fd(ld: launch_data_t) c_int;
pub extern fn launch_data_get_machport(ld: launch_data_t) mach_port_t;
pub extern fn launch_data_get_integer(ld: launch_data_t) c_longlong;
pub extern fn launch_data_get_bool(ld: launch_data_t) bool;
pub extern fn launch_data_get_real(ld: launch_data_t) f64;
pub extern fn launch_data_get_string(ld: launch_data_t) [*c]const u8;
pub extern fn launch_data_get_opaque(ld: launch_data_t) ?*anyopaque;
pub extern fn launch_data_get_opaque_size(ld: launch_data_t) usize;
pub extern fn launch_data_get_errno(ld: launch_data_t) c_int;
pub extern fn launch_get_fd() c_int;
pub extern fn launch_msg(request: launch_data_t) launch_data_t;
pub extern fn xpc_retain(object: xpc_object_t) xpc_object_t;
pub extern fn xpc_release(object: xpc_object_t) void;
pub extern fn xpc_get_type(object: xpc_object_t) xpc_type_t;
pub extern fn xpc_type_get_name(@"type": xpc_type_t) [*c]const u8;
pub extern fn xpc_copy(object: xpc_object_t) xpc_object_t;
pub extern fn xpc_equal(object1: xpc_object_t, object2: xpc_object_t) bool;
pub extern fn xpc_hash(object: xpc_object_t) usize;
pub extern fn xpc_copy_description(object: xpc_object_t) [*c]u8;
pub extern fn xpc_null_create() xpc_object_t;
pub extern fn xpc_bool_create(value: bool) xpc_object_t;
pub extern fn xpc_bool_get_value(xbool: xpc_object_t) bool;
pub extern fn xpc_int64_create(value: i64) xpc_object_t;
pub extern fn xpc_int64_get_value(xint: xpc_object_t) i64;
pub extern fn xpc_uint64_create(value: u64) xpc_object_t;
pub extern fn xpc_uint64_get_value(xuint: xpc_object_t) u64;
pub extern fn xpc_double_create(value: f64) xpc_object_t;
pub extern fn xpc_double_get_value(xdouble: xpc_object_t) f64;
pub extern fn xpc_date_create(interval: i64) xpc_object_t;
pub extern fn xpc_date_create_from_current() xpc_object_t;
pub extern fn xpc_date_get_value(xdate: xpc_object_t) i64;
pub extern fn xpc_data_create(bytes: ?*const anyopaque, length: usize) xpc_object_t;
pub extern fn xpc_data_create_with_dispatch_data(ddata: dispatch_data_t) xpc_object_t;
pub extern fn xpc_data_get_length(xdata: xpc_object_t) usize;
pub extern fn xpc_data_get_bytes_ptr(xdata: xpc_object_t) ?*const anyopaque;
pub extern fn xpc_data_get_bytes(xdata: xpc_object_t, buffer: ?*anyopaque, off: usize, length: usize) usize;
pub extern fn xpc_string_create(string: [*c]const u8) xpc_object_t;
pub extern fn xpc_string_create_with_format(fmt: [*c]const u8, ...) xpc_object_t;
pub extern fn xpc_string_create_with_format_and_arguments(fmt: [*c]const u8, ap: va_list) xpc_object_t;
pub extern fn xpc_string_get_length(xstring: xpc_object_t) usize;
pub extern fn xpc_string_get_string_ptr(xstring: xpc_object_t) [*c]const u8;
pub extern fn xpc_uuid_create(uuid: [*c]const u8) xpc_object_t;
pub extern fn xpc_uuid_get_bytes(xuuid: xpc_object_t) [*c]const u8;
pub extern fn xpc_fd_create(fd: c_int) xpc_object_t;
pub extern fn xpc_fd_dup(xfd: xpc_object_t) c_int;
pub extern fn xpc_shmem_create(region: ?*anyopaque, length: usize) xpc_object_t;
pub extern fn xpc_shmem_map(xshmem: xpc_object_t, region: [*c]?*anyopaque) usize; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/xpc.h:1138:16: warning: unsupported type: 'BlockPointer'
pub const xpc_array_applier_t = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/xpc.h:1138:16
pub extern fn xpc_array_create(objects: [*c]const xpc_object_t, count: usize) xpc_object_t;
pub extern fn xpc_array_create_empty() xpc_object_t;
pub extern fn xpc_array_set_value(xarray: xpc_object_t, index: usize, value: xpc_object_t) void;
pub extern fn xpc_array_append_value(xarray: xpc_object_t, value: xpc_object_t) void;
pub extern fn xpc_array_get_count(xarray: xpc_object_t) usize;
pub extern fn xpc_array_get_value(xarray: xpc_object_t, index: usize) xpc_object_t;
pub extern fn xpc_array_apply(xarray: xpc_object_t, applier: xpc_array_applier_t) bool;
pub extern fn xpc_array_set_bool(xarray: xpc_object_t, index: usize, value: bool) void;
pub extern fn xpc_array_set_int64(xarray: xpc_object_t, index: usize, value: i64) void;
pub extern fn xpc_array_set_uint64(xarray: xpc_object_t, index: usize, value: u64) void;
pub extern fn xpc_array_set_double(xarray: xpc_object_t, index: usize, value: f64) void;
pub extern fn xpc_array_set_date(xarray: xpc_object_t, index: usize, value: i64) void;
pub extern fn xpc_array_set_data(xarray: xpc_object_t, index: usize, bytes: ?*const anyopaque, length: usize) void;
pub extern fn xpc_array_set_string(xarray: xpc_object_t, index: usize, string: [*c]const u8) void;
pub extern fn xpc_array_set_uuid(xarray: xpc_object_t, index: usize, uuid: [*c]const u8) void;
pub extern fn xpc_array_set_fd(xarray: xpc_object_t, index: usize, fd: c_int) void;
pub extern fn xpc_array_set_connection(xarray: xpc_object_t, index: usize, connection: xpc_connection_t) void;
pub extern fn xpc_array_get_bool(xarray: xpc_object_t, index: usize) bool;
pub extern fn xpc_array_get_int64(xarray: xpc_object_t, index: usize) i64;
pub extern fn xpc_array_get_uint64(xarray: xpc_object_t, index: usize) u64;
pub extern fn xpc_array_get_double(xarray: xpc_object_t, index: usize) f64;
pub extern fn xpc_array_get_date(xarray: xpc_object_t, index: usize) i64;
pub extern fn xpc_array_get_data(xarray: xpc_object_t, index: usize, length: [*c]usize) ?*const anyopaque;
pub extern fn xpc_array_get_string(xarray: xpc_object_t, index: usize) [*c]const u8;
pub extern fn xpc_array_get_uuid(xarray: xpc_object_t, index: usize) [*c]const u8;
pub extern fn xpc_array_dup_fd(xarray: xpc_object_t, index: usize) c_int;
pub extern fn xpc_array_create_connection(xarray: xpc_object_t, index: usize) xpc_connection_t;
pub extern fn xpc_array_get_dictionary(xarray: xpc_object_t, index: usize) xpc_object_t;
pub extern fn xpc_array_get_array(xarray: xpc_object_t, index: usize) xpc_object_t; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/xpc.h:1877:16: warning: unsupported type: 'BlockPointer'
pub const xpc_dictionary_applier_t = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/xpc.h:1877:16
pub extern fn xpc_dictionary_create(keys: [*c]const [*c]const u8, values: [*c]const xpc_object_t, count: usize) xpc_object_t;
pub extern fn xpc_dictionary_create_empty() xpc_object_t;
pub extern fn xpc_dictionary_create_reply(original: xpc_object_t) xpc_object_t;
pub extern fn xpc_dictionary_set_value(xdict: xpc_object_t, key: [*c]const u8, value: xpc_object_t) void;
pub extern fn xpc_dictionary_get_value(xdict: xpc_object_t, key: [*c]const u8) xpc_object_t;
pub extern fn xpc_dictionary_get_count(xdict: xpc_object_t) usize;
pub extern fn xpc_dictionary_apply(xdict: xpc_object_t, applier: xpc_dictionary_applier_t) bool;
pub extern fn xpc_dictionary_get_remote_connection(xdict: xpc_object_t) xpc_connection_t;
pub extern fn xpc_dictionary_set_bool(xdict: xpc_object_t, key: [*c]const u8, value: bool) void;
pub extern fn xpc_dictionary_set_int64(xdict: xpc_object_t, key: [*c]const u8, value: i64) void;
pub extern fn xpc_dictionary_set_uint64(xdict: xpc_object_t, key: [*c]const u8, value: u64) void;
pub extern fn xpc_dictionary_set_double(xdict: xpc_object_t, key: [*c]const u8, value: f64) void;
pub extern fn xpc_dictionary_set_date(xdict: xpc_object_t, key: [*c]const u8, value: i64) void;
pub extern fn xpc_dictionary_set_data(xdict: xpc_object_t, key: [*c]const u8, bytes: ?*const anyopaque, length: usize) void;
pub extern fn xpc_dictionary_set_string(xdict: xpc_object_t, key: [*c]const u8, string: [*c]const u8) void;
pub extern fn xpc_dictionary_set_uuid(xdict: xpc_object_t, key: [*c]const u8, uuid: [*c]const u8) void;
pub extern fn xpc_dictionary_set_fd(xdict: xpc_object_t, key: [*c]const u8, fd: c_int) void;
pub extern fn xpc_dictionary_set_connection(xdict: xpc_object_t, key: [*c]const u8, connection: xpc_connection_t) void;
pub extern fn xpc_dictionary_get_bool(xdict: xpc_object_t, key: [*c]const u8) bool;
pub extern fn xpc_dictionary_get_int64(xdict: xpc_object_t, key: [*c]const u8) i64;
pub extern fn xpc_dictionary_get_uint64(xdict: xpc_object_t, key: [*c]const u8) u64;
pub extern fn xpc_dictionary_get_double(xdict: xpc_object_t, key: [*c]const u8) f64;
pub extern fn xpc_dictionary_get_date(xdict: xpc_object_t, key: [*c]const u8) i64;
pub extern fn xpc_dictionary_get_data(xdict: xpc_object_t, key: [*c]const u8, length: [*c]usize) ?*const anyopaque;
pub extern fn xpc_dictionary_get_string(xdict: xpc_object_t, key: [*c]const u8) [*c]const u8;
pub extern fn xpc_dictionary_get_uuid(xdict: xpc_object_t, key: [*c]const u8) [*c]const u8;
pub extern fn xpc_dictionary_dup_fd(xdict: xpc_object_t, key: [*c]const u8) c_int;
pub extern fn xpc_dictionary_create_connection(xdict: xpc_object_t, key: [*c]const u8) xpc_connection_t;
pub extern fn xpc_dictionary_get_dictionary(xdict: xpc_object_t, key: [*c]const u8) xpc_object_t;
pub extern fn xpc_dictionary_get_array(xdict: xpc_object_t, key: [*c]const u8) xpc_object_t;
pub extern fn xpc_main(handler: xpc_connection_handler_t) noreturn;
pub extern fn xpc_transaction_begin() void;
pub extern fn xpc_transaction_end() void;
pub extern fn xpc_set_event_stream_handler(stream: [*c]const u8, targetq: dispatch_queue_t, handler: xpc_handler_t) void;
pub extern fn SecCodeGetTypeID() CFTypeID;
pub extern fn SecCodeCopySelf(flags: SecCSFlags, self: [*c]SecCodeRef) OSStatus;
pub const kSecCSUseAllArchitectures: c_int = 1;
const enum_unnamed_1154 = c_uint;
pub extern fn SecCodeCopyStaticCode(code: SecCodeRef, flags: SecCSFlags, staticCode: [*c]SecStaticCodeRef) OSStatus;
pub extern fn SecCodeCopyHost(guest: SecCodeRef, flags: SecCSFlags, host: [*c]SecCodeRef) OSStatus;
pub extern const kSecGuestAttributeCanonical: CFStringRef;
pub extern const kSecGuestAttributeHash: CFStringRef;
pub extern const kSecGuestAttributeMachPort: CFStringRef;
pub extern const kSecGuestAttributePid: CFStringRef;
pub extern const kSecGuestAttributeAudit: CFStringRef;
pub extern const kSecGuestAttributeDynamicCode: CFStringRef;
pub extern const kSecGuestAttributeDynamicCodeInfoPlist: CFStringRef;
pub extern const kSecGuestAttributeArchitecture: CFStringRef;
pub extern const kSecGuestAttributeSubarchitecture: CFStringRef;
pub extern fn SecCodeCopyGuestWithAttributes(host: SecCodeRef, attributes: CFDictionaryRef, flags: SecCSFlags, guest: [*c]SecCodeRef) OSStatus;
pub extern fn SecCodeCreateWithXPCMessage(message: xpc_object_t, flags: SecCSFlags, target: [*c]SecCodeRef) OSStatus;
pub extern fn SecCodeCheckValidity(code: SecCodeRef, flags: SecCSFlags, requirement: SecRequirementRef) OSStatus;
pub extern fn SecCodeCheckValidityWithErrors(code: SecCodeRef, flags: SecCSFlags, requirement: SecRequirementRef, errors: [*c]CFErrorRef) OSStatus;
pub extern fn SecCodeCopyPath(staticCode: SecStaticCodeRef, flags: SecCSFlags, path: [*c]CFURLRef) OSStatus;
pub extern fn SecCodeCopyDesignatedRequirement(code: SecStaticCodeRef, flags: SecCSFlags, requirement: [*c]SecRequirementRef) OSStatus;
pub const kSecCSInternalInformation: c_int = 1;
pub const kSecCSSigningInformation: c_int = 2;
pub const kSecCSRequirementInformation: c_int = 4;
pub const kSecCSDynamicInformation: c_int = 8;
pub const kSecCSContentInformation: c_int = 16;
pub const kSecCSSkipResourceDirectory: c_int = 32;
pub const kSecCSCalculateCMSDigest: c_int = 64;
const enum_unnamed_1155 = c_uint;
pub extern const kSecCodeInfoCertificates: CFStringRef;
pub extern const kSecCodeInfoChangedFiles: CFStringRef;
pub extern const kSecCodeInfoCMS: CFStringRef;
pub extern const kSecCodeInfoDesignatedRequirement: CFStringRef;
pub extern const kSecCodeInfoEntitlements: CFStringRef;
pub extern const kSecCodeInfoEntitlementsDict: CFStringRef;
pub extern const kSecCodeInfoFlags: CFStringRef;
pub extern const kSecCodeInfoFormat: CFStringRef;
pub extern const kSecCodeInfoDigestAlgorithm: CFStringRef;
pub extern const kSecCodeInfoDigestAlgorithms: CFStringRef;
pub extern const kSecCodeInfoPlatformIdentifier: CFStringRef;
pub extern const kSecCodeInfoIdentifier: CFStringRef;
pub extern const kSecCodeInfoImplicitDesignatedRequirement: CFStringRef;
pub extern const kSecCodeInfoMainExecutable: CFStringRef;
pub extern const kSecCodeInfoPList: CFStringRef;
pub extern const kSecCodeInfoRequirements: CFStringRef;
pub extern const kSecCodeInfoRequirementData: CFStringRef;
pub extern const kSecCodeInfoSource: CFStringRef;
pub extern const kSecCodeInfoStatus: CFStringRef;
pub extern const kSecCodeInfoTeamIdentifier: CFStringRef;
pub extern const kSecCodeInfoTime: CFStringRef;
pub extern const kSecCodeInfoTimestamp: CFStringRef;
pub extern const kSecCodeInfoTrust: CFStringRef;
pub extern const kSecCodeInfoUnique: CFStringRef;
pub extern const kSecCodeInfoCdHashes: CFStringRef;
pub extern const kSecCodeInfoRuntimeVersion: CFStringRef;
pub extern fn SecCodeCopySigningInformation(code: SecStaticCodeRef, flags: SecCSFlags, information: [*c]CFDictionaryRef) OSStatus;
pub extern fn SecCodeMapMemory(code: SecStaticCodeRef, flags: SecCSFlags) OSStatus;
pub const kSecCSDedicatedHost: c_int = 1;
pub const kSecCSGenerateGuestHash: c_int = 2;
const enum_unnamed_1156 = c_uint;
pub extern fn SecHostCreateGuest(host: SecGuestRef, status: u32, path: CFURLRef, attributes: CFDictionaryRef, flags: SecCSFlags, newGuest: [*c]SecGuestRef) OSStatus;
pub extern fn SecHostRemoveGuest(host: SecGuestRef, guest: SecGuestRef, flags: SecCSFlags) OSStatus;
pub extern fn SecHostSelectGuest(guestRef: SecGuestRef, flags: SecCSFlags) OSStatus;
pub extern fn SecHostSelectedGuest(flags: SecCSFlags, guestRef: [*c]SecGuestRef) OSStatus;
pub extern fn SecHostSetGuestStatus(guestRef: SecGuestRef, status: u32, attributes: CFDictionaryRef, flags: SecCSFlags) OSStatus;
pub extern fn SecHostSetHostingPort(hostingPort: mach_port_t, flags: SecCSFlags) OSStatus;
pub extern fn SecRequirementGetTypeID() CFTypeID;
pub extern fn SecRequirementCreateWithData(data: CFDataRef, flags: SecCSFlags, requirement: [*c]SecRequirementRef) OSStatus;
pub extern fn SecRequirementCreateWithString(text: CFStringRef, flags: SecCSFlags, requirement: [*c]SecRequirementRef) OSStatus;
pub extern fn SecRequirementCreateWithStringAndErrors(text: CFStringRef, flags: SecCSFlags, errors: [*c]CFErrorRef, requirement: [*c]SecRequirementRef) OSStatus;
pub extern fn SecRequirementCopyData(requirement: SecRequirementRef, flags: SecCSFlags, data: [*c]CFDataRef) OSStatus;
pub extern fn SecRequirementCopyString(requirement: SecRequirementRef, flags: SecCSFlags, text: [*c]CFStringRef) OSStatus;
pub const struct___SecTask = opaque {};
pub const SecTaskRef = ?*struct___SecTask;
pub extern fn SecTaskGetTypeID() CFTypeID;
pub extern fn SecTaskCreateWithAuditToken(allocator: CFAllocatorRef, token: audit_token_t) SecTaskRef;
pub extern fn SecTaskCreateFromSelf(allocator: CFAllocatorRef) SecTaskRef;
pub extern fn SecTaskCopyValueForEntitlement(task: SecTaskRef, entitlement: CFStringRef, @"error": [*c]CFErrorRef) CFTypeRef;
pub extern fn SecTaskCopyValuesForEntitlements(task: SecTaskRef, entitlements: CFArrayRef, @"error": [*c]CFErrorRef) CFDictionaryRef;
pub extern fn SecTaskCopySigningIdentifier(task: SecTaskRef, @"error": [*c]CFErrorRef) CFStringRef;
pub extern fn SecTaskGetCodeSignStatus(task: SecTaskRef) u32;
pub extern fn AuthorizationRightGet(rightName: [*c]const u8, rightDefinition: [*c]CFDictionaryRef) OSStatus;
pub extern fn AuthorizationRightSet(authRef: AuthorizationRef, rightName: [*c]const u8, rightDefinition: CFTypeRef, descriptionKey: CFStringRef, bundle: CFBundleRef, localeTableName: CFStringRef) OSStatus;
pub extern fn AuthorizationRightRemove(authRef: AuthorizationRef, rightName: [*c]const u8) OSStatus;
pub const struct__CMSDecoder = opaque {};
pub const CMSDecoderRef = ?*struct__CMSDecoder;
pub extern fn CMSDecoderGetTypeID() CFTypeID;
pub const CMSSignerStatus = u32;
pub const kCMSSignerUnsigned: c_int = 0;
pub const kCMSSignerValid: c_int = 1;
pub const kCMSSignerNeedsDetachedContent: c_int = 2;
pub const kCMSSignerInvalidSignature: c_int = 3;
pub const kCMSSignerInvalidCert: c_int = 4;
pub const kCMSSignerInvalidIndex: c_int = 5;
const enum_unnamed_1157 = c_uint;
pub extern fn CMSDecoderCreate(cmsDecoderOut: [*c]CMSDecoderRef) OSStatus;
pub extern fn CMSDecoderUpdateMessage(cmsDecoder: CMSDecoderRef, msgBytes: ?*const anyopaque, msgBytesLen: usize) OSStatus;
pub extern fn CMSDecoderFinalizeMessage(cmsDecoder: CMSDecoderRef) OSStatus;
pub extern fn CMSDecoderSetDetachedContent(cmsDecoder: CMSDecoderRef, detachedContent: CFDataRef) OSStatus;
pub extern fn CMSDecoderCopyDetachedContent(cmsDecoder: CMSDecoderRef, detachedContentOut: [*c]CFDataRef) OSStatus;
pub extern fn CMSDecoderSetSearchKeychain(cmsDecoder: CMSDecoderRef, keychainOrArray: CFTypeRef) OSStatus;
pub extern fn CMSDecoderGetNumSigners(cmsDecoder: CMSDecoderRef, numSignersOut: [*c]usize) OSStatus;
pub extern fn CMSDecoderCopySignerStatus(cmsDecoder: CMSDecoderRef, signerIndex: usize, policyOrArray: CFTypeRef, evaluateSecTrust: Boolean, signerStatusOut: [*c]CMSSignerStatus, secTrustOut: [*c]SecTrustRef, certVerifyResultCodeOut: [*c]OSStatus) OSStatus;
pub extern fn CMSDecoderCopySignerEmailAddress(cmsDecoder: CMSDecoderRef, signerIndex: usize, signerEmailAddressOut: [*c]CFStringRef) OSStatus;
pub extern fn CMSDecoderCopySignerCert(cmsDecoder: CMSDecoderRef, signerIndex: usize, signerCertOut: [*c]SecCertificateRef) OSStatus;
pub extern fn CMSDecoderIsContentEncrypted(cmsDecoder: CMSDecoderRef, isEncryptedOut: [*c]Boolean) OSStatus;
pub extern fn CMSDecoderCopyEncapsulatedContentType(cmsDecoder: CMSDecoderRef, eContentTypeOut: [*c]CFDataRef) OSStatus;
pub extern fn CMSDecoderCopyAllCerts(cmsDecoder: CMSDecoderRef, certsOut: [*c]CFArrayRef) OSStatus;
pub extern fn CMSDecoderCopyContent(cmsDecoder: CMSDecoderRef, contentOut: [*c]CFDataRef) OSStatus;
pub extern fn CMSDecoderCopySignerSigningTime(cmsDecoder: CMSDecoderRef, signerIndex: usize, signingTime: [*c]CFAbsoluteTime) OSStatus;
pub extern fn CMSDecoderCopySignerTimestamp(cmsDecoder: CMSDecoderRef, signerIndex: usize, timestamp: [*c]CFAbsoluteTime) OSStatus;
pub extern fn CMSDecoderCopySignerTimestampWithPolicy(cmsDecoder: CMSDecoderRef, timeStampPolicy: CFTypeRef, signerIndex: usize, timestamp: [*c]CFAbsoluteTime) OSStatus;
pub extern fn CMSDecoderCopySignerTimestampCertificates(cmsDecoder: CMSDecoderRef, signerIndex: usize, certificateRefs: [*c]CFArrayRef) OSStatus;
pub const struct__CMSEncoder = opaque {};
pub const CMSEncoderRef = ?*struct__CMSEncoder;
pub extern fn CMSEncoderGetTypeID() CFTypeID;
pub extern fn CMSEncoderCreate(cmsEncoderOut: [*c]CMSEncoderRef) OSStatus;
pub extern const kCMSEncoderDigestAlgorithmSHA1: CFStringRef;
pub extern const kCMSEncoderDigestAlgorithmSHA256: CFStringRef;
pub extern fn CMSEncoderSetSignerAlgorithm(cmsEncoder: CMSEncoderRef, digestAlgorithm: CFStringRef) OSStatus;
pub extern fn CMSEncoderAddSigners(cmsEncoder: CMSEncoderRef, signerOrArray: CFTypeRef) OSStatus;
pub extern fn CMSEncoderCopySigners(cmsEncoder: CMSEncoderRef, signersOut: [*c]CFArrayRef) OSStatus;
pub extern fn CMSEncoderAddRecipients(cmsEncoder: CMSEncoderRef, recipientOrArray: CFTypeRef) OSStatus;
pub extern fn CMSEncoderCopyRecipients(cmsEncoder: CMSEncoderRef, recipientsOut: [*c]CFArrayRef) OSStatus;
pub extern fn CMSEncoderSetHasDetachedContent(cmsEncoder: CMSEncoderRef, detachedContent: Boolean) OSStatus;
pub extern fn CMSEncoderGetHasDetachedContent(cmsEncoder: CMSEncoderRef, detachedContentOut: [*c]Boolean) OSStatus;
pub extern fn CMSEncoderSetEncapsulatedContentType(cmsEncoder: CMSEncoderRef, eContentType: [*c]const SecAsn1Oid) OSStatus;
pub extern fn CMSEncoderSetEncapsulatedContentTypeOID(cmsEncoder: CMSEncoderRef, eContentTypeOID: CFTypeRef) OSStatus;
pub extern fn CMSEncoderCopyEncapsulatedContentType(cmsEncoder: CMSEncoderRef, eContentTypeOut: [*c]CFDataRef) OSStatus;
pub extern fn CMSEncoderAddSupportingCerts(cmsEncoder: CMSEncoderRef, certOrArray: CFTypeRef) OSStatus;
pub extern fn CMSEncoderCopySupportingCerts(cmsEncoder: CMSEncoderRef, certsOut: [*c]CFArrayRef) OSStatus;
pub const CMSSignedAttributes = u32;
pub const kCMSAttrNone: c_int = 0;
pub const kCMSAttrSmimeCapabilities: c_int = 1;
pub const kCMSAttrSmimeEncryptionKeyPrefs: c_int = 2;
pub const kCMSAttrSmimeMSEncryptionKeyPrefs: c_int = 4;
pub const kCMSAttrSigningTime: c_int = 8;
pub const kCMSAttrAppleCodesigningHashAgility: c_int = 16;
pub const kCMSAttrAppleCodesigningHashAgilityV2: c_int = 32;
pub const kCMSAttrAppleExpirationTime: c_int = 64;
const enum_unnamed_1158 = c_uint;
pub extern fn CMSEncoderAddSignedAttributes(cmsEncoder: CMSEncoderRef, signedAttributes: CMSSignedAttributes) OSStatus;
pub const CMSCertificateChainMode = u32;
pub const kCMSCertificateNone: c_int = 0;
pub const kCMSCertificateSignerOnly: c_int = 1;
pub const kCMSCertificateChain: c_int = 2;
pub const kCMSCertificateChainWithRoot: c_int = 3;
pub const kCMSCertificateChainWithRootOrFail: c_int = 4;
const enum_unnamed_1159 = c_uint;
pub extern fn CMSEncoderSetCertificateChainMode(cmsEncoder: CMSEncoderRef, chainMode: CMSCertificateChainMode) OSStatus;
pub extern fn CMSEncoderGetCertificateChainMode(cmsEncoder: CMSEncoderRef, chainModeOut: [*c]CMSCertificateChainMode) OSStatus;
pub extern fn CMSEncoderUpdateContent(cmsEncoder: CMSEncoderRef, content: ?*const anyopaque, contentLen: usize) OSStatus;
pub extern fn CMSEncoderCopyEncodedContent(cmsEncoder: CMSEncoderRef, encodedContentOut: [*c]CFDataRef) OSStatus;
pub extern fn CMSEncode(signers: CFTypeRef, recipients: CFTypeRef, eContentType: [*c]const SecAsn1Oid, detachedContent: Boolean, signedAttributes: CMSSignedAttributes, content: ?*const anyopaque, contentLen: usize, encodedContentOut: [*c]CFDataRef) OSStatus;
pub extern fn CMSEncodeContent(signers: CFTypeRef, recipients: CFTypeRef, eContentTypeOID: CFTypeRef, detachedContent: Boolean, signedAttributes: CMSSignedAttributes, content: ?*const anyopaque, contentLen: usize, encodedContentOut: [*c]CFDataRef) OSStatus;
pub extern fn CMSEncoderCopySignerTimestamp(cmsEncoder: CMSEncoderRef, signerIndex: usize, timestamp: [*c]CFAbsoluteTime) OSStatus;
pub extern fn CMSEncoderCopySignerTimestampWithPolicy(cmsEncoder: CMSEncoderRef, timeStampPolicy: CFTypeRef, signerIndex: usize, timestamp: [*c]CFAbsoluteTime) OSStatus;
pub const struct_SSLContext = opaque {};
pub const SSLContextRef = ?*struct_SSLContext;
pub const SSLConnectionRef = ?*const anyopaque;
pub const SSLSessionOption = c_int;
pub const kSSLSessionOptionBreakOnServerAuth: c_int = 0;
pub const kSSLSessionOptionBreakOnCertRequested: c_int = 1;
pub const kSSLSessionOptionBreakOnClientAuth: c_int = 2;
pub const kSSLSessionOptionFalseStart: c_int = 3;
pub const kSSLSessionOptionSendOneByteRecord: c_int = 4;
pub const kSSLSessionOptionAllowServerIdentityChange: c_int = 5;
pub const kSSLSessionOptionFallback: c_int = 6;
pub const kSSLSessionOptionBreakOnClientHello: c_int = 7;
pub const kSSLSessionOptionAllowRenegotiation: c_int = 8;
pub const kSSLSessionOptionEnableSessionTickets: c_int = 9;
const enum_unnamed_1160 = c_uint;
pub const SSLSessionState = c_int;
pub const kSSLIdle: c_int = 0;
pub const kSSLHandshake: c_int = 1;
pub const kSSLConnected: c_int = 2;
pub const kSSLClosed: c_int = 3;
pub const kSSLAborted: c_int = 4;
const enum_unnamed_1161 = c_uint;
pub const SSLClientCertificateState = c_int;
pub const kSSLClientCertNone: c_int = 0;
pub const kSSLClientCertRequested: c_int = 1;
pub const kSSLClientCertSent: c_int = 2;
pub const kSSLClientCertRejected: c_int = 3;
const enum_unnamed_1162 = c_uint;
pub const SSLReadFunc = ?*const fn (SSLConnectionRef, ?*anyopaque, [*c]usize) callconv(.C) OSStatus;
pub const SSLWriteFunc = ?*const fn (SSLConnectionRef, ?*const anyopaque, [*c]usize) callconv(.C) OSStatus;
pub const SSLProtocolSide = c_int;
pub const kSSLServerSide: c_int = 0;
pub const kSSLClientSide: c_int = 1;
const enum_unnamed_1163 = c_uint;
pub const SSLConnectionType = c_int;
pub const kSSLStreamType: c_int = 0;
pub const kSSLDatagramType: c_int = 1;
const enum_unnamed_1164 = c_uint;
pub extern const kSSLSessionConfig_default: CFStringRef;
pub extern const kSSLSessionConfig_ATSv1: CFStringRef;
pub extern const kSSLSessionConfig_ATSv1_noPFS: CFStringRef;
pub extern const kSSLSessionConfig_standard: CFStringRef;
pub extern const kSSLSessionConfig_RC4_fallback: CFStringRef;
pub extern const kSSLSessionConfig_TLSv1_fallback: CFStringRef;
pub extern const kSSLSessionConfig_TLSv1_RC4_fallback: CFStringRef;
pub extern const kSSLSessionConfig_legacy: CFStringRef;
pub extern const kSSLSessionConfig_legacy_DHE: CFStringRef;
pub extern const kSSLSessionConfig_anonymous: CFStringRef;
pub extern const kSSLSessionConfig_3DES_fallback: CFStringRef;
pub extern const kSSLSessionConfig_TLSv1_3DES_fallback: CFStringRef;
pub extern fn SSLContextGetTypeID() CFTypeID;
pub extern fn SSLCreateContext(alloc: CFAllocatorRef, protocolSide: SSLProtocolSide, connectionType: SSLConnectionType) SSLContextRef;
pub extern fn SSLNewContext(isServer: Boolean, contextPtr: [*c]SSLContextRef) OSStatus;
pub extern fn SSLDisposeContext(context: SSLContextRef) OSStatus;
pub extern fn SSLGetSessionState(context: SSLContextRef, state: [*c]SSLSessionState) OSStatus;
pub extern fn SSLSetSessionOption(context: SSLContextRef, option: SSLSessionOption, value: Boolean) OSStatus;
pub extern fn SSLGetSessionOption(context: SSLContextRef, option: SSLSessionOption, value: [*c]Boolean) OSStatus;
pub extern fn SSLSetIOFuncs(context: SSLContextRef, readFunc: SSLReadFunc, writeFunc: SSLWriteFunc) OSStatus;
pub extern fn SSLSetSessionConfig(context: SSLContextRef, config: CFStringRef) OSStatus;
pub extern fn SSLSetProtocolVersionMin(context: SSLContextRef, minVersion: SSLProtocol) OSStatus;
pub extern fn SSLGetProtocolVersionMin(context: SSLContextRef, minVersion: [*c]SSLProtocol) OSStatus;
pub extern fn SSLSetProtocolVersionMax(context: SSLContextRef, maxVersion: SSLProtocol) OSStatus;
pub extern fn SSLGetProtocolVersionMax(context: SSLContextRef, maxVersion: [*c]SSLProtocol) OSStatus;
pub extern fn SSLSetProtocolVersionEnabled(context: SSLContextRef, protocol: SSLProtocol, enable: Boolean) OSStatus;
pub extern fn SSLGetProtocolVersionEnabled(context: SSLContextRef, protocol: SSLProtocol, enable: [*c]Boolean) OSStatus;
pub extern fn SSLSetProtocolVersion(context: SSLContextRef, version: SSLProtocol) OSStatus;
pub extern fn SSLGetProtocolVersion(context: SSLContextRef, protocol: [*c]SSLProtocol) OSStatus;
pub extern fn SSLSetCertificate(context: SSLContextRef, certRefs: CFArrayRef) OSStatus;
pub extern fn SSLSetConnection(context: SSLContextRef, connection: SSLConnectionRef) OSStatus;
pub extern fn SSLGetConnection(context: SSLContextRef, connection: [*c]SSLConnectionRef) OSStatus;
pub extern fn SSLSetPeerDomainName(context: SSLContextRef, peerName: [*c]const u8, peerNameLen: usize) OSStatus;
pub extern fn SSLGetPeerDomainNameLength(context: SSLContextRef, peerNameLen: [*c]usize) OSStatus;
pub extern fn SSLGetPeerDomainName(context: SSLContextRef, peerName: [*c]u8, peerNameLen: [*c]usize) OSStatus;
pub extern fn SSLCopyRequestedPeerNameLength(ctx: SSLContextRef, peerNameLen: [*c]usize) OSStatus;
pub extern fn SSLCopyRequestedPeerName(context: SSLContextRef, peerName: [*c]u8, peerNameLen: [*c]usize) OSStatus;
pub extern fn SSLSetDatagramHelloCookie(dtlsContext: SSLContextRef, cookie: ?*const anyopaque, cookieLen: usize) OSStatus;
pub extern fn SSLSetMaxDatagramRecordSize(dtlsContext: SSLContextRef, maxSize: usize) OSStatus;
pub extern fn SSLGetMaxDatagramRecordSize(dtlsContext: SSLContextRef, maxSize: [*c]usize) OSStatus;
pub extern fn SSLGetNegotiatedProtocolVersion(context: SSLContextRef, protocol: [*c]SSLProtocol) OSStatus;
pub extern fn SSLGetNumberSupportedCiphers(context: SSLContextRef, numCiphers: [*c]usize) OSStatus;
pub extern fn SSLGetSupportedCiphers(context: SSLContextRef, ciphers: [*c]SSLCipherSuite, numCiphers: [*c]usize) OSStatus;
pub extern fn SSLGetNumberEnabledCiphers(context: SSLContextRef, numCiphers: [*c]usize) OSStatus;
pub extern fn SSLSetEnabledCiphers(context: SSLContextRef, ciphers: [*c]const SSLCipherSuite, numCiphers: usize) OSStatus;
pub extern fn SSLGetEnabledCiphers(context: SSLContextRef, ciphers: [*c]SSLCipherSuite, numCiphers: [*c]usize) OSStatus;
pub extern fn SSLSetSessionTicketsEnabled(context: SSLContextRef, enabled: Boolean) OSStatus;
pub extern fn SSLSetEnableCertVerify(context: SSLContextRef, enableVerify: Boolean) OSStatus;
pub extern fn SSLGetEnableCertVerify(context: SSLContextRef, enableVerify: [*c]Boolean) OSStatus;
pub extern fn SSLSetAllowsExpiredCerts(context: SSLContextRef, allowsExpired: Boolean) OSStatus;
pub extern fn SSLGetAllowsExpiredCerts(context: SSLContextRef, allowsExpired: [*c]Boolean) OSStatus;
pub extern fn SSLSetAllowsExpiredRoots(context: SSLContextRef, allowsExpired: Boolean) OSStatus;
pub extern fn SSLGetAllowsExpiredRoots(context: SSLContextRef, allowsExpired: [*c]Boolean) OSStatus;
pub extern fn SSLSetAllowsAnyRoot(context: SSLContextRef, anyRoot: Boolean) OSStatus;
pub extern fn SSLGetAllowsAnyRoot(context: SSLContextRef, anyRoot: [*c]Boolean) OSStatus;
pub extern fn SSLSetTrustedRoots(context: SSLContextRef, trustedRoots: CFArrayRef, replaceExisting: Boolean) OSStatus;
pub extern fn SSLCopyTrustedRoots(context: SSLContextRef, trustedRoots: [*c]CFArrayRef) OSStatus;
pub extern fn SSLCopyPeerCertificates(context: SSLContextRef, certs: [*c]CFArrayRef) OSStatus;
pub extern fn SSLCopyPeerTrust(context: SSLContextRef, trust: [*c]SecTrustRef) OSStatus;
pub extern fn SSLSetPeerID(context: SSLContextRef, peerID: ?*const anyopaque, peerIDLen: usize) OSStatus;
pub extern fn SSLGetPeerID(context: SSLContextRef, peerID: [*c]?*const anyopaque, peerIDLen: [*c]usize) OSStatus;
pub extern fn SSLGetNegotiatedCipher(context: SSLContextRef, cipherSuite: [*c]SSLCipherSuite) OSStatus;
pub extern fn SSLSetALPNProtocols(context: SSLContextRef, protocols: CFArrayRef) OSStatus;
pub extern fn SSLCopyALPNProtocols(context: SSLContextRef, protocols: [*c]CFArrayRef) OSStatus;
pub extern fn SSLSetOCSPResponse(context: SSLContextRef, response: CFDataRef) OSStatus;
pub extern fn SSLSetEncryptionCertificate(context: SSLContextRef, certRefs: CFArrayRef) OSStatus;
pub const SSLAuthenticate = c_int;
pub const kNeverAuthenticate: c_int = 0;
pub const kAlwaysAuthenticate: c_int = 1;
pub const kTryAuthenticate: c_int = 2;
const enum_unnamed_1165 = c_uint;
pub extern fn SSLSetClientSideAuthenticate(context: SSLContextRef, auth: SSLAuthenticate) OSStatus;
pub extern fn SSLAddDistinguishedName(context: SSLContextRef, derDN: ?*const anyopaque, derDNLen: usize) OSStatus;
pub extern fn SSLSetCertificateAuthorities(context: SSLContextRef, certificateOrArray: CFTypeRef, replaceExisting: Boolean) OSStatus;
pub extern fn SSLCopyCertificateAuthorities(context: SSLContextRef, certificates: [*c]CFArrayRef) OSStatus;
pub extern fn SSLCopyDistinguishedNames(context: SSLContextRef, names: [*c]CFArrayRef) OSStatus;
pub extern fn SSLGetClientCertificateState(context: SSLContextRef, clientState: [*c]SSLClientCertificateState) OSStatus;
pub extern fn SSLSetDiffieHellmanParams(context: SSLContextRef, dhParams: ?*const anyopaque, dhParamsLen: usize) OSStatus;
pub extern fn SSLGetDiffieHellmanParams(context: SSLContextRef, dhParams: [*c]?*const anyopaque, dhParamsLen: [*c]usize) OSStatus;
pub extern fn SSLSetRsaBlinding(context: SSLContextRef, blinding: Boolean) OSStatus;
pub extern fn SSLGetRsaBlinding(context: SSLContextRef, blinding: [*c]Boolean) OSStatus;
pub extern fn SSLHandshake(context: SSLContextRef) OSStatus;
pub extern fn SSLReHandshake(context: SSLContextRef) OSStatus;
pub extern fn SSLWrite(context: SSLContextRef, data: ?*const anyopaque, dataLength: usize, processed: [*c]usize) OSStatus;
pub extern fn SSLRead(context: SSLContextRef, data: ?*anyopaque, dataLength: usize, processed: [*c]usize) OSStatus;
pub extern fn SSLGetBufferedReadSize(context: SSLContextRef, bufferSize: [*c]usize) OSStatus;
pub extern fn SSLGetDatagramWriteSize(dtlsContext: SSLContextRef, bufSize: [*c]usize) OSStatus;
pub extern fn SSLClose(context: SSLContextRef) OSStatus;
pub extern fn SSLSetError(context: SSLContextRef, status: OSStatus) OSStatus;
pub extern const kSecTransformErrorDomain: CFStringRef;
pub extern const kSecTransformPreviousErrorKey: CFStringRef;
pub extern const kSecTransformAbortOriginatorKey: CFStringRef;
pub const kSecTransformErrorAttributeNotFound: c_int = 1;
pub const kSecTransformErrorInvalidOperation: c_int = 2;
pub const kSecTransformErrorNotInitializedCorrectly: c_int = 3;
pub const kSecTransformErrorMoreThanOneOutput: c_int = 4;
pub const kSecTransformErrorInvalidInputDictionary: c_int = 5;
pub const kSecTransformErrorInvalidAlgorithm: c_int = 6;
pub const kSecTransformErrorInvalidLength: c_int = 7;
pub const kSecTransformErrorInvalidType: c_int = 8;
pub const kSecTransformErrorInvalidInput: c_int = 10;
pub const kSecTransformErrorNameAlreadyRegistered: c_int = 11;
pub const kSecTransformErrorUnsupportedAttribute: c_int = 12;
pub const kSecTransformOperationNotSupportedOnGroup: c_int = 13;
pub const kSecTransformErrorMissingParameter: c_int = 14;
pub const kSecTransformErrorInvalidConnection: c_int = 15;
pub const kSecTransformTransformIsExecuting: c_int = 16;
pub const kSecTransformInvalidOverride: c_int = 17;
pub const kSecTransformTransformIsNotRegistered: c_int = 18;
pub const kSecTransformErrorAbortInProgress: c_int = 19;
pub const kSecTransformErrorAborted: c_int = 20;
pub const kSecTransformInvalidArgument: c_int = 21;
const enum_unnamed_1166 = c_uint;
pub const SecTransformRef = CFTypeRef;
pub const SecGroupTransformRef = CFTypeRef;
pub extern fn SecTransformGetTypeID() CFTypeID;
pub extern fn SecGroupTransformGetTypeID() CFTypeID;
pub extern const kSecTransformInputAttributeName: CFStringRef;
pub extern const kSecTransformOutputAttributeName: CFStringRef;
pub extern const kSecTransformDebugAttributeName: CFStringRef;
pub extern const kSecTransformTransformName: CFStringRef;
pub extern const kSecTransformAbortAttributeName: CFStringRef;
pub extern fn SecTransformCreateFromExternalRepresentation(dictionary: CFDictionaryRef, @"error": [*c]CFErrorRef) SecTransformRef;
pub extern fn SecTransformCopyExternalRepresentation(transformRef: SecTransformRef) CFDictionaryRef;
pub extern fn SecTransformCreateGroupTransform() SecGroupTransformRef;
pub extern fn SecTransformConnectTransforms(sourceTransformRef: SecTransformRef, sourceAttributeName: CFStringRef, destinationTransformRef: SecTransformRef, destinationAttributeName: CFStringRef, group: SecGroupTransformRef, @"error": [*c]CFErrorRef) SecGroupTransformRef;
pub extern fn SecTransformSetAttribute(transformRef: SecTransformRef, key: CFStringRef, value: CFTypeRef, @"error": [*c]CFErrorRef) Boolean;
pub extern fn SecTransformGetAttribute(transformRef: SecTransformRef, key: CFStringRef) CFTypeRef;
pub extern fn SecTransformFindByName(transform: SecGroupTransformRef, name: CFStringRef) SecTransformRef;
pub extern fn SecTransformExecute(transformRef: SecTransformRef, errorRef: [*c]CFErrorRef) CFTypeRef; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecTransform.h:588:16: warning: unsupported type: 'BlockPointer'
pub const SecMessageBlock = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecTransform.h:588:16
pub extern fn SecTransformExecuteAsync(transformRef: SecTransformRef, deliveryQueue: dispatch_queue_t, deliveryBlock: SecMessageBlock) void;
pub const SecTransformMetaAttributeType = CFIndex;
pub const kSecTransformMetaAttributeValue: c_int = 0;
pub const kSecTransformMetaAttributeName: c_int = 1;
pub const kSecTransformMetaAttributeRef: c_int = 2;
pub const kSecTransformMetaAttributeRequired: c_int = 3;
pub const kSecTransformMetaAttributeRequiresOutboundConnection: c_int = 4;
pub const kSecTransformMetaAttributeDeferred: c_int = 5;
pub const kSecTransformMetaAttributeStream: c_int = 6;
pub const kSecTransformMetaAttributeCanCycle: c_int = 7;
pub const kSecTransformMetaAttributeExternalize: c_int = 8;
pub const kSecTransformMetaAttributeHasOutboundConnections: c_int = 9;
pub const kSecTransformMetaAttributeHasInboundConnection: c_int = 10;
const enum_unnamed_1167 = c_uint;
pub const SecTransformAttributeRef = CFTypeRef;
pub const SecTransformStringOrAttributeRef = CFTypeRef; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecCustomTransform.h:407:32: warning: unsupported type: 'BlockPointer'
pub const SecTransformActionBlock = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecCustomTransform.h:407:32
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecCustomTransform.h:429:32: warning: unsupported type: 'BlockPointer'
pub const SecTransformAttributeActionBlock = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecCustomTransform.h:429:32
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecCustomTransform.h:459:32: warning: unsupported type: 'BlockPointer'
pub const SecTransformDataBlock = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecCustomTransform.h:459:32
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecCustomTransform.h:475:33: warning: unsupported type: 'BlockPointer'
pub const SecTransformInstanceBlock = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecCustomTransform.h:475:33
pub const struct_OpaqueSecTransformImplementation = opaque {};
pub const SecTransformImplementationRef = ?*const struct_OpaqueSecTransformImplementation;
pub extern fn SecTransformSetAttributeAction(ref: SecTransformImplementationRef, action: CFStringRef, attribute: SecTransformStringOrAttributeRef, newAction: SecTransformAttributeActionBlock) CFErrorRef;
pub extern fn SecTransformSetDataAction(ref: SecTransformImplementationRef, action: CFStringRef, newAction: SecTransformDataBlock) CFErrorRef;
pub extern fn SecTransformSetTransformAction(ref: SecTransformImplementationRef, action: CFStringRef, newAction: SecTransformActionBlock) CFErrorRef;
pub extern fn SecTranformCustomGetAttribute(ref: SecTransformImplementationRef, attribute: SecTransformStringOrAttributeRef, @"type": SecTransformMetaAttributeType) CFTypeRef;
pub extern fn SecTransformCustomGetAttribute(ref: SecTransformImplementationRef, attribute: SecTransformStringOrAttributeRef, @"type": SecTransformMetaAttributeType) CFTypeRef;
pub extern fn SecTransformCustomSetAttribute(ref: SecTransformImplementationRef, attribute: SecTransformStringOrAttributeRef, @"type": SecTransformMetaAttributeType, value: CFTypeRef) CFTypeRef;
pub extern fn SecTransformPushbackAttribute(ref: SecTransformImplementationRef, attribute: SecTransformStringOrAttributeRef, value: CFTypeRef) CFTypeRef;
pub const SecTransformCreateFP = ?*const fn (CFStringRef, SecTransformRef, SecTransformImplementationRef) callconv(.C) SecTransformInstanceBlock;
pub extern const kSecTransformActionCanExecute: CFStringRef;
pub extern const kSecTransformActionStartingExecution: CFStringRef;
pub extern const kSecTransformActionFinalize: CFStringRef;
pub extern const kSecTransformActionExternalizeExtraData: CFStringRef;
pub extern const kSecTransformActionProcessData: CFStringRef;
pub extern const kSecTransformActionInternalizeExtraData: CFStringRef;
pub extern const kSecTransformActionAttributeNotification: CFStringRef;
pub extern const kSecTransformActionAttributeValidation: CFStringRef;
pub extern fn SecTransformRegister(uniqueName: CFStringRef, createTransformFunction: SecTransformCreateFP, @"error": [*c]CFErrorRef) Boolean;
pub extern fn SecTransformCreate(name: CFStringRef, @"error": [*c]CFErrorRef) SecTransformRef;
pub extern fn SecTransformNoData() CFTypeRef;
pub extern const kSecBase64Encoding: CFStringRef;
pub extern const kSecBase32Encoding: CFStringRef;
pub extern const kSecZLibEncoding: CFStringRef;
pub extern const kSecEncodeTypeAttribute: CFStringRef;
pub extern const kSecLineLength64: CFStringRef;
pub extern const kSecLineLength76: CFStringRef;
pub extern const kSecEncodeLineLengthAttribute: CFStringRef;
pub extern const kSecCompressionRatio: CFStringRef;
pub extern fn SecEncodeTransformCreate(encodeType: CFTypeRef, @"error": [*c]CFErrorRef) SecTransformRef;
pub extern const kSecDecodeTypeAttribute: CFStringRef;
pub extern fn SecDecodeTransformCreate(DecodeType: CFTypeRef, @"error": [*c]CFErrorRef) SecTransformRef;
pub extern const kSecDigestMD2: CFStringRef;
pub extern const kSecDigestMD4: CFStringRef;
pub extern const kSecDigestMD5: CFStringRef;
pub extern const kSecDigestSHA1: CFStringRef;
pub extern const kSecDigestSHA2: CFStringRef;
pub extern const kSecDigestHMACMD5: CFStringRef;
pub extern const kSecDigestHMACSHA1: CFStringRef;
pub extern const kSecDigestHMACSHA2: CFStringRef;
pub extern const kSecDigestTypeAttribute: CFStringRef;
pub extern const kSecDigestLengthAttribute: CFStringRef;
pub extern const kSecDigestHMACKeyAttribute: CFStringRef;
pub extern fn SecDigestTransformCreate(digestType: CFTypeRef, digestLength: CFIndex, @"error": [*c]CFErrorRef) SecTransformRef;
pub extern fn SecDigestTransformGetTypeID() CFTypeID;
pub extern const kSecPaddingNoneKey: CFStringRef;
pub extern const kSecPaddingPKCS1Key: CFStringRef;
pub extern const kSecPaddingPKCS5Key: CFStringRef;
pub extern const kSecPaddingPKCS7Key: CFStringRef;
pub extern const kSecPaddingOAEPKey: CFStringRef;
pub extern const kSecModeNoneKey: CFStringRef;
pub extern const kSecModeECBKey: CFStringRef;
pub extern const kSecModeCBCKey: CFStringRef;
pub extern const kSecModeCFBKey: CFStringRef;
pub extern const kSecModeOFBKey: CFStringRef;
pub extern const kSecEncryptKey: CFStringRef;
pub extern const kSecPaddingKey: CFStringRef;
pub extern const kSecIVKey: CFStringRef;
pub extern const kSecEncryptionMode: CFStringRef;
pub extern const kSecOAEPMessageLengthAttributeName: CFStringRef;
pub extern const kSecOAEPEncodingParametersAttributeName: CFStringRef;
pub extern const kSecOAEPMGF1DigestAlgorithmAttributeName: CFStringRef;
pub extern fn SecEncryptTransformCreate(keyRef: SecKeyRef, @"error": [*c]CFErrorRef) SecTransformRef;
pub extern fn SecDecryptTransformCreate(keyRef: SecKeyRef, @"error": [*c]CFErrorRef) SecTransformRef;
pub extern fn SecDecryptTransformGetTypeID() CFTypeID;
pub extern fn SecEncryptTransformGetTypeID() CFTypeID;
pub extern const kSecKeyAttributeName: CFStringRef;
pub extern const kSecSignatureAttributeName: CFStringRef;
pub extern const kSecInputIsAttributeName: CFStringRef;
pub extern const kSecInputIsPlainText: CFStringRef;
pub extern const kSecInputIsDigest: CFStringRef;
pub extern const kSecInputIsRaw: CFStringRef;
pub extern fn SecSignTransformCreate(key: SecKeyRef, @"error": [*c]CFErrorRef) SecTransformRef;
pub extern fn SecVerifyTransformCreate(key: SecKeyRef, signature: CFDataRef, @"error": [*c]CFErrorRef) SecTransformRef;
pub extern fn SecTransformCreateReadTransformWithReadStream(inputStream: CFReadStreamRef) SecTransformRef;
pub const DERByte = u8;
pub const DERShort = u16;
pub const DERInt = u32;
pub const DERLong = u64;
pub const DERSize = usize;
pub const DERBool = bool;
pub const DERTag = DERLong;
pub const DERItem = extern struct {
    data: [*c]DERByte,
    length: DERSize,
};
pub extern const oidRsa: DERItem;
pub extern const oidMd2Rsa: DERItem;
pub extern const oidMd4Rsa: DERItem;
pub extern const oidMd5Rsa: DERItem;
pub extern const oidSha1Rsa: DERItem;
pub extern const oidSha256Rsa: DERItem;
pub extern const oidSha384Rsa: DERItem;
pub extern const oidSha512Rsa: DERItem;
pub extern const oidSha224Rsa: DERItem;
pub extern const oidEcPubKey: DERItem;
pub extern const oidSha1Ecdsa: DERItem;
pub extern const oidSha224Ecdsa: DERItem;
pub extern const oidSha256Ecdsa: DERItem;
pub extern const oidSha384Ecdsa: DERItem;
pub extern const oidSha512Ecdsa: DERItem;
pub extern const oidSha1Dsa: DERItem;
pub extern const oidMd2: DERItem;
pub extern const oidMd4: DERItem;
pub extern const oidMd5: DERItem;
pub extern const oidSha1: DERItem;
pub extern const oidSha1DsaOIW: DERItem;
pub extern const oidSha1DsaCommonOIW: DERItem;
pub extern const oidSha1RsaOIW: DERItem;
pub extern const oidSha256: DERItem;
pub extern const oidSha384: DERItem;
pub extern const oidSha512: DERItem;
pub extern const oidSha224: DERItem;
pub extern const oidFee: DERItem;
pub extern const oidMd5Fee: DERItem;
pub extern const oidSha1Fee: DERItem;
pub extern const oidEcPrime192v1: DERItem;
pub extern const oidEcPrime256v1: DERItem;
pub extern const oidAnsip384r1: DERItem;
pub extern const oidAnsip521r1: DERItem;
pub extern const oidSubjectKeyIdentifier: DERItem;
pub extern const oidKeyUsage: DERItem;
pub extern const oidPrivateKeyUsagePeriod: DERItem;
pub extern const oidSubjectAltName: DERItem;
pub extern const oidIssuerAltName: DERItem;
pub extern const oidBasicConstraints: DERItem;
pub extern const oidNameConstraints: DERItem;
pub extern const oidCrlDistributionPoints: DERItem;
pub extern const oidCertificatePolicies: DERItem;
pub extern const oidAnyPolicy: DERItem;
pub extern const oidPolicyMappings: DERItem;
pub extern const oidAuthorityKeyIdentifier: DERItem;
pub extern const oidPolicyConstraints: DERItem;
pub extern const oidExtendedKeyUsage: DERItem;
pub extern const oidAnyExtendedKeyUsage: DERItem;
pub extern const oidInhibitAnyPolicy: DERItem;
pub extern const oidAuthorityInfoAccess: DERItem;
pub extern const oidSubjectInfoAccess: DERItem;
pub extern const oidAdOCSP: DERItem;
pub extern const oidAdCAIssuer: DERItem;
pub extern const oidNetscapeCertType: DERItem;
pub extern const oidEntrustVersInfo: DERItem;
pub extern const oidMSNTPrincipalName: DERItem;
pub extern const oidQtCps: DERItem;
pub extern const oidQtUNotice: DERItem;
pub extern const oidCommonName: DERItem;
pub extern const oidCountryName: DERItem;
pub extern const oidLocalityName: DERItem;
pub extern const oidStateOrProvinceName: DERItem;
pub extern const oidOrganizationName: DERItem;
pub extern const oidOrganizationalUnitName: DERItem;
pub extern const oidDescription: DERItem;
pub extern const oidEmailAddress: DERItem;
pub extern const oidFriendlyName: DERItem;
pub extern const oidLocalKeyId: DERItem;
pub extern const oidExtendedKeyUsageServerAuth: DERItem;
pub extern const oidExtendedKeyUsageClientAuth: DERItem;
pub extern const oidExtendedKeyUsageCodeSigning: DERItem;
pub extern const oidExtendedKeyUsageEmailProtection: DERItem;
pub extern const oidExtendedKeyUsageTimeStamping: DERItem;
pub extern const oidExtendedKeyUsageOCSPSigning: DERItem;
pub extern const oidExtendedKeyUsageIPSec: DERItem;
pub extern const oidExtendedKeyUsageMicrosoftSGC: DERItem;
pub extern const oidExtendedKeyUsageNetscapeSGC: DERItem;
pub extern const oidGoogleEmbeddedSignedCertificateTimestamp: DERItem;
pub extern const oidGoogleOCSPSignedCertificateTimestamp: DERItem;
pub const struct___CSIdentity = opaque {};
pub const CSIdentityRef = ?*struct___CSIdentity;
pub const struct___CSIdentityQuery = opaque {};
pub const CSIdentityQueryRef = ?*struct___CSIdentityQuery;
pub extern const kCSIdentityGeneratePosixName: CFStringRef;
pub const kCSIdentityClassUser: c_int = 1;
pub const kCSIdentityClassGroup: c_int = 2;
const enum_unnamed_1168 = c_uint;
pub const CSIdentityClass = CFIndex;
pub const kCSIdentityFlagNone: c_int = 0;
pub const kCSIdentityFlagHidden: c_int = 1;
const enum_unnamed_1169 = c_uint;
pub const CSIdentityFlags = CFOptionFlags;
pub extern fn CSIdentityGetTypeID() CFTypeID;
pub extern fn CSIdentityCreate(allocator: CFAllocatorRef, identityClass: CSIdentityClass, fullName: CFStringRef, posixName: CFStringRef, flags: CSIdentityFlags, authority: CSIdentityAuthorityRef) CSIdentityRef;
pub extern fn CSIdentityCreateCopy(allocator: CFAllocatorRef, identity: CSIdentityRef) CSIdentityRef;
pub extern fn CSIdentityGetClass(identity: CSIdentityRef) CSIdentityClass;
pub extern fn CSIdentityGetAuthority(identity: CSIdentityRef) CSIdentityAuthorityRef;
pub extern fn CSIdentityGetUUID(identity: CSIdentityRef) CFUUIDRef;
pub extern fn CSIdentityGetFullName(identity: CSIdentityRef) CFStringRef;
pub extern fn CSIdentityGetPosixID(identity: CSIdentityRef) id_t;
pub extern fn CSIdentityGetPosixName(identity: CSIdentityRef) CFStringRef;
pub extern fn CSIdentityGetEmailAddress(identity: CSIdentityRef) CFStringRef;
pub extern fn CSIdentityGetImageURL(identity: CSIdentityRef) CFURLRef;
pub extern fn CSIdentityGetImageData(identity: CSIdentityRef) CFDataRef;
pub extern fn CSIdentityGetImageDataType(identity: CSIdentityRef) CFStringRef;
pub extern fn CSIdentityGetAliases(identity: CSIdentityRef) CFArrayRef;
pub extern fn CSIdentityIsMemberOfGroup(identity: CSIdentityRef, group: CSIdentityRef) Boolean;
pub extern fn CSIdentityIsHidden(identity: CSIdentityRef) Boolean;
pub extern fn CSIdentityCreatePersistentReference(allocator: CFAllocatorRef, identity: CSIdentityRef) CFDataRef;
pub extern fn CSIdentityIsEnabled(user: CSIdentityRef) Boolean;
pub extern fn CSIdentityAuthenticateUsingPassword(user: CSIdentityRef, password: CFStringRef) Boolean;
pub extern fn CSIdentityGetCertificate(user: CSIdentityRef) SecCertificateRef;
pub extern fn CSIdentityCreateGroupMembershipQuery(allocator: CFAllocatorRef, group: CSIdentityRef) CSIdentityQueryRef;
pub extern fn CSIdentitySetFullName(identity: CSIdentityRef, fullName: CFStringRef) void;
pub extern fn CSIdentitySetEmailAddress(identity: CSIdentityRef, emailAddress: CFStringRef) void;
pub extern fn CSIdentitySetImageURL(identity: CSIdentityRef, url: CFURLRef) void;
pub extern fn CSIdentitySetImageData(identity: CSIdentityRef, imageData: CFDataRef, imageDataType: CFStringRef) void;
pub extern fn CSIdentityAddAlias(identity: CSIdentityRef, alias: CFStringRef) void;
pub extern fn CSIdentityRemoveAlias(identity: CSIdentityRef, alias: CFStringRef) void;
pub extern fn CSIdentityAddMember(group: CSIdentityRef, member: CSIdentityRef) void;
pub extern fn CSIdentityRemoveMember(group: CSIdentityRef, member: CSIdentityRef) void;
pub extern fn CSIdentitySetIsEnabled(user: CSIdentityRef, isEnabled: Boolean) void;
pub extern fn CSIdentitySetPassword(user: CSIdentityRef, password: CFStringRef) void;
pub extern fn CSIdentitySetCertificate(user: CSIdentityRef, certificate: SecCertificateRef) void;
pub extern fn CSIdentityDelete(identity: CSIdentityRef) void;
pub extern fn CSIdentityCommit(identity: CSIdentityRef, authorization: AuthorizationRef, @"error": [*c]CFErrorRef) Boolean;
pub const kCSIdentityCommitCompleted: c_int = 1;
const enum_unnamed_1170 = c_uint;
pub const CSIdentityStatusUpdatedCallback = ?*const fn (CSIdentityRef, CFIndex, CFErrorRef, ?*anyopaque) callconv(.C) void;
pub const struct_CSIdentityClientContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: CFAllocatorRetainCallBack,
    release: CFAllocatorReleaseCallBack,
    copyDescription: CFAllocatorCopyDescriptionCallBack,
    statusUpdated: CSIdentityStatusUpdatedCallback,
};
pub const CSIdentityClientContext = struct_CSIdentityClientContext;
pub extern fn CSIdentityCommitAsynchronously(identity: CSIdentityRef, clientContext: [*c]const CSIdentityClientContext, runLoop: CFRunLoopRef, runLoopMode: CFStringRef, authorization: AuthorizationRef) Boolean;
pub extern fn CSIdentityIsCommitting(identity: CSIdentityRef) Boolean;
pub extern fn CSIdentityRemoveClient(identity: CSIdentityRef) void;
pub extern fn CSIdentityQueryGetTypeID() CFTypeID;
pub const kCSIdentityQueryGenerateUpdateEvents: c_int = 1;
pub const kCSIdentityQueryIncludeHiddenIdentities: c_int = 2;
const enum_unnamed_1171 = c_uint;
pub const CSIdentityQueryFlags = CFOptionFlags;
pub const kCSIdentityQueryStringEquals: c_int = 1;
pub const kCSIdentityQueryStringBeginsWith: c_int = 2;
const enum_unnamed_1172 = c_uint;
pub const CSIdentityQueryStringComparisonMethod = CFIndex;
pub extern fn CSIdentityQueryCreate(allocator: CFAllocatorRef, identityClass: CSIdentityClass, authority: CSIdentityAuthorityRef) CSIdentityQueryRef;
pub extern fn CSIdentityQueryCreateForName(allocator: CFAllocatorRef, name: CFStringRef, comparisonMethod: CSIdentityQueryStringComparisonMethod, identityClass: CSIdentityClass, authority: CSIdentityAuthorityRef) CSIdentityQueryRef;
pub extern fn CSIdentityQueryCreateForUUID(allocator: CFAllocatorRef, uuid: CFUUIDRef, authority: CSIdentityAuthorityRef) CSIdentityQueryRef;
pub extern fn CSIdentityQueryCreateForPosixID(allocator: CFAllocatorRef, posixID: id_t, identityClass: CSIdentityClass, authority: CSIdentityAuthorityRef) CSIdentityQueryRef;
pub extern fn CSIdentityQueryCreateForPersistentReference(allocator: CFAllocatorRef, referenceData: CFDataRef) CSIdentityQueryRef;
pub extern fn CSIdentityQueryCreateForCurrentUser(allocator: CFAllocatorRef) CSIdentityQueryRef;
pub extern fn CSIdentityQueryCopyResults(query: CSIdentityQueryRef) CFArrayRef;
pub extern fn CSIdentityQueryExecute(query: CSIdentityQueryRef, flags: CSIdentityQueryFlags, @"error": [*c]CFErrorRef) Boolean;
pub const kCSIdentityQueryEventSearchPhaseFinished: c_int = 1;
pub const kCSIdentityQueryEventResultsAdded: c_int = 2;
pub const kCSIdentityQueryEventResultsChanged: c_int = 3;
pub const kCSIdentityQueryEventResultsRemoved: c_int = 4;
pub const kCSIdentityQueryEventErrorOccurred: c_int = 5;
const enum_unnamed_1173 = c_uint;
pub const CSIdentityQueryEvent = CFIndex;
pub const CSIdentityQueryReceiveEventCallback = ?*const fn (CSIdentityQueryRef, CSIdentityQueryEvent, CFArrayRef, CFErrorRef, ?*anyopaque) callconv(.C) void;
pub const struct_CSIdentityQueryClientContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retainInfo: CFAllocatorRetainCallBack,
    releaseInfo: CFAllocatorReleaseCallBack,
    copyInfoDescription: CFAllocatorCopyDescriptionCallBack,
    receiveEvent: CSIdentityQueryReceiveEventCallback,
};
pub const CSIdentityQueryClientContext = struct_CSIdentityQueryClientContext;
pub extern fn CSIdentityQueryExecuteAsynchronously(query: CSIdentityQueryRef, flags: CSIdentityQueryFlags, clientContext: [*c]const CSIdentityQueryClientContext, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) Boolean;
pub extern fn CSIdentityQueryStop(query: CSIdentityQueryRef) void;
pub const kIconServices16PixelDataARGB: c_int = 1768108084;
pub const kIconServices32PixelDataARGB: c_int = 1768108085;
pub const kIconServices48PixelDataARGB: c_int = 1768108086;
pub const kIconServices128PixelDataARGB: c_int = 1768108087;
const enum_unnamed_1174 = c_uint;
pub const kIconServices256PixelDataARGB: c_int = 1768108088;
pub const kIconServices512PixelDataARGB: c_int = 1768108089;
pub const kIconServices1024PixelDataARGB: c_int = 1768108336;
pub const kThumbnail32BitData: c_int = 1769222962;
pub const kThumbnail8BitMask: c_int = 1949855083;
const enum_unnamed_1175 = c_uint;
pub const kHuge1BitMask: c_int = 1768122403;
pub const kHuge4BitData: c_int = 1768122420;
pub const kHuge8BitData: c_int = 1768122424;
pub const kHuge32BitData: c_int = 1768436530;
pub const kHuge8BitMask: c_int = 1748528491;
const enum_unnamed_1176 = c_uint;
pub const kLarge1BitMask: c_int = 1229147683;
pub const kLarge4BitData: c_int = 1768123444;
pub const kLarge8BitData: c_int = 1768123448;
pub const kLarge32BitData: c_int = 1768698674;
pub const kLarge8BitMask: c_int = 1815637355;
pub const kSmall1BitMask: c_int = 1768125219;
pub const kSmall4BitData: c_int = 1768125236;
pub const kSmall8BitData: c_int = 1768125240;
pub const kSmall32BitData: c_int = 1769157426;
pub const kSmall8BitMask: c_int = 1933077867;
pub const kMini1BitMask: c_int = 1768123683;
pub const kMini4BitData: c_int = 1768123700;
pub const kMini8BitData: c_int = 1768123704;
const enum_unnamed_1177 = c_uint;
pub const large1BitMask: c_int = 1229147683;
pub const large4BitData: c_int = 1768123444;
pub const large8BitData: c_int = 1768123448;
pub const small1BitMask: c_int = 1768125219;
pub const small4BitData: c_int = 1768125236;
pub const small8BitData: c_int = 1768125240;
pub const mini1BitMask: c_int = 1768123683;
pub const mini4BitData: c_int = 1768123700;
pub const mini8BitData: c_int = 1768123704;
const enum_unnamed_1178 = c_uint;
pub const kIconFamilyType: c_int = 1768124019;
const enum_unnamed_1179 = c_uint;
pub const struct_IconFamilyElement = extern struct {
    elementType: OSType,
    elementSize: SInt32,
    elementData: [1]u8,
};
pub const IconFamilyElement = struct_IconFamilyElement;
pub const struct_IconFamilyResource = extern struct {
    resourceType: OSType,
    resourceSize: SInt32,
    elements: [1]IconFamilyElement,
};
pub const IconFamilyResource = struct_IconFamilyResource;
pub const IconFamilyPtr = [*c]IconFamilyResource;
pub const IconFamilyHandle = [*c]IconFamilyPtr;
pub const kTileIconVariant: c_int = 1953066085;
pub const kRolloverIconVariant: c_int = 1870030194;
pub const kDropIconVariant: c_int = 1685221232;
pub const kOpenIconVariant: c_int = 1869636974;
pub const kOpenDropIconVariant: c_int = 1868853872;
const enum_unnamed_1180 = c_uint;
pub const kSleepRequest: c_int = 1;
pub const kSleepDemand: c_int = 2;
pub const kSleepWakeUp: c_int = 3;
pub const kSleepRevoke: c_int = 4;
pub const kSleepUnlock: c_int = 4;
pub const kSleepDeny: c_int = 5;
pub const kSleepNow: c_int = 6;
pub const kDozeDemand: c_int = 7;
pub const kDozeWakeUp: c_int = 8;
pub const kDozeRequest: c_int = 9;
pub const kEnterStandby: c_int = 10;
pub const kEnterRun: c_int = 11;
pub const kSuspendRequest: c_int = 12;
pub const kSuspendDemand: c_int = 13;
pub const kSuspendRevoke: c_int = 14;
pub const kSuspendWakeUp: c_int = 15;
pub const kGetPowerLevel: c_int = 16;
pub const kSetPowerLevel: c_int = 17;
pub const kDeviceInitiatedWake: c_int = 18;
pub const kWakeToDoze: c_int = 19;
pub const kDozeToFullWakeUp: c_int = 20;
pub const kGetPowerInfo: c_int = 21;
pub const kGetWakeOnNetInfo: c_int = 22;
pub const kSuspendWakeToDoze: c_int = 23;
pub const kEnterIdle: c_int = 24;
pub const kStillIdle: c_int = 25;
pub const kExitIdle: c_int = 26;
const enum_unnamed_1181 = c_uint;
pub const noCalls: c_int = 1;
pub const noRequest: c_int = 2;
pub const slpQType: c_int = 16;
pub const sleepQType: c_int = 16;
const enum_unnamed_1182 = c_uint;
pub const OverallAct: c_int = 0;
pub const UsrActivity: c_int = 1;
pub const NetActivity: c_int = 2;
pub const HDActivity: c_int = 3;
pub const IdleActivity: c_int = 4;
const enum_unnamed_1183 = c_uint;
pub const SleepQRec = struct_SleepQRec;
pub const SleepQRecPtr = [*c]SleepQRec;
pub const SleepQProcPtr = ?*const fn (c_long, SleepQRecPtr) callconv(.C) c_long;
pub const SleepQUPP = SleepQProcPtr;
pub const struct_SleepQRec = extern struct {
    sleepQLink: SleepQRecPtr,
    sleepQType: c_short,
    sleepQProc: SleepQUPP,
    sleepQFlags: c_short,
};
pub extern fn NewSleepQUPP(userRoutine: SleepQProcPtr) SleepQUPP;
pub extern fn DisposeSleepQUPP(userUPP: SleepQUPP) void;
pub extern fn InvokeSleepQUPP(message: c_long, qRecPtr: SleepQRecPtr, userUPP: SleepQUPP) c_long;
pub extern fn GetCPUSpeed() c_long;
pub extern fn SleepQInstall(qRecPtr: SleepQRecPtr) void;
pub extern fn SleepQRemove(qRecPtr: SleepQRecPtr) void;
pub extern fn MaximumProcessorSpeed() c_short;
pub extern fn MinimumProcessorSpeed() c_short;
pub extern fn CurrentProcessorSpeed() c_short;
pub extern fn BatteryCount() c_short;
pub extern fn UpdateSystemActivity(activity: UInt8) OSErr;
pub const KCRef = SecKeychainRef;
pub const KCItemRef = SecKeychainItemRef;
pub const KCSearchRef = SecKeychainSearchRef;
pub const KCAttribute = SecKeychainAttribute;
pub const KCAttributeList = SecKeychainAttributeList;
pub const KCAttrType = SecKeychainAttrType;
pub const KCStatus = SecKeychainStatus;
pub const KCEvent = UInt16;
pub const kIdleKCEvent: c_int = 0;
pub const kLockKCEvent: c_int = 1;
pub const kUnlockKCEvent: c_int = 2;
pub const kAddKCEvent: c_int = 3;
pub const kDeleteKCEvent: c_int = 4;
pub const kUpdateKCEvent: c_int = 5;
pub const kPasswordChangedKCEvent: c_int = 6;
pub const kSystemKCEvent: c_int = 8;
pub const kDefaultChangedKCEvent: c_int = 9;
pub const kDataAccessKCEvent: c_int = 10;
pub const kKeychainListChangedKCEvent: c_int = 11;
const enum_unnamed_1184 = c_uint;
pub const KCEventMask = UInt16;
pub const kIdleKCEventMask: c_int = 1;
pub const kLockKCEventMask: c_int = 2;
pub const kUnlockKCEventMask: c_int = 4;
pub const kAddKCEventMask: c_int = 8;
pub const kDeleteKCEventMask: c_int = 16;
pub const kUpdateKCEventMask: c_int = 32;
pub const kPasswordChangedKCEventMask: c_int = 64;
pub const kSystemEventKCEventMask: c_int = 256;
pub const kDefaultChangedKCEventMask: c_int = 512;
pub const kDataAccessKCEventMask: c_int = 1024;
pub const kEveryKCEventMask: c_int = 65535;
const enum_unnamed_1185 = c_uint;
pub const AFPServerSignature = [16]UInt8;
pub const KCPublicKeyHash = [20]UInt8;
pub const struct_KCCallbackInfo = extern struct {
    version: UInt32,
    item: KCItemRef,
    processID: [2]SInt32,
    event: [4]SInt32,
    keychain: KCRef,
};
pub const KCCallbackInfo = struct_KCCallbackInfo;
pub const kUnlockStateKCStatus: c_int = 1;
pub const kRdPermKCStatus: c_int = 2;
pub const kWrPermKCStatus: c_int = 4;
const enum_unnamed_1186 = c_uint;
pub const kCertificateKCItemClass: c_int = 1667592820;
pub const kAppleSharePasswordKCItemClass: c_int = 1634953328;
pub const kInternetPasswordKCItemClass: c_int = 1768842612;
pub const kGenericPasswordKCItemClass: c_int = 1734700656;
const enum_unnamed_1187 = c_uint;
pub const KCItemClass = FourCharCode;
pub const kClassKCItemAttr: c_int = 1668047219;
pub const kCreationDateKCItemAttr: c_int = 1667522932;
pub const kModDateKCItemAttr: c_int = 1835295092;
pub const kDescriptionKCItemAttr: c_int = 1684370275;
pub const kCommentKCItemAttr: c_int = 1768123764;
pub const kCreatorKCItemAttr: c_int = 1668445298;
pub const kTypeKCItemAttr: c_int = 1954115685;
pub const kScriptCodeKCItemAttr: c_int = 1935897200;
pub const kLabelKCItemAttr: c_int = 1818321516;
pub const kInvisibleKCItemAttr: c_int = 1768846953;
pub const kNegativeKCItemAttr: c_int = 1852139361;
pub const kCustomIconKCItemAttr: c_int = 1668641641;
pub const kAccountKCItemAttr: c_int = 1633903476;
pub const kServiceKCItemAttr: c_int = 1937138533;
pub const kGenericKCItemAttr: c_int = 1734700641;
pub const kSecurityDomainKCItemAttr: c_int = 1935961454;
pub const kServerKCItemAttr: c_int = 1936881266;
pub const kAuthTypeKCItemAttr: c_int = 1635023216;
pub const kPortKCItemAttr: c_int = 1886351988;
pub const kPathKCItemAttr: c_int = 1885434984;
pub const kVolumeKCItemAttr: c_int = 1986817381;
pub const kAddressKCItemAttr: c_int = 1633969266;
pub const kSignatureKCItemAttr: c_int = 1936943463;
pub const kProtocolKCItemAttr: c_int = 1886675820;
pub const kSubjectKCItemAttr: c_int = 1937072746;
pub const kCommonNameKCItemAttr: c_int = 1668161568;
pub const kIssuerKCItemAttr: c_int = 1769173877;
pub const kSerialNumberKCItemAttr: c_int = 1936614002;
pub const kEMailKCItemAttr: c_int = 1835100524;
pub const kPublicKeyHashKCItemAttr: c_int = 1752198009;
pub const kIssuerURLKCItemAttr: c_int = 1769304684;
pub const kEncryptKCItemAttr: c_int = 1701733234;
pub const kDecryptKCItemAttr: c_int = 1684366194;
pub const kSignKCItemAttr: c_int = 1936287598;
pub const kVerifyKCItemAttr: c_int = 1986359913;
pub const kWrapKCItemAttr: c_int = 2003984752;
pub const kUnwrapKCItemAttr: c_int = 1970173810;
pub const kStartDateKCItemAttr: c_int = 1935958388;
pub const kEndDateKCItemAttr: c_int = 1701077364;
const enum_unnamed_1188 = c_uint;
pub const KCItemAttr = FourCharCode;
pub const kKCAuthTypeNTLM: c_int = 1853123693;
pub const kKCAuthTypeMSN: c_int = 1836281441;
pub const kKCAuthTypeDPA: c_int = 1685086561;
pub const kKCAuthTypeRPA: c_int = 1919967585;
pub const kKCAuthTypeHTTPDigest: c_int = 1752462436;
pub const kKCAuthTypeDefault: c_int = 1684434036;
const enum_unnamed_1189 = c_uint;
pub const KCAuthType = FourCharCode;
pub const kKCProtocolTypeFTP: c_int = 1718906912;
pub const kKCProtocolTypeFTPAccount: c_int = 1718906977;
pub const kKCProtocolTypeHTTP: c_int = 1752462448;
pub const kKCProtocolTypeIRC: c_int = 1769104160;
pub const kKCProtocolTypeNNTP: c_int = 1852732528;
pub const kKCProtocolTypePOP3: c_int = 1886351411;
pub const kKCProtocolTypeSMTP: c_int = 1936553072;
pub const kKCProtocolTypeSOCKS: c_int = 1936685088;
pub const kKCProtocolTypeIMAP: c_int = 1768776048;
pub const kKCProtocolTypeLDAP: c_int = 1818517872;
pub const kKCProtocolTypeAppleTalk: c_int = 1635019883;
pub const kKCProtocolTypeAFP: c_int = 1634103328;
pub const kKCProtocolTypeTelnet: c_int = 1952803950;
const enum_unnamed_1190 = c_uint;
pub const KCProtocolType = FourCharCode;
pub const KCCertAddOptions = UInt32;
pub const kSecOptionReserved: c_int = 255;
pub const kCertUsageShift: c_int = 8;
pub const kCertUsageSigningAdd: c_int = 256;
pub const kCertUsageSigningAskAndAdd: c_int = 512;
pub const kCertUsageVerifyAdd: c_int = 1024;
pub const kCertUsageVerifyAskAndAdd: c_int = 2048;
pub const kCertUsageEncryptAdd: c_int = 4096;
pub const kCertUsageEncryptAskAndAdd: c_int = 8192;
pub const kCertUsageDecryptAdd: c_int = 16384;
pub const kCertUsageDecryptAskAndAdd: c_int = 32768;
pub const kCertUsageKeyExchAdd: c_int = 65536;
pub const kCertUsageKeyExchAskAndAdd: c_int = 131072;
pub const kCertUsageRootAdd: c_int = 262144;
pub const kCertUsageRootAskAndAdd: c_int = 524288;
pub const kCertUsageSSLAdd: c_int = 1048576;
pub const kCertUsageSSLAskAndAdd: c_int = 2097152;
pub const kCertUsageAllAdd: c_int = 2147483392;
const enum_unnamed_1191 = c_uint;
pub const KCVerifyStopOn = UInt16;
pub const kPolicyKCStopOn: c_int = 0;
pub const kNoneKCStopOn: c_int = 1;
pub const kFirstPassKCStopOn: c_int = 2;
pub const kFirstFailKCStopOn: c_int = 3;
const enum_unnamed_1192 = c_uint;
pub const KCCertSearchOptions = UInt32;
pub const kCertSearchShift: c_int = 0;
pub const kCertSearchSigningIgnored: c_int = 0;
pub const kCertSearchSigningAllowed: c_int = 1;
pub const kCertSearchSigningDisallowed: c_int = 2;
pub const kCertSearchSigningMask: c_int = 3;
pub const kCertSearchVerifyIgnored: c_int = 0;
pub const kCertSearchVerifyAllowed: c_int = 4;
pub const kCertSearchVerifyDisallowed: c_int = 8;
pub const kCertSearchVerifyMask: c_int = 12;
pub const kCertSearchEncryptIgnored: c_int = 0;
pub const kCertSearchEncryptAllowed: c_int = 16;
pub const kCertSearchEncryptDisallowed: c_int = 32;
pub const kCertSearchEncryptMask: c_int = 48;
pub const kCertSearchDecryptIgnored: c_int = 0;
pub const kCertSearchDecryptAllowed: c_int = 64;
pub const kCertSearchDecryptDisallowed: c_int = 128;
pub const kCertSearchDecryptMask: c_int = 192;
pub const kCertSearchWrapIgnored: c_int = 0;
pub const kCertSearchWrapAllowed: c_int = 256;
pub const kCertSearchWrapDisallowed: c_int = 512;
pub const kCertSearchWrapMask: c_int = 768;
pub const kCertSearchUnwrapIgnored: c_int = 0;
pub const kCertSearchUnwrapAllowed: c_int = 1024;
pub const kCertSearchUnwrapDisallowed: c_int = 2048;
pub const kCertSearchUnwrapMask: c_int = 3072;
pub const kCertSearchPrivKeyRequired: c_int = 4096;
pub const kCertSearchAny: c_int = 0;
const enum_unnamed_1193 = c_uint;
pub const kAnyPort: c_int = 0;
const enum_unnamed_1194 = c_uint;
pub const kAnyProtocol: c_int = 0;
pub const kAnyAuthType: c_int = 0;
const enum_unnamed_1195 = c_uint;
pub extern fn KCGetKeychainManagerVersion(returnVers: [*c]UInt32) OSStatus;
pub extern fn KCSetInteractionAllowed(state: Boolean) OSStatus;
pub extern fn KCIsInteractionAllowed() Boolean;
pub extern fn KCMakeKCRefFromFSRef(keychainFSRef: [*c]FSRef, keychain: [*c]KCRef) OSStatus;
pub extern fn KCMakeKCRefFromAlias(keychainAlias: AliasHandle, keychain: [*c]KCRef) OSStatus;
pub extern fn KCMakeAliasFromKCRef(keychain: KCRef, keychainAlias: [*c]AliasHandle) OSStatus;
pub extern fn KCReleaseKeychain(keychain: [*c]KCRef) OSStatus;
pub extern fn KCGetDefaultKeychain(keychain: [*c]KCRef) OSStatus;
pub extern fn KCSetDefaultKeychain(keychain: KCRef) OSStatus;
pub extern fn KCGetStatus(keychain: KCRef, keychainStatus: [*c]UInt32) OSStatus;
pub extern fn KCGetKeychain(item: KCItemRef, keychain: [*c]KCRef) OSStatus;
pub extern fn KCGetKeychainName(keychain: KCRef, keychainName: StringPtr) OSStatus;
pub extern fn KCCountKeychains() UInt16;
pub extern fn KCGetIndKeychain(index: UInt16, keychain: [*c]KCRef) OSStatus;
pub const KCCallbackProcPtr = ?*const fn (KCEvent, [*c]KCCallbackInfo, ?*anyopaque) callconv(.C) OSStatus;
pub const KCCallbackUPP = KCCallbackProcPtr;
pub extern fn NewKCCallbackUPP(userRoutine: KCCallbackProcPtr) KCCallbackUPP;
pub extern fn DisposeKCCallbackUPP(userUPP: KCCallbackUPP) void;
pub extern fn InvokeKCCallbackUPP(keychainEvent: KCEvent, info: [*c]KCCallbackInfo, userContext: ?*anyopaque, userUPP: KCCallbackUPP) OSStatus;
pub extern fn KCFindAppleSharePassword(serverSignature: [*c]AFPServerSignature, serverAddress: ConstStringPtr, serverName: ConstStringPtr, volumeName: ConstStringPtr, accountName: ConstStringPtr, maxLength: UInt32, passwordData: ?*anyopaque, actualLength: [*c]UInt32, item: [*c]KCItemRef) OSStatus;
pub extern fn KCFindInternetPassword(serverName: ConstStringPtr, securityDomain: ConstStringPtr, accountName: ConstStringPtr, port: UInt16, protocol: OSType, authType: OSType, maxLength: UInt32, passwordData: ?*anyopaque, actualLength: [*c]UInt32, item: [*c]KCItemRef) OSStatus;
pub extern fn KCFindInternetPasswordWithPath(serverName: ConstStringPtr, securityDomain: ConstStringPtr, accountName: ConstStringPtr, path: ConstStringPtr, port: UInt16, protocol: OSType, authType: OSType, maxLength: UInt32, passwordData: ?*anyopaque, actualLength: [*c]UInt32, item: [*c]KCItemRef) OSStatus;
pub extern fn KCFindGenericPassword(serviceName: ConstStringPtr, accountName: ConstStringPtr, maxLength: UInt32, passwordData: ?*anyopaque, actualLength: [*c]UInt32, item: [*c]KCItemRef) OSStatus;
pub extern fn KCAddCallback(callbackProc: KCCallbackUPP, eventMask: KCEventMask, userContext: ?*anyopaque) OSStatus;
pub extern fn KCRemoveCallback(callbackProc: KCCallbackUPP) OSStatus;
pub extern fn KCNewItem(itemClass: KCItemClass, itemCreator: OSType, length: UInt32, data: ?*const anyopaque, item: [*c]KCItemRef) OSStatus;
pub extern fn KCSetAttribute(item: KCItemRef, attr: [*c]KCAttribute) OSStatus;
pub extern fn KCGetAttribute(item: KCItemRef, attr: [*c]KCAttribute, actualLength: [*c]UInt32) OSStatus;
pub extern fn KCSetData(item: KCItemRef, length: UInt32, data: ?*const anyopaque) OSStatus;
pub extern fn KCUpdateItem(item: KCItemRef) OSStatus;
pub extern fn KCReleaseItem(item: [*c]KCItemRef) OSStatus;
pub extern fn KCCopyItem(item: KCItemRef, destKeychain: KCRef, copy: [*c]KCItemRef) OSStatus;
pub extern fn KCFindFirstItem(keychain: KCRef, attrList: [*c]const KCAttributeList, search: [*c]KCSearchRef, item: [*c]KCItemRef) OSStatus;
pub extern fn KCFindNextItem(search: KCSearchRef, item: [*c]KCItemRef) OSStatus;
pub extern fn KCReleaseSearch(search: [*c]KCSearchRef) OSStatus;
pub extern fn KCDeleteItem(item: KCItemRef) OSStatus;
pub extern fn KCGetData(item: KCItemRef, maxLength: UInt32, data: ?*anyopaque, actualLength: [*c]UInt32) OSStatus;
pub extern fn KCLock(keychain: KCRef) OSStatus;
pub extern fn kcgetkeychainname(keychain: KCRef, keychainName: [*c]u8) OSStatus;
pub extern fn kcfindapplesharepassword(serverSignature: [*c]AFPServerSignature, serverAddress: [*c]const u8, serverName: [*c]const u8, volumeName: [*c]const u8, accountName: [*c]const u8, maxLength: UInt32, passwordData: ?*anyopaque, actualLength: [*c]UInt32, item: [*c]KCItemRef) OSStatus;
pub extern fn kcfindinternetpassword(serverName: [*c]const u8, securityDomain: [*c]const u8, accountName: [*c]const u8, port: UInt16, protocol: OSType, authType: OSType, maxLength: UInt32, passwordData: ?*anyopaque, actualLength: [*c]UInt32, item: [*c]KCItemRef) OSStatus;
pub extern fn kcfindinternetpasswordwithpath(serverName: [*c]const u8, securityDomain: [*c]const u8, accountName: [*c]const u8, path: [*c]const u8, port: UInt16, protocol: OSType, authType: OSType, maxLength: UInt32, passwordData: ?*anyopaque, actualLength: [*c]UInt32, item: [*c]KCItemRef) OSStatus;
pub extern fn kcfindgenericpassword(serviceName: [*c]const u8, accountName: [*c]const u8, maxLength: UInt32, passwordData: ?*anyopaque, actualLength: [*c]UInt32, item: [*c]KCItemRef) OSStatus;
pub const errWSInternalError: c_int = -65793;
pub const errWSTransportError: c_int = -65794;
pub const errWSParseError: c_int = -65795;
pub const errWSTimeoutError: c_int = -65796;
const enum_unnamed_1196 = c_int;
pub const eWSUnknownType: c_int = 0;
pub const eWSNullType: c_int = 1;
pub const eWSBooleanType: c_int = 2;
pub const eWSIntegerType: c_int = 3;
pub const eWSDoubleType: c_int = 4;
pub const eWSStringType: c_int = 5;
pub const eWSDateType: c_int = 6;
pub const eWSDataType: c_int = 7;
pub const eWSArrayType: c_int = 8;
pub const eWSDictionaryType: c_int = 9;
pub const enum_WSTypeID = c_uint;
pub const WSTypeID = enum_WSTypeID;
pub const WSClientContextRetainCallBackProcPtr = ?*const fn (?*anyopaque) callconv(.C) ?*anyopaque;
pub const WSClientContextReleaseCallBackProcPtr = ?*const fn (?*anyopaque) callconv(.C) void;
pub const WSClientContextCopyDescriptionCallBackProcPtr = ?*const fn (?*anyopaque) callconv(.C) CFStringRef;
pub const struct_WSClientContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: WSClientContextRetainCallBackProcPtr,
    release: WSClientContextReleaseCallBackProcPtr,
    copyDescription: WSClientContextCopyDescriptionCallBackProcPtr,
};
pub const WSClientContext = struct_WSClientContext;
pub extern var kWSXMLRPCProtocol: CFStringRef;
pub extern var kWSSOAP1999Protocol: CFStringRef;
pub extern var kWSSOAP2001Protocol: CFStringRef;
pub extern fn WSGetWSTypeIDFromCFType(ref: CFTypeRef) WSTypeID;
pub extern fn WSGetCFTypeIDFromWSTypeID(typeID: WSTypeID) CFTypeID;
pub extern var kWSMethodInvocationResult: CFStringRef;
pub extern var kWSFaultString: CFStringRef;
pub extern var kWSFaultCode: CFStringRef;
pub extern var kWSFaultExtra: CFStringRef;
pub extern var kWSNetworkStreamFaultString: CFStringRef;
pub extern var kWSStreamErrorMessage: CFStringRef;
pub extern var kWSStreamErrorDomain: CFStringRef;
pub extern var kWSStreamErrorError: CFStringRef;
pub extern var kWSHTTPMessage: CFStringRef;
pub extern var kWSHTTPResponseMessage: CFStringRef;
pub extern var kWSHTTPExtraHeaders: CFStringRef;
pub extern var kWSHTTPVersion: CFStringRef;
pub extern var kWSHTTPProxy: CFStringRef;
pub extern var kWSHTTPFollowsRedirects: CFStringRef;
pub extern var kWSDebugOutgoingHeaders: CFStringRef;
pub extern var kWSDebugOutgoingBody: CFStringRef;
pub extern var kWSDebugIncomingHeaders: CFStringRef;
pub extern var kWSDebugIncomingBody: CFStringRef;
pub extern var kWSSOAPBodyEncodingStyle: CFStringRef;
pub extern var kWSSOAPMethodNamespaceURI: CFStringRef;
pub extern var kWSSOAPStyleDoc: CFStringRef;
pub extern var kWSSOAPStyleRPC: CFStringRef;
pub extern var kWSSOAPMessageHeaders: CFStringRef;
pub extern var kWSRecordParameterOrder: CFStringRef;
pub extern var kWSRecordNamespaceURI: CFStringRef;
pub extern var kWSRecordType: CFStringRef;
pub extern var kWSMethodInvocationResultParameterName: CFStringRef;
pub extern var kWSMethodInvocationTimeoutValue: CFStringRef;
pub const struct_OpaqueWSMethodInvocationRef = opaque {};
pub const WSMethodInvocationRef = ?*struct_OpaqueWSMethodInvocationRef;
pub extern fn WSMethodInvocationGetTypeID() CFTypeID;
pub extern fn WSMethodInvocationCreate(url: CFURLRef, methodName: CFStringRef, protocol: CFStringRef) WSMethodInvocationRef;
pub extern fn WSMethodInvocationCreateFromSerialization(contract: CFDataRef) WSMethodInvocationRef;
pub extern fn WSMethodInvocationCopySerialization(invocation: WSMethodInvocationRef) CFDataRef;
pub extern fn WSMethodInvocationSetParameters(invocation: WSMethodInvocationRef, parameters: CFDictionaryRef, parameterOrder: CFArrayRef) void;
pub extern fn WSMethodInvocationCopyParameters(invocation: WSMethodInvocationRef, parameterOrder: [*c]CFArrayRef) CFDictionaryRef;
pub extern fn WSMethodInvocationSetProperty(invocation: WSMethodInvocationRef, propertyName: CFStringRef, propertyValue: CFTypeRef) void;
pub extern fn WSMethodInvocationCopyProperty(invocation: WSMethodInvocationRef, propertyName: CFStringRef) CFTypeRef;
pub extern fn WSMethodInvocationInvoke(invocation: WSMethodInvocationRef) CFDictionaryRef;
pub const WSMethodInvocationCallBackProcPtr = ?*const fn (WSMethodInvocationRef, ?*anyopaque, CFDictionaryRef) callconv(.C) void;
pub extern fn WSMethodInvocationSetCallBack(invocation: WSMethodInvocationRef, clientCB: WSMethodInvocationCallBackProcPtr, context: [*c]WSClientContext) void;
pub extern fn WSMethodInvocationScheduleWithRunLoop(invocation: WSMethodInvocationRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) void;
pub extern fn WSMethodInvocationUnscheduleFromRunLoop(invocation: WSMethodInvocationRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) void;
pub extern fn WSMethodResultIsFault(methodResult: CFDictionaryRef) Boolean;
pub const WSMethodInvocationSerializationProcPtr = ?*const fn (WSMethodInvocationRef, CFTypeRef, ?*anyopaque) callconv(.C) CFStringRef;
pub extern fn WSMethodInvocationAddSerializationOverride(invocation: WSMethodInvocationRef, objType: CFTypeID, serializationProc: WSMethodInvocationSerializationProcPtr, context: [*c]WSClientContext) void;
pub const WSMethodInvocationDeserializationProcPtr = ?*const fn (WSMethodInvocationRef, CFXMLTreeRef, CFXMLTreeRef, ?*anyopaque) callconv(.C) CFTypeRef;
pub extern fn WSMethodInvocationAddDeserializationOverride(invocation: WSMethodInvocationRef, typeNamespace: CFStringRef, typeName: CFStringRef, deserializationProc: WSMethodInvocationDeserializationProcPtr, context: [*c]WSClientContext) void;
pub const struct_OpaqueWSProtocolHandlerRef = opaque {};
pub const WSProtocolHandlerRef = ?*struct_OpaqueWSProtocolHandlerRef;
pub extern fn WSProtocolHandlerGetTypeID() CFTypeID;
pub extern fn WSProtocolHandlerCreate(allocator: CFAllocatorRef, protocol: CFStringRef) WSProtocolHandlerRef;
pub extern fn WSProtocolHandlerCopyRequestDictionary(ref: WSProtocolHandlerRef, data: CFDataRef) CFDictionaryRef;
pub extern fn WSProtocolHandlerCopyReplyDictionary(ref: WSProtocolHandlerRef, methodName: CFStringRef, data: CFDataRef) CFDictionaryRef;
pub extern fn WSProtocolHandlerCopyReplyDocument(ref: WSProtocolHandlerRef, methodContext: CFDictionaryRef, resultValue: CFTypeRef) CFDataRef;
pub extern fn WSProtocolHandlerCopyFaultDocument(ref: WSProtocolHandlerRef, methodContext: CFDictionaryRef, faultDict: CFDictionaryRef) CFDataRef;
pub extern fn WSProtocolHandlerCopyRequestDocument(ref: WSProtocolHandlerRef, methodName: CFStringRef, methodParams: CFDictionaryRef, methodParamOrder: CFArrayRef, methodExtras: CFDictionaryRef) CFDataRef;
pub extern fn WSProtocolHandlerCopyProperty(ref: WSProtocolHandlerRef, propertyName: CFStringRef) CFTypeRef;
pub extern fn WSProtocolHandlerSetProperty(ref: WSProtocolHandlerRef, propertyName: CFStringRef, propertyValue: CFTypeRef) void;
pub const WSProtocolHandlerSerializationProcPtr = ?*const fn (WSProtocolHandlerRef, CFTypeRef, ?*anyopaque) callconv(.C) CFStringRef;
pub extern fn WSProtocolHandlerSetSerializationOverride(protocol: WSProtocolHandlerRef, objType: CFTypeID, serializationProc: WSProtocolHandlerSerializationProcPtr, context: [*c]WSClientContext) void;
pub const WSProtocolHandlerDeserializationProcPtr = ?*const fn (WSProtocolHandlerRef, CFXMLTreeRef, CFXMLTreeRef, ?*anyopaque) callconv(.C) CFTypeRef;
pub extern fn WSProtocolHandlerSetDeserializationOverride(protocol: WSProtocolHandlerRef, typeNamespace: CFStringRef, typeName: CFStringRef, deserializationProc: WSProtocolHandlerDeserializationProcPtr, context: [*c]WSClientContext) void;
pub const kGenericDocumentIconResource: c_int = -4000;
pub const kGenericStationeryIconResource: c_int = -3985;
pub const kGenericEditionFileIconResource: c_int = -3989;
pub const kGenericApplicationIconResource: c_int = -3996;
pub const kGenericDeskAccessoryIconResource: c_int = -3991;
pub const kGenericFolderIconResource: c_int = -3999;
pub const kPrivateFolderIconResource: c_int = -3994;
pub const kFloppyIconResource: c_int = -3998;
pub const kTrashIconResource: c_int = -3993;
pub const kGenericRAMDiskIconResource: c_int = -3988;
pub const kGenericCDROMIconResource: c_int = -3987;
const enum_unnamed_1197 = c_int;
pub const kDesktopIconResource: c_int = -3992;
pub const kOpenFolderIconResource: c_int = -3997;
pub const kGenericHardDiskIconResource: c_int = -3995;
pub const kGenericFileServerIconResource: c_int = -3972;
pub const kGenericSuitcaseIconResource: c_int = -3970;
pub const kGenericMoverObjectIconResource: c_int = -3969;
const enum_unnamed_1198 = c_int;
pub const kGenericPreferencesIconResource: c_int = -3971;
pub const kGenericQueryDocumentIconResource: c_int = -16506;
pub const kGenericExtensionIconResource: c_int = -16415;
pub const kSystemFolderIconResource: c_int = -3983;
pub const kHelpIconResource: c_int = -20271;
pub const kAppleMenuFolderIconResource: c_int = -3982;
const enum_unnamed_1199 = c_int;
pub const genericDocumentIconResource: c_int = -4000;
pub const genericStationeryIconResource: c_int = -3985;
pub const genericEditionFileIconResource: c_int = -3989;
pub const genericApplicationIconResource: c_int = -3996;
pub const genericDeskAccessoryIconResource: c_int = -3991;
pub const genericFolderIconResource: c_int = -3999;
pub const privateFolderIconResource: c_int = -3994;
pub const floppyIconResource: c_int = -3998;
pub const trashIconResource: c_int = -3993;
pub const genericRAMDiskIconResource: c_int = -3988;
pub const genericCDROMIconResource: c_int = -3987;
pub const desktopIconResource: c_int = -3992;
pub const openFolderIconResource: c_int = -3997;
pub const genericHardDiskIconResource: c_int = -3995;
pub const genericFileServerIconResource: c_int = -3972;
pub const genericSuitcaseIconResource: c_int = -3970;
pub const genericMoverObjectIconResource: c_int = -3969;
pub const genericPreferencesIconResource: c_int = -3971;
pub const genericQueryDocumentIconResource: c_int = -16506;
pub const genericExtensionIconResource: c_int = -16415;
pub const systemFolderIconResource: c_int = -3983;
pub const appleMenuFolderIconResource: c_int = -3982;
const enum_unnamed_1200 = c_int;
pub const kStartupFolderIconResource: c_int = -3981;
pub const kOwnedFolderIconResource: c_int = -3980;
pub const kDropFolderIconResource: c_int = -3979;
pub const kSharedFolderIconResource: c_int = -3978;
pub const kMountedFolderIconResource: c_int = -3977;
pub const kControlPanelFolderIconResource: c_int = -3976;
pub const kPrintMonitorFolderIconResource: c_int = -3975;
pub const kPreferencesFolderIconResource: c_int = -3974;
pub const kExtensionsFolderIconResource: c_int = -3973;
pub const kFontsFolderIconResource: c_int = -3968;
pub const kFullTrashIconResource: c_int = -3984;
const enum_unnamed_1201 = c_int;
pub const startupFolderIconResource: c_int = -3981;
pub const ownedFolderIconResource: c_int = -3980;
pub const dropFolderIconResource: c_int = -3979;
pub const sharedFolderIconResource: c_int = -3978;
pub const mountedFolderIconResource: c_int = -3977;
pub const controlPanelFolderIconResource: c_int = -3976;
pub const printMonitorFolderIconResource: c_int = -3975;
pub const preferencesFolderIconResource: c_int = -3974;
pub const extensionsFolderIconResource: c_int = -3973;
pub const fontsFolderIconResource: c_int = -3968;
pub const fullTrashIconResource: c_int = -3984;
const enum_unnamed_1202 = c_int;
pub const struct_OpaqueIconRef = opaque {};
pub const IconRef = ?*struct_OpaqueIconRef;
pub const kSystemIconsCreator: c_int = 1835098995;
const enum_unnamed_1203 = c_uint;
pub const kClipboardIcon: c_int = 1129072976;
pub const kClippingUnknownTypeIcon: c_int = 1668051061;
pub const kClippingPictureTypeIcon: c_int = 1668051056;
pub const kClippingTextTypeIcon: c_int = 1668051060;
pub const kClippingSoundTypeIcon: c_int = 1668051059;
pub const kDesktopIcon: c_int = 1684370283;
pub const kFinderIcon: c_int = 1179534418;
pub const kComputerIcon: c_int = 1919905652;
pub const kFontSuitcaseIcon: c_int = 1179011404;
pub const kFullTrashIcon: c_int = 1718907496;
pub const kGenericApplicationIcon: c_int = 1095782476;
pub const kGenericCDROMIcon: c_int = 1667523698;
pub const kGenericControlPanelIcon: c_int = 1095782467;
pub const kGenericControlStripModuleIcon: c_int = 1935959414;
pub const kGenericComponentIcon: c_int = 1953001063;
pub const kGenericDeskAccessoryIcon: c_int = 1095782468;
pub const kGenericDocumentIcon: c_int = 1685021557;
pub const kGenericEditionFileIcon: c_int = 1701082214;
pub const kGenericExtensionIcon: c_int = 1229867348;
pub const kGenericFileServerIcon: c_int = 1936881266;
pub const kGenericFontIcon: c_int = 1717987692;
pub const kGenericFontScalerIcon: c_int = 1935895666;
pub const kGenericFloppyIcon: c_int = 1718382713;
pub const kGenericHardDiskIcon: c_int = 1751413611;
pub const kGenericIDiskIcon: c_int = 1768190827;
pub const kGenericRemovableMediaIcon: c_int = 1919774582;
pub const kGenericMoverObjectIcon: c_int = 1836021362;
pub const kGenericPCCardIcon: c_int = 1885564259;
pub const kGenericPreferencesIcon: c_int = 1886545254;
pub const kGenericQueryDocumentIcon: c_int = 1902473849;
pub const kGenericRAMDiskIcon: c_int = 1918987620;
pub const kGenericSharedLibaryIcon: c_int = 1936223330;
pub const kGenericStationeryIcon: c_int = 1935961955;
pub const kGenericSuitcaseIcon: c_int = 1937074548;
pub const kGenericURLIcon: c_int = 1735750252;
pub const kGenericWORMIcon: c_int = 2003792493;
pub const kInternationalResourcesIcon: c_int = 1768319340;
pub const kKeyboardLayoutIcon: c_int = 1801873772;
pub const kSoundFileIcon: c_int = 1936091500;
pub const kSystemSuitcaseIcon: c_int = 2054388083;
pub const kTrashIcon: c_int = 1953657704;
pub const kTrueTypeFontIcon: c_int = 1952868716;
pub const kTrueTypeFlatFontIcon: c_int = 1936092788;
pub const kTrueTypeMultiFlatFontIcon: c_int = 1953784678;
pub const kUserIDiskIcon: c_int = 1969517419;
pub const kUnknownFSObjectIcon: c_int = 1970169459;
pub const kInternationResourcesIcon: c_int = 1768319340;
const enum_unnamed_1204 = c_uint;
pub const kInternetLocationHTTPIcon: c_int = 1768712308;
pub const kInternetLocationFTPIcon: c_int = 1768711796;
pub const kInternetLocationAppleShareIcon: c_int = 1768710502;
pub const kInternetLocationAppleTalkZoneIcon: c_int = 1768710516;
pub const kInternetLocationFileIcon: c_int = 1768711785;
pub const kInternetLocationMailIcon: c_int = 1768713569;
pub const kInternetLocationNewsIcon: c_int = 1768713847;
pub const kInternetLocationNSLNeighborhoodIcon: c_int = 1768713843;
pub const kInternetLocationGenericIcon: c_int = 1768712037;
const enum_unnamed_1205 = c_uint;
pub const kGenericFolderIcon: c_int = 1718379634;
pub const kDropFolderIcon: c_int = 1684172664;
pub const kMountedFolderIcon: c_int = 1835955300;
pub const kOpenFolderIcon: c_int = 1868983396;
pub const kOwnedFolderIcon: c_int = 1870098020;
pub const kPrivateFolderIcon: c_int = 1886549606;
pub const kSharedFolderIcon: c_int = 1936221804;
const enum_unnamed_1206 = c_uint;
pub const kSharingPrivsNotApplicableIcon: c_int = 1936223841;
pub const kSharingPrivsReadOnlyIcon: c_int = 1936224879;
pub const kSharingPrivsReadWriteIcon: c_int = 1936224887;
pub const kSharingPrivsUnknownIcon: c_int = 1936225643;
pub const kSharingPrivsWritableIcon: c_int = 2003986804;
const enum_unnamed_1207 = c_uint;
pub const kUserFolderIcon: c_int = 1969646692;
pub const kWorkgroupFolderIcon: c_int = 2003201124;
pub const kGuestUserIcon: c_int = 1735750514;
pub const kUserIcon: c_int = 1970496882;
pub const kOwnerIcon: c_int = 1937077106;
pub const kGroupIcon: c_int = 1735554416;
const enum_unnamed_1208 = c_uint;
pub const kAppearanceFolderIcon: c_int = 1634758770;
pub const kAppleExtrasFolderIcon: c_int = 1634040004;
pub const kAppleMenuFolderIcon: c_int = 1634561653;
pub const kApplicationsFolderIcon: c_int = 1634758771;
pub const kApplicationSupportFolderIcon: c_int = 1634956656;
pub const kAssistantsFolderIcon: c_int = 1634956484;
pub const kColorSyncFolderIcon: c_int = 1886547814;
pub const kContextualMenuItemsFolderIcon: c_int = 1668116085;
pub const kControlPanelDisabledFolderIcon: c_int = 1668575812;
pub const kControlPanelFolderIcon: c_int = 1668575852;
pub const kControlStripModulesFolderIcon: c_int = 1935963844;
pub const kDocumentsFolderIcon: c_int = 1685021555;
pub const kExtensionsDisabledFolderIcon: c_int = 1702392900;
pub const kExtensionsFolderIcon: c_int = 1702392942;
pub const kFavoritesFolderIcon: c_int = 1717663347;
pub const kFontsFolderIcon: c_int = 1718578804;
pub const kHelpFolderIcon: c_int = -999789456;
pub const kInternetFolderIcon: c_int = 1768846532;
pub const kInternetPlugInFolderIcon: c_int = -999398028;
pub const kInternetSearchSitesFolderIcon: c_int = 1769173862;
pub const kLocalesFolderIcon: c_int = -999526557;
pub const kMacOSReadMeFolderIcon: c_int = 1836020420;
pub const kPublicFolderIcon: c_int = 1886741094;
pub const kPreferencesFolderIcon: c_int = 1886545604;
pub const kPrinterDescriptionFolderIcon: c_int = 1886413926;
pub const kPrinterDriverFolderIcon: c_int = -999263644;
pub const kPrintMonitorFolderIcon: c_int = 1886547572;
pub const kRecentApplicationsFolderIcon: c_int = 1918988400;
pub const kRecentDocumentsFolderIcon: c_int = 1919184739;
pub const kRecentServersFolderIcon: c_int = 1920168566;
pub const kScriptingAdditionsFolderIcon: c_int = -999070862;
pub const kSharedLibrariesFolderIcon: c_int = -999528094;
pub const kScriptsFolderIcon: c_int = 1935897284;
pub const kShutdownItemsDisabledFolderIcon: c_int = 1936221252;
pub const kShutdownItemsFolderIcon: c_int = 1936221286;
pub const kSpeakableItemsFolder: c_int = 1936747369;
pub const kStartupItemsDisabledFolderIcon: c_int = 1937011268;
pub const kStartupItemsFolderIcon: c_int = 1937011316;
pub const kSystemExtensionDisabledFolderIcon: c_int = 1835098948;
pub const kSystemFolderIcon: c_int = 1835098995;
pub const kTextEncodingsFolderIcon: c_int = -999004808;
pub const kUsersFolderIcon: c_int = 1970500292;
pub const kUtilitiesFolderIcon: c_int = 1970563524;
pub const kVoicesFolderIcon: c_int = 1719037795;
const enum_unnamed_1209 = c_int;
pub const kAppleScriptBadgeIcon: c_int = 1935897200;
pub const kLockedBadgeIcon: c_int = 1818387559;
pub const kMountedBadgeIcon: c_int = 1835164775;
pub const kSharedBadgeIcon: c_int = 1935828071;
pub const kAliasBadgeIcon: c_int = 1633838183;
pub const kAlertCautionBadgeIcon: c_int = 1667392615;
const enum_unnamed_1210 = c_uint;
pub const kAlertNoteIcon: c_int = 1852798053;
pub const kAlertCautionIcon: c_int = 1667331444;
pub const kAlertStopIcon: c_int = 1937010544;
const enum_unnamed_1211 = c_uint;
pub const kAppleTalkIcon: c_int = 1635019883;
pub const kAppleTalkZoneIcon: c_int = 1635023470;
pub const kAFPServerIcon: c_int = 1634103411;
pub const kFTPServerIcon: c_int = 1718906995;
pub const kHTTPServerIcon: c_int = 1752461427;
pub const kGenericNetworkIcon: c_int = 1735288180;
pub const kIPFileServerIcon: c_int = 1769173622;
const enum_unnamed_1212 = c_uint;
pub const kToolbarCustomizeIcon: c_int = 1952675187;
pub const kToolbarDeleteIcon: c_int = 1952736620;
pub const kToolbarFavoritesIcon: c_int = 1952866678;
pub const kToolbarHomeIcon: c_int = 1953001325;
pub const kToolbarAdvancedIcon: c_int = 1952604534;
pub const kToolbarInfoIcon: c_int = 1952606574;
pub const kToolbarLabelsIcon: c_int = 1952607330;
pub const kToolbarApplicationsFolderIcon: c_int = 1950445683;
pub const kToolbarDocumentsFolderIcon: c_int = 1950642019;
pub const kToolbarMovieFolderIcon: c_int = 1951231862;
pub const kToolbarMusicFolderIcon: c_int = 1951233395;
pub const kToolbarPicturesFolderIcon: c_int = 1951426915;
pub const kToolbarPublicFolderIcon: c_int = 1951429986;
pub const kToolbarDesktopFolderIcon: c_int = 1950643051;
pub const kToolbarDownloadsFolderIcon: c_int = 1950644078;
pub const kToolbarLibraryFolderIcon: c_int = 1951164770;
pub const kToolbarUtilitiesFolderIcon: c_int = 1951757420;
pub const kToolbarSitesFolderIcon: c_int = 1951626355;
const enum_unnamed_1213 = c_uint;
pub const kAppleLogoIcon: c_int = 1667330156;
pub const kAppleMenuIcon: c_int = 1935765612;
pub const kBackwardArrowIcon: c_int = 1650553455;
pub const kFavoriteItemsIcon: c_int = 1717663346;
pub const kForwardArrowIcon: c_int = 1717662319;
pub const kGridIcon: c_int = 1735551332;
pub const kHelpIcon: c_int = 1751477360;
pub const kKeepArrangedIcon: c_int = 1634889319;
pub const kLockedIcon: c_int = 1819239275;
pub const kNoFilesIcon: c_int = 1852205420;
pub const kNoFolderIcon: c_int = 1852206180;
pub const kNoWriteIcon: c_int = 1853321844;
pub const kProtectedApplicationFolderIcon: c_int = 1885433968;
pub const kProtectedSystemFolderIcon: c_int = 1886615923;
pub const kRecentItemsIcon: c_int = 1919118964;
pub const kShortcutIcon: c_int = 1936224884;
pub const kSortAscendingIcon: c_int = 1634954852;
pub const kSortDescendingIcon: c_int = 1685286500;
pub const kUnlockedIcon: c_int = 1970037611;
pub const kConnectToIcon: c_int = 1668178804;
pub const kGenericWindowIcon: c_int = 1735879022;
pub const kQuestionMarkIcon: c_int = 1903519091;
pub const kDeleteAliasIcon: c_int = 1684106345;
pub const kEjectMediaIcon: c_int = 1701471587;
pub const kBurningIcon: c_int = 1651864174;
pub const kRightContainerArrowIcon: c_int = 1919115634;
const enum_unnamed_1214 = c_uint;
pub const IconServicesUsageFlags = UInt32;
pub const kIconServicesNormalUsageFlag: c_int = 0;
pub const kIconServicesNoBadgeFlag: c_int = 1;
pub const kIconServicesUpdateIfNeededFlag: c_int = 2;
const enum_unnamed_1215 = c_uint;
pub const kIconServicesCatalogInfoMask: c_int = 531550;
const enum_unnamed_1216 = c_uint;
pub extern fn GetIconRefOwners(theIconRef: IconRef, owners: [*c]UInt16) OSErr;
pub extern fn AcquireIconRef(theIconRef: IconRef) OSErr;
pub extern fn ReleaseIconRef(theIconRef: IconRef) OSErr;
pub extern fn GetIconRef(vRefNum: SInt16, creator: OSType, iconType: OSType, theIconRef: [*c]IconRef) OSErr;
pub extern fn GetIconRefFromFolder(vRefNum: SInt16, parentFolderID: SInt32, folderID: SInt32, attributes: SInt8, accessPrivileges: SInt8, theIconRef: [*c]IconRef) OSErr;
pub extern fn GetIconRefFromFileInfo(inRef: [*c]const FSRef, inFileNameLength: UniCharCount, inFileName: [*c]const UniChar, inWhichInfo: FSCatalogInfoBitmap, inCatalogInfo: [*c]const FSCatalogInfo, inUsageFlags: IconServicesUsageFlags, outIconRef: [*c]IconRef, outLabel: [*c]SInt16) OSStatus;
pub extern fn GetIconRefFromTypeInfo(inCreator: OSType, inType: OSType, inExtension: CFStringRef, inMIMEType: CFStringRef, inUsageFlags: IconServicesUsageFlags, outIconRef: [*c]IconRef) OSErr;
pub extern fn GetIconRefFromIconFamilyPtr(inIconFamilyPtr: [*c]const IconFamilyResource, inSize: Size, outIconRef: [*c]IconRef) OSStatus;
pub extern fn GetIconRefFromComponent(inComponent: Component, outIconRef: [*c]IconRef) OSStatus;
pub extern fn RegisterIconRefFromIconFamily(creator: OSType, iconType: OSType, iconFamily: IconFamilyHandle, theIconRef: [*c]IconRef) OSErr;
pub extern fn RegisterIconRefFromFSRef(creator: OSType, iconType: OSType, iconFile: [*c]const FSRef, theIconRef: [*c]IconRef) OSStatus;
pub extern fn UnregisterIconRef(creator: OSType, iconType: OSType) OSErr;
pub extern fn UpdateIconRef(theIconRef: IconRef) OSErr;
pub extern fn OverrideIconRef(oldIconRef: IconRef, newIconRef: IconRef) OSErr;
pub extern fn RemoveIconRefOverride(theIconRef: IconRef) OSErr;
pub extern fn CompositeIconRef(backgroundIconRef: IconRef, foregroundIconRef: IconRef, compositeIconRef: [*c]IconRef) OSErr;
pub extern fn IsIconRefComposite(compositeIconRef: IconRef, backgroundIconRef: [*c]IconRef, foregroundIconRef: [*c]IconRef) OSErr;
pub extern fn IsValidIconRef(theIconRef: IconRef) Boolean;
pub extern fn IsDataAvailableInIconRef(inIconKind: OSType, inIconRef: IconRef) Boolean;
pub extern fn SetCustomIconsEnabled(vRefNum: SInt16, enableCustomIcons: Boolean) OSErr;
pub extern fn GetCustomIconsEnabled(vRefNum: SInt16, customIconsEnabled: [*c]Boolean) OSErr;
pub extern fn ReadIconFromFSRef(ref: [*c]const FSRef, iconFamily: [*c]IconFamilyHandle) OSStatus;
pub const kLSNo32BitEnvironmentErr: c_int = -10386;
pub const kLSAppInTrashErr: c_int = -10660;
pub const kLSExecutableIncorrectFormat: c_int = -10661;
pub const kLSAttributeNotFoundErr: c_int = -10662;
pub const kLSAttributeNotSettableErr: c_int = -10663;
pub const kLSIncompatibleApplicationVersionErr: c_int = -10664;
pub const kLSNoRosettaEnvironmentErr: c_int = -10665;
pub const kLSGarbageCollectionUnsupportedErr: c_int = -10666;
pub const kLSUnknownErr: c_int = -10810;
pub const kLSNotAnApplicationErr: c_int = -10811;
pub const kLSNotInitializedErr: c_int = -10812;
pub const kLSDataUnavailableErr: c_int = -10813;
pub const kLSApplicationNotFoundErr: c_int = -10814;
pub const kLSUnknownTypeErr: c_int = -10815;
pub const kLSDataTooOldErr: c_int = -10816;
pub const kLSDataErr: c_int = -10817;
pub const kLSLaunchInProgressErr: c_int = -10818;
pub const kLSNotRegisteredErr: c_int = -10819;
pub const kLSAppDoesNotClaimTypeErr: c_int = -10820;
pub const kLSAppDoesNotSupportSchemeWarning: c_int = -10821;
pub const kLSServerCommunicationErr: c_int = -10822;
pub const kLSCannotSetInfoErr: c_int = -10823;
pub const kLSNoRegistrationInfoErr: c_int = -10824;
pub const kLSIncompatibleSystemVersionErr: c_int = -10825;
pub const kLSNoLaunchPermissionErr: c_int = -10826;
pub const kLSNoExecutableErr: c_int = -10827;
pub const kLSNoClassicEnvironmentErr: c_int = -10828;
pub const kLSMultipleSessionsNotSupportedErr: c_int = -10829;
const enum_unnamed_1217 = c_int;
pub const LSRolesMask = OptionBits;
pub const kLSRolesNone: c_int = 1;
pub const kLSRolesViewer: c_int = 2;
pub const kLSRolesEditor: c_int = 4;
pub const kLSRolesShell: c_int = 8;
pub const kLSRolesAll: c_uint = 4294967295;
const enum_unnamed_1218 = c_uint;
pub const kLSUnknownType: c_int = 0;
pub const kLSUnknownCreator: c_int = 0;
const enum_unnamed_1219 = c_uint;
pub const LSAcceptanceFlags = OptionBits;
pub const kLSAcceptDefault: c_int = 1;
pub const kLSAcceptAllowLoginUI: c_int = 2;
const enum_unnamed_1220 = c_uint;
pub extern fn LSCopyDefaultApplicationURLForURL(inURL: CFURLRef, inRoleMask: LSRolesMask, outError: [*c]CFErrorRef) CFURLRef;
pub extern fn LSCopyDefaultApplicationURLForContentType(inContentType: CFStringRef, inRoleMask: LSRolesMask, outError: [*c]CFErrorRef) CFURLRef;
pub extern fn LSCopyApplicationURLsForBundleIdentifier(inBundleIdentifier: CFStringRef, outError: [*c]CFErrorRef) CFArrayRef;
pub extern fn LSCopyApplicationURLsForURL(inURL: CFURLRef, inRoleMask: LSRolesMask) CFArrayRef;
pub extern fn LSCanURLAcceptURL(inItemURL: CFURLRef, inTargetURL: CFURLRef, inRoleMask: LSRolesMask, inFlags: LSAcceptanceFlags, outAcceptsItem: [*c]Boolean) OSStatus;
pub extern fn LSRegisterURL(inURL: CFURLRef, inUpdate: Boolean) OSStatus;
pub extern fn LSCopyDefaultRoleHandlerForContentType(inContentType: CFStringRef, inRole: LSRolesMask) CFStringRef;
pub extern fn LSCopyAllRoleHandlersForContentType(inContentType: CFStringRef, inRole: LSRolesMask) CFArrayRef;
pub extern fn LSSetDefaultRoleHandlerForContentType(inContentType: CFStringRef, inRole: LSRolesMask, inHandlerBundleID: CFStringRef) OSStatus;
pub extern fn LSCopyDefaultHandlerForURLScheme(inURLScheme: CFStringRef) CFStringRef;
pub extern fn LSCopyAllHandlersForURLScheme(inURLScheme: CFStringRef) CFArrayRef;
pub extern fn LSSetDefaultHandlerForURLScheme(inURLScheme: CFStringRef, inHandlerBundleID: CFStringRef) OSStatus;
pub const LSRequestedInfo = OptionBits;
pub const kLSRequestExtension: c_int = 1;
pub const kLSRequestTypeCreator: c_int = 2;
pub const kLSRequestBasicFlagsOnly: c_int = 4;
pub const kLSRequestAppTypeFlags: c_int = 8;
pub const kLSRequestAllFlags: c_int = 16;
pub const kLSRequestIconAndKind: c_int = 32;
pub const kLSRequestExtensionFlagsOnly: c_int = 64;
pub const kLSRequestAllInfo: c_uint = 4294967295;
const enum_unnamed_1221 = c_uint;
pub const LSItemInfoFlags = OptionBits;
pub const kLSItemInfoIsPlainFile: c_int = 1;
pub const kLSItemInfoIsPackage: c_int = 2;
pub const kLSItemInfoIsApplication: c_int = 4;
pub const kLSItemInfoIsContainer: c_int = 8;
pub const kLSItemInfoIsAliasFile: c_int = 16;
pub const kLSItemInfoIsSymlink: c_int = 32;
pub const kLSItemInfoIsInvisible: c_int = 64;
pub const kLSItemInfoIsNativeApp: c_int = 128;
pub const kLSItemInfoIsClassicApp: c_int = 256;
pub const kLSItemInfoAppPrefersNative: c_int = 512;
pub const kLSItemInfoAppPrefersClassic: c_int = 1024;
pub const kLSItemInfoAppIsScriptable: c_int = 2048;
pub const kLSItemInfoIsVolume: c_int = 4096;
pub const kLSItemInfoExtensionIsHidden: c_int = 1048576;
const enum_unnamed_1222 = c_uint;
pub const struct_LSItemInfoRecord = extern struct {
    flags: LSItemInfoFlags,
    filetype: OSType,
    creator: OSType,
    extension: CFStringRef,
};
pub const LSItemInfoRecord = struct_LSItemInfoRecord;
pub extern fn LSCopyItemInfoForURL(inURL: CFURLRef, inWhichInfo: LSRequestedInfo, outItemInfo: [*c]LSItemInfoRecord) OSStatus;
pub extern fn LSCopyItemInfoForRef(inItemRef: [*c]const FSRef, inWhichInfo: LSRequestedInfo, outItemInfo: [*c]LSItemInfoRecord) OSStatus;
pub extern fn LSGetExtensionInfo(inNameLen: UniCharCount, inNameBuffer: [*c]const UniChar, outExtStartIndex: [*c]UniCharCount) OSStatus;
pub extern fn LSCopyDisplayNameForRef(inRef: [*c]const FSRef, outDisplayName: [*c]CFStringRef) OSStatus;
pub extern fn LSCopyDisplayNameForURL(inURL: CFURLRef, outDisplayName: [*c]CFStringRef) OSStatus;
pub extern fn LSSetExtensionHiddenForRef(inRef: [*c]const FSRef, inHide: Boolean) OSStatus;
pub extern fn LSSetExtensionHiddenForURL(inURL: CFURLRef, inHide: Boolean) OSStatus;
pub extern fn LSCopyKindStringForRef(inFSRef: [*c]const FSRef, outKindString: [*c]CFStringRef) OSStatus;
pub extern fn LSCopyKindStringForURL(inURL: CFURLRef, outKindString: [*c]CFStringRef) OSStatus;
pub extern fn LSCopyKindStringForTypeInfo(inType: OSType, inCreator: OSType, inExtension: CFStringRef, outKindString: [*c]CFStringRef) OSStatus;
pub extern fn LSCopyKindStringForMIMEType(inMIMEType: CFStringRef, outKindString: [*c]CFStringRef) OSStatus;
pub extern fn LSGetApplicationForItem(inItemRef: [*c]const FSRef, inRoleMask: LSRolesMask, outAppRef: [*c]FSRef, outAppURL: [*c]CFURLRef) OSStatus;
pub extern fn LSGetApplicationForInfo(inType: OSType, inCreator: OSType, inExtension: CFStringRef, inRoleMask: LSRolesMask, outAppRef: [*c]FSRef, outAppURL: [*c]CFURLRef) OSStatus;
pub extern fn LSCopyApplicationForMIMEType(inMIMEType: CFStringRef, inRoleMask: LSRolesMask, outAppURL: [*c]CFURLRef) OSStatus;
pub extern fn LSGetApplicationForURL(inURL: CFURLRef, inRoleMask: LSRolesMask, outAppRef: [*c]FSRef, outAppURL: [*c]CFURLRef) OSStatus;
pub extern fn LSFindApplicationForInfo(inCreator: OSType, inBundleID: CFStringRef, inName: CFStringRef, outAppRef: [*c]FSRef, outAppURL: [*c]CFURLRef) OSStatus;
pub extern fn LSCanRefAcceptItem(inItemFSRef: [*c]const FSRef, inTargetRef: [*c]const FSRef, inRoleMask: LSRolesMask, inFlags: LSAcceptanceFlags, outAcceptsItem: [*c]Boolean) OSStatus;
pub extern fn LSRegisterFSRef(inRef: [*c]const FSRef, inUpdate: Boolean) OSStatus;
pub extern const kLSItemContentType: CFStringRef;
pub extern const kLSItemFileType: CFStringRef;
pub extern const kLSItemFileCreator: CFStringRef;
pub extern const kLSItemExtension: CFStringRef;
pub extern const kLSItemDisplayName: CFStringRef;
pub extern const kLSItemDisplayKind: CFStringRef;
pub extern const kLSItemRoleHandlerDisplayName: CFStringRef;
pub extern const kLSItemIsInvisible: CFStringRef;
pub extern const kLSItemExtensionIsHidden: CFStringRef;
pub extern const kLSItemQuarantineProperties: CFStringRef;
pub extern fn LSCopyItemAttribute(inItem: [*c]const FSRef, inRoles: LSRolesMask, inAttributeName: CFStringRef, outValue: [*c]CFTypeRef) OSStatus;
pub extern fn LSCopyItemAttributes(inItem: [*c]const FSRef, inRoles: LSRolesMask, inAttributeNames: CFArrayRef, outValues: [*c]CFDictionaryRef) OSStatus;
pub extern fn LSSetItemAttribute(inItem: [*c]const FSRef, inRoles: LSRolesMask, inAttributeName: CFStringRef, inValue: CFTypeRef) OSStatus;
pub const LSHandlerOptions = OptionBits;
pub const kLSHandlerOptionsDefault: c_int = 0;
pub const kLSHandlerOptionsIgnoreCreator: c_int = 1;
const enum_unnamed_1223 = c_uint;
pub extern fn LSGetHandlerOptionsForContentType(inContentType: CFStringRef) LSHandlerOptions;
pub extern fn LSSetHandlerOptionsForContentType(inContentType: CFStringRef, inOptions: LSHandlerOptions) OSStatus;
pub const LSLaunchFlags = OptionBits;
pub const kLSLaunchDefaults: c_int = 1;
pub const kLSLaunchAndPrint: c_int = 2;
pub const kLSLaunchAndDisplayErrors: c_int = 64;
pub const kLSLaunchDontAddToRecents: c_int = 256;
pub const kLSLaunchDontSwitch: c_int = 512;
pub const kLSLaunchAsync: c_int = 65536;
pub const kLSLaunchNewInstance: c_int = 524288;
pub const kLSLaunchAndHide: c_int = 1048576;
pub const kLSLaunchAndHideOthers: c_int = 2097152;
const enum_unnamed_1224 = c_uint;
pub const struct_LSLaunchURLSpec = extern struct {
    appURL: CFURLRef,
    itemURLs: CFArrayRef,
    passThruParams: [*c]const AEDesc,
    launchFlags: LSLaunchFlags,
    asyncRefCon: ?*anyopaque,
};
pub const LSLaunchURLSpec = struct_LSLaunchURLSpec;
pub extern fn LSOpenCFURLRef(inURL: CFURLRef, outLaunchedURL: [*c]CFURLRef) OSStatus;
pub extern fn LSOpenFromURLSpec(inLaunchSpec: [*c]const LSLaunchURLSpec, outLaunchedURL: [*c]CFURLRef) OSStatus;
pub const kLSLaunchInhibitBGOnly: c_int = 128;
pub const kLSLaunchNoParams: c_int = 2048;
pub const kLSLaunchStartClassic: c_int = 131072;
pub const kLSLaunchInClassic: c_int = 262144;
pub const kLSLaunchHasUntrustedContents: c_int = 4194304;
const enum_unnamed_1225 = c_uint;
pub const struct_LSLaunchFSRefSpec = extern struct {
    appRef: [*c]const FSRef,
    numDocs: ItemCount,
    itemRefs: [*c]const FSRef,
    passThruParams: [*c]const AEDesc,
    launchFlags: LSLaunchFlags,
    asyncRefCon: ?*anyopaque,
};
pub const LSLaunchFSRefSpec = struct_LSLaunchFSRefSpec;
pub extern fn LSOpenFSRef(inRef: [*c]const FSRef, outLaunchedRef: [*c]FSRef) OSStatus;
pub extern fn LSOpenFromRefSpec(inLaunchSpec: [*c]const LSLaunchFSRefSpec, outLaunchedRef: [*c]FSRef) OSStatus;
pub const struct_LSApplicationParameters = extern struct {
    version: CFIndex,
    flags: LSLaunchFlags,
    application: [*c]const FSRef,
    asyncLaunchRefCon: ?*anyopaque,
    environment: CFDictionaryRef,
    argv: CFArrayRef,
    initialEvent: [*c]AppleEvent,
};
pub const LSApplicationParameters = struct_LSApplicationParameters;
pub extern fn LSOpenApplication(appParams: [*c]const LSApplicationParameters, outPSN: [*c]ProcessSerialNumber) OSStatus;
pub extern fn LSOpenItemsWithRole(inItems: [*c]const FSRef, inItemCount: CFIndex, inRole: LSRolesMask, inAEParam: [*c]const AEKeyDesc, inAppParams: [*c]const LSApplicationParameters, outPSNs: [*c]ProcessSerialNumber, inMaxPSNCount: CFIndex) OSStatus;
pub extern fn LSOpenURLsWithRole(inURLs: CFArrayRef, inRole: LSRolesMask, inAEParam: [*c]const AEKeyDesc, inAppParams: [*c]const LSApplicationParameters, outPSNs: [*c]ProcessSerialNumber, inMaxPSNCount: CFIndex) OSStatus;
pub extern const kLSQuarantineAgentNameKey: CFStringRef;
pub extern const kLSQuarantineAgentBundleIdentifierKey: CFStringRef;
pub extern const kLSQuarantineTimeStampKey: CFStringRef;
pub extern const kLSQuarantineTypeKey: CFStringRef;
pub extern const kLSQuarantineTypeWebDownload: CFStringRef;
pub extern const kLSQuarantineTypeOtherDownload: CFStringRef;
pub extern const kLSQuarantineTypeEmailAttachment: CFStringRef;
pub extern const kLSQuarantineTypeInstantMessageAttachment: CFStringRef;
pub extern const kLSQuarantineTypeCalendarEventAttachment: CFStringRef;
pub extern const kLSQuarantineTypeOtherAttachment: CFStringRef;
pub extern const kLSQuarantineOriginURLKey: CFStringRef;
pub extern const kLSQuarantineDataURLKey: CFStringRef;
pub extern const kUTTypeItem: CFStringRef;
pub extern const kUTTypeContent: CFStringRef;
pub extern const kUTTypeCompositeContent: CFStringRef;
pub extern const kUTTypeMessage: CFStringRef;
pub extern const kUTTypeContact: CFStringRef;
pub extern const kUTTypeArchive: CFStringRef;
pub extern const kUTTypeDiskImage: CFStringRef;
pub extern const kUTTypeData: CFStringRef;
pub extern const kUTTypeDirectory: CFStringRef;
pub extern const kUTTypeResolvable: CFStringRef;
pub extern const kUTTypeSymLink: CFStringRef;
pub extern const kUTTypeExecutable: CFStringRef;
pub extern const kUTTypeMountPoint: CFStringRef;
pub extern const kUTTypeAliasFile: CFStringRef;
pub extern const kUTTypeAliasRecord: CFStringRef;
pub extern const kUTTypeURLBookmarkData: CFStringRef;
pub extern const kUTTypeURL: CFStringRef;
pub extern const kUTTypeFileURL: CFStringRef;
pub extern const kUTTypeText: CFStringRef;
pub extern const kUTTypePlainText: CFStringRef;
pub extern const kUTTypeUTF8PlainText: CFStringRef;
pub extern const kUTTypeUTF16ExternalPlainText: CFStringRef;
pub extern const kUTTypeUTF16PlainText: CFStringRef;
pub extern const kUTTypeDelimitedText: CFStringRef;
pub extern const kUTTypeCommaSeparatedText: CFStringRef;
pub extern const kUTTypeTabSeparatedText: CFStringRef;
pub extern const kUTTypeUTF8TabSeparatedText: CFStringRef;
pub extern const kUTTypeRTF: CFStringRef;
pub extern const kUTTypeHTML: CFStringRef;
pub extern const kUTTypeXML: CFStringRef;
pub extern const kUTTypeSourceCode: CFStringRef;
pub extern const kUTTypeAssemblyLanguageSource: CFStringRef;
pub extern const kUTTypeCSource: CFStringRef;
pub extern const kUTTypeObjectiveCSource: CFStringRef;
pub extern const kUTTypeSwiftSource: CFStringRef;
pub extern const kUTTypeCPlusPlusSource: CFStringRef;
pub extern const kUTTypeObjectiveCPlusPlusSource: CFStringRef;
pub extern const kUTTypeCHeader: CFStringRef;
pub extern const kUTTypeCPlusPlusHeader: CFStringRef;
pub extern const kUTTypeJavaSource: CFStringRef;
pub extern const kUTTypeScript: CFStringRef;
pub extern const kUTTypeAppleScript: CFStringRef;
pub extern const kUTTypeOSAScript: CFStringRef;
pub extern const kUTTypeOSAScriptBundle: CFStringRef;
pub extern const kUTTypeJavaScript: CFStringRef;
pub extern const kUTTypeShellScript: CFStringRef;
pub extern const kUTTypePerlScript: CFStringRef;
pub extern const kUTTypePythonScript: CFStringRef;
pub extern const kUTTypeRubyScript: CFStringRef;
pub extern const kUTTypePHPScript: CFStringRef;
pub extern const kUTTypeJSON: CFStringRef;
pub extern const kUTTypePropertyList: CFStringRef;
pub extern const kUTTypeXMLPropertyList: CFStringRef;
pub extern const kUTTypeBinaryPropertyList: CFStringRef;
pub extern const kUTTypePDF: CFStringRef;
pub extern const kUTTypeRTFD: CFStringRef;
pub extern const kUTTypeFlatRTFD: CFStringRef;
pub extern const kUTTypeTXNTextAndMultimediaData: CFStringRef;
pub extern const kUTTypeWebArchive: CFStringRef;
pub extern const kUTTypeImage: CFStringRef;
pub extern const kUTTypeJPEG: CFStringRef;
pub extern const kUTTypeJPEG2000: CFStringRef;
pub extern const kUTTypeTIFF: CFStringRef;
pub extern const kUTTypePICT: CFStringRef;
pub extern const kUTTypeGIF: CFStringRef;
pub extern const kUTTypePNG: CFStringRef;
pub extern const kUTTypeQuickTimeImage: CFStringRef;
pub extern const kUTTypeAppleICNS: CFStringRef;
pub extern const kUTTypeBMP: CFStringRef;
pub extern const kUTTypeICO: CFStringRef;
pub extern const kUTTypeRawImage: CFStringRef;
pub extern const kUTTypeScalableVectorGraphics: CFStringRef;
pub extern const kUTTypeLivePhoto: CFStringRef;
pub extern const kUTTypeAudiovisualContent: CFStringRef;
pub extern const kUTTypeMovie: CFStringRef;
pub extern const kUTTypeVideo: CFStringRef;
pub extern const kUTTypeAudio: CFStringRef;
pub extern const kUTTypeQuickTimeMovie: CFStringRef;
pub extern const kUTTypeMPEG: CFStringRef;
pub extern const kUTTypeMPEG2Video: CFStringRef;
pub extern const kUTTypeMPEG2TransportStream: CFStringRef;
pub extern const kUTTypeMP3: CFStringRef;
pub extern const kUTTypeMPEG4: CFStringRef;
pub extern const kUTTypeMPEG4Audio: CFStringRef;
pub extern const kUTTypeAppleProtectedMPEG4Audio: CFStringRef;
pub extern const kUTTypeAppleProtectedMPEG4Video: CFStringRef;
pub extern const kUTTypeAVIMovie: CFStringRef;
pub extern const kUTTypeAudioInterchangeFileFormat: CFStringRef;
pub extern const kUTTypeWaveformAudio: CFStringRef;
pub extern const kUTTypeMIDIAudio: CFStringRef;
pub extern const kUTTypePlaylist: CFStringRef;
pub extern const kUTTypeM3UPlaylist: CFStringRef;
pub extern const kUTTypeFolder: CFStringRef;
pub extern const kUTTypeVolume: CFStringRef;
pub extern const kUTTypePackage: CFStringRef;
pub extern const kUTTypeBundle: CFStringRef;
pub extern const kUTTypePluginBundle: CFStringRef;
pub extern const kUTTypeSpotlightImporter: CFStringRef;
pub extern const kUTTypeQuickLookGenerator: CFStringRef;
pub extern const kUTTypeXPCService: CFStringRef;
pub extern const kUTTypeFramework: CFStringRef;
pub extern const kUTTypeApplication: CFStringRef;
pub extern const kUTTypeApplicationBundle: CFStringRef;
pub extern const kUTTypeApplicationFile: CFStringRef;
pub extern const kUTTypeUnixExecutable: CFStringRef;
pub extern const kUTTypeWindowsExecutable: CFStringRef;
pub extern const kUTTypeJavaClass: CFStringRef;
pub extern const kUTTypeJavaArchive: CFStringRef;
pub extern const kUTTypeSystemPreferencesPane: CFStringRef;
pub extern const kUTTypeGNUZipArchive: CFStringRef;
pub extern const kUTTypeBzip2Archive: CFStringRef;
pub extern const kUTTypeZipArchive: CFStringRef;
pub extern const kUTTypeSpreadsheet: CFStringRef;
pub extern const kUTTypePresentation: CFStringRef;
pub extern const kUTTypeDatabase: CFStringRef;
pub extern const kUTTypeVCard: CFStringRef;
pub extern const kUTTypeToDoItem: CFStringRef;
pub extern const kUTTypeCalendarEvent: CFStringRef;
pub extern const kUTTypeEmailMessage: CFStringRef;
pub extern const kUTTypeInternetLocation: CFStringRef;
pub extern const kUTTypeInkText: CFStringRef;
pub extern const kUTTypeFont: CFStringRef;
pub extern const kUTTypeBookmark: CFStringRef;
pub extern const kUTType3DContent: CFStringRef;
pub extern const kUTTypePKCS12: CFStringRef;
pub extern const kUTTypeX509Certificate: CFStringRef;
pub extern const kUTTypeElectronicPublication: CFStringRef;
pub extern const kUTTypeLog: CFStringRef;
pub extern const kUTExportedTypeDeclarationsKey: CFStringRef;
pub extern const kUTImportedTypeDeclarationsKey: CFStringRef;
pub extern const kUTTypeIdentifierKey: CFStringRef;
pub extern const kUTTypeTagSpecificationKey: CFStringRef;
pub extern const kUTTypeConformsToKey: CFStringRef;
pub extern const kUTTypeDescriptionKey: CFStringRef;
pub extern const kUTTypeIconFileKey: CFStringRef;
pub extern const kUTTypeReferenceURLKey: CFStringRef;
pub extern const kUTTypeVersionKey: CFStringRef;
pub extern const kUTTagClassFilenameExtension: CFStringRef;
pub extern const kUTTagClassMIMEType: CFStringRef;
pub extern const kUTTagClassNSPboardType: CFStringRef;
pub extern const kUTTagClassOSType: CFStringRef;
pub extern fn UTTypeCreatePreferredIdentifierForTag(inTagClass: CFStringRef, inTag: CFStringRef, inConformingToUTI: CFStringRef) CFStringRef;
pub extern fn UTTypeCreateAllIdentifiersForTag(inTagClass: CFStringRef, inTag: CFStringRef, inConformingToUTI: CFStringRef) CFArrayRef;
pub extern fn UTTypeCopyPreferredTagWithClass(inUTI: CFStringRef, inTagClass: CFStringRef) CFStringRef;
pub extern fn UTTypeCopyAllTagsWithClass(inUTI: CFStringRef, inTagClass: CFStringRef) CFArrayRef;
pub extern fn UTTypeEqual(inUTI1: CFStringRef, inUTI2: CFStringRef) Boolean;
pub extern fn UTTypeConformsTo(inUTI: CFStringRef, inConformsToUTI: CFStringRef) Boolean;
pub extern fn UTTypeCopyDescription(inUTI: CFStringRef) CFStringRef;
pub extern fn UTTypeIsDeclared(inUTI: CFStringRef) Boolean;
pub extern fn UTTypeIsDynamic(inUTI: CFStringRef) Boolean;
pub extern fn UTTypeCopyDeclaration(inUTI: CFStringRef) CFDictionaryRef;
pub extern fn UTTypeCopyDeclaringBundleURL(inUTI: CFStringRef) CFURLRef;
pub extern fn UTCreateStringForOSType(inOSType: OSType) CFStringRef;
pub extern fn UTGetOSTypeFromString(inString: CFStringRef) OSType;
pub const struct___MDItem = opaque {};
pub const MDItemRef = ?*struct___MDItem;
pub extern fn MDItemGetTypeID() CFTypeID;
pub extern fn MDItemCreate(allocator: CFAllocatorRef, path: CFStringRef) MDItemRef;
pub extern fn MDItemCreateWithURL(allocator: CFAllocatorRef, url: CFURLRef) MDItemRef;
pub extern fn MDItemsCreateWithURLs(allocator: CFAllocatorRef, urls: CFArrayRef) CFArrayRef;
pub extern fn MDItemCopyAttribute(item: MDItemRef, name: CFStringRef) CFTypeRef;
pub extern fn MDItemCopyAttributes(item: MDItemRef, names: CFArrayRef) CFDictionaryRef;
pub extern fn MDItemCopyAttributeList(item: MDItemRef, ...) CFDictionaryRef;
pub extern fn MDItemCopyAttributeNames(item: MDItemRef) CFArrayRef;
pub extern fn MDItemsCopyAttributes(items: CFArrayRef, names: CFArrayRef) CFArrayRef;
pub extern const kMDItemAttributeChangeDate: CFStringRef;
pub extern const kMDItemContentType: CFStringRef;
pub extern const kMDItemContentTypeTree: CFStringRef;
pub extern const kMDItemKeywords: CFStringRef;
pub extern const kMDItemTitle: CFStringRef;
pub extern const kMDItemAuthors: CFStringRef;
pub extern const kMDItemEditors: CFStringRef;
pub extern const kMDItemParticipants: CFStringRef;
pub extern const kMDItemProjects: CFStringRef;
pub extern const kMDItemDownloadedDate: CFStringRef;
pub extern const kMDItemWhereFroms: CFStringRef;
pub extern const kMDItemComment: CFStringRef;
pub extern const kMDItemCopyright: CFStringRef;
pub extern const kMDItemLastUsedDate: CFStringRef;
pub extern const kMDItemContentCreationDate: CFStringRef;
pub extern const kMDItemContentModificationDate: CFStringRef;
pub extern const kMDItemDateAdded: CFStringRef;
pub extern const kMDItemDurationSeconds: CFStringRef;
pub extern const kMDItemContactKeywords: CFStringRef;
pub extern const kMDItemVersion: CFStringRef;
pub extern const kMDItemPixelHeight: CFStringRef;
pub extern const kMDItemPixelWidth: CFStringRef;
pub extern const kMDItemPixelCount: CFStringRef;
pub extern const kMDItemColorSpace: CFStringRef;
pub extern const kMDItemBitsPerSample: CFStringRef;
pub extern const kMDItemFlashOnOff: CFStringRef;
pub extern const kMDItemFocalLength: CFStringRef;
pub extern const kMDItemAcquisitionMake: CFStringRef;
pub extern const kMDItemAcquisitionModel: CFStringRef;
pub extern const kMDItemISOSpeed: CFStringRef;
pub extern const kMDItemOrientation: CFStringRef;
pub extern const kMDItemLayerNames: CFStringRef;
pub extern const kMDItemWhiteBalance: CFStringRef;
pub extern const kMDItemAperture: CFStringRef;
pub extern const kMDItemProfileName: CFStringRef;
pub extern const kMDItemResolutionWidthDPI: CFStringRef;
pub extern const kMDItemResolutionHeightDPI: CFStringRef;
pub extern const kMDItemExposureMode: CFStringRef;
pub extern const kMDItemExposureTimeSeconds: CFStringRef;
pub extern const kMDItemEXIFVersion: CFStringRef;
pub extern const kMDItemCameraOwner: CFStringRef;
pub extern const kMDItemFocalLength35mm: CFStringRef;
pub extern const kMDItemLensModel: CFStringRef;
pub extern const kMDItemEXIFGPSVersion: CFStringRef;
pub extern const kMDItemAltitude: CFStringRef;
pub extern const kMDItemLatitude: CFStringRef;
pub extern const kMDItemLongitude: CFStringRef;
pub extern const kMDItemSpeed: CFStringRef;
pub extern const kMDItemTimestamp: CFStringRef;
pub extern const kMDItemGPSTrack: CFStringRef;
pub extern const kMDItemImageDirection: CFStringRef;
pub extern const kMDItemNamedLocation: CFStringRef;
pub extern const kMDItemGPSStatus: CFStringRef;
pub extern const kMDItemGPSMeasureMode: CFStringRef;
pub extern const kMDItemGPSDOP: CFStringRef;
pub extern const kMDItemGPSMapDatum: CFStringRef;
pub extern const kMDItemGPSDestLatitude: CFStringRef;
pub extern const kMDItemGPSDestLongitude: CFStringRef;
pub extern const kMDItemGPSDestBearing: CFStringRef;
pub extern const kMDItemGPSDestDistance: CFStringRef;
pub extern const kMDItemGPSProcessingMethod: CFStringRef;
pub extern const kMDItemGPSAreaInformation: CFStringRef;
pub extern const kMDItemGPSDateStamp: CFStringRef;
pub extern const kMDItemGPSDifferental: CFStringRef;
pub extern const kMDItemCodecs: CFStringRef;
pub extern const kMDItemMediaTypes: CFStringRef;
pub extern const kMDItemStreamable: CFStringRef;
pub extern const kMDItemTotalBitRate: CFStringRef;
pub extern const kMDItemVideoBitRate: CFStringRef;
pub extern const kMDItemAudioBitRate: CFStringRef;
pub extern const kMDItemDeliveryType: CFStringRef;
pub extern const kMDItemAlbum: CFStringRef;
pub extern const kMDItemHasAlphaChannel: CFStringRef;
pub extern const kMDItemRedEyeOnOff: CFStringRef;
pub extern const kMDItemMeteringMode: CFStringRef;
pub extern const kMDItemMaxAperture: CFStringRef;
pub extern const kMDItemFNumber: CFStringRef;
pub extern const kMDItemExposureProgram: CFStringRef;
pub extern const kMDItemExposureTimeString: CFStringRef;
pub extern const kMDItemHeadline: CFStringRef;
pub extern const kMDItemInstructions: CFStringRef;
pub extern const kMDItemCity: CFStringRef;
pub extern const kMDItemStateOrProvince: CFStringRef;
pub extern const kMDItemCountry: CFStringRef;
pub extern const kMDItemFSName: CFStringRef;
pub extern const kMDItemDisplayName: CFStringRef;
pub extern const kMDItemPath: CFStringRef;
pub extern const kMDItemFSSize: CFStringRef;
pub extern const kMDItemFSCreationDate: CFStringRef;
pub extern const kMDItemFSContentChangeDate: CFStringRef;
pub extern const kMDItemFSOwnerUserID: CFStringRef;
pub extern const kMDItemFSOwnerGroupID: CFStringRef;
pub extern const kMDItemFSExists: CFStringRef;
pub extern const kMDItemFSIsReadable: CFStringRef;
pub extern const kMDItemFSIsWriteable: CFStringRef;
pub extern const kMDItemFSHasCustomIcon: CFStringRef;
pub extern const kMDItemFSIsExtensionHidden: CFStringRef;
pub extern const kMDItemFSIsStationery: CFStringRef;
pub extern const kMDItemFSInvisible: CFStringRef;
pub extern const kMDItemFSLabel: CFStringRef;
pub extern const kMDItemFSNodeCount: CFStringRef;
pub extern const kMDItemHTMLContent: CFStringRef;
pub extern const kMDItemTextContent: CFStringRef;
pub extern const kMDItemAudioSampleRate: CFStringRef;
pub extern const kMDItemAudioChannelCount: CFStringRef;
pub extern const kMDItemTempo: CFStringRef;
pub extern const kMDItemKeySignature: CFStringRef;
pub extern const kMDItemTimeSignature: CFStringRef;
pub extern const kMDItemAudioEncodingApplication: CFStringRef;
pub extern const kMDItemComposer: CFStringRef;
pub extern const kMDItemLyricist: CFStringRef;
pub extern const kMDItemAudioTrackNumber: CFStringRef;
pub extern const kMDItemRecordingDate: CFStringRef;
pub extern const kMDItemMusicalGenre: CFStringRef;
pub extern const kMDItemIsGeneralMIDISequence: CFStringRef;
pub extern const kMDItemRecordingYear: CFStringRef;
pub extern const kMDItemOrganizations: CFStringRef;
pub extern const kMDItemLanguages: CFStringRef;
pub extern const kMDItemRights: CFStringRef;
pub extern const kMDItemPublishers: CFStringRef;
pub extern const kMDItemContributors: CFStringRef;
pub extern const kMDItemCoverage: CFStringRef;
pub extern const kMDItemSubject: CFStringRef;
pub extern const kMDItemTheme: CFStringRef;
pub extern const kMDItemDescription: CFStringRef;
pub extern const kMDItemIdentifier: CFStringRef;
pub extern const kMDItemAudiences: CFStringRef;
pub extern const kMDItemNumberOfPages: CFStringRef;
pub extern const kMDItemPageWidth: CFStringRef;
pub extern const kMDItemPageHeight: CFStringRef;
pub extern const kMDItemSecurityMethod: CFStringRef;
pub extern const kMDItemCreator: CFStringRef;
pub extern const kMDItemEncodingApplications: CFStringRef;
pub extern const kMDItemDueDate: CFStringRef;
pub extern const kMDItemStarRating: CFStringRef;
pub extern const kMDItemPhoneNumbers: CFStringRef;
pub extern const kMDItemEmailAddresses: CFStringRef;
pub extern const kMDItemInstantMessageAddresses: CFStringRef;
pub extern const kMDItemKind: CFStringRef;
pub extern const kMDItemRecipients: CFStringRef;
pub extern const kMDItemFinderComment: CFStringRef;
pub extern const kMDItemFonts: CFStringRef;
pub extern const kMDItemAppleLoopsRootKey: CFStringRef;
pub extern const kMDItemAppleLoopsKeyFilterType: CFStringRef;
pub extern const kMDItemAppleLoopsLoopMode: CFStringRef;
pub extern const kMDItemAppleLoopDescriptors: CFStringRef;
pub extern const kMDItemMusicalInstrumentCategory: CFStringRef;
pub extern const kMDItemMusicalInstrumentName: CFStringRef;
pub extern const kMDItemCFBundleIdentifier: CFStringRef;
pub extern const kMDItemSupportFileType: CFStringRef;
pub extern const kMDItemInformation: CFStringRef;
pub extern const kMDItemDirector: CFStringRef;
pub extern const kMDItemProducer: CFStringRef;
pub extern const kMDItemGenre: CFStringRef;
pub extern const kMDItemPerformers: CFStringRef;
pub extern const kMDItemOriginalFormat: CFStringRef;
pub extern const kMDItemOriginalSource: CFStringRef;
pub extern const kMDItemAuthorEmailAddresses: CFStringRef;
pub extern const kMDItemRecipientEmailAddresses: CFStringRef;
pub extern const kMDItemAuthorAddresses: CFStringRef;
pub extern const kMDItemRecipientAddresses: CFStringRef;
pub extern const kMDItemURL: CFStringRef;
pub extern const kMDItemLabelIcon: CFStringRef;
pub extern const kMDItemLabelID: CFStringRef;
pub extern const kMDItemLabelKind: CFStringRef;
pub extern const kMDItemLabelUUID: CFStringRef;
pub extern const kMDItemIsLikelyJunk: CFStringRef;
pub extern const kMDItemExecutableArchitectures: CFStringRef;
pub extern const kMDItemExecutablePlatform: CFStringRef;
pub extern const kMDItemApplicationCategories: CFStringRef;
pub extern const kMDItemIsApplicationManaged: CFStringRef;
pub extern fn __MDItemCopyAttributesEllipsis1(item: MDItemRef, ...) CFDictionaryRef;
pub const struct___MDQuery = opaque {};
pub const MDQueryRef = ?*struct___MDQuery;
pub const kMDQuerySynchronous: c_int = 1;
pub const kMDQueryWantsUpdates: c_int = 4;
pub const kMDQueryAllowFSTranslation: c_int = 8;
pub const MDQueryOptionFlags = c_uint;
pub extern fn MDQueryGetTypeID() CFTypeID;
pub extern fn MDQueryCreate(allocator: CFAllocatorRef, queryString: CFStringRef, valueListAttrs: CFArrayRef, sortingAttrs: CFArrayRef) MDQueryRef;
pub extern fn MDQueryCreateSubset(allocator: CFAllocatorRef, query: MDQueryRef, queryString: CFStringRef, valueListAttrs: CFArrayRef, sortingAttrs: CFArrayRef) MDQueryRef;
pub extern fn MDQueryCreateForItems(allocator: CFAllocatorRef, queryString: CFStringRef, valueListAttrs: CFArrayRef, sortingAttrs: CFArrayRef, items: CFArrayRef) MDQueryRef;
pub extern fn MDQueryCopyQueryString(query: MDQueryRef) CFStringRef;
pub extern fn MDQueryCopyValueListAttributes(query: MDQueryRef) CFArrayRef;
pub extern fn MDQueryCopySortingAttributes(query: MDQueryRef) CFArrayRef;
pub const MDQueryBatchingParams = extern struct {
    first_max_num: usize,
    first_max_ms: usize,
    progress_max_num: usize,
    progress_max_ms: usize,
    update_max_num: usize,
    update_max_ms: usize,
};
pub extern fn MDQueryGetBatchingParameters(query: MDQueryRef) MDQueryBatchingParams;
pub extern fn MDQuerySetBatchingParameters(query: MDQueryRef, params: MDQueryBatchingParams) void;
pub const MDQueryCreateResultFunction = ?*const fn (MDQueryRef, MDItemRef, ?*anyopaque) callconv(.C) ?*const anyopaque;
pub extern fn MDQuerySetCreateResultFunction(query: MDQueryRef, func: MDQueryCreateResultFunction, context: ?*anyopaque, cb: [*c]const CFArrayCallBacks) void;
pub const MDQueryCreateValueFunction = ?*const fn (MDQueryRef, CFStringRef, CFTypeRef, ?*anyopaque) callconv(.C) ?*const anyopaque;
pub extern fn MDQuerySetCreateValueFunction(query: MDQueryRef, func: MDQueryCreateValueFunction, context: ?*anyopaque, cb: [*c]const CFArrayCallBacks) void;
pub extern fn MDQuerySetDispatchQueue(query: MDQueryRef, queue: dispatch_queue_t) void;
pub extern fn MDQueryExecute(query: MDQueryRef, optionFlags: CFOptionFlags) Boolean;
pub extern fn MDQueryStop(query: MDQueryRef) void;
pub extern fn MDQueryDisableUpdates(query: MDQueryRef) void;
pub extern fn MDQueryEnableUpdates(query: MDQueryRef) void;
pub extern fn MDQueryIsGatheringComplete(query: MDQueryRef) Boolean;
pub extern fn MDQueryGetResultCount(query: MDQueryRef) CFIndex;
pub extern fn MDQueryGetResultAtIndex(query: MDQueryRef, idx: CFIndex) ?*const anyopaque;
pub extern fn MDQueryGetIndexOfResult(query: MDQueryRef, result: ?*const anyopaque) CFIndex;
pub extern fn MDQueryGetAttributeValueOfResultAtIndex(query: MDQueryRef, name: CFStringRef, idx: CFIndex) ?*anyopaque;
pub extern fn MDQueryCopyValuesOfAttribute(query: MDQueryRef, name: CFStringRef) CFArrayRef;
pub extern fn MDQueryGetCountOfResultsWithAttributeValue(query: MDQueryRef, name: CFStringRef, value: CFTypeRef) CFIndex;
pub extern fn MDQuerySetSortOrder(query: MDQueryRef, sortingAttrs: CFArrayRef) Boolean;
pub const kMDQueryReverseSortOrderFlag: c_int = 1;
pub const MDQuerySortOptionFlags = c_uint;
pub extern fn MDQuerySetSortOptionFlagsForAttribute(query: MDQueryRef, fieldName: CFStringRef, flags: u32) Boolean;
pub extern fn MDQueryGetSortOptionFlagsForAttribute(query: MDQueryRef, fieldName: CFStringRef) u32;
pub const MDQuerySortComparatorFunction = ?*const fn ([*c]const CFTypeRef, [*c]const CFTypeRef, ?*anyopaque) callconv(.C) CFComparisonResult;
pub extern fn MDQuerySetSortComparator(query: MDQueryRef, comparator: MDQuerySortComparatorFunction, context: ?*anyopaque) void; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.framework/Headers/MDQuery.h:862:16: warning: unsupported type: 'BlockPointer'
pub const MDQuerySetSortComparatorBlock = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.framework/Headers/MDQuery.h:862:16
pub extern const kMDQueryProgressNotification: CFStringRef;
pub extern const kMDQueryDidFinishNotification: CFStringRef;
pub extern const kMDQueryDidUpdateNotification: CFStringRef;
pub extern const kMDQueryUpdateAddedItems: CFStringRef;
pub extern const kMDQueryUpdateChangedItems: CFStringRef;
pub extern const kMDQueryUpdateRemovedItems: CFStringRef;
pub extern const kMDQueryResultContentRelevance: CFStringRef;
pub extern fn MDQuerySetSearchScope(query: MDQueryRef, scopeDirectories: CFArrayRef, scopeOptions: OptionBits) void;
pub extern const kMDQueryScopeHome: CFStringRef;
pub extern const kMDQueryScopeComputer: CFStringRef;
pub extern const kMDQueryScopeNetwork: CFStringRef;
pub extern const kMDQueryScopeAllIndexed: CFStringRef;
pub extern const kMDQueryScopeComputerIndexed: CFStringRef;
pub extern const kMDQueryScopeNetworkIndexed: CFStringRef;
pub extern fn MDQuerySetMaxCount(query: MDQueryRef, size: CFIndex) void;
pub const struct___MDLabel = opaque {};
pub const MDLabelRef = ?*struct___MDLabel;
pub extern fn MDLabelGetTypeID() CFTypeID;
pub extern fn MDItemCopyLabels(item: MDItemRef) CFArrayRef;
pub extern fn MDItemSetLabel(item: MDItemRef, label: MDLabelRef) Boolean;
pub extern fn MDItemRemoveLabel(item: MDItemRef, label: MDLabelRef) Boolean;
pub const kMDLabelUserDomain: c_int = 0;
pub const kMDLabelLocalDomain: c_int = 1;
pub const MDLabelDomain = c_uint;
pub extern fn MDLabelCreate(allocator: CFAllocatorRef, displayName: CFStringRef, kind: CFStringRef, domain: MDLabelDomain) MDLabelRef;
pub extern fn MDLabelCopyAttribute(label: MDLabelRef, name: CFStringRef) CFTypeRef;
pub extern fn MDLabelCopyAttributeName(label: MDLabelRef) CFStringRef;
pub extern fn MDLabelDelete(label: MDLabelRef) Boolean;
pub extern fn MDLabelSetAttributes(label: MDLabelRef, attrs: CFDictionaryRef) Boolean;
pub extern fn MDCopyLabelKinds() CFArrayRef;
pub extern fn MDCopyLabelsMatchingExpression(simpleQueryString: CFStringRef) CFArrayRef;
pub extern fn MDCopyLabelsWithKind(kind: CFStringRef) CFArrayRef;
pub extern fn MDCopyLabelWithUUID(labelUUID: CFUUIDRef) MDLabelRef;
pub extern var kMDLabelBundleURL: CFStringRef;
pub extern var kMDLabelContentChangeDate: CFStringRef;
pub extern var kMDLabelDisplayName: CFStringRef;
pub extern var kMDLabelIconData: CFStringRef;
pub extern var kMDLabelIconUUID: CFStringRef;
pub extern var kMDLabelIsMutuallyExclusiveSetMember: CFStringRef;
pub extern var kMDLabelKind: CFStringRef;
pub extern var kMDLabelSetsFinderColor: CFStringRef;
pub extern var kMDLabelUUID: CFStringRef;
pub extern var kMDLabelVisibility: CFStringRef;
pub extern var kMDLabelKindIsMutuallyExclusiveSetKey: CFStringRef;
pub extern var kMDLabelKindVisibilityKey: CFStringRef;
pub extern var kMDPrivateVisibility: CFStringRef;
pub extern var kMDPublicVisibility: CFStringRef;
pub extern const kMDLabelAddedNotification: CFStringRef;
pub extern const kMDLabelChangedNotification: CFStringRef;
pub extern const kMDLabelRemovedNotification: CFStringRef;
pub extern fn MDSchemaCopyAttributesForContentType(contentTypeUTI: CFStringRef) CFDictionaryRef;
pub extern fn MDSchemaCopyMetaAttributesForAttribute(name: CFStringRef) CFDictionaryRef;
pub extern fn MDSchemaCopyAllAttributes() CFArrayRef;
pub extern fn MDSchemaCopyDisplayNameForAttribute(name: CFStringRef) CFStringRef;
pub extern fn MDSchemaCopyDisplayDescriptionForAttribute(name: CFStringRef) CFStringRef;
pub extern const kMDAttributeDisplayValues: CFStringRef;
pub extern const kMDAttributeAllValues: CFStringRef;
pub extern const kMDAttributeReadOnlyValues: CFStringRef;
pub extern const kMDExporterAvaliable: CFStringRef;
pub extern const kMDAttributeName: CFStringRef;
pub extern const kMDAttributeType: CFStringRef;
pub extern const kMDAttributeMultiValued: CFStringRef;
pub const SKDocumentRef = CFTypeRef;
pub extern fn SKDocumentGetTypeID() CFTypeID;
pub extern fn SKDocumentCreateWithURL(inURL: CFURLRef) SKDocumentRef;
pub extern fn SKDocumentCopyURL(inDocument: SKDocumentRef) CFURLRef;
pub extern fn SKDocumentCreate(inScheme: CFStringRef, inParent: SKDocumentRef, inName: CFStringRef) SKDocumentRef;
pub extern fn SKDocumentGetSchemeName(inDocument: SKDocumentRef) CFStringRef;
pub extern fn SKDocumentGetName(inDocument: SKDocumentRef) CFStringRef;
pub extern fn SKDocumentGetParent(inDocument: SKDocumentRef) SKDocumentRef;
pub extern const kSKMinTermLength: CFStringRef;
pub extern const kSKSubstitutions: CFStringRef;
pub extern const kSKStopWords: CFStringRef;
pub extern const kSKProximityIndexing: CFStringRef;
pub extern const kSKMaximumTerms: CFStringRef;
pub extern const kSKTermChars: CFStringRef;
pub extern const kSKStartTermChars: CFStringRef;
pub extern const kSKEndTermChars: CFStringRef;
pub extern const kSKLanguageTypes: CFStringRef;
pub const struct___SKIndex = opaque {};
pub const SKIndexRef = ?*struct___SKIndex;
pub extern fn SKIndexGetTypeID() CFTypeID;
pub const struct___SKIndexDocumentIterator = opaque {};
pub const SKIndexDocumentIteratorRef = ?*struct___SKIndexDocumentIterator;
pub extern fn SKIndexDocumentIteratorGetTypeID() CFTypeID;
pub const kSKIndexUnknown: c_int = 0;
pub const kSKIndexInverted: c_int = 1;
pub const kSKIndexVector: c_int = 2;
pub const kSKIndexInvertedVector: c_int = 3;
pub const enum_SKIndexType = c_uint;
pub const SKIndexType = enum_SKIndexType;
pub const kSKDocumentStateNotIndexed: c_int = 0;
pub const kSKDocumentStateIndexed: c_int = 1;
pub const kSKDocumentStateAddPending: c_int = 2;
pub const kSKDocumentStateDeletePending: c_int = 3;
pub const enum_SKDocumentIndexState = c_uint;
pub const SKDocumentIndexState = enum_SKDocumentIndexState;
pub extern fn SKIndexCreateWithURL(inURL: CFURLRef, inIndexName: CFStringRef, inIndexType: SKIndexType, inAnalysisProperties: CFDictionaryRef) SKIndexRef;
pub extern fn SKIndexOpenWithURL(inURL: CFURLRef, inIndexName: CFStringRef, inWriteAccess: Boolean) SKIndexRef;
pub extern fn SKIndexCreateWithMutableData(inData: CFMutableDataRef, inIndexName: CFStringRef, inIndexType: SKIndexType, inAnalysisProperties: CFDictionaryRef) SKIndexRef;
pub extern fn SKIndexOpenWithData(inData: CFDataRef, inIndexName: CFStringRef) SKIndexRef;
pub extern fn SKIndexOpenWithMutableData(inData: CFMutableDataRef, inIndexName: CFStringRef) SKIndexRef;
pub extern fn SKIndexFlush(inIndex: SKIndexRef) Boolean;
pub extern fn SKIndexSetMaximumBytesBeforeFlush(inIndex: SKIndexRef, inBytesForUpdate: CFIndex) void;
pub extern fn SKIndexGetMaximumBytesBeforeFlush(inIndex: SKIndexRef) CFIndex;
pub extern fn SKIndexCompact(inIndex: SKIndexRef) Boolean;
pub extern fn SKIndexGetIndexType(inIndex: SKIndexRef) SKIndexType;
pub extern fn SKIndexGetAnalysisProperties(inIndex: SKIndexRef) CFDictionaryRef;
pub extern fn SKIndexGetDocumentCount(inIndex: SKIndexRef) CFIndex;
pub extern fn SKIndexClose(inIndex: SKIndexRef) void;
pub const SKDocumentID = CFIndex;
pub extern fn SKIndexAddDocumentWithText(inIndex: SKIndexRef, inDocument: SKDocumentRef, inDocumentText: CFStringRef, inCanReplace: Boolean) Boolean;
pub extern fn SKIndexAddDocument(inIndex: SKIndexRef, inDocument: SKDocumentRef, inMIMETypeHint: CFStringRef, inCanReplace: Boolean) Boolean;
pub extern fn SKIndexRemoveDocument(inIndex: SKIndexRef, inDocument: SKDocumentRef) Boolean;
pub extern fn SKIndexCopyDocumentProperties(inIndex: SKIndexRef, inDocument: SKDocumentRef) CFDictionaryRef;
pub extern fn SKIndexSetDocumentProperties(inIndex: SKIndexRef, inDocument: SKDocumentRef, inProperties: CFDictionaryRef) void;
pub extern fn SKIndexGetDocumentState(inIndex: SKIndexRef, inDocument: SKDocumentRef) SKDocumentIndexState;
pub extern fn SKIndexGetDocumentID(inIndex: SKIndexRef, inDocument: SKDocumentRef) SKDocumentID;
pub extern fn SKIndexCopyDocumentForDocumentID(inIndex: SKIndexRef, inDocumentID: SKDocumentID) SKDocumentRef;
pub extern fn SKIndexRenameDocument(inIndex: SKIndexRef, inDocument: SKDocumentRef, inNewName: CFStringRef) Boolean;
pub extern fn SKIndexMoveDocument(inIndex: SKIndexRef, inDocument: SKDocumentRef, inNewParent: SKDocumentRef) Boolean;
pub extern fn SKIndexDocumentIteratorCreate(inIndex: SKIndexRef, inParentDocument: SKDocumentRef) SKIndexDocumentIteratorRef;
pub extern fn SKIndexDocumentIteratorCopyNext(inIterator: SKIndexDocumentIteratorRef) SKDocumentRef;
pub extern fn SKIndexGetMaximumDocumentID(inIndex: SKIndexRef) SKDocumentID;
pub extern fn SKIndexGetDocumentTermCount(inIndex: SKIndexRef, inDocumentID: SKDocumentID) CFIndex;
pub extern fn SKIndexCopyTermIDArrayForDocumentID(inIndex: SKIndexRef, inDocumentID: SKDocumentID) CFArrayRef;
pub extern fn SKIndexGetDocumentTermFrequency(inIndex: SKIndexRef, inDocumentID: SKDocumentID, inTermID: CFIndex) CFIndex;
pub extern fn SKIndexGetMaximumTermID(inIndex: SKIndexRef) CFIndex;
pub extern fn SKIndexGetTermDocumentCount(inIndex: SKIndexRef, inTermID: CFIndex) CFIndex;
pub extern fn SKIndexCopyDocumentIDArrayForTermID(inIndex: SKIndexRef, inTermID: CFIndex) CFArrayRef;
pub extern fn SKIndexCopyTermStringForTermID(inIndex: SKIndexRef, inTermID: CFIndex) CFStringRef;
pub extern fn SKIndexGetTermIDForTermString(inIndex: SKIndexRef, inTermString: CFStringRef) CFIndex;
pub extern fn SKLoadDefaultExtractorPlugIns() void;
pub const struct___SKSearch = opaque {};
pub const SKSearchRef = ?*struct___SKSearch;
pub extern fn SKSearchGetTypeID() CFTypeID;
pub const SKSearchOptions = UInt32;
pub const kSKSearchOptionDefault: c_int = 0;
pub const kSKSearchOptionNoRelevanceScores: c_int = 1;
pub const kSKSearchOptionSpaceMeansOR: c_int = 2;
pub const kSKSearchOptionFindSimilar: c_int = 4;
const enum_unnamed_1226 = c_uint;
pub extern fn SKSearchCreate(inIndex: SKIndexRef, inQuery: CFStringRef, inSearchOptions: SKSearchOptions) SKSearchRef;
pub extern fn SKSearchCancel(inSearch: SKSearchRef) void;
pub extern fn SKSearchFindMatches(inSearch: SKSearchRef, inMaximumCount: CFIndex, outDocumentIDsArray: [*c]SKDocumentID, outScoresArray: [*c]f32, maximumTime: CFTimeInterval, outFoundCount: [*c]CFIndex) Boolean;
pub extern fn SKIndexCopyInfoForDocumentIDs(inIndex: SKIndexRef, inCount: CFIndex, inDocumentIDsArray: [*c]SKDocumentID, outNamesArray: [*c]CFStringRef, outParentIDsArray: [*c]SKDocumentID) void;
pub extern fn SKIndexCopyDocumentRefsForDocumentIDs(inIndex: SKIndexRef, inCount: CFIndex, inDocumentIDsArray: [*c]SKDocumentID, outDocumentRefsArray: [*c]SKDocumentRef) void;
pub extern fn SKIndexCopyDocumentURLsForDocumentIDs(inIndex: SKIndexRef, inCount: CFIndex, inDocumentIDsArray: [*c]SKDocumentID, outDocumentURLsArray: [*c]CFURLRef) void;
pub const struct___SKSearchGroup = opaque {};
pub const SKSearchGroupRef = ?*struct___SKSearchGroup;
pub extern fn SKSearchGroupGetTypeID() CFTypeID;
pub const struct___SKSearchResults = opaque {};
pub const SKSearchResultsRef = ?*struct___SKSearchResults;
pub extern fn SKSearchResultsGetTypeID() CFTypeID;
pub const kSKSearchRanked: c_int = 0;
pub const kSKSearchBooleanRanked: c_int = 1;
pub const kSKSearchRequiredRanked: c_int = 2;
pub const kSKSearchPrefixRanked: c_int = 3;
pub const enum_SKSearchType = c_uint;
pub const SKSearchType = enum_SKSearchType;
pub const SKSearchResultsFilterCallBack = ?*const fn (SKIndexRef, SKDocumentRef, ?*anyopaque) callconv(.C) Boolean;
pub extern fn SKSearchGroupCreate(inArrayOfInIndexes: CFArrayRef) SKSearchGroupRef;
pub extern fn SKSearchGroupCopyIndexes(inSearchGroup: SKSearchGroupRef) CFArrayRef;
pub extern fn SKSearchResultsCreateWithQuery(inSearchGroup: SKSearchGroupRef, inQuery: CFStringRef, inSearchType: SKSearchType, inMaxFoundDocuments: CFIndex, inContext: ?*anyopaque, inFilterCallBack: SKSearchResultsFilterCallBack) SKSearchResultsRef;
pub extern fn SKSearchResultsCreateWithDocuments(inSearchGroup: SKSearchGroupRef, inExampleDocuments: CFArrayRef, inMaxFoundDocuments: CFIndex, inContext: ?*anyopaque, inFilterCallBack: SKSearchResultsFilterCallBack) SKSearchResultsRef;
pub extern fn SKSearchResultsGetCount(inSearchResults: SKSearchResultsRef) CFIndex;
pub extern fn SKSearchResultsGetInfoInRange(inSearchResults: SKSearchResultsRef, inRange: CFRange, outDocumentsArray: [*c]SKDocumentRef, outIndexesArray: [*c]SKIndexRef, outScoresArray: [*c]f32) CFIndex;
pub extern fn SKSearchResultsCopyMatchingTerms(inSearchResults: SKSearchResultsRef, inItem: CFIndex) CFArrayRef;
pub const struct___SKSummary = opaque {};
pub const SKSummaryRef = ?*struct___SKSummary;
pub extern fn SKSummaryGetTypeID() CFTypeID;
pub extern fn SKSummaryCreateWithString(inString: CFStringRef) SKSummaryRef;
pub extern fn SKSummaryGetSentenceCount(summary: SKSummaryRef) CFIndex;
pub extern fn SKSummaryGetParagraphCount(summary: SKSummaryRef) CFIndex;
pub extern fn SKSummaryCopySentenceAtIndex(summary: SKSummaryRef, i: CFIndex) CFStringRef;
pub extern fn SKSummaryCopyParagraphAtIndex(summary: SKSummaryRef, i: CFIndex) CFStringRef;
pub extern fn SKSummaryCopySentenceSummaryString(summary: SKSummaryRef, numSentences: CFIndex) CFStringRef;
pub extern fn SKSummaryCopyParagraphSummaryString(summary: SKSummaryRef, numParagraphs: CFIndex) CFStringRef;
pub extern fn SKSummaryGetSentenceSummaryInfo(summary: SKSummaryRef, numSentencesInSummary: CFIndex, outRankOrderOfSentences: [*c]CFIndex, outSentenceIndexOfSentences: [*c]CFIndex, outParagraphIndexOfSentences: [*c]CFIndex) CFIndex;
pub extern fn SKSummaryGetParagraphSummaryInfo(summary: SKSummaryRef, numParagraphsInSummary: CFIndex, outRankOrderOfParagraphs: [*c]CFIndex, outParagraphIndexOfParagraphs: [*c]CFIndex) CFIndex;
pub const FSEventStreamCreateFlags = UInt32;
pub const kFSEventStreamCreateFlagNone: c_int = 0;
pub const kFSEventStreamCreateFlagUseCFTypes: c_int = 1;
pub const kFSEventStreamCreateFlagNoDefer: c_int = 2;
pub const kFSEventStreamCreateFlagWatchRoot: c_int = 4;
pub const kFSEventStreamCreateFlagIgnoreSelf: c_int = 8;
pub const kFSEventStreamCreateFlagFileEvents: c_int = 16;
pub const kFSEventStreamCreateFlagMarkSelf: c_int = 32;
pub const kFSEventStreamCreateFlagUseExtendedData: c_int = 64;
pub const kFSEventStreamCreateFlagFullHistory: c_int = 128;
const enum_unnamed_1227 = c_uint;
pub const FSEventStreamEventFlags = UInt32;
pub const kFSEventStreamEventFlagNone: c_int = 0;
pub const kFSEventStreamEventFlagMustScanSubDirs: c_int = 1;
pub const kFSEventStreamEventFlagUserDropped: c_int = 2;
pub const kFSEventStreamEventFlagKernelDropped: c_int = 4;
pub const kFSEventStreamEventFlagEventIdsWrapped: c_int = 8;
pub const kFSEventStreamEventFlagHistoryDone: c_int = 16;
pub const kFSEventStreamEventFlagRootChanged: c_int = 32;
pub const kFSEventStreamEventFlagMount: c_int = 64;
pub const kFSEventStreamEventFlagUnmount: c_int = 128;
pub const kFSEventStreamEventFlagItemCreated: c_int = 256;
pub const kFSEventStreamEventFlagItemRemoved: c_int = 512;
pub const kFSEventStreamEventFlagItemInodeMetaMod: c_int = 1024;
pub const kFSEventStreamEventFlagItemRenamed: c_int = 2048;
pub const kFSEventStreamEventFlagItemModified: c_int = 4096;
pub const kFSEventStreamEventFlagItemFinderInfoMod: c_int = 8192;
pub const kFSEventStreamEventFlagItemChangeOwner: c_int = 16384;
pub const kFSEventStreamEventFlagItemXattrMod: c_int = 32768;
pub const kFSEventStreamEventFlagItemIsFile: c_int = 65536;
pub const kFSEventStreamEventFlagItemIsDir: c_int = 131072;
pub const kFSEventStreamEventFlagItemIsSymlink: c_int = 262144;
pub const kFSEventStreamEventFlagOwnEvent: c_int = 524288;
pub const kFSEventStreamEventFlagItemIsHardlink: c_int = 1048576;
pub const kFSEventStreamEventFlagItemIsLastHardlink: c_int = 2097152;
pub const kFSEventStreamEventFlagItemCloned: c_int = 4194304;
const enum_unnamed_1228 = c_uint;
pub const FSEventStreamEventId = UInt64;
pub const kFSEventStreamEventIdSinceNow: c_ulong = 18446744073709551615;
const enum_unnamed_1229 = c_ulong;
pub const struct___FSEventStream = opaque {};
pub const FSEventStreamRef = ?*struct___FSEventStream;
pub const ConstFSEventStreamRef = ?*const struct___FSEventStream;
pub const struct_FSEventStreamContext = extern struct {
    version: CFIndex,
    info: ?*anyopaque,
    retain: CFAllocatorRetainCallBack,
    release: CFAllocatorReleaseCallBack,
    copyDescription: CFAllocatorCopyDescriptionCallBack,
};
pub const FSEventStreamContext = struct_FSEventStreamContext;
pub const FSEventStreamCallback = ?*const fn (ConstFSEventStreamRef, ?*anyopaque, usize, ?*anyopaque, [*c]const FSEventStreamEventFlags, [*c]const FSEventStreamEventId) callconv(.C) void;
pub extern fn FSEventStreamCreate(allocator: CFAllocatorRef, callback: FSEventStreamCallback, context: [*c]FSEventStreamContext, pathsToWatch: CFArrayRef, sinceWhen: FSEventStreamEventId, latency: CFTimeInterval, flags: FSEventStreamCreateFlags) FSEventStreamRef;
pub extern fn FSEventStreamCreateRelativeToDevice(allocator: CFAllocatorRef, callback: FSEventStreamCallback, context: [*c]FSEventStreamContext, deviceToWatch: dev_t, pathsToWatchRelativeToDevice: CFArrayRef, sinceWhen: FSEventStreamEventId, latency: CFTimeInterval, flags: FSEventStreamCreateFlags) FSEventStreamRef;
pub extern fn FSEventStreamGetLatestEventId(streamRef: ConstFSEventStreamRef) FSEventStreamEventId;
pub extern fn FSEventStreamGetDeviceBeingWatched(streamRef: ConstFSEventStreamRef) dev_t;
pub extern fn FSEventStreamCopyPathsBeingWatched(streamRef: ConstFSEventStreamRef) CFArrayRef;
pub extern fn FSEventsGetCurrentEventId() FSEventStreamEventId;
pub extern fn FSEventsCopyUUIDForDevice(dev: dev_t) CFUUIDRef;
pub extern fn FSEventsGetLastEventIdForDeviceBeforeTime(dev: dev_t, time: CFAbsoluteTime) FSEventStreamEventId;
pub extern fn FSEventsPurgeEventsForDeviceUpToEventId(dev: dev_t, eventId: FSEventStreamEventId) Boolean;
pub extern fn FSEventStreamRetain(streamRef: FSEventStreamRef) void;
pub extern fn FSEventStreamRelease(streamRef: FSEventStreamRef) void;
pub extern fn FSEventStreamScheduleWithRunLoop(streamRef: FSEventStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) void;
pub extern fn FSEventStreamUnscheduleFromRunLoop(streamRef: FSEventStreamRef, runLoop: CFRunLoopRef, runLoopMode: CFStringRef) void;
pub extern fn FSEventStreamSetDispatchQueue(streamRef: FSEventStreamRef, q: dispatch_queue_t) void;
pub extern fn FSEventStreamInvalidate(streamRef: FSEventStreamRef) void;
pub extern fn FSEventStreamStart(streamRef: FSEventStreamRef) Boolean;
pub extern fn FSEventStreamFlushAsync(streamRef: FSEventStreamRef) FSEventStreamEventId;
pub extern fn FSEventStreamFlushSync(streamRef: FSEventStreamRef) void;
pub extern fn FSEventStreamStop(streamRef: FSEventStreamRef) void;
pub extern fn FSEventStreamShow(streamRef: ConstFSEventStreamRef) void;
pub extern fn FSEventStreamCopyDescription(streamRef: ConstFSEventStreamRef) CFStringRef;
pub extern fn FSEventStreamSetExclusionPaths(streamRef: FSEventStreamRef, pathsToExclude: CFArrayRef) Boolean;
pub const struct_OpaqueLSSharedFileListRef = opaque {};
pub const LSSharedFileListRef = ?*struct_OpaqueLSSharedFileListRef;
pub const struct_OpaqueLSSharedFileListItemRef = opaque {};
pub const LSSharedFileListItemRef = ?*struct_OpaqueLSSharedFileListItemRef;
pub extern var kLSSharedFileListFavoriteVolumes: CFStringRef;
pub extern var kLSSharedFileListFavoriteItems: CFStringRef;
pub extern var kLSSharedFileListRecentApplicationItems: CFStringRef;
pub extern var kLSSharedFileListRecentDocumentItems: CFStringRef;
pub extern var kLSSharedFileListRecentServerItems: CFStringRef;
pub extern var kLSSharedFileListSessionLoginItems: CFStringRef;
pub extern var kLSSharedFileListGlobalLoginItems: CFStringRef;
pub extern var kLSSharedFileListRecentItemsMaxAmount: CFStringRef;
pub extern var kLSSharedFileListVolumesComputerVisible: CFStringRef;
pub extern var kLSSharedFileListVolumesIDiskVisible: CFStringRef;
pub extern var kLSSharedFileListVolumesNetworkVisible: CFStringRef;
pub extern var kLSSharedFileListItemBeforeFirst: LSSharedFileListItemRef;
pub extern var kLSSharedFileListItemLast: LSSharedFileListItemRef;
pub extern var kLSSharedFileListItemHidden: CFStringRef;
pub extern var kLSSharedFileListLoginItemHidden: CFStringRef;
pub const LSSharedFileListResolutionFlags = UInt32;
pub const kLSSharedFileListNoUserInteraction: c_int = 1;
pub const kLSSharedFileListDoNotMountVolumes: c_int = 2;
const enum_unnamed_1230 = c_uint;
pub const LSSharedFileListChangedProcPtr = ?*const fn (LSSharedFileListRef, ?*anyopaque) callconv(.C) void;
pub extern fn LSSharedFileListGetTypeID() CFTypeID;
pub extern fn LSSharedFileListItemGetTypeID() CFTypeID;
pub extern fn LSSharedFileListCreate(inAllocator: CFAllocatorRef, inListType: CFStringRef, listOptions: CFTypeRef) LSSharedFileListRef;
pub extern fn LSSharedFileListSetAuthorization(inList: LSSharedFileListRef, inAuthorization: AuthorizationRef) OSStatus;
pub extern fn LSSharedFileListAddObserver(inList: LSSharedFileListRef, inRunloop: CFRunLoopRef, inRunloopMode: CFStringRef, callback: LSSharedFileListChangedProcPtr, context: ?*anyopaque) void;
pub extern fn LSSharedFileListRemoveObserver(inList: LSSharedFileListRef, inRunloop: CFRunLoopRef, inRunloopMode: CFStringRef, callback: LSSharedFileListChangedProcPtr, context: ?*anyopaque) void;
pub extern fn LSSharedFileListGetSeedValue(inList: LSSharedFileListRef) UInt32;
pub extern fn LSSharedFileListCopyProperty(inList: LSSharedFileListRef, inPropertyName: CFStringRef) CFTypeRef;
pub extern fn LSSharedFileListSetProperty(inList: LSSharedFileListRef, inPropertyName: CFStringRef, inPropertyData: CFTypeRef) OSStatus;
pub extern fn LSSharedFileListCopySnapshot(inList: LSSharedFileListRef, outSnapshotSeed: [*c]UInt32) CFArrayRef;
pub extern fn LSSharedFileListInsertItemURL(inList: LSSharedFileListRef, insertAfterThisItem: LSSharedFileListItemRef, inDisplayName: CFStringRef, inIconRef: IconRef, inURL: CFURLRef, inPropertiesToSet: CFDictionaryRef, inPropertiesToClear: CFArrayRef) LSSharedFileListItemRef;
pub extern fn LSSharedFileListInsertItemFSRef(inList: LSSharedFileListRef, insertAfterThisItem: LSSharedFileListItemRef, inDisplayName: CFStringRef, inIconRef: IconRef, inFSRef: [*c]const FSRef, inPropertiesToSet: CFDictionaryRef, inPropertiesToClear: CFArrayRef) LSSharedFileListItemRef;
pub extern fn LSSharedFileListItemMove(inList: LSSharedFileListRef, inItem: LSSharedFileListItemRef, inMoveAfterItem: LSSharedFileListItemRef) OSStatus;
pub extern fn LSSharedFileListItemRemove(inList: LSSharedFileListRef, inItem: LSSharedFileListItemRef) OSStatus;
pub extern fn LSSharedFileListRemoveAllItems(inList: LSSharedFileListRef) OSStatus;
pub extern fn LSSharedFileListItemGetID(inItem: LSSharedFileListItemRef) UInt32;
pub extern fn LSSharedFileListItemCopyIconRef(inItem: LSSharedFileListItemRef) IconRef;
pub extern fn LSSharedFileListItemCopyDisplayName(inItem: LSSharedFileListItemRef) CFStringRef;
pub extern fn LSSharedFileListItemResolve(inItem: LSSharedFileListItemRef, inFlags: LSSharedFileListResolutionFlags, outURL: [*c]CFURLRef, outRef: [*c]FSRef) OSStatus;
pub extern fn LSSharedFileListItemCopyResolvedURL(inItem: LSSharedFileListItemRef, inFlags: LSSharedFileListResolutionFlags, outError: [*c]CFErrorRef) CFURLRef;
pub extern fn LSSharedFileListItemCopyProperty(inItem: LSSharedFileListItemRef, inPropertyName: CFStringRef) CFTypeRef;
pub extern fn LSSharedFileListItemSetProperty(inItem: LSSharedFileListItemRef, inPropertyName: CFStringRef, inPropertyData: CFTypeRef) OSStatus;
pub const kAllTypographicFeaturesType: c_int = 0;
pub const kLigaturesType: c_int = 1;
pub const kCursiveConnectionType: c_int = 2;
pub const kLetterCaseType: c_int = 3;
pub const kVerticalSubstitutionType: c_int = 4;
pub const kLinguisticRearrangementType: c_int = 5;
pub const kNumberSpacingType: c_int = 6;
pub const kSmartSwashType: c_int = 8;
pub const kDiacriticsType: c_int = 9;
pub const kVerticalPositionType: c_int = 10;
pub const kFractionsType: c_int = 11;
pub const kOverlappingCharactersType: c_int = 13;
pub const kTypographicExtrasType: c_int = 14;
pub const kMathematicalExtrasType: c_int = 15;
pub const kOrnamentSetsType: c_int = 16;
pub const kCharacterAlternativesType: c_int = 17;
pub const kDesignComplexityType: c_int = 18;
pub const kStyleOptionsType: c_int = 19;
pub const kCharacterShapeType: c_int = 20;
pub const kNumberCaseType: c_int = 21;
pub const kTextSpacingType: c_int = 22;
pub const kTransliterationType: c_int = 23;
pub const kAnnotationType: c_int = 24;
pub const kKanaSpacingType: c_int = 25;
pub const kIdeographicSpacingType: c_int = 26;
pub const kUnicodeDecompositionType: c_int = 27;
pub const kRubyKanaType: c_int = 28;
pub const kCJKSymbolAlternativesType: c_int = 29;
pub const kIdeographicAlternativesType: c_int = 30;
pub const kCJKVerticalRomanPlacementType: c_int = 31;
pub const kItalicCJKRomanType: c_int = 32;
pub const kCaseSensitiveLayoutType: c_int = 33;
pub const kAlternateKanaType: c_int = 34;
pub const kStylisticAlternativesType: c_int = 35;
pub const kContextualAlternatesType: c_int = 36;
pub const kLowerCaseType: c_int = 37;
pub const kUpperCaseType: c_int = 38;
pub const kLanguageTagType: c_int = 39;
pub const kCJKRomanSpacingType: c_int = 103;
pub const kLastFeatureType: c_int = -1;
const enum_unnamed_1231 = c_int;
pub const kAllTypeFeaturesOnSelector: c_int = 0;
pub const kAllTypeFeaturesOffSelector: c_int = 1;
const enum_unnamed_1232 = c_uint;
pub const kRequiredLigaturesOnSelector: c_int = 0;
pub const kRequiredLigaturesOffSelector: c_int = 1;
pub const kCommonLigaturesOnSelector: c_int = 2;
pub const kCommonLigaturesOffSelector: c_int = 3;
pub const kRareLigaturesOnSelector: c_int = 4;
pub const kRareLigaturesOffSelector: c_int = 5;
pub const kLogosOnSelector: c_int = 6;
pub const kLogosOffSelector: c_int = 7;
pub const kRebusPicturesOnSelector: c_int = 8;
pub const kRebusPicturesOffSelector: c_int = 9;
pub const kDiphthongLigaturesOnSelector: c_int = 10;
pub const kDiphthongLigaturesOffSelector: c_int = 11;
pub const kSquaredLigaturesOnSelector: c_int = 12;
pub const kSquaredLigaturesOffSelector: c_int = 13;
pub const kAbbrevSquaredLigaturesOnSelector: c_int = 14;
pub const kAbbrevSquaredLigaturesOffSelector: c_int = 15;
pub const kSymbolLigaturesOnSelector: c_int = 16;
pub const kSymbolLigaturesOffSelector: c_int = 17;
pub const kContextualLigaturesOnSelector: c_int = 18;
pub const kContextualLigaturesOffSelector: c_int = 19;
pub const kHistoricalLigaturesOnSelector: c_int = 20;
pub const kHistoricalLigaturesOffSelector: c_int = 21;
const enum_unnamed_1233 = c_uint;
pub const kUnconnectedSelector: c_int = 0;
pub const kPartiallyConnectedSelector: c_int = 1;
pub const kCursiveSelector: c_int = 2;
const enum_unnamed_1234 = c_uint;
pub const kUpperAndLowerCaseSelector: c_int = 0;
pub const kAllCapsSelector: c_int = 1;
pub const kAllLowerCaseSelector: c_int = 2;
pub const kSmallCapsSelector: c_int = 3;
pub const kInitialCapsSelector: c_int = 4;
pub const kInitialCapsAndSmallCapsSelector: c_int = 5;
const enum_unnamed_1235 = c_uint;
pub const kSubstituteVerticalFormsOnSelector: c_int = 0;
pub const kSubstituteVerticalFormsOffSelector: c_int = 1;
const enum_unnamed_1236 = c_uint;
pub const kLinguisticRearrangementOnSelector: c_int = 0;
pub const kLinguisticRearrangementOffSelector: c_int = 1;
const enum_unnamed_1237 = c_uint;
pub const kMonospacedNumbersSelector: c_int = 0;
pub const kProportionalNumbersSelector: c_int = 1;
pub const kThirdWidthNumbersSelector: c_int = 2;
pub const kQuarterWidthNumbersSelector: c_int = 3;
const enum_unnamed_1238 = c_uint;
pub const kWordInitialSwashesOnSelector: c_int = 0;
pub const kWordInitialSwashesOffSelector: c_int = 1;
pub const kWordFinalSwashesOnSelector: c_int = 2;
pub const kWordFinalSwashesOffSelector: c_int = 3;
pub const kLineInitialSwashesOnSelector: c_int = 4;
pub const kLineInitialSwashesOffSelector: c_int = 5;
pub const kLineFinalSwashesOnSelector: c_int = 6;
pub const kLineFinalSwashesOffSelector: c_int = 7;
pub const kNonFinalSwashesOnSelector: c_int = 8;
pub const kNonFinalSwashesOffSelector: c_int = 9;
const enum_unnamed_1239 = c_uint;
pub const kShowDiacriticsSelector: c_int = 0;
pub const kHideDiacriticsSelector: c_int = 1;
pub const kDecomposeDiacriticsSelector: c_int = 2;
const enum_unnamed_1240 = c_uint;
pub const kNormalPositionSelector: c_int = 0;
pub const kSuperiorsSelector: c_int = 1;
pub const kInferiorsSelector: c_int = 2;
pub const kOrdinalsSelector: c_int = 3;
pub const kScientificInferiorsSelector: c_int = 4;
const enum_unnamed_1241 = c_uint;
pub const kNoFractionsSelector: c_int = 0;
pub const kVerticalFractionsSelector: c_int = 1;
pub const kDiagonalFractionsSelector: c_int = 2;
const enum_unnamed_1242 = c_uint;
pub const kPreventOverlapOnSelector: c_int = 0;
pub const kPreventOverlapOffSelector: c_int = 1;
const enum_unnamed_1243 = c_uint;
pub const kHyphensToEmDashOnSelector: c_int = 0;
pub const kHyphensToEmDashOffSelector: c_int = 1;
pub const kHyphenToEnDashOnSelector: c_int = 2;
pub const kHyphenToEnDashOffSelector: c_int = 3;
pub const kSlashedZeroOnSelector: c_int = 4;
pub const kSlashedZeroOffSelector: c_int = 5;
pub const kFormInterrobangOnSelector: c_int = 6;
pub const kFormInterrobangOffSelector: c_int = 7;
pub const kSmartQuotesOnSelector: c_int = 8;
pub const kSmartQuotesOffSelector: c_int = 9;
pub const kPeriodsToEllipsisOnSelector: c_int = 10;
pub const kPeriodsToEllipsisOffSelector: c_int = 11;
const enum_unnamed_1244 = c_uint;
pub const kHyphenToMinusOnSelector: c_int = 0;
pub const kHyphenToMinusOffSelector: c_int = 1;
pub const kAsteriskToMultiplyOnSelector: c_int = 2;
pub const kAsteriskToMultiplyOffSelector: c_int = 3;
pub const kSlashToDivideOnSelector: c_int = 4;
pub const kSlashToDivideOffSelector: c_int = 5;
pub const kInequalityLigaturesOnSelector: c_int = 6;
pub const kInequalityLigaturesOffSelector: c_int = 7;
pub const kExponentsOnSelector: c_int = 8;
pub const kExponentsOffSelector: c_int = 9;
pub const kMathematicalGreekOnSelector: c_int = 10;
pub const kMathematicalGreekOffSelector: c_int = 11;
const enum_unnamed_1245 = c_uint;
pub const kNoOrnamentsSelector: c_int = 0;
pub const kDingbatsSelector: c_int = 1;
pub const kPiCharactersSelector: c_int = 2;
pub const kFleuronsSelector: c_int = 3;
pub const kDecorativeBordersSelector: c_int = 4;
pub const kInternationalSymbolsSelector: c_int = 5;
pub const kMathSymbolsSelector: c_int = 6;
const enum_unnamed_1246 = c_uint;
pub const kNoAlternatesSelector: c_int = 0;
const enum_unnamed_1247 = c_uint;
pub const kDesignLevel1Selector: c_int = 0;
pub const kDesignLevel2Selector: c_int = 1;
pub const kDesignLevel3Selector: c_int = 2;
pub const kDesignLevel4Selector: c_int = 3;
pub const kDesignLevel5Selector: c_int = 4;
const enum_unnamed_1248 = c_uint;
pub const kNoStyleOptionsSelector: c_int = 0;
pub const kDisplayTextSelector: c_int = 1;
pub const kEngravedTextSelector: c_int = 2;
pub const kIlluminatedCapsSelector: c_int = 3;
pub const kTitlingCapsSelector: c_int = 4;
pub const kTallCapsSelector: c_int = 5;
const enum_unnamed_1249 = c_uint;
pub const kTraditionalCharactersSelector: c_int = 0;
pub const kSimplifiedCharactersSelector: c_int = 1;
pub const kJIS1978CharactersSelector: c_int = 2;
pub const kJIS1983CharactersSelector: c_int = 3;
pub const kJIS1990CharactersSelector: c_int = 4;
pub const kTraditionalAltOneSelector: c_int = 5;
pub const kTraditionalAltTwoSelector: c_int = 6;
pub const kTraditionalAltThreeSelector: c_int = 7;
pub const kTraditionalAltFourSelector: c_int = 8;
pub const kTraditionalAltFiveSelector: c_int = 9;
pub const kExpertCharactersSelector: c_int = 10;
pub const kJIS2004CharactersSelector: c_int = 11;
pub const kHojoCharactersSelector: c_int = 12;
pub const kNLCCharactersSelector: c_int = 13;
pub const kTraditionalNamesCharactersSelector: c_int = 14;
const enum_unnamed_1250 = c_uint;
pub const kLowerCaseNumbersSelector: c_int = 0;
pub const kUpperCaseNumbersSelector: c_int = 1;
const enum_unnamed_1251 = c_uint;
pub const kProportionalTextSelector: c_int = 0;
pub const kMonospacedTextSelector: c_int = 1;
pub const kHalfWidthTextSelector: c_int = 2;
pub const kThirdWidthTextSelector: c_int = 3;
pub const kQuarterWidthTextSelector: c_int = 4;
pub const kAltProportionalTextSelector: c_int = 5;
pub const kAltHalfWidthTextSelector: c_int = 6;
const enum_unnamed_1252 = c_uint;
pub const kNoTransliterationSelector: c_int = 0;
pub const kHanjaToHangulSelector: c_int = 1;
pub const kHiraganaToKatakanaSelector: c_int = 2;
pub const kKatakanaToHiraganaSelector: c_int = 3;
pub const kKanaToRomanizationSelector: c_int = 4;
pub const kRomanizationToHiraganaSelector: c_int = 5;
pub const kRomanizationToKatakanaSelector: c_int = 6;
pub const kHanjaToHangulAltOneSelector: c_int = 7;
pub const kHanjaToHangulAltTwoSelector: c_int = 8;
pub const kHanjaToHangulAltThreeSelector: c_int = 9;
const enum_unnamed_1253 = c_uint;
pub const kNoAnnotationSelector: c_int = 0;
pub const kBoxAnnotationSelector: c_int = 1;
pub const kRoundedBoxAnnotationSelector: c_int = 2;
pub const kCircleAnnotationSelector: c_int = 3;
pub const kInvertedCircleAnnotationSelector: c_int = 4;
pub const kParenthesisAnnotationSelector: c_int = 5;
pub const kPeriodAnnotationSelector: c_int = 6;
pub const kRomanNumeralAnnotationSelector: c_int = 7;
pub const kDiamondAnnotationSelector: c_int = 8;
pub const kInvertedBoxAnnotationSelector: c_int = 9;
pub const kInvertedRoundedBoxAnnotationSelector: c_int = 10;
const enum_unnamed_1254 = c_uint;
pub const kFullWidthKanaSelector: c_int = 0;
pub const kProportionalKanaSelector: c_int = 1;
const enum_unnamed_1255 = c_uint;
pub const kFullWidthIdeographsSelector: c_int = 0;
pub const kProportionalIdeographsSelector: c_int = 1;
pub const kHalfWidthIdeographsSelector: c_int = 2;
const enum_unnamed_1256 = c_uint;
pub const kCanonicalCompositionOnSelector: c_int = 0;
pub const kCanonicalCompositionOffSelector: c_int = 1;
pub const kCompatibilityCompositionOnSelector: c_int = 2;
pub const kCompatibilityCompositionOffSelector: c_int = 3;
pub const kTranscodingCompositionOnSelector: c_int = 4;
pub const kTranscodingCompositionOffSelector: c_int = 5;
const enum_unnamed_1257 = c_uint;
pub const kNoRubyKanaSelector: c_int = 0;
pub const kRubyKanaSelector: c_int = 1;
pub const kRubyKanaOnSelector: c_int = 2;
pub const kRubyKanaOffSelector: c_int = 3;
const enum_unnamed_1258 = c_uint;
pub const kNoCJKSymbolAlternativesSelector: c_int = 0;
pub const kCJKSymbolAltOneSelector: c_int = 1;
pub const kCJKSymbolAltTwoSelector: c_int = 2;
pub const kCJKSymbolAltThreeSelector: c_int = 3;
pub const kCJKSymbolAltFourSelector: c_int = 4;
pub const kCJKSymbolAltFiveSelector: c_int = 5;
const enum_unnamed_1259 = c_uint;
pub const kNoIdeographicAlternativesSelector: c_int = 0;
pub const kIdeographicAltOneSelector: c_int = 1;
pub const kIdeographicAltTwoSelector: c_int = 2;
pub const kIdeographicAltThreeSelector: c_int = 3;
pub const kIdeographicAltFourSelector: c_int = 4;
pub const kIdeographicAltFiveSelector: c_int = 5;
const enum_unnamed_1260 = c_uint;
pub const kCJKVerticalRomanCenteredSelector: c_int = 0;
pub const kCJKVerticalRomanHBaselineSelector: c_int = 1;
const enum_unnamed_1261 = c_uint;
pub const kNoCJKItalicRomanSelector: c_int = 0;
pub const kCJKItalicRomanSelector: c_int = 1;
pub const kCJKItalicRomanOnSelector: c_int = 2;
pub const kCJKItalicRomanOffSelector: c_int = 3;
const enum_unnamed_1262 = c_uint;
pub const kCaseSensitiveLayoutOnSelector: c_int = 0;
pub const kCaseSensitiveLayoutOffSelector: c_int = 1;
pub const kCaseSensitiveSpacingOnSelector: c_int = 2;
pub const kCaseSensitiveSpacingOffSelector: c_int = 3;
const enum_unnamed_1263 = c_uint;
pub const kAlternateHorizKanaOnSelector: c_int = 0;
pub const kAlternateHorizKanaOffSelector: c_int = 1;
pub const kAlternateVertKanaOnSelector: c_int = 2;
pub const kAlternateVertKanaOffSelector: c_int = 3;
const enum_unnamed_1264 = c_uint;
pub const kNoStylisticAlternatesSelector: c_int = 0;
pub const kStylisticAltOneOnSelector: c_int = 2;
pub const kStylisticAltOneOffSelector: c_int = 3;
pub const kStylisticAltTwoOnSelector: c_int = 4;
pub const kStylisticAltTwoOffSelector: c_int = 5;
pub const kStylisticAltThreeOnSelector: c_int = 6;
pub const kStylisticAltThreeOffSelector: c_int = 7;
pub const kStylisticAltFourOnSelector: c_int = 8;
pub const kStylisticAltFourOffSelector: c_int = 9;
pub const kStylisticAltFiveOnSelector: c_int = 10;
pub const kStylisticAltFiveOffSelector: c_int = 11;
pub const kStylisticAltSixOnSelector: c_int = 12;
pub const kStylisticAltSixOffSelector: c_int = 13;
pub const kStylisticAltSevenOnSelector: c_int = 14;
pub const kStylisticAltSevenOffSelector: c_int = 15;
pub const kStylisticAltEightOnSelector: c_int = 16;
pub const kStylisticAltEightOffSelector: c_int = 17;
pub const kStylisticAltNineOnSelector: c_int = 18;
pub const kStylisticAltNineOffSelector: c_int = 19;
pub const kStylisticAltTenOnSelector: c_int = 20;
pub const kStylisticAltTenOffSelector: c_int = 21;
pub const kStylisticAltElevenOnSelector: c_int = 22;
pub const kStylisticAltElevenOffSelector: c_int = 23;
pub const kStylisticAltTwelveOnSelector: c_int = 24;
pub const kStylisticAltTwelveOffSelector: c_int = 25;
pub const kStylisticAltThirteenOnSelector: c_int = 26;
pub const kStylisticAltThirteenOffSelector: c_int = 27;
pub const kStylisticAltFourteenOnSelector: c_int = 28;
pub const kStylisticAltFourteenOffSelector: c_int = 29;
pub const kStylisticAltFifteenOnSelector: c_int = 30;
pub const kStylisticAltFifteenOffSelector: c_int = 31;
pub const kStylisticAltSixteenOnSelector: c_int = 32;
pub const kStylisticAltSixteenOffSelector: c_int = 33;
pub const kStylisticAltSeventeenOnSelector: c_int = 34;
pub const kStylisticAltSeventeenOffSelector: c_int = 35;
pub const kStylisticAltEighteenOnSelector: c_int = 36;
pub const kStylisticAltEighteenOffSelector: c_int = 37;
pub const kStylisticAltNineteenOnSelector: c_int = 38;
pub const kStylisticAltNineteenOffSelector: c_int = 39;
pub const kStylisticAltTwentyOnSelector: c_int = 40;
pub const kStylisticAltTwentyOffSelector: c_int = 41;
const enum_unnamed_1265 = c_uint;
pub const kContextualAlternatesOnSelector: c_int = 0;
pub const kContextualAlternatesOffSelector: c_int = 1;
pub const kSwashAlternatesOnSelector: c_int = 2;
pub const kSwashAlternatesOffSelector: c_int = 3;
pub const kContextualSwashAlternatesOnSelector: c_int = 4;
pub const kContextualSwashAlternatesOffSelector: c_int = 5;
const enum_unnamed_1266 = c_uint;
pub const kDefaultLowerCaseSelector: c_int = 0;
pub const kLowerCaseSmallCapsSelector: c_int = 1;
pub const kLowerCasePetiteCapsSelector: c_int = 2;
const enum_unnamed_1267 = c_uint;
pub const kDefaultUpperCaseSelector: c_int = 0;
pub const kUpperCaseSmallCapsSelector: c_int = 1;
pub const kUpperCasePetiteCapsSelector: c_int = 2;
const enum_unnamed_1268 = c_uint;
pub const kHalfWidthCJKRomanSelector: c_int = 0;
pub const kProportionalCJKRomanSelector: c_int = 1;
pub const kDefaultCJKRomanSelector: c_int = 2;
pub const kFullWidthCJKRomanSelector: c_int = 3;
const enum_unnamed_1269 = c_uint;
pub const kSFNTLookupSimpleArray: c_int = 0;
pub const kSFNTLookupSegmentSingle: c_int = 2;
pub const kSFNTLookupSegmentArray: c_int = 4;
pub const kSFNTLookupSingleTable: c_int = 6;
pub const kSFNTLookupTrimmedArray: c_int = 8;
pub const kSFNTLookupVector: c_int = 10;
const enum_unnamed_1270 = c_uint;
pub const SFNTLookupTableFormat = UInt16;
pub const SFNTLookupValue = UInt16;
pub const SFNTLookupOffset = UInt16;
pub const SFNTLookupKind = UInt32;
pub const struct_SFNTLookupBinarySearchHeader = extern struct {
    unitSize: UInt16,
    nUnits: UInt16,
    searchRange: UInt16,
    entrySelector: UInt16,
    rangeShift: UInt16,
};
pub const SFNTLookupBinarySearchHeader = struct_SFNTLookupBinarySearchHeader;
pub const struct_SFNTLookupArrayHeader = extern struct {
    lookupValues: [1]SFNTLookupValue,
};
pub const SFNTLookupArrayHeader = struct_SFNTLookupArrayHeader;
pub const struct_SFNTLookupTrimmedArrayHeader = extern struct {
    firstGlyph: UInt16,
    count: UInt16,
    valueArray: [1]SFNTLookupValue,
};
pub const SFNTLookupTrimmedArrayHeader = struct_SFNTLookupTrimmedArrayHeader;
pub const struct_SFNTLookupVectorHeader = extern struct {
    valueSize: UInt16,
    firstGlyph: UInt16,
    count: UInt16,
    values: [1]UInt8,
};
pub const SFNTLookupVectorHeader = struct_SFNTLookupVectorHeader;
pub const struct_SFNTLookupSegment = extern struct {
    lastGlyph: UInt16,
    firstGlyph: UInt16,
    value: [1]UInt16,
};
pub const SFNTLookupSegment = struct_SFNTLookupSegment;
pub const struct_SFNTLookupSegmentHeader = extern struct {
    binSearch: SFNTLookupBinarySearchHeader,
    segments: [1]SFNTLookupSegment,
};
pub const SFNTLookupSegmentHeader = struct_SFNTLookupSegmentHeader;
pub const struct_SFNTLookupSingle = extern struct {
    glyph: UInt16,
    value: [1]UInt16,
};
pub const SFNTLookupSingle = struct_SFNTLookupSingle;
pub const struct_SFNTLookupSingleHeader = extern struct {
    binSearch: SFNTLookupBinarySearchHeader,
    entries: [1]SFNTLookupSingle,
};
pub const SFNTLookupSingleHeader = struct_SFNTLookupSingleHeader;
pub const union_SFNTLookupFormatSpecificHeader = extern union {
    theArray: SFNTLookupArrayHeader,
    segment: SFNTLookupSegmentHeader,
    single: SFNTLookupSingleHeader,
    trimmedArray: SFNTLookupTrimmedArrayHeader,
    vector: SFNTLookupVectorHeader,
};
pub const SFNTLookupFormatSpecificHeader = union_SFNTLookupFormatSpecificHeader;
pub const struct_SFNTLookupTable = extern struct {
    format: SFNTLookupTableFormat,
    fsHeader: SFNTLookupFormatSpecificHeader,
};
pub const SFNTLookupTable = struct_SFNTLookupTable;
pub const SFNTLookupTablePtr = [*c]SFNTLookupTable;
pub const SFNTLookupTableHandle = [*c]SFNTLookupTablePtr;
pub const kSTClassEndOfText: c_int = 0;
pub const kSTClassOutOfBounds: c_int = 1;
pub const kSTClassDeletedGlyph: c_int = 2;
pub const kSTClassEndOfLine: c_int = 3;
pub const kSTSetMark: c_int = 32768;
pub const kSTNoAdvance: c_int = 16384;
pub const kSTMarkEnd: c_int = 8192;
pub const kSTLigActionMask: c_int = 16383;
pub const kSTRearrVerbMask: c_int = 15;
const enum_unnamed_1271 = c_uint;
pub const STClass = UInt8;
pub const STEntryIndex = UInt8;
pub const struct_STHeader = extern struct {
    filler: UInt8,
    nClasses: STClass,
    classTableOffset: UInt16,
    stateArrayOffset: UInt16,
    entryTableOffset: UInt16,
};
pub const STHeader = struct_STHeader;
pub const struct_STClassTable = extern struct {
    firstGlyph: UInt16,
    nGlyphs: UInt16,
    classes: [1]STClass,
};
pub const STClassTable = struct_STClassTable;
pub const struct_STEntryZero = extern struct {
    newState: UInt16,
    flags: UInt16,
};
pub const STEntryZero = struct_STEntryZero;
pub const struct_STEntryOne = extern struct {
    newState: UInt16,
    flags: UInt16,
    offset1: UInt16,
};
pub const STEntryOne = struct_STEntryOne;
pub const struct_STEntryTwo = extern struct {
    newState: UInt16,
    flags: UInt16,
    offset1: UInt16,
    offset2: UInt16,
};
pub const STEntryTwo = struct_STEntryTwo;
pub const kSTXHasLigAction: c_int = 8192;
const enum_unnamed_1272 = c_uint;
pub const STXClass = UInt16;
pub const STXStateIndex = UInt16;
pub const STXEntryIndex = UInt16;
pub const struct_STXHeader = extern struct {
    nClasses: UInt32,
    classTableOffset: UInt32,
    stateArrayOffset: UInt32,
    entryTableOffset: UInt32,
};
pub const STXHeader = struct_STXHeader;
pub const STXClassTable = SFNTLookupTable;
pub const struct_STXEntryZero = extern struct {
    newState: STXStateIndex,
    flags: UInt16,
};
pub const STXEntryZero = struct_STXEntryZero;
pub const struct_STXEntryOne = extern struct {
    newState: STXStateIndex,
    flags: UInt16,
    index1: UInt16,
};
pub const STXEntryOne = struct_STXEntryOne;
pub const struct_STXEntryTwo = extern struct {
    newState: STXStateIndex,
    flags: UInt16,
    index1: UInt16,
    index2: UInt16,
};
pub const STXEntryTwo = struct_STXEntryTwo;
pub const kSTKCrossStreamReset: c_int = 8192;
const enum_unnamed_1273 = c_uint;
pub const kLCARTag: c_int = 1818452338;
pub const kLCARCurrentVersion: c_int = 65536;
pub const kLCARLinearFormat: c_int = 0;
pub const kLCARCtlPointFormat: c_int = 1;
const enum_unnamed_1274 = c_uint;
pub const struct_LcarCaretClassEntry = extern struct {
    count: UInt16,
    partials: [1]UInt16,
};
pub const LcarCaretClassEntry = struct_LcarCaretClassEntry;
pub const struct_LcarCaretTable = extern struct {
    version: Fixed,
    format: UInt16,
    lookup: SFNTLookupTable,
};
pub const LcarCaretTable = struct_LcarCaretTable;
pub const LcarCaretTablePtr = [*c]LcarCaretTable;
pub const kJUSTTag: c_int = 1786082164;
pub const kJUSTCurrentVersion: c_int = 65536;
pub const kJUSTStandardFormat: c_int = 0;
pub const kJUSTnoGlyphcode: c_int = 65535;
pub const kJUSTpcDecompositionAction: c_int = 0;
pub const kJUSTpcUnconditionalAddAction: c_int = 1;
pub const kJUSTpcConditionalAddAction: c_int = 2;
pub const kJUSTpcGlyphStretchAction: c_int = 3;
pub const kJUSTpcDuctilityAction: c_int = 4;
pub const kJUSTpcGlyphRepeatAddAction: c_int = 5;
const enum_unnamed_1275 = c_uint;
pub const kJUSTKashidaPriority: c_int = 0;
pub const kJUSTSpacePriority: c_int = 1;
pub const kJUSTLetterPriority: c_int = 2;
pub const kJUSTNullPriority: c_int = 3;
pub const kJUSTPriorityCount: c_int = 4;
const enum_unnamed_1276 = c_uint;
pub const kJUSTOverridePriority: c_int = 32768;
pub const kJUSTOverrideLimits: c_int = 16384;
pub const kJUSTOverrideUnlimited: c_int = 8192;
pub const kJUSTUnlimited: c_int = 4096;
pub const kJUSTPriorityMask: c_int = 3;
const enum_unnamed_1277 = c_uint;
pub const JustPCActionType = UInt16;
pub const JustificationFlags = UInt16;
pub const struct_JustPCDecompositionAction = extern struct {
    lowerLimit: Fixed,
    upperLimit: Fixed,
    order: UInt16,
    count: UInt16,
    glyphs: [1]UInt16,
};
pub const JustPCDecompositionAction = struct_JustPCDecompositionAction;
pub const JustPCUnconditionalAddAction = UInt16;
pub const struct_JustPCConditionalAddAction = extern struct {
    substThreshold: Fixed,
    addGlyph: UInt16,
    substGlyph: UInt16,
};
pub const JustPCConditionalAddAction = struct_JustPCConditionalAddAction;
pub const struct_JustPCDuctilityAction = extern struct {
    ductilityAxis: UInt32,
    minimumLimit: Fixed,
    noStretchValue: Fixed,
    maximumLimit: Fixed,
};
pub const JustPCDuctilityAction = struct_JustPCDuctilityAction;
pub const struct_JustPCGlyphRepeatAddAction = extern struct {
    flags: UInt16,
    glyph: UInt16,
};
pub const JustPCGlyphRepeatAddAction = struct_JustPCGlyphRepeatAddAction;
pub const struct_JustPCActionSubrecord = extern struct {
    theClass: UInt16,
    theType: JustPCActionType,
    length: UInt32,
    data: UInt32,
};
pub const JustPCActionSubrecord = struct_JustPCActionSubrecord;
pub const struct_JustPCAction = extern struct {
    actionCount: UInt32,
    actions: [1]JustPCActionSubrecord,
};
pub const JustPCAction = struct_JustPCAction;
pub const struct_JustWidthDeltaEntry = extern struct {
    justClass: UInt32,
    beforeGrowLimit: Fixed,
    beforeShrinkLimit: Fixed,
    afterGrowLimit: Fixed,
    afterShrinkLimit: Fixed,
    growFlags: JustificationFlags,
    shrinkFlags: JustificationFlags,
};
pub const JustWidthDeltaEntry = struct_JustWidthDeltaEntry;
pub const struct_JustWidthDeltaGroup = extern struct {
    count: UInt32,
    entries: [1]JustWidthDeltaEntry,
};
pub const JustWidthDeltaGroup = struct_JustWidthDeltaGroup;
pub const struct_JustPostcompTable = extern struct {
    lookupTable: SFNTLookupTable,
};
pub const JustPostcompTable = struct_JustPostcompTable;
pub const struct_JustDirectionTable = extern struct {
    justClass: UInt16,
    widthDeltaClusters: UInt16,
    postcomp: UInt16,
    lookup: SFNTLookupTable,
};
pub const JustDirectionTable = struct_JustDirectionTable;
pub const struct_JustTable = extern struct {
    version: Fixed,
    format: UInt16,
    horizHeaderOffset: UInt16,
    vertHeaderOffset: UInt16,
};
pub const JustTable = struct_JustTable;
pub const kOPBDTag: c_int = 1869636196;
pub const kOPBDCurrentVersion: c_int = 65536;
pub const kOPBDDistanceFormat: c_int = 0;
pub const kOPBDControlPointFormat: c_int = 1;
const enum_unnamed_1278 = c_uint;
pub const OpbdTableFormat = UInt16;
pub const struct_OpbdSideValues = extern struct {
    leftSideShift: SInt16,
    topSideShift: SInt16,
    rightSideShift: SInt16,
    bottomSideShift: SInt16,
};
pub const OpbdSideValues = struct_OpbdSideValues;
pub const struct_OpbdTable = extern struct {
    version: Fixed,
    format: OpbdTableFormat,
    lookupTable: SFNTLookupTable,
};
pub const OpbdTable = struct_OpbdTable;
pub const kMORTTag: c_int = 1836020340;
pub const kMORTCurrentVersion: c_int = 65536;
pub const kMORTCoverVertical: c_int = 32768;
pub const kMORTCoverDescending: c_int = 16384;
pub const kMORTCoverIgnoreVertical: c_int = 8192;
pub const kMORTCoverTypeMask: c_int = 15;
pub const kMORTRearrangementType: c_int = 0;
pub const kMORTContextualType: c_int = 1;
pub const kMORTLigatureType: c_int = 2;
pub const kMORTSwashType: c_int = 4;
pub const kMORTInsertionType: c_int = 5;
pub const kMORTLigLastAction: c_int = -2147483648;
pub const kMORTLigStoreLigature: c_int = 1073741824;
pub const kMORTLigFormOffsetMask: c_int = 1073741823;
pub const kMORTLigFormOffsetShift: c_int = 2;
pub const kMORTraNoAction: c_int = 0;
pub const kMORTraxA: c_int = 1;
pub const kMORTraDx: c_int = 2;
pub const kMORTraDxA: c_int = 3;
pub const kMORTraxAB: c_int = 4;
pub const kMORTraxBA: c_int = 5;
pub const kMORTraCDx: c_int = 6;
pub const kMORTraDCx: c_int = 7;
pub const kMORTraCDxA: c_int = 8;
pub const kMORTraDCxA: c_int = 9;
pub const kMORTraDxAB: c_int = 10;
pub const kMORTraDxBA: c_int = 11;
pub const kMORTraCDxAB: c_int = 12;
pub const kMORTraCDxBA: c_int = 13;
pub const kMORTraDCxAB: c_int = 14;
pub const kMORTraDCxBA: c_int = 15;
pub const kMORTDoInsertionsBefore: c_int = 128;
pub const kMORTIsSplitVowelPiece: c_int = 64;
pub const kMORTInsertionsCountMask: c_int = 63;
pub const kMORTCurrInsertKashidaLike: c_int = 8192;
pub const kMORTMarkInsertKashidaLike: c_int = 4096;
pub const kMORTCurrInsertBefore: c_int = 2048;
pub const kMORTMarkInsertBefore: c_int = 1024;
pub const kMORTMarkJustTableCountMask: c_int = 16256;
pub const kMORTMarkJustTableCountShift: c_int = 7;
pub const kMORTCurrJustTableCountMask: c_int = 127;
pub const kMORTCurrJustTableCountShift: c_int = 0;
pub const kMORTCurrInsertCountMask: c_int = 992;
pub const kMORTCurrInsertCountShift: c_int = 5;
pub const kMORTMarkInsertCountMask: c_int = 31;
pub const kMORTMarkInsertCountShift: c_int = 0;
const enum_unnamed_1279 = c_int;
pub const MortSubtableMaskFlags = UInt32;
pub const MortLigatureActionEntry = UInt32;
pub const struct_MortRearrangementSubtable = extern struct {
    header: STHeader,
};
pub const MortRearrangementSubtable = struct_MortRearrangementSubtable;
pub const struct_MortContextualSubtable = extern struct {
    header: STHeader,
    substitutionTableOffset: UInt16,
};
pub const MortContextualSubtable = struct_MortContextualSubtable;
pub const struct_MortLigatureSubtable = extern struct {
    header: STHeader,
    ligatureActionTableOffset: UInt16,
    componentTableOffset: UInt16,
    ligatureTableOffset: UInt16,
};
pub const MortLigatureSubtable = struct_MortLigatureSubtable;
pub const struct_MortSwashSubtable = extern struct {
    lookup: SFNTLookupTable,
};
pub const MortSwashSubtable = struct_MortSwashSubtable;
pub const struct_MortInsertionSubtable = extern struct {
    header: STHeader,
};
pub const MortInsertionSubtable = struct_MortInsertionSubtable;
pub const union_MortSpecificSubtable = extern union {
    rearrangement: MortRearrangementSubtable,
    contextual: MortContextualSubtable,
    ligature: MortLigatureSubtable,
    swash: MortSwashSubtable,
    insertion: MortInsertionSubtable,
};
pub const MortSpecificSubtable = union_MortSpecificSubtable;
pub const struct_MortSubtable = extern struct {
    length: UInt16,
    coverage: UInt16,
    flags: MortSubtableMaskFlags,
    u: MortSpecificSubtable,
};
pub const MortSubtable = struct_MortSubtable;
pub const struct_MortFeatureEntry = extern struct {
    featureType: UInt16,
    featureSelector: UInt16,
    enableFlags: MortSubtableMaskFlags,
    disableFlags: MortSubtableMaskFlags,
};
pub const MortFeatureEntry = struct_MortFeatureEntry;
pub const struct_MortChain = extern struct {
    defaultFlags: MortSubtableMaskFlags,
    length: UInt32,
    nFeatures: UInt16,
    nSubtables: UInt16,
    featureEntries: [1]MortFeatureEntry,
};
pub const MortChain = struct_MortChain;
pub const struct_MortTable = extern struct {
    version: Fixed,
    nChains: UInt32,
    chains: [1]MortChain,
};
pub const MortTable = struct_MortTable;
pub const kMORXTag: c_int = 1836020344;
pub const kMORXCurrentVersion: c_int = 131072;
pub const kMORXCoverVertical: c_int = -2147483648;
pub const kMORXCoverDescending: c_int = 1073741824;
pub const kMORXCoverIgnoreVertical: c_int = 536870912;
pub const kMORXCoverLogicalOrder: c_int = 268435456;
pub const kMORXCoverTypeMask: c_int = 255;
const enum_unnamed_1280 = c_int;
pub const struct_MorxRearrangementSubtable = extern struct {
    header: STXHeader,
};
pub const MorxRearrangementSubtable = struct_MorxRearrangementSubtable;
pub const struct_MorxContextualSubtable = extern struct {
    header: STXHeader,
    substitutionTableOffset: UInt32,
};
pub const MorxContextualSubtable = struct_MorxContextualSubtable;
pub const struct_MorxLigatureSubtable = extern struct {
    header: STXHeader,
    ligatureActionTableOffset: UInt32,
    componentTableOffset: UInt32,
    ligatureTableOffset: UInt32,
};
pub const MorxLigatureSubtable = struct_MorxLigatureSubtable;
pub const struct_MorxInsertionSubtable = extern struct {
    header: STXHeader,
    insertionGlyphTableOffset: UInt32,
};
pub const MorxInsertionSubtable = struct_MorxInsertionSubtable;
pub const union_MorxSpecificSubtable = extern union {
    rearrangement: MorxRearrangementSubtable,
    contextual: MorxContextualSubtable,
    ligature: MorxLigatureSubtable,
    swash: MortSwashSubtable,
    insertion: MorxInsertionSubtable,
};
pub const MorxSpecificSubtable = union_MorxSpecificSubtable;
pub const struct_MorxSubtable = extern struct {
    length: UInt32,
    coverage: UInt32,
    flags: MortSubtableMaskFlags,
    u: MorxSpecificSubtable,
};
pub const MorxSubtable = struct_MorxSubtable;
pub const struct_MorxChain = extern struct {
    defaultFlags: MortSubtableMaskFlags,
    length: UInt32,
    nFeatures: UInt32,
    nSubtables: UInt32,
    featureEntries: [1]MortFeatureEntry,
};
pub const MorxChain = struct_MorxChain;
pub const struct_MorxTable = extern struct {
    version: Fixed,
    nChains: UInt32,
    chains: [1]MorxChain,
};
pub const MorxTable = struct_MorxTable;
pub const kPROPTag: c_int = 1886547824;
pub const kPROPCurrentVersion: c_int = 196608;
pub const kPROPPairOffsetShift: c_int = 8;
pub const kPROPPairOffsetSign: c_int = 7;
pub const kPROPIsFloaterMask: c_int = 32768;
pub const kPROPCanHangLTMask: c_int = 16384;
pub const kPROPCanHangRBMask: c_int = 8192;
pub const kPROPUseRLPairMask: c_int = 4096;
pub const kPROPPairOffsetMask: c_int = 3840;
pub const kPROPRightConnectMask: c_int = 128;
pub const kPROPZeroReserved: c_int = 96;
pub const kPROPDirectionMask: c_int = 31;
const enum_unnamed_1281 = c_uint;
pub const kPROPLDirectionClass: c_int = 0;
pub const kPROPRDirectionClass: c_int = 1;
pub const kPROPALDirectionClass: c_int = 2;
pub const kPROPENDirectionClass: c_int = 3;
pub const kPROPESDirectionClass: c_int = 4;
pub const kPROPETDirectionClass: c_int = 5;
pub const kPROPANDirectionClass: c_int = 6;
pub const kPROPCSDirectionClass: c_int = 7;
pub const kPROPPSDirectionClass: c_int = 8;
pub const kPROPSDirectionClass: c_int = 9;
pub const kPROPWSDirectionClass: c_int = 10;
pub const kPROPONDirectionClass: c_int = 11;
pub const kPROPSENDirectionClass: c_int = 12;
pub const kPROPLREDirectionClass: c_int = 13;
pub const kPROPLRODirectionClass: c_int = 14;
pub const kPROPRLEDirectionClass: c_int = 15;
pub const kPROPRLODirectionClass: c_int = 16;
pub const kPROPPDFDirectionClass: c_int = 17;
pub const kPROPNSMDirectionClass: c_int = 18;
pub const kPROPBNDirectionClass: c_int = 19;
pub const kPROPNumDirectionClasses: c_int = 20;
const enum_unnamed_1282 = c_uint;
pub const PropCharProperties = UInt16;
pub const struct_PropTable = extern struct {
    version: Fixed,
    format: UInt16,
    defaultProps: PropCharProperties,
    lookup: SFNTLookupTable,
};
pub const PropTable = struct_PropTable;
pub const struct_PropLookupSegment = extern struct {
    lastGlyph: UInt16,
    firstGlyph: UInt16,
    value: UInt16,
};
pub const PropLookupSegment = struct_PropLookupSegment;
pub const struct_PropLookupSingle = extern struct {
    glyph: UInt16,
    props: PropCharProperties,
};
pub const PropLookupSingle = struct_PropLookupSingle;
pub const kTRAKTag: c_int = 1953653099;
pub const kTRAKCurrentVersion: c_int = 65536;
pub const kTRAKUniformFormat: c_int = 0;
const enum_unnamed_1283 = c_uint;
pub const TrakValue = SInt16;
pub const struct_TrakTableEntry = extern struct {
    track: Fixed,
    nameTableIndex: UInt16,
    sizesOffset: UInt16,
};
pub const TrakTableEntry = struct_TrakTableEntry;
pub const struct_TrakTableData = extern struct {
    nTracks: UInt16,
    nSizes: UInt16,
    sizeTableOffset: UInt32,
    trakTable: [1]TrakTableEntry,
};
pub const TrakTableData = struct_TrakTableData;
pub const struct_TrakTable = extern struct {
    version: Fixed,
    format: UInt16,
    horizOffset: UInt16,
    vertOffset: UInt16,
};
pub const TrakTable = struct_TrakTable;
pub const kKERNTag: c_int = 1801810542;
pub const kKERNCurrentVersion: c_int = 65536;
pub const kKERNVertical: c_int = 32768;
pub const kKERNResetCrossStream: c_int = 32768;
pub const kKERNCrossStream: c_int = 16384;
pub const kKERNVariation: c_int = 8192;
pub const kKERNUnusedBits: c_int = 7936;
pub const kKERNFormatMask: c_int = 255;
const enum_unnamed_1284 = c_uint;
pub const kKERNOrderedList: c_int = 0;
pub const kKERNStateTable: c_int = 1;
pub const kKERNSimpleArray: c_int = 2;
pub const kKERNIndexArray: c_int = 3;
const enum_unnamed_1285 = c_uint;
pub const kKERNLineStart: c_int = 1;
pub const kKERNLineEndKerning: c_int = 2;
pub const kKERNNoCrossKerning: c_int = 4;
pub const kKERNNotesRequested: c_int = 8;
pub const kKERNNoStakeNote: c_int = 1;
pub const kKERNCrossStreamResetNote: c_int = 2;
pub const kKERNNotApplied: c_int = 1;
const enum_unnamed_1286 = c_uint;
pub const KernTableFormat = UInt8;
pub const KernSubtableInfo = UInt16;
pub const KernKerningValue = SInt16;
pub const KernArrayOffset = UInt16;
pub const struct_KernVersion0Header = extern struct {
    version: UInt16,
    nTables: UInt16,
    firstSubtable: [1]UInt16,
};
pub const KernVersion0Header = struct_KernVersion0Header;
pub const struct_KernTableHeader = extern struct {
    version: Fixed,
    nTables: SInt32,
    firstSubtable: [1]UInt16,
};
pub const KernTableHeader = struct_KernTableHeader;
pub const KernTableHeaderPtr = [*c]KernTableHeader;
pub const KernTableHeaderHandle = [*c]KernTableHeaderPtr;
pub const struct_KernKerningPair = extern struct {
    left: UInt16,
    right: UInt16,
};
pub const KernKerningPair = struct_KernKerningPair;
pub const struct_KernOrderedListEntry = extern struct {
    pair: KernKerningPair,
    value: KernKerningValue,
};
pub const KernOrderedListEntry = struct_KernOrderedListEntry;
pub const KernOrderedListEntryPtr = [*c]KernOrderedListEntry;
pub const struct_KernOrderedListHeader = extern struct {
    nPairs: UInt16,
    searchRange: UInt16,
    entrySelector: UInt16,
    rangeShift: UInt16,
    table: [1]UInt16,
};
pub const KernOrderedListHeader = struct_KernOrderedListHeader;
pub const struct_KernStateHeader = extern struct {
    header: STHeader,
    valueTable: UInt16,
    firstTable: [1]UInt8,
};
pub const KernStateHeader = struct_KernStateHeader;
pub const struct_KernStateEntry = extern struct {
    newState: UInt16,
    flags: UInt16,
};
pub const KernStateEntry = struct_KernStateEntry;
pub const struct_KernOffsetTable = extern struct {
    firstGlyph: UInt16,
    nGlyphs: UInt16,
    offsetTable: [1]KernArrayOffset,
};
pub const KernOffsetTable = struct_KernOffsetTable;
pub const KernOffsetTablePtr = [*c]KernOffsetTable;
pub const struct_KernSimpleArrayHeader = extern struct {
    rowWidth: UInt16,
    leftOffsetTable: UInt16,
    rightOffsetTable: UInt16,
    theArray: KernArrayOffset,
    firstTable: [1]UInt16,
};
pub const KernSimpleArrayHeader = struct_KernSimpleArrayHeader;
pub const struct_KernIndexArrayHeader = extern struct {
    glyphCount: UInt16,
    kernValueCount: UInt8,
    leftClassCount: UInt8,
    rightClassCount: UInt8,
    flags: UInt8,
    kernValue: [1]SInt16,
    leftClass: [1]UInt8,
    rightClass: [1]UInt8,
    kernIndex: [1]UInt8,
};
pub const KernIndexArrayHeader = struct_KernIndexArrayHeader;
pub const union_KernFormatSpecificHeader = extern union {
    orderedList: KernOrderedListHeader,
    stateTable: KernStateHeader,
    simpleArray: KernSimpleArrayHeader,
    indexArray: KernIndexArrayHeader,
};
pub const KernFormatSpecificHeader = union_KernFormatSpecificHeader;
pub const struct_KernVersion0SubtableHeader = extern struct {
    version: UInt16,
    length: UInt16,
    stInfo: KernSubtableInfo,
    fsHeader: KernFormatSpecificHeader,
};
pub const KernVersion0SubtableHeader = struct_KernVersion0SubtableHeader;
pub const struct_KernSubtableHeader = extern struct {
    length: SInt32,
    stInfo: KernSubtableInfo,
    tupleIndex: SInt16,
    fsHeader: KernFormatSpecificHeader,
};
pub const KernSubtableHeader = struct_KernSubtableHeader;
pub const KernSubtableHeaderPtr = [*c]KernSubtableHeader;
pub const kKERXTag: c_int = 1801810552;
pub const kKERXCurrentVersion: c_int = 131072;
pub const kKERXVertical: c_int = -2147483648;
pub const kKERXResetCrossStream: c_int = 32768;
pub const kKERXCrossStream: c_int = 1073741824;
pub const kKERXVariation: c_int = 536870912;
pub const kKERXDescending: c_int = 268435456;
pub const kKERXUnusedBits: c_int = 268435200;
pub const kKERXFormatMask: c_int = 255;
const enum_unnamed_1287 = c_int;
pub const kKERXOrderedList: c_int = 0;
pub const kKERXStateTable: c_int = 1;
pub const kKERXSimpleArray: c_int = 2;
pub const kKERXControlPoint: c_int = 4;
pub const kKERXIndexArray: c_int = 6;
const enum_unnamed_1288 = c_uint;
pub const kKERXLineStart: c_int = 1;
pub const kKERXLineEndKerning: c_int = 2;
pub const kKERXNoCrossKerning: c_int = 4;
pub const kKERXNotesRequested: c_int = 8;
pub const kKERXNoStakeNote: c_int = 1;
pub const kKERXCrossStreamResetNote: c_int = 2;
pub const kKERXNotApplied: c_int = 1;
const enum_unnamed_1289 = c_uint;
pub const kKERXActionTypeMask: c_uint = 3221225472;
pub const kKERXActionTypeControlPoints: c_int = 0;
pub const kKERXActionTypeAnchorPoints: c_int = 1073741824;
pub const kKERXActionTypeCoordinates: c_uint = 2147483648;
pub const kKERXUnusedFlags: c_int = 1056964608;
pub const kKERXActionOffsetMask: c_int = 16777215;
const enum_unnamed_1290 = c_uint;
pub const kKERXValuesAreLong: c_int = 1;
const enum_unnamed_1291 = c_uint;
pub const KerxSubtableCoverage = UInt32;
pub const KerxArrayOffset = UInt32;
pub const struct_KerxTableHeader = extern struct {
    version: Fixed,
    nTables: UInt32,
    firstSubtable: [1]UInt32,
};
pub const KerxTableHeader = struct_KerxTableHeader;
pub const KerxTableHeaderPtr = [*c]KerxTableHeader;
pub const KerxTableHeaderHandle = [*c]KerxTableHeaderPtr;
pub const struct_KerxKerningPair = extern struct {
    left: UInt16,
    right: UInt16,
};
pub const KerxKerningPair = struct_KerxKerningPair;
pub const struct_KerxOrderedListEntry = extern struct {
    pair: KerxKerningPair,
    value: KernKerningValue,
};
pub const KerxOrderedListEntry = struct_KerxOrderedListEntry;
pub const KerxOrderedListEntryPtr = [*c]KerxOrderedListEntry;
pub const struct_KerxOrderedListHeader = extern struct {
    nPairs: UInt32,
    searchRange: UInt32,
    entrySelector: UInt32,
    rangeShift: UInt32,
    table: [1]UInt32,
};
pub const KerxOrderedListHeader = struct_KerxOrderedListHeader;
pub const struct_KerxStateHeader = extern struct {
    header: STXHeader,
    valueTable: UInt32,
    firstTable: [1]UInt8,
};
pub const KerxStateHeader = struct_KerxStateHeader;
pub const struct_KerxStateEntry = extern struct {
    newState: UInt16,
    flags: UInt16,
    valueIndex: UInt16,
};
pub const KerxStateEntry = struct_KerxStateEntry;
pub const struct_KerxControlPointHeader = extern struct {
    header: STXHeader,
    flags: UInt32,
    firstTable: [1]UInt8,
};
pub const KerxControlPointHeader = struct_KerxControlPointHeader;
pub const struct_KerxControlPointEntry = extern struct {
    newState: UInt16,
    flags: UInt16,
    actionIndex: UInt16,
};
pub const KerxControlPointEntry = struct_KerxControlPointEntry;
pub const struct_KerxControlPointAction = extern struct {
    markControlPoint: UInt16,
    currControlPoint: UInt16,
};
pub const KerxControlPointAction = struct_KerxControlPointAction;
pub const struct_KerxAnchorPointAction = extern struct {
    markAnchorPoint: UInt16,
    currAnchorPoint: UInt16,
};
pub const KerxAnchorPointAction = struct_KerxAnchorPointAction;
pub const struct_KerxCoordinateAction = extern struct {
    markX: UInt16,
    markY: UInt16,
    currX: UInt16,
    currY: UInt16,
};
pub const KerxCoordinateAction = struct_KerxCoordinateAction;
pub const struct_KerxSimpleArrayHeader = extern struct {
    rowWidth: UInt32,
    leftOffsetTable: UInt32,
    rightOffsetTable: UInt32,
    theArray: KerxArrayOffset,
    firstTable: [1]UInt32,
};
pub const KerxSimpleArrayHeader = struct_KerxSimpleArrayHeader;
pub const struct_KerxIndexArrayHeader = extern struct {
    flags: UInt32,
    rowCount: UInt16,
    columnCount: UInt16,
    rowIndexTableOffset: UInt32,
    columnIndexTableOffset: UInt32,
    kerningArrayOffset: UInt32,
    kerningVectorOffset: UInt32,
};
pub const KerxIndexArrayHeader = struct_KerxIndexArrayHeader;
pub const union_KerxFormatSpecificHeader = extern union {
    orderedList: KerxOrderedListHeader,
    stateTable: KerxStateHeader,
    simpleArray: KerxSimpleArrayHeader,
    indexArray: KerxIndexArrayHeader,
    controlPoint: KerxControlPointHeader,
};
pub const KerxFormatSpecificHeader = union_KerxFormatSpecificHeader;
pub const struct_KerxSubtableHeader = extern struct {
    length: UInt32,
    stInfo: KerxSubtableCoverage,
    tupleCount: UInt32,
    fsHeader: KerxFormatSpecificHeader,
};
pub const KerxSubtableHeader = struct_KerxSubtableHeader;
pub const KerxSubtableHeaderPtr = [*c]KerxSubtableHeader;
pub const kBSLNTag: c_int = 1651731566;
pub const kBSLNCurrentVersion: c_int = 65536;
pub const kBSLNDistanceFormatNoMap: c_int = 0;
pub const kBSLNDistanceFormatWithMap: c_int = 1;
pub const kBSLNControlPointFormatNoMap: c_int = 2;
pub const kBSLNControlPointFormatWithMap: c_int = 3;
const enum_unnamed_1292 = c_uint;
pub const kBSLNRomanBaseline: c_int = 0;
pub const kBSLNIdeographicCenterBaseline: c_int = 1;
pub const kBSLNIdeographicLowBaseline: c_int = 2;
pub const kBSLNHangingBaseline: c_int = 3;
pub const kBSLNMathBaseline: c_int = 4;
pub const kBSLNIdeographicHighBaseline: c_int = 5;
pub const kBSLNLastBaseline: c_int = 31;
pub const kBSLNNumBaselineClasses: c_int = 32;
pub const kBSLNNoBaseline: c_int = 255;
pub const kBSLNNoBaselineOverride: c_int = 255;
const enum_unnamed_1293 = c_uint;
pub const BslnBaselineClass = UInt32;
pub const BslnBaselineRecord = [32]Fixed;
pub const struct_BslnFormat0Part = extern struct {
    deltas: [32]SInt16,
};
pub const BslnFormat0Part = struct_BslnFormat0Part;
pub const struct_BslnFormat1Part = extern struct {
    deltas: [32]SInt16,
    mappingData: SFNTLookupTable,
};
pub const BslnFormat1Part = struct_BslnFormat1Part;
pub const struct_BslnFormat2Part = extern struct {
    stdGlyph: UInt16,
    ctlPoints: [32]SInt16,
};
pub const BslnFormat2Part = struct_BslnFormat2Part;
pub const struct_BslnFormat3Part = extern struct {
    stdGlyph: UInt16,
    ctlPoints: [32]SInt16,
    mappingData: SFNTLookupTable,
};
pub const BslnFormat3Part = struct_BslnFormat3Part;
pub const union_BslnFormatUnion = extern union {
    fmt0Part: BslnFormat0Part,
    fmt1Part: BslnFormat1Part,
    fmt2Part: BslnFormat2Part,
    fmt3Part: BslnFormat3Part,
};
pub const BslnFormatUnion = union_BslnFormatUnion;
pub const BslnTableFormat = UInt16;
pub const struct_BslnTable = extern struct {
    version: Fixed,
    format: BslnTableFormat,
    defaultBaseline: UInt16,
    parts: BslnFormatUnion,
};
pub const BslnTable = struct_BslnTable;
pub const BslnTablePtr = [*c]BslnTable;
pub const struct_ALMXHeader = extern struct {
    Version: Fixed,
    Flags: UInt16,
    NMasters: UInt16,
    FirstGlyph: UInt16,
    LastGlyph: UInt16,
    lookup: SFNTLookupTable,
};
pub const ALMXHeader = struct_ALMXHeader;
pub const struct_ALMXGlyphEntry = extern struct {
    GlyphIndexOffset: SInt16,
    HorizontalAdvance: SInt16,
    XOffsetToHOrigin: SInt16,
    VerticalAdvance: SInt16,
    YOffsetToVOrigin: SInt16,
};
pub const ALMXGlyphEntry = struct_ALMXGlyphEntry;
pub const struct_ROTAHeader = extern struct {
    Version: Fixed,
    Flags: UInt16,
    NMasters: UInt16,
    FirstGlyph: UInt16,
    LastGlyph: UInt16,
    lookup: SFNTLookupTable,
};
pub const ROTAHeader = struct_ROTAHeader;
pub const struct_ROTAGlyphEntry = extern struct {
    GlyphIndexOffset: SInt16,
    HBaselineOffset: SInt16,
    VBaselineOffset: SInt16,
};
pub const ROTAGlyphEntry = struct_ROTAGlyphEntry;
pub const kANKRCurrentVersion: c_int = 0;
const enum_unnamed_1294 = c_uint;
pub const struct_AnchorPoint = extern struct {
    x: SInt16,
    y: SInt16,
};
pub const AnchorPoint = struct_AnchorPoint;
pub const struct_AnchorPointTable = extern struct {
    nPoints: UInt32,
    points: [1]AnchorPoint,
};
pub const AnchorPointTable = struct_AnchorPointTable;
pub const struct_AnkrTable = extern struct {
    version: UInt16,
    flags: UInt16,
    lookupTableOffset: UInt32,
    anchorPointTableOffset: UInt32,
};
pub const AnkrTable = struct_AnkrTable;
pub const kLTAGCurrentVersion: c_int = 1;
const enum_unnamed_1295 = c_uint;
pub const struct_LtagStringRange = extern struct {
    offset: UInt16,
    length: UInt16,
};
pub const LtagStringRange = struct_LtagStringRange;
pub const struct_LtagTable = extern struct {
    version: UInt32,
    flags: UInt32,
    numTags: UInt32,
    tagRange: [1]LtagStringRange,
};
pub const LtagTable = struct_LtagTable;
pub const CGFloat = f64;
pub const struct___IOSurface = opaque {};
pub const IOSurfaceRef = ?*struct___IOSurface;
pub const struct_CGPoint = extern struct {
    x: CGFloat,
    y: CGFloat,
};
pub const CGPoint = struct_CGPoint;
pub const struct_CGSize = extern struct {
    width: CGFloat,
    height: CGFloat,
};
pub const CGSize = struct_CGSize;
pub const struct_CGVector = extern struct {
    dx: CGFloat,
    dy: CGFloat,
};
pub const CGVector = struct_CGVector;
pub const struct_CGRect = extern struct {
    origin: CGPoint,
    size: CGSize,
};
pub const CGRect = struct_CGRect;
pub const CGRectEdge = u32;
pub const CGRectMinXEdge: c_int = 0;
pub const CGRectMinYEdge: c_int = 1;
pub const CGRectMaxXEdge: c_int = 2;
pub const CGRectMaxYEdge: c_int = 3;
const enum_unnamed_1296 = c_uint;
pub extern const CGPointZero: CGPoint;
pub extern const CGSizeZero: CGSize;
pub extern const CGRectZero: CGRect;
pub extern const CGRectNull: CGRect;
pub extern const CGRectInfinite: CGRect;
pub fn CGPointMake(arg_x: CGFloat, arg_y: CGFloat) callconv(.C) CGPoint {
    var x = arg_x;
    var y = arg_y;
    var p: CGPoint = undefined;
    p.x = x;
    p.y = y;
    return p;
}
pub fn CGSizeMake(arg_width: CGFloat, arg_height: CGFloat) callconv(.C) CGSize {
    var width = arg_width;
    var height = arg_height;
    var size: CGSize = undefined;
    size.width = width;
    size.height = height;
    return size;
}
pub fn CGVectorMake(arg_dx: CGFloat, arg_dy: CGFloat) callconv(.C) CGVector {
    var dx = arg_dx;
    var dy = arg_dy;
    var vector: CGVector = undefined;
    vector.dx = dx;
    vector.dy = dy;
    return vector;
}
pub fn CGRectMake(arg_x: CGFloat, arg_y: CGFloat, arg_width: CGFloat, arg_height: CGFloat) callconv(.C) CGRect {
    var x = arg_x;
    var y = arg_y;
    var width = arg_width;
    var height = arg_height;
    var rect: CGRect = undefined;
    rect.origin.x = x;
    rect.origin.y = y;
    rect.size.width = width;
    rect.size.height = height;
    return rect;
}
pub extern fn CGRectGetMinX(rect: CGRect) CGFloat;
pub extern fn CGRectGetMidX(rect: CGRect) CGFloat;
pub extern fn CGRectGetMaxX(rect: CGRect) CGFloat;
pub extern fn CGRectGetMinY(rect: CGRect) CGFloat;
pub extern fn CGRectGetMidY(rect: CGRect) CGFloat;
pub extern fn CGRectGetMaxY(rect: CGRect) CGFloat;
pub extern fn CGRectGetWidth(rect: CGRect) CGFloat;
pub extern fn CGRectGetHeight(rect: CGRect) CGFloat;
pub extern fn CGPointEqualToPoint(point1: CGPoint, point2: CGPoint) bool;
pub extern fn CGSizeEqualToSize(size1: CGSize, size2: CGSize) bool;
pub extern fn CGRectEqualToRect(rect1: CGRect, rect2: CGRect) bool;
pub extern fn CGRectStandardize(rect: CGRect) CGRect;
pub extern fn CGRectIsEmpty(rect: CGRect) bool;
pub extern fn CGRectIsNull(rect: CGRect) bool;
pub extern fn CGRectIsInfinite(rect: CGRect) bool;
pub extern fn CGRectInset(rect: CGRect, dx: CGFloat, dy: CGFloat) CGRect;
pub extern fn CGRectIntegral(rect: CGRect) CGRect;
pub extern fn CGRectUnion(r1: CGRect, r2: CGRect) CGRect;
pub extern fn CGRectIntersection(r1: CGRect, r2: CGRect) CGRect;
pub extern fn CGRectOffset(rect: CGRect, dx: CGFloat, dy: CGFloat) CGRect;
pub extern fn CGRectDivide(rect: CGRect, slice: [*c]CGRect, remainder: [*c]CGRect, amount: CGFloat, edge: CGRectEdge) void;
pub extern fn CGRectContainsPoint(rect: CGRect, point: CGPoint) bool;
pub extern fn CGRectContainsRect(rect1: CGRect, rect2: CGRect) bool;
pub extern fn CGRectIntersectsRect(rect1: CGRect, rect2: CGRect) bool;
pub extern fn CGPointCreateDictionaryRepresentation(point: CGPoint) CFDictionaryRef;
pub extern fn CGPointMakeWithDictionaryRepresentation(dict: CFDictionaryRef, point: [*c]CGPoint) bool;
pub extern fn CGSizeCreateDictionaryRepresentation(size: CGSize) CFDictionaryRef;
pub extern fn CGSizeMakeWithDictionaryRepresentation(dict: CFDictionaryRef, size: [*c]CGSize) bool;
pub extern fn CGRectCreateDictionaryRepresentation(CGRect) CFDictionaryRef;
pub extern fn CGRectMakeWithDictionaryRepresentation(dict: CFDictionaryRef, rect: [*c]CGRect) bool;
pub fn __CGPointEqualToPoint(arg_point1: CGPoint, arg_point2: CGPoint) callconv(.C) bool {
    var point1 = arg_point1;
    var point2 = arg_point2;
    return (point1.x == point2.x) and (point1.y == point2.y);
}
pub fn __CGSizeEqualToSize(arg_size1: CGSize, arg_size2: CGSize) callconv(.C) bool {
    var size1 = arg_size1;
    var size2 = arg_size2;
    return (size1.width == size2.width) and (size1.height == size2.height);
}
pub const ATSPoint = CGPoint;
pub const struct_ATSFSSpec = extern struct {
    vRefNum: FSVolumeRefNum,
    parID: SInt32,
    name: StrFileName,
};
pub const ATSFSSpec = struct_ATSFSSpec;
pub const FMGeneration = UInt32;
pub const FMFontFamily = SInt16;
pub const FMFontStyle = SInt16;
pub const FMFontSize = SInt16;
pub const FMFont = UInt32;
pub const struct_FMFontFamilyInstance = extern struct {
    fontFamily: FMFontFamily,
    fontStyle: FMFontStyle,
};
pub const FMFontFamilyInstance = struct_FMFontFamilyInstance;
pub const struct_FMFontFamilyIterator = extern struct {
    reserved: [16]UInt32,
};
pub const FMFontFamilyIterator = struct_FMFontFamilyIterator;
pub const struct_FMFontIterator = extern struct {
    reserved: [16]UInt32,
};
pub const FMFontIterator = struct_FMFontIterator;
pub const struct_FMFontFamilyInstanceIterator = extern struct {
    reserved: [16]UInt32,
};
pub const FMFontFamilyInstanceIterator = struct_FMFontFamilyInstanceIterator;
pub const kInvalidGeneration: c_int = 0;
pub const kInvalidFontFamily: c_int = -1;
pub const kInvalidFont: c_int = 0;
const enum_unnamed_1297 = c_int;
pub const kFMCurrentFilterFormat: c_int = 0;
const enum_unnamed_1298 = c_uint;
pub const FMFilterSelector = UInt32;
pub const kFMFontTechnologyFilterSelector: c_int = 1;
pub const kFMFontContainerFilterSelector: c_int = 2;
pub const kFMGenerationFilterSelector: c_int = 3;
pub const kFMFontFamilyCallbackFilterSelector: c_int = 4;
pub const kFMFontCallbackFilterSelector: c_int = 5;
pub const kFMFontDirectoryFilterSelector: c_int = 6;
pub const kFMFontFileRefFilterSelector: c_int = 10;
const enum_unnamed_1299 = c_uint;
pub const kFMTrueTypeFontTechnology: c_int = 1953658213;
pub const kFMPostScriptFontTechnology: c_int = 1954115633;
const enum_unnamed_1300 = c_uint;
pub const FMFontFamilyCallbackFilterProcPtr = ?*const fn (FMFontFamily, ?*anyopaque) callconv(.C) OSStatus;
pub const FMFontCallbackFilterProcPtr = ?*const fn (FMFont, ?*anyopaque) callconv(.C) OSStatus;
pub const FMFontFamilyCallbackFilterUPP = FMFontFamilyCallbackFilterProcPtr;
pub const FMFontCallbackFilterUPP = FMFontCallbackFilterProcPtr;
pub const struct_FMFontDirectoryFilter = extern struct {
    fontFolderDomain: SInt16,
    reserved: [2]UInt32,
};
pub const FMFontDirectoryFilter = struct_FMFontDirectoryFilter;
const union_unnamed_1301 = extern union {
    fontTechnologyFilter: FourCharCode,
    fontContainerFilter: ATSFSSpec,
    generationFilter: FMGeneration,
    fontFamilyCallbackFilter: FMFontFamilyCallbackFilterUPP,
    fontCallbackFilter: FMFontCallbackFilterUPP,
    fontDirectoryFilter: FMFontDirectoryFilter,
    fontFileRefFilter: [*c]const FSRef,
};
pub const struct_FMFilter = extern struct {
    format: UInt32,
    selector: FMFilterSelector,
    filter: union_unnamed_1301,
};
pub const FMFilter = struct_FMFilter;
pub const ATSOptionFlags = OptionBits;
pub const ATSGeneration = UInt32;
pub const ATSFontContainerRef = UInt32;
pub const ATSFontFamilyRef = UInt32;
pub const ATSFontRef = UInt32;
pub const ATSGlyphRef = UInt16;
pub const ATSFontSize = CGFloat;
pub const ATSFontFormat = UInt32;
pub const kATSFontFormatUnspecified: c_int = 0;
const enum_unnamed_1302 = c_uint;
pub const kATSGenerationUnspecified: c_int = 0;
pub const kATSFontContainerRefUnspecified: c_int = 0;
pub const kATSFontFamilyRefUnspecified: c_int = 0;
pub const kATSFontRefUnspecified: c_int = 0;
const enum_unnamed_1303 = c_uint;
pub const struct_ATSFontMetrics = extern struct {
    version: UInt32,
    ascent: CGFloat,
    descent: CGFloat,
    leading: CGFloat,
    avgAdvanceWidth: CGFloat,
    maxAdvanceWidth: CGFloat,
    minLeftSideBearing: CGFloat,
    minRightSideBearing: CGFloat,
    stemWidth: CGFloat,
    stemHeight: CGFloat,
    capHeight: CGFloat,
    xHeight: CGFloat,
    italicAngle: CGFloat,
    underlinePosition: CGFloat,
    underlineThickness: CGFloat,
};
pub const ATSFontMetrics = struct_ATSFontMetrics;
pub const kATSItalicQDSkew: c_int = 16384;
pub const kATSBoldQDStretch: c_int = 98304;
pub const kATSRadiansFactor: c_int = 1144;
const enum_unnamed_1304 = c_uint;
pub const ATSCurveType = UInt16;
pub const kATSCubicCurveType: c_int = 1;
pub const kATSQuadCurveType: c_int = 2;
pub const kATSOtherCurveType: c_int = 3;
const enum_unnamed_1305 = c_uint;
pub const kATSDeletedGlyphcode: c_int = 65535;
const enum_unnamed_1306 = c_uint;
pub const struct_ATSUCurvePath = extern struct {
    vectors: UInt32,
    controlBits: [1]UInt32,
    vector: [1]ATSPoint,
};
pub const ATSUCurvePath = struct_ATSUCurvePath;
pub const struct_ATSUCurvePaths = extern struct {
    contours: UInt32,
    contour: [1]ATSUCurvePath,
};
pub const ATSUCurvePaths = struct_ATSUCurvePaths;
pub const struct_ATSGlyphIdealMetrics = extern struct {
    advance: ATSPoint,
    sideBearing: ATSPoint,
    otherSideBearing: ATSPoint,
};
pub const ATSGlyphIdealMetrics = struct_ATSGlyphIdealMetrics;
pub const struct_ATSGlyphScreenMetrics = extern struct {
    deviceAdvance: ATSPoint,
    topLeft: ATSPoint,
    height: UInt32,
    width: UInt32,
    sideBearing: ATSPoint,
    otherSideBearing: ATSPoint,
};
pub const ATSGlyphScreenMetrics = struct_ATSGlyphScreenMetrics;
pub const GlyphID = ATSGlyphRef;
pub const kATSUseGlyphAdvance: c_int = 2147483647;
pub const kATSUseLineHeight: c_int = 2147483647;
pub const kATSNoTracking: c_int = -2147483648;
const enum_unnamed_1307 = c_int;
pub const kATSUseCaretOrigins: c_int = 0;
pub const kATSUseDeviceOrigins: c_int = 1;
pub const kATSUseFractionalOrigins: c_int = 2;
pub const kATSUseOriginFlags: c_int = 3;
const enum_unnamed_1308 = c_uint;
pub const ATSULayoutOperationSelector = UInt32;
pub const kATSULayoutOperationNone: c_int = 0;
pub const kATSULayoutOperationJustification: c_int = 1;
pub const kATSULayoutOperationMorph: c_int = 2;
pub const kATSULayoutOperationKerningAdjustment: c_int = 4;
pub const kATSULayoutOperationBaselineAdjustment: c_int = 8;
pub const kATSULayoutOperationTrackingAdjustment: c_int = 16;
pub const kATSULayoutOperationPostLayoutAdjustment: c_int = 32;
pub const kATSULayoutOperationAppleReserved: c_uint = 4294967232;
const enum_unnamed_1309 = c_uint;
pub const ATSULayoutOperationCallbackStatus = UInt32;
pub const kATSULayoutOperationCallbackStatusHandled: c_int = 0;
pub const kATSULayoutOperationCallbackStatusContinue: c_int = 1;
const enum_unnamed_1310 = c_uint;
pub const ATSLineLayoutOptions = UInt32;
pub const kATSLineNoLayoutOptions: c_int = 0;
pub const kATSLineIsDisplayOnly: c_int = 1;
pub const kATSLineHasNoHangers: c_int = 2;
pub const kATSLineHasNoOpticalAlignment: c_int = 4;
pub const kATSLineKeepSpacesOutOfMargin: c_int = 8;
pub const kATSLineNoSpecialJustification: c_int = 16;
pub const kATSLineLastNoJustification: c_int = 32;
pub const kATSLineFractDisable: c_int = 64;
pub const kATSLineImposeNoAngleForEnds: c_int = 128;
pub const kATSLineFillOutToWidth: c_int = 256;
pub const kATSLineTabAdjustEnabled: c_int = 512;
pub const kATSLineIgnoreFontLeading: c_int = 1024;
pub const kATSLineApplyAntiAliasing: c_int = 2048;
pub const kATSLineNoAntiAliasing: c_int = 4096;
pub const kATSLineDisableNegativeJustification: c_int = 8192;
pub const kATSLineDisableAutoAdjustDisplayPos: c_int = 16384;
pub const kATSLineUseQDRendering: c_int = 32768;
pub const kATSLineDisableAllJustification: c_int = 65536;
pub const kATSLineDisableAllGlyphMorphing: c_int = 131072;
pub const kATSLineDisableAllKerningAdjustments: c_int = 262144;
pub const kATSLineDisableAllBaselineAdjustments: c_int = 524288;
pub const kATSLineDisableAllTrackingAdjustments: c_int = 1048576;
pub const kATSLineDisableAllLayoutOperations: c_int = 2031616;
pub const kATSLineUseDeviceMetrics: c_int = 16777216;
pub const kATSLineBreakToNearestCharacter: c_int = 33554432;
pub const kATSLineAppleReserved: c_uint = 4242538496;
const enum_unnamed_1311 = c_uint;
pub const ATSStyleRenderingOptions = UInt32;
pub const kATSStyleNoOptions: c_int = 0;
pub const kATSStyleNoHinting: c_int = 1;
pub const kATSStyleApplyAntiAliasing: c_int = 2;
pub const kATSStyleNoAntiAliasing: c_int = 4;
pub const kATSStyleAppleReserved: c_uint = 4294967288;
pub const kATSStyleApplyHints: c_int = 0;
const enum_unnamed_1312 = c_uint;
pub const ATSGlyphInfoFlags = UInt32;
pub const kATSGlyphInfoAppleReserved: c_int = 536608744;
pub const kATSGlyphInfoIsAttachment: c_uint = 2147483648;
pub const kATSGlyphInfoIsLTHanger: c_int = 1073741824;
pub const kATSGlyphInfoIsRBHanger: c_int = 536870912;
pub const kATSGlyphInfoTerminatorGlyph: c_int = 524288;
pub const kATSGlyphInfoIsWhiteSpace: c_int = 262144;
pub const kATSGlyphInfoHasImposedWidth: c_int = 16;
pub const kATSGlyphInfoByteSizeMask: c_int = 7;
const enum_unnamed_1313 = c_uint;
pub const struct_ATSLayoutRecord = extern struct {
    glyphID: ATSGlyphRef,
    flags: ATSGlyphInfoFlags,
    originalOffset: ByteCount,
    realPos: Fixed,
};
pub const ATSLayoutRecord = struct_ATSLayoutRecord;
pub const struct_ATSTrapezoid = extern struct {
    upperLeft: FixedPoint,
    upperRight: FixedPoint,
    lowerRight: FixedPoint,
    lowerLeft: FixedPoint,
};
pub const ATSTrapezoid = struct_ATSTrapezoid;
pub const struct_ATSJustWidthDeltaEntryOverride = extern struct {
    beforeGrowLimit: Fixed,
    beforeShrinkLimit: Fixed,
    afterGrowLimit: Fixed,
    afterShrinkLimit: Fixed,
    growFlags: JustificationFlags,
    shrinkFlags: JustificationFlags,
};
pub const ATSJustWidthDeltaEntryOverride = struct_ATSJustWidthDeltaEntryOverride;
pub const ATSJustPriorityWidthDeltaOverrides = [4]ATSJustWidthDeltaEntryOverride;
pub const struct_ATSGlyphVector = opaque {};
pub const ATSULineRef = ?*struct_ATSGlyphVector;
pub const ATSUDirectLayoutOperationOverrideProcPtr = ?*const fn (ATSULayoutOperationSelector, ATSULineRef, URefCon, ?*anyopaque, [*c]ATSULayoutOperationCallbackStatus) callconv(.C) OSStatus;
pub const ATSUDirectLayoutOperationOverrideUPP = ATSUDirectLayoutOperationOverrideProcPtr;
pub const struct_ATSULayoutOperationOverrideSpecifier = extern struct {
    operationSelector: ATSULayoutOperationSelector,
    overrideUPP: ATSUDirectLayoutOperationOverrideUPP,
};
pub const ATSULayoutOperationOverrideSpecifier = struct_ATSULayoutOperationOverrideSpecifier;
pub const struct_sfntDirectoryEntry = extern struct {
    tableTag: FourCharCode,
    checkSum: UInt32,
    offset: UInt32,
    length: UInt32,
};
pub const sfntDirectoryEntry = struct_sfntDirectoryEntry;
pub const struct_sfntDirectory = extern struct {
    format: FourCharCode,
    numOffsets: UInt16,
    searchRange: UInt16,
    entrySelector: UInt16,
    rangeShift: UInt16,
    table: [1]sfntDirectoryEntry,
};
pub const sfntDirectory = struct_sfntDirectory;
pub const sizeof_sfntDirectory: c_int = 12;
const enum_unnamed_1314 = c_uint;
pub const cmapFontTableTag: c_int = 1668112752;
const enum_unnamed_1315 = c_uint;
pub const kFontUnicodePlatform: c_int = 0;
pub const kFontMacintoshPlatform: c_int = 1;
pub const kFontReservedPlatform: c_int = 2;
pub const kFontMicrosoftPlatform: c_int = 3;
pub const kFontCustomPlatform: c_int = 4;
const enum_unnamed_1316 = c_uint;
pub const kFontUnicodeDefaultSemantics: c_int = 0;
pub const kFontUnicodeV1_1Semantics: c_int = 1;
pub const kFontISO10646_1993Semantics: c_int = 2;
pub const kFontUnicodeV2_0BMPOnlySemantics: c_int = 3;
pub const kFontUnicodeV2_0FullCoverageSemantics: c_int = 4;
pub const kFontUnicodeV4_0VariationSequenceSemantics: c_int = 5;
pub const kFontUnicode_FullRepertoire: c_int = 6;
const enum_unnamed_1317 = c_uint;
pub const kFontRomanScript: c_int = 0;
pub const kFontJapaneseScript: c_int = 1;
pub const kFontTraditionalChineseScript: c_int = 2;
pub const kFontChineseScript: c_int = 2;
pub const kFontKoreanScript: c_int = 3;
pub const kFontArabicScript: c_int = 4;
pub const kFontHebrewScript: c_int = 5;
pub const kFontGreekScript: c_int = 6;
pub const kFontCyrillicScript: c_int = 7;
pub const kFontRussian: c_int = 7;
pub const kFontRSymbolScript: c_int = 8;
pub const kFontDevanagariScript: c_int = 9;
pub const kFontGurmukhiScript: c_int = 10;
pub const kFontGujaratiScript: c_int = 11;
pub const kFontOriyaScript: c_int = 12;
pub const kFontBengaliScript: c_int = 13;
pub const kFontTamilScript: c_int = 14;
pub const kFontTeluguScript: c_int = 15;
pub const kFontKannadaScript: c_int = 16;
pub const kFontMalayalamScript: c_int = 17;
pub const kFontSinhaleseScript: c_int = 18;
pub const kFontBurmeseScript: c_int = 19;
pub const kFontKhmerScript: c_int = 20;
pub const kFontThaiScript: c_int = 21;
pub const kFontLaotianScript: c_int = 22;
pub const kFontGeorgianScript: c_int = 23;
pub const kFontArmenianScript: c_int = 24;
pub const kFontSimpleChineseScript: c_int = 25;
pub const kFontTibetanScript: c_int = 26;
pub const kFontMongolianScript: c_int = 27;
pub const kFontGeezScript: c_int = 28;
pub const kFontEthiopicScript: c_int = 28;
pub const kFontAmharicScript: c_int = 28;
pub const kFontSlavicScript: c_int = 29;
pub const kFontEastEuropeanRomanScript: c_int = 29;
pub const kFontVietnameseScript: c_int = 30;
pub const kFontExtendedArabicScript: c_int = 31;
pub const kFontSindhiScript: c_int = 31;
pub const kFontUninterpretedScript: c_int = 32;
const enum_unnamed_1318 = c_uint;
pub const kFontMicrosoftSymbolScript: c_int = 0;
pub const kFontMicrosoftStandardScript: c_int = 1;
pub const kFontMicrosoftUCS4Script: c_int = 10;
const enum_unnamed_1319 = c_uint;
pub const kFontCustom8BitScript: c_int = 0;
pub const kFontCustom816BitScript: c_int = 1;
pub const kFontCustom16BitScript: c_int = 2;
const enum_unnamed_1320 = c_uint;
pub const kFontEnglishLanguage: c_int = 0;
pub const kFontFrenchLanguage: c_int = 1;
pub const kFontGermanLanguage: c_int = 2;
pub const kFontItalianLanguage: c_int = 3;
pub const kFontDutchLanguage: c_int = 4;
pub const kFontSwedishLanguage: c_int = 5;
pub const kFontSpanishLanguage: c_int = 6;
pub const kFontDanishLanguage: c_int = 7;
pub const kFontPortugueseLanguage: c_int = 8;
pub const kFontNorwegianLanguage: c_int = 9;
pub const kFontHebrewLanguage: c_int = 10;
pub const kFontJapaneseLanguage: c_int = 11;
pub const kFontArabicLanguage: c_int = 12;
pub const kFontFinnishLanguage: c_int = 13;
pub const kFontGreekLanguage: c_int = 14;
pub const kFontIcelandicLanguage: c_int = 15;
pub const kFontMalteseLanguage: c_int = 16;
pub const kFontTurkishLanguage: c_int = 17;
pub const kFontCroatianLanguage: c_int = 18;
pub const kFontTradChineseLanguage: c_int = 19;
pub const kFontUrduLanguage: c_int = 20;
pub const kFontHindiLanguage: c_int = 21;
pub const kFontThaiLanguage: c_int = 22;
pub const kFontKoreanLanguage: c_int = 23;
pub const kFontLithuanianLanguage: c_int = 24;
pub const kFontPolishLanguage: c_int = 25;
pub const kFontHungarianLanguage: c_int = 26;
pub const kFontEstonianLanguage: c_int = 27;
pub const kFontLettishLanguage: c_int = 28;
pub const kFontLatvianLanguage: c_int = 28;
pub const kFontSaamiskLanguage: c_int = 29;
pub const kFontLappishLanguage: c_int = 29;
pub const kFontFaeroeseLanguage: c_int = 30;
pub const kFontFarsiLanguage: c_int = 31;
pub const kFontPersianLanguage: c_int = 31;
pub const kFontRussianLanguage: c_int = 32;
pub const kFontSimpChineseLanguage: c_int = 33;
pub const kFontFlemishLanguage: c_int = 34;
pub const kFontIrishLanguage: c_int = 35;
pub const kFontAlbanianLanguage: c_int = 36;
pub const kFontRomanianLanguage: c_int = 37;
pub const kFontCzechLanguage: c_int = 38;
pub const kFontSlovakLanguage: c_int = 39;
pub const kFontSlovenianLanguage: c_int = 40;
pub const kFontYiddishLanguage: c_int = 41;
pub const kFontSerbianLanguage: c_int = 42;
pub const kFontMacedonianLanguage: c_int = 43;
pub const kFontBulgarianLanguage: c_int = 44;
pub const kFontUkrainianLanguage: c_int = 45;
pub const kFontByelorussianLanguage: c_int = 46;
pub const kFontUzbekLanguage: c_int = 47;
pub const kFontKazakhLanguage: c_int = 48;
pub const kFontAzerbaijaniLanguage: c_int = 49;
pub const kFontAzerbaijanArLanguage: c_int = 50;
pub const kFontArmenianLanguage: c_int = 51;
pub const kFontGeorgianLanguage: c_int = 52;
pub const kFontMoldavianLanguage: c_int = 53;
pub const kFontKirghizLanguage: c_int = 54;
pub const kFontTajikiLanguage: c_int = 55;
pub const kFontTurkmenLanguage: c_int = 56;
pub const kFontMongolianLanguage: c_int = 57;
pub const kFontMongolianCyrLanguage: c_int = 58;
pub const kFontPashtoLanguage: c_int = 59;
pub const kFontKurdishLanguage: c_int = 60;
pub const kFontKashmiriLanguage: c_int = 61;
pub const kFontSindhiLanguage: c_int = 62;
pub const kFontTibetanLanguage: c_int = 63;
pub const kFontNepaliLanguage: c_int = 64;
pub const kFontSanskritLanguage: c_int = 65;
pub const kFontMarathiLanguage: c_int = 66;
pub const kFontBengaliLanguage: c_int = 67;
pub const kFontAssameseLanguage: c_int = 68;
pub const kFontGujaratiLanguage: c_int = 69;
pub const kFontPunjabiLanguage: c_int = 70;
pub const kFontOriyaLanguage: c_int = 71;
pub const kFontMalayalamLanguage: c_int = 72;
pub const kFontKannadaLanguage: c_int = 73;
pub const kFontTamilLanguage: c_int = 74;
pub const kFontTeluguLanguage: c_int = 75;
pub const kFontSinhaleseLanguage: c_int = 76;
pub const kFontBurmeseLanguage: c_int = 77;
pub const kFontKhmerLanguage: c_int = 78;
pub const kFontLaoLanguage: c_int = 79;
pub const kFontVietnameseLanguage: c_int = 80;
pub const kFontIndonesianLanguage: c_int = 81;
pub const kFontTagalogLanguage: c_int = 82;
pub const kFontMalayRomanLanguage: c_int = 83;
pub const kFontMalayArabicLanguage: c_int = 84;
pub const kFontAmharicLanguage: c_int = 85;
pub const kFontTigrinyaLanguage: c_int = 86;
pub const kFontGallaLanguage: c_int = 87;
pub const kFontOromoLanguage: c_int = 87;
pub const kFontSomaliLanguage: c_int = 88;
pub const kFontSwahiliLanguage: c_int = 89;
pub const kFontRuandaLanguage: c_int = 90;
pub const kFontRundiLanguage: c_int = 91;
pub const kFontChewaLanguage: c_int = 92;
pub const kFontMalagasyLanguage: c_int = 93;
pub const kFontEsperantoLanguage: c_int = 94;
pub const kFontWelshLanguage: c_int = 128;
pub const kFontBasqueLanguage: c_int = 129;
pub const kFontCatalanLanguage: c_int = 130;
pub const kFontLatinLanguage: c_int = 131;
pub const kFontQuechuaLanguage: c_int = 132;
pub const kFontGuaraniLanguage: c_int = 133;
pub const kFontAymaraLanguage: c_int = 134;
pub const kFontTatarLanguage: c_int = 135;
pub const kFontUighurLanguage: c_int = 136;
pub const kFontDzongkhaLanguage: c_int = 137;
pub const kFontJavaneseRomLanguage: c_int = 138;
pub const kFontSundaneseRomLanguage: c_int = 139;
const enum_unnamed_1321 = c_uint;
pub const kFontNoPlatformCode: c_uint = 4294967295;
pub const kFontNoScriptCode: c_uint = 4294967295;
pub const kFontNoLanguageCode: c_uint = 4294967295;
const enum_unnamed_1322 = c_uint;
pub const struct_sfntCMapSubHeader = extern struct {
    format: UInt16,
    length: UInt16,
    languageID: UInt16,
};
pub const sfntCMapSubHeader = struct_sfntCMapSubHeader;
pub const sizeof_sfntCMapSubHeader: c_int = 6;
const enum_unnamed_1323 = c_uint;
pub const struct_sfntCMapExtendedSubHeader = extern struct {
    format: UInt16,
    reserved: UInt16,
    length: UInt32,
    language: UInt32,
};
pub const sfntCMapExtendedSubHeader = struct_sfntCMapExtendedSubHeader;
pub const sizeof_sfntCMapExtendedSubHeader: c_int = 12;
const enum_unnamed_1324 = c_uint;
pub const struct_sfntCMapEncoding = extern struct {
    platformID: UInt16,
    scriptID: UInt16,
    offset: UInt32,
};
pub const sfntCMapEncoding = struct_sfntCMapEncoding;
pub const sizeof_sfntCMapEncoding: c_int = 8;
const enum_unnamed_1325 = c_uint;
pub const struct_sfntCMapHeader = extern struct {
    version: UInt16,
    numTables: UInt16,
    encoding: [1]sfntCMapEncoding,
};
pub const sfntCMapHeader = struct_sfntCMapHeader;
pub const sizeof_sfntCMapHeader: c_int = 4;
const enum_unnamed_1326 = c_uint;
pub const nameFontTableTag: c_int = 1851878757;
const enum_unnamed_1327 = c_uint;
pub const kFontCopyrightName: c_int = 0;
pub const kFontFamilyName: c_int = 1;
pub const kFontStyleName: c_int = 2;
pub const kFontUniqueName: c_int = 3;
pub const kFontFullName: c_int = 4;
pub const kFontVersionName: c_int = 5;
pub const kFontPostscriptName: c_int = 6;
pub const kFontTrademarkName: c_int = 7;
pub const kFontManufacturerName: c_int = 8;
pub const kFontDesignerName: c_int = 9;
pub const kFontDescriptionName: c_int = 10;
pub const kFontVendorURLName: c_int = 11;
pub const kFontDesignerURLName: c_int = 12;
pub const kFontLicenseDescriptionName: c_int = 13;
pub const kFontLicenseInfoURLName: c_int = 14;
pub const kFontPreferredFamilyName: c_int = 16;
pub const kFontPreferredSubfamilyName: c_int = 17;
pub const kFontMacCompatibleFullName: c_int = 18;
pub const kFontSampleTextName: c_int = 19;
pub const kFontPostScriptCIDName: c_int = 20;
pub const kFontLastReservedName: c_int = 255;
const enum_unnamed_1328 = c_uint;
pub const kFontNoNameCode: c_uint = 4294967295;
const enum_unnamed_1329 = c_uint;
pub const struct_sfntNameRecord = extern struct {
    platformID: UInt16,
    scriptID: UInt16,
    languageID: UInt16,
    nameID: UInt16,
    length: UInt16,
    offset: UInt16,
};
pub const sfntNameRecord = struct_sfntNameRecord;
pub const sizeof_sfntNameRecord: c_int = 12;
const enum_unnamed_1330 = c_uint;
pub const struct_sfntNameHeader = extern struct {
    format: UInt16,
    count: UInt16,
    stringOffset: UInt16,
    rec: [1]sfntNameRecord,
};
pub const sfntNameHeader = struct_sfntNameHeader;
pub const sizeof_sfntNameHeader: c_int = 6;
const enum_unnamed_1331 = c_uint;
pub const variationFontTableTag: c_int = 1719034226;
const enum_unnamed_1332 = c_uint;
pub const struct_sfntVariationAxis = extern struct {
    axisTag: FourCharCode,
    minValue: Fixed,
    defaultValue: Fixed,
    maxValue: Fixed,
    flags: SInt16,
    nameID: SInt16,
};
pub const sfntVariationAxis = struct_sfntVariationAxis;
pub const sizeof_sfntVariationAxis: c_int = 20;
const enum_unnamed_1333 = c_uint;
pub const struct_sfntInstance = extern struct {
    nameID: SInt16,
    flags: SInt16,
    coord: [1]Fixed,
};
pub const sfntInstance = struct_sfntInstance;
pub const sizeof_sfntInstance: c_int = 4;
const enum_unnamed_1334 = c_uint;
pub const struct_sfntVariationHeader = extern struct {
    version: Fixed,
    offsetToData: UInt16,
    countSizePairs: UInt16,
    axisCount: UInt16,
    axisSize: UInt16,
    instanceCount: UInt16,
    instanceSize: UInt16,
    axis: [1]sfntVariationAxis,
    instance: [1]sfntInstance,
};
pub const sfntVariationHeader = struct_sfntVariationHeader;
pub const sizeof_sfntVariationHeader: c_int = 16;
const enum_unnamed_1335 = c_uint;
pub const descriptorFontTableTag: c_int = 1717859171;
const enum_unnamed_1336 = c_uint;
pub const struct_sfntFontDescriptor = extern struct {
    name: FourCharCode,
    value: Fixed,
};
pub const sfntFontDescriptor = struct_sfntFontDescriptor;
pub const struct_sfntDescriptorHeader = extern struct {
    version: Fixed,
    descriptorCount: SInt32,
    descriptor: [1]sfntFontDescriptor,
};
pub const sfntDescriptorHeader = struct_sfntDescriptorHeader;
pub const sizeof_sfntDescriptorHeader: c_int = 8;
const enum_unnamed_1337 = c_uint;
pub const featureFontTableTag: c_int = 1717920116;
const enum_unnamed_1338 = c_uint;
pub const struct_sfntFeatureName = extern struct {
    featureType: UInt16,
    settingCount: UInt16,
    offsetToSettings: SInt32,
    featureFlags: UInt16,
    nameID: SInt16,
};
pub const sfntFeatureName = struct_sfntFeatureName;
pub const struct_sfntFontFeatureSetting = extern struct {
    setting: UInt16,
    nameID: SInt16,
};
pub const sfntFontFeatureSetting = struct_sfntFontFeatureSetting;
pub const struct_sfntFontRunFeature = extern struct {
    featureType: UInt16,
    setting: UInt16,
};
pub const sfntFontRunFeature = struct_sfntFontRunFeature;
pub const struct_sfntFeatureHeader = extern struct {
    version: SInt32,
    featureNameCount: UInt16,
    featureSetCount: UInt16,
    reserved: SInt32,
    names: [1]sfntFeatureName,
    settings: [1]sfntFontFeatureSetting,
    runs: [1]sfntFontRunFeature,
};
pub const sfntFeatureHeader = struct_sfntFeatureHeader;
pub const os2FontTableTag: c_int = 1330851634;
const enum_unnamed_1339 = c_uint;
pub const nonGlyphID: c_int = 65535;
const enum_unnamed_1340 = c_uint;
pub const FontNameCode = UInt32;
pub const FontPlatformCode = UInt32;
pub const FontScriptCode = UInt32;
pub const FontLanguageCode = UInt32;
pub const struct_FontVariation = extern struct {
    name: FourCharCode,
    value: Fixed,
};
pub const FontVariation = struct_FontVariation;
pub const kFontNoPlatform: c_uint = 4294967295;
pub const kFontNoScript: c_uint = 4294967295;
pub const kFontNoLanguage: c_uint = 4294967295;
pub const kFontNoName: c_uint = 4294967295;
const enum_unnamed_1341 = c_uint;
pub const kATSOptionFlagsDefault: c_int = 0;
pub const kATSOptionFlagsComposeFontPostScriptName: c_int = 1;
pub const kATSOptionFlagsUseDataForkAsResourceFork: c_int = 256;
pub const kATSOptionFlagsUseResourceFork: c_int = 512;
pub const kATSOptionFlagsUseDataFork: c_int = 768;
const enum_unnamed_1342 = c_uint;
pub const kATSIterationCompleted: c_int = -980;
pub const kATSInvalidFontFamilyAccess: c_int = -981;
pub const kATSInvalidFontAccess: c_int = -982;
pub const kATSIterationScopeModified: c_int = -983;
pub const kATSInvalidFontTableAccess: c_int = -984;
pub const kATSInvalidFontContainerAccess: c_int = -985;
pub const kATSInvalidGlyphAccess: c_int = -986;
const enum_unnamed_1343 = c_int;
pub const ATSFontContext = UInt32;
pub const kATSFontContextUnspecified: c_int = 0;
pub const kATSFontContextGlobal: c_int = 1;
pub const kATSFontContextLocal: c_int = 2;
const enum_unnamed_1344 = c_uint;
pub const kATSOptionFlagsActivateDisabled: c_int = 32;
pub const kATSOptionFlagsProcessSubdirectories: c_int = 64;
pub const kATSOptionFlagsDoNotNotify: c_int = 128;
pub const kATSOptionFlagsRecordPersistently: c_int = 262144;
const enum_unnamed_1345 = c_uint;
pub const kATSOptionFlagsIterateByPrecedenceMask: c_int = 32;
pub const kATSOptionFlagsIncludeDisabledMask: c_int = 128;
pub const kATSOptionFlagsIterationScopeMask: c_int = 28672;
pub const kATSOptionFlagsDefaultScope: c_int = 0;
pub const kATSOptionFlagsUnRestrictedScope: c_int = 4096;
pub const kATSOptionFlagsRestrictedScope: c_int = 8192;
const enum_unnamed_1346 = c_uint;
pub const ATSFontFamilyApplierFunction = ?*const fn (ATSFontFamilyRef, ?*anyopaque) callconv(.C) OSStatus;
pub const ATSFontApplierFunction = ?*const fn (ATSFontRef, ?*anyopaque) callconv(.C) OSStatus;
pub const struct_ATSFontFamilyIterator_ = opaque {};
pub const ATSFontFamilyIterator = ?*struct_ATSFontFamilyIterator_;
pub const struct_ATSFontIterator_ = opaque {};
pub const ATSFontIterator = ?*struct_ATSFontIterator_;
pub const kATSFontFilterCurrentVersion: c_int = 0;
const enum_unnamed_1347 = c_uint;
pub const kATSFontFilterSelectorUnspecified: c_int = 0;
pub const kATSFontFilterSelectorGeneration: c_int = 3;
pub const kATSFontFilterSelectorFontFamily: c_int = 7;
pub const kATSFontFilterSelectorFontFamilyApplierFunction: c_int = 8;
pub const kATSFontFilterSelectorFontApplierFunction: c_int = 9;
pub const kATSFileReferenceFilterSelector: c_int = 10;
pub const enum_ATSFontFilterSelector = c_uint;
pub const ATSFontFilterSelector = enum_ATSFontFilterSelector;
const union_unnamed_1348 = extern union {
    generationFilter: ATSGeneration,
    fontFamilyFilter: ATSFontFamilyRef,
    fontFamilyApplierFunctionFilter: ATSFontFamilyApplierFunction,
    fontApplierFunctionFilter: ATSFontApplierFunction,
    fontFileRefFilter: [*c]const FSRef,
};
pub const struct_ATSFontFilter = extern struct {
    version: UInt32,
    filterSelector: ATSFontFilterSelector,
    filter: union_unnamed_1348,
};
pub const ATSFontFilter = struct_ATSFontFilter;
pub const struct_ATSFontNotificationRef_ = opaque {};
pub const ATSFontNotificationRef = ?*struct_ATSFontNotificationRef_;
pub const struct_ATSFontNotificationInfoRef_ = opaque {};
pub const ATSFontNotificationInfoRef = ?*struct_ATSFontNotificationInfoRef_;
pub const kATSFontNotifyOptionDefault: c_int = 0;
pub const kATSFontNotifyOptionReceiveWhileSuspended: c_int = 1;
pub const enum_ATSFontNotifyOption = c_uint;
pub const ATSFontNotifyOption = enum_ATSFontNotifyOption;
pub const kATSFontNotifyActionFontsChanged: c_int = 1;
pub const kATSFontNotifyActionDirectoriesChanged: c_int = 2;
pub const enum_ATSFontNotifyAction = c_uint;
pub const ATSFontNotifyAction = enum_ATSFontNotifyAction;
pub const ATSNotificationCallback = ?*const fn (ATSFontNotificationInfoRef, ?*anyopaque) callconv(.C) void;
pub extern fn ATSGetGeneration() ATSGeneration;
pub extern fn ATSFontActivateFromFileReference(iFile: [*c]const FSRef, iContext: ATSFontContext, iFormat: ATSFontFormat, iRefCon: ?*anyopaque, iOptions: ATSOptionFlags, oContainer: [*c]ATSFontContainerRef) OSStatus;
pub extern fn ATSFontActivateFromMemory(iData: LogicalAddress, iLength: ByteCount, iContext: ATSFontContext, iFormat: ATSFontFormat, iReserved: ?*anyopaque, iOptions: ATSOptionFlags, oContainer: [*c]ATSFontContainerRef) OSStatus;
pub extern fn ATSFontDeactivate(iContainer: ATSFontContainerRef, iRefCon: ?*anyopaque, iOptions: ATSOptionFlags) OSStatus;
pub extern fn ATSFontGetContainerFromFileReference(iFile: [*c]const FSRef, iContext: ATSFontContext, iOptions: ATSOptionFlags, oContainer: [*c]ATSFontContainerRef) OSStatus;
pub extern fn ATSFontGetContainer(iFont: ATSFontRef, iOptions: ATSOptionFlags, oContainer: [*c]ATSFontContainerRef) OSStatus;
pub extern fn ATSFontSetEnabled(iFont: ATSFontRef, iOptions: ATSOptionFlags, iEnabled: Boolean) OSStatus;
pub extern fn ATSFontIsEnabled(iFont: ATSFontRef) Boolean;
pub extern fn ATSFontFamilyApplyFunction(iFunction: ATSFontFamilyApplierFunction, iRefCon: ?*anyopaque) OSStatus;
pub extern fn ATSFontFamilyIteratorCreate(iContext: ATSFontContext, iFilter: [*c]const ATSFontFilter, iRefCon: ?*anyopaque, iOptions: ATSOptionFlags, ioIterator: [*c]ATSFontFamilyIterator) OSStatus;
pub extern fn ATSFontFamilyIteratorRelease(ioIterator: [*c]ATSFontFamilyIterator) OSStatus;
pub extern fn ATSFontFamilyIteratorReset(iContext: ATSFontContext, iFilter: [*c]const ATSFontFilter, iRefCon: ?*anyopaque, iOptions: ATSOptionFlags, ioIterator: [*c]ATSFontFamilyIterator) OSStatus;
pub extern fn ATSFontFamilyIteratorNext(iIterator: ATSFontFamilyIterator, oFamily: [*c]ATSFontFamilyRef) OSStatus;
pub extern fn ATSFontFamilyFindFromName(iName: CFStringRef, iOptions: ATSOptionFlags) ATSFontFamilyRef;
pub extern fn ATSFontFamilyGetGeneration(iFamily: ATSFontFamilyRef) ATSGeneration;
pub extern fn ATSFontFamilyGetName(iFamily: ATSFontFamilyRef, iOptions: ATSOptionFlags, oName: [*c]CFStringRef) OSStatus;
pub extern fn ATSFontFamilyGetEncoding(iFamily: ATSFontFamilyRef) TextEncoding;
pub extern fn ATSFontApplyFunction(iFunction: ATSFontApplierFunction, iRefCon: ?*anyopaque) OSStatus;
pub extern fn ATSFontIteratorCreate(iContext: ATSFontContext, iFilter: [*c]const ATSFontFilter, iRefCon: ?*anyopaque, iOptions: ATSOptionFlags, ioIterator: [*c]ATSFontIterator) OSStatus;
pub extern fn ATSFontIteratorRelease(ioIterator: [*c]ATSFontIterator) OSStatus;
pub extern fn ATSFontIteratorReset(iContext: ATSFontContext, iFilter: [*c]const ATSFontFilter, iRefCon: ?*anyopaque, iOptions: ATSOptionFlags, ioIterator: [*c]ATSFontIterator) OSStatus;
pub extern fn ATSFontIteratorNext(iIterator: ATSFontIterator, oFont: [*c]ATSFontRef) OSStatus;
pub extern fn ATSFontFindFromName(iName: CFStringRef, iOptions: ATSOptionFlags) ATSFontRef;
pub extern fn ATSFontFindFromPostScriptName(iName: CFStringRef, iOptions: ATSOptionFlags) ATSFontRef;
pub extern fn ATSFontFindFromContainer(iContainer: ATSFontContainerRef, iOptions: ATSOptionFlags, iCount: ItemCount, ioArray: [*c]ATSFontRef, oCount: [*c]ItemCount) OSStatus;
pub extern fn ATSFontGetGeneration(iFont: ATSFontRef) ATSGeneration;
pub extern fn ATSFontGetName(iFont: ATSFontRef, iOptions: ATSOptionFlags, oName: [*c]CFStringRef) OSStatus;
pub extern fn ATSFontGetPostScriptName(iFont: ATSFontRef, iOptions: ATSOptionFlags, oName: [*c]CFStringRef) OSStatus;
pub extern fn ATSFontGetTableDirectory(iFont: ATSFontRef, iBufferSize: ByteCount, ioBuffer: ?*anyopaque, oSize: [*c]ByteCount) OSStatus;
pub extern fn ATSFontGetTable(iFont: ATSFontRef, iTag: FourCharCode, iOffset: ByteOffset, iBufferSize: ByteCount, ioBuffer: ?*anyopaque, oSize: [*c]ByteCount) OSStatus;
pub extern fn ATSFontGetHorizontalMetrics(iFont: ATSFontRef, iOptions: ATSOptionFlags, oMetrics: [*c]ATSFontMetrics) OSStatus;
pub extern fn ATSFontGetVerticalMetrics(iFont: ATSFontRef, iOptions: ATSOptionFlags, oMetrics: [*c]ATSFontMetrics) OSStatus;
pub extern fn ATSFontFamilyFindFromQuickDrawName(iName: ConstStr255Param) ATSFontFamilyRef;
pub extern fn ATSFontFamilyGetQuickDrawName(iFamily: ATSFontFamilyRef, oName: [*c]u8) OSStatus;
pub extern fn ATSFontGetFileReference(iFont: ATSFontRef, oFile: [*c]FSRef) OSStatus;
pub extern fn ATSFontGetFontFamilyResource(iFont: ATSFontRef, iBufferSize: ByteCount, ioBuffer: ?*anyopaque, oSize: [*c]ByteCount) OSStatus;
pub extern fn ATSFontNotify(action: ATSFontNotifyAction, info: ?*anyopaque) OSStatus;
pub extern fn ATSFontNotificationSubscribe(callback: ATSNotificationCallback, options: ATSFontNotifyOption, iRefcon: ?*anyopaque, oNotificationRef: [*c]ATSFontNotificationRef) OSStatus;
pub extern fn ATSFontNotificationUnsubscribe(notificationRef: ATSFontNotificationRef) OSStatus;
pub const struct_ATSFontQuerySourceContext = extern struct {
    version: UInt32,
    refCon: ?*anyopaque,
    retain: CFAllocatorRetainCallBack,
    release: CFAllocatorReleaseCallBack,
};
pub const ATSFontQuerySourceContext = struct_ATSFontQuerySourceContext;
pub const kATSQueryActivateFontMessage: c_int = 1635021665;
pub const enum_ATSFontQueryMessageID = c_uint;
pub const ATSFontQueryMessageID = enum_ATSFontQueryMessageID;
pub const ATSFontQueryCallback = ?*const fn (ATSFontQueryMessageID, CFPropertyListRef, ?*anyopaque) callconv(.C) CFPropertyListRef;
pub extern fn ATSCreateFontQueryRunLoopSource(queryOrder: CFIndex, sourceOrder: CFIndex, callout: ATSFontQueryCallback, context: [*c]const ATSFontQuerySourceContext) CFRunLoopSourceRef;
pub const kATSFontAutoActivationDefault: c_int = 0;
pub const kATSFontAutoActivationDisabled: c_int = 1;
pub const kATSFontAutoActivationEnabled: c_int = 2;
pub const kATSFontAutoActivationAsk: c_int = 4;
const enum_unnamed_1349 = c_uint;
pub const ATSFontAutoActivationSetting = UInt32;
pub extern fn ATSFontSetGlobalAutoActivationSetting(iSetting: ATSFontAutoActivationSetting) OSStatus;
pub extern fn ATSFontGetGlobalAutoActivationSetting() ATSFontAutoActivationSetting;
pub extern fn ATSFontSetAutoActivationSettingForApplication(iSetting: ATSFontAutoActivationSetting, iApplicationFileURL: CFURLRef) OSStatus;
pub extern fn ATSFontGetAutoActivationSettingForApplication(iApplicationFileURL: CFURLRef) ATSFontAutoActivationSetting;
pub const struct_ColorSyncProfile = opaque {};
pub const ColorSyncProfileRef = ?*const struct_ColorSyncProfile;
pub const ColorSyncMutableProfileRef = ?*struct_ColorSyncProfile;
pub extern var kColorSyncGenericGrayProfile: CFStringRef;
pub extern var kColorSyncGenericGrayGamma22Profile: CFStringRef;
pub extern var kColorSyncGenericRGBProfile: CFStringRef;
pub extern var kColorSyncGenericCMYKProfile: CFStringRef;
pub extern var kColorSyncDisplayP3Profile: CFStringRef;
pub extern var kColorSyncSRGBProfile: CFStringRef;
pub extern var kColorSyncAdobeRGB1998Profile: CFStringRef;
pub extern var kColorSyncGenericLabProfile: CFStringRef;
pub extern var kColorSyncGenericXYZProfile: CFStringRef;
pub extern var kColorSyncACESCGLinearProfile: CFStringRef;
pub extern var kColorSyncDCIP3Profile: CFStringRef;
pub extern var kColorSyncITUR709Profile: CFStringRef;
pub extern var kColorSyncITUR2020Profile: CFStringRef;
pub extern var kColorSyncROMMRGBProfile: CFStringRef;
pub extern var kColorSyncProfileHeader: CFStringRef;
pub extern var kColorSyncProfileClass: CFStringRef;
pub extern var kColorSyncProfileColorSpace: CFStringRef;
pub extern var kColorSyncProfilePCS: CFStringRef;
pub extern var kColorSyncProfileURL: CFStringRef;
pub extern var kColorSyncProfileDescription: CFStringRef;
pub extern var kColorSyncProfileMD5Digest: CFStringRef;
pub extern var kColorSyncSigAToB0Tag: CFStringRef;
pub extern var kColorSyncSigAToB1Tag: CFStringRef;
pub extern var kColorSyncSigAToB2Tag: CFStringRef;
pub extern var kColorSyncSigBToA0Tag: CFStringRef;
pub extern var kColorSyncSigBToA1Tag: CFStringRef;
pub extern var kColorSyncSigBToA2Tag: CFStringRef;
pub extern var kColorSyncSigCmykData: CFStringRef;
pub extern var kColorSyncSigGrayData: CFStringRef;
pub extern var kColorSyncSigLabData: CFStringRef;
pub extern var kColorSyncSigRgbData: CFStringRef;
pub extern var kColorSyncSigXYZData: CFStringRef;
pub extern var kColorSyncSigAbstractClass: CFStringRef;
pub extern var kColorSyncSigBlueTRCTag: CFStringRef;
pub extern var kColorSyncSigBlueColorantTag: CFStringRef;
pub extern var kColorSyncSigMediaBlackPointTag: CFStringRef;
pub extern var kColorSyncSigCopyrightTag: CFStringRef;
pub extern var kColorSyncSigProfileDescriptionTag: CFStringRef;
pub extern var kColorSyncSigDeviceModelDescTag: CFStringRef;
pub extern var kColorSyncSigDeviceMfgDescTag: CFStringRef;
pub extern var kColorSyncSigGreenTRCTag: CFStringRef;
pub extern var kColorSyncSigGreenColorantTag: CFStringRef;
pub extern var kColorSyncSigGamutTag: CFStringRef;
pub extern var kColorSyncSigGrayTRCTag: CFStringRef;
pub extern var kColorSyncSigLinkClass: CFStringRef;
pub extern var kColorSyncSigDisplayClass: CFStringRef;
pub extern var kColorSyncSigNamedColor2Tag: CFStringRef;
pub extern var kColorSyncSigNamedColorClass: CFStringRef;
pub extern var kColorSyncSigPreview0Tag: CFStringRef;
pub extern var kColorSyncSigPreview1Tag: CFStringRef;
pub extern var kColorSyncSigPreview2Tag: CFStringRef;
pub extern var kColorSyncSigOutputClass: CFStringRef;
pub extern var kColorSyncSigProfileSequenceDescTag: CFStringRef;
pub extern var kColorSyncSigRedTRCTag: CFStringRef;
pub extern var kColorSyncSigRedColorantTag: CFStringRef;
pub extern var kColorSyncSigInputClass: CFStringRef;
pub extern var kColorSyncSigColorSpaceClass: CFStringRef;
pub extern var kColorSyncSigTechnologyTag: CFStringRef;
pub extern var kColorSyncSigViewingConditionsTag: CFStringRef;
pub extern var kColorSyncSigViewingCondDescTag: CFStringRef;
pub extern var kColorSyncSigMediaWhitePointTag: CFStringRef;
pub extern var kColorSyncProfileComputerDomain: CFStringRef;
pub extern var kColorSyncProfileUserDomain: CFStringRef;
pub extern fn ColorSyncProfileGetTypeID() CFTypeID;
pub extern fn ColorSyncProfileCreate(data: CFDataRef, @"error": [*c]CFErrorRef) ColorSyncProfileRef;
pub extern fn ColorSyncProfileCreateWithURL(url: CFURLRef, @"error": [*c]CFErrorRef) ColorSyncProfileRef;
pub extern fn ColorSyncProfileCreateWithName(name: CFStringRef) ColorSyncProfileRef;
pub extern fn ColorSyncProfileCreateWithDisplayID(displayID: u32) ColorSyncProfileRef;
pub extern fn ColorSyncProfileCreateDeviceProfile(deviceClass: CFStringRef, deviceID: CFUUIDRef, profileID: CFTypeRef) ColorSyncProfileRef;
pub extern fn ColorSyncProfileCreateMutable() ColorSyncMutableProfileRef;
pub extern fn ColorSyncProfileCreateMutableCopy(prof: ColorSyncProfileRef) ColorSyncMutableProfileRef;
pub extern fn ColorSyncProfileCreateLink(profileInfo: CFArrayRef, options: CFDictionaryRef) ColorSyncProfileRef;
pub extern fn ColorSyncProfileVerify(prof: ColorSyncProfileRef, errors: [*c]CFErrorRef, warnings: [*c]CFErrorRef) bool;
pub extern fn ColorSyncProfileIsWideGamut(ColorSyncProfileRef) bool;
pub extern fn ColorSyncProfileIsMatrixBased(ColorSyncProfileRef) bool;
pub extern fn ColorSyncProfileIsPQBased(ColorSyncProfileRef) bool;
pub extern fn ColorSyncProfileIsHLGBased(ColorSyncProfileRef) bool;
pub extern fn ColorSyncProfileEstimateGammaWithDisplayID(displayID: i32, @"error": [*c]CFErrorRef) f32;
pub extern fn ColorSyncProfileEstimateGamma(prof: ColorSyncProfileRef, @"error": [*c]CFErrorRef) f32;
pub extern fn ColorSyncProfileGetDisplayTransferFormulaFromVCGT(profile: ColorSyncProfileRef, redMin: [*c]f32, redMax: [*c]f32, redGamma: [*c]f32, greenMin: [*c]f32, greenMax: [*c]f32, greenGamma: [*c]f32, blueMin: [*c]f32, blueMax: [*c]f32, blueGamma: [*c]f32) bool;
pub extern fn ColorSyncProfileCreateDisplayTransferTablesFromVCGT(profile: ColorSyncProfileRef, nSamplesPerChannel: [*c]usize) CFDataRef;
pub const ColorSyncMD5 = extern struct {
    digest: [16]u8,
};
pub extern fn ColorSyncProfileGetMD5(prof: ColorSyncProfileRef) ColorSyncMD5;
pub extern fn ColorSyncProfileCopyData(prof: ColorSyncProfileRef, @"error": [*c]CFErrorRef) CFDataRef;
pub extern fn ColorSyncProfileGetURL(prof: ColorSyncProfileRef, @"error": [*c]CFErrorRef) CFURLRef;
pub extern fn ColorSyncProfileCopyHeader(prof: ColorSyncProfileRef) CFDataRef;
pub extern fn ColorSyncProfileSetHeader(prof: ColorSyncMutableProfileRef, header: CFDataRef) void;
pub extern fn ColorSyncProfileCopyDescriptionString(prof: ColorSyncProfileRef) CFStringRef;
pub extern fn ColorSyncProfileCopyTagSignatures(prof: ColorSyncProfileRef) CFArrayRef;
pub extern fn ColorSyncProfileContainsTag(prof: ColorSyncProfileRef, signature: CFStringRef) bool;
pub extern fn ColorSyncProfileCopyTag(prof: ColorSyncProfileRef, signature: CFStringRef) CFDataRef;
pub extern fn ColorSyncProfileSetTag(prof: ColorSyncMutableProfileRef, signature: CFStringRef, data: CFDataRef) void;
pub extern fn ColorSyncProfileRemoveTag(prof: ColorSyncMutableProfileRef, signature: CFStringRef) void;
pub const ColorSyncProfileIterateCallback = ?*const fn (CFDictionaryRef, ?*anyopaque) callconv(.C) bool;
pub extern var kColorSyncProfileCacheSeed: CFStringRef;
pub extern fn ColorSyncIterateInstalledProfiles(callBack: ColorSyncProfileIterateCallback, seed: [*c]u32, userInfo: ?*anyopaque, @"error": [*c]CFErrorRef) void;
pub extern var kColorSyncWaitForCacheReply: CFStringRef;
pub extern fn ColorSyncIterateInstalledProfilesWithOptions(callBack: ColorSyncProfileIterateCallback, seed: [*c]u32, userInfo: ?*anyopaque, options: CFDictionaryRef, @"error": [*c]CFErrorRef) void;
pub extern fn ColorSyncProfileInstall(profile: ColorSyncProfileRef, domain: CFStringRef, subpath: CFStringRef, @"error": [*c]CFErrorRef) bool;
pub extern fn ColorSyncProfileUninstall(profile: ColorSyncProfileRef, @"error": [*c]CFErrorRef) bool;
pub const struct_ColorSyncTransform = opaque {};
pub const ColorSyncTransformRef = ?*struct_ColorSyncTransform;
pub extern fn ColorSyncTransformGetTypeID() CFTypeID;
pub extern fn ColorSyncTransformCreate(profileSequence: CFArrayRef, options: CFDictionaryRef) ColorSyncTransformRef;
pub extern fn ColorSyncTransformCopyProperty(transform: ColorSyncTransformRef, key: CFTypeRef, options: CFDictionaryRef) CFTypeRef;
pub extern fn ColorSyncTransformSetProperty(transform: ColorSyncTransformRef, key: CFTypeRef, property: CFTypeRef) void;
pub extern fn ColorSyncTransformGetProfileSequence(transform: ColorSyncTransformRef) CFArrayRef;
pub const kColorSync1BitGamut: c_int = 1;
pub const kColorSync8BitInteger: c_int = 2;
pub const kColorSync16BitInteger: c_int = 3;
pub const kColorSync16BitFloat: c_int = 4;
pub const kColorSync32BitInteger: c_int = 5;
pub const kColorSync32BitNamedColorIndex: c_int = 6;
pub const kColorSync32BitFloat: c_int = 7;
pub const kColorSync10BitInteger: c_int = 8;
pub const enum_ColorSyncDataDepth = c_uint;
pub const ColorSyncDataDepth = enum_ColorSyncDataDepth;
pub const kColorSyncAlphaNone: c_int = 0;
pub const kColorSyncAlphaPremultipliedLast: c_int = 1;
pub const kColorSyncAlphaPremultipliedFirst: c_int = 2;
pub const kColorSyncAlphaLast: c_int = 3;
pub const kColorSyncAlphaFirst: c_int = 4;
pub const kColorSyncAlphaNoneSkipLast: c_int = 5;
pub const kColorSyncAlphaNoneSkipFirst: c_int = 6;
pub const enum_ColorSyncAlphaInfo = c_uint;
pub const ColorSyncAlphaInfo = enum_ColorSyncAlphaInfo;
pub const kColorSyncAlphaInfoMask: c_int = 31;
pub const kColorSyncByteOrderMask: c_int = 28672;
pub const kColorSyncByteOrderDefault: c_int = 0;
pub const kColorSyncByteOrder16Little: c_int = 4096;
pub const kColorSyncByteOrder32Little: c_int = 8192;
pub const kColorSyncByteOrder16Big: c_int = 12288;
pub const kColorSyncByteOrder32Big: c_int = 16384;
const enum_unnamed_1350 = c_uint;
pub const ColorSyncDataLayout = u32;
pub extern fn ColorSyncTransformConvert(transform: ColorSyncTransformRef, width: usize, height: usize, dst: ?*anyopaque, dstDepth: ColorSyncDataDepth, dstLayout: ColorSyncDataLayout, dstBytesPerRow: usize, src: ?*const anyopaque, srcDepth: ColorSyncDataDepth, srcLayout: ColorSyncDataLayout, srcBytesPerRow: usize, options: CFDictionaryRef) bool;
pub extern var kColorSyncProfile: CFStringRef;
pub extern var kColorSyncRenderingIntent: CFStringRef;
pub extern var kColorSyncRenderingIntentPerceptual: CFStringRef;
pub extern var kColorSyncRenderingIntentRelative: CFStringRef;
pub extern var kColorSyncRenderingIntentSaturation: CFStringRef;
pub extern var kColorSyncRenderingIntentAbsolute: CFStringRef;
pub extern var kColorSyncRenderingIntentUseProfileHeader: CFStringRef;
pub extern var kColorSyncTransformTag: CFStringRef;
pub extern var kColorSyncTransformDeviceToPCS: CFStringRef;
pub extern var kColorSyncTransformPCSToPCS: CFStringRef;
pub extern var kColorSyncTransformPCSToDevice: CFStringRef;
pub extern var kColorSyncTransformDeviceToDevice: CFStringRef;
pub extern var kColorSyncTransformGamutCheck: CFStringRef;
pub extern var kColorSyncBlackPointCompensation: CFStringRef;
pub extern var kColorSyncExtendedRange: CFStringRef;
pub extern var kColorSyncPreferredCMM: CFStringRef;
pub extern var kColorSyncConvertQuality: CFStringRef;
pub extern var kColorSyncBestQuality: CFStringRef;
pub extern var kColorSyncNormalQuality: CFStringRef;
pub extern var kColorSyncDraftQuality: CFStringRef;
pub extern var kColorSyncConvertUseExtendedRange: CFStringRef;
pub extern var kColorSyncTransformInfo: CFStringRef;
pub extern var kColorSyncTransformCreator: CFStringRef;
pub extern var kColorSyncTransformSrcSpace: CFStringRef;
pub extern var kColorSyncTransformDstSpace: CFStringRef;
pub extern var kColorSyncTransformCodeFragmentType: CFStringRef;
pub extern var kColorSyncTransformCodeFragmentMD5: CFStringRef;
pub extern var kColorSyncTransformFullConversionData: CFStringRef;
pub extern var kColorSyncTransformSimplifiedConversionData: CFStringRef;
pub extern var kColorSyncTransformParametricConversionData: CFStringRef;
pub extern var kColorSyncTransformProfileSequnce: CFStringRef;
pub extern var kColorSyncConversionMatrix: CFStringRef;
pub extern var kColorSyncConversionParamCurve0: CFStringRef;
pub extern var kColorSyncConversionParamCurve1: CFStringRef;
pub extern var kColorSyncConversionParamCurve2: CFStringRef;
pub extern var kColorSyncConversionParamCurve3: CFStringRef;
pub extern var kColorSyncConversionParamCurve4: CFStringRef;
pub extern var kColorSyncConversion1DLut: CFStringRef;
pub extern var kColorSyncConversionGridPoints: CFStringRef;
pub extern var kColorSyncConversionChannelID: CFStringRef;
pub extern var kColorSyncConversion3DLut: CFStringRef;
pub extern var kColorSyncConversionNDLut: CFStringRef;
pub extern var kColorSyncConversionInpChan: CFStringRef;
pub extern var kColorSyncConversionOutChan: CFStringRef;
pub extern var kColorSyncConversionBPC: CFStringRef;
pub extern var kColorSyncFixedPointRange: CFStringRef;
pub extern fn ColorSyncCreateCodeFragment(profileSequence: CFArrayRef, options: CFDictionaryRef) CFTypeRef;
pub const struct_ColorSyncCMM = opaque {};
pub const ColorSyncCMMRef = ?*struct_ColorSyncCMM;
pub extern fn ColorSyncCMMGetTypeID() CFTypeID;
pub extern fn ColorSyncCMMCreate(cmmBundle: CFBundleRef) ColorSyncCMMRef;
pub extern fn ColorSyncCMMGetBundle(ColorSyncCMMRef) CFBundleRef;
pub extern fn ColorSyncCMMCopyLocalizedName(ColorSyncCMMRef) CFStringRef;
pub extern fn ColorSyncCMMCopyCMMIdentifier(ColorSyncCMMRef) CFStringRef;
pub const ColorSyncCMMIterateCallback = ?*const fn (ColorSyncCMMRef, ?*anyopaque) callconv(.C) bool;
pub extern fn ColorSyncIterateInstalledCMMs(callBack: ColorSyncCMMIterateCallback, userInfo: ?*anyopaque) void;
pub const CMMInitializeLinkProfileProc = ?*const fn (ColorSyncMutableProfileRef, CFArrayRef, CFDictionaryRef) callconv(.C) bool;
pub const CMMInitializeTransformProc = ?*const fn (ColorSyncTransformRef, CFArrayRef, CFDictionaryRef) callconv(.C) bool;
pub const CMMApplyTransformProc = ?*const fn (ColorSyncTransformRef, usize, usize, usize, [*c]?*anyopaque, ColorSyncDataDepth, ColorSyncDataLayout, usize, usize, [*c]?*const anyopaque, ColorSyncDataDepth, ColorSyncDataLayout, usize, CFDictionaryRef) callconv(.C) bool;
pub const CMMCreateTransformPropertyProc = ?*const fn (ColorSyncTransformRef, CFTypeRef, CFDictionaryRef) callconv(.C) CFTypeRef;
pub extern var kCMMInitializeLinkProfileProcName: CFStringRef;
pub extern var kCMMInitializeTransformProcName: CFStringRef;
pub extern var kCMMApplyTransformProcName: CFStringRef;
pub extern var kCMMCreateTransformPropertyProcName: CFStringRef;
pub extern var kColorSyncDeviceID: CFStringRef;
pub extern var kColorSyncDeviceClass: CFStringRef;
pub extern var kColorSyncCameraDeviceClass: CFStringRef;
pub extern var kColorSyncDisplayDeviceClass: CFStringRef;
pub extern var kColorSyncPrinterDeviceClass: CFStringRef;
pub extern var kColorSyncScannerDeviceClass: CFStringRef;
pub extern var kColorSyncDeviceProfileURL: CFStringRef;
pub extern var kColorSyncDeviceDescription: CFStringRef;
pub extern var kColorSyncDeviceDescriptions: CFStringRef;
pub extern var kColorSyncFactoryProfiles: CFStringRef;
pub extern var kColorSyncCustomProfiles: CFStringRef;
pub extern var kColorSyncDeviceModeDescription: CFStringRef;
pub extern var kColorSyncDeviceModeDescriptions: CFStringRef;
pub extern var kColorSyncDeviceDefaultProfileID: CFStringRef;
pub extern var kColorSyncDeviceHostScope: CFStringRef;
pub extern var kColorSyncDeviceUserScope: CFStringRef;
pub extern var kColorSyncProfileHostScope: CFStringRef;
pub extern var kColorSyncProfileUserScope: CFStringRef;
pub extern var kColorSyncDeviceProfileIsFactory: CFStringRef;
pub extern var kColorSyncDeviceProfileIsDefault: CFStringRef;
pub extern var kColorSyncDeviceProfileIsCurrent: CFStringRef;
pub extern var kColorSyncDeviceProfileID: CFStringRef;
pub extern var kColorSyncDeviceRegisteredNotification: CFStringRef;
pub extern var kColorSyncDeviceUnregisteredNotification: CFStringRef;
pub extern var kColorSyncDeviceProfilesNotification: CFStringRef;
pub extern var kColorSyncDisplayDeviceProfilesNotification: CFStringRef;
pub extern var kColorSyncProfileRepositoryChangeNotification: CFStringRef;
pub extern var kColorSyncRegistrationUpdateWindowServer: CFStringRef;
pub extern fn ColorSyncRegisterDevice(deviceClass: CFStringRef, deviceID: CFUUIDRef, deviceInfo: CFDictionaryRef) bool;
pub extern fn ColorSyncUnregisterDevice(deviceClass: CFStringRef, deviceID: CFUUIDRef) bool;
pub extern fn ColorSyncDeviceSetCustomProfiles(deviceClass: CFStringRef, deviceID: CFUUIDRef, profileInfo: CFDictionaryRef) bool;
pub extern fn ColorSyncDeviceCopyDeviceInfo(deviceClass: CFStringRef, devID: CFUUIDRef) CFDictionaryRef;
pub const ColorSyncDeviceProfileIterateCallback = ?*const fn (CFDictionaryRef, ?*anyopaque) callconv(.C) bool;
pub extern fn ColorSyncIterateDeviceProfiles(callBack: ColorSyncDeviceProfileIterateCallback, userInfo: ?*anyopaque) void;
pub extern fn CGDisplayCreateUUIDFromDisplayID(displayID: u32) CFUUIDRef;
pub extern fn CGDisplayGetDisplayIDFromUUID(uuid: CFUUIDRef) u32;
pub const struct_CGAffineTransform = extern struct {
    a: CGFloat,
    b: CGFloat,
    c: CGFloat,
    d: CGFloat,
    tx: CGFloat,
    ty: CGFloat,
};
pub const CGAffineTransform = struct_CGAffineTransform;
pub extern const CGAffineTransformIdentity: CGAffineTransform;
pub extern fn CGAffineTransformMake(a: CGFloat, b: CGFloat, c: CGFloat, d: CGFloat, tx: CGFloat, ty: CGFloat) CGAffineTransform;
pub extern fn CGAffineTransformMakeTranslation(tx: CGFloat, ty: CGFloat) CGAffineTransform;
pub extern fn CGAffineTransformMakeScale(sx: CGFloat, sy: CGFloat) CGAffineTransform;
pub extern fn CGAffineTransformMakeRotation(angle: CGFloat) CGAffineTransform;
pub extern fn CGAffineTransformIsIdentity(t: CGAffineTransform) bool;
pub extern fn CGAffineTransformTranslate(t: CGAffineTransform, tx: CGFloat, ty: CGFloat) CGAffineTransform;
pub extern fn CGAffineTransformScale(t: CGAffineTransform, sx: CGFloat, sy: CGFloat) CGAffineTransform;
pub extern fn CGAffineTransformRotate(t: CGAffineTransform, angle: CGFloat) CGAffineTransform;
pub extern fn CGAffineTransformInvert(t: CGAffineTransform) CGAffineTransform;
pub extern fn CGAffineTransformConcat(t1: CGAffineTransform, t2: CGAffineTransform) CGAffineTransform;
pub extern fn CGAffineTransformEqualToTransform(t1: CGAffineTransform, t2: CGAffineTransform) bool;
pub extern fn CGPointApplyAffineTransform(point: CGPoint, t: CGAffineTransform) CGPoint;
pub extern fn CGSizeApplyAffineTransform(size: CGSize, t: CGAffineTransform) CGSize;
pub extern fn CGRectApplyAffineTransform(rect: CGRect, t: CGAffineTransform) CGRect;
pub fn __CGAffineTransformMake(arg_a: CGFloat, arg_b: CGFloat, arg_c: CGFloat, arg_d: CGFloat, arg_tx: CGFloat, arg_ty: CGFloat) callconv(.C) CGAffineTransform {
    var a = arg_a;
    var b = arg_b;
    var c = arg_c;
    var d = arg_d;
    var tx = arg_tx;
    var ty = arg_ty;
    var t: CGAffineTransform = undefined;
    t.a = a;
    t.b = b;
    t.c = c;
    t.d = d;
    t.tx = tx;
    t.ty = ty;
    return t;
}
pub fn __CGPointApplyAffineTransform(arg_point: CGPoint, arg_t: CGAffineTransform) callconv(.C) CGPoint {
    var point = arg_point;
    var t = arg_t;
    var p: CGPoint = undefined;
    p.x = @floatCast(CGFloat, ((@floatCast(f64, t.a) * point.x) + (@floatCast(f64, t.c) * point.y)) + t.tx);
    p.y = @floatCast(CGFloat, ((@floatCast(f64, t.b) * point.x) + (@floatCast(f64, t.d) * point.y)) + t.ty);
    return p;
}
pub fn __CGSizeApplyAffineTransform(arg_size: CGSize, arg_t: CGAffineTransform) callconv(.C) CGSize {
    var size = arg_size;
    var t = arg_t;
    var s: CGSize = undefined;
    s.width = @floatCast(CGFloat, (@floatCast(f64, t.a) * size.width) + (@floatCast(f64, t.c) * size.height));
    s.height = @floatCast(CGFloat, (@floatCast(f64, t.b) * size.width) + (@floatCast(f64, t.d) * size.height));
    return s;
}
pub const struct_CGContext = opaque {};
pub const CGContextRef = ?*struct_CGContext;
pub const struct_CGColor = opaque {};
pub const CGColorRef = ?*struct_CGColor;
pub const struct_CGColorSpace = opaque {};
pub const CGColorSpaceRef = ?*struct_CGColorSpace;
pub const struct_CGDataProvider = opaque {};
pub const CGDataProviderRef = ?*struct_CGDataProvider;
pub const CGDataProviderGetBytesCallback = ?*const fn (?*anyopaque, ?*anyopaque, usize) callconv(.C) usize;
pub const CGDataProviderSkipForwardCallback = ?*const fn (?*anyopaque, off_t) callconv(.C) off_t;
pub const CGDataProviderRewindCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const CGDataProviderReleaseInfoCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const struct_CGDataProviderSequentialCallbacks = extern struct {
    version: c_uint,
    getBytes: CGDataProviderGetBytesCallback,
    skipForward: CGDataProviderSkipForwardCallback,
    rewind: CGDataProviderRewindCallback,
    releaseInfo: CGDataProviderReleaseInfoCallback,
};
pub const CGDataProviderSequentialCallbacks = struct_CGDataProviderSequentialCallbacks;
pub const CGDataProviderGetBytePointerCallback = ?*const fn (?*anyopaque) callconv(.C) ?*const anyopaque;
pub const CGDataProviderReleaseBytePointerCallback = ?*const fn (?*anyopaque, ?*const anyopaque) callconv(.C) void;
pub const CGDataProviderGetBytesAtPositionCallback = ?*const fn (?*anyopaque, ?*anyopaque, off_t, usize) callconv(.C) usize;
pub const struct_CGDataProviderDirectCallbacks = extern struct {
    version: c_uint,
    getBytePointer: CGDataProviderGetBytePointerCallback,
    releaseBytePointer: CGDataProviderReleaseBytePointerCallback,
    getBytesAtPosition: CGDataProviderGetBytesAtPositionCallback,
    releaseInfo: CGDataProviderReleaseInfoCallback,
};
pub const CGDataProviderDirectCallbacks = struct_CGDataProviderDirectCallbacks;
pub extern fn CGDataProviderGetTypeID() CFTypeID;
pub extern fn CGDataProviderCreateSequential(info: ?*anyopaque, callbacks: [*c]const CGDataProviderSequentialCallbacks) CGDataProviderRef;
pub extern fn CGDataProviderCreateDirect(info: ?*anyopaque, size: off_t, callbacks: [*c]const CGDataProviderDirectCallbacks) CGDataProviderRef;
pub const CGDataProviderReleaseDataCallback = ?*const fn (?*anyopaque, ?*const anyopaque, usize) callconv(.C) void;
pub extern fn CGDataProviderCreateWithData(info: ?*anyopaque, data: ?*const anyopaque, size: usize, releaseData: CGDataProviderReleaseDataCallback) CGDataProviderRef;
pub extern fn CGDataProviderCreateWithCFData(data: CFDataRef) CGDataProviderRef;
pub extern fn CGDataProviderCreateWithURL(url: CFURLRef) CGDataProviderRef;
pub extern fn CGDataProviderCreateWithFilename(filename: [*c]const u8) CGDataProviderRef;
pub extern fn CGDataProviderRetain(provider: CGDataProviderRef) CGDataProviderRef;
pub extern fn CGDataProviderRelease(provider: CGDataProviderRef) void;
pub extern fn CGDataProviderCopyData(provider: CGDataProviderRef) CFDataRef;
pub extern fn CGDataProviderGetInfo(provider: CGDataProviderRef) ?*anyopaque;
pub const CGColorRenderingIntent = i32;
pub const kCGRenderingIntentDefault: c_int = 0;
pub const kCGRenderingIntentAbsoluteColorimetric: c_int = 1;
pub const kCGRenderingIntentRelativeColorimetric: c_int = 2;
pub const kCGRenderingIntentPerceptual: c_int = 3;
pub const kCGRenderingIntentSaturation: c_int = 4;
const enum_unnamed_1351 = c_uint;
pub const CGColorSpaceModel = i32;
pub const kCGColorSpaceModelUnknown: c_int = -1;
pub const kCGColorSpaceModelMonochrome: c_int = 0;
pub const kCGColorSpaceModelRGB: c_int = 1;
pub const kCGColorSpaceModelCMYK: c_int = 2;
pub const kCGColorSpaceModelLab: c_int = 3;
pub const kCGColorSpaceModelDeviceN: c_int = 4;
pub const kCGColorSpaceModelIndexed: c_int = 5;
pub const kCGColorSpaceModelPattern: c_int = 6;
pub const kCGColorSpaceModelXYZ: c_int = 7;
const enum_unnamed_1352 = c_int;
pub extern const kCGColorSpaceGenericGray: CFStringRef;
pub extern const kCGColorSpaceGenericRGB: CFStringRef;
pub extern const kCGColorSpaceGenericCMYK: CFStringRef;
pub extern const kCGColorSpaceDisplayP3: CFStringRef;
pub extern const kCGColorSpaceGenericRGBLinear: CFStringRef;
pub extern const kCGColorSpaceAdobeRGB1998: CFStringRef;
pub extern const kCGColorSpaceSRGB: CFStringRef;
pub extern const kCGColorSpaceGenericGrayGamma2_2: CFStringRef;
pub extern const kCGColorSpaceGenericXYZ: CFStringRef;
pub extern const kCGColorSpaceGenericLab: CFStringRef;
pub extern const kCGColorSpaceACESCGLinear: CFStringRef;
pub extern const kCGColorSpaceITUR_709: CFStringRef;
pub extern const kCGColorSpaceITUR_2020: CFStringRef;
pub extern const kCGColorSpaceROMMRGB: CFStringRef;
pub extern const kCGColorSpaceDCIP3: CFStringRef;
pub extern const kCGColorSpaceLinearITUR_2020: CFStringRef;
pub extern const kCGColorSpaceExtendedITUR_2020: CFStringRef;
pub extern const kCGColorSpaceExtendedLinearITUR_2020: CFStringRef;
pub extern const kCGColorSpaceLinearDisplayP3: CFStringRef;
pub extern const kCGColorSpaceExtendedDisplayP3: CFStringRef;
pub extern const kCGColorSpaceExtendedLinearDisplayP3: CFStringRef;
pub extern const kCGColorSpaceITUR_2100_PQ: CFStringRef;
pub extern const kCGColorSpaceITUR_2100_HLG: CFStringRef;
pub extern const kCGColorSpaceDisplayP3_PQ: CFStringRef;
pub extern const kCGColorSpaceDisplayP3_HLG: CFStringRef;
pub extern const kCGColorSpaceITUR_2020_PQ: CFStringRef;
pub extern const kCGColorSpaceITUR_2020_HLG: CFStringRef;
pub extern const kCGColorSpaceDisplayP3_PQ_EOTF: CFStringRef;
pub extern const kCGColorSpaceITUR_2020_PQ_EOTF: CFStringRef;
pub extern const kCGColorSpaceExtendedSRGB: CFStringRef;
pub extern const kCGColorSpaceLinearSRGB: CFStringRef;
pub extern const kCGColorSpaceExtendedLinearSRGB: CFStringRef;
pub extern const kCGColorSpaceExtendedGray: CFStringRef;
pub extern const kCGColorSpaceLinearGray: CFStringRef;
pub extern const kCGColorSpaceExtendedLinearGray: CFStringRef;
pub extern fn CGColorSpaceCreateDeviceGray() CGColorSpaceRef;
pub extern fn CGColorSpaceCreateDeviceRGB() CGColorSpaceRef;
pub extern fn CGColorSpaceCreateDeviceCMYK() CGColorSpaceRef;
pub extern fn CGColorSpaceCreateCalibratedGray(whitePoint: [*c]const CGFloat, blackPoint: [*c]const CGFloat, gamma: CGFloat) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateCalibratedRGB(whitePoint: [*c]const CGFloat, blackPoint: [*c]const CGFloat, gamma: [*c]const CGFloat, matrix: [*c]const CGFloat) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateLab(whitePoint: [*c]const CGFloat, blackPoint: [*c]const CGFloat, range: [*c]const CGFloat) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateWithICCData(data: CFTypeRef) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateICCBased(nComponents: usize, range: [*c]const CGFloat, profile: CGDataProviderRef, alternate: CGColorSpaceRef) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateIndexed(baseSpace: CGColorSpaceRef, lastIndex: usize, colorTable: [*c]const u8) CGColorSpaceRef;
pub extern fn CGColorSpaceCreatePattern(baseSpace: CGColorSpaceRef) CGColorSpaceRef;
pub extern const kCGColorSpaceExtendedRange: CFStringRef;
pub extern fn CGColorSpaceCreateWithColorSyncProfile(ColorSyncProfileRef, options: CFDictionaryRef) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateWithName(name: CFStringRef) CGColorSpaceRef;
pub extern fn CGColorSpaceRetain(space: CGColorSpaceRef) CGColorSpaceRef;
pub extern fn CGColorSpaceRelease(space: CGColorSpaceRef) void;
pub extern fn CGColorSpaceGetName(space: CGColorSpaceRef) CFStringRef;
pub extern fn CGColorSpaceCopyName(space: CGColorSpaceRef) CFStringRef;
pub extern fn CGColorSpaceGetTypeID() CFTypeID;
pub extern fn CGColorSpaceGetNumberOfComponents(space: CGColorSpaceRef) usize;
pub extern fn CGColorSpaceGetModel(space: CGColorSpaceRef) CGColorSpaceModel;
pub extern fn CGColorSpaceGetBaseColorSpace(space: CGColorSpaceRef) CGColorSpaceRef;
pub extern fn CGColorSpaceGetColorTableCount(space: CGColorSpaceRef) usize;
pub extern fn CGColorSpaceGetColorTable(space: CGColorSpaceRef, table: [*c]u8) void;
pub extern fn CGColorSpaceCopyICCData(space: CGColorSpaceRef) CFDataRef;
pub extern fn CGColorSpaceIsWideGamutRGB(CGColorSpaceRef) bool;
pub extern fn CGColorSpaceIsHDR(CGColorSpaceRef) bool;
pub extern fn CGColorSpaceUsesITUR_2100TF(CGColorSpaceRef) bool;
pub extern fn CGColorSpaceIsPQBased(s: CGColorSpaceRef) bool;
pub extern fn CGColorSpaceIsHLGBased(s: CGColorSpaceRef) bool;
pub extern fn CGColorSpaceSupportsOutput(space: CGColorSpaceRef) bool;
pub extern fn CGColorSpaceCopyPropertyList(space: CGColorSpaceRef) CFPropertyListRef;
pub extern fn CGColorSpaceCreateWithPropertyList(plist: CFPropertyListRef) CGColorSpaceRef;
pub extern fn CGColorSpaceUsesExtendedRange(space: CGColorSpaceRef) bool;
pub extern fn CGColorSpaceCreateLinearized(space: CGColorSpaceRef) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateExtended(space: CGColorSpaceRef) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateExtendedLinearized(space: CGColorSpaceRef) CGColorSpaceRef;
pub extern fn CGColorSpaceCreateWithICCProfile(data: CFDataRef) CGColorSpaceRef;
pub extern fn CGColorSpaceCopyICCProfile(space: CGColorSpaceRef) CFDataRef;
pub extern fn CGColorSpaceCreateWithPlatformColorSpace(ref: ?*const anyopaque) CGColorSpaceRef;
pub const struct_CGPattern = opaque {};
pub const CGPatternRef = ?*struct_CGPattern;
pub const CGPatternTiling = i32;
pub const kCGPatternTilingNoDistortion: c_int = 0;
pub const kCGPatternTilingConstantSpacingMinimalDistortion: c_int = 1;
pub const kCGPatternTilingConstantSpacing: c_int = 2;
const enum_unnamed_1353 = c_uint;
pub const CGPatternDrawPatternCallback = ?*const fn (?*anyopaque, CGContextRef) callconv(.C) void;
pub const CGPatternReleaseInfoCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const struct_CGPatternCallbacks = extern struct {
    version: c_uint,
    drawPattern: CGPatternDrawPatternCallback,
    releaseInfo: CGPatternReleaseInfoCallback,
};
pub const CGPatternCallbacks = struct_CGPatternCallbacks;
pub extern fn CGPatternGetTypeID() CFTypeID;
pub extern fn CGPatternCreate(info: ?*anyopaque, bounds: CGRect, matrix: CGAffineTransform, xStep: CGFloat, yStep: CGFloat, tiling: CGPatternTiling, isColored: bool, callbacks: [*c]const CGPatternCallbacks) CGPatternRef;
pub extern fn CGPatternRetain(pattern: CGPatternRef) CGPatternRef;
pub extern fn CGPatternRelease(pattern: CGPatternRef) void;
pub extern fn CGColorCreate(space: CGColorSpaceRef, components: [*c]const CGFloat) CGColorRef;
pub extern fn CGColorCreateGenericGray(gray: CGFloat, alpha: CGFloat) CGColorRef;
pub extern fn CGColorCreateGenericRGB(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) CGColorRef;
pub extern fn CGColorCreateGenericCMYK(cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat) CGColorRef;
pub extern fn CGColorCreateGenericGrayGamma2_2(gray: CGFloat, alpha: CGFloat) CGColorRef;
pub extern fn CGColorCreateSRGB(red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) CGColorRef;
pub extern fn CGColorGetConstantColor(colorName: CFStringRef) CGColorRef;
pub extern fn CGColorCreateWithPattern(space: CGColorSpaceRef, pattern: CGPatternRef, components: [*c]const CGFloat) CGColorRef;
pub extern fn CGColorCreateCopy(color: CGColorRef) CGColorRef;
pub extern fn CGColorCreateCopyWithAlpha(color: CGColorRef, alpha: CGFloat) CGColorRef;
pub extern fn CGColorCreateCopyByMatchingToColorSpace(CGColorSpaceRef, intent: CGColorRenderingIntent, color: CGColorRef, options: CFDictionaryRef) CGColorRef;
pub extern fn CGColorRetain(color: CGColorRef) CGColorRef;
pub extern fn CGColorRelease(color: CGColorRef) void;
pub extern fn CGColorEqualToColor(color1: CGColorRef, color2: CGColorRef) bool;
pub extern fn CGColorGetNumberOfComponents(color: CGColorRef) usize;
pub extern fn CGColorGetComponents(color: CGColorRef) [*c]const CGFloat;
pub extern fn CGColorGetAlpha(color: CGColorRef) CGFloat;
pub extern fn CGColorGetColorSpace(color: CGColorRef) CGColorSpaceRef;
pub extern fn CGColorGetPattern(color: CGColorRef) CGPatternRef;
pub extern fn CGColorGetTypeID() CFTypeID;
pub extern const kCGColorWhite: CFStringRef;
pub extern const kCGColorBlack: CFStringRef;
pub extern const kCGColorClear: CFStringRef;
pub const struct_CGFont = opaque {};
pub const CGFontRef = ?*struct_CGFont;
pub const CGFontIndex = c_ushort;
pub const CGGlyph = CGFontIndex;
pub const CGFontPostScriptFormat = i32;
pub const kCGFontPostScriptFormatType1: c_int = 1;
pub const kCGFontPostScriptFormatType3: c_int = 3;
pub const kCGFontPostScriptFormatType42: c_int = 42;
const enum_unnamed_1354 = c_uint;
pub const kCGFontIndexMax: CGFontIndex = @bitCast(CGFontIndex, @truncate(c_short, (@as(c_int, 1) << @intCast(@import("std").math.Log2Int(c_int), 16)) - @as(c_int, 2)));
pub const kCGFontIndexInvalid: CGFontIndex = @bitCast(CGFontIndex, @truncate(c_short, (@as(c_int, 1) << @intCast(@import("std").math.Log2Int(c_int), 16)) - @as(c_int, 1)));
pub const kCGGlyphMax: CGFontIndex = kCGFontIndexMax;
pub extern fn CGFontGetTypeID() CFTypeID;
pub extern fn CGFontCreateWithPlatformFont(platformFontReference: ?*anyopaque) CGFontRef;
pub extern fn CGFontCreateWithDataProvider(provider: CGDataProviderRef) CGFontRef;
pub extern fn CGFontCreateWithFontName(name: CFStringRef) CGFontRef;
pub extern fn CGFontCreateCopyWithVariations(font: CGFontRef, variations: CFDictionaryRef) CGFontRef;
pub extern fn CGFontRetain(font: CGFontRef) CGFontRef;
pub extern fn CGFontRelease(font: CGFontRef) void;
pub extern fn CGFontGetNumberOfGlyphs(font: CGFontRef) usize;
pub extern fn CGFontGetUnitsPerEm(font: CGFontRef) c_int;
pub extern fn CGFontCopyPostScriptName(font: CGFontRef) CFStringRef;
pub extern fn CGFontCopyFullName(font: CGFontRef) CFStringRef;
pub extern fn CGFontGetAscent(font: CGFontRef) c_int;
pub extern fn CGFontGetDescent(font: CGFontRef) c_int;
pub extern fn CGFontGetLeading(font: CGFontRef) c_int;
pub extern fn CGFontGetCapHeight(font: CGFontRef) c_int;
pub extern fn CGFontGetXHeight(font: CGFontRef) c_int;
pub extern fn CGFontGetFontBBox(font: CGFontRef) CGRect;
pub extern fn CGFontGetItalicAngle(font: CGFontRef) CGFloat;
pub extern fn CGFontGetStemV(font: CGFontRef) CGFloat;
pub extern fn CGFontCopyVariationAxes(font: CGFontRef) CFArrayRef;
pub extern fn CGFontCopyVariations(font: CGFontRef) CFDictionaryRef;
pub extern fn CGFontGetGlyphAdvances(font: CGFontRef, glyphs: [*c]const CGGlyph, count: usize, advances: [*c]c_int) bool;
pub extern fn CGFontGetGlyphBBoxes(font: CGFontRef, glyphs: [*c]const CGGlyph, count: usize, bboxes: [*c]CGRect) bool;
pub extern fn CGFontGetGlyphWithGlyphName(font: CGFontRef, name: CFStringRef) CGGlyph;
pub extern fn CGFontCopyGlyphNameForGlyph(font: CGFontRef, glyph: CGGlyph) CFStringRef;
pub extern fn CGFontCanCreatePostScriptSubset(font: CGFontRef, format: CGFontPostScriptFormat) bool;
pub extern fn CGFontCreatePostScriptSubset(font: CGFontRef, subsetName: CFStringRef, format: CGFontPostScriptFormat, glyphs: [*c]const CGGlyph, count: usize, encoding: [*c]const CGGlyph) CFDataRef;
pub extern fn CGFontCreatePostScriptEncoding(font: CGFontRef, encoding: [*c]const CGGlyph) CFDataRef;
pub extern fn CGFontCopyTableTags(font: CGFontRef) CFArrayRef;
pub extern fn CGFontCopyTableForTag(font: CGFontRef, tag: u32) CFDataRef;
pub extern const kCGFontVariationAxisName: CFStringRef;
pub extern const kCGFontVariationAxisMinValue: CFStringRef;
pub extern const kCGFontVariationAxisMaxValue: CFStringRef;
pub extern const kCGFontVariationAxisDefaultValue: CFStringRef;
pub const CGGlyphDeprecatedEnum = i32;
pub const CGGlyphMin: c_int = 0;
pub const CGGlyphMax: c_int = 1;
const enum_unnamed_1355 = c_uint;
pub const struct_CGGradient = opaque {};
pub const CGGradientRef = ?*struct_CGGradient;
pub const CGGradientDrawingOptions = u32;
pub const kCGGradientDrawsBeforeStartLocation: c_int = 1;
pub const kCGGradientDrawsAfterEndLocation: c_int = 2;
const enum_unnamed_1356 = c_uint;
pub extern fn CGGradientGetTypeID() CFTypeID;
pub extern fn CGGradientCreateWithColorComponents(space: CGColorSpaceRef, components: [*c]const CGFloat, locations: [*c]const CGFloat, count: usize) CGGradientRef;
pub extern fn CGGradientCreateWithColors(space: CGColorSpaceRef, colors: CFArrayRef, locations: [*c]const CGFloat) CGGradientRef;
pub extern fn CGGradientRetain(gradient: CGGradientRef) CGGradientRef;
pub extern fn CGGradientRelease(gradient: CGGradientRef) void;
pub const struct_CGImage = opaque {};
pub const CGImageRef = ?*struct_CGImage;
pub const CGImageAlphaInfo = u32;
pub const kCGImageAlphaNone: c_int = 0;
pub const kCGImageAlphaPremultipliedLast: c_int = 1;
pub const kCGImageAlphaPremultipliedFirst: c_int = 2;
pub const kCGImageAlphaLast: c_int = 3;
pub const kCGImageAlphaFirst: c_int = 4;
pub const kCGImageAlphaNoneSkipLast: c_int = 5;
pub const kCGImageAlphaNoneSkipFirst: c_int = 6;
pub const kCGImageAlphaOnly: c_int = 7;
const enum_unnamed_1357 = c_uint;
pub const CGImageByteOrderInfo = u32;
pub const kCGImageByteOrderMask: c_int = 28672;
pub const kCGImageByteOrderDefault: c_int = 0;
pub const kCGImageByteOrder16Little: c_int = 4096;
pub const kCGImageByteOrder32Little: c_int = 8192;
pub const kCGImageByteOrder16Big: c_int = 12288;
pub const kCGImageByteOrder32Big: c_int = 16384;
const enum_unnamed_1358 = c_uint;
pub const CGImagePixelFormatInfo = u32;
pub const kCGImagePixelFormatMask: c_int = 983040;
pub const kCGImagePixelFormatPacked: c_int = 0;
pub const kCGImagePixelFormatRGB555: c_int = 65536;
pub const kCGImagePixelFormatRGB565: c_int = 131072;
pub const kCGImagePixelFormatRGB101010: c_int = 196608;
pub const kCGImagePixelFormatRGBCIF10: c_int = 262144;
const enum_unnamed_1359 = c_uint;
pub const CGBitmapInfo = u32;
pub const kCGBitmapAlphaInfoMask: c_int = 31;
pub const kCGBitmapFloatInfoMask: c_int = 3840;
pub const kCGBitmapFloatComponents: c_int = 256;
pub const kCGBitmapByteOrderMask: c_int = 28672;
pub const kCGBitmapByteOrderDefault: c_int = 0;
pub const kCGBitmapByteOrder16Little: c_int = 4096;
pub const kCGBitmapByteOrder32Little: c_int = 8192;
pub const kCGBitmapByteOrder16Big: c_int = 12288;
pub const kCGBitmapByteOrder32Big: c_int = 16384;
const enum_unnamed_1360 = c_uint;
pub extern fn CGImageGetTypeID() CFTypeID;
pub extern fn CGImageCreate(width: usize, height: usize, bitsPerComponent: usize, bitsPerPixel: usize, bytesPerRow: usize, space: CGColorSpaceRef, bitmapInfo: CGBitmapInfo, provider: CGDataProviderRef, decode: [*c]const CGFloat, shouldInterpolate: bool, intent: CGColorRenderingIntent) CGImageRef;
pub extern fn CGImageMaskCreate(width: usize, height: usize, bitsPerComponent: usize, bitsPerPixel: usize, bytesPerRow: usize, provider: CGDataProviderRef, decode: [*c]const CGFloat, shouldInterpolate: bool) CGImageRef;
pub extern fn CGImageCreateCopy(image: CGImageRef) CGImageRef;
pub extern fn CGImageCreateWithJPEGDataProvider(source: CGDataProviderRef, decode: [*c]const CGFloat, shouldInterpolate: bool, intent: CGColorRenderingIntent) CGImageRef;
pub extern fn CGImageCreateWithPNGDataProvider(source: CGDataProviderRef, decode: [*c]const CGFloat, shouldInterpolate: bool, intent: CGColorRenderingIntent) CGImageRef;
pub extern fn CGImageCreateWithImageInRect(image: CGImageRef, rect: CGRect) CGImageRef;
pub extern fn CGImageCreateWithMask(image: CGImageRef, mask: CGImageRef) CGImageRef;
pub extern fn CGImageCreateWithMaskingColors(image: CGImageRef, components: [*c]const CGFloat) CGImageRef;
pub extern fn CGImageCreateCopyWithColorSpace(image: CGImageRef, space: CGColorSpaceRef) CGImageRef;
pub extern fn CGImageRetain(image: CGImageRef) CGImageRef;
pub extern fn CGImageRelease(image: CGImageRef) void;
pub extern fn CGImageIsMask(image: CGImageRef) bool;
pub extern fn CGImageGetWidth(image: CGImageRef) usize;
pub extern fn CGImageGetHeight(image: CGImageRef) usize;
pub extern fn CGImageGetBitsPerComponent(image: CGImageRef) usize;
pub extern fn CGImageGetBitsPerPixel(image: CGImageRef) usize;
pub extern fn CGImageGetBytesPerRow(image: CGImageRef) usize;
pub extern fn CGImageGetColorSpace(image: CGImageRef) CGColorSpaceRef;
pub extern fn CGImageGetAlphaInfo(image: CGImageRef) CGImageAlphaInfo;
pub extern fn CGImageGetDataProvider(image: CGImageRef) CGDataProviderRef;
pub extern fn CGImageGetDecode(image: CGImageRef) [*c]const CGFloat;
pub extern fn CGImageGetShouldInterpolate(image: CGImageRef) bool;
pub extern fn CGImageGetRenderingIntent(image: CGImageRef) CGColorRenderingIntent;
pub extern fn CGImageGetBitmapInfo(image: CGImageRef) CGBitmapInfo;
pub extern fn CGImageGetByteOrderInfo(image: CGImageRef) CGImageByteOrderInfo;
pub extern fn CGImageGetPixelFormatInfo(image: CGImageRef) CGImagePixelFormatInfo;
pub extern fn CGImageGetUTType(image: CGImageRef) CFStringRef;
pub const struct_CGPath = opaque {};
pub const CGMutablePathRef = ?*struct_CGPath;
pub const CGPathRef = ?*const struct_CGPath;
pub const CGLineJoin = i32;
pub const kCGLineJoinMiter: c_int = 0;
pub const kCGLineJoinRound: c_int = 1;
pub const kCGLineJoinBevel: c_int = 2;
const enum_unnamed_1361 = c_uint;
pub const CGLineCap = i32;
pub const kCGLineCapButt: c_int = 0;
pub const kCGLineCapRound: c_int = 1;
pub const kCGLineCapSquare: c_int = 2;
const enum_unnamed_1362 = c_uint;
pub extern fn CGPathGetTypeID() CFTypeID;
pub extern fn CGPathCreateMutable() CGMutablePathRef;
pub extern fn CGPathCreateCopy(path: CGPathRef) CGPathRef;
pub extern fn CGPathCreateCopyByTransformingPath(path: CGPathRef, transform: [*c]const CGAffineTransform) CGPathRef;
pub extern fn CGPathCreateMutableCopy(path: CGPathRef) CGMutablePathRef;
pub extern fn CGPathCreateMutableCopyByTransformingPath(path: CGPathRef, transform: [*c]const CGAffineTransform) CGMutablePathRef;
pub extern fn CGPathCreateWithRect(rect: CGRect, transform: [*c]const CGAffineTransform) CGPathRef;
pub extern fn CGPathCreateWithEllipseInRect(rect: CGRect, transform: [*c]const CGAffineTransform) CGPathRef;
pub extern fn CGPathCreateWithRoundedRect(rect: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat, transform: [*c]const CGAffineTransform) CGPathRef;
pub extern fn CGPathAddRoundedRect(path: CGMutablePathRef, transform: [*c]const CGAffineTransform, rect: CGRect, cornerWidth: CGFloat, cornerHeight: CGFloat) void;
pub extern fn CGPathCreateCopyByDashingPath(path: CGPathRef, transform: [*c]const CGAffineTransform, phase: CGFloat, lengths: [*c]const CGFloat, count: usize) CGPathRef;
pub extern fn CGPathCreateCopyByStrokingPath(path: CGPathRef, transform: [*c]const CGAffineTransform, lineWidth: CGFloat, lineCap: CGLineCap, lineJoin: CGLineJoin, miterLimit: CGFloat) CGPathRef;
pub extern fn CGPathRetain(path: CGPathRef) CGPathRef;
pub extern fn CGPathRelease(path: CGPathRef) void;
pub extern fn CGPathEqualToPath(path1: CGPathRef, path2: CGPathRef) bool;
pub extern fn CGPathMoveToPoint(path: CGMutablePathRef, m: [*c]const CGAffineTransform, x: CGFloat, y: CGFloat) void;
pub extern fn CGPathAddLineToPoint(path: CGMutablePathRef, m: [*c]const CGAffineTransform, x: CGFloat, y: CGFloat) void;
pub extern fn CGPathAddQuadCurveToPoint(path: CGMutablePathRef, m: [*c]const CGAffineTransform, cpx: CGFloat, cpy: CGFloat, x: CGFloat, y: CGFloat) void;
pub extern fn CGPathAddCurveToPoint(path: CGMutablePathRef, m: [*c]const CGAffineTransform, cp1x: CGFloat, cp1y: CGFloat, cp2x: CGFloat, cp2y: CGFloat, x: CGFloat, y: CGFloat) void;
pub extern fn CGPathCloseSubpath(path: CGMutablePathRef) void;
pub extern fn CGPathAddRect(path: CGMutablePathRef, m: [*c]const CGAffineTransform, rect: CGRect) void;
pub extern fn CGPathAddRects(path: CGMutablePathRef, m: [*c]const CGAffineTransform, rects: [*c]const CGRect, count: usize) void;
pub extern fn CGPathAddLines(path: CGMutablePathRef, m: [*c]const CGAffineTransform, points: [*c]const CGPoint, count: usize) void;
pub extern fn CGPathAddEllipseInRect(path: CGMutablePathRef, m: [*c]const CGAffineTransform, rect: CGRect) void;
pub extern fn CGPathAddRelativeArc(path: CGMutablePathRef, matrix: [*c]const CGAffineTransform, x: CGFloat, y: CGFloat, radius: CGFloat, startAngle: CGFloat, delta: CGFloat) void;
pub extern fn CGPathAddArc(path: CGMutablePathRef, m: [*c]const CGAffineTransform, x: CGFloat, y: CGFloat, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: bool) void;
pub extern fn CGPathAddArcToPoint(path: CGMutablePathRef, m: [*c]const CGAffineTransform, x1: CGFloat, y1: CGFloat, x2: CGFloat, y2: CGFloat, radius: CGFloat) void;
pub extern fn CGPathAddPath(path1: CGMutablePathRef, m: [*c]const CGAffineTransform, path2: CGPathRef) void;
pub extern fn CGPathIsEmpty(path: CGPathRef) bool;
pub extern fn CGPathIsRect(path: CGPathRef, rect: [*c]CGRect) bool;
pub extern fn CGPathGetCurrentPoint(path: CGPathRef) CGPoint;
pub extern fn CGPathGetBoundingBox(path: CGPathRef) CGRect;
pub extern fn CGPathGetPathBoundingBox(path: CGPathRef) CGRect;
pub extern fn CGPathContainsPoint(path: CGPathRef, m: [*c]const CGAffineTransform, point: CGPoint, eoFill: bool) bool;
pub const CGPathElementType = i32;
pub const kCGPathElementMoveToPoint: c_int = 0;
pub const kCGPathElementAddLineToPoint: c_int = 1;
pub const kCGPathElementAddQuadCurveToPoint: c_int = 2;
pub const kCGPathElementAddCurveToPoint: c_int = 3;
pub const kCGPathElementCloseSubpath: c_int = 4;
const enum_unnamed_1363 = c_uint;
pub const struct_CGPathElement = extern struct {
    type: CGPathElementType,
    points: [*c]CGPoint,
};
pub const CGPathElement = struct_CGPathElement;
pub const CGPathApplierFunction = ?*const fn (?*anyopaque, [*c]const CGPathElement) callconv(.C) void;
pub extern fn CGPathApply(path: CGPathRef, info: ?*anyopaque, function: CGPathApplierFunction) void; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGPath.h:391:16: warning: unsupported type: 'BlockPointer'
pub const CGPathApplyBlock = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGPath.h:391:16
pub extern fn CGPathApplyWithBlock(path: CGPathRef, block: CGPathApplyBlock) void;
pub const struct_CGPDFDocument = opaque {};
pub const CGPDFDocumentRef = ?*struct_CGPDFDocument;
pub const struct_CGPDFPage = opaque {};
pub const CGPDFPageRef = ?*struct_CGPDFPage;
pub const struct_CGPDFDictionary = opaque {};
pub const CGPDFDictionaryRef = ?*struct_CGPDFDictionary;
pub const struct_CGPDFArray = opaque {};
pub const CGPDFArrayRef = ?*struct_CGPDFArray;
pub const CGPDFBoolean = u8;
pub const CGPDFInteger = c_long;
pub const CGPDFReal = CGFloat;
pub const struct_CGPDFObject = opaque {};
pub const CGPDFObjectRef = ?*struct_CGPDFObject;
pub const CGPDFObjectType = i32;
pub const kCGPDFObjectTypeNull: c_int = 1;
pub const kCGPDFObjectTypeBoolean: c_int = 2;
pub const kCGPDFObjectTypeInteger: c_int = 3;
pub const kCGPDFObjectTypeReal: c_int = 4;
pub const kCGPDFObjectTypeName: c_int = 5;
pub const kCGPDFObjectTypeString: c_int = 6;
pub const kCGPDFObjectTypeArray: c_int = 7;
pub const kCGPDFObjectTypeDictionary: c_int = 8;
pub const kCGPDFObjectTypeStream: c_int = 9;
const enum_unnamed_1364 = c_uint;
pub extern fn CGPDFObjectGetType(object: CGPDFObjectRef) CGPDFObjectType;
pub extern fn CGPDFObjectGetValue(object: CGPDFObjectRef, @"type": CGPDFObjectType, value: ?*anyopaque) bool;
pub const struct_CGPDFStream = opaque {};
pub const CGPDFStreamRef = ?*struct_CGPDFStream;
pub const CGPDFDataFormat = i32;
pub const CGPDFDataFormatRaw: c_int = 0;
pub const CGPDFDataFormatJPEGEncoded: c_int = 1;
pub const CGPDFDataFormatJPEG2000: c_int = 2;
const enum_unnamed_1365 = c_uint;
pub extern fn CGPDFStreamGetDictionary(stream: CGPDFStreamRef) CGPDFDictionaryRef;
pub extern fn CGPDFStreamCopyData(stream: CGPDFStreamRef, format: [*c]CGPDFDataFormat) CFDataRef;
pub const struct_CGPDFString = opaque {};
pub const CGPDFStringRef = ?*struct_CGPDFString;
pub extern fn CGPDFStringGetLength(string: CGPDFStringRef) usize;
pub extern fn CGPDFStringGetBytePtr(string: CGPDFStringRef) [*c]const u8;
pub extern fn CGPDFStringCopyTextString(string: CGPDFStringRef) CFStringRef;
pub extern fn CGPDFStringCopyDate(string: CGPDFStringRef) CFDateRef;
pub extern fn CGPDFArrayGetCount(array: CGPDFArrayRef) usize;
pub extern fn CGPDFArrayGetObject(array: CGPDFArrayRef, index: usize, value: [*c]CGPDFObjectRef) bool;
pub extern fn CGPDFArrayGetNull(array: CGPDFArrayRef, index: usize) bool;
pub extern fn CGPDFArrayGetBoolean(array: CGPDFArrayRef, index: usize, value: [*c]CGPDFBoolean) bool;
pub extern fn CGPDFArrayGetInteger(array: CGPDFArrayRef, index: usize, value: [*c]CGPDFInteger) bool;
pub extern fn CGPDFArrayGetNumber(array: CGPDFArrayRef, index: usize, value: [*c]CGPDFReal) bool;
pub extern fn CGPDFArrayGetName(array: CGPDFArrayRef, index: usize, value: [*c][*c]const u8) bool;
pub extern fn CGPDFArrayGetString(array: CGPDFArrayRef, index: usize, value: [*c]CGPDFStringRef) bool;
pub extern fn CGPDFArrayGetArray(array: CGPDFArrayRef, index: usize, value: [*c]CGPDFArrayRef) bool;
pub extern fn CGPDFArrayGetDictionary(array: CGPDFArrayRef, index: usize, value: [*c]CGPDFDictionaryRef) bool;
pub extern fn CGPDFArrayGetStream(array: CGPDFArrayRef, index: usize, value: [*c]CGPDFStreamRef) bool; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGPDFArray.h:103:16: warning: unsupported type: 'BlockPointer'
pub const CGPDFArrayApplierBlock = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGPDFArray.h:103:16
pub extern fn CGPDFArrayApplyBlock(array: CGPDFArrayRef, block: CGPDFArrayApplierBlock, info: ?*anyopaque) void;
pub extern fn CGPDFDictionaryGetCount(dict: CGPDFDictionaryRef) usize;
pub extern fn CGPDFDictionaryGetObject(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c]CGPDFObjectRef) bool;
pub extern fn CGPDFDictionaryGetBoolean(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c]CGPDFBoolean) bool;
pub extern fn CGPDFDictionaryGetInteger(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c]CGPDFInteger) bool;
pub extern fn CGPDFDictionaryGetNumber(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c]CGPDFReal) bool;
pub extern fn CGPDFDictionaryGetName(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c][*c]const u8) bool;
pub extern fn CGPDFDictionaryGetString(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c]CGPDFStringRef) bool;
pub extern fn CGPDFDictionaryGetArray(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c]CGPDFArrayRef) bool;
pub extern fn CGPDFDictionaryGetDictionary(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c]CGPDFDictionaryRef) bool;
pub extern fn CGPDFDictionaryGetStream(dict: CGPDFDictionaryRef, key: [*c]const u8, value: [*c]CGPDFStreamRef) bool;
pub const CGPDFDictionaryApplierFunction = ?*const fn ([*c]const u8, CGPDFObjectRef, ?*anyopaque) callconv(.C) void;
pub extern fn CGPDFDictionaryApplyFunction(dict: CGPDFDictionaryRef, function: CGPDFDictionaryApplierFunction, info: ?*anyopaque) void; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGPDFDictionary.h:116:16: warning: unsupported type: 'BlockPointer'
pub const CGPDFDictionaryApplierBlock = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGPDFDictionary.h:116:16
pub extern fn CGPDFDictionaryApplyBlock(dict: CGPDFDictionaryRef, block: CGPDFDictionaryApplierBlock, info: ?*anyopaque) void;
pub const CGPDFBox = i32;
pub const kCGPDFMediaBox: c_int = 0;
pub const kCGPDFCropBox: c_int = 1;
pub const kCGPDFBleedBox: c_int = 2;
pub const kCGPDFTrimBox: c_int = 3;
pub const kCGPDFArtBox: c_int = 4;
const enum_unnamed_1366 = c_uint;
pub extern fn CGPDFPageRetain(page: CGPDFPageRef) CGPDFPageRef;
pub extern fn CGPDFPageRelease(page: CGPDFPageRef) void;
pub extern fn CGPDFPageGetDocument(page: CGPDFPageRef) CGPDFDocumentRef;
pub extern fn CGPDFPageGetPageNumber(page: CGPDFPageRef) usize;
pub extern fn CGPDFPageGetBoxRect(page: CGPDFPageRef, box: CGPDFBox) CGRect;
pub extern fn CGPDFPageGetRotationAngle(page: CGPDFPageRef) c_int;
pub extern fn CGPDFPageGetDrawingTransform(page: CGPDFPageRef, box: CGPDFBox, rect: CGRect, rotate: c_int, preserveAspectRatio: bool) CGAffineTransform;
pub extern fn CGPDFPageGetDictionary(page: CGPDFPageRef) CGPDFDictionaryRef;
pub extern fn CGPDFPageGetTypeID() CFTypeID;
pub const CGPDFAccessPermissions = u32;
pub const kCGPDFAllowsLowQualityPrinting: c_int = 1;
pub const kCGPDFAllowsHighQualityPrinting: c_int = 2;
pub const kCGPDFAllowsDocumentChanges: c_int = 4;
pub const kCGPDFAllowsDocumentAssembly: c_int = 8;
pub const kCGPDFAllowsContentCopying: c_int = 16;
pub const kCGPDFAllowsContentAccessibility: c_int = 32;
pub const kCGPDFAllowsCommenting: c_int = 64;
pub const kCGPDFAllowsFormFieldEntry: c_int = 128;
const enum_unnamed_1367 = c_uint;
pub extern const kCGPDFOutlineTitle: CFStringRef;
pub extern const kCGPDFOutlineChildren: CFStringRef;
pub extern const kCGPDFOutlineDestination: CFStringRef;
pub extern const kCGPDFOutlineDestinationRect: CFStringRef;
pub extern fn CGPDFDocumentCreateWithProvider(provider: CGDataProviderRef) CGPDFDocumentRef;
pub extern fn CGPDFDocumentCreateWithURL(url: CFURLRef) CGPDFDocumentRef;
pub extern fn CGPDFDocumentRetain(document: CGPDFDocumentRef) CGPDFDocumentRef;
pub extern fn CGPDFDocumentRelease(document: CGPDFDocumentRef) void;
pub extern fn CGPDFDocumentGetVersion(document: CGPDFDocumentRef, majorVersion: [*c]c_int, minorVersion: [*c]c_int) void;
pub extern fn CGPDFDocumentIsEncrypted(document: CGPDFDocumentRef) bool;
pub extern fn CGPDFDocumentUnlockWithPassword(document: CGPDFDocumentRef, password: [*c]const u8) bool;
pub extern fn CGPDFDocumentIsUnlocked(document: CGPDFDocumentRef) bool;
pub extern fn CGPDFDocumentAllowsPrinting(document: CGPDFDocumentRef) bool;
pub extern fn CGPDFDocumentAllowsCopying(document: CGPDFDocumentRef) bool;
pub extern fn CGPDFDocumentGetNumberOfPages(document: CGPDFDocumentRef) usize;
pub extern fn CGPDFDocumentGetPage(document: CGPDFDocumentRef, pageNumber: usize) CGPDFPageRef;
pub extern fn CGPDFDocumentGetCatalog(document: CGPDFDocumentRef) CGPDFDictionaryRef;
pub extern fn CGPDFDocumentGetInfo(document: CGPDFDocumentRef) CGPDFDictionaryRef;
pub extern fn CGPDFDocumentGetID(document: CGPDFDocumentRef) CGPDFArrayRef;
pub extern fn CGPDFDocumentGetTypeID() CFTypeID;
pub extern fn CGPDFDocumentGetOutline(document: CGPDFDocumentRef) CFDictionaryRef;
pub extern fn CGPDFDocumentGetAccessPermissions(document: CGPDFDocumentRef) CGPDFAccessPermissions;
pub extern fn CGPDFDocumentGetMediaBox(document: CGPDFDocumentRef, page: c_int) CGRect;
pub extern fn CGPDFDocumentGetCropBox(document: CGPDFDocumentRef, page: c_int) CGRect;
pub extern fn CGPDFDocumentGetBleedBox(document: CGPDFDocumentRef, page: c_int) CGRect;
pub extern fn CGPDFDocumentGetTrimBox(document: CGPDFDocumentRef, page: c_int) CGRect;
pub extern fn CGPDFDocumentGetArtBox(document: CGPDFDocumentRef, page: c_int) CGRect;
pub extern fn CGPDFDocumentGetRotationAngle(document: CGPDFDocumentRef, page: c_int) c_int;
pub const struct_CGShading = opaque {};
pub const CGShadingRef = ?*struct_CGShading;
pub const struct_CGFunction = opaque {};
pub const CGFunctionRef = ?*struct_CGFunction;
pub const CGFunctionEvaluateCallback = ?*const fn (?*anyopaque, [*c]const CGFloat, [*c]CGFloat) callconv(.C) void;
pub const CGFunctionReleaseInfoCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const struct_CGFunctionCallbacks = extern struct {
    version: c_uint,
    evaluate: CGFunctionEvaluateCallback,
    releaseInfo: CGFunctionReleaseInfoCallback,
};
pub const CGFunctionCallbacks = struct_CGFunctionCallbacks;
pub extern fn CGFunctionGetTypeID() CFTypeID;
pub extern fn CGFunctionCreate(info: ?*anyopaque, domainDimension: usize, domain: [*c]const CGFloat, rangeDimension: usize, range: [*c]const CGFloat, callbacks: [*c]const CGFunctionCallbacks) CGFunctionRef;
pub extern fn CGFunctionRetain(function: CGFunctionRef) CGFunctionRef;
pub extern fn CGFunctionRelease(function: CGFunctionRef) void;
pub extern fn CGShadingGetTypeID() CFTypeID;
pub extern fn CGShadingCreateAxial(space: CGColorSpaceRef, start: CGPoint, end: CGPoint, function: CGFunctionRef, extendStart: bool, extendEnd: bool) CGShadingRef;
pub extern fn CGShadingCreateRadial(space: CGColorSpaceRef, start: CGPoint, startRadius: CGFloat, end: CGPoint, endRadius: CGFloat, function: CGFunctionRef, extendStart: bool, extendEnd: bool) CGShadingRef;
pub extern fn CGShadingRetain(shading: CGShadingRef) CGShadingRef;
pub extern fn CGShadingRelease(shading: CGShadingRef) void;
pub const CGPathDrawingMode = i32;
pub const kCGPathFill: c_int = 0;
pub const kCGPathEOFill: c_int = 1;
pub const kCGPathStroke: c_int = 2;
pub const kCGPathFillStroke: c_int = 3;
pub const kCGPathEOFillStroke: c_int = 4;
const enum_unnamed_1368 = c_uint;
pub const CGTextDrawingMode = i32;
pub const kCGTextFill: c_int = 0;
pub const kCGTextStroke: c_int = 1;
pub const kCGTextFillStroke: c_int = 2;
pub const kCGTextInvisible: c_int = 3;
pub const kCGTextFillClip: c_int = 4;
pub const kCGTextStrokeClip: c_int = 5;
pub const kCGTextFillStrokeClip: c_int = 6;
pub const kCGTextClip: c_int = 7;
const enum_unnamed_1369 = c_uint;
pub const CGTextEncoding = i32;
pub const kCGEncodingFontSpecific: c_int = 0;
pub const kCGEncodingMacRoman: c_int = 1;
const enum_unnamed_1370 = c_uint;
pub const CGInterpolationQuality = i32;
pub const kCGInterpolationDefault: c_int = 0;
pub const kCGInterpolationNone: c_int = 1;
pub const kCGInterpolationLow: c_int = 2;
pub const kCGInterpolationMedium: c_int = 4;
pub const kCGInterpolationHigh: c_int = 3;
const enum_unnamed_1371 = c_uint;
pub const CGBlendMode = i32;
pub const kCGBlendModeNormal: c_int = 0;
pub const kCGBlendModeMultiply: c_int = 1;
pub const kCGBlendModeScreen: c_int = 2;
pub const kCGBlendModeOverlay: c_int = 3;
pub const kCGBlendModeDarken: c_int = 4;
pub const kCGBlendModeLighten: c_int = 5;
pub const kCGBlendModeColorDodge: c_int = 6;
pub const kCGBlendModeColorBurn: c_int = 7;
pub const kCGBlendModeSoftLight: c_int = 8;
pub const kCGBlendModeHardLight: c_int = 9;
pub const kCGBlendModeDifference: c_int = 10;
pub const kCGBlendModeExclusion: c_int = 11;
pub const kCGBlendModeHue: c_int = 12;
pub const kCGBlendModeSaturation: c_int = 13;
pub const kCGBlendModeColor: c_int = 14;
pub const kCGBlendModeLuminosity: c_int = 15;
pub const kCGBlendModeClear: c_int = 16;
pub const kCGBlendModeCopy: c_int = 17;
pub const kCGBlendModeSourceIn: c_int = 18;
pub const kCGBlendModeSourceOut: c_int = 19;
pub const kCGBlendModeSourceAtop: c_int = 20;
pub const kCGBlendModeDestinationOver: c_int = 21;
pub const kCGBlendModeDestinationIn: c_int = 22;
pub const kCGBlendModeDestinationOut: c_int = 23;
pub const kCGBlendModeDestinationAtop: c_int = 24;
pub const kCGBlendModeXOR: c_int = 25;
pub const kCGBlendModePlusDarker: c_int = 26;
pub const kCGBlendModePlusLighter: c_int = 27;
const enum_unnamed_1372 = c_uint;
pub extern fn CGContextGetTypeID() CFTypeID;
pub extern fn CGContextSaveGState(c: CGContextRef) void;
pub extern fn CGContextRestoreGState(c: CGContextRef) void;
pub extern fn CGContextScaleCTM(c: CGContextRef, sx: CGFloat, sy: CGFloat) void;
pub extern fn CGContextTranslateCTM(c: CGContextRef, tx: CGFloat, ty: CGFloat) void;
pub extern fn CGContextRotateCTM(c: CGContextRef, angle: CGFloat) void;
pub extern fn CGContextConcatCTM(c: CGContextRef, transform: CGAffineTransform) void;
pub extern fn CGContextGetCTM(c: CGContextRef) CGAffineTransform;
pub extern fn CGContextSetLineWidth(c: CGContextRef, width: CGFloat) void;
pub extern fn CGContextSetLineCap(c: CGContextRef, cap: CGLineCap) void;
pub extern fn CGContextSetLineJoin(c: CGContextRef, join: CGLineJoin) void;
pub extern fn CGContextSetMiterLimit(c: CGContextRef, limit: CGFloat) void;
pub extern fn CGContextSetLineDash(c: CGContextRef, phase: CGFloat, lengths: [*c]const CGFloat, count: usize) void;
pub extern fn CGContextSetFlatness(c: CGContextRef, flatness: CGFloat) void;
pub extern fn CGContextSetAlpha(c: CGContextRef, alpha: CGFloat) void;
pub extern fn CGContextSetBlendMode(c: CGContextRef, mode: CGBlendMode) void;
pub extern fn CGContextBeginPath(c: CGContextRef) void;
pub extern fn CGContextMoveToPoint(c: CGContextRef, x: CGFloat, y: CGFloat) void;
pub extern fn CGContextAddLineToPoint(c: CGContextRef, x: CGFloat, y: CGFloat) void;
pub extern fn CGContextAddCurveToPoint(c: CGContextRef, cp1x: CGFloat, cp1y: CGFloat, cp2x: CGFloat, cp2y: CGFloat, x: CGFloat, y: CGFloat) void;
pub extern fn CGContextAddQuadCurveToPoint(c: CGContextRef, cpx: CGFloat, cpy: CGFloat, x: CGFloat, y: CGFloat) void;
pub extern fn CGContextClosePath(c: CGContextRef) void;
pub extern fn CGContextAddRect(c: CGContextRef, rect: CGRect) void;
pub extern fn CGContextAddRects(c: CGContextRef, rects: [*c]const CGRect, count: usize) void;
pub extern fn CGContextAddLines(c: CGContextRef, points: [*c]const CGPoint, count: usize) void;
pub extern fn CGContextAddEllipseInRect(c: CGContextRef, rect: CGRect) void;
pub extern fn CGContextAddArc(c: CGContextRef, x: CGFloat, y: CGFloat, radius: CGFloat, startAngle: CGFloat, endAngle: CGFloat, clockwise: c_int) void;
pub extern fn CGContextAddArcToPoint(c: CGContextRef, x1: CGFloat, y1: CGFloat, x2: CGFloat, y2: CGFloat, radius: CGFloat) void;
pub extern fn CGContextAddPath(c: CGContextRef, path: CGPathRef) void;
pub extern fn CGContextReplacePathWithStrokedPath(c: CGContextRef) void;
pub extern fn CGContextIsPathEmpty(c: CGContextRef) bool;
pub extern fn CGContextGetPathCurrentPoint(c: CGContextRef) CGPoint;
pub extern fn CGContextGetPathBoundingBox(c: CGContextRef) CGRect;
pub extern fn CGContextCopyPath(c: CGContextRef) CGPathRef;
pub extern fn CGContextPathContainsPoint(c: CGContextRef, point: CGPoint, mode: CGPathDrawingMode) bool;
pub extern fn CGContextDrawPath(c: CGContextRef, mode: CGPathDrawingMode) void;
pub extern fn CGContextFillPath(c: CGContextRef) void;
pub extern fn CGContextEOFillPath(c: CGContextRef) void;
pub extern fn CGContextStrokePath(c: CGContextRef) void;
pub extern fn CGContextFillRect(c: CGContextRef, rect: CGRect) void;
pub extern fn CGContextFillRects(c: CGContextRef, rects: [*c]const CGRect, count: usize) void;
pub extern fn CGContextStrokeRect(c: CGContextRef, rect: CGRect) void;
pub extern fn CGContextStrokeRectWithWidth(c: CGContextRef, rect: CGRect, width: CGFloat) void;
pub extern fn CGContextClearRect(c: CGContextRef, rect: CGRect) void;
pub extern fn CGContextFillEllipseInRect(c: CGContextRef, rect: CGRect) void;
pub extern fn CGContextStrokeEllipseInRect(c: CGContextRef, rect: CGRect) void;
pub extern fn CGContextStrokeLineSegments(c: CGContextRef, points: [*c]const CGPoint, count: usize) void;
pub extern fn CGContextClip(c: CGContextRef) void;
pub extern fn CGContextEOClip(c: CGContextRef) void;
pub extern fn CGContextResetClip(c: CGContextRef) void;
pub extern fn CGContextClipToMask(c: CGContextRef, rect: CGRect, mask: CGImageRef) void;
pub extern fn CGContextGetClipBoundingBox(c: CGContextRef) CGRect;
pub extern fn CGContextClipToRect(c: CGContextRef, rect: CGRect) void;
pub extern fn CGContextClipToRects(c: CGContextRef, rects: [*c]const CGRect, count: usize) void;
pub extern fn CGContextSetFillColorWithColor(c: CGContextRef, color: CGColorRef) void;
pub extern fn CGContextSetStrokeColorWithColor(c: CGContextRef, color: CGColorRef) void;
pub extern fn CGContextSetFillColorSpace(c: CGContextRef, space: CGColorSpaceRef) void;
pub extern fn CGContextSetStrokeColorSpace(c: CGContextRef, space: CGColorSpaceRef) void;
pub extern fn CGContextSetFillColor(c: CGContextRef, components: [*c]const CGFloat) void;
pub extern fn CGContextSetStrokeColor(c: CGContextRef, components: [*c]const CGFloat) void;
pub extern fn CGContextSetFillPattern(c: CGContextRef, pattern: CGPatternRef, components: [*c]const CGFloat) void;
pub extern fn CGContextSetStrokePattern(c: CGContextRef, pattern: CGPatternRef, components: [*c]const CGFloat) void;
pub extern fn CGContextSetPatternPhase(c: CGContextRef, phase: CGSize) void;
pub extern fn CGContextSetGrayFillColor(c: CGContextRef, gray: CGFloat, alpha: CGFloat) void;
pub extern fn CGContextSetGrayStrokeColor(c: CGContextRef, gray: CGFloat, alpha: CGFloat) void;
pub extern fn CGContextSetRGBFillColor(c: CGContextRef, red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) void;
pub extern fn CGContextSetRGBStrokeColor(c: CGContextRef, red: CGFloat, green: CGFloat, blue: CGFloat, alpha: CGFloat) void;
pub extern fn CGContextSetCMYKFillColor(c: CGContextRef, cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat) void;
pub extern fn CGContextSetCMYKStrokeColor(c: CGContextRef, cyan: CGFloat, magenta: CGFloat, yellow: CGFloat, black: CGFloat, alpha: CGFloat) void;
pub extern fn CGContextSetRenderingIntent(c: CGContextRef, intent: CGColorRenderingIntent) void;
pub extern fn CGContextDrawImage(c: CGContextRef, rect: CGRect, image: CGImageRef) void;
pub extern fn CGContextDrawTiledImage(c: CGContextRef, rect: CGRect, image: CGImageRef) void;
pub extern fn CGContextGetInterpolationQuality(c: CGContextRef) CGInterpolationQuality;
pub extern fn CGContextSetInterpolationQuality(c: CGContextRef, quality: CGInterpolationQuality) void;
pub extern fn CGContextSetShadowWithColor(c: CGContextRef, offset: CGSize, blur: CGFloat, color: CGColorRef) void;
pub extern fn CGContextSetShadow(c: CGContextRef, offset: CGSize, blur: CGFloat) void;
pub extern fn CGContextDrawLinearGradient(c: CGContextRef, gradient: CGGradientRef, startPoint: CGPoint, endPoint: CGPoint, options: CGGradientDrawingOptions) void;
pub extern fn CGContextDrawRadialGradient(c: CGContextRef, gradient: CGGradientRef, startCenter: CGPoint, startRadius: CGFloat, endCenter: CGPoint, endRadius: CGFloat, options: CGGradientDrawingOptions) void;
pub extern fn CGContextDrawShading(c: CGContextRef, shading: CGShadingRef) void;
pub extern fn CGContextSetCharacterSpacing(c: CGContextRef, spacing: CGFloat) void;
pub extern fn CGContextSetTextPosition(c: CGContextRef, x: CGFloat, y: CGFloat) void;
pub extern fn CGContextGetTextPosition(c: CGContextRef) CGPoint;
pub extern fn CGContextSetTextMatrix(c: CGContextRef, t: CGAffineTransform) void;
pub extern fn CGContextGetTextMatrix(c: CGContextRef) CGAffineTransform;
pub extern fn CGContextSetTextDrawingMode(c: CGContextRef, mode: CGTextDrawingMode) void;
pub extern fn CGContextSetFont(c: CGContextRef, font: CGFontRef) void;
pub extern fn CGContextSetFontSize(c: CGContextRef, size: CGFloat) void;
pub extern fn CGContextShowGlyphsAtPositions(c: CGContextRef, glyphs: [*c]const CGGlyph, Lpositions: [*c]const CGPoint, count: usize) void;
pub extern fn CGContextDrawPDFPage(c: CGContextRef, page: CGPDFPageRef) void;
pub extern fn CGContextBeginPage(c: CGContextRef, mediaBox: [*c]const CGRect) void;
pub extern fn CGContextEndPage(c: CGContextRef) void;
pub extern fn CGContextRetain(c: CGContextRef) CGContextRef;
pub extern fn CGContextRelease(c: CGContextRef) void;
pub extern fn CGContextFlush(c: CGContextRef) void;
pub extern fn CGContextSynchronize(c: CGContextRef) void;
pub extern fn CGContextSetShouldAntialias(c: CGContextRef, shouldAntialias: bool) void;
pub extern fn CGContextSetAllowsAntialiasing(c: CGContextRef, allowsAntialiasing: bool) void;
pub extern fn CGContextSetShouldSmoothFonts(c: CGContextRef, shouldSmoothFonts: bool) void;
pub extern fn CGContextSetAllowsFontSmoothing(c: CGContextRef, allowsFontSmoothing: bool) void;
pub extern fn CGContextSetShouldSubpixelPositionFonts(c: CGContextRef, shouldSubpixelPositionFonts: bool) void;
pub extern fn CGContextSetAllowsFontSubpixelPositioning(c: CGContextRef, allowsFontSubpixelPositioning: bool) void;
pub extern fn CGContextSetShouldSubpixelQuantizeFonts(c: CGContextRef, shouldSubpixelQuantizeFonts: bool) void;
pub extern fn CGContextSetAllowsFontSubpixelQuantization(c: CGContextRef, allowsFontSubpixelQuantization: bool) void;
pub extern fn CGContextBeginTransparencyLayer(c: CGContextRef, auxiliaryInfo: CFDictionaryRef) void;
pub extern fn CGContextBeginTransparencyLayerWithRect(c: CGContextRef, rect: CGRect, auxInfo: CFDictionaryRef) void;
pub extern fn CGContextEndTransparencyLayer(c: CGContextRef) void;
pub extern fn CGContextGetUserSpaceToDeviceSpaceTransform(c: CGContextRef) CGAffineTransform;
pub extern fn CGContextConvertPointToDeviceSpace(c: CGContextRef, point: CGPoint) CGPoint;
pub extern fn CGContextConvertPointToUserSpace(c: CGContextRef, point: CGPoint) CGPoint;
pub extern fn CGContextConvertSizeToDeviceSpace(c: CGContextRef, size: CGSize) CGSize;
pub extern fn CGContextConvertSizeToUserSpace(c: CGContextRef, size: CGSize) CGSize;
pub extern fn CGContextConvertRectToDeviceSpace(c: CGContextRef, rect: CGRect) CGRect;
pub extern fn CGContextConvertRectToUserSpace(c: CGContextRef, rect: CGRect) CGRect;
pub extern fn CGContextSelectFont(c: CGContextRef, name: [*c]const u8, size: CGFloat, textEncoding: CGTextEncoding) void;
pub extern fn CGContextShowText(c: CGContextRef, string: [*c]const u8, length: usize) void;
pub extern fn CGContextShowTextAtPoint(c: CGContextRef, x: CGFloat, y: CGFloat, string: [*c]const u8, length: usize) void;
pub extern fn CGContextShowGlyphs(c: CGContextRef, g: [*c]const CGGlyph, count: usize) void;
pub extern fn CGContextShowGlyphsAtPoint(c: CGContextRef, x: CGFloat, y: CGFloat, glyphs: [*c]const CGGlyph, count: usize) void;
pub extern fn CGContextShowGlyphsWithAdvances(c: CGContextRef, glyphs: [*c]const CGGlyph, advances: [*c]const CGSize, count: usize) void;
pub extern fn CGContextDrawPDFDocument(c: CGContextRef, rect: CGRect, document: CGPDFDocumentRef, page: c_int) void;
pub const CGBitmapContextReleaseDataCallback = ?*const fn (?*anyopaque, ?*anyopaque) callconv(.C) void;
pub extern fn CGBitmapContextCreateWithData(data: ?*anyopaque, width: usize, height: usize, bitsPerComponent: usize, bytesPerRow: usize, space: CGColorSpaceRef, bitmapInfo: u32, releaseCallback: CGBitmapContextReleaseDataCallback, releaseInfo: ?*anyopaque) CGContextRef;
pub extern fn CGBitmapContextCreate(data: ?*anyopaque, width: usize, height: usize, bitsPerComponent: usize, bytesPerRow: usize, space: CGColorSpaceRef, bitmapInfo: u32) CGContextRef;
pub extern fn CGBitmapContextGetData(context: CGContextRef) ?*anyopaque;
pub extern fn CGBitmapContextGetWidth(context: CGContextRef) usize;
pub extern fn CGBitmapContextGetHeight(context: CGContextRef) usize;
pub extern fn CGBitmapContextGetBitsPerComponent(context: CGContextRef) usize;
pub extern fn CGBitmapContextGetBitsPerPixel(context: CGContextRef) usize;
pub extern fn CGBitmapContextGetBytesPerRow(context: CGContextRef) usize;
pub extern fn CGBitmapContextGetColorSpace(context: CGContextRef) CGColorSpaceRef;
pub extern fn CGBitmapContextGetAlphaInfo(context: CGContextRef) CGImageAlphaInfo;
pub extern fn CGBitmapContextGetBitmapInfo(context: CGContextRef) CGBitmapInfo;
pub extern fn CGBitmapContextCreateImage(context: CGContextRef) CGImageRef;
pub const struct_CGColorConversionInfo = opaque {};
pub const CGColorConversionInfoRef = ?*const struct_CGColorConversionInfo;
pub extern fn CGColorConversionInfoGetTypeID() CFTypeID;
pub const CGColorConversionInfoTransformType = u32;
pub const kCGColorConversionTransformFromSpace: c_int = 0;
pub const kCGColorConversionTransformToSpace: c_int = 1;
pub const kCGColorConversionTransformApplySpace: c_int = 2;
const enum_unnamed_1373 = c_uint;
pub extern fn CGColorConversionInfoCreate(src: CGColorSpaceRef, dst: CGColorSpaceRef) CGColorConversionInfoRef;
pub extern fn CGColorConversionInfoCreateWithOptions(src: CGColorSpaceRef, dst: CGColorSpaceRef, options: CFDictionaryRef) CGColorConversionInfoRef;
pub extern fn CGColorConversionInfoCreateFromList(options: CFDictionaryRef, CGColorSpaceRef, CGColorConversionInfoTransformType, CGColorRenderingIntent, ...) CGColorConversionInfoRef;
pub extern fn CGColorConversionInfoCreateFromListWithArguments(options: CFDictionaryRef, CGColorSpaceRef, CGColorConversionInfoTransformType, CGColorRenderingIntent, va_list) CGColorConversionInfoRef;
pub extern const kCGColorConversionBlackPointCompensation: CFStringRef;
pub extern const kCGColorConversionTRCSize: CFStringRef;
pub const CGColorDataFormat = extern struct {
    version: u32,
    colorspace_info: CFTypeRef,
    bitmap_info: CGBitmapInfo,
    bits_per_component: usize,
    bytes_per_row: usize,
    intent: CGColorRenderingIntent,
    decode: [*c]CGFloat,
};
pub extern fn CGConvertColorDataWithFormat(width: usize, height: usize, dst_data: ?*anyopaque, dst_format: CGColorDataFormat, src_data: ?*anyopaque, src_format: CGColorDataFormat, options: CFDictionaryRef) bool;
pub const struct_CGDataConsumer = opaque {};
pub const CGDataConsumerRef = ?*struct_CGDataConsumer;
pub const CGDataConsumerPutBytesCallback = ?*const fn (?*anyopaque, ?*const anyopaque, usize) callconv(.C) usize;
pub const CGDataConsumerReleaseInfoCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const struct_CGDataConsumerCallbacks = extern struct {
    putBytes: CGDataConsumerPutBytesCallback,
    releaseConsumer: CGDataConsumerReleaseInfoCallback,
};
pub const CGDataConsumerCallbacks = struct_CGDataConsumerCallbacks;
pub extern fn CGDataConsumerGetTypeID() CFTypeID;
pub extern fn CGDataConsumerCreate(info: ?*anyopaque, cbks: [*c]const CGDataConsumerCallbacks) CGDataConsumerRef;
pub extern fn CGDataConsumerCreateWithURL(url: CFURLRef) CGDataConsumerRef;
pub extern fn CGDataConsumerCreateWithCFData(data: CFMutableDataRef) CGDataConsumerRef;
pub extern fn CGDataConsumerRetain(consumer: CGDataConsumerRef) CGDataConsumerRef;
pub extern fn CGDataConsumerRelease(consumer: CGDataConsumerRef) void;
pub const CGError = i32;
pub const kCGErrorSuccess: c_int = 0;
pub const kCGErrorFailure: c_int = 1000;
pub const kCGErrorIllegalArgument: c_int = 1001;
pub const kCGErrorInvalidConnection: c_int = 1002;
pub const kCGErrorInvalidContext: c_int = 1003;
pub const kCGErrorCannotComplete: c_int = 1004;
pub const kCGErrorNotImplemented: c_int = 1006;
pub const kCGErrorRangeCheck: c_int = 1007;
pub const kCGErrorTypeCheck: c_int = 1008;
pub const kCGErrorInvalidOperation: c_int = 1010;
pub const kCGErrorNoneAvailable: c_int = 1011;
const enum_unnamed_1374 = c_uint;
pub const CGErrorCallback = ?*const fn () callconv(.C) void;
pub extern fn CGErrorSetCallback(callback: CGErrorCallback) void;
pub const struct_CGLayer = opaque {};
pub const CGLayerRef = ?*struct_CGLayer;
pub extern fn CGLayerCreateWithContext(context: CGContextRef, size: CGSize, auxiliaryInfo: CFDictionaryRef) CGLayerRef;
pub extern fn CGLayerRetain(layer: CGLayerRef) CGLayerRef;
pub extern fn CGLayerRelease(layer: CGLayerRef) void;
pub extern fn CGLayerGetSize(layer: CGLayerRef) CGSize;
pub extern fn CGLayerGetContext(layer: CGLayerRef) CGContextRef;
pub extern fn CGContextDrawLayerInRect(context: CGContextRef, rect: CGRect, layer: CGLayerRef) void;
pub extern fn CGContextDrawLayerAtPoint(context: CGContextRef, point: CGPoint, layer: CGLayerRef) void;
pub extern fn CGLayerGetTypeID() CFTypeID;
pub const struct_CGPDFContentStream = opaque {};
pub const CGPDFContentStreamRef = ?*struct_CGPDFContentStream;
pub extern fn CGPDFContentStreamCreateWithPage(page: CGPDFPageRef) CGPDFContentStreamRef;
pub extern fn CGPDFContentStreamCreateWithStream(stream: CGPDFStreamRef, streamResources: CGPDFDictionaryRef, parent: CGPDFContentStreamRef) CGPDFContentStreamRef;
pub extern fn CGPDFContentStreamRetain(cs: CGPDFContentStreamRef) CGPDFContentStreamRef;
pub extern fn CGPDFContentStreamRelease(cs: CGPDFContentStreamRef) void;
pub extern fn CGPDFContentStreamGetStreams(cs: CGPDFContentStreamRef) CFArrayRef;
pub extern fn CGPDFContentStreamGetResource(cs: CGPDFContentStreamRef, category: [*c]const u8, name: [*c]const u8) CGPDFObjectRef;
pub extern fn CGPDFContextCreate(consumer: CGDataConsumerRef, mediaBox: [*c]const CGRect, auxiliaryInfo: CFDictionaryRef) CGContextRef;
pub extern fn CGPDFContextCreateWithURL(url: CFURLRef, mediaBox: [*c]const CGRect, auxiliaryInfo: CFDictionaryRef) CGContextRef;
pub extern fn CGPDFContextClose(context: CGContextRef) void;
pub extern fn CGPDFContextBeginPage(context: CGContextRef, pageInfo: CFDictionaryRef) void;
pub extern fn CGPDFContextEndPage(context: CGContextRef) void;
pub extern fn CGPDFContextAddDocumentMetadata(context: CGContextRef, metadata: CFDataRef) void;
pub extern fn CGPDFContextSetURLForRect(context: CGContextRef, url: CFURLRef, rect: CGRect) void;
pub extern fn CGPDFContextAddDestinationAtPoint(context: CGContextRef, name: CFStringRef, point: CGPoint) void;
pub extern fn CGPDFContextSetDestinationForRect(context: CGContextRef, name: CFStringRef, rect: CGRect) void;
pub extern const kCGPDFContextMediaBox: CFStringRef;
pub extern const kCGPDFContextCropBox: CFStringRef;
pub extern const kCGPDFContextBleedBox: CFStringRef;
pub extern const kCGPDFContextTrimBox: CFStringRef;
pub extern const kCGPDFContextArtBox: CFStringRef;
pub extern const kCGPDFContextTitle: CFStringRef;
pub extern const kCGPDFContextAuthor: CFStringRef;
pub extern const kCGPDFContextSubject: CFStringRef;
pub extern const kCGPDFContextKeywords: CFStringRef;
pub extern const kCGPDFContextCreator: CFStringRef;
pub extern const kCGPDFContextOwnerPassword: CFStringRef;
pub extern const kCGPDFContextUserPassword: CFStringRef;
pub extern const kCGPDFContextEncryptionKeyLength: CFStringRef;
pub extern const kCGPDFContextAllowsPrinting: CFStringRef;
pub extern const kCGPDFContextAllowsCopying: CFStringRef;
pub extern const kCGPDFContextOutputIntent: CFStringRef;
pub extern const kCGPDFXOutputIntentSubtype: CFStringRef;
pub extern const kCGPDFXOutputConditionIdentifier: CFStringRef;
pub extern const kCGPDFXOutputCondition: CFStringRef;
pub extern const kCGPDFXRegistryName: CFStringRef;
pub extern const kCGPDFXInfo: CFStringRef;
pub extern const kCGPDFXDestinationOutputProfile: CFStringRef;
pub extern const kCGPDFContextOutputIntents: CFStringRef;
pub extern const kCGPDFContextAccessPermissions: CFStringRef;
pub extern fn CGPDFContextSetOutline(context: CGContextRef, outline: CFDictionaryRef) void;
pub extern const kCGPDFContextCreateLinearizedPDF: CFStringRef;
pub extern const kCGPDFContextCreatePDFA: CFStringRef;
pub const CGPDFTagType = i32;
pub const CGPDFTagTypeDocument: c_int = 100;
pub const CGPDFTagTypePart: c_int = 101;
pub const CGPDFTagTypeArt: c_int = 102;
pub const CGPDFTagTypeSection: c_int = 103;
pub const CGPDFTagTypeDiv: c_int = 104;
pub const CGPDFTagTypeBlockQuote: c_int = 105;
pub const CGPDFTagTypeCaption: c_int = 106;
pub const CGPDFTagTypeTOC: c_int = 107;
pub const CGPDFTagTypeTOCI: c_int = 108;
pub const CGPDFTagTypeIndex: c_int = 109;
pub const CGPDFTagTypeNonStructure: c_int = 110;
pub const CGPDFTagTypePrivate: c_int = 111;
pub const CGPDFTagTypeParagraph: c_int = 200;
pub const CGPDFTagTypeHeader: c_int = 201;
pub const CGPDFTagTypeHeader1: c_int = 202;
pub const CGPDFTagTypeHeader2: c_int = 203;
pub const CGPDFTagTypeHeader3: c_int = 204;
pub const CGPDFTagTypeHeader4: c_int = 205;
pub const CGPDFTagTypeHeader5: c_int = 206;
pub const CGPDFTagTypeHeader6: c_int = 207;
pub const CGPDFTagTypeList: c_int = 300;
pub const CGPDFTagTypeListItem: c_int = 301;
pub const CGPDFTagTypeLabel: c_int = 302;
pub const CGPDFTagTypeListBody: c_int = 303;
pub const CGPDFTagTypeTable: c_int = 400;
pub const CGPDFTagTypeTableRow: c_int = 401;
pub const CGPDFTagTypeTableHeaderCell: c_int = 402;
pub const CGPDFTagTypeTableDataCell: c_int = 403;
pub const CGPDFTagTypeTableHeader: c_int = 404;
pub const CGPDFTagTypeTableBody: c_int = 405;
pub const CGPDFTagTypeTableFooter: c_int = 406;
pub const CGPDFTagTypeSpan: c_int = 500;
pub const CGPDFTagTypeQuote: c_int = 501;
pub const CGPDFTagTypeNote: c_int = 502;
pub const CGPDFTagTypeReference: c_int = 503;
pub const CGPDFTagTypeBibliography: c_int = 504;
pub const CGPDFTagTypeCode: c_int = 505;
pub const CGPDFTagTypeLink: c_int = 506;
pub const CGPDFTagTypeAnnotation: c_int = 507;
pub const CGPDFTagTypeRuby: c_int = 600;
pub const CGPDFTagTypeRubyBaseText: c_int = 601;
pub const CGPDFTagTypeRubyAnnotationText: c_int = 602;
pub const CGPDFTagTypeRubyPunctuation: c_int = 603;
pub const CGPDFTagTypeWarichu: c_int = 604;
pub const CGPDFTagTypeWarichuText: c_int = 605;
pub const CGPDFTagTypeWarichuPunctiation: c_int = 606;
pub const CGPDFTagTypeFigure: c_int = 700;
pub const CGPDFTagTypeFormula: c_int = 701;
pub const CGPDFTagTypeForm: c_int = 702;
const enum_unnamed_1375 = c_uint;
pub extern fn CGPDFTagTypeGetName(tagType: CGPDFTagType) [*c]const u8;
pub const CGPDFTagProperty = CFStringRef;
pub extern const kCGPDFTagPropertyActualText: CGPDFTagProperty;
pub extern const kCGPDFTagPropertyAlternativeText: CGPDFTagProperty;
pub extern const kCGPDFTagPropertyTitleText: CGPDFTagProperty;
pub extern const kCGPDFTagPropertyLanguageText: CGPDFTagProperty;
pub extern fn CGPDFContextBeginTag(context: CGContextRef, tagType: CGPDFTagType, tagProperties: CFDictionaryRef) void;
pub extern fn CGPDFContextEndTag(context: CGContextRef) void;
pub const struct_CGPDFOperatorTable = opaque {};
pub const CGPDFOperatorTableRef = ?*struct_CGPDFOperatorTable;
pub const struct_CGPDFScanner = opaque {};
pub const CGPDFScannerRef = ?*struct_CGPDFScanner;
pub extern fn CGPDFScannerCreate(cs: CGPDFContentStreamRef, table: CGPDFOperatorTableRef, info: ?*anyopaque) CGPDFScannerRef;
pub extern fn CGPDFScannerRetain(scanner: CGPDFScannerRef) CGPDFScannerRef;
pub extern fn CGPDFScannerRelease(scanner: CGPDFScannerRef) void;
pub extern fn CGPDFScannerScan(scanner: CGPDFScannerRef) bool;
pub extern fn CGPDFScannerGetContentStream(scanner: CGPDFScannerRef) CGPDFContentStreamRef;
pub extern fn CGPDFScannerPopObject(scanner: CGPDFScannerRef, value: [*c]CGPDFObjectRef) bool;
pub extern fn CGPDFScannerPopBoolean(scanner: CGPDFScannerRef, value: [*c]CGPDFBoolean) bool;
pub extern fn CGPDFScannerPopInteger(scanner: CGPDFScannerRef, value: [*c]CGPDFInteger) bool;
pub extern fn CGPDFScannerPopNumber(scanner: CGPDFScannerRef, value: [*c]CGPDFReal) bool;
pub extern fn CGPDFScannerPopName(scanner: CGPDFScannerRef, value: [*c][*c]const u8) bool;
pub extern fn CGPDFScannerPopString(scanner: CGPDFScannerRef, value: [*c]CGPDFStringRef) bool;
pub extern fn CGPDFScannerPopArray(scanner: CGPDFScannerRef, value: [*c]CGPDFArrayRef) bool;
pub extern fn CGPDFScannerPopDictionary(scanner: CGPDFScannerRef, value: [*c]CGPDFDictionaryRef) bool;
pub extern fn CGPDFScannerPopStream(scanner: CGPDFScannerRef, value: [*c]CGPDFStreamRef) bool;
pub const CGPDFOperatorCallback = ?*const fn (CGPDFScannerRef, ?*anyopaque) callconv(.C) void;
pub extern fn CGPDFOperatorTableCreate() CGPDFOperatorTableRef;
pub extern fn CGPDFOperatorTableRetain(table: CGPDFOperatorTableRef) CGPDFOperatorTableRef;
pub extern fn CGPDFOperatorTableRelease(table: CGPDFOperatorTableRef) void;
pub extern fn CGPDFOperatorTableSetCallback(table: CGPDFOperatorTableRef, name: [*c]const u8, callback: CGPDFOperatorCallback) void;
pub const CGWindowID = u32;
pub const CGWindowSharingType = u32;
pub const kCGWindowSharingNone: c_int = 0;
pub const kCGWindowSharingReadOnly: c_int = 1;
pub const kCGWindowSharingReadWrite: c_int = 2;
const enum_unnamed_1376 = c_uint;
pub const CGWindowBackingType = u32;
pub const kCGBackingStoreRetained: c_int = 0;
pub const kCGBackingStoreNonretained: c_int = 1;
pub const kCGBackingStoreBuffered: c_int = 2;
const enum_unnamed_1377 = c_uint;
pub extern const kCGWindowNumber: CFStringRef;
pub extern const kCGWindowStoreType: CFStringRef;
pub extern const kCGWindowLayer: CFStringRef;
pub extern const kCGWindowBounds: CFStringRef;
pub extern const kCGWindowSharingState: CFStringRef;
pub extern const kCGWindowAlpha: CFStringRef;
pub extern const kCGWindowOwnerPID: CFStringRef;
pub extern const kCGWindowMemoryUsage: CFStringRef;
pub extern const kCGWindowWorkspace: CFStringRef;
pub extern const kCGWindowOwnerName: CFStringRef;
pub extern const kCGWindowName: CFStringRef;
pub extern const kCGWindowIsOnscreen: CFStringRef;
pub extern const kCGWindowBackingLocationVideoMemory: CFStringRef;
pub const CGWindowListOption = u32;
pub const kCGWindowListOptionAll: c_int = 0;
pub const kCGWindowListOptionOnScreenOnly: c_int = 1;
pub const kCGWindowListOptionOnScreenAboveWindow: c_int = 2;
pub const kCGWindowListOptionOnScreenBelowWindow: c_int = 4;
pub const kCGWindowListOptionIncludingWindow: c_int = 8;
pub const kCGWindowListExcludeDesktopElements: c_int = 16;
const enum_unnamed_1378 = c_uint;
pub extern fn CGWindowListCopyWindowInfo(option: CGWindowListOption, relativeToWindow: CGWindowID) CFArrayRef;
pub extern fn CGWindowListCreate(option: CGWindowListOption, relativeToWindow: CGWindowID) CFArrayRef;
pub extern fn CGWindowListCreateDescriptionFromArray(windowArray: CFArrayRef) CFArrayRef;
pub const CGWindowImageOption = u32;
pub const kCGWindowImageDefault: c_int = 0;
pub const kCGWindowImageBoundsIgnoreFraming: c_int = 1;
pub const kCGWindowImageShouldBeOpaque: c_int = 2;
pub const kCGWindowImageOnlyShadows: c_int = 4;
pub const kCGWindowImageBestResolution: c_int = 8;
pub const kCGWindowImageNominalResolution: c_int = 16;
const enum_unnamed_1379 = c_uint;
pub extern fn CGWindowListCreateImage(screenBounds: CGRect, listOption: CGWindowListOption, windowID: CGWindowID, imageOption: CGWindowImageOption) CGImageRef;
pub extern fn CGWindowListCreateImageFromArray(screenBounds: CGRect, windowArray: CFArrayRef, imageOption: CGWindowImageOption) CGImageRef;
pub extern fn CGPreflightScreenCaptureAccess() bool;
pub extern fn CGRequestScreenCaptureAccess() bool;
pub const CGWindowLevelKey = i32;
pub const kCGBaseWindowLevelKey: c_int = 0;
pub const kCGMinimumWindowLevelKey: c_int = 1;
pub const kCGDesktopWindowLevelKey: c_int = 2;
pub const kCGBackstopMenuLevelKey: c_int = 3;
pub const kCGNormalWindowLevelKey: c_int = 4;
pub const kCGFloatingWindowLevelKey: c_int = 5;
pub const kCGTornOffMenuWindowLevelKey: c_int = 6;
pub const kCGDockWindowLevelKey: c_int = 7;
pub const kCGMainMenuWindowLevelKey: c_int = 8;
pub const kCGStatusWindowLevelKey: c_int = 9;
pub const kCGModalPanelWindowLevelKey: c_int = 10;
pub const kCGPopUpMenuWindowLevelKey: c_int = 11;
pub const kCGDraggingWindowLevelKey: c_int = 12;
pub const kCGScreenSaverWindowLevelKey: c_int = 13;
pub const kCGMaximumWindowLevelKey: c_int = 14;
pub const kCGOverlayWindowLevelKey: c_int = 15;
pub const kCGHelpWindowLevelKey: c_int = 16;
pub const kCGUtilityWindowLevelKey: c_int = 17;
pub const kCGDesktopIconWindowLevelKey: c_int = 18;
pub const kCGCursorWindowLevelKey: c_int = 19;
pub const kCGAssistiveTechHighWindowLevelKey: c_int = 20;
pub const kCGNumberOfWindowLevelKeys: c_int = 21;
const enum_unnamed_1380 = c_uint;
pub const CGWindowLevel = i32;
pub extern fn CGWindowLevelForKey(key: CGWindowLevelKey) CGWindowLevel;
pub const CGDirectDisplayID = u32;
pub const CGOpenGLDisplayMask = u32;
pub const CGRefreshRate = f64;
pub const struct_CGDisplayMode = opaque {};
pub const CGDisplayModeRef = ?*struct_CGDisplayMode;
pub extern fn CGMainDisplayID() CGDirectDisplayID;
pub extern fn CGGetDisplaysWithPoint(point: CGPoint, maxDisplays: u32, displays: [*c]CGDirectDisplayID, matchingDisplayCount: [*c]u32) CGError;
pub extern fn CGGetDisplaysWithRect(rect: CGRect, maxDisplays: u32, displays: [*c]CGDirectDisplayID, matchingDisplayCount: [*c]u32) CGError;
pub extern fn CGGetDisplaysWithOpenGLDisplayMask(mask: CGOpenGLDisplayMask, maxDisplays: u32, displays: [*c]CGDirectDisplayID, matchingDisplayCount: [*c]u32) CGError;
pub extern fn CGGetActiveDisplayList(maxDisplays: u32, activeDisplays: [*c]CGDirectDisplayID, displayCount: [*c]u32) CGError;
pub extern fn CGGetOnlineDisplayList(maxDisplays: u32, onlineDisplays: [*c]CGDirectDisplayID, displayCount: [*c]u32) CGError;
pub extern fn CGDisplayIDToOpenGLDisplayMask(display: CGDirectDisplayID) CGOpenGLDisplayMask;
pub extern fn CGOpenGLDisplayMaskToDisplayID(mask: CGOpenGLDisplayMask) CGDirectDisplayID;
pub extern fn CGDisplayBounds(display: CGDirectDisplayID) CGRect;
pub extern fn CGDisplayPixelsWide(display: CGDirectDisplayID) usize;
pub extern fn CGDisplayPixelsHigh(display: CGDirectDisplayID) usize;
pub extern fn CGDisplayCopyAllDisplayModes(display: CGDirectDisplayID, options: CFDictionaryRef) CFArrayRef;
pub extern const kCGDisplayShowDuplicateLowResolutionModes: CFStringRef;
pub extern fn CGDisplayCopyDisplayMode(display: CGDirectDisplayID) CGDisplayModeRef;
pub extern fn CGDisplaySetDisplayMode(display: CGDirectDisplayID, mode: CGDisplayModeRef, options: CFDictionaryRef) CGError;
pub extern fn CGDisplayModeGetWidth(mode: CGDisplayModeRef) usize;
pub extern fn CGDisplayModeGetHeight(mode: CGDisplayModeRef) usize;
pub extern fn CGDisplayModeCopyPixelEncoding(mode: CGDisplayModeRef) CFStringRef;
pub extern fn CGDisplayModeGetRefreshRate(mode: CGDisplayModeRef) f64;
pub extern fn CGDisplayModeGetIOFlags(mode: CGDisplayModeRef) u32;
pub extern fn CGDisplayModeGetIODisplayModeID(mode: CGDisplayModeRef) i32;
pub extern fn CGDisplayModeIsUsableForDesktopGUI(mode: CGDisplayModeRef) bool;
pub extern fn CGDisplayModeGetTypeID() CFTypeID;
pub extern fn CGDisplayModeRetain(mode: CGDisplayModeRef) CGDisplayModeRef;
pub extern fn CGDisplayModeRelease(mode: CGDisplayModeRef) void;
pub extern fn CGDisplayModeGetPixelWidth(mode: CGDisplayModeRef) usize;
pub extern fn CGDisplayModeGetPixelHeight(mode: CGDisplayModeRef) usize;
pub const CGGammaValue = f32;
pub extern fn CGSetDisplayTransferByFormula(display: CGDirectDisplayID, redMin: CGGammaValue, redMax: CGGammaValue, redGamma: CGGammaValue, greenMin: CGGammaValue, greenMax: CGGammaValue, greenGamma: CGGammaValue, blueMin: CGGammaValue, blueMax: CGGammaValue, blueGamma: CGGammaValue) CGError;
pub extern fn CGGetDisplayTransferByFormula(display: CGDirectDisplayID, redMin: [*c]CGGammaValue, redMax: [*c]CGGammaValue, redGamma: [*c]CGGammaValue, greenMin: [*c]CGGammaValue, greenMax: [*c]CGGammaValue, greenGamma: [*c]CGGammaValue, blueMin: [*c]CGGammaValue, blueMax: [*c]CGGammaValue, blueGamma: [*c]CGGammaValue) CGError;
pub extern fn CGDisplayGammaTableCapacity(display: CGDirectDisplayID) u32;
pub extern fn CGSetDisplayTransferByTable(display: CGDirectDisplayID, tableSize: u32, redTable: [*c]const CGGammaValue, greenTable: [*c]const CGGammaValue, blueTable: [*c]const CGGammaValue) CGError;
pub extern fn CGGetDisplayTransferByTable(display: CGDirectDisplayID, capacity: u32, redTable: [*c]CGGammaValue, greenTable: [*c]CGGammaValue, blueTable: [*c]CGGammaValue, sampleCount: [*c]u32) CGError;
pub extern fn CGSetDisplayTransferByByteTable(display: CGDirectDisplayID, tableSize: u32, redTable: [*c]const u8, greenTable: [*c]const u8, blueTable: [*c]const u8) CGError;
pub extern fn CGDisplayRestoreColorSyncSettings() void;
pub const CGCaptureOptions = u32;
pub const kCGCaptureNoOptions: c_int = 0;
pub const kCGCaptureNoFill: c_int = 1;
const enum_unnamed_1381 = c_uint;
pub extern fn CGDisplayIsCaptured(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayCapture(display: CGDirectDisplayID) CGError;
pub extern fn CGDisplayCaptureWithOptions(display: CGDirectDisplayID, options: CGCaptureOptions) CGError;
pub extern fn CGDisplayRelease(display: CGDirectDisplayID) CGError;
pub extern fn CGCaptureAllDisplays() CGError;
pub extern fn CGCaptureAllDisplaysWithOptions(options: CGCaptureOptions) CGError;
pub extern fn CGReleaseAllDisplays() CGError;
pub extern fn CGShieldingWindowID(display: CGDirectDisplayID) CGWindowID;
pub extern fn CGShieldingWindowLevel() CGWindowLevel;
pub extern fn CGDisplayCreateImage(displayID: CGDirectDisplayID) CGImageRef;
pub extern fn CGDisplayCreateImageForRect(display: CGDirectDisplayID, rect: CGRect) CGImageRef;
pub extern fn CGDisplayHideCursor(display: CGDirectDisplayID) CGError;
pub extern fn CGDisplayShowCursor(display: CGDirectDisplayID) CGError;
pub extern fn CGDisplayMoveCursorToPoint(display: CGDirectDisplayID, point: CGPoint) CGError;
pub extern fn CGGetLastMouseDelta(deltaX: [*c]i32, deltaY: [*c]i32) void;
pub extern fn CGDisplayGetDrawingContext(display: CGDirectDisplayID) CGContextRef;
pub const CGDisplayCount = u32;
pub const CGDisplayErr = CGError;
pub extern fn CGDisplayAvailableModes(dsp: CGDirectDisplayID) CFArrayRef;
pub extern fn CGDisplayBestModeForParameters(display: CGDirectDisplayID, bitsPerPixel: usize, width: usize, height: usize, exactMatch: [*c]boolean_t) CFDictionaryRef;
pub extern fn CGDisplayBestModeForParametersAndRefreshRate(display: CGDirectDisplayID, bitsPerPixel: usize, width: usize, height: usize, refreshRate: CGRefreshRate, exactMatch: [*c]boolean_t) CFDictionaryRef;
pub extern fn CGDisplayCurrentMode(display: CGDirectDisplayID) CFDictionaryRef;
pub extern fn CGDisplaySwitchToMode(display: CGDirectDisplayID, mode: CFDictionaryRef) CGError;
pub const struct_CGDeviceColor = extern struct {
    red: f32,
    green: f32,
    blue: f32,
};
pub const CGDeviceColor = struct_CGDeviceColor;
pub const struct__CGDisplayConfigRef = opaque {};
pub const CGDisplayConfigRef = ?*struct__CGDisplayConfigRef;
pub extern fn CGBeginDisplayConfiguration(config: [*c]CGDisplayConfigRef) CGError;
pub extern fn CGConfigureDisplayOrigin(config: CGDisplayConfigRef, display: CGDirectDisplayID, x: i32, y: i32) CGError;
pub extern fn CGConfigureDisplayWithDisplayMode(config: CGDisplayConfigRef, display: CGDirectDisplayID, mode: CGDisplayModeRef, options: CFDictionaryRef) CGError;
pub extern fn CGConfigureDisplayStereoOperation(config: CGDisplayConfigRef, display: CGDirectDisplayID, stereo: boolean_t, forceBlueLine: boolean_t) CGError;
pub extern fn CGConfigureDisplayMirrorOfDisplay(config: CGDisplayConfigRef, display: CGDirectDisplayID, master: CGDirectDisplayID) CGError;
pub extern fn CGCancelDisplayConfiguration(config: CGDisplayConfigRef) CGError;
pub const CGConfigureOption = u32;
pub const kCGConfigureForAppOnly: c_int = 0;
pub const kCGConfigureForSession: c_int = 1;
pub const kCGConfigurePermanently: c_int = 2;
const enum_unnamed_1382 = c_uint;
pub extern fn CGCompleteDisplayConfiguration(config: CGDisplayConfigRef, option: CGConfigureOption) CGError;
pub extern fn CGRestorePermanentDisplayConfiguration() void;
pub const CGDisplayChangeSummaryFlags = u32;
pub const kCGDisplayBeginConfigurationFlag: c_int = 1;
pub const kCGDisplayMovedFlag: c_int = 2;
pub const kCGDisplaySetMainFlag: c_int = 4;
pub const kCGDisplaySetModeFlag: c_int = 8;
pub const kCGDisplayAddFlag: c_int = 16;
pub const kCGDisplayRemoveFlag: c_int = 32;
pub const kCGDisplayEnabledFlag: c_int = 256;
pub const kCGDisplayDisabledFlag: c_int = 512;
pub const kCGDisplayMirrorFlag: c_int = 1024;
pub const kCGDisplayUnMirrorFlag: c_int = 2048;
pub const kCGDisplayDesktopShapeChangedFlag: c_int = 4096;
const enum_unnamed_1383 = c_uint;
pub const CGDisplayReconfigurationCallBack = ?*const fn (CGDirectDisplayID, CGDisplayChangeSummaryFlags, ?*anyopaque) callconv(.C) void;
pub extern fn CGDisplayRegisterReconfigurationCallback(callback: CGDisplayReconfigurationCallBack, userInfo: ?*anyopaque) CGError;
pub extern fn CGDisplayRemoveReconfigurationCallback(callback: CGDisplayReconfigurationCallBack, userInfo: ?*anyopaque) CGError;
pub extern fn CGDisplaySetStereoOperation(display: CGDirectDisplayID, stereo: boolean_t, forceBlueLine: boolean_t, option: CGConfigureOption) CGError;
pub extern fn CGDisplayIsActive(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayIsAsleep(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayIsOnline(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayIsMain(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayIsBuiltin(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayIsInMirrorSet(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayIsAlwaysInMirrorSet(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayIsInHWMirrorSet(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayMirrorsDisplay(display: CGDirectDisplayID) CGDirectDisplayID;
pub extern fn CGDisplayUsesOpenGLAcceleration(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayIsStereo(display: CGDirectDisplayID) boolean_t;
pub extern fn CGDisplayPrimaryDisplay(display: CGDirectDisplayID) CGDirectDisplayID;
pub extern fn CGDisplayUnitNumber(display: CGDirectDisplayID) u32;
pub extern fn CGDisplayVendorNumber(display: CGDirectDisplayID) u32;
pub extern fn CGDisplayModelNumber(display: CGDirectDisplayID) u32;
pub extern fn CGDisplaySerialNumber(display: CGDirectDisplayID) u32;
pub extern fn CGDisplayIOServicePort(display: CGDirectDisplayID) io_service_t;
pub extern fn CGDisplayScreenSize(display: CGDirectDisplayID) CGSize;
pub extern fn CGDisplayRotation(display: CGDirectDisplayID) f64;
pub extern fn CGDisplayCopyColorSpace(display: CGDirectDisplayID) CGColorSpaceRef;
pub extern fn CGConfigureDisplayMode(config: CGDisplayConfigRef, display: CGDirectDisplayID, mode: CFDictionaryRef) CGError;
pub const CGDisplayFadeReservationToken = u32;
pub const CGDisplayBlendFraction = f32;
pub const CGDisplayFadeInterval = f32;
pub extern fn CGConfigureDisplayFadeEffect(config: CGDisplayConfigRef, fadeOutSeconds: CGDisplayFadeInterval, fadeInSeconds: CGDisplayFadeInterval, fadeRed: f32, fadeGreen: f32, fadeBlue: f32) CGError;
pub const CGDisplayReservationInterval = f32;
pub extern fn CGAcquireDisplayFadeReservation(seconds: CGDisplayReservationInterval, token: [*c]CGDisplayFadeReservationToken) CGError;
pub extern fn CGReleaseDisplayFadeReservation(token: CGDisplayFadeReservationToken) CGError;
pub extern fn CGDisplayFade(token: CGDisplayFadeReservationToken, duration: CGDisplayFadeInterval, startBlend: CGDisplayBlendFraction, endBlend: CGDisplayBlendFraction, redBlend: f32, greenBlend: f32, blueBlend: f32, synchronous: boolean_t) CGError;
pub extern fn CGDisplayFadeOperationInProgress() boolean_t;
pub const struct_CGDisplayStream = opaque {};
pub const CGDisplayStreamRef = ?*struct_CGDisplayStream;
pub const struct_CGDisplayStreamUpdate = opaque {};
pub const CGDisplayStreamUpdateRef = ?*const struct_CGDisplayStreamUpdate;
pub const CGDisplayStreamUpdateRectType = i32;
pub const kCGDisplayStreamUpdateRefreshedRects: c_int = 0;
pub const kCGDisplayStreamUpdateMovedRects: c_int = 1;
pub const kCGDisplayStreamUpdateDirtyRects: c_int = 2;
pub const kCGDisplayStreamUpdateReducedDirtyRects: c_int = 3;
const enum_unnamed_1384 = c_uint;
pub const CGDisplayStreamFrameStatus = i32;
pub const kCGDisplayStreamFrameStatusFrameComplete: c_int = 0;
pub const kCGDisplayStreamFrameStatusFrameIdle: c_int = 1;
pub const kCGDisplayStreamFrameStatusFrameBlank: c_int = 2;
pub const kCGDisplayStreamFrameStatusStopped: c_int = 3;
const enum_unnamed_1385 = c_uint; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGDisplayStream.h:86:16: warning: unsupported type: 'BlockPointer'
pub const CGDisplayStreamFrameAvailableHandler = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGDisplayStream.h:86:16
pub extern fn CGDisplayStreamUpdateGetTypeID() CFTypeID;
pub extern fn CGDisplayStreamUpdateGetRects(updateRef: CGDisplayStreamUpdateRef, rectType: CGDisplayStreamUpdateRectType, rectCount: [*c]usize) [*c]const CGRect;
pub extern fn CGDisplayStreamUpdateCreateMergedUpdate(firstUpdate: CGDisplayStreamUpdateRef, secondUpdate: CGDisplayStreamUpdateRef) CGDisplayStreamUpdateRef;
pub extern fn CGDisplayStreamUpdateGetMovedRectsDelta(updateRef: CGDisplayStreamUpdateRef, dx: [*c]CGFloat, dy: [*c]CGFloat) void;
pub extern fn CGDisplayStreamUpdateGetDropCount(updateRef: CGDisplayStreamUpdateRef) usize;
pub extern const kCGDisplayStreamSourceRect: CFStringRef;
pub extern const kCGDisplayStreamDestinationRect: CFStringRef;
pub extern const kCGDisplayStreamPreserveAspectRatio: CFStringRef;
pub extern const kCGDisplayStreamColorSpace: CFStringRef;
pub extern const kCGDisplayStreamMinimumFrameTime: CFStringRef;
pub extern const kCGDisplayStreamShowCursor: CFStringRef;
pub extern const kCGDisplayStreamQueueDepth: CFStringRef;
pub extern const kCGDisplayStreamYCbCrMatrix: CFStringRef;
pub extern const kCGDisplayStreamYCbCrMatrix_ITU_R_709_2: CFStringRef;
pub extern const kCGDisplayStreamYCbCrMatrix_ITU_R_601_4: CFStringRef;
pub extern const kCGDisplayStreamYCbCrMatrix_SMPTE_240M_1995: CFStringRef;
pub extern fn CGDisplayStreamGetTypeID() CFTypeID;
pub extern fn CGDisplayStreamCreate(display: CGDirectDisplayID, outputWidth: usize, outputHeight: usize, pixelFormat: i32, properties: CFDictionaryRef, handler: CGDisplayStreamFrameAvailableHandler) CGDisplayStreamRef;
pub extern fn CGDisplayStreamCreateWithDispatchQueue(display: CGDirectDisplayID, outputWidth: usize, outputHeight: usize, pixelFormat: i32, properties: CFDictionaryRef, queue: dispatch_queue_t, handler: CGDisplayStreamFrameAvailableHandler) CGDisplayStreamRef;
pub extern fn CGDisplayStreamStart(displayStream: CGDisplayStreamRef) CGError;
pub extern fn CGDisplayStreamStop(displayStream: CGDisplayStreamRef) CGError;
pub extern fn CGDisplayStreamGetRunLoopSource(displayStream: CGDisplayStreamRef) CFRunLoopSourceRef;
pub const CGEventErr = CGError;
pub const CGButtonCount = u32;
pub const CGWheelCount = u32;
pub const CGCharCode = u16;
pub const CGKeyCode = u16;
pub const CGScreenRefreshCallback = ?*const fn (u32, [*c]const CGRect, ?*anyopaque) callconv(.C) void;
pub extern fn CGRegisterScreenRefreshCallback(callback: CGScreenRefreshCallback, userInfo: ?*anyopaque) CGError;
pub extern fn CGUnregisterScreenRefreshCallback(callback: CGScreenRefreshCallback, userInfo: ?*anyopaque) void;
pub extern fn CGWaitForScreenRefreshRects(rects: [*c][*c]CGRect, count: [*c]u32) CGError;
pub const CGScreenUpdateOperation = u32;
pub const kCGScreenUpdateOperationRefresh: c_int = 0;
pub const kCGScreenUpdateOperationMove: c_int = 1;
pub const kCGScreenUpdateOperationReducedDirtyRectangleCount: c_uint = 2147483648;
const enum_unnamed_1386 = c_uint;
pub const struct_CGScreenUpdateMoveDelta = extern struct {
    dX: i32,
    dY: i32,
};
pub const CGScreenUpdateMoveDelta = struct_CGScreenUpdateMoveDelta;
pub const CGScreenUpdateMoveCallback = ?*const fn (CGScreenUpdateMoveDelta, usize, [*c]const CGRect, ?*anyopaque) callconv(.C) void;
pub extern fn CGScreenRegisterMoveCallback(callback: CGScreenUpdateMoveCallback, userInfo: ?*anyopaque) CGError;
pub extern fn CGScreenUnregisterMoveCallback(callback: CGScreenUpdateMoveCallback, userInfo: ?*anyopaque) void;
pub extern fn CGWaitForScreenUpdateRects(requestedOperations: CGScreenUpdateOperation, currentOperation: [*c]CGScreenUpdateOperation, rects: [*c][*c]CGRect, rectCount: [*c]usize, delta: [*c]CGScreenUpdateMoveDelta) CGError;
pub extern fn CGReleaseScreenRefreshRects(rects: [*c]CGRect) void;
pub extern fn CGCursorIsVisible() boolean_t;
pub extern fn CGCursorIsDrawnInFramebuffer() boolean_t;
pub extern fn CGWarpMouseCursorPosition(newCursorPosition: CGPoint) CGError;
pub extern fn CGAssociateMouseAndMouseCursorPosition(connected: boolean_t) CGError;
pub extern fn CGWindowServerCreateServerPort() CFMachPortRef;
pub extern fn CGEnableEventStateCombining(combineState: boolean_t) CGError;
pub extern fn CGInhibitLocalEvents(inhibit: boolean_t) CGError;
pub extern fn CGPostMouseEvent(mouseCursorPosition: CGPoint, updateMouseCursorPosition: boolean_t, buttonCount: CGButtonCount, mouseButtonDown: boolean_t, ...) CGError;
pub extern fn CGPostScrollWheelEvent(wheelCount: CGWheelCount, wheel1: i32, ...) CGError;
pub extern fn CGPostKeyboardEvent(keyChar: CGCharCode, virtualKey: CGKeyCode, keyDown: boolean_t) CGError;
pub const CGEventFilterMask = u32;
pub const kCGEventFilterMaskPermitLocalMouseEvents: c_int = 1;
pub const kCGEventFilterMaskPermitLocalKeyboardEvents: c_int = 2;
pub const kCGEventFilterMaskPermitSystemDefinedEvents: c_int = 4;
const enum_unnamed_1387 = c_uint;
pub const CGEventSuppressionState = u32;
pub const kCGEventSuppressionStateSuppressionInterval: c_int = 0;
pub const kCGEventSuppressionStateRemoteMouseDrag: c_int = 1;
pub const kCGNumberOfEventSuppressionStates: c_int = 2;
const enum_unnamed_1388 = c_uint;
pub extern fn CGSetLocalEventsFilterDuringSuppressionState(filter: CGEventFilterMask, state: CGEventSuppressionState) CGError;
pub extern fn CGSetLocalEventsSuppressionInterval(seconds: CFTimeInterval) CGError;
pub extern fn CGWindowServerCFMachPort() CFMachPortRef;
pub const CGRectCount = u32;
pub const OSAtomic_int64_aligned64_t = i64;
pub extern fn OSAtomicAdd32(__theAmount: i32, __theValue: [*c]volatile i32) i32;
pub extern fn OSAtomicAdd32Barrier(__theAmount: i32, __theValue: [*c]volatile i32) i32;
pub extern fn OSAtomicIncrement32(__theValue: [*c]volatile i32) i32;
pub extern fn OSAtomicIncrement32Barrier(__theValue: [*c]volatile i32) i32;
pub extern fn OSAtomicDecrement32(__theValue: [*c]volatile i32) i32;
pub extern fn OSAtomicDecrement32Barrier(__theValue: [*c]volatile i32) i32;
pub extern fn OSAtomicAdd64(__theAmount: i64, __theValue: [*c]volatile OSAtomic_int64_aligned64_t) i64;
pub extern fn OSAtomicAdd64Barrier(__theAmount: i64, __theValue: [*c]volatile OSAtomic_int64_aligned64_t) i64;
pub extern fn OSAtomicIncrement64(__theValue: [*c]volatile OSAtomic_int64_aligned64_t) i64;
pub extern fn OSAtomicIncrement64Barrier(__theValue: [*c]volatile OSAtomic_int64_aligned64_t) i64;
pub extern fn OSAtomicDecrement64(__theValue: [*c]volatile OSAtomic_int64_aligned64_t) i64;
pub extern fn OSAtomicDecrement64Barrier(__theValue: [*c]volatile OSAtomic_int64_aligned64_t) i64;
pub extern fn OSAtomicOr32(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicOr32Barrier(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicOr32Orig(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicOr32OrigBarrier(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicAnd32(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicAnd32Barrier(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicAnd32Orig(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicAnd32OrigBarrier(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicXor32(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicXor32Barrier(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicXor32Orig(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicXor32OrigBarrier(__theMask: u32, __theValue: [*c]volatile u32) i32;
pub extern fn OSAtomicCompareAndSwap32(__oldValue: i32, __newValue: i32, __theValue: [*c]volatile i32) bool;
pub extern fn OSAtomicCompareAndSwap32Barrier(__oldValue: i32, __newValue: i32, __theValue: [*c]volatile i32) bool;
pub extern fn OSAtomicCompareAndSwapPtr(__oldValue: ?*anyopaque, __newValue: ?*anyopaque, __theValue: [*c]volatile ?*anyopaque) bool;
pub extern fn OSAtomicCompareAndSwapPtrBarrier(__oldValue: ?*anyopaque, __newValue: ?*anyopaque, __theValue: [*c]volatile ?*anyopaque) bool;
pub extern fn OSAtomicCompareAndSwapInt(__oldValue: c_int, __newValue: c_int, __theValue: [*c]volatile c_int) bool;
pub extern fn OSAtomicCompareAndSwapIntBarrier(__oldValue: c_int, __newValue: c_int, __theValue: [*c]volatile c_int) bool;
pub extern fn OSAtomicCompareAndSwapLong(__oldValue: c_long, __newValue: c_long, __theValue: [*c]volatile c_long) bool;
pub extern fn OSAtomicCompareAndSwapLongBarrier(__oldValue: c_long, __newValue: c_long, __theValue: [*c]volatile c_long) bool;
pub extern fn OSAtomicCompareAndSwap64(__oldValue: i64, __newValue: i64, __theValue: [*c]volatile OSAtomic_int64_aligned64_t) bool;
pub extern fn OSAtomicCompareAndSwap64Barrier(__oldValue: i64, __newValue: i64, __theValue: [*c]volatile OSAtomic_int64_aligned64_t) bool;
pub extern fn OSAtomicTestAndSet(__n: u32, __theAddress: ?*volatile anyopaque) bool;
pub extern fn OSAtomicTestAndSetBarrier(__n: u32, __theAddress: ?*volatile anyopaque) bool;
pub extern fn OSAtomicTestAndClear(__n: u32, __theAddress: ?*volatile anyopaque) bool;
pub extern fn OSAtomicTestAndClearBarrier(__n: u32, __theAddress: ?*volatile anyopaque) bool;
pub extern fn OSMemoryBarrier() void;
pub const OSFifoQueueHead = extern struct {
    opaque1: ?*anyopaque,
    opaque2: ?*anyopaque,
    opaque3: c_int,
};
pub extern fn OSAtomicFifoEnqueue(__list: [*c]volatile OSFifoQueueHead, __new: ?*anyopaque, __offset: usize) void;
pub extern fn OSAtomicFifoDequeue(__list: [*c]volatile OSFifoQueueHead, __offset: usize) ?*anyopaque;
pub const OSSpinLock = i32;
pub extern fn OSSpinLockTry(__lock: [*c]volatile OSSpinLock) bool;
pub extern fn OSSpinLockLock(__lock: [*c]volatile OSSpinLock) void;
pub extern fn OSSpinLockUnlock(__lock: [*c]volatile OSSpinLock) void;
pub const OSQueueHead = extern struct {
    opaque1: ?*anyopaque,
    opaque2: c_long,
};
pub extern fn OSAtomicEnqueue(__list: [*c]volatile OSQueueHead, __new: ?*anyopaque, __offset: usize) void;
pub extern fn OSAtomicDequeue(__list: [*c]volatile OSQueueHead, __offset: usize) ?*anyopaque;
pub const IOIndex = SInt32;
pub const IOSelect = UInt32;
pub const IOFixed1616 = UInt32;
pub const IODisplayVendorID = UInt32;
pub const IODisplayProductID = UInt32;
pub const IODisplayModeID = SInt32;
pub const kIODisplayModeIDBootProgrammable: c_int = -5;
pub const kIODisplayModeIDReservedBase: c_int = -2147483648;
const enum_unnamed_1389 = c_int;
pub const kIOMaxPixelBits: c_int = 64;
const enum_unnamed_1390 = c_uint;
pub const IOPixelEncoding = [64]u8;
pub const kIOCLUTPixels: c_int = 0;
pub const kIOFixedCLUTPixels: c_int = 1;
pub const kIORGBDirectPixels: c_int = 2;
pub const kIOMonoDirectPixels: c_int = 3;
pub const kIOMonoInverseDirectPixels: c_int = 4;
pub const kIORGBSignedDirectPixels: c_int = 5;
pub const kIORGBSignedFloatingPointPixels: c_int = 6;
const enum_unnamed_1391 = c_uint;
pub const struct_IOPixelInformation = extern struct {
    bytesPerRow: UInt32,
    bytesPerPlane: UInt32,
    bitsPerPixel: UInt32,
    pixelType: UInt32,
    componentCount: UInt32,
    bitsPerComponent: UInt32,
    componentMasks: [16]UInt32,
    pixelFormat: IOPixelEncoding,
    flags: UInt32,
    activeWidth: UInt32,
    activeHeight: UInt32,
    reserved: [2]UInt32,
};
pub const IOPixelInformation = struct_IOPixelInformation;
pub const IOAppleTimingID = UInt32;
pub const struct_IODisplayModeInformation = extern struct {
    nominalWidth: UInt32,
    nominalHeight: UInt32,
    refreshRate: IOFixed1616,
    maxDepthIndex: IOIndex,
    flags: UInt32,
    imageWidth: UInt16,
    imageHeight: UInt16,
    reserved: [3]UInt32,
};
pub const IODisplayModeInformation = struct_IODisplayModeInformation;
pub const kDisplayModeSafetyFlags: c_int = 7;
pub const kDisplayModeAlwaysShowFlag: c_int = 8;
pub const kDisplayModeNeverShowFlag: c_int = 128;
pub const kDisplayModeNotResizeFlag: c_int = 16;
pub const kDisplayModeRequiresPanFlag: c_int = 32;
pub const kDisplayModeInterlacedFlag: c_int = 64;
pub const kDisplayModeSimulscanFlag: c_int = 256;
pub const kDisplayModeBuiltInFlag: c_int = 1024;
pub const kDisplayModeNotPresetFlag: c_int = 512;
pub const kDisplayModeStretchedFlag: c_int = 2048;
pub const kDisplayModeNotGraphicsQualityFlag: c_int = 4096;
pub const kDisplayModeValidateAgainstDisplay: c_int = 8192;
pub const kDisplayModeTelevisionFlag: c_int = 1048576;
pub const kDisplayModeValidForMirroringFlag: c_int = 2097152;
pub const kDisplayModeAcceleratorBackedFlag: c_int = 4194304;
pub const kDisplayModeValidForHiResFlag: c_int = 8388608;
pub const kDisplayModeValidForAirPlayFlag: c_int = 16777216;
pub const kDisplayModeNativeFlag: c_int = 33554432;
const enum_unnamed_1392 = c_uint;
pub const kDisplayModeValidFlag: c_int = 1;
pub const kDisplayModeSafeFlag: c_int = 2;
pub const kDisplayModeDefaultFlag: c_int = 4;
const enum_unnamed_1393 = c_uint;
pub const struct_IOFramebufferInformation = extern struct {
    baseAddress: IOPhysicalAddress,
    activeWidth: UInt32,
    activeHeight: UInt32,
    bytesPerRow: IOByteCount,
    bytesPerPlane: IOByteCount,
    bitsPerPixel: UInt32,
    pixelType: UInt32,
    flags: UInt32,
    reserved: [4]UInt32,
};
pub const IOFramebufferInformation = struct_IOFramebufferInformation;
pub const kFramebufferSupportsCopybackCache: c_int = 65536;
pub const kFramebufferSupportsWritethruCache: c_int = 131072;
pub const kFramebufferSupportsGammaCorrection: c_int = 262144;
pub const kFramebufferDisableAltivecAccess: c_int = 524288;
const enum_unnamed_1394 = c_uint;
pub const IOPixelAperture = IOIndex;
pub const kIOFBSystemAperture: c_int = 0;
const enum_unnamed_1395 = c_uint;
pub const IOColorComponent = UInt16;
pub const struct_IOColorEntry = extern struct {
    index: UInt16,
    red: IOColorComponent,
    green: IOColorComponent,
    blue: IOColorComponent,
};
pub const IOColorEntry = struct_IOColorEntry;
pub const kSetCLUTByValue: c_int = 1;
pub const kSetCLUTImmediately: c_int = 2;
pub const kSetCLUTWithLuminance: c_int = 4;
const enum_unnamed_1396 = c_uint;
pub const kIOPowerStateAttribute: c_int = 1886876275;
pub const kIOPowerAttribute: c_int = 1886353266;
pub const kIODriverPowerAttribute: c_int = 1685090167;
pub const kIOHardwareCursorAttribute: c_int = 1668445042;
pub const kIOMirrorAttribute: c_int = 1835627122;
pub const kIOMirrorDefaultAttribute: c_int = 1836213350;
pub const kIOCapturedAttribute: c_int = 1667330148;
pub const kIOCursorControlAttribute: c_int = 1668445027;
pub const kIOSystemPowerAttribute: c_int = 1936750450;
pub const kIOWindowServerActiveAttribute: c_int = 2004054646;
pub const kIOVRAMSaveAttribute: c_int = 1987212150;
pub const kIODeferCLUTSetAttribute: c_int = 1986227316;
pub const kIOClamshellStateAttribute: c_int = 1668047213;
pub const kIOFBDisplayPortTrainingAttribute: c_int = 1685091425;
pub const kIOFBDisplayState: c_int = 1685288052;
pub const kIOFBVariableRefreshRate: c_int = 1987211839;
pub const kIOFBLimitHDCPAttribute: c_int = 1751409520;
pub const kIOFBLimitHDCPStateAttribute: c_int = 1934115907;
pub const kIOFBStop: c_int = 1937010544;
pub const kIOFBRedGammaScaleAttribute: c_int = 1735617650;
pub const kIOFBGreenGammaScaleAttribute: c_int = 1735617639;
pub const kIOFBBlueGammaScaleAttribute: c_int = 1735617634;
pub const kIOFBHDRMetaDataAttribute: c_int = 1751413357;
pub const kIOBuiltinPanelPowerAttribute: c_int = 1886284912;
const enum_unnamed_1397 = c_uint;
pub const kIOFBHDCPLimit_AllowAll: c_int = 0;
pub const kIOFBHDCPLimit_NoHDCP1x: c_int = 1;
pub const kIOFBHDCPLimit_NoHDCP20Type0: c_int = 2;
pub const kIOFBHDCPLimit_NoHDCP20Type1: c_int = 4;
const enum_unnamed_1398 = c_uint;
pub const struct_IOFBHDRMetaDataV1 = extern struct {
    displayPrimary_X0: u16,
    displayPrimary_Y0: u16,
    displayPrimary_X1: u16,
    displayPrimary_Y1: u16,
    displayPrimary_X2: u16,
    displayPrimary_Y2: u16,
    displayPrimary_X: u16,
    displayPrimary_Y: u16,
    desiredLuminance_Max: u16,
    desiredLuminance_Min: u16,
    desiredLightLevel_Avg: u16,
    desiredLightLevel_Max: u16,
    __reservedA: [5]u64,
};
pub const IOFBHDRMetaDataV1 = struct_IOFBHDRMetaDataV1;
pub const IOFBHDRMetaData = extern union {
    v1: IOFBHDRMetaDataV1,
};
pub const kIOFBDisplayState_AlreadyActive: c_int = 1;
pub const kIOFBDisplayState_RestoredProfile: c_int = 2;
pub const kIOFBDisplayState_PipelineBlack: c_int = 4;
pub const kIOFBDisplayState_Mask: c_int = 7;
const enum_unnamed_1399 = c_uint;
pub const kIOWSAA_Unaccelerated: c_int = 0;
pub const kIOWSAA_Accelerated: c_int = 1;
pub const kIOWSAA_From_Accelerated: c_int = 2;
pub const kIOWSAA_To_Accelerated: c_int = 3;
pub const kIOWSAA_Sleep: c_int = 4;
pub const kIOWSAA_Hibernate: c_int = 4;
pub const kIOWSAA_DriverOpen: c_int = 5;
pub const kIOWSAA_StateMask: c_int = 15;
pub const kIOWSAA_Transactional: c_int = 16;
pub const kIOWSAA_DeferStart: c_int = 256;
pub const kIOWSAA_DeferEnd: c_int = 512;
pub const kIOWSAA_NonConsoleDevice: c_int = 1024;
pub const kIOWSAA_Reserved: c_uint = 4026531840;
const enum_unnamed_1400 = c_uint;
pub const kIOFBNS_Rendezvous: c_uint = 2271560481;
pub const kIOFBNS_MessageMask: c_int = 15;
pub const kIOFBNS_Sleep: c_int = 0;
pub const kIOFBNS_Wake: c_int = 1;
pub const kIOFBNS_Doze: c_int = 2;
pub const kIOFBNS_Dim: c_int = 3;
pub const kIOFBNS_UnDim: c_int = 4;
pub const kIOFBNS_DisplayStateMask: c_int = 3840;
pub const kIOFBNS_DisplayStateShift: c_int = 8;
pub const kIOFBNS_GenerationMask: c_int = 2147418112;
pub const kIOFBNS_GenerationShift: c_int = 16;
const enum_unnamed_1401 = c_uint;
pub const kIOMirrorIsPrimary: c_uint = 2147483648;
pub const kIOMirrorHWClipped: c_int = 1073741824;
pub const kIOMirrorIsMirrored: c_int = 536870912;
const enum_unnamed_1402 = c_uint;
pub const kIOMirrorDefault: c_int = 1;
pub const kIOMirrorForced: c_int = 2;
const enum_unnamed_1403 = c_uint;
pub const struct_IODetailedTimingInformationV1 = extern struct {
    pixelClock: UInt32,
    horizontalActive: UInt32,
    horizontalBlanking: UInt32,
    horizontalBorder: UInt32,
    horizontalSyncOffset: UInt32,
    horizontalSyncWidth: UInt32,
    verticalActive: UInt32,
    verticalBlanking: UInt32,
    verticalBorder: UInt32,
    verticalSyncOffset: UInt32,
    verticalSyncWidth: UInt32,
};
pub const IODetailedTimingInformationV1 = struct_IODetailedTimingInformationV1;
pub const struct_IODetailedTimingInformationV2 = extern struct {
    __reservedA: [3]UInt32,
    horizontalScaledInset: UInt32,
    verticalScaledInset: UInt32,
    scalerFlags: UInt32,
    horizontalScaled: UInt32,
    verticalScaled: UInt32,
    signalConfig: UInt32,
    signalLevels: UInt32,
    pixelClock: UInt64,
    minPixelClock: UInt64,
    maxPixelClock: UInt64,
    horizontalActive: UInt32,
    horizontalBlanking: UInt32,
    horizontalSyncOffset: UInt32,
    horizontalSyncPulseWidth: UInt32,
    verticalActive: UInt32,
    verticalBlanking: UInt32,
    verticalSyncOffset: UInt32,
    verticalSyncPulseWidth: UInt32,
    horizontalBorderLeft: UInt32,
    horizontalBorderRight: UInt32,
    verticalBorderTop: UInt32,
    verticalBorderBottom: UInt32,
    horizontalSyncConfig: UInt32,
    horizontalSyncLevel: UInt32,
    verticalSyncConfig: UInt32,
    verticalSyncLevel: UInt32,
    numLinks: UInt32,
    verticalBlankingExtension: UInt32,
    pixelEncoding: UInt16,
    bitsPerColorComponent: UInt16,
    colorimetry: UInt16,
    dynamicRange: UInt16,
    dscCompressedBitsPerPixel: UInt16,
    dscSliceHeight: UInt16,
    dscSliceWidth: UInt16,
    verticalBlankingMaxStretchPerFrame: UInt16,
    verticalBlankingMaxShrinkPerFrame: UInt16,
    __reservedB: [3]UInt16,
};
pub const IODetailedTimingInformationV2 = struct_IODetailedTimingInformationV2;
pub const IODetailedTimingInformation = struct_IODetailedTimingInformationV2;
const union_unnamed_1404 = extern union {
    v1: IODetailedTimingInformationV1,
    v2: IODetailedTimingInformationV2,
};
pub const struct_IOTimingInformation = extern struct {
    appleTimingID: IOAppleTimingID,
    flags: UInt32,
    detailedInfo: union_unnamed_1404,
};
pub const IOTimingInformation = struct_IOTimingInformation;
pub const kIODetailedTimingValid: c_uint = 2147483648;
pub const kIOScalingInfoValid: c_int = 1073741824;
const enum_unnamed_1405 = c_uint;
pub const kIOScaleStretchToFit: c_int = 1;
pub const kIOScaleRotateFlags: c_int = 240;
pub const kIOScaleSwapAxes: c_int = 16;
pub const kIOScaleInvertX: c_int = 32;
pub const kIOScaleInvertY: c_int = 64;
pub const kIOScaleRotate0: c_int = 0;
pub const kIOScaleRotate90: c_int = 48;
pub const kIOScaleRotate180: c_int = 96;
pub const kIOScaleRotate270: c_int = 80;
const enum_unnamed_1406 = c_uint;
pub const kIOPixelEncodingNotSupported: c_int = 0;
pub const kIOPixelEncodingRGB444: c_int = 1;
pub const kIOPixelEncodingYCbCr444: c_int = 2;
pub const kIOPixelEncodingYCbCr422: c_int = 4;
pub const kIOPixelEncodingYCbCr420: c_int = 8;
const enum_unnamed_1407 = c_uint;
pub const kIOBitsPerColorComponentNotSupported: c_int = 0;
pub const kIOBitsPerColorComponent6: c_int = 1;
pub const kIOBitsPerColorComponent8: c_int = 2;
pub const kIOBitsPerColorComponent10: c_int = 4;
pub const kIOBitsPerColorComponent12: c_int = 8;
pub const kIOBitsPerColorComponent16: c_int = 16;
const enum_unnamed_1408 = c_uint;
pub const kIOColorimetryNotSupported: c_int = 0;
pub const kIOColorimetryNativeRGB: c_int = 1;
pub const kIOColorimetrysRGB: c_int = 2;
pub const kIOColorimetryDCIP3: c_int = 4;
pub const kIOColorimetryAdobeRGB: c_int = 8;
pub const kIOColorimetryxvYCC: c_int = 16;
pub const kIOColorimetryWGRGB: c_int = 32;
pub const kIOColorimetryBT601: c_int = 64;
pub const kIOColorimetryBT709: c_int = 128;
pub const kIOColorimetryBT2020: c_int = 256;
pub const kIOColorimetryBT2100: c_int = 512;
const enum_unnamed_1409 = c_uint;
pub const kIODynamicRangeNotSupported: c_int = 0;
pub const kIODynamicRangeSDR: c_int = 1;
pub const kIODynamicRangeHDR10: c_int = 2;
pub const kIODynamicRangeDolbyNormalMode: c_int = 4;
pub const kIODynamicRangeDolbyTunnelMode: c_int = 8;
pub const kIODynamicRangeTraditionalGammaHDR: c_int = 16;
pub const kIODynamicRangeTraditionalGammaSDR: c_int = 32;
const enum_unnamed_1410 = c_uint;
pub const struct_IOFBDisplayModeDescription = extern struct {
    info: IODisplayModeInformation,
    timingInfo: IOTimingInformation,
};
pub const IOFBDisplayModeDescription = struct_IOFBDisplayModeDescription;
pub const struct_IODisplayTimingRangeV1 = extern struct {
    __reservedA: [2]UInt32,
    version: UInt32,
    __reservedB: [5]UInt32,
    minPixelClock: UInt64,
    maxPixelClock: UInt64,
    maxPixelError: UInt32,
    supportedSyncFlags: UInt32,
    supportedSignalLevels: UInt32,
    supportedSignalConfigs: UInt32,
    minFrameRate: UInt32,
    maxFrameRate: UInt32,
    minLineRate: UInt32,
    maxLineRate: UInt32,
    maxHorizontalTotal: UInt32,
    maxVerticalTotal: UInt32,
    __reservedD: [2]UInt32,
    charSizeHorizontalActive: UInt8,
    charSizeHorizontalBlanking: UInt8,
    charSizeHorizontalSyncOffset: UInt8,
    charSizeHorizontalSyncPulse: UInt8,
    charSizeVerticalActive: UInt8,
    charSizeVerticalBlanking: UInt8,
    charSizeVerticalSyncOffset: UInt8,
    charSizeVerticalSyncPulse: UInt8,
    charSizeHorizontalBorderLeft: UInt8,
    charSizeHorizontalBorderRight: UInt8,
    charSizeVerticalBorderTop: UInt8,
    charSizeVerticalBorderBottom: UInt8,
    charSizeHorizontalTotal: UInt8,
    charSizeVerticalTotal: UInt8,
    __reservedE: UInt16,
    minHorizontalActiveClocks: UInt32,
    maxHorizontalActiveClocks: UInt32,
    minHorizontalBlankingClocks: UInt32,
    maxHorizontalBlankingClocks: UInt32,
    minHorizontalSyncOffsetClocks: UInt32,
    maxHorizontalSyncOffsetClocks: UInt32,
    minHorizontalPulseWidthClocks: UInt32,
    maxHorizontalPulseWidthClocks: UInt32,
    minVerticalActiveClocks: UInt32,
    maxVerticalActiveClocks: UInt32,
    minVerticalBlankingClocks: UInt32,
    maxVerticalBlankingClocks: UInt32,
    minVerticalSyncOffsetClocks: UInt32,
    maxVerticalSyncOffsetClocks: UInt32,
    minVerticalPulseWidthClocks: UInt32,
    maxVerticalPulseWidthClocks: UInt32,
    minHorizontalBorderLeft: UInt32,
    maxHorizontalBorderLeft: UInt32,
    minHorizontalBorderRight: UInt32,
    maxHorizontalBorderRight: UInt32,
    minVerticalBorderTop: UInt32,
    maxVerticalBorderTop: UInt32,
    minVerticalBorderBottom: UInt32,
    maxVerticalBorderBottom: UInt32,
    maxNumLinks: UInt32,
    minLink0PixelClock: UInt32,
    maxLink0PixelClock: UInt32,
    minLink1PixelClock: UInt32,
    maxLink1PixelClock: UInt32,
    supportedPixelEncoding: UInt16,
    supportedBitsPerColorComponent: UInt16,
    supportedColorimetryModes: UInt16,
    supportedDynamicRangeModes: UInt16,
    __reservedF: [1]UInt32,
};
pub const IODisplayTimingRangeV1 = struct_IODisplayTimingRangeV1;
pub const struct_IODisplayTimingRangeV2 = extern struct {
    __reservedA: [2]UInt32,
    version: UInt32,
    __reservedB: [5]UInt32,
    minPixelClock: UInt64,
    maxPixelClock: UInt64,
    maxPixelError: UInt32,
    supportedSyncFlags: UInt32,
    supportedSignalLevels: UInt32,
    supportedSignalConfigs: UInt32,
    minFrameRate: UInt32,
    maxFrameRate: UInt32,
    minLineRate: UInt32,
    maxLineRate: UInt32,
    maxHorizontalTotal: UInt32,
    maxVerticalTotal: UInt32,
    __reservedD: [2]UInt32,
    charSizeHorizontalActive: UInt8,
    charSizeHorizontalBlanking: UInt8,
    charSizeHorizontalSyncOffset: UInt8,
    charSizeHorizontalSyncPulse: UInt8,
    charSizeVerticalActive: UInt8,
    charSizeVerticalBlanking: UInt8,
    charSizeVerticalSyncOffset: UInt8,
    charSizeVerticalSyncPulse: UInt8,
    charSizeHorizontalBorderLeft: UInt8,
    charSizeHorizontalBorderRight: UInt8,
    charSizeVerticalBorderTop: UInt8,
    charSizeVerticalBorderBottom: UInt8,
    charSizeHorizontalTotal: UInt8,
    charSizeVerticalTotal: UInt8,
    __reservedE: UInt16,
    minHorizontalActiveClocks: UInt32,
    maxHorizontalActiveClocks: UInt32,
    minHorizontalBlankingClocks: UInt32,
    maxHorizontalBlankingClocks: UInt32,
    minHorizontalSyncOffsetClocks: UInt32,
    maxHorizontalSyncOffsetClocks: UInt32,
    minHorizontalPulseWidthClocks: UInt32,
    maxHorizontalPulseWidthClocks: UInt32,
    minVerticalActiveClocks: UInt32,
    maxVerticalActiveClocks: UInt32,
    minVerticalBlankingClocks: UInt32,
    maxVerticalBlankingClocks: UInt32,
    minVerticalSyncOffsetClocks: UInt32,
    maxVerticalSyncOffsetClocks: UInt32,
    minVerticalPulseWidthClocks: UInt32,
    maxVerticalPulseWidthClocks: UInt32,
    minHorizontalBorderLeft: UInt32,
    maxHorizontalBorderLeft: UInt32,
    minHorizontalBorderRight: UInt32,
    maxHorizontalBorderRight: UInt32,
    minVerticalBorderTop: UInt32,
    maxVerticalBorderTop: UInt32,
    minVerticalBorderBottom: UInt32,
    maxVerticalBorderBottom: UInt32,
    maxNumLinks: UInt32,
    minLink0PixelClock: UInt32,
    maxLink0PixelClock: UInt32,
    minLink1PixelClock: UInt32,
    maxLink1PixelClock: UInt32,
    supportedPixelEncoding: UInt16,
    supportedBitsPerColorComponent: UInt16,
    supportedColorimetryModes: UInt16,
    supportedDynamicRangeModes: UInt16,
    __reservedF: [1]UInt32,
    maxBandwidth: UInt64,
    dscMinSliceHeight: UInt32,
    dscMaxSliceHeight: UInt32,
    dscMinSliceWidth: UInt32,
    dscMaxSliceWidth: UInt32,
    dscMinSlicePerLine: UInt32,
    dscMaxSlicePerLine: UInt32,
    dscMinBPC: UInt16,
    dscMaxBPC: UInt16,
    dscMinBPP: UInt16,
    dscMaxBPP: UInt16,
    dscVBR: UInt8,
    dscBlockPredEnable: UInt8,
    __reservedC: [6]UInt32,
};
pub const IODisplayTimingRangeV2 = struct_IODisplayTimingRangeV2;
pub const IODisplayTimingRange = struct_IODisplayTimingRangeV2;
pub const kIOTimingRangeV2: c_int = 2;
pub const kIOTimingRangeV1: c_int = 0;
const enum_unnamed_1411 = c_uint;
pub const kIORangePixelEncodingNotSupported: c_int = 0;
pub const kIORangePixelEncodingRGB444: c_int = 1;
pub const kIORangePixelEncodingYCbCr444: c_int = 2;
pub const kIORangePixelEncodingYCbCr422: c_int = 4;
pub const kIORangePixelEncodingYCbCr420: c_int = 8;
const enum_unnamed_1412 = c_uint;
pub const kIORangeBitsPerColorComponentNotSupported: c_int = 0;
pub const kIORangeBitsPerColorComponent6: c_int = 1;
pub const kIORangeBitsPerColorComponent8: c_int = 2;
pub const kIORangeBitsPerColorComponent10: c_int = 4;
pub const kIORangeBitsPerColorComponent12: c_int = 8;
pub const kIORangeBitsPerColorComponent16: c_int = 16;
const enum_unnamed_1413 = c_uint;
pub const kIORangeColorimetryNotSupported: c_int = 0;
pub const kIORangeColorimetryNativeRGB: c_int = 1;
pub const kIORangeColorimetrysRGB: c_int = 2;
pub const kIORangeColorimetryDCIP3: c_int = 4;
pub const kIORangeColorimetryAdobeRGB: c_int = 8;
pub const kIORangeColorimetryxvYCC: c_int = 16;
pub const kIORangeColorimetryWGRGB: c_int = 32;
pub const kIORangeColorimetryBT601: c_int = 64;
pub const kIORangeColorimetryBT709: c_int = 128;
pub const kIORangeColorimetryBT2020: c_int = 256;
pub const kIORangeColorimetryBT2100: c_int = 512;
const enum_unnamed_1414 = c_uint;
pub const kIORangeDynamicRangeNotSupported: c_int = 0;
pub const kIORangeDynamicRangeSDR: c_int = 1;
pub const kIORangeDynamicRangeHDR10: c_int = 2;
pub const kIORangeDynamicRangeDolbyNormalMode: c_int = 4;
pub const kIORangeDynamicRangeDolbyTunnelMode: c_int = 8;
pub const kIORangeDynamicRangeTraditionalGammaHDR: c_int = 16;
pub const kIORangeDynamicRangeTraditionalGammaSDR: c_int = 32;
const enum_unnamed_1415 = c_uint;
pub const kIORangeSupportsSignal_0700_0300: c_int = 1;
pub const kIORangeSupportsSignal_0714_0286: c_int = 2;
pub const kIORangeSupportsSignal_1000_0400: c_int = 4;
pub const kIORangeSupportsSignal_0700_0000: c_int = 8;
const enum_unnamed_1416 = c_uint;
pub const kIORangeSupportsSeparateSyncs: c_int = 1;
pub const kIORangeSupportsSyncOnGreen: c_int = 2;
pub const kIORangeSupportsCompositeSync: c_int = 4;
pub const kIORangeSupportsVSyncSerration: c_int = 8;
pub const kIORangeSupportsVRR: c_int = 16;
const enum_unnamed_1417 = c_uint;
pub const kIORangeSupportsInterlacedCEATiming: c_int = 4;
pub const kIORangeSupportsInterlacedCEATimingWithConfirm: c_int = 8;
pub const kIORangeSupportsMultiAlignedTiming: c_int = 64;
const enum_unnamed_1418 = c_uint;
pub const kIODigitalSignal: c_int = 1;
pub const kIOAnalogSetupExpected: c_int = 2;
pub const kIOInterlacedCEATiming: c_int = 4;
pub const kIONTSCTiming: c_int = 8;
pub const kIOPALTiming: c_int = 16;
pub const kIODSCBlockPredEnable: c_int = 32;
pub const kIOMultiAlignedTiming: c_int = 64;
const enum_unnamed_1419 = c_uint;
pub const kIOAnalogSignalLevel_0700_0300: c_int = 0;
pub const kIOAnalogSignalLevel_0714_0286: c_int = 1;
pub const kIOAnalogSignalLevel_1000_0400: c_int = 2;
pub const kIOAnalogSignalLevel_0700_0000: c_int = 3;
const enum_unnamed_1420 = c_uint;
pub const kIOSyncPositivePolarity: c_int = 1;
const enum_unnamed_1421 = c_uint;
pub const struct_IODisplayScalerInformation = extern struct {
    __reservedA: [1]UInt32,
    version: UInt32,
    __reservedB: [2]UInt32,
    scalerFeatures: IOOptionBits,
    maxHorizontalPixels: UInt32,
    maxVerticalPixels: UInt32,
    __reservedC: [5]UInt32,
};
pub const IODisplayScalerInformation = struct_IODisplayScalerInformation;
pub const kIOScaleStretchOnly: c_int = 1;
pub const kIOScaleCanUpSamplePixels: c_int = 2;
pub const kIOScaleCanDownSamplePixels: c_int = 4;
pub const kIOScaleCanScaleInterlaced: c_int = 8;
pub const kIOScaleCanSupportInset: c_int = 16;
pub const kIOScaleCanRotate: c_int = 32;
pub const kIOScaleCanBorderInsetOnly: c_int = 64;
const enum_unnamed_1422 = c_uint;
pub const kOrConnections: c_int = 268435454;
pub const kAndConnections: c_int = 268435453;
const enum_unnamed_1423 = c_uint;
pub const kConnectionFlags: c_int = 1718380403;
pub const kConnectionSyncEnable: c_int = 1937337955;
pub const kConnectionSyncFlags: c_int = 1937335142;
pub const kConnectionSupportsAppleSense: c_int = 1634954867;
pub const kConnectionSupportsLLDDCSense: c_int = 1818518627;
pub const kConnectionSupportsHLDDCSense: c_int = 1751409763;
pub const kConnectionEnable: c_int = 1701732706;
pub const kConnectionCheckEnable: c_int = 1667591777;
pub const kConnectionProbe: c_int = 1886547810;
pub const kConnectionIgnore: c_int = 6907762;
pub const kConnectionChanged: c_int = 1667788391;
pub const kConnectionPower: c_int = 1886353266;
pub const kConnectionPostWake: c_int = 1886871915;
pub const kConnectionDisplayParameterCount: c_int = 1885564532;
pub const kConnectionDisplayParameters: c_int = 1885434477;
pub const kConnectionOverscan: c_int = 1869833070;
pub const kConnectionVideoBest: c_int = 1986163572;
pub const kConnectionRedGammaScale: c_int = 1919382371;
pub const kConnectionGreenGammaScale: c_int = 1734832995;
pub const kConnectionBlueGammaScale: c_int = 1650946915;
pub const kConnectionGammaScale: c_int = 1735615264;
pub const kConnectionFlushParameters: c_int = 1718383987;
pub const kConnectionVBLMultiplier: c_int = 1986161773;
pub const kConnectionHandleDisplayPortEvent: c_int = 1685088626;
pub const kConnectionPanelTimingDisable: c_int = 1886284916;
pub const kConnectionColorMode: c_int = 1668904310;
pub const kConnectionColorModesSupported: c_int = 1668246642;
pub const kConnectionColorDepthsSupported: c_int = 543322211;
pub const kConnectionControllerDepthsSupported: c_int = 6779492;
pub const kConnectionControllerColorDepth: c_int = 6582372;
pub const kConnectionControllerDitherControl: c_int = 6775907;
pub const kConnectionDisplayFlags: c_int = 1684434023;
pub const kConnectionEnableAudio: c_int = 1635083296;
pub const kConnectionAudioStreaming: c_int = 1635083379;
pub const kConnectionStartOfFrameTime: c_int = 1936680564;
const enum_unnamed_1424 = c_uint;
pub const kIOConnectionBuiltIn: c_int = 2048;
pub const kIOConnectionStereoSync: c_int = 32768;
const enum_unnamed_1425 = c_uint;
pub const kIOHSyncDisable: c_int = 1;
pub const kIOVSyncDisable: c_int = 2;
pub const kIOCSyncDisable: c_int = 4;
pub const kIONoSeparateSyncControl: c_int = 64;
pub const kIOTriStateSyncs: c_int = 128;
pub const kIOSyncOnBlue: c_int = 8;
pub const kIOSyncOnGreen: c_int = 16;
pub const kIOSyncOnRed: c_int = 32;
const enum_unnamed_1426 = c_uint;
pub const kIODPEventStart: c_int = 1;
pub const kIODPEventIdle: c_int = 2;
pub const kIODPEventForceRetrain: c_int = 3;
pub const kIODPEventRemoteControlCommandPending: c_int = 256;
pub const kIODPEventAutomatedTestRequest: c_int = 257;
pub const kIODPEventContentProtection: c_int = 258;
pub const kIODPEventMCCS: c_int = 259;
pub const kIODPEventSinkSpecific: c_int = 260;
const enum_unnamed_1427 = c_uint;
pub const kIODisplayColorMode: c_int = 1668904310;
const enum_unnamed_1428 = c_uint;
pub const kIODisplayRGBColorComponentBitsUnknown: c_int = 0;
pub const kIODisplayRGBColorComponentBits6: c_int = 1;
pub const kIODisplayRGBColorComponentBits8: c_int = 2;
pub const kIODisplayRGBColorComponentBits10: c_int = 4;
pub const kIODisplayRGBColorComponentBits12: c_int = 8;
pub const kIODisplayRGBColorComponentBits14: c_int = 16;
pub const kIODisplayRGBColorComponentBits16: c_int = 32;
pub const kIODisplayYCbCr444ColorComponentBitsUnknown: c_int = 0;
pub const kIODisplayYCbCr444ColorComponentBits6: c_int = 256;
pub const kIODisplayYCbCr444ColorComponentBits8: c_int = 512;
pub const kIODisplayYCbCr444ColorComponentBits10: c_int = 1024;
pub const kIODisplayYCbCr444ColorComponentBits12: c_int = 2048;
pub const kIODisplayYCbCr444ColorComponentBits14: c_int = 4096;
pub const kIODisplayYCbCr444ColorComponentBits16: c_int = 8192;
pub const kIODisplayYCbCr422ColorComponentBitsUnknown: c_int = 0;
pub const kIODisplayYCbCr422ColorComponentBits6: c_int = 65536;
pub const kIODisplayYCbCr422ColorComponentBits8: c_int = 131072;
pub const kIODisplayYCbCr422ColorComponentBits10: c_int = 262144;
pub const kIODisplayYCbCr422ColorComponentBits12: c_int = 524288;
pub const kIODisplayYCbCr422ColorComponentBits14: c_int = 1048576;
pub const kIODisplayYCbCr422ColorComponentBits16: c_int = 2097152;
const enum_unnamed_1429 = c_uint;
pub const kIODisplayDitherDisable: c_int = 0;
pub const kIODisplayDitherSpatial: c_int = 1;
pub const kIODisplayDitherTemporal: c_int = 2;
pub const kIODisplayDitherFrameRateControl: c_int = 4;
pub const kIODisplayDitherDefault: c_int = 128;
pub const kIODisplayDitherAll: c_int = 255;
pub const kIODisplayDitherRGBShift: c_int = 0;
pub const kIODisplayDitherYCbCr444Shift: c_int = 8;
pub const kIODisplayDitherYCbCr422Shift: c_int = 16;
const enum_unnamed_1430 = c_uint;
pub const kIODisplayNeedsCEAUnderscan: c_int = 1;
const enum_unnamed_1431 = c_uint;
pub const kIODisplayPowerStateOff: c_int = 0;
pub const kIODisplayPowerStateMinUsable: c_int = 1;
pub const kIODisplayPowerStateOn: c_int = 2;
const enum_unnamed_1432 = c_uint;
pub const kIOFBServerConnectType: c_int = 0;
pub const kIOFBSharedConnectType: c_int = 1;
pub const kIOGDiagnoseGTraceType: c_int = 11452;
pub const kIOGDiagnoseConnectType: c_int = 38744;
pub const kIODisplayAssertionConnectType: c_int = 61074;
const enum_unnamed_1433 = c_uint;
pub const kIOFBUserRequestProbe: c_int = 1;
const enum_unnamed_1434 = c_uint;
pub const struct_IOGPoint = extern struct {
    x: SInt16,
    y: SInt16,
};
pub const IOGPoint = struct_IOGPoint;
pub const struct_IOGSize = extern struct {
    width: SInt16,
    height: SInt16,
};
pub const IOGSize = struct_IOGSize;
pub const struct_IOGBounds = extern struct {
    minx: SInt16,
    maxx: SInt16,
    miny: SInt16,
    maxy: SInt16,
};
pub const IOGBounds = struct_IOGBounds;
pub const kTransparentEncoding: c_int = 0;
pub const kInvertingEncoding: c_int = 1;
const enum_unnamed_1435 = c_uint;
pub const kTransparentEncodingShift: c_int = 0;
pub const kTransparentEncodedPixel: c_int = 1;
pub const kInvertingEncodingShift: c_int = 2;
pub const kInvertingEncodedPixel: c_int = 4;
const enum_unnamed_1436 = c_uint;
pub const kHardwareCursorDescriptorMajorVersion: c_int = 1;
pub const kHardwareCursorDescriptorMinorVersion: c_int = 0;
const enum_unnamed_1437 = c_uint;
pub const struct_IOHardwareCursorDescriptor = extern struct {
    majorVersion: UInt16,
    minorVersion: UInt16,
    height: UInt32,
    width: UInt32,
    bitDepth: UInt32,
    maskBitDepth: UInt32,
    numColors: UInt32,
    colorEncodings: [*c]UInt32,
    flags: UInt32,
    supportedSpecialEncodings: UInt32,
    specialEncodings: [16]UInt32,
};
pub const IOHardwareCursorDescriptor = struct_IOHardwareCursorDescriptor;
pub const kHardwareCursorInfoMajorVersion: c_int = 1;
pub const kHardwareCursorInfoMinorVersion: c_int = 0;
const enum_unnamed_1438 = c_uint;
pub const struct_IOHardwareCursorInfo = extern struct {
    majorVersion: UInt16,
    minorVersion: UInt16,
    cursorHeight: UInt32,
    cursorWidth: UInt32,
    colorMap: [*c]IOColorEntry,
    hardwareCursorData: [*c]UInt8,
    cursorHotSpotX: UInt16,
    cursorHotSpotY: UInt16,
    reserved: [5]UInt32,
};
pub const IOHardwareCursorInfo = struct_IOHardwareCursorInfo;
pub const kIOFBVBLInterruptType: c_int = 1986161696;
pub const kIOFBHBLInterruptType: c_int = 1751280672;
pub const kIOFBFrameInterruptType: c_int = 1718772077;
pub const kIOFBConnectInterruptType: c_int = 1684236576;
pub const kIOFBChangedInterruptType: c_int = 1667788391;
pub const kIOFBOfflineInterruptType: c_int = 1919249782;
pub const kIOFBOnlineInterruptType: c_int = 1633969184;
pub const kIOFBDisplayPortInterruptType: c_int = 1685088626;
pub const kIOFBDisplayPortLinkChangeInterruptType: c_int = 1685089387;
pub const kIOFBMCCSInterruptType: c_int = 1835230067;
pub const kIOFBWakeInterruptType: c_int = 1987535211;
const enum_unnamed_1439 = c_uint;
pub const kIOTimingIDInvalid: c_int = 0;
pub const kIOTimingIDApple_FixedRateLCD: c_int = 42;
pub const kIOTimingIDApple_512x384_60hz: c_int = 130;
pub const kIOTimingIDApple_560x384_60hz: c_int = 135;
pub const kIOTimingIDApple_640x480_67hz: c_int = 140;
pub const kIOTimingIDApple_640x400_67hz: c_int = 145;
pub const kIOTimingIDVESA_640x480_60hz: c_int = 150;
pub const kIOTimingIDVESA_640x480_72hz: c_int = 152;
pub const kIOTimingIDVESA_640x480_75hz: c_int = 154;
pub const kIOTimingIDVESA_640x480_85hz: c_int = 158;
pub const kIOTimingIDGTF_640x480_120hz: c_int = 159;
pub const kIOTimingIDApple_640x870_75hz: c_int = 160;
pub const kIOTimingIDApple_640x818_75hz: c_int = 165;
pub const kIOTimingIDApple_832x624_75hz: c_int = 170;
pub const kIOTimingIDVESA_800x600_56hz: c_int = 180;
pub const kIOTimingIDVESA_800x600_60hz: c_int = 182;
pub const kIOTimingIDVESA_800x600_72hz: c_int = 184;
pub const kIOTimingIDVESA_800x600_75hz: c_int = 186;
pub const kIOTimingIDVESA_800x600_85hz: c_int = 188;
pub const kIOTimingIDVESA_1024x768_60hz: c_int = 190;
pub const kIOTimingIDVESA_1024x768_70hz: c_int = 200;
pub const kIOTimingIDVESA_1024x768_75hz: c_int = 204;
pub const kIOTimingIDVESA_1024x768_85hz: c_int = 208;
pub const kIOTimingIDApple_1024x768_75hz: c_int = 210;
pub const kIOTimingIDVESA_1152x864_75hz: c_int = 215;
pub const kIOTimingIDApple_1152x870_75hz: c_int = 220;
pub const kIOTimingIDAppleNTSC_ST: c_int = 230;
pub const kIOTimingIDAppleNTSC_FF: c_int = 232;
pub const kIOTimingIDAppleNTSC_STconv: c_int = 234;
pub const kIOTimingIDAppleNTSC_FFconv: c_int = 236;
pub const kIOTimingIDApplePAL_ST: c_int = 238;
pub const kIOTimingIDApplePAL_FF: c_int = 240;
pub const kIOTimingIDApplePAL_STconv: c_int = 242;
pub const kIOTimingIDApplePAL_FFconv: c_int = 244;
pub const kIOTimingIDVESA_1280x960_75hz: c_int = 250;
pub const kIOTimingIDVESA_1280x960_60hz: c_int = 252;
pub const kIOTimingIDVESA_1280x960_85hz: c_int = 254;
pub const kIOTimingIDVESA_1280x1024_60hz: c_int = 260;
pub const kIOTimingIDVESA_1280x1024_75hz: c_int = 262;
pub const kIOTimingIDVESA_1280x1024_85hz: c_int = 268;
pub const kIOTimingIDVESA_1600x1200_60hz: c_int = 280;
pub const kIOTimingIDVESA_1600x1200_65hz: c_int = 282;
pub const kIOTimingIDVESA_1600x1200_70hz: c_int = 284;
pub const kIOTimingIDVESA_1600x1200_75hz: c_int = 286;
pub const kIOTimingIDVESA_1600x1200_80hz: c_int = 288;
pub const kIOTimingIDVESA_1600x1200_85hz: c_int = 289;
pub const kIOTimingIDVESA_1792x1344_60hz: c_int = 296;
pub const kIOTimingIDVESA_1792x1344_75hz: c_int = 298;
pub const kIOTimingIDVESA_1856x1392_60hz: c_int = 300;
pub const kIOTimingIDVESA_1856x1392_75hz: c_int = 302;
pub const kIOTimingIDVESA_1920x1440_60hz: c_int = 304;
pub const kIOTimingIDVESA_1920x1440_75hz: c_int = 306;
pub const kIOTimingIDSMPTE240M_60hz: c_int = 400;
pub const kIOTimingIDFilmRate_48hz: c_int = 410;
pub const kIOTimingIDSony_1600x1024_76hz: c_int = 500;
pub const kIOTimingIDSony_1920x1080_60hz: c_int = 510;
pub const kIOTimingIDSony_1920x1080_72hz: c_int = 520;
pub const kIOTimingIDSony_1920x1200_76hz: c_int = 540;
pub const kIOTimingIDApple_0x0_0hz_Offline: c_int = 550;
pub const kIOTimingIDVESA_848x480_60hz: c_int = 570;
pub const kIOTimingIDVESA_1360x768_60hz: c_int = 590;
const enum_unnamed_1440 = c_uint;
pub const kIOHibernatePreviewActive: c_int = 1;
pub const kIOHibernatePreviewUpdates: c_int = 2;
const enum_unnamed_1441 = c_uint;
pub const kIOFBAVSignalTypeUnknown: c_int = 0;
pub const kIOFBAVSignalTypeVGA: c_int = 1;
pub const kIOFBAVSignalTypeDVI: c_int = 2;
pub const kIOFBAVSignalTypeHDMI: c_int = 8;
pub const kIOFBAVSignalTypeDP: c_int = 16;
const enum_unnamed_1442 = c_uint;
pub const struct_IOFBDPLinkConfig = extern struct {
    version: u16,
    bitRate: u8,
    __reservedA: [1]u8,
    t1Time: u16,
    t2Time: u16,
    t3Time: u16,
    idlePatterns: u8,
    laneCount: u8,
    voltage: u8,
    preEmphasis: u8,
    downspread: u8,
    scrambler: u8,
    maxBitRate: u8,
    maxLaneCount: u8,
    maxDownspread: u8,
    __reservedB: [9]u8,
};
pub const IOFBDPLinkConfig = struct_IOFBDPLinkConfig;
pub const kIOFBBitRateRBR: c_int = 6;
pub const kIOFBBitRateHBR: c_int = 10;
pub const kIOFBBitRateHBR2: c_int = 20;
const enum_unnamed_1443 = c_uint;
pub const kIOFBLinkVoltageLevel0: c_int = 0;
pub const kIOFBLinkVoltageLevel1: c_int = 1;
pub const kIOFBLinkVoltageLevel2: c_int = 2;
pub const kIOFBLinkVoltageLevel3: c_int = 3;
const enum_unnamed_1444 = c_uint;
pub const kIOFBLinkPreEmphasisLevel0: c_int = 0;
pub const kIOFBLinkPreEmphasisLevel1: c_int = 1;
pub const kIOFBLinkPreEmphasisLevel2: c_int = 2;
pub const kIOFBLinkPreEmphasisLevel3: c_int = 3;
const enum_unnamed_1445 = c_uint;
pub const kIOFBLinkDownspreadNone: c_int = 0;
pub const kIOFBLinkDownspreadMax: c_int = 1;
const enum_unnamed_1446 = c_uint;
pub const kIOFBLinkScramblerNormal: c_int = 0;
pub const kIOFBLinkScramblerAlternate: c_int = 1;
const enum_unnamed_1447 = c_uint;
pub const kDisplayVendorIDUnknown: c_int = 1970170734;
pub const kDisplayProductIDGeneric: c_int = 1815;
const enum_unnamed_1448 = c_uint;
pub const kDisplaySubPixelLayoutUndefined: c_int = 0;
pub const kDisplaySubPixelLayoutRGB: c_int = 1;
pub const kDisplaySubPixelLayoutBGR: c_int = 2;
pub const kDisplaySubPixelLayoutQuadGBL: c_int = 3;
pub const kDisplaySubPixelLayoutQuadGBR: c_int = 4;
pub const kDisplaySubPixelConfigurationUndefined: c_int = 0;
pub const kDisplaySubPixelConfigurationDelta: c_int = 1;
pub const kDisplaySubPixelConfigurationStripe: c_int = 2;
pub const kDisplaySubPixelConfigurationStripeOffset: c_int = 3;
pub const kDisplaySubPixelConfigurationQuad: c_int = 4;
pub const kDisplaySubPixelShapeUndefined: c_int = 0;
pub const kDisplaySubPixelShapeRound: c_int = 1;
pub const kDisplaySubPixelShapeSquare: c_int = 2;
pub const kDisplaySubPixelShapeRectangular: c_int = 3;
pub const kDisplaySubPixelShapeOval: c_int = 4;
pub const kDisplaySubPixelShapeElliptical: c_int = 5;
const enum_unnamed_1449 = c_uint;
pub const struct_evsioKeymapping = extern struct {
    size: c_int,
    mapping: [*c]u8,
};
pub const NXKeyMapping = struct_evsioKeymapping;
pub const struct_evsioMouseScaling = extern struct {
    numScaleLevels: c_int,
    scaleThresholds: [20]c_short,
    scaleFactors: [20]c_short,
};
pub const NXMouseScaling = struct_evsioMouseScaling;
pub const NX_OneButton: c_int = 0;
pub const NX_LeftButton: c_int = 1;
pub const NX_RightButton: c_int = 2;
pub const NXMouseButton = c_uint;
pub const struct___IOFixedPoint32 = extern struct {
    x: i32,
    y: i32,
};
pub const IOFixedPoint32 = struct___IOFixedPoint32;
pub const NXEventSystemInfoType = [*c]c_int;
pub const NXEventSystemInfoData = [1024]c_int;
pub const NXEventSystemDevice = extern struct {
    interface: c_int,
    interface_addr: c_int,
    dev_type: c_int,
    id: c_int,
};
pub const NXEventSystemDeviceList = extern struct {
    dev: [16]NXEventSystemDevice,
};
pub const EVNOP: c_int = 0;
pub const EVHIDE: c_int = 1;
pub const EVSHOW: c_int = 2;
pub const EVMOVE: c_int = 3;
pub const EVLEVEL: c_int = 4;
pub const EvCmd = c_uint;
pub const NXCoord = f32;
pub const struct__NXPoint = extern struct {
    x: NXCoord,
    y: NXCoord,
};
pub const NXPoint = struct__NXPoint;
pub const struct__NXSize = extern struct {
    width: NXCoord,
    height: NXCoord,
};
pub const NXSize = struct__NXSize;
const struct_unnamed_1450 = extern struct {
    x: SInt16,
    y: SInt16,
};
pub const struct__NXTabletPointData = extern struct {
    x: SInt32,
    y: SInt32,
    z: SInt32,
    buttons: UInt16,
    pressure: UInt16,
    tilt: struct_unnamed_1450,
    rotation: UInt16,
    tangentialPressure: SInt16,
    deviceID: UInt16,
    vendor1: SInt16,
    vendor2: SInt16,
    vendor3: SInt16,
};
pub const NXTabletPointData = struct__NXTabletPointData;
pub const NXTabletPointDataPtr = [*c]struct__NXTabletPointData;
pub const struct__NXTabletProximityData = extern struct {
    vendorID: UInt16,
    tabletID: UInt16,
    pointerID: UInt16,
    deviceID: UInt16,
    systemTabletID: UInt16,
    vendorPointerType: UInt16,
    pointerSerialNumber: UInt32,
    uniqueID: UInt64,
    capabilityMask: UInt32,
    pointerType: UInt8,
    enterProximity: UInt8,
    reserved1: SInt16,
};
pub const NXTabletProximityData = struct__NXTabletProximityData;
pub const NXTabletProximityDataPtr = [*c]struct__NXTabletProximityData;
const union_unnamed_1452 = extern union {
    point: NXTabletPointData,
    proximity: NXTabletProximityData,
};
const struct_unnamed_1451 = extern struct {
    subx: UInt8,
    suby: UInt8,
    eventNum: SInt16,
    click: SInt32,
    pressure: UInt8,
    buttonNumber: UInt8,
    subType: UInt8,
    reserved2: UInt8,
    reserved3: SInt32,
    tablet: union_unnamed_1452,
};
const union_unnamed_1454 = extern union {
    point: NXTabletPointData,
    proximity: NXTabletProximityData,
};
const struct_unnamed_1453 = extern struct {
    dx: SInt32,
    dy: SInt32,
    subx: UInt8,
    suby: UInt8,
    subType: UInt8,
    reserved1: UInt8,
    reserved2: SInt32,
    tablet: union_unnamed_1454,
};
const struct_unnamed_1455 = extern struct {
    origCharSet: UInt16,
    repeat: SInt16,
    charSet: UInt16,
    charCode: UInt16,
    keyCode: UInt16,
    origCharCode: UInt16,
    reserved1: SInt32,
    keyboardType: UInt32,
    reserved2: SInt32,
    reserved3: SInt32,
    reserved4: SInt32,
    reserved5: [4]SInt32,
};
const struct_unnamed_1456 = extern struct {
    reserved: SInt16,
    eventNum: SInt16,
    trackingNum: SInt32,
    userData: SInt32,
    reserved1: SInt32,
    reserved2: SInt32,
    reserved3: SInt32,
    reserved4: SInt32,
    reserved5: SInt32,
    reserved6: [4]SInt32,
};
const struct_unnamed_1457 = extern struct {
    deltaAxis1: SInt16,
    deltaAxis2: SInt16,
    deltaAxis3: SInt16,
    reserved1: SInt16,
    fixedDeltaAxis1: SInt32,
    fixedDeltaAxis2: SInt32,
    fixedDeltaAxis3: SInt32,
    pointDeltaAxis1: SInt32,
    pointDeltaAxis2: SInt32,
    pointDeltaAxis3: SInt32,
    reserved8: [4]SInt32,
};
const union_unnamed_1459 = extern union {
    F: [11]f32,
    L: [11]SInt32,
    S: [22]SInt16,
    C: [44]u8,
};
const struct_unnamed_1458 = extern struct {
    reserved: SInt16,
    subType: SInt16,
    misc: union_unnamed_1459,
};
const struct_unnamed_1461 = extern struct {
    x: SInt16,
    y: SInt16,
};
const struct_unnamed_1460 = extern struct {
    x: SInt32,
    y: SInt32,
    z: SInt32,
    buttons: UInt16,
    pressure: UInt16,
    tilt: struct_unnamed_1461,
    rotation: UInt16,
    tangentialPressure: SInt16,
    deviceID: UInt16,
    vendor1: SInt16,
    vendor2: SInt16,
    vendor3: SInt16,
    reserved: [4]SInt32,
};
const struct_unnamed_1462 = extern struct {
    vendorID: UInt16,
    tabletID: UInt16,
    pointerID: UInt16,
    deviceID: UInt16,
    systemTabletID: UInt16,
    vendorPointerType: UInt16,
    pointerSerialNumber: UInt32,
    uniqueID: UInt64,
    capabilityMask: UInt32,
    pointerType: UInt8,
    enterProximity: UInt8,
    reserved1: SInt16,
    reserved2: [4]SInt32,
};
pub const NXEventData = extern union {
    mouse: struct_unnamed_1451,
    mouseMove: struct_unnamed_1453,
    key: struct_unnamed_1455,
    tracking: struct_unnamed_1456,
    scrollWheel: struct_unnamed_1457,
    zoom: struct_unnamed_1457,
    compound: struct_unnamed_1458,
    tablet: struct_unnamed_1460,
    proximity: struct_unnamed_1462,
};
const struct_unnamed_1463 = extern struct {
    x: SInt32,
    y: SInt32,
};
pub const struct__NXEvent = extern struct {
    type: SInt32,
    location: struct_unnamed_1463,
    time: UInt64,
    flags: SInt32,
    window: UInt32,
    service_id: UInt64,
    ext_pid: SInt32,
    data: NXEventData,
};
pub const NXEvent = struct__NXEvent;
pub const NXEventPtr = [*c]struct__NXEvent;
pub const struct__NXEventExtension = extern struct {
    flags: UInt32,
    audit: audit_token_t,
};
pub const NXEventExtension = struct__NXEventExtension;
pub const struct__NXEventExt = extern struct {
    payload: NXEvent,
    extension: NXEventExtension,
};
pub const NXEventExt = struct__NXEventExt;
pub const struct___CGEvent = opaque {};
pub const CGEventRef = ?*struct___CGEvent;
pub const CGMouseButton = u32;
pub const kCGMouseButtonLeft: c_int = 0;
pub const kCGMouseButtonRight: c_int = 1;
pub const kCGMouseButtonCenter: c_int = 2;
const enum_unnamed_1464 = c_uint;
pub const CGScrollEventUnit = u32;
pub const kCGScrollEventUnitPixel: c_int = 0;
pub const kCGScrollEventUnitLine: c_int = 1;
const enum_unnamed_1465 = c_uint;
pub const CGMomentumScrollPhase = u32;
pub const kCGMomentumScrollPhaseNone: c_int = 0;
pub const kCGMomentumScrollPhaseBegin: c_int = 1;
pub const kCGMomentumScrollPhaseContinue: c_int = 2;
pub const kCGMomentumScrollPhaseEnd: c_int = 3;
const enum_unnamed_1466 = c_uint;
pub const CGScrollPhase = u32;
pub const kCGScrollPhaseBegan: c_int = 1;
pub const kCGScrollPhaseChanged: c_int = 2;
pub const kCGScrollPhaseEnded: c_int = 4;
pub const kCGScrollPhaseCancelled: c_int = 8;
pub const kCGScrollPhaseMayBegin: c_int = 128;
const enum_unnamed_1467 = c_uint;
pub const CGGesturePhase = u32;
pub const kCGGesturePhaseNone: c_int = 0;
pub const kCGGesturePhaseBegan: c_int = 1;
pub const kCGGesturePhaseChanged: c_int = 2;
pub const kCGGesturePhaseEnded: c_int = 4;
pub const kCGGesturePhaseCancelled: c_int = 8;
pub const kCGGesturePhaseMayBegin: c_int = 128;
const enum_unnamed_1468 = c_uint;
pub const CGEventFlags = u64;
pub const kCGEventFlagMaskAlphaShift: c_int = 65536;
pub const kCGEventFlagMaskShift: c_int = 131072;
pub const kCGEventFlagMaskControl: c_int = 262144;
pub const kCGEventFlagMaskAlternate: c_int = 524288;
pub const kCGEventFlagMaskCommand: c_int = 1048576;
pub const kCGEventFlagMaskHelp: c_int = 4194304;
pub const kCGEventFlagMaskSecondaryFn: c_int = 8388608;
pub const kCGEventFlagMaskNumericPad: c_int = 2097152;
pub const kCGEventFlagMaskNonCoalesced: c_int = 256;
const enum_unnamed_1469 = c_uint;
pub const CGEventType = u32;
pub const kCGEventNull: c_int = 0;
pub const kCGEventLeftMouseDown: c_int = 1;
pub const kCGEventLeftMouseUp: c_int = 2;
pub const kCGEventRightMouseDown: c_int = 3;
pub const kCGEventRightMouseUp: c_int = 4;
pub const kCGEventMouseMoved: c_int = 5;
pub const kCGEventLeftMouseDragged: c_int = 6;
pub const kCGEventRightMouseDragged: c_int = 7;
pub const kCGEventKeyDown: c_int = 10;
pub const kCGEventKeyUp: c_int = 11;
pub const kCGEventFlagsChanged: c_int = 12;
pub const kCGEventScrollWheel: c_int = 22;
pub const kCGEventTabletPointer: c_int = 23;
pub const kCGEventTabletProximity: c_int = 24;
pub const kCGEventOtherMouseDown: c_int = 25;
pub const kCGEventOtherMouseUp: c_int = 26;
pub const kCGEventOtherMouseDragged: c_int = 27;
pub const kCGEventTapDisabledByTimeout: c_uint = 4294967294;
pub const kCGEventTapDisabledByUserInput: c_uint = 4294967295;
const enum_unnamed_1470 = c_uint;
pub const CGEventTimestamp = u64;
pub const CGEventField = u32;
pub const kCGMouseEventNumber: c_int = 0;
pub const kCGMouseEventClickState: c_int = 1;
pub const kCGMouseEventPressure: c_int = 2;
pub const kCGMouseEventButtonNumber: c_int = 3;
pub const kCGMouseEventDeltaX: c_int = 4;
pub const kCGMouseEventDeltaY: c_int = 5;
pub const kCGMouseEventInstantMouser: c_int = 6;
pub const kCGMouseEventSubtype: c_int = 7;
pub const kCGKeyboardEventAutorepeat: c_int = 8;
pub const kCGKeyboardEventKeycode: c_int = 9;
pub const kCGKeyboardEventKeyboardType: c_int = 10;
pub const kCGScrollWheelEventDeltaAxis1: c_int = 11;
pub const kCGScrollWheelEventDeltaAxis2: c_int = 12;
pub const kCGScrollWheelEventDeltaAxis3: c_int = 13;
pub const kCGScrollWheelEventFixedPtDeltaAxis1: c_int = 93;
pub const kCGScrollWheelEventFixedPtDeltaAxis2: c_int = 94;
pub const kCGScrollWheelEventFixedPtDeltaAxis3: c_int = 95;
pub const kCGScrollWheelEventPointDeltaAxis1: c_int = 96;
pub const kCGScrollWheelEventPointDeltaAxis2: c_int = 97;
pub const kCGScrollWheelEventPointDeltaAxis3: c_int = 98;
pub const kCGScrollWheelEventScrollPhase: c_int = 99;
pub const kCGScrollWheelEventScrollCount: c_int = 100;
pub const kCGScrollWheelEventMomentumPhase: c_int = 123;
pub const kCGScrollWheelEventInstantMouser: c_int = 14;
pub const kCGTabletEventPointX: c_int = 15;
pub const kCGTabletEventPointY: c_int = 16;
pub const kCGTabletEventPointZ: c_int = 17;
pub const kCGTabletEventPointButtons: c_int = 18;
pub const kCGTabletEventPointPressure: c_int = 19;
pub const kCGTabletEventTiltX: c_int = 20;
pub const kCGTabletEventTiltY: c_int = 21;
pub const kCGTabletEventRotation: c_int = 22;
pub const kCGTabletEventTangentialPressure: c_int = 23;
pub const kCGTabletEventDeviceID: c_int = 24;
pub const kCGTabletEventVendor1: c_int = 25;
pub const kCGTabletEventVendor2: c_int = 26;
pub const kCGTabletEventVendor3: c_int = 27;
pub const kCGTabletProximityEventVendorID: c_int = 28;
pub const kCGTabletProximityEventTabletID: c_int = 29;
pub const kCGTabletProximityEventPointerID: c_int = 30;
pub const kCGTabletProximityEventDeviceID: c_int = 31;
pub const kCGTabletProximityEventSystemTabletID: c_int = 32;
pub const kCGTabletProximityEventVendorPointerType: c_int = 33;
pub const kCGTabletProximityEventVendorPointerSerialNumber: c_int = 34;
pub const kCGTabletProximityEventVendorUniqueID: c_int = 35;
pub const kCGTabletProximityEventCapabilityMask: c_int = 36;
pub const kCGTabletProximityEventPointerType: c_int = 37;
pub const kCGTabletProximityEventEnterProximity: c_int = 38;
pub const kCGEventTargetProcessSerialNumber: c_int = 39;
pub const kCGEventTargetUnixProcessID: c_int = 40;
pub const kCGEventSourceUnixProcessID: c_int = 41;
pub const kCGEventSourceUserData: c_int = 42;
pub const kCGEventSourceUserID: c_int = 43;
pub const kCGEventSourceGroupID: c_int = 44;
pub const kCGEventSourceStateID: c_int = 45;
pub const kCGScrollWheelEventIsContinuous: c_int = 88;
pub const kCGMouseEventWindowUnderMousePointer: c_int = 91;
pub const kCGMouseEventWindowUnderMousePointerThatCanHandleThisEvent: c_int = 92;
pub const kCGEventUnacceleratedPointerMovementX: c_int = 170;
pub const kCGEventUnacceleratedPointerMovementY: c_int = 171;
const enum_unnamed_1471 = c_uint;
pub const CGEventMouseSubtype = u32;
pub const kCGEventMouseSubtypeDefault: c_int = 0;
pub const kCGEventMouseSubtypeTabletPoint: c_int = 1;
pub const kCGEventMouseSubtypeTabletProximity: c_int = 2;
const enum_unnamed_1472 = c_uint;
pub const CGEventTapLocation = u32;
pub const kCGHIDEventTap: c_int = 0;
pub const kCGSessionEventTap: c_int = 1;
pub const kCGAnnotatedSessionEventTap: c_int = 2;
const enum_unnamed_1473 = c_uint;
pub const CGEventTapPlacement = u32;
pub const kCGHeadInsertEventTap: c_int = 0;
pub const kCGTailAppendEventTap: c_int = 1;
const enum_unnamed_1474 = c_uint;
pub const CGEventTapOptions = u32;
pub const kCGEventTapOptionDefault: c_int = 0;
pub const kCGEventTapOptionListenOnly: c_int = 1;
const enum_unnamed_1475 = c_uint;
pub const CGEventMask = u64;
pub const struct___CGEventTapProxy = opaque {};
pub const CGEventTapProxy = ?*struct___CGEventTapProxy;
pub const CGEventTapCallBack = ?*const fn (CGEventTapProxy, CGEventType, CGEventRef, ?*anyopaque) callconv(.C) CGEventRef;
pub const struct___CGEventTapInformation = extern struct {
    eventTapID: u32,
    tapPoint: CGEventTapLocation,
    options: CGEventTapOptions,
    eventsOfInterest: CGEventMask,
    tappingProcess: pid_t,
    processBeingTapped: pid_t,
    enabled: bool,
    minUsecLatency: f32,
    avgUsecLatency: f32,
    maxUsecLatency: f32,
};
pub const CGEventTapInformation = struct___CGEventTapInformation;
pub const struct___CGEventSource = opaque {};
pub const CGEventSourceRef = ?*struct___CGEventSource;
pub const CGEventSourceStateID = i32;
pub const kCGEventSourceStatePrivate: c_int = -1;
pub const kCGEventSourceStateCombinedSessionState: c_int = 0;
pub const kCGEventSourceStateHIDSystemState: c_int = 1;
const enum_unnamed_1476 = c_int;
pub const CGEventSourceKeyboardType = u32;
pub extern fn CGEventGetTypeID() CFTypeID;
pub extern fn CGEventCreate(source: CGEventSourceRef) CGEventRef;
pub extern fn CGEventCreateData(allocator: CFAllocatorRef, event: CGEventRef) CFDataRef;
pub extern fn CGEventCreateFromData(allocator: CFAllocatorRef, data: CFDataRef) CGEventRef;
pub extern fn CGEventCreateMouseEvent(source: CGEventSourceRef, mouseType: CGEventType, mouseCursorPosition: CGPoint, mouseButton: CGMouseButton) CGEventRef;
pub extern fn CGEventCreateKeyboardEvent(source: CGEventSourceRef, virtualKey: CGKeyCode, keyDown: bool) CGEventRef;
pub extern fn CGEventCreateScrollWheelEvent(source: CGEventSourceRef, units: CGScrollEventUnit, wheelCount: u32, wheel1: i32, ...) CGEventRef;
pub extern fn CGEventCreateScrollWheelEvent2(source: CGEventSourceRef, units: CGScrollEventUnit, wheelCount: u32, wheel1: i32, wheel2: i32, wheel3: i32) CGEventRef;
pub extern fn CGEventCreateCopy(event: CGEventRef) CGEventRef;
pub extern fn CGEventCreateSourceFromEvent(event: CGEventRef) CGEventSourceRef;
pub extern fn CGEventSetSource(event: CGEventRef, source: CGEventSourceRef) void;
pub extern fn CGEventGetType(event: CGEventRef) CGEventType;
pub extern fn CGEventSetType(event: CGEventRef, @"type": CGEventType) void;
pub extern fn CGEventGetTimestamp(event: CGEventRef) CGEventTimestamp;
pub extern fn CGEventSetTimestamp(event: CGEventRef, timestamp: CGEventTimestamp) void;
pub extern fn CGEventGetLocation(event: CGEventRef) CGPoint;
pub extern fn CGEventGetUnflippedLocation(event: CGEventRef) CGPoint;
pub extern fn CGEventSetLocation(event: CGEventRef, location: CGPoint) void;
pub extern fn CGEventGetFlags(event: CGEventRef) CGEventFlags;
pub extern fn CGEventSetFlags(event: CGEventRef, flags: CGEventFlags) void;
pub extern fn CGEventKeyboardGetUnicodeString(event: CGEventRef, maxStringLength: UniCharCount, actualStringLength: [*c]UniCharCount, unicodeString: [*c]UniChar) void;
pub extern fn CGEventKeyboardSetUnicodeString(event: CGEventRef, stringLength: UniCharCount, unicodeString: [*c]const UniChar) void;
pub extern fn CGEventGetIntegerValueField(event: CGEventRef, field: CGEventField) i64;
pub extern fn CGEventSetIntegerValueField(event: CGEventRef, field: CGEventField, value: i64) void;
pub extern fn CGEventGetDoubleValueField(event: CGEventRef, field: CGEventField) f64;
pub extern fn CGEventSetDoubleValueField(event: CGEventRef, field: CGEventField, value: f64) void;
pub extern fn CGEventTapCreate(tap: CGEventTapLocation, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: ?*anyopaque) CFMachPortRef;
pub extern fn CGEventTapCreateForPSN(processSerialNumber: ?*anyopaque, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: ?*anyopaque) CFMachPortRef;
pub extern fn CGEventTapCreateForPid(pid: pid_t, place: CGEventTapPlacement, options: CGEventTapOptions, eventsOfInterest: CGEventMask, callback: CGEventTapCallBack, userInfo: ?*anyopaque) CFMachPortRef;
pub extern fn CGEventTapEnable(tap: CFMachPortRef, enable: bool) void;
pub extern fn CGEventTapIsEnabled(tap: CFMachPortRef) bool;
pub extern fn CGEventTapPostEvent(proxy: CGEventTapProxy, event: CGEventRef) void;
pub extern fn CGEventPost(tap: CGEventTapLocation, event: CGEventRef) void;
pub extern fn CGEventPostToPSN(processSerialNumber: ?*anyopaque, event: CGEventRef) void;
pub extern fn CGEventPostToPid(pid: pid_t, event: CGEventRef) void;
pub extern fn CGGetEventTapList(maxNumberOfTaps: u32, tapList: [*c]CGEventTapInformation, eventTapCount: [*c]u32) CGError;
pub extern fn CGPreflightListenEventAccess() bool;
pub extern fn CGRequestListenEventAccess() bool;
pub extern fn CGPreflightPostEventAccess() bool;
pub extern fn CGRequestPostEventAccess() bool;
pub extern fn CGEventSourceGetTypeID() CFTypeID;
pub extern fn CGEventSourceCreate(stateID: CGEventSourceStateID) CGEventSourceRef;
pub extern fn CGEventSourceGetKeyboardType(source: CGEventSourceRef) CGEventSourceKeyboardType;
pub extern fn CGEventSourceSetKeyboardType(source: CGEventSourceRef, keyboardType: CGEventSourceKeyboardType) void;
pub extern fn CGEventSourceGetPixelsPerLine(source: CGEventSourceRef) f64;
pub extern fn CGEventSourceSetPixelsPerLine(source: CGEventSourceRef, pixelsPerLine: f64) void;
pub extern fn CGEventSourceGetSourceStateID(source: CGEventSourceRef) CGEventSourceStateID;
pub extern fn CGEventSourceButtonState(stateID: CGEventSourceStateID, button: CGMouseButton) bool;
pub extern fn CGEventSourceKeyState(stateID: CGEventSourceStateID, key: CGKeyCode) bool;
pub extern fn CGEventSourceFlagsState(stateID: CGEventSourceStateID) CGEventFlags;
pub extern fn CGEventSourceSecondsSinceLastEventType(stateID: CGEventSourceStateID, eventType: CGEventType) CFTimeInterval;
pub extern fn CGEventSourceCounterForEventType(stateID: CGEventSourceStateID, eventType: CGEventType) u32;
pub extern fn CGEventSourceSetUserData(source: CGEventSourceRef, userData: i64) void;
pub extern fn CGEventSourceGetUserData(source: CGEventSourceRef) i64;
pub extern fn CGEventSourceSetLocalEventsFilterDuringSuppressionState(source: CGEventSourceRef, filter: CGEventFilterMask, state: CGEventSuppressionState) void;
pub extern fn CGEventSourceGetLocalEventsFilterDuringSuppressionState(source: CGEventSourceRef, state: CGEventSuppressionState) CGEventFilterMask;
pub extern fn CGEventSourceSetLocalEventsSuppressionInterval(source: CGEventSourceRef, seconds: CFTimeInterval) void;
pub extern fn CGEventSourceGetLocalEventsSuppressionInterval(source: CGEventSourceRef) CFTimeInterval;
pub const struct_CGPSConverter = opaque {};
pub const CGPSConverterRef = ?*struct_CGPSConverter;
pub const CGPSConverterBeginDocumentCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const CGPSConverterEndDocumentCallback = ?*const fn (?*anyopaque, bool) callconv(.C) void;
pub const CGPSConverterBeginPageCallback = ?*const fn (?*anyopaque, usize, CFDictionaryRef) callconv(.C) void;
pub const CGPSConverterEndPageCallback = ?*const fn (?*anyopaque, usize, CFDictionaryRef) callconv(.C) void;
pub const CGPSConverterProgressCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const CGPSConverterMessageCallback = ?*const fn (?*anyopaque, CFStringRef) callconv(.C) void;
pub const CGPSConverterReleaseInfoCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const struct_CGPSConverterCallbacks = extern struct {
    version: c_uint,
    beginDocument: CGPSConverterBeginDocumentCallback,
    endDocument: CGPSConverterEndDocumentCallback,
    beginPage: CGPSConverterBeginPageCallback,
    endPage: CGPSConverterEndPageCallback,
    noteProgress: CGPSConverterProgressCallback,
    noteMessage: CGPSConverterMessageCallback,
    releaseInfo: CGPSConverterReleaseInfoCallback,
};
pub const CGPSConverterCallbacks = struct_CGPSConverterCallbacks;
pub extern fn CGPSConverterCreate(info: ?*anyopaque, callbacks: [*c]const CGPSConverterCallbacks, options: CFDictionaryRef) CGPSConverterRef;
pub extern fn CGPSConverterConvert(converter: CGPSConverterRef, provider: CGDataProviderRef, consumer: CGDataConsumerRef, options: CFDictionaryRef) bool;
pub extern fn CGPSConverterAbort(converter: CGPSConverterRef) bool;
pub extern fn CGPSConverterIsConverting(converter: CGPSConverterRef) bool;
pub extern fn CGPSConverterGetTypeID() CFTypeID;
pub extern fn CGSessionCopyCurrentDictionary() CFDictionaryRef;
pub extern const kCTFontSymbolicTrait: CFStringRef;
pub extern const kCTFontWeightTrait: CFStringRef;
pub extern const kCTFontWidthTrait: CFStringRef;
pub extern const kCTFontSlantTrait: CFStringRef;
pub const kCTFontClassMaskShift: c_int = 28;
const enum_unnamed_1477 = c_uint;
pub const CTFontSymbolicTraits = u32;
pub const kCTFontTraitItalic: c_int = 1;
pub const kCTFontTraitBold: c_int = 2;
pub const kCTFontTraitExpanded: c_int = 32;
pub const kCTFontTraitCondensed: c_int = 64;
pub const kCTFontTraitMonoSpace: c_int = 1024;
pub const kCTFontTraitVertical: c_int = 2048;
pub const kCTFontTraitUIOptimized: c_int = 4096;
pub const kCTFontTraitColorGlyphs: c_int = 8192;
pub const kCTFontTraitComposite: c_int = 16384;
pub const kCTFontTraitClassMask: c_uint = 4026531840;
pub const kCTFontItalicTrait: c_int = 1;
pub const kCTFontBoldTrait: c_int = 2;
pub const kCTFontExpandedTrait: c_int = 32;
pub const kCTFontCondensedTrait: c_int = 64;
pub const kCTFontMonoSpaceTrait: c_int = 1024;
pub const kCTFontVerticalTrait: c_int = 2048;
pub const kCTFontUIOptimizedTrait: c_int = 4096;
pub const kCTFontColorGlyphsTrait: c_int = 8192;
pub const kCTFontCompositeTrait: c_int = 16384;
pub const kCTFontClassMaskTrait: c_uint = 4026531840;
const enum_unnamed_1478 = c_uint;
pub const CTFontStylisticClass = u32;
pub const kCTFontClassUnknown: c_int = 0;
pub const kCTFontClassOldStyleSerifs: c_int = 268435456;
pub const kCTFontClassTransitionalSerifs: c_int = 536870912;
pub const kCTFontClassModernSerifs: c_int = 805306368;
pub const kCTFontClassClarendonSerifs: c_int = 1073741824;
pub const kCTFontClassSlabSerifs: c_int = 1342177280;
pub const kCTFontClassFreeformSerifs: c_int = 1879048192;
pub const kCTFontClassSansSerif: c_uint = 2147483648;
pub const kCTFontClassOrnamentals: c_uint = 2415919104;
pub const kCTFontClassScripts: c_uint = 2684354560;
pub const kCTFontClassSymbolic: c_uint = 3221225472;
pub const kCTFontUnknownClass: c_int = 0;
pub const kCTFontOldStyleSerifsClass: c_int = 268435456;
pub const kCTFontTransitionalSerifsClass: c_int = 536870912;
pub const kCTFontModernSerifsClass: c_int = 805306368;
pub const kCTFontClarendonSerifsClass: c_int = 1073741824;
pub const kCTFontSlabSerifsClass: c_int = 1342177280;
pub const kCTFontFreeformSerifsClass: c_int = 1879048192;
pub const kCTFontSansSerifClass: c_uint = 2147483648;
pub const kCTFontOrnamentalsClass: c_uint = 2415919104;
pub const kCTFontScriptsClass: c_uint = 2684354560;
pub const kCTFontSymbolicClass: c_uint = 3221225472;
const enum_unnamed_1479 = c_uint;
pub const struct___CTFontDescriptor = opaque {};
pub const CTFontDescriptorRef = ?*const struct___CTFontDescriptor;
pub extern fn CTFontDescriptorGetTypeID() CFTypeID;
pub extern const kCTFontURLAttribute: CFStringRef;
pub extern const kCTFontNameAttribute: CFStringRef;
pub extern const kCTFontDisplayNameAttribute: CFStringRef;
pub extern const kCTFontFamilyNameAttribute: CFStringRef;
pub extern const kCTFontStyleNameAttribute: CFStringRef;
pub extern const kCTFontTraitsAttribute: CFStringRef;
pub extern const kCTFontVariationAttribute: CFStringRef;
pub extern const kCTFontVariationAxesAttribute: CFStringRef;
pub extern const kCTFontSizeAttribute: CFStringRef;
pub extern const kCTFontMatrixAttribute: CFStringRef;
pub extern const kCTFontCascadeListAttribute: CFStringRef;
pub extern const kCTFontCharacterSetAttribute: CFStringRef;
pub extern const kCTFontLanguagesAttribute: CFStringRef;
pub extern const kCTFontBaselineAdjustAttribute: CFStringRef;
pub extern const kCTFontMacintoshEncodingsAttribute: CFStringRef;
pub extern const kCTFontFeaturesAttribute: CFStringRef;
pub extern const kCTFontFeatureSettingsAttribute: CFStringRef;
pub extern const kCTFontFixedAdvanceAttribute: CFStringRef;
pub extern const kCTFontOrientationAttribute: CFStringRef;
pub const CTFontOrientation = u32;
pub const kCTFontOrientationDefault: c_int = 0;
pub const kCTFontOrientationHorizontal: c_int = 1;
pub const kCTFontOrientationVertical: c_int = 2;
pub const kCTFontDefaultOrientation: c_int = 0;
pub const kCTFontHorizontalOrientation: c_int = 1;
pub const kCTFontVerticalOrientation: c_int = 2;
const enum_unnamed_1480 = c_uint;
pub extern const kCTFontFormatAttribute: CFStringRef;
pub const CTFontFormat = u32;
pub const kCTFontFormatUnrecognized: c_int = 0;
pub const kCTFontFormatOpenTypePostScript: c_int = 1;
pub const kCTFontFormatOpenTypeTrueType: c_int = 2;
pub const kCTFontFormatTrueType: c_int = 3;
pub const kCTFontFormatPostScript: c_int = 4;
pub const kCTFontFormatBitmap: c_int = 5;
const enum_unnamed_1481 = c_uint;
pub extern const kCTFontRegistrationScopeAttribute: CFStringRef;
pub extern const kCTFontPriorityAttribute: CFStringRef;
pub const kCTFontPrioritySystem: c_int = 10000;
pub const kCTFontPriorityNetwork: c_int = 20000;
pub const kCTFontPriorityComputer: c_int = 30000;
pub const kCTFontPriorityUser: c_int = 40000;
pub const kCTFontPriorityDynamic: c_int = 50000;
pub const kCTFontPriorityProcess: c_int = 60000;
const enum_unnamed_1482 = c_uint;
pub const CTFontPriority = u32;
pub extern const kCTFontEnabledAttribute: CFStringRef;
pub extern const kCTFontDownloadableAttribute: CFStringRef;
pub extern const kCTFontDownloadedAttribute: CFStringRef;
pub extern const kCTFontOpticalSizeAttribute: CFStringRef;
pub extern fn CTFontDescriptorCreateWithNameAndSize(name: CFStringRef, size: CGFloat) CTFontDescriptorRef;
pub extern fn CTFontDescriptorCreateWithAttributes(attributes: CFDictionaryRef) CTFontDescriptorRef;
pub extern fn CTFontDescriptorCreateCopyWithAttributes(original: CTFontDescriptorRef, attributes: CFDictionaryRef) CTFontDescriptorRef;
pub extern fn CTFontDescriptorCreateCopyWithFamily(original: CTFontDescriptorRef, family: CFStringRef) CTFontDescriptorRef;
pub extern fn CTFontDescriptorCreateCopyWithSymbolicTraits(original: CTFontDescriptorRef, symTraitValue: CTFontSymbolicTraits, symTraitMask: CTFontSymbolicTraits) CTFontDescriptorRef;
pub extern fn CTFontDescriptorCreateCopyWithVariation(original: CTFontDescriptorRef, variationIdentifier: CFNumberRef, variationValue: CGFloat) CTFontDescriptorRef;
pub extern fn CTFontDescriptorCreateCopyWithFeature(original: CTFontDescriptorRef, featureTypeIdentifier: CFNumberRef, featureSelectorIdentifier: CFNumberRef) CTFontDescriptorRef;
pub extern fn CTFontDescriptorCreateMatchingFontDescriptors(descriptor: CTFontDescriptorRef, mandatoryAttributes: CFSetRef) CFArrayRef;
pub extern fn CTFontDescriptorCreateMatchingFontDescriptor(descriptor: CTFontDescriptorRef, mandatoryAttributes: CFSetRef) CTFontDescriptorRef;
pub const CTFontDescriptorMatchingState = u32;
pub const kCTFontDescriptorMatchingDidBegin: c_int = 0;
pub const kCTFontDescriptorMatchingDidFinish: c_int = 1;
pub const kCTFontDescriptorMatchingWillBeginQuerying: c_int = 2;
pub const kCTFontDescriptorMatchingStalled: c_int = 3;
pub const kCTFontDescriptorMatchingWillBeginDownloading: c_int = 4;
pub const kCTFontDescriptorMatchingDownloading: c_int = 5;
pub const kCTFontDescriptorMatchingDidFinishDownloading: c_int = 6;
pub const kCTFontDescriptorMatchingDidMatch: c_int = 7;
pub const kCTFontDescriptorMatchingDidFailWithError: c_int = 8;
const enum_unnamed_1483 = c_uint;
pub extern const kCTFontDescriptorMatchingSourceDescriptor: CFStringRef;
pub extern const kCTFontDescriptorMatchingDescriptors: CFStringRef;
pub extern const kCTFontDescriptorMatchingResult: CFStringRef;
pub extern const kCTFontDescriptorMatchingPercentage: CFStringRef;
pub extern const kCTFontDescriptorMatchingCurrentAssetSize: CFStringRef;
pub extern const kCTFontDescriptorMatchingTotalDownloadedSize: CFStringRef;
pub extern const kCTFontDescriptorMatchingTotalAssetSize: CFStringRef;
pub extern const kCTFontDescriptorMatchingError: CFStringRef; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTFontDescriptor.h:503:16: warning: unsupported type: 'BlockPointer'
pub const CTFontDescriptorProgressHandler = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTFontDescriptor.h:503:16
pub extern fn CTFontDescriptorMatchFontDescriptorsWithProgressHandler(descriptors: CFArrayRef, mandatoryAttributes: CFSetRef, progressBlock: CTFontDescriptorProgressHandler) bool;
pub extern fn CTFontDescriptorCopyAttributes(descriptor: CTFontDescriptorRef) CFDictionaryRef;
pub extern fn CTFontDescriptorCopyAttribute(descriptor: CTFontDescriptorRef, attribute: CFStringRef) CFTypeRef;
pub extern fn CTFontDescriptorCopyLocalizedAttribute(descriptor: CTFontDescriptorRef, attribute: CFStringRef, language: [*c]CFStringRef) CFTypeRef;
pub const struct___CTFont = opaque {};
pub const CTFontRef = ?*const struct___CTFont;
pub extern fn CTFontGetTypeID() CFTypeID;
pub extern const kCTFontCopyrightNameKey: CFStringRef;
pub extern const kCTFontFamilyNameKey: CFStringRef;
pub extern const kCTFontSubFamilyNameKey: CFStringRef;
pub extern const kCTFontStyleNameKey: CFStringRef;
pub extern const kCTFontUniqueNameKey: CFStringRef;
pub extern const kCTFontFullNameKey: CFStringRef;
pub extern const kCTFontVersionNameKey: CFStringRef;
pub extern const kCTFontPostScriptNameKey: CFStringRef;
pub extern const kCTFontTrademarkNameKey: CFStringRef;
pub extern const kCTFontManufacturerNameKey: CFStringRef;
pub extern const kCTFontDesignerNameKey: CFStringRef;
pub extern const kCTFontDescriptionNameKey: CFStringRef;
pub extern const kCTFontVendorURLNameKey: CFStringRef;
pub extern const kCTFontDesignerURLNameKey: CFStringRef;
pub extern const kCTFontLicenseNameKey: CFStringRef;
pub extern const kCTFontLicenseURLNameKey: CFStringRef;
pub extern const kCTFontSampleTextNameKey: CFStringRef;
pub extern const kCTFontPostScriptCIDNameKey: CFStringRef;
pub extern fn CTFontCreateWithName(name: CFStringRef, size: CGFloat, matrix: [*c]const CGAffineTransform) CTFontRef;
pub extern fn CTFontCreateWithFontDescriptor(descriptor: CTFontDescriptorRef, size: CGFloat, matrix: [*c]const CGAffineTransform) CTFontRef;
pub const CTFontOptions = CFOptionFlags;
pub const kCTFontOptionsDefault: c_int = 0;
pub const kCTFontOptionsPreventAutoActivation: c_int = 1;
pub const kCTFontOptionsPreferSystemFont: c_int = 4;
const enum_unnamed_1484 = c_uint;
pub extern fn CTFontCreateWithNameAndOptions(name: CFStringRef, size: CGFloat, matrix: [*c]const CGAffineTransform, options: CTFontOptions) CTFontRef;
pub extern fn CTFontCreateWithFontDescriptorAndOptions(descriptor: CTFontDescriptorRef, size: CGFloat, matrix: [*c]const CGAffineTransform, options: CTFontOptions) CTFontRef;
pub const CTFontUIFontType = u32;
pub const kCTFontUIFontNone: c_uint = 4294967295;
pub const kCTFontUIFontUser: c_int = 0;
pub const kCTFontUIFontUserFixedPitch: c_int = 1;
pub const kCTFontUIFontSystem: c_int = 2;
pub const kCTFontUIFontEmphasizedSystem: c_int = 3;
pub const kCTFontUIFontSmallSystem: c_int = 4;
pub const kCTFontUIFontSmallEmphasizedSystem: c_int = 5;
pub const kCTFontUIFontMiniSystem: c_int = 6;
pub const kCTFontUIFontMiniEmphasizedSystem: c_int = 7;
pub const kCTFontUIFontViews: c_int = 8;
pub const kCTFontUIFontApplication: c_int = 9;
pub const kCTFontUIFontLabel: c_int = 10;
pub const kCTFontUIFontMenuTitle: c_int = 11;
pub const kCTFontUIFontMenuItem: c_int = 12;
pub const kCTFontUIFontMenuItemMark: c_int = 13;
pub const kCTFontUIFontMenuItemCmdKey: c_int = 14;
pub const kCTFontUIFontWindowTitle: c_int = 15;
pub const kCTFontUIFontPushButton: c_int = 16;
pub const kCTFontUIFontUtilityWindowTitle: c_int = 17;
pub const kCTFontUIFontAlertHeader: c_int = 18;
pub const kCTFontUIFontSystemDetail: c_int = 19;
pub const kCTFontUIFontEmphasizedSystemDetail: c_int = 20;
pub const kCTFontUIFontToolbar: c_int = 21;
pub const kCTFontUIFontSmallToolbar: c_int = 22;
pub const kCTFontUIFontMessage: c_int = 23;
pub const kCTFontUIFontPalette: c_int = 24;
pub const kCTFontUIFontToolTip: c_int = 25;
pub const kCTFontUIFontControlContent: c_int = 26;
pub const kCTFontNoFontType: c_uint = 4294967295;
pub const kCTFontUserFontType: c_int = 0;
pub const kCTFontUserFixedPitchFontType: c_int = 1;
pub const kCTFontSystemFontType: c_int = 2;
pub const kCTFontEmphasizedSystemFontType: c_int = 3;
pub const kCTFontSmallSystemFontType: c_int = 4;
pub const kCTFontSmallEmphasizedSystemFontType: c_int = 5;
pub const kCTFontMiniSystemFontType: c_int = 6;
pub const kCTFontMiniEmphasizedSystemFontType: c_int = 7;
pub const kCTFontViewsFontType: c_int = 8;
pub const kCTFontApplicationFontType: c_int = 9;
pub const kCTFontLabelFontType: c_int = 10;
pub const kCTFontMenuTitleFontType: c_int = 11;
pub const kCTFontMenuItemFontType: c_int = 12;
pub const kCTFontMenuItemMarkFontType: c_int = 13;
pub const kCTFontMenuItemCmdKeyFontType: c_int = 14;
pub const kCTFontWindowTitleFontType: c_int = 15;
pub const kCTFontPushButtonFontType: c_int = 16;
pub const kCTFontUtilityWindowTitleFontType: c_int = 17;
pub const kCTFontAlertHeaderFontType: c_int = 18;
pub const kCTFontSystemDetailFontType: c_int = 19;
pub const kCTFontEmphasizedSystemDetailFontType: c_int = 20;
pub const kCTFontToolbarFontType: c_int = 21;
pub const kCTFontSmallToolbarFontType: c_int = 22;
pub const kCTFontMessageFontType: c_int = 23;
pub const kCTFontPaletteFontType: c_int = 24;
pub const kCTFontToolTipFontType: c_int = 25;
pub const kCTFontControlContentFontType: c_int = 26;
const enum_unnamed_1485 = c_uint;
pub extern fn CTFontCreateUIFontForLanguage(uiType: CTFontUIFontType, size: CGFloat, language: CFStringRef) CTFontRef;
pub extern fn CTFontCreateCopyWithAttributes(font: CTFontRef, size: CGFloat, matrix: [*c]const CGAffineTransform, attributes: CTFontDescriptorRef) CTFontRef;
pub extern fn CTFontCreateCopyWithSymbolicTraits(font: CTFontRef, size: CGFloat, matrix: [*c]const CGAffineTransform, symTraitValue: CTFontSymbolicTraits, symTraitMask: CTFontSymbolicTraits) CTFontRef;
pub extern fn CTFontCreateCopyWithFamily(font: CTFontRef, size: CGFloat, matrix: [*c]const CGAffineTransform, family: CFStringRef) CTFontRef;
pub extern fn CTFontCreateForString(currentFont: CTFontRef, string: CFStringRef, range: CFRange) CTFontRef;
pub extern fn CTFontCreateForStringWithLanguage(currentFont: CTFontRef, string: CFStringRef, range: CFRange, language: CFStringRef) CTFontRef;
pub extern fn CTFontCopyFontDescriptor(font: CTFontRef) CTFontDescriptorRef;
pub extern fn CTFontCopyAttribute(font: CTFontRef, attribute: CFStringRef) CFTypeRef;
pub extern fn CTFontGetSize(font: CTFontRef) CGFloat;
pub extern fn CTFontGetMatrix(font: CTFontRef) CGAffineTransform;
pub extern fn CTFontGetSymbolicTraits(font: CTFontRef) CTFontSymbolicTraits;
pub extern fn CTFontCopyTraits(font: CTFontRef) CFDictionaryRef;
pub extern fn CTFontCopyPostScriptName(font: CTFontRef) CFStringRef;
pub extern fn CTFontCopyFamilyName(font: CTFontRef) CFStringRef;
pub extern fn CTFontCopyFullName(font: CTFontRef) CFStringRef;
pub extern fn CTFontCopyDisplayName(font: CTFontRef) CFStringRef;
pub extern fn CTFontCopyName(font: CTFontRef, nameKey: CFStringRef) CFStringRef;
pub extern fn CTFontCopyLocalizedName(font: CTFontRef, nameKey: CFStringRef, actualLanguage: [*c]CFStringRef) CFStringRef;
pub extern fn CTFontCopyCharacterSet(font: CTFontRef) CFCharacterSetRef;
pub extern fn CTFontGetStringEncoding(font: CTFontRef) CFStringEncoding;
pub extern fn CTFontCopySupportedLanguages(font: CTFontRef) CFArrayRef;
pub extern fn CTFontGetGlyphsForCharacters(font: CTFontRef, characters: [*c]const UniChar, glyphs: [*c]CGGlyph, count: CFIndex) bool;
pub extern fn CTFontGetAscent(font: CTFontRef) CGFloat;
pub extern fn CTFontGetDescent(font: CTFontRef) CGFloat;
pub extern fn CTFontGetLeading(font: CTFontRef) CGFloat;
pub extern fn CTFontGetUnitsPerEm(font: CTFontRef) c_uint;
pub extern fn CTFontGetGlyphCount(font: CTFontRef) CFIndex;
pub extern fn CTFontGetBoundingBox(font: CTFontRef) CGRect;
pub extern fn CTFontGetUnderlinePosition(font: CTFontRef) CGFloat;
pub extern fn CTFontGetUnderlineThickness(font: CTFontRef) CGFloat;
pub extern fn CTFontGetSlantAngle(font: CTFontRef) CGFloat;
pub extern fn CTFontGetCapHeight(font: CTFontRef) CGFloat;
pub extern fn CTFontGetXHeight(font: CTFontRef) CGFloat;
pub extern fn CTFontGetGlyphWithName(font: CTFontRef, glyphName: CFStringRef) CGGlyph;
pub extern fn CTFontCopyNameForGlyph(font: CTFontRef, glyph: CGGlyph) CFStringRef;
pub extern fn CTFontGetBoundingRectsForGlyphs(font: CTFontRef, orientation: CTFontOrientation, glyphs: [*c]const CGGlyph, boundingRects: [*c]CGRect, count: CFIndex) CGRect;
pub extern fn CTFontGetOpticalBoundsForGlyphs(font: CTFontRef, glyphs: [*c]const CGGlyph, boundingRects: [*c]CGRect, count: CFIndex, options: CFOptionFlags) CGRect;
pub extern fn CTFontGetAdvancesForGlyphs(font: CTFontRef, orientation: CTFontOrientation, glyphs: [*c]const CGGlyph, advances: [*c]CGSize, count: CFIndex) f64;
pub extern fn CTFontGetVerticalTranslationsForGlyphs(font: CTFontRef, glyphs: [*c]const CGGlyph, translations: [*c]CGSize, count: CFIndex) void;
pub extern fn CTFontCreatePathForGlyph(font: CTFontRef, glyph: CGGlyph, matrix: [*c]const CGAffineTransform) CGPathRef;
pub extern const kCTFontVariationAxisIdentifierKey: CFStringRef;
pub extern const kCTFontVariationAxisMinimumValueKey: CFStringRef;
pub extern const kCTFontVariationAxisMaximumValueKey: CFStringRef;
pub extern const kCTFontVariationAxisDefaultValueKey: CFStringRef;
pub extern const kCTFontVariationAxisNameKey: CFStringRef;
pub extern const kCTFontVariationAxisHiddenKey: CFStringRef;
pub extern fn CTFontCopyVariationAxes(font: CTFontRef) CFArrayRef;
pub extern fn CTFontCopyVariation(font: CTFontRef) CFDictionaryRef;
pub extern const kCTFontOpenTypeFeatureTag: CFStringRef;
pub extern const kCTFontOpenTypeFeatureValue: CFStringRef;
pub extern const kCTFontFeatureTypeIdentifierKey: CFStringRef;
pub extern const kCTFontFeatureTypeNameKey: CFStringRef;
pub extern const kCTFontFeatureTypeExclusiveKey: CFStringRef;
pub extern const kCTFontFeatureTypeSelectorsKey: CFStringRef;
pub extern const kCTFontFeatureSelectorIdentifierKey: CFStringRef;
pub extern const kCTFontFeatureSelectorNameKey: CFStringRef;
pub extern const kCTFontFeatureSelectorDefaultKey: CFStringRef;
pub extern const kCTFontFeatureSelectorSettingKey: CFStringRef;
pub extern const kCTFontFeatureSampleTextKey: CFStringRef;
pub extern const kCTFontFeatureTooltipTextKey: CFStringRef;
pub extern fn CTFontCopyFeatures(font: CTFontRef) CFArrayRef;
pub extern fn CTFontCopyFeatureSettings(font: CTFontRef) CFArrayRef;
pub extern fn CTFontCopyGraphicsFont(font: CTFontRef, attributes: [*c]CTFontDescriptorRef) CGFontRef;
pub extern fn CTFontCreateWithGraphicsFont(graphicsFont: CGFontRef, size: CGFloat, matrix: [*c]const CGAffineTransform, attributes: CTFontDescriptorRef) CTFontRef;
pub extern fn CTFontGetPlatformFont(font: CTFontRef, attributes: [*c]CTFontDescriptorRef) ATSFontRef;
pub extern fn CTFontCreateWithPlatformFont(platformFont: ATSFontRef, size: CGFloat, matrix: [*c]const CGAffineTransform, attributes: CTFontDescriptorRef) CTFontRef;
pub extern fn CTFontCreateWithQuickdrawInstance(name: ConstStr255Param, identifier: i16, style: u8, size: CGFloat) CTFontRef;
pub const kCTFontTableBASE: c_int = 1111577413;
pub const kCTFontTableCBDT: c_int = 1128416340;
pub const kCTFontTableCBLC: c_int = 1128418371;
pub const kCTFontTableCFF: c_int = 1128678944;
pub const kCTFontTableCFF2: c_int = 1128678962;
pub const kCTFontTableCOLR: c_int = 1129270354;
pub const kCTFontTableCPAL: c_int = 1129333068;
pub const kCTFontTableDSIG: c_int = 1146308935;
pub const kCTFontTableEBDT: c_int = 1161970772;
pub const kCTFontTableEBLC: c_int = 1161972803;
pub const kCTFontTableEBSC: c_int = 1161974595;
pub const kCTFontTableGDEF: c_int = 1195656518;
pub const kCTFontTableGPOS: c_int = 1196445523;
pub const kCTFontTableGSUB: c_int = 1196643650;
pub const kCTFontTableHVAR: c_int = 1213612370;
pub const kCTFontTableJSTF: c_int = 1246975046;
pub const kCTFontTableLTSH: c_int = 1280594760;
pub const kCTFontTableMATH: c_int = 1296127048;
pub const kCTFontTableMERG: c_int = 1296388679;
pub const kCTFontTableMVAR: c_int = 1297498450;
pub const kCTFontTableOS2: c_int = 1330851634;
pub const kCTFontTablePCLT: c_int = 1346587732;
pub const kCTFontTableSTAT: c_int = 1398030676;
pub const kCTFontTableSVG: c_int = 1398163232;
pub const kCTFontTableVDMX: c_int = 1447316824;
pub const kCTFontTableVORG: c_int = 1448038983;
pub const kCTFontTableVVAR: c_int = 1448493394;
pub const kCTFontTableZapf: c_int = 1516335206;
pub const kCTFontTableAcnt: c_int = 1633906292;
pub const kCTFontTableAnkr: c_int = 1634626418;
pub const kCTFontTableAvar: c_int = 1635148146;
pub const kCTFontTableBdat: c_int = 1650745716;
pub const kCTFontTableBhed: c_int = 1651008868;
pub const kCTFontTableBloc: c_int = 1651273571;
pub const kCTFontTableBsln: c_int = 1651731566;
pub const kCTFontTableCidg: c_int = 1667851367;
pub const kCTFontTableCmap: c_int = 1668112752;
pub const kCTFontTableCvar: c_int = 1668702578;
pub const kCTFontTableCvt: c_int = 1668707360;
pub const kCTFontTableFdsc: c_int = 1717859171;
pub const kCTFontTableFeat: c_int = 1717920116;
pub const kCTFontTableFmtx: c_int = 1718449272;
pub const kCTFontTableFond: c_int = 1718578788;
pub const kCTFontTableFpgm: c_int = 1718642541;
pub const kCTFontTableFvar: c_int = 1719034226;
pub const kCTFontTableGasp: c_int = 1734439792;
pub const kCTFontTableGlyf: c_int = 1735162214;
pub const kCTFontTableGvar: c_int = 1735811442;
pub const kCTFontTableHdmx: c_int = 1751412088;
pub const kCTFontTableHead: c_int = 1751474532;
pub const kCTFontTableHhea: c_int = 1751672161;
pub const kCTFontTableHmtx: c_int = 1752003704;
pub const kCTFontTableHsty: c_int = 1752396921;
pub const kCTFontTableJust: c_int = 1786082164;
pub const kCTFontTableKern: c_int = 1801810542;
pub const kCTFontTableKerx: c_int = 1801810552;
pub const kCTFontTableLcar: c_int = 1818452338;
pub const kCTFontTableLoca: c_int = 1819239265;
pub const kCTFontTableLtag: c_int = 1819566439;
pub const kCTFontTableMaxp: c_int = 1835104368;
pub const kCTFontTableMeta: c_int = 1835365473;
pub const kCTFontTableMort: c_int = 1836020340;
pub const kCTFontTableMorx: c_int = 1836020344;
pub const kCTFontTableName: c_int = 1851878757;
pub const kCTFontTableOpbd: c_int = 1869636196;
pub const kCTFontTablePost: c_int = 1886352244;
pub const kCTFontTablePrep: c_int = 1886545264;
pub const kCTFontTableProp: c_int = 1886547824;
pub const kCTFontTableSbit: c_int = 1935829364;
pub const kCTFontTableSbix: c_int = 1935829368;
pub const kCTFontTableTrak: c_int = 1953653099;
pub const kCTFontTableVhea: c_int = 1986553185;
pub const kCTFontTableVmtx: c_int = 1986884728;
pub const kCTFontTableXref: c_int = 2020762982;
const enum_unnamed_1486 = c_uint;
pub const CTFontTableTag = FourCharCode;
pub const CTFontTableOptions = u32;
pub const kCTFontTableOptionNoOptions: c_int = 0;
pub const kCTFontTableOptionExcludeSynthetic: c_int = 1;
const enum_unnamed_1487 = c_uint;
pub extern fn CTFontCopyAvailableTables(font: CTFontRef, options: CTFontTableOptions) CFArrayRef;
pub extern fn CTFontCopyTable(font: CTFontRef, table: CTFontTableTag, options: CTFontTableOptions) CFDataRef;
pub extern fn CTFontDrawGlyphs(font: CTFontRef, glyphs: [*c]const CGGlyph, positions: [*c]const CGPoint, count: usize, context: CGContextRef) void;
pub extern fn CTFontGetLigatureCaretPositions(font: CTFontRef, glyph: CGGlyph, positions: [*c]CGFloat, maxPositions: CFIndex) CFIndex;
pub extern const kCTBaselineClassRoman: CFStringRef;
pub extern const kCTBaselineClassIdeographicCentered: CFStringRef;
pub extern const kCTBaselineClassIdeographicLow: CFStringRef;
pub extern const kCTBaselineClassIdeographicHigh: CFStringRef;
pub extern const kCTBaselineClassHanging: CFStringRef;
pub extern const kCTBaselineClassMath: CFStringRef;
pub extern const kCTBaselineReferenceFont: CFStringRef;
pub extern const kCTBaselineOriginalFont: CFStringRef;
pub extern fn CTFontCopyDefaultCascadeListForLanguages(font: CTFontRef, languagePrefList: CFArrayRef) CFArrayRef;
pub const struct___CTFontCollection = opaque {};
pub const CTFontCollectionRef = ?*const struct___CTFontCollection;
pub const CTMutableFontCollectionRef = ?*struct___CTFontCollection;
pub extern fn CTFontCollectionGetTypeID() CFTypeID;
pub const CTFontCollectionSortDescriptorsCallback = ?*const fn (CTFontDescriptorRef, CTFontDescriptorRef, ?*anyopaque) callconv(.C) CFComparisonResult;
pub extern const kCTFontCollectionRemoveDuplicatesOption: CFStringRef;
pub extern const kCTFontCollectionIncludeDisabledFontsOption: CFStringRef;
pub extern const kCTFontCollectionDisallowAutoActivationOption: CFStringRef;
pub extern fn CTFontCollectionCreateFromAvailableFonts(options: CFDictionaryRef) CTFontCollectionRef;
pub extern fn CTFontCollectionCreateWithFontDescriptors(queryDescriptors: CFArrayRef, options: CFDictionaryRef) CTFontCollectionRef;
pub extern fn CTFontCollectionCreateCopyWithFontDescriptors(original: CTFontCollectionRef, queryDescriptors: CFArrayRef, options: CFDictionaryRef) CTFontCollectionRef;
pub extern fn CTFontCollectionCreateMutableCopy(original: CTFontCollectionRef) CTMutableFontCollectionRef;
pub extern fn CTFontCollectionCopyQueryDescriptors(collection: CTFontCollectionRef) CFArrayRef;
pub extern fn CTFontCollectionSetQueryDescriptors(collection: CTMutableFontCollectionRef, descriptors: CFArrayRef) void;
pub extern fn CTFontCollectionCopyExclusionDescriptors(collection: CTFontCollectionRef) CFArrayRef;
pub extern fn CTFontCollectionSetExclusionDescriptors(collection: CTMutableFontCollectionRef, descriptors: CFArrayRef) void;
pub extern fn CTFontCollectionCreateMatchingFontDescriptors(collection: CTFontCollectionRef) CFArrayRef;
pub extern fn CTFontCollectionCreateMatchingFontDescriptorsSortedWithCallback(collection: CTFontCollectionRef, sortCallback: CTFontCollectionSortDescriptorsCallback, refCon: ?*anyopaque) CFArrayRef;
pub extern fn CTFontCollectionCreateMatchingFontDescriptorsWithOptions(collection: CTFontCollectionRef, options: CFDictionaryRef) CFArrayRef;
pub extern fn CTFontCollectionCreateMatchingFontDescriptorsForFamily(collection: CTFontCollectionRef, familyName: CFStringRef, options: CFDictionaryRef) CFArrayRef;
pub const CTFontCollectionCopyOptions = u32;
pub const kCTFontCollectionCopyDefaultOptions: c_int = 0;
pub const kCTFontCollectionCopyUnique: c_int = 1;
pub const kCTFontCollectionCopyStandardSort: c_int = 2;
const enum_unnamed_1488 = c_uint;
pub extern fn CTFontCollectionCopyFontAttribute(collection: CTFontCollectionRef, attributeName: CFStringRef, options: CTFontCollectionCopyOptions) CFArrayRef;
pub extern fn CTFontCollectionCopyFontAttributes(collection: CTFontCollectionRef, attributeNames: CFSetRef, options: CTFontCollectionCopyOptions) CFArrayRef;
pub extern const kCTFontManagerErrorDomain: CFStringRef;
pub extern const kCTFontManagerErrorFontURLsKey: CFStringRef;
pub extern const kCTFontManagerErrorFontDescriptorsKey: CFStringRef;
pub extern const kCTFontManagerErrorFontAssetNameKey: CFStringRef;
pub const CTFontManagerError = CFIndex;
pub const kCTFontManagerErrorFileNotFound: c_int = 101;
pub const kCTFontManagerErrorInsufficientPermissions: c_int = 102;
pub const kCTFontManagerErrorUnrecognizedFormat: c_int = 103;
pub const kCTFontManagerErrorInvalidFontData: c_int = 104;
pub const kCTFontManagerErrorAlreadyRegistered: c_int = 105;
pub const kCTFontManagerErrorExceededResourceLimit: c_int = 106;
pub const kCTFontManagerErrorAssetNotFound: c_int = 107;
pub const kCTFontManagerErrorNotRegistered: c_int = 201;
pub const kCTFontManagerErrorInUse: c_int = 202;
pub const kCTFontManagerErrorSystemRequired: c_int = 203;
pub const kCTFontManagerErrorRegistrationFailed: c_int = 301;
pub const kCTFontManagerErrorMissingEntitlement: c_int = 302;
pub const kCTFontManagerErrorInsufficientInfo: c_int = 303;
pub const kCTFontManagerErrorCancelledByUser: c_int = 304;
pub const kCTFontManagerErrorDuplicatedName: c_int = 305;
pub const kCTFontManagerErrorInvalidFilePath: c_int = 306;
pub const kCTFontManagerErrorUnsupportedScope: c_int = 307;
const enum_unnamed_1489 = c_uint;
pub extern fn CTFontManagerCopyAvailablePostScriptNames() CFArrayRef;
pub extern fn CTFontManagerCopyAvailableFontFamilyNames() CFArrayRef;
pub extern fn CTFontManagerCopyAvailableFontURLs() CFArrayRef;
pub extern fn CTFontManagerCompareFontFamilyNames(family1: ?*const anyopaque, family2: ?*const anyopaque, context: ?*anyopaque) CFComparisonResult;
pub extern fn CTFontManagerCreateFontDescriptorsFromURL(fileURL: CFURLRef) CFArrayRef;
pub extern fn CTFontManagerCreateFontDescriptorFromData(data: CFDataRef) CTFontDescriptorRef;
pub extern fn CTFontManagerCreateFontDescriptorsFromData(data: CFDataRef) CFArrayRef;
pub const CTFontManagerScope = u32;
pub const kCTFontManagerScopeNone: c_int = 0;
pub const kCTFontManagerScopeProcess: c_int = 1;
pub const kCTFontManagerScopePersistent: c_int = 2;
pub const kCTFontManagerScopeSession: c_int = 3;
pub const kCTFontManagerScopeUser: c_int = 2;
const enum_unnamed_1490 = c_uint;
pub extern const kCTFontRegistrationUserInfoAttribute: CFStringRef;
pub extern fn CTFontManagerRegisterFontsForURL(fontURL: CFURLRef, scope: CTFontManagerScope, @"error": [*c]CFErrorRef) bool;
pub extern fn CTFontManagerUnregisterFontsForURL(fontURL: CFURLRef, scope: CTFontManagerScope, @"error": [*c]CFErrorRef) bool;
pub extern fn CTFontManagerRegisterGraphicsFont(font: CGFontRef, @"error": [*c]CFErrorRef) bool;
pub extern fn CTFontManagerUnregisterGraphicsFont(font: CGFontRef, @"error": [*c]CFErrorRef) bool;
pub extern fn CTFontManagerRegisterFontsForURLs(fontURLs: CFArrayRef, scope: CTFontManagerScope, errors: [*c]CFArrayRef) bool;
pub extern fn CTFontManagerUnregisterFontsForURLs(fontURLs: CFArrayRef, scope: CTFontManagerScope, errors: [*c]CFArrayRef) bool; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTFontManager.h:285:6: warning: unsupported type: 'BlockPointer'
pub const CTFontManagerRegisterFontURLs = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTFontManager.h:285:6
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTFontManager.h:305:6: warning: unsupported type: 'BlockPointer'
pub const CTFontManagerUnregisterFontURLs = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTFontManager.h:305:6
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTFontManager.h:328:6: warning: unsupported type: 'BlockPointer'
pub const CTFontManagerRegisterFontDescriptors = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTFontManager.h:328:6
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTFontManager.h:347:6: warning: unsupported type: 'BlockPointer'
pub const CTFontManagerUnregisterFontDescriptors = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTFontManager.h:347:6
// /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTFontManager.h:375:6: warning: unsupported type: 'BlockPointer'
pub const CTFontManagerRegisterFontsWithAssetNames = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTFontManager.h:375:6
pub extern fn CTFontManagerEnableFontDescriptors(descriptors: CFArrayRef, enable: bool) void;
pub extern fn CTFontManagerGetScopeForURL(fontURL: CFURLRef) CTFontManagerScope;
pub extern fn CTFontManagerCopyRegisteredFontDescriptors(scope: CTFontManagerScope, enabled: bool) CFArrayRef; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTFontManager.h:439:6: warning: unsupported type: 'BlockPointer'
pub const CTFontManagerRequestFonts = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTFontManager.h:439:6
pub extern fn CTFontManagerIsSupportedFont(fontURL: CFURLRef) bool; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTFontManager.h:472:30: warning: unsupported type: 'BlockPointer'
pub const CTFontManagerCreateFontRequestRunLoopSource = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTFontManager.h:472:30
pub extern const kCTFontManagerBundleIdentifier: CFStringRef;
pub const CTFontManagerAutoActivationSetting = u32;
pub const kCTFontManagerAutoActivationDefault: c_int = 0;
pub const kCTFontManagerAutoActivationDisabled: c_int = 1;
pub const kCTFontManagerAutoActivationEnabled: c_int = 2;
pub const kCTFontManagerAutoActivationPromptUser: c_int = 3;
const enum_unnamed_1491 = c_uint;
pub extern fn CTFontManagerSetAutoActivationSetting(bundleIdentifier: CFStringRef, setting: CTFontManagerAutoActivationSetting) void;
pub extern fn CTFontManagerGetAutoActivationSetting(bundleIdentifier: CFStringRef) CTFontManagerAutoActivationSetting;
pub extern const kCTFontManagerRegisteredFontsChangedNotification: CFStringRef;
pub const struct___CTFrame = opaque {};
pub const CTFrameRef = ?*const struct___CTFrame;
pub extern fn CTFrameGetTypeID() CFTypeID;
pub const CTFrameProgression = u32;
pub const kCTFrameProgressionTopToBottom: c_int = 0;
pub const kCTFrameProgressionRightToLeft: c_int = 1;
pub const kCTFrameProgressionLeftToRight: c_int = 2;
const enum_unnamed_1492 = c_uint;
pub extern const kCTFrameProgressionAttributeName: CFStringRef;
pub const CTFramePathFillRule = u32;
pub const kCTFramePathFillEvenOdd: c_int = 0;
pub const kCTFramePathFillWindingNumber: c_int = 1;
const enum_unnamed_1493 = c_uint;
pub extern const kCTFramePathFillRuleAttributeName: CFStringRef;
pub extern const kCTFramePathWidthAttributeName: CFStringRef;
pub extern const kCTFrameClippingPathsAttributeName: CFStringRef;
pub extern const kCTFramePathClippingPathAttributeName: CFStringRef;
pub extern fn CTFrameGetStringRange(frame: CTFrameRef) CFRange;
pub extern fn CTFrameGetVisibleStringRange(frame: CTFrameRef) CFRange;
pub extern fn CTFrameGetPath(frame: CTFrameRef) CGPathRef;
pub extern fn CTFrameGetFrameAttributes(frame: CTFrameRef) CFDictionaryRef;
pub extern fn CTFrameGetLines(frame: CTFrameRef) CFArrayRef;
pub extern fn CTFrameGetLineOrigins(frame: CTFrameRef, range: CFRange, origins: [*c]CGPoint) void;
pub extern fn CTFrameDraw(frame: CTFrameRef, context: CGContextRef) void;
pub const struct___CTLine = opaque {};
pub const CTLineRef = ?*const struct___CTLine;
pub const CTLineBoundsOptions = CFOptionFlags;
pub const kCTLineBoundsExcludeTypographicLeading: c_int = 1;
pub const kCTLineBoundsExcludeTypographicShifts: c_int = 2;
pub const kCTLineBoundsUseHangingPunctuation: c_int = 4;
pub const kCTLineBoundsUseGlyphPathBounds: c_int = 8;
pub const kCTLineBoundsUseOpticalBounds: c_int = 16;
pub const kCTLineBoundsIncludeLanguageExtents: c_int = 32;
const enum_unnamed_1494 = c_uint;
pub const CTLineTruncationType = u32;
pub const kCTLineTruncationStart: c_int = 0;
pub const kCTLineTruncationEnd: c_int = 1;
pub const kCTLineTruncationMiddle: c_int = 2;
const enum_unnamed_1495 = c_uint;
pub extern fn CTLineGetTypeID() CFTypeID;
pub extern fn CTLineCreateWithAttributedString(attrString: CFAttributedStringRef) CTLineRef;
pub extern fn CTLineCreateTruncatedLine(line: CTLineRef, width: f64, truncationType: CTLineTruncationType, truncationToken: CTLineRef) CTLineRef;
pub extern fn CTLineCreateJustifiedLine(line: CTLineRef, justificationFactor: CGFloat, justificationWidth: f64) CTLineRef;
pub extern fn CTLineGetGlyphCount(line: CTLineRef) CFIndex;
pub extern fn CTLineGetGlyphRuns(line: CTLineRef) CFArrayRef;
pub extern fn CTLineGetStringRange(line: CTLineRef) CFRange;
pub extern fn CTLineGetPenOffsetForFlush(line: CTLineRef, flushFactor: CGFloat, flushWidth: f64) f64;
pub extern fn CTLineDraw(line: CTLineRef, context: CGContextRef) void;
pub extern fn CTLineGetTypographicBounds(line: CTLineRef, ascent: [*c]CGFloat, descent: [*c]CGFloat, leading: [*c]CGFloat) f64;
pub extern fn CTLineGetBoundsWithOptions(line: CTLineRef, options: CTLineBoundsOptions) CGRect;
pub extern fn CTLineGetTrailingWhitespaceWidth(line: CTLineRef) f64;
pub extern fn CTLineGetImageBounds(line: CTLineRef, context: CGContextRef) CGRect;
pub extern fn CTLineGetStringIndexForPosition(line: CTLineRef, position: CGPoint) CFIndex;
pub extern fn CTLineGetOffsetForStringIndex(line: CTLineRef, charIndex: CFIndex, secondaryOffset: [*c]CGFloat) CGFloat; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTLine.h:503:6: warning: unsupported type: 'BlockPointer'
pub const CTLineEnumerateCaretOffsets = @compileError("unable to resolve prototype of function"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTLine.h:503:6
pub const struct___CTTypesetter = opaque {};
pub const CTTypesetterRef = ?*const struct___CTTypesetter;
pub extern fn CTTypesetterGetTypeID() CFTypeID;
pub extern const kCTTypesetterOptionAllowUnboundedLayout: CFStringRef;
pub extern const kCTTypesetterOptionDisableBidiProcessing: CFStringRef;
pub extern const kCTTypesetterOptionForcedEmbeddingLevel: CFStringRef;
pub extern fn CTTypesetterCreateWithAttributedString(string: CFAttributedStringRef) CTTypesetterRef;
pub extern fn CTTypesetterCreateWithAttributedStringAndOptions(string: CFAttributedStringRef, options: CFDictionaryRef) CTTypesetterRef;
pub extern fn CTTypesetterCreateLineWithOffset(typesetter: CTTypesetterRef, stringRange: CFRange, offset: f64) CTLineRef;
pub extern fn CTTypesetterCreateLine(typesetter: CTTypesetterRef, stringRange: CFRange) CTLineRef;
pub extern fn CTTypesetterSuggestLineBreakWithOffset(typesetter: CTTypesetterRef, startIndex: CFIndex, width: f64, offset: f64) CFIndex;
pub extern fn CTTypesetterSuggestLineBreak(typesetter: CTTypesetterRef, startIndex: CFIndex, width: f64) CFIndex;
pub extern fn CTTypesetterSuggestClusterBreakWithOffset(typesetter: CTTypesetterRef, startIndex: CFIndex, width: f64, offset: f64) CFIndex;
pub extern fn CTTypesetterSuggestClusterBreak(typesetter: CTTypesetterRef, startIndex: CFIndex, width: f64) CFIndex;
pub const struct___CTFramesetter = opaque {};
pub const CTFramesetterRef = ?*const struct___CTFramesetter;
pub extern fn CTFramesetterGetTypeID() CFTypeID;
pub extern fn CTFramesetterCreateWithTypesetter(typesetter: CTTypesetterRef) CTFramesetterRef;
pub extern fn CTFramesetterCreateWithAttributedString(attrString: CFAttributedStringRef) CTFramesetterRef;
pub extern fn CTFramesetterCreateFrame(framesetter: CTFramesetterRef, stringRange: CFRange, path: CGPathRef, frameAttributes: CFDictionaryRef) CTFrameRef;
pub extern fn CTFramesetterGetTypesetter(framesetter: CTFramesetterRef) CTTypesetterRef;
pub extern fn CTFramesetterSuggestFrameSizeWithConstraints(framesetter: CTFramesetterRef, stringRange: CFRange, frameAttributes: CFDictionaryRef, constraints: CGSize, fitRange: [*c]CFRange) CGSize;
pub const struct___CTGlyphInfo = opaque {};
pub const CTGlyphInfoRef = ?*const struct___CTGlyphInfo;
pub extern fn CTGlyphInfoGetTypeID() CFTypeID;
pub const CTCharacterCollection = u16;
pub const kCTCharacterCollectionIdentityMapping: c_int = 0;
pub const kCTCharacterCollectionAdobeCNS1: c_int = 1;
pub const kCTCharacterCollectionAdobeGB1: c_int = 2;
pub const kCTCharacterCollectionAdobeJapan1: c_int = 3;
pub const kCTCharacterCollectionAdobeJapan2: c_int = 4;
pub const kCTCharacterCollectionAdobeKorea1: c_int = 5;
pub const kCTIdentityMappingCharacterCollection: c_int = 0;
pub const kCTAdobeCNS1CharacterCollection: c_int = 1;
pub const kCTAdobeGB1CharacterCollection: c_int = 2;
pub const kCTAdobeJapan1CharacterCollection: c_int = 3;
pub const kCTAdobeJapan2CharacterCollection: c_int = 4;
pub const kCTAdobeKorea1CharacterCollection: c_int = 5;
const enum_unnamed_1496 = c_uint;
pub extern fn CTGlyphInfoCreateWithGlyphName(glyphName: CFStringRef, font: CTFontRef, baseString: CFStringRef) CTGlyphInfoRef;
pub extern fn CTGlyphInfoCreateWithGlyph(glyph: CGGlyph, font: CTFontRef, baseString: CFStringRef) CTGlyphInfoRef;
pub extern fn CTGlyphInfoCreateWithCharacterIdentifier(cid: CGFontIndex, collection: CTCharacterCollection, baseString: CFStringRef) CTGlyphInfoRef;
pub extern fn CTGlyphInfoGetGlyphName(glyphInfo: CTGlyphInfoRef) CFStringRef;
pub extern fn CTGlyphInfoGetGlyph(glyphInfo: CTGlyphInfoRef) CGGlyph;
pub extern fn CTGlyphInfoGetCharacterIdentifier(glyphInfo: CTGlyphInfoRef) CGFontIndex;
pub extern fn CTGlyphInfoGetCharacterCollection(glyphInfo: CTGlyphInfoRef) CTCharacterCollection;
pub const struct___CTParagraphStyle = opaque {};
pub const CTParagraphStyleRef = ?*const struct___CTParagraphStyle;
pub extern fn CTParagraphStyleGetTypeID() CFTypeID;
pub const CTTextAlignment = u8;
pub const kCTTextAlignmentLeft: c_int = 0;
pub const kCTTextAlignmentRight: c_int = 1;
pub const kCTTextAlignmentCenter: c_int = 2;
pub const kCTTextAlignmentJustified: c_int = 3;
pub const kCTTextAlignmentNatural: c_int = 4;
pub const kCTLeftTextAlignment: c_int = 0;
pub const kCTRightTextAlignment: c_int = 1;
pub const kCTCenterTextAlignment: c_int = 2;
pub const kCTJustifiedTextAlignment: c_int = 3;
pub const kCTNaturalTextAlignment: c_int = 4;
const enum_unnamed_1497 = c_uint;
pub const CTLineBreakMode = u8;
pub const kCTLineBreakByWordWrapping: c_int = 0;
pub const kCTLineBreakByCharWrapping: c_int = 1;
pub const kCTLineBreakByClipping: c_int = 2;
pub const kCTLineBreakByTruncatingHead: c_int = 3;
pub const kCTLineBreakByTruncatingTail: c_int = 4;
pub const kCTLineBreakByTruncatingMiddle: c_int = 5;
const enum_unnamed_1498 = c_uint;
pub const CTWritingDirection = i8;
pub const kCTWritingDirectionNatural: c_int = -1;
pub const kCTWritingDirectionLeftToRight: c_int = 0;
pub const kCTWritingDirectionRightToLeft: c_int = 1;
const enum_unnamed_1499 = c_int;
pub const CTParagraphStyleSpecifier = u32;
pub const kCTParagraphStyleSpecifierAlignment: c_int = 0;
pub const kCTParagraphStyleSpecifierFirstLineHeadIndent: c_int = 1;
pub const kCTParagraphStyleSpecifierHeadIndent: c_int = 2;
pub const kCTParagraphStyleSpecifierTailIndent: c_int = 3;
pub const kCTParagraphStyleSpecifierTabStops: c_int = 4;
pub const kCTParagraphStyleSpecifierDefaultTabInterval: c_int = 5;
pub const kCTParagraphStyleSpecifierLineBreakMode: c_int = 6;
pub const kCTParagraphStyleSpecifierLineHeightMultiple: c_int = 7;
pub const kCTParagraphStyleSpecifierMaximumLineHeight: c_int = 8;
pub const kCTParagraphStyleSpecifierMinimumLineHeight: c_int = 9;
pub const kCTParagraphStyleSpecifierLineSpacing: c_int = 10;
pub const kCTParagraphStyleSpecifierParagraphSpacing: c_int = 11;
pub const kCTParagraphStyleSpecifierParagraphSpacingBefore: c_int = 12;
pub const kCTParagraphStyleSpecifierBaseWritingDirection: c_int = 13;
pub const kCTParagraphStyleSpecifierMaximumLineSpacing: c_int = 14;
pub const kCTParagraphStyleSpecifierMinimumLineSpacing: c_int = 15;
pub const kCTParagraphStyleSpecifierLineSpacingAdjustment: c_int = 16;
pub const kCTParagraphStyleSpecifierLineBoundsOptions: c_int = 17;
pub const kCTParagraphStyleSpecifierCount: c_int = 18;
const enum_unnamed_1500 = c_uint;
pub const struct_CTParagraphStyleSetting = extern struct {
    spec: CTParagraphStyleSpecifier,
    valueSize: usize,
    value: ?*const anyopaque,
};
pub const CTParagraphStyleSetting = struct_CTParagraphStyleSetting;
pub extern fn CTParagraphStyleCreate(settings: [*c]const CTParagraphStyleSetting, settingCount: usize) CTParagraphStyleRef;
pub extern fn CTParagraphStyleCreateCopy(paragraphStyle: CTParagraphStyleRef) CTParagraphStyleRef;
pub extern fn CTParagraphStyleGetValueForSpecifier(paragraphStyle: CTParagraphStyleRef, spec: CTParagraphStyleSpecifier, valueBufferSize: usize, valueBuffer: ?*anyopaque) bool;
pub const struct___CTRubyAnnotation = opaque {};
pub const CTRubyAnnotationRef = ?*const struct___CTRubyAnnotation;
pub extern fn CTRubyAnnotationGetTypeID() CFTypeID;
pub const CTRubyAlignment = u8;
pub const kCTRubyAlignmentInvalid: c_int = 255;
pub const kCTRubyAlignmentAuto: c_int = 0;
pub const kCTRubyAlignmentStart: c_int = 1;
pub const kCTRubyAlignmentCenter: c_int = 2;
pub const kCTRubyAlignmentEnd: c_int = 3;
pub const kCTRubyAlignmentDistributeLetter: c_int = 4;
pub const kCTRubyAlignmentDistributeSpace: c_int = 5;
pub const kCTRubyAlignmentLineEdge: c_int = 6;
const enum_unnamed_1501 = c_uint;
pub const CTRubyOverhang = u8;
pub const kCTRubyOverhangInvalid: c_int = 255;
pub const kCTRubyOverhangAuto: c_int = 0;
pub const kCTRubyOverhangStart: c_int = 1;
pub const kCTRubyOverhangEnd: c_int = 2;
pub const kCTRubyOverhangNone: c_int = 3;
const enum_unnamed_1502 = c_uint;
pub const CTRubyPosition = u8;
pub const kCTRubyPositionBefore: c_int = 0;
pub const kCTRubyPositionAfter: c_int = 1;
pub const kCTRubyPositionInterCharacter: c_int = 2;
pub const kCTRubyPositionInline: c_int = 3;
pub const kCTRubyPositionCount: c_int = 4;
const enum_unnamed_1503 = c_uint;
pub extern fn CTRubyAnnotationCreate(alignment: CTRubyAlignment, overhang: CTRubyOverhang, sizeFactor: CGFloat, text: [*c]CFStringRef) CTRubyAnnotationRef;
pub extern const kCTRubyAnnotationSizeFactorAttributeName: CFStringRef;
pub extern const kCTRubyAnnotationScaleToFitAttributeName: CFStringRef;
pub extern fn CTRubyAnnotationCreateWithAttributes(alignment: CTRubyAlignment, overhang: CTRubyOverhang, position: CTRubyPosition, string: CFStringRef, attributes: CFDictionaryRef) CTRubyAnnotationRef;
pub extern fn CTRubyAnnotationCreateCopy(rubyAnnotation: CTRubyAnnotationRef) CTRubyAnnotationRef;
pub extern fn CTRubyAnnotationGetAlignment(rubyAnnotation: CTRubyAnnotationRef) CTRubyAlignment;
pub extern fn CTRubyAnnotationGetOverhang(rubyAnnotation: CTRubyAnnotationRef) CTRubyOverhang;
pub extern fn CTRubyAnnotationGetSizeFactor(rubyAnnotation: CTRubyAnnotationRef) CGFloat;
pub extern fn CTRubyAnnotationGetTextForPosition(rubyAnnotation: CTRubyAnnotationRef, position: CTRubyPosition) CFStringRef;
pub const struct___CTRun = opaque {};
pub const CTRunRef = ?*const struct___CTRun;
pub const CTRunStatus = u32;
pub const kCTRunStatusNoStatus: c_int = 0;
pub const kCTRunStatusRightToLeft: c_int = 1;
pub const kCTRunStatusNonMonotonic: c_int = 2;
pub const kCTRunStatusHasNonIdentityMatrix: c_int = 4;
const enum_unnamed_1504 = c_uint;
pub extern fn CTRunGetTypeID() CFTypeID;
pub extern fn CTRunGetGlyphCount(run: CTRunRef) CFIndex;
pub extern fn CTRunGetAttributes(run: CTRunRef) CFDictionaryRef;
pub extern fn CTRunGetStatus(run: CTRunRef) CTRunStatus;
pub extern fn CTRunGetGlyphsPtr(run: CTRunRef) [*c]const CGGlyph;
pub extern fn CTRunGetGlyphs(run: CTRunRef, range: CFRange, buffer: [*c]CGGlyph) void;
pub extern fn CTRunGetPositionsPtr(run: CTRunRef) [*c]const CGPoint;
pub extern fn CTRunGetPositions(run: CTRunRef, range: CFRange, buffer: [*c]CGPoint) void;
pub extern fn CTRunGetAdvancesPtr(run: CTRunRef) [*c]const CGSize;
pub extern fn CTRunGetAdvances(run: CTRunRef, range: CFRange, buffer: [*c]CGSize) void;
pub extern fn CTRunGetStringIndicesPtr(run: CTRunRef) [*c]const CFIndex;
pub extern fn CTRunGetStringIndices(run: CTRunRef, range: CFRange, buffer: [*c]CFIndex) void;
pub extern fn CTRunGetStringRange(run: CTRunRef) CFRange;
pub extern fn CTRunGetTypographicBounds(run: CTRunRef, range: CFRange, ascent: [*c]CGFloat, descent: [*c]CGFloat, leading: [*c]CGFloat) f64;
pub extern fn CTRunGetImageBounds(run: CTRunRef, context: CGContextRef, range: CFRange) CGRect;
pub extern fn CTRunGetTextMatrix(run: CTRunRef) CGAffineTransform;
pub extern fn CTRunGetBaseAdvancesAndOrigins(runRef: CTRunRef, range: CFRange, advancesBuffer: [*c]CGSize, originsBuffer: [*c]CGPoint) void;
pub extern fn CTRunDraw(run: CTRunRef, context: CGContextRef, range: CFRange) void;
pub const struct___CTRunDelegate = opaque {};
pub const CTRunDelegateRef = ?*const struct___CTRunDelegate;
pub extern fn CTRunDelegateGetTypeID() CFTypeID;
pub const CTRunDelegateDeallocateCallback = ?*const fn (?*anyopaque) callconv(.C) void;
pub const CTRunDelegateGetAscentCallback = ?*const fn (?*anyopaque) callconv(.C) CGFloat;
pub const CTRunDelegateGetDescentCallback = ?*const fn (?*anyopaque) callconv(.C) CGFloat;
pub const CTRunDelegateGetWidthCallback = ?*const fn (?*anyopaque) callconv(.C) CGFloat;
pub const CTRunDelegateCallbacks = extern struct {
    version: CFIndex,
    dealloc: CTRunDelegateDeallocateCallback,
    getAscent: CTRunDelegateGetAscentCallback,
    getDescent: CTRunDelegateGetDescentCallback,
    getWidth: CTRunDelegateGetWidthCallback,
};
pub const kCTRunDelegateVersion1: c_int = 1;
pub const kCTRunDelegateCurrentVersion: c_int = 1;
const enum_unnamed_1505 = c_uint;
pub extern fn CTRunDelegateCreate(callbacks: [*c]const CTRunDelegateCallbacks, refCon: ?*anyopaque) CTRunDelegateRef;
pub extern fn CTRunDelegateGetRefCon(runDelegate: CTRunDelegateRef) ?*anyopaque;
pub extern const kCTFontAttributeName: CFStringRef;
pub extern const kCTForegroundColorFromContextAttributeName: CFStringRef;
pub extern const kCTKernAttributeName: CFStringRef;
pub extern const kCTTrackingAttributeName: CFStringRef;
pub extern const kCTLigatureAttributeName: CFStringRef;
pub extern const kCTForegroundColorAttributeName: CFStringRef;
pub extern const kCTBackgroundColorAttributeName: CFStringRef;
pub extern const kCTParagraphStyleAttributeName: CFStringRef;
pub extern const kCTStrokeWidthAttributeName: CFStringRef;
pub extern const kCTStrokeColorAttributeName: CFStringRef;
pub extern const kCTUnderlineStyleAttributeName: CFStringRef;
pub extern const kCTSuperscriptAttributeName: CFStringRef;
pub extern const kCTUnderlineColorAttributeName: CFStringRef;
pub extern const kCTVerticalFormsAttributeName: CFStringRef;
pub extern const kCTHorizontalInVerticalFormsAttributeName: CFStringRef;
pub extern const kCTGlyphInfoAttributeName: CFStringRef;
pub extern const kCTCharacterShapeAttributeName: CFStringRef;
pub extern const kCTLanguageAttributeName: CFStringRef;
pub extern const kCTRunDelegateAttributeName: CFStringRef;
pub const CTUnderlineStyle = i32;
pub const kCTUnderlineStyleNone: c_int = 0;
pub const kCTUnderlineStyleSingle: c_int = 1;
pub const kCTUnderlineStyleThick: c_int = 2;
pub const kCTUnderlineStyleDouble: c_int = 9;
const enum_unnamed_1506 = c_uint;
pub const CTUnderlineStyleModifiers = i32;
pub const kCTUnderlinePatternSolid: c_int = 0;
pub const kCTUnderlinePatternDot: c_int = 256;
pub const kCTUnderlinePatternDash: c_int = 512;
pub const kCTUnderlinePatternDashDot: c_int = 768;
pub const kCTUnderlinePatternDashDotDot: c_int = 1024;
const enum_unnamed_1507 = c_uint;
pub extern const kCTBaselineClassAttributeName: CFStringRef;
pub extern const kCTBaselineInfoAttributeName: CFStringRef;
pub extern const kCTBaselineReferenceInfoAttributeName: CFStringRef;
pub extern const kCTBaselineOffsetAttributeName: CFStringRef;
pub extern const kCTWritingDirectionAttributeName: CFStringRef;
pub const kCTWritingDirectionEmbedding: c_int = 0;
pub const kCTWritingDirectionOverride: c_int = 2;
const enum_unnamed_1508 = c_uint;
pub extern const kCTRubyAnnotationAttributeName: CFStringRef;
pub const struct___CTTextTab = opaque {};
pub const CTTextTabRef = ?*const struct___CTTextTab;
pub extern fn CTTextTabGetTypeID() CFTypeID;
pub extern const kCTTabColumnTerminatorsAttributeName: CFStringRef;
pub extern fn CTTextTabCreate(alignment: CTTextAlignment, location: f64, options: CFDictionaryRef) CTTextTabRef;
pub extern fn CTTextTabGetAlignment(tab: CTTextTabRef) CTTextAlignment;
pub extern fn CTTextTabGetLocation(tab: CTTextTabRef) f64;
pub extern fn CTTextTabGetOptions(tab: CTTextTabRef) CFDictionaryRef;
pub extern fn CTGetCoreTextVersion() u32;
pub const cmICCProfileVersion4: c_int = 67108864;
pub const cmICCProfileVersion2: c_int = 33554432;
pub const cmICCProfileVersion21: c_int = 34603008;
pub const cmCS2ProfileVersion: c_int = 33554432;
pub const cmCS1ProfileVersion: c_int = 256;
const enum_unnamed_1509 = c_uint;
pub const cmProfileMajorVersionMask: c_int = -16777216;
pub const cmCurrentProfileMajorVersion: c_int = 33554432;
const enum_unnamed_1510 = c_int;
pub const cmMagicNumber: c_int = 1633907568;
const enum_unnamed_1511 = c_uint;
pub const cmICCReservedFlagsMask: c_int = 65535;
pub const cmEmbeddedMask: c_int = 1;
pub const cmEmbeddedUseMask: c_int = 2;
pub const cmBlackPointCompensationMask: c_int = 4;
pub const cmCMSReservedFlagsMask: c_int = -65536;
pub const cmQualityMask: c_int = 196608;
pub const cmInterpolationMask: c_int = 262144;
pub const cmGamutCheckingMask: c_int = 524288;
const enum_unnamed_1512 = c_int;
pub const cmEmbeddedProfile: c_int = 0;
pub const cmEmbeddedUse: c_int = 1;
const enum_unnamed_1513 = c_uint;
pub const cmNormalMode: c_int = 0;
pub const cmDraftMode: c_int = 1;
pub const cmBestMode: c_int = 2;
const enum_unnamed_1514 = c_uint;
pub const cmBlackPointCompensation: c_int = 1;
const enum_unnamed_1515 = c_uint;
pub const cmReflectiveTransparentMask: c_int = 1;
pub const cmGlossyMatteMask: c_int = 2;
const enum_unnamed_1516 = c_uint;
pub const cmReflective: c_int = 0;
pub const cmGlossy: c_int = 1;
const enum_unnamed_1517 = c_uint;
pub const cmPerceptual: c_int = 0;
pub const cmRelativeColorimetric: c_int = 1;
pub const cmSaturation: c_int = 2;
pub const cmAbsoluteColorimetric: c_int = 3;
const enum_unnamed_1518 = c_uint;
pub const cmAsciiData: c_int = 0;
pub const cmBinaryData: c_int = 1;
const enum_unnamed_1519 = c_uint;
pub const cmPrtrDefaultScreens: c_int = 0;
pub const cmLinesPer: c_int = 1;
const enum_unnamed_1520 = c_uint;
pub const cmNumHeaderElements: c_int = 10;
const enum_unnamed_1521 = c_uint;
pub const cmAToB0Tag: c_int = 1093812784;
pub const cmAToB1Tag: c_int = 1093812785;
pub const cmAToB2Tag: c_int = 1093812786;
pub const cmBlueColorantTag: c_int = 1649957210;
pub const cmBlueTRCTag: c_int = 1649693251;
pub const cmBToA0Tag: c_int = 1110589744;
pub const cmBToA1Tag: c_int = 1110589745;
pub const cmBToA2Tag: c_int = 1110589746;
pub const cmCalibrationDateTimeTag: c_int = 1667329140;
pub const cmChromaticAdaptationTag: c_int = 1667785060;
pub const cmCharTargetTag: c_int = 1952543335;
pub const cmCopyrightTag: c_int = 1668313716;
pub const cmDeviceMfgDescTag: c_int = 1684893284;
pub const cmDeviceModelDescTag: c_int = 1684890724;
pub const cmGamutTag: c_int = 1734438260;
pub const cmGrayTRCTag: c_int = 1800688195;
pub const cmGreenColorantTag: c_int = 1733843290;
pub const cmGreenTRCTag: c_int = 1733579331;
pub const cmLuminanceTag: c_int = 1819635049;
pub const cmMeasurementTag: c_int = 1835360627;
pub const cmMediaBlackPointTag: c_int = 1651208308;
pub const cmMediaWhitePointTag: c_int = 2004119668;
pub const cmNamedColorTag: c_int = 1852010348;
pub const cmNamedColor2Tag: c_int = 1852009522;
pub const cmPreview0Tag: c_int = 1886545200;
pub const cmPreview1Tag: c_int = 1886545201;
pub const cmPreview2Tag: c_int = 1886545202;
pub const cmProfileDescriptionTag: c_int = 1684370275;
pub const cmProfileSequenceDescTag: c_int = 1886610801;
pub const cmPS2CRD0Tag: c_int = 1886610480;
pub const cmPS2CRD1Tag: c_int = 1886610481;
pub const cmPS2CRD2Tag: c_int = 1886610482;
pub const cmPS2CRD3Tag: c_int = 1886610483;
pub const cmPS2CSATag: c_int = 1886597747;
pub const cmPS2RenderingIntentTag: c_int = 1886597737;
pub const cmRedColorantTag: c_int = 1918392666;
pub const cmRedTRCTag: c_int = 1918128707;
pub const cmScreeningDescTag: c_int = 1935897188;
pub const cmScreeningTag: c_int = 1935897198;
pub const cmTechnologyTag: c_int = 1952801640;
pub const cmUcrBgTag: c_int = 1650877472;
pub const cmViewingConditionsDescTag: c_int = 1987405156;
pub const cmViewingConditionsTag: c_int = 1986618743;
const enum_unnamed_1522 = c_uint;
pub const cmPS2CRDVMSizeTag: c_int = 1886615149;
pub const cmVideoCardGammaTag: c_int = 1986226036;
pub const cmMakeAndModelTag: c_int = 1835888484;
pub const cmProfileDescriptionMLTag: c_int = 1685283693;
pub const cmNativeDisplayInfoTag: c_int = 1852074350;
const enum_unnamed_1523 = c_uint;
pub const cmSigCrdInfoType: c_int = 1668441193;
pub const cmSigCurveType: c_int = 1668641398;
pub const cmSigDataType: c_int = 1684108385;
pub const cmSigDateTimeType: c_int = 1685350765;
pub const cmSigLut16Type: c_int = 1835430962;
pub const cmSigLut8Type: c_int = 1835430961;
pub const cmSigMeasurementType: c_int = 1835360627;
pub const cmSigMultiFunctA2BType: c_int = 1832993312;
pub const cmSigMultiFunctB2AType: c_int = 1833058592;
pub const cmSigNamedColorType: c_int = 1852010348;
pub const cmSigNamedColor2Type: c_int = 1852009522;
pub const cmSigParametricCurveType: c_int = 1885434465;
pub const cmSigProfileDescriptionType: c_int = 1684370275;
pub const cmSigProfileSequenceDescType: c_int = 1886610801;
pub const cmSigScreeningType: c_int = 1935897198;
pub const cmSigS15Fixed16Type: c_int = 1936077618;
pub const cmSigSignatureType: c_int = 1936287520;
pub const cmSigTextType: c_int = 1952807028;
pub const cmSigU16Fixed16Type: c_int = 1969632050;
pub const cmSigU1Fixed15Type: c_int = 1969631542;
pub const cmSigUInt8Type: c_int = 1969827896;
pub const cmSigUInt16Type: c_int = 1969828150;
pub const cmSigUInt32Type: c_int = 1969828658;
pub const cmSigUInt64Type: c_int = 1969829428;
pub const cmSigUcrBgType: c_int = 1650877472;
pub const cmSigUnicodeTextType: c_int = 1970567284;
pub const cmSigViewingConditionsType: c_int = 1986618743;
pub const cmSigXYZType: c_int = 1482250784;
const enum_unnamed_1524 = c_uint;
pub const cmSigPS2CRDVMSizeType: c_int = 1886615149;
pub const cmSigVideoCardGammaType: c_int = 1986226036;
pub const cmSigMakeAndModelType: c_int = 1835888484;
pub const cmSigNativeDisplayInfoType: c_int = 1852074350;
pub const cmSigMultiLocalizedUniCodeType: c_int = 1835824483;
const enum_unnamed_1525 = c_uint;
pub const cmTechnologyDigitalCamera: c_int = 1684234605;
pub const cmTechnologyFilmScanner: c_int = 1718838126;
pub const cmTechnologyReflectiveScanner: c_int = 1920164718;
pub const cmTechnologyInkJetPrinter: c_int = 1768580468;
pub const cmTechnologyThermalWaxPrinter: c_int = 1953980792;
pub const cmTechnologyElectrophotographicPrinter: c_int = 1701865583;
pub const cmTechnologyElectrostaticPrinter: c_int = 1702065249;
pub const cmTechnologyDyeSublimationPrinter: c_int = 1685288290;
pub const cmTechnologyPhotographicPaperPrinter: c_int = 1919969391;
pub const cmTechnologyFilmWriter: c_int = 1718645358;
pub const cmTechnologyVideoMonitor: c_int = 1986618477;
pub const cmTechnologyVideoCamera: c_int = 1986618467;
pub const cmTechnologyProjectionTelevision: c_int = 1886024822;
pub const cmTechnologyCRTDisplay: c_int = 1129468960;
pub const cmTechnologyPMDisplay: c_int = 1347240992;
pub const cmTechnologyAMDisplay: c_int = 1095582752;
pub const cmTechnologyPhotoCD: c_int = 1263551300;
pub const cmTechnologyPhotoImageSetter: c_int = 1768777587;
pub const cmTechnologyGravure: c_int = 1735549302;
pub const cmTechnologyOffsetLithography: c_int = 1868981875;
pub const cmTechnologySilkscreen: c_int = 1936288875;
pub const cmTechnologyFlexography: c_int = 1718379896;
const enum_unnamed_1526 = c_uint;
pub const cmFlare0: c_int = 0;
pub const cmFlare100: c_int = 1;
const enum_unnamed_1527 = c_uint;
pub const cmGeometryUnknown: c_int = 0;
pub const cmGeometry045or450: c_int = 1;
pub const cmGeometry0dord0: c_int = 2;
const enum_unnamed_1528 = c_uint;
pub const cmStdobsUnknown: c_int = 0;
pub const cmStdobs1931TwoDegrees: c_int = 1;
pub const cmStdobs1964TenDegrees: c_int = 2;
const enum_unnamed_1529 = c_uint;
pub const cmIlluminantUnknown: c_int = 0;
pub const cmIlluminantD50: c_int = 1;
pub const cmIlluminantD65: c_int = 2;
pub const cmIlluminantD93: c_int = 3;
pub const cmIlluminantF2: c_int = 4;
pub const cmIlluminantD55: c_int = 5;
pub const cmIlluminantA: c_int = 6;
pub const cmIlluminantEquiPower: c_int = 7;
pub const cmIlluminantF8: c_int = 8;
const enum_unnamed_1530 = c_uint;
pub const cmSpotFunctionUnknown: c_int = 0;
pub const cmSpotFunctionDefault: c_int = 1;
pub const cmSpotFunctionRound: c_int = 2;
pub const cmSpotFunctionDiamond: c_int = 3;
pub const cmSpotFunctionEllipse: c_int = 4;
pub const cmSpotFunctionLine: c_int = 5;
pub const cmSpotFunctionSquare: c_int = 6;
pub const cmSpotFunctionCross: c_int = 7;
const enum_unnamed_1531 = c_uint;
pub const cmXYZData: c_int = 1482250784;
pub const cmLabData: c_int = 1281450528;
pub const cmLuvData: c_int = 1282766368;
pub const cmYCbCrData: c_int = 1497588338;
pub const cmYxyData: c_int = 1501067552;
pub const cmRGBData: c_int = 1380401696;
pub const cmSRGBData: c_int = 1934772034;
pub const cmGrayData: c_int = 1196573017;
pub const cmHSVData: c_int = 1213421088;
pub const cmHLSData: c_int = 1212961568;
pub const cmCMYKData: c_int = 1129142603;
pub const cmCMYData: c_int = 1129142560;
pub const cmMCH5Data: c_int = 1296255029;
pub const cmMCH6Data: c_int = 1296255030;
pub const cmMCH7Data: c_int = 1296255031;
pub const cmMCH8Data: c_int = 1296255032;
pub const cm3CLRData: c_int = 860048466;
pub const cm4CLRData: c_int = 876825682;
pub const cm5CLRData: c_int = 893602898;
pub const cm6CLRData: c_int = 910380114;
pub const cm7CLRData: c_int = 927157330;
pub const cm8CLRData: c_int = 943934546;
pub const cm9CLRData: c_int = 960711762;
pub const cm10CLRData: c_int = 1094929490;
pub const cm11CLRData: c_int = 1111706706;
pub const cm12CLRData: c_int = 1128483922;
pub const cm13CLRData: c_int = 1145261138;
pub const cm14CLRData: c_int = 1162038354;
pub const cm15CLRData: c_int = 1178815570;
pub const cmNamedData: c_int = 1312902469;
const enum_unnamed_1532 = c_uint;
pub const cmInputClass: c_int = 1935896178;
pub const cmDisplayClass: c_int = 1835955314;
pub const cmOutputClass: c_int = 1886549106;
pub const cmLinkClass: c_int = 1818848875;
pub const cmAbstractClass: c_int = 1633842036;
pub const cmColorSpaceClass: c_int = 1936744803;
pub const cmNamedColorClass: c_int = 1852662636;
const enum_unnamed_1533 = c_uint;
pub const cmMacintosh: c_int = 1095782476;
pub const cmMicrosoft: c_int = 1297303124;
pub const cmSolaris: c_int = 1398099543;
pub const cmSiliconGraphics: c_int = 1397180704;
pub const cmTaligent: c_int = 1413959252;
const enum_unnamed_1534 = c_uint;
pub const cmParametricType0: c_int = 0;
pub const cmParametricType1: c_int = 1;
pub const cmParametricType2: c_int = 2;
pub const cmParametricType3: c_int = 3;
pub const cmParametricType4: c_int = 4;
const enum_unnamed_1535 = c_uint;
pub const cmCS1ChromTag: c_int = 1667789421;
pub const cmCS1TRCTag: c_int = 1953653536;
pub const cmCS1NameTag: c_int = 1851878757;
pub const cmCS1CustTag: c_int = 1668641652;
const enum_unnamed_1536 = c_uint;
pub const struct_CMDateTime = extern struct {
    year: UInt16,
    month: UInt16,
    dayOfTheMonth: UInt16,
    hours: UInt16,
    minutes: UInt16,
    seconds: UInt16,
};
pub const CMDateTime = struct_CMDateTime;
pub const struct_CMFixedXYColor = extern struct {
    x: Fixed,
    y: Fixed,
};
pub const CMFixedXYColor = struct_CMFixedXYColor;
pub const struct_CMFixedXYZColor = extern struct {
    X: Fixed,
    Y: Fixed,
    Z: Fixed,
};
pub const CMFixedXYZColor = struct_CMFixedXYZColor;
pub const CMXYZComponent = UInt16;
pub const struct_CMXYZColor = extern struct {
    X: CMXYZComponent,
    Y: CMXYZComponent,
    Z: CMXYZComponent,
};
pub const CMXYZColor = struct_CMXYZColor;
pub const CMProfileMD5 = [16]u8;
pub const CMProfileMD5Ptr = [*c]CMProfileMD5;
pub const struct_CM2Header = extern struct {
    size: UInt32,
    CMMType: OSType,
    profileVersion: UInt32,
    profileClass: OSType,
    dataColorSpace: OSType,
    profileConnectionSpace: OSType,
    dateTime: CMDateTime,
    CS2profileSignature: OSType,
    platform: OSType,
    flags: UInt32,
    deviceManufacturer: OSType,
    deviceModel: UInt32,
    deviceAttributes: [2]UInt32,
    renderingIntent: UInt32,
    white: CMFixedXYZColor,
    creator: OSType,
    reserved: [44]u8,
};
pub const CM2Header = struct_CM2Header;
pub const struct_CM4Header = extern struct {
    size: UInt32,
    CMMType: OSType,
    profileVersion: UInt32,
    profileClass: OSType,
    dataColorSpace: OSType,
    profileConnectionSpace: OSType,
    dateTime: CMDateTime,
    CS2profileSignature: OSType,
    platform: OSType,
    flags: UInt32,
    deviceManufacturer: OSType,
    deviceModel: UInt32,
    deviceAttributes: [2]UInt32,
    renderingIntent: UInt32,
    white: CMFixedXYZColor,
    creator: OSType,
    digest: CMProfileMD5,
    reserved: [28]u8,
};
pub const CM4Header = struct_CM4Header;
pub const struct_CMTagRecord = extern struct {
    tag: OSType,
    elementOffset: UInt32,
    elementSize: UInt32,
};
pub const CMTagRecord = struct_CMTagRecord;
pub const struct_CMTagElemTable = extern struct {
    count: UInt32,
    tagList: [1]CMTagRecord,
};
pub const CMTagElemTable = struct_CMTagElemTable;
pub const struct_CM2Profile = extern struct {
    header: CM2Header,
    tagTable: CMTagElemTable,
    elemData: [1]u8,
};
pub const CM2Profile = struct_CM2Profile;
pub const CM2ProfilePtr = [*c]struct_CM2Profile;
pub const CM2ProfileHandle = [*c][*c]struct_CM2Profile;
pub const struct_CMAdaptationMatrixType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    adaptationMatrix: [9]Fixed,
};
pub const CMAdaptationMatrixType = struct_CMAdaptationMatrixType;
pub const struct_CMCurveType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    countValue: UInt32,
    data: [1]UInt16,
};
pub const CMCurveType = struct_CMCurveType;
pub const struct_CMDataType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    dataFlag: UInt32,
    data: [1]u8,
};
pub const CMDataType = struct_CMDataType;
pub const struct_CMDateTimeType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    dateTime: CMDateTime,
};
pub const CMDateTimeType = struct_CMDateTimeType;
pub const struct_CMLut16Type = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    inputChannels: UInt8,
    outputChannels: UInt8,
    gridPoints: UInt8,
    reserved2: UInt8,
    matrix: [3][3]Fixed,
    inputTableEntries: UInt16,
    outputTableEntries: UInt16,
    inputTable: [1]UInt16,
};
pub const CMLut16Type = struct_CMLut16Type;
pub const struct_CMLut8Type = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    inputChannels: UInt8,
    outputChannels: UInt8,
    gridPoints: UInt8,
    reserved2: UInt8,
    matrix: [3][3]Fixed,
    inputTable: [1]UInt8,
};
pub const CMLut8Type = struct_CMLut8Type;
pub const struct_CMMultiFunctLutType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    inputChannels: UInt8,
    outputChannels: UInt8,
    reserved2: UInt16,
    offsetBcurves: UInt32,
    offsetMatrix: UInt32,
    offsetMcurves: UInt32,
    offsetCLUT: UInt32,
    offsetAcurves: UInt32,
    data: [1]UInt8,
};
pub const CMMultiFunctLutType = struct_CMMultiFunctLutType;
pub const CMMultiFunctLutA2BType = struct_CMMultiFunctLutType;
pub const CMMultiFunctLutB2AType = struct_CMMultiFunctLutType;
pub const struct_CMMultiFunctCLUTType = extern struct {
    gridPoints: [16]UInt8,
    entrySize: UInt8,
    reserved: [3]UInt8,
    data: [2]UInt8,
};
pub const CMMultiFunctCLUTType = struct_CMMultiFunctCLUTType;
pub const struct_CMMeasurementType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    standardObserver: UInt32,
    backingXYZ: CMFixedXYZColor,
    geometry: UInt32,
    flare: UInt32,
    illuminant: UInt32,
};
pub const CMMeasurementType = struct_CMMeasurementType;
pub const struct_CMNamedColorType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    vendorFlag: UInt32,
    count: UInt32,
    prefixName: [1]UInt8,
};
pub const CMNamedColorType = struct_CMNamedColorType;
pub const struct_CMNamedColor2EntryType = extern struct {
    rootName: [32]UInt8,
    PCSColorCoords: [3]UInt16,
    DeviceColorCoords: [1]UInt16,
};
pub const CMNamedColor2EntryType = struct_CMNamedColor2EntryType;
pub const struct_CMNamedColor2Type = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    vendorFlag: UInt32,
    count: UInt32,
    deviceChannelCount: UInt32,
    prefixName: [32]UInt8,
    suffixName: [32]UInt8,
    data: [1]u8,
};
pub const CMNamedColor2Type = struct_CMNamedColor2Type;
pub const struct_CMNativeDisplayInfo = extern struct {
    dataSize: UInt32,
    redPhosphor: CMFixedXYColor,
    greenPhosphor: CMFixedXYColor,
    bluePhosphor: CMFixedXYColor,
    whitePoint: CMFixedXYColor,
    redGammaValue: Fixed,
    greenGammaValue: Fixed,
    blueGammaValue: Fixed,
    gammaChannels: UInt16,
    gammaEntryCount: UInt16,
    gammaEntrySize: UInt16,
    gammaData: [1]u8,
};
pub const CMNativeDisplayInfo = struct_CMNativeDisplayInfo;
pub const struct_CMNativeDisplayInfoType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    nativeDisplayInfo: CMNativeDisplayInfo,
};
pub const CMNativeDisplayInfoType = struct_CMNativeDisplayInfoType;
pub const struct_CMParametricCurveType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    functionType: UInt16,
    reserved2: UInt16,
    value: [1]Fixed,
};
pub const CMParametricCurveType = struct_CMParametricCurveType;
pub const struct_CMTextDescriptionType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    ASCIICount: UInt32,
    ASCIIName: [2]UInt8,
};
pub const CMTextDescriptionType = struct_CMTextDescriptionType;
pub const struct_CMTextType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    text: [1]UInt8,
};
pub const CMTextType = struct_CMTextType;
pub const struct_CMUnicodeTextType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    text: [1]UniChar,
};
pub const CMUnicodeTextType = struct_CMUnicodeTextType;
pub const struct_CMScreeningChannelRec = extern struct {
    frequency: Fixed,
    angle: Fixed,
    spotFunction: UInt32,
};
pub const CMScreeningChannelRec = struct_CMScreeningChannelRec;
pub const struct_CMScreeningType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    screeningFlag: UInt32,
    channelCount: UInt32,
    channelInfo: [1]CMScreeningChannelRec,
};
pub const CMScreeningType = struct_CMScreeningType;
pub const struct_CMSignatureType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    signature: OSType,
};
pub const CMSignatureType = struct_CMSignatureType;
pub const struct_CMS15Fixed16ArrayType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    value: [1]Fixed,
};
pub const CMS15Fixed16ArrayType = struct_CMS15Fixed16ArrayType;
pub const struct_CMU16Fixed16ArrayType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    value: [1]UInt32,
};
pub const CMU16Fixed16ArrayType = struct_CMU16Fixed16ArrayType;
pub const struct_CMUInt8ArrayType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    value: [1]UInt8,
};
pub const CMUInt8ArrayType = struct_CMUInt8ArrayType;
pub const struct_CMUInt16ArrayType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    value: [1]UInt16,
};
pub const CMUInt16ArrayType = struct_CMUInt16ArrayType;
pub const struct_CMUInt32ArrayType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    value: [1]UInt32,
};
pub const CMUInt32ArrayType = struct_CMUInt32ArrayType;
pub const struct_CMUInt64ArrayType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    value: [1]UInt32,
};
pub const CMUInt64ArrayType = struct_CMUInt64ArrayType;
pub const struct_CMViewingConditionsType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    illuminant: CMFixedXYZColor,
    surround: CMFixedXYZColor,
    stdIlluminant: UInt32,
};
pub const CMViewingConditionsType = struct_CMViewingConditionsType;
pub const struct_CMXYZType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    XYZ: [1]CMFixedXYZColor,
};
pub const CMXYZType = struct_CMXYZType;
pub const struct_CMProfileSequenceDescType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    count: UInt32,
    data: [1]u8,
};
pub const CMProfileSequenceDescType = struct_CMProfileSequenceDescType;
pub const struct_CMUcrBgType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    ucrCount: UInt32,
    ucrValues: [1]UInt16,
};
pub const CMUcrBgType = struct_CMUcrBgType;
pub const struct_CMIntentCRDVMSize = extern struct {
    renderingIntent: UInt32,
    VMSize: UInt32,
};
pub const CMIntentCRDVMSize = struct_CMIntentCRDVMSize;
pub const struct_CMPS2CRDVMSizeType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    count: UInt32,
    intentCRD: [1]CMIntentCRDVMSize,
};
pub const CMPS2CRDVMSizeType = struct_CMPS2CRDVMSizeType;
pub const cmVideoCardGammaTableType: c_int = 0;
pub const cmVideoCardGammaFormulaType: c_int = 1;
const enum_unnamed_1537 = c_uint;
pub const struct_CMVideoCardGammaTable = extern struct {
    channels: UInt16,
    entryCount: UInt16,
    entrySize: UInt16,
    data: [1]u8,
};
pub const CMVideoCardGammaTable = struct_CMVideoCardGammaTable;
pub const struct_CMVideoCardGammaFormula = extern struct {
    redGamma: Fixed,
    redMin: Fixed,
    redMax: Fixed,
    greenGamma: Fixed,
    greenMin: Fixed,
    greenMax: Fixed,
    blueGamma: Fixed,
    blueMin: Fixed,
    blueMax: Fixed,
};
pub const CMVideoCardGammaFormula = struct_CMVideoCardGammaFormula;
const union_unnamed_1538 = extern union {
    table: CMVideoCardGammaTable,
    formula: CMVideoCardGammaFormula,
};
pub const struct_CMVideoCardGamma = extern struct {
    tagType: UInt32,
    u: union_unnamed_1538,
};
pub const CMVideoCardGamma = struct_CMVideoCardGamma;
pub const struct_CMVideoCardGammaType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    gamma: CMVideoCardGamma,
};
pub const CMVideoCardGammaType = struct_CMVideoCardGammaType;
pub const struct_CMMakeAndModel = extern struct {
    manufacturer: OSType,
    model: UInt32,
    serialNumber: UInt32,
    manufactureDate: UInt32,
    reserved1: UInt32,
    reserved2: UInt32,
    reserved3: UInt32,
    reserved4: UInt32,
};
pub const CMMakeAndModel = struct_CMMakeAndModel;
pub const struct_CMMakeAndModelType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    makeAndModel: CMMakeAndModel,
};
pub const CMMakeAndModelType = struct_CMMakeAndModelType;
pub const struct_CMMultiLocalizedUniCodeEntryRec = extern struct {
    languageCode: [2]u8,
    regionCode: [2]u8,
    textLength: UInt32,
    textOffset: UInt32,
};
pub const CMMultiLocalizedUniCodeEntryRec = struct_CMMultiLocalizedUniCodeEntryRec;
pub const struct_CMMultiLocalizedUniCodeType = extern struct {
    typeDescriptor: OSType,
    reserved: UInt32,
    entryCount: UInt32,
    entrySize: UInt32,
};
pub const CMMultiLocalizedUniCodeType = struct_CMMultiLocalizedUniCodeType;
pub const struct_OpaqueCMProfileRef = opaque {};
pub const CMProfileRef = ?*struct_OpaqueCMProfileRef;
pub const struct_OpaqueCMWorldRef = opaque {};
pub const CMWorldRef = ?*struct_OpaqueCMWorldRef;
pub const CMDisplayIDType = UInt32;
pub const CMChromaticAdaptation = UInt32;
pub const cmUseDefaultChromaticAdaptation: c_int = 0;
pub const cmLinearChromaticAdaptation: c_int = 1;
pub const cmVonKriesChromaticAdaptation: c_int = 2;
pub const cmBradfordChromaticAdaptation: c_int = 3;
const enum_unnamed_1539 = c_uint;
pub const CMFlattenProcPtr = ?*const fn (SInt32, [*c]c_long, ?*anyopaque, ?*anyopaque) callconv(.C) OSErr;
pub const CMFlattenUPP = CMFlattenProcPtr;
pub const CMBitmapCallBackProcPtr = ?*const fn (SInt32, ?*anyopaque) callconv(.C) Boolean;
pub const CMBitmapCallBackUPP = CMBitmapCallBackProcPtr;
pub const CMConcatCallBackProcPtr = ?*const fn (SInt32, ?*anyopaque) callconv(.C) Boolean;
pub const CMConcatCallBackUPP = CMConcatCallBackProcPtr;
pub const kDefaultCMMSignature: c_int = 1634758764;
const enum_unnamed_1540 = c_uint;
pub const cmPS7bit: c_int = 1;
pub const cmPS8bit: c_int = 2;
const enum_unnamed_1541 = c_uint;
pub const cmOpenReadSpool: c_int = 1;
pub const cmOpenWriteSpool: c_int = 2;
pub const cmReadSpool: c_int = 3;
pub const cmWriteSpool: c_int = 4;
pub const cmCloseSpool: c_int = 5;
const enum_unnamed_1542 = c_uint;
pub const cmOpenReadAccess: c_int = 1;
pub const cmOpenWriteAccess: c_int = 2;
pub const cmReadAccess: c_int = 3;
pub const cmWriteAccess: c_int = 4;
pub const cmCloseAccess: c_int = 5;
pub const cmCreateNewAccess: c_int = 6;
pub const cmAbortWriteAccess: c_int = 7;
pub const cmBeginAccess: c_int = 8;
pub const cmEndAccess: c_int = 9;
const enum_unnamed_1543 = c_uint;
pub const cmInputUse: c_int = 1768845428;
pub const cmOutputUse: c_int = 1869968496;
pub const cmDisplayUse: c_int = 1685089401;
pub const cmProofUse: c_int = 1886549350;
const enum_unnamed_1544 = c_uint;
pub const union_CMAppleProfileHeader = extern union {
    cm2: CM2Header,
    cm4: CM4Header,
};
pub const CMAppleProfileHeader = union_CMAppleProfileHeader;
pub const struct_CMConcatProfileSet = extern struct {
    keyIndex: UInt16,
    count: UInt16,
    profileSet: [1]CMProfileRef,
};
pub const CMConcatProfileSet = struct_CMConcatProfileSet;
pub const struct_NCMConcatProfileSpec = extern struct {
    renderingIntent: UInt32,
    transformTag: UInt32,
    profile: CMProfileRef,
};
pub const NCMConcatProfileSpec = struct_NCMConcatProfileSpec;
pub const struct_NCMConcatProfileSet = extern struct {
    cmm: OSType,
    flags: UInt32,
    flagsMask: UInt32,
    profileCount: UInt32,
    profileSpecs: [1]NCMConcatProfileSpec,
};
pub const NCMConcatProfileSet = struct_NCMConcatProfileSet;
pub const kNoTransform: c_int = 0;
pub const kUseAtoB: c_int = 1;
pub const kUseBtoA: c_int = 2;
pub const kUseBtoB: c_int = 3;
pub const kDeviceToPCS: c_int = 1;
pub const kPCSToDevice: c_int = 2;
pub const kPCSToPCS: c_int = 3;
pub const kUseProfileIntent: c_int = -1;
const enum_unnamed_1545 = c_int;
pub const struct_CMRGBColor = extern struct {
    red: UInt16,
    green: UInt16,
    blue: UInt16,
};
pub const CMRGBColor = struct_CMRGBColor;
pub const struct_CMCMYKColor = extern struct {
    cyan: UInt16,
    magenta: UInt16,
    yellow: UInt16,
    black: UInt16,
};
pub const CMCMYKColor = struct_CMCMYKColor;
pub const struct_CMCMYColor = extern struct {
    cyan: UInt16,
    magenta: UInt16,
    yellow: UInt16,
};
pub const CMCMYColor = struct_CMCMYColor;
pub const struct_CMHLSColor = extern struct {
    hue: UInt16,
    lightness: UInt16,
    saturation: UInt16,
};
pub const CMHLSColor = struct_CMHLSColor;
pub const struct_CMHSVColor = extern struct {
    hue: UInt16,
    saturation: UInt16,
    value: UInt16,
};
pub const CMHSVColor = struct_CMHSVColor;
pub const struct_CMLabColor = extern struct {
    L: UInt16,
    a: UInt16,
    b: UInt16,
};
pub const CMLabColor = struct_CMLabColor;
pub const struct_CMLuvColor = extern struct {
    L: UInt16,
    u: UInt16,
    v: UInt16,
};
pub const CMLuvColor = struct_CMLuvColor;
pub const struct_CMYxyColor = extern struct {
    capY: UInt16,
    x: UInt16,
    y: UInt16,
};
pub const CMYxyColor = struct_CMYxyColor;
pub const struct_CMGrayColor = extern struct {
    gray: UInt16,
};
pub const CMGrayColor = struct_CMGrayColor;
pub const struct_CMMultichannel5Color = extern struct {
    components: [5]UInt8,
};
pub const CMMultichannel5Color = struct_CMMultichannel5Color;
pub const struct_CMMultichannel6Color = extern struct {
    components: [6]UInt8,
};
pub const CMMultichannel6Color = struct_CMMultichannel6Color;
pub const struct_CMMultichannel7Color = extern struct {
    components: [7]UInt8,
};
pub const CMMultichannel7Color = struct_CMMultichannel7Color;
pub const struct_CMMultichannel8Color = extern struct {
    components: [8]UInt8,
};
pub const CMMultichannel8Color = struct_CMMultichannel8Color;
pub const struct_CMNamedColor = extern struct {
    namedColorIndex: UInt32,
};
pub const CMNamedColor = struct_CMNamedColor;
pub const union_CMColor = extern union {
    rgb: CMRGBColor,
    hsv: CMHSVColor,
    hls: CMHLSColor,
    XYZ: CMXYZColor,
    Lab: CMLabColor,
    Luv: CMLuvColor,
    Yxy: CMYxyColor,
    cmyk: CMCMYKColor,
    cmy: CMCMYColor,
    gray: CMGrayColor,
    mc5: CMMultichannel5Color,
    mc6: CMMultichannel6Color,
    mc7: CMMultichannel7Color,
    mc8: CMMultichannel8Color,
    namedColor: CMNamedColor,
};
pub const CMColor = union_CMColor;
pub const struct_CMMInfo = extern struct {
    dataSize: usize,
    CMMType: OSType,
    CMMMfr: OSType,
    CMMVersion: UInt32,
    ASCIIName: [32]u8,
    ASCIIDesc: [256]u8,
    UniCodeNameCount: UniCharCount,
    UniCodeName: [32]UniChar,
    UniCodeDescCount: UniCharCount,
    UniCodeDesc: [256]UniChar,
};
pub const CMMInfo = struct_CMMInfo;
pub const cmColorSpaceSpaceMask: c_int = 63;
pub const cmColorSpacePremulAlphaMask: c_int = 64;
pub const cmColorSpaceAlphaMask: c_int = 128;
pub const cmColorSpaceSpaceAndAlphaMask: c_int = 255;
pub const cmColorSpacePackingMask: c_int = 65280;
pub const cmColorSpaceEncodingMask: c_int = 983040;
pub const cmColorSpaceReservedMask: c_int = -1048576;
const enum_unnamed_1546 = c_int;
pub const cmNoColorPacking: c_int = 0;
pub const cmWord5ColorPacking: c_int = 1280;
pub const cmWord565ColorPacking: c_int = 1536;
pub const cmLong8ColorPacking: c_int = 2048;
pub const cmLong10ColorPacking: c_int = 2560;
pub const cmAlphaFirstPacking: c_int = 4096;
pub const cmOneBitDirectPacking: c_int = 2816;
pub const cmAlphaLastPacking: c_int = 0;
pub const cm8_8ColorPacking: c_int = 10240;
pub const cm16_8ColorPacking: c_int = 8192;
pub const cm24_8ColorPacking: c_int = 8448;
pub const cm32_8ColorPacking: c_int = 2048;
pub const cm40_8ColorPacking: c_int = 8704;
pub const cm48_8ColorPacking: c_int = 8960;
pub const cm56_8ColorPacking: c_int = 9216;
pub const cm64_8ColorPacking: c_int = 9472;
pub const cm32_16ColorPacking: c_int = 9728;
pub const cm48_16ColorPacking: c_int = 10496;
pub const cm64_16ColorPacking: c_int = 10752;
pub const cm32_32ColorPacking: c_int = 9984;
pub const cmLittleEndianPacking: c_int = 16384;
pub const cmReverseChannelPacking: c_int = 32768;
const enum_unnamed_1547 = c_uint;
pub const cmSRGB16ChannelEncoding: c_int = 65536;
const enum_unnamed_1548 = c_uint;
pub const cmNoSpace: c_int = 0;
pub const cmRGBSpace: c_int = 1;
pub const cmCMYKSpace: c_int = 2;
pub const cmHSVSpace: c_int = 3;
pub const cmHLSSpace: c_int = 4;
pub const cmYXYSpace: c_int = 5;
pub const cmXYZSpace: c_int = 6;
pub const cmLUVSpace: c_int = 7;
pub const cmLABSpace: c_int = 8;
pub const cmReservedSpace1: c_int = 9;
pub const cmGraySpace: c_int = 10;
pub const cmReservedSpace2: c_int = 11;
pub const cmGamutResultSpace: c_int = 12;
pub const cmNamedIndexedSpace: c_int = 16;
pub const cmMCFiveSpace: c_int = 17;
pub const cmMCSixSpace: c_int = 18;
pub const cmMCSevenSpace: c_int = 19;
pub const cmMCEightSpace: c_int = 20;
pub const cmAlphaPmulSpace: c_int = 64;
pub const cmAlphaSpace: c_int = 128;
pub const cmRGBASpace: c_int = 129;
pub const cmGrayASpace: c_int = 138;
pub const cmRGBAPmulSpace: c_int = 193;
pub const cmGrayAPmulSpace: c_int = 202;
const enum_unnamed_1549 = c_uint;
pub const cmGray8Space: c_int = 10250;
pub const cmGray16Space: c_int = 10;
pub const cmGray16LSpace: c_int = 16394;
pub const cmGrayA16Space: c_int = 8330;
pub const cmGrayA32Space: c_int = 138;
pub const cmGrayA32LSpace: c_int = 16522;
pub const cmGrayA16PmulSpace: c_int = 8394;
pub const cmGrayA32PmulSpace: c_int = 202;
pub const cmGrayA32LPmulSpace: c_int = 16586;
pub const cmRGB16Space: c_int = 1281;
pub const cmRGB16LSpace: c_int = 17665;
pub const cmRGB565Space: c_int = 1537;
pub const cmRGB565LSpace: c_int = 17921;
pub const cmRGB24Space: c_int = 8449;
pub const cmRGB32Space: c_int = 2049;
pub const cmRGB48Space: c_int = 10497;
pub const cmRGB48LSpace: c_int = 26881;
pub const cmARGB32Space: c_int = 6273;
pub const cmARGB64Space: c_int = 14977;
pub const cmARGB64LSpace: c_int = 31361;
pub const cmRGBA32Space: c_int = 2177;
pub const cmRGBA64Space: c_int = 10881;
pub const cmRGBA64LSpace: c_int = 27265;
pub const cmARGB32PmulSpace: c_int = 6337;
pub const cmARGB64PmulSpace: c_int = 15041;
pub const cmARGB64LPmulSpace: c_int = 31425;
pub const cmRGBA32PmulSpace: c_int = 2241;
pub const cmRGBA64PmulSpace: c_int = 10945;
pub const cmRGBA64LPmulSpace: c_int = 27329;
pub const cmCMYK32Space: c_int = 2050;
pub const cmCMYK64Space: c_int = 10754;
pub const cmCMYK64LSpace: c_int = 27138;
pub const cmHSV32Space: c_int = 2563;
pub const cmHLS32Space: c_int = 2564;
pub const cmYXY32Space: c_int = 2565;
pub const cmXYZ24Space: c_int = 8454;
pub const cmXYZ32Space: c_int = 2566;
pub const cmXYZ48Space: c_int = 10502;
pub const cmXYZ48LSpace: c_int = 26886;
pub const cmLUV32Space: c_int = 2567;
pub const cmLAB24Space: c_int = 8456;
pub const cmLAB32Space: c_int = 2568;
pub const cmLAB48Space: c_int = 10504;
pub const cmLAB48LSpace: c_int = 26888;
pub const cmGamutResult1Space: c_int = 2828;
pub const cmNamedIndexed32Space: c_int = 10000;
pub const cmNamedIndexed32LSpace: c_int = 26384;
pub const cmMCFive8Space: c_int = 8721;
pub const cmMCSix8Space: c_int = 8978;
pub const cmMCSeven8Space: c_int = 9235;
pub const cmMCEight8Space: c_int = 9492;
const enum_unnamed_1550 = c_uint;
pub const CMBitmapColorSpace = UInt32;
pub const struct_CMBitmap = extern struct {
    image: [*c]u8,
    width: usize,
    height: usize,
    rowBytes: usize,
    pixelSize: usize,
    space: CMBitmapColorSpace,
    user1: UInt32,
    user2: UInt32,
};
pub const CMBitmap = struct_CMBitmap;
pub const CS_MAX_PATH: c_int = 1024;
const enum_unnamed_1551 = c_uint;
pub const cmNoProfileBase: c_int = 0;
pub const cmPathBasedProfile: c_int = 5;
pub const cmBufferBasedProfile: c_int = 6;
const enum_unnamed_1552 = c_uint;
pub const struct_CMHandleLocation = extern struct {
    h: Handle,
};
pub const CMHandleLocation = struct_CMHandleLocation;
pub const struct_CMPathLocation = extern struct {
    path: [1024]u8,
};
pub const CMPathLocation = struct_CMPathLocation;
pub const struct_CMBufferLocation = extern struct {
    buffer: ?*anyopaque,
    size: UInt32,
};
pub const CMBufferLocation = struct_CMBufferLocation;
pub const union_CMProfLoc = extern union {
    handleLoc: CMHandleLocation,
    pathLoc: CMPathLocation,
    bufferLoc: CMBufferLocation,
};
pub const CMProfLoc = union_CMProfLoc;
pub const struct_CMProfileLocation = extern struct {
    locType: c_short,
    u: CMProfLoc,
};
pub const CMProfileLocation = struct_CMProfileLocation;
pub const cmOriginalProfileLocationSize: c_int = 72;
pub const cmCurrentProfileLocationSize: c_int = 1032;
const enum_unnamed_1553 = c_uint;
pub const cmProfileIterateDataVersion1: c_int = 65536;
pub const cmProfileIterateDataVersion2: c_int = 131072;
pub const cmProfileIterateDataVersion3: c_int = 196608;
pub const cmProfileIterateDataVersion4: c_int = 262144;
const enum_unnamed_1554 = c_uint;
pub const struct_CMProfileIterateData = extern struct {
    dataVersion: UInt32,
    header: CM2Header,
    code: ScriptCode,
    name: Str255,
    location: CMProfileLocation,
    uniCodeNameCount: UniCharCount,
    uniCodeName: [*c]UniChar,
    asciiName: [*c]u8,
    makeAndModel: [*c]CMMakeAndModel,
    digest: [*c]CMProfileMD5,
};
pub const CMProfileIterateData = struct_CMProfileIterateData;
pub const CMProfileIterateProcPtr = ?*const fn ([*c]CMProfileIterateData, ?*anyopaque) callconv(.C) OSErr;
pub const CMProfileIterateUPP = CMProfileIterateProcPtr;
pub const CMMIterateProcPtr = ?*const fn ([*c]CMMInfo, ?*anyopaque) callconv(.C) OSErr;
pub const CMMIterateUPP = CMMIterateProcPtr;
pub const CMLabToLabProcPtr = ?*const fn ([*c]f32, [*c]f32, [*c]f32, ?*anyopaque) callconv(.C) void;
pub const kCMFloatBitmapFlagsNone: c_int = 0;
pub const kCMFloatBitmapFlagsAlpha: c_int = 1;
pub const kCMFloatBitmapFlagsAlphaPremul: c_int = 2;
pub const kCMFloatBitmapFlagsRangeClipped: c_int = 4;
pub const enum_CMFloatBitmapFlags = c_uint;
pub const CMFloatBitmapFlags = enum_CMFloatBitmapFlags;
pub const struct_CMFloatBitmap = extern struct {
    version: c_ulong,
    buffers: [16][*c]f32,
    height: usize,
    width: usize,
    rowStride: ptrdiff_t,
    colStride: ptrdiff_t,
    space: OSType,
    flags: CMFloatBitmapFlags,
};
pub const CMFloatBitmap = struct_CMFloatBitmap;
pub const cmDeviceInfoVersion1: c_int = 65536;
pub const cmDeviceProfileInfoVersion1: c_int = 65536;
pub const cmDeviceProfileInfoVersion2: c_int = 131072;
const enum_unnamed_1555 = c_uint;
pub const cmCurrentDeviceInfoVersion: c_int = 65536;
pub const cmCurrentProfileInfoVersion: c_int = 65536;
const enum_unnamed_1556 = c_uint;
pub const cmDefaultDeviceID: c_int = 0;
pub const cmDefaultProfileID: c_int = 0;
const enum_unnamed_1557 = c_uint;
pub const cmDeviceStateDefault: c_int = 0;
pub const cmDeviceStateOffline: c_int = 1;
pub const cmDeviceStateBusy: c_int = 2;
pub const cmDeviceStateForceNotify: c_int = -2147483648;
pub const cmDeviceStateDeviceRsvdBits: c_int = 16711680;
pub const cmDeviceStateAppleRsvdBits: c_int = -16711681;
const enum_unnamed_1558 = c_int;
pub const cmIterateFactoryDeviceProfiles: c_int = 1;
pub const cmIterateCustomDeviceProfiles: c_int = 2;
pub const cmIterateCurrentDeviceProfiles: c_int = 3;
pub const cmIterateAllDeviceProfiles: c_int = 4;
pub const cmIterateDeviceProfilesMask: c_int = 15;
const enum_unnamed_1559 = c_uint;
pub const cmDeviceDBNotFoundErr: c_int = -4227;
pub const cmDeviceAlreadyRegistered: c_int = -4228;
pub const cmDeviceNotRegistered: c_int = -4229;
pub const cmDeviceProfilesNotFound: c_int = -4230;
pub const cmInternalCFErr: c_int = -4231;
pub const cmPrefsSynchError: c_int = -4232;
const enum_unnamed_1560 = c_int;
pub const CMDeviceState = UInt32;
pub const CMDeviceID = UInt32;
pub const CMDeviceProfileID = UInt32;
pub const cmScannerDeviceClass: c_int = 1935896178;
pub const cmCameraDeviceClass: c_int = 1668117089;
pub const cmDisplayDeviceClass: c_int = 1835955314;
pub const cmPrinterDeviceClass: c_int = 1886549106;
pub const cmProofDeviceClass: c_int = 1886549350;
const enum_unnamed_1561 = c_uint;
pub const CMDeviceClass = OSType;
pub const struct_CMDeviceScope = extern struct {
    deviceUser: CFStringRef,
    deviceHost: CFStringRef,
};
pub const CMDeviceScope = struct_CMDeviceScope;
pub const CMDeviceProfileScope = struct_CMDeviceScope;
pub const struct_CMDeviceInfo = extern struct {
    dataVersion: UInt32,
    deviceClass: CMDeviceClass,
    deviceID: CMDeviceID,
    deviceScope: CMDeviceScope,
    deviceState: CMDeviceState,
    defaultProfileID: CMDeviceProfileID,
    deviceName: [*c]CFDictionaryRef,
    profileCount: UInt32,
    reserved: UInt32,
};
pub const CMDeviceInfo = struct_CMDeviceInfo;
pub const CMDeviceInfoPtr = [*c]struct_CMDeviceInfo;
pub const struct_CMDeviceProfileInfo = extern struct {
    dataVersion: UInt32,
    profileID: CMDeviceProfileID,
    profileLoc: CMProfileLocation,
    profileName: CFDictionaryRef,
    reserved: UInt32,
};
pub const CMDeviceProfileInfo = struct_CMDeviceProfileInfo;
pub const struct_NCMDeviceProfileInfo = extern struct {
    dataVersion: UInt32,
    profileID: CMDeviceProfileID,
    profileLoc: CMProfileLocation,
    profileName: CFDictionaryRef,
    profileScope: CMDeviceProfileScope,
    reserved: UInt32,
};
pub const NCMDeviceProfileInfo = struct_NCMDeviceProfileInfo;
pub const struct_CMDeviceProfileArray = extern struct {
    profileCount: UInt32,
    profiles: [1]CMDeviceProfileInfo,
};
pub const CMDeviceProfileArray = struct_CMDeviceProfileArray;
pub const CMDeviceProfileArrayPtr = [*c]struct_CMDeviceProfileArray;
pub const CMIterateDeviceInfoProcPtr = ?*const fn ([*c]const CMDeviceInfo, ?*anyopaque) callconv(.C) OSErr;
pub const CMIterateDeviceProfileProcPtr = ?*const fn ([*c]const CMDeviceInfo, [*c]const NCMDeviceProfileInfo, ?*anyopaque) callconv(.C) OSErr;
pub const struct_OpaqueGrafPtr = opaque {};
pub const GrafPtr = ?*struct_OpaqueGrafPtr;
pub const CGrafPtr = GrafPtr;
pub const GWorldPtr = CGrafPtr;
pub const QDErr = c_short;
pub const GWorldFlags = c_ulong;
pub const srcCopy: c_int = 0;
const enum_unnamed_1562 = c_uint;
pub const struct_BitMap = extern struct {
    baseAddr: Ptr,
    rowBytes: c_short,
    bounds: Rect,
};
pub const BitMap = struct_BitMap;
pub const BitMapPtr = [*c]BitMap;
pub const BitMapHandle = [*c]BitMapPtr;
pub const struct_RGBColor = extern struct {
    red: c_ushort,
    green: c_ushort,
    blue: c_ushort,
};
pub const RGBColor = struct_RGBColor;
pub const struct_ColorSpec = extern struct {
    value: c_short,
    rgb: RGBColor,
};
pub const ColorSpec = struct_ColorSpec;
pub const ColorSpecPtr = [*c]ColorSpec;
pub const CSpecArray = [1]ColorSpec;
pub const struct_ColorTable = extern struct {
    ctSeed: SInt32,
    ctFlags: c_short,
    ctSize: c_short,
    ctTable: CSpecArray,
};
pub const ColorTable = struct_ColorTable;
pub const CTabPtr = [*c]ColorTable;
pub const CTabHandle = [*c]CTabPtr;
pub const struct_PixMap = extern struct {
    baseAddr: Ptr,
    rowBytes: c_short,
    bounds: Rect,
    pmVersion: c_short,
    packType: c_short,
    packSize: SInt32,
    hRes: Fixed,
    vRes: Fixed,
    pixelType: c_short,
    pixelSize: c_short,
    cmpCount: c_short,
    cmpSize: c_short,
    pixelFormat: OSType,
    pmTable: CTabHandle,
    pmExt: ?*anyopaque,
};
pub const PixMap = struct_PixMap;
pub const PixMapPtr = [*c]PixMap;
pub const PixMapHandle = [*c]PixMapPtr;
pub const k1MonochromePixelFormat: c_int = 1;
pub const k2IndexedPixelFormat: c_int = 2;
pub const k4IndexedPixelFormat: c_int = 4;
pub const k8IndexedPixelFormat: c_int = 8;
pub const k16BE555PixelFormat: c_int = 16;
pub const k24RGBPixelFormat: c_int = 24;
pub const k32ARGBPixelFormat: c_int = 32;
pub const k1IndexedGrayPixelFormat: c_int = 33;
pub const k2IndexedGrayPixelFormat: c_int = 34;
pub const k4IndexedGrayPixelFormat: c_int = 36;
pub const k8IndexedGrayPixelFormat: c_int = 40;
pub const k16LE555PixelFormat: c_int = 1278555445;
pub const k16LE5551PixelFormat: c_int = 892679473;
pub const k16BE565PixelFormat: c_int = 1110783541;
pub const k16LE565PixelFormat: c_int = 1278555701;
pub const k24BGRPixelFormat: c_int = 842285639;
pub const k32BGRAPixelFormat: c_int = 1111970369;
pub const k32ABGRPixelFormat: c_int = 1094862674;
pub const k32RGBAPixelFormat: c_int = 1380401729;
pub const kYUVSPixelFormat: c_int = 2037741171;
pub const kYUVUPixelFormat: c_int = 2037741173;
pub const kYVU9PixelFormat: c_int = 1498830137;
pub const kYUV411PixelFormat: c_int = 1496592689;
pub const kYVYU422PixelFormat: c_int = 1498831189;
pub const kUYVY422PixelFormat: c_int = 1431918169;
pub const kYUV211PixelFormat: c_int = 1496461617;
pub const k2vuyPixelFormat: c_int = 846624121;
const enum_unnamed_1563 = c_uint;
pub const struct_Pattern = extern struct {
    pat: [8]UInt8,
};
pub const Pattern = struct_Pattern;
pub const PatPtr = [*c]Pattern;
pub const PatHandle = [*c]PatPtr;
pub const struct_PixPat = extern struct {
    patType: c_short,
    patMap: PixMapHandle,
    patData: Handle,
    patXData: Handle,
    patXValid: c_short,
    patXMap: Handle,
    pat1Data: Pattern,
};
pub const PixPat = struct_PixPat;
pub const PixPatPtr = [*c]PixPat;
pub const PixPatHandle = [*c]PixPatPtr;
pub const struct_OpaqueRgnHandle = opaque {};
pub const RgnHandle = ?*struct_OpaqueRgnHandle;
pub const GDevice = struct_GDevice;
pub const GDPtr = [*c]GDevice;
pub const GDHandle = [*c]GDPtr;
pub const struct_GDevice = extern struct {
    gdRefNum: c_short,
    gdID: c_short,
    gdType: c_short,
    gdITable: Handle,
    gdResPref: c_short,
    gdSearchProc: Handle,
    gdCompProc: Handle,
    gdFlags: c_short,
    gdPMap: PixMapHandle,
    gdRefCon: SInt32,
    gdNextGD: GDHandle,
    gdRect: Rect,
    gdMode: SInt32,
    gdCCBytes: c_short,
    gdCCDepth: c_short,
    gdCCXData: Handle,
    gdCCXMask: Handle,
    gdExt: Handle,
};
pub const struct_Picture = extern struct {
    picSize: c_short,
    picFrame: Rect,
};
pub const Picture = struct_Picture;
pub const PicPtr = [*c]Picture;
pub const PicHandle = [*c]PicPtr;
pub const struct_OpenCPicParams = extern struct {
    srcRect: Rect,
    hRes: Fixed,
    vRes: Fixed,
    version: c_short,
    reserved1: c_short,
    reserved2: SInt32,
};
pub const OpenCPicParams = struct_OpenCPicParams;
pub const struct_FontInfo = extern struct {
    ascent: c_short,
    descent: c_short,
    widMax: c_short,
    leading: c_short,
};
pub const FontInfo = struct_FontInfo;
pub const QDRegionParseDirection = SInt32;
pub const RegionToRectsProcPtr = ?*const fn (UInt16, RgnHandle, [*c]const Rect, ?*anyopaque) callconv(.C) OSStatus;
pub const RegionToRectsUPP = RegionToRectsProcPtr;
pub const TruncCode = c_short;
pub const DragConstraint = UInt16;
pub const kNoConstraint: c_int = 0;
pub const kVerticalConstraint: c_int = 1;
pub const kHorizontalConstraint: c_int = 2;
const enum_unnamed_1564 = c_uint;
pub const DragGrayRgnProcPtr = ?*const fn () callconv(.C) void;
pub const ColorSearchProcPtr = ?*const fn ([*c]RGBColor, [*c]c_long) callconv(.C) Boolean;
pub const ColorComplementProcPtr = ?*const fn ([*c]RGBColor) callconv(.C) Boolean;
pub const DragGrayRgnUPP = DragGrayRgnProcPtr;
pub const ColorSearchUPP = ColorSearchProcPtr;
pub const ColorComplementUPP = ColorComplementProcPtr;
pub const struct_OpaqueWindowPtr = opaque {};
pub const WindowPtr = ?*struct_OpaqueWindowPtr;
pub const struct_OpaqueDialogPtr = opaque {};
pub const DialogPtr = ?*struct_OpaqueDialogPtr;
pub const WindowRef = WindowPtr;
pub const struct_VDGammaRecord = extern struct {
    csGTable: Ptr,
};
pub const VDGammaRecord = struct_VDGammaRecord;
pub const VDGamRecPtr = [*c]VDGammaRecord;
pub const struct_MacPolygon = extern struct {
    polySize: c_short,
    polyBBox: Rect,
    polyPoints: [1]Point,
};
pub const MacPolygon = struct_MacPolygon;
pub const Polygon = MacPolygon;
pub const PolyPtr = [*c]MacPolygon;
pub const PolyHandle = [*c]PolyPtr;
pub const GrafVerb = SInt8;
pub const PrinterStatusOpcode = SInt32;
pub const QDTextProcPtr = ?*const fn (c_short, ?*const anyopaque, Point, Point) callconv(.C) void;
pub const QDLineProcPtr = ?*const fn (Point) callconv(.C) void;
pub const QDRectProcPtr = ?*const fn (GrafVerb, [*c]const Rect) callconv(.C) void;
pub const QDRRectProcPtr = ?*const fn (GrafVerb, [*c]const Rect, c_short, c_short) callconv(.C) void;
pub const QDOvalProcPtr = ?*const fn (GrafVerb, [*c]const Rect) callconv(.C) void;
pub const QDArcProcPtr = ?*const fn (GrafVerb, [*c]const Rect, c_short, c_short) callconv(.C) void;
pub const QDPolyProcPtr = ?*const fn (GrafVerb, PolyHandle) callconv(.C) void;
pub const QDRgnProcPtr = ?*const fn (GrafVerb, RgnHandle) callconv(.C) void;
pub const QDBitsProcPtr = ?*const fn ([*c]const BitMap, [*c]const Rect, [*c]const Rect, c_short, RgnHandle) callconv(.C) void;
pub const QDCommentProcPtr = ?*const fn (c_short, c_short, Handle) callconv(.C) void;
pub const QDTxMeasProcPtr = ?*const fn (c_short, ?*const anyopaque, [*c]Point, [*c]Point, [*c]FontInfo) callconv(.C) c_short;
pub const QDGetPicProcPtr = ?*const fn (?*anyopaque, c_short) callconv(.C) void;
pub const QDPutPicProcPtr = ?*const fn (?*const anyopaque, c_short) callconv(.C) void;
pub const QDOpcodeProcPtr = ?*const fn ([*c]const Rect, [*c]const Rect, UInt16, SInt16) callconv(.C) void;
pub const QDStdGlyphsProcPtr = ?*const fn (?*anyopaque, ByteCount) callconv(.C) OSStatus;
pub const QDJShieldCursorProcPtr = ?*const fn (c_short, c_short, c_short, c_short) callconv(.C) void;
pub const QDPrinterStatusProcPtr = ?*const fn (PrinterStatusOpcode, CGrafPtr, ?*anyopaque) callconv(.C) OSStatus;
pub const QDTextUPP = QDTextProcPtr;
pub const QDLineUPP = QDLineProcPtr;
pub const QDRectUPP = QDRectProcPtr;
pub const QDRRectUPP = QDRRectProcPtr;
pub const QDOvalUPP = QDOvalProcPtr;
pub const QDArcUPP = QDArcProcPtr;
pub const QDPolyUPP = QDPolyProcPtr;
pub const QDRgnUPP = QDRgnProcPtr;
pub const QDBitsUPP = QDBitsProcPtr;
pub const QDCommentUPP = QDCommentProcPtr;
pub const QDTxMeasUPP = QDTxMeasProcPtr;
pub const QDGetPicUPP = QDGetPicProcPtr;
pub const QDPutPicUPP = QDPutPicProcPtr;
pub const QDOpcodeUPP = QDOpcodeProcPtr;
pub const QDStdGlyphsUPP = QDStdGlyphsProcPtr;
pub const QDJShieldCursorUPP = QDJShieldCursorProcPtr;
pub const QDPrinterStatusUPP = QDPrinterStatusProcPtr;
pub const struct_CQDProcs = extern struct {
    textProc: QDTextUPP,
    lineProc: QDLineUPP,
    rectProc: QDRectUPP,
    rRectProc: QDRRectUPP,
    ovalProc: QDOvalUPP,
    arcProc: QDArcUPP,
    polyProc: QDPolyUPP,
    rgnProc: QDRgnUPP,
    bitsProc: QDBitsUPP,
    commentProc: QDCommentUPP,
    txMeasProc: QDTxMeasUPP,
    getPicProc: QDGetPicUPP,
    putPicProc: QDPutPicUPP,
    opcodeProc: QDOpcodeUPP,
    newProc1: UniversalProcPtr,
    glyphsProc: QDStdGlyphsUPP,
    printerStatusProc: QDPrinterStatusUPP,
    newProc4: UniversalProcPtr,
    newProc5: UniversalProcPtr,
    newProc6: UniversalProcPtr,
};
pub const CQDProcs = struct_CQDProcs;
pub const CQDProcsPtr = [*c]CQDProcs;
pub const struct_GrafPort = extern struct {
    whatever: [87]c_short,
};
pub const GrafPort = struct_GrafPort;
pub const CGrafPort = GrafPort;
pub const struct___HIShape = opaque {};
pub const HIShapeRef = ?*const struct___HIShape;
pub const HIMutableShapeRef = ?*struct___HIShape;
pub const kHIShapeEnumerateInit: c_int = 1;
pub const kHIShapeEnumerateRect: c_int = 2;
pub const kHIShapeEnumerateTerminate: c_int = 3;
const enum_unnamed_1565 = c_uint;
pub const kHIShapeParseFromTop: c_int = 0;
pub const kHIShapeParseFromBottom: c_int = 1;
pub const kHIShapeParseFromLeft: c_int = 0;
pub const kHIShapeParseFromRight: c_int = 2;
pub const kHIShapeParseFromTopLeft: c_int = 0;
pub const kHIShapeParseFromBottomRight: c_int = 3;
const enum_unnamed_1566 = c_uint;
pub const HIShapeEnumerateProcPtr = ?*const fn (c_int, HIShapeRef, [*c]const CGRect, ?*anyopaque) callconv(.C) OSStatus;
pub extern fn HIShapeGetTypeID() CFTypeID;
pub extern fn HIShapeCreateEmpty() HIShapeRef;
pub extern fn HIShapeCreateWithQDRgn(inRgn: RgnHandle) HIShapeRef;
pub extern fn HIShapeCreateWithRect(inRect: [*c]const CGRect) HIShapeRef;
pub extern fn HIShapeCreateCopy(inShape: HIShapeRef) HIShapeRef;
pub extern fn HIShapeCreateIntersection(inShape1: HIShapeRef, inShape2: HIShapeRef) HIShapeRef;
pub extern fn HIShapeCreateDifference(inShape1: HIShapeRef, inShape2: HIShapeRef) HIShapeRef;
pub extern fn HIShapeCreateUnion(inShape1: HIShapeRef, inShape2: HIShapeRef) HIShapeRef;
pub extern fn HIShapeCreateXor(inShape1: HIShapeRef, inShape2: HIShapeRef) HIShapeRef;
pub extern fn HIShapeIsEmpty(inShape: HIShapeRef) Boolean;
pub extern fn HIShapeIsRectangular(inShape: HIShapeRef) Boolean;
pub extern fn HIShapeContainsPoint(inShape: HIShapeRef, inPoint: [*c]const CGPoint) Boolean;
pub extern fn HIShapeIntersectsRect(inShape: HIShapeRef, inRect: [*c]const CGRect) Boolean;
pub extern fn HIShapeGetBounds(inShape: HIShapeRef, outRect: [*c]CGRect) [*c]CGRect;
pub extern fn HIShapeGetAsQDRgn(inShape: HIShapeRef, outRgn: RgnHandle) OSStatus;
pub extern fn HIShapeReplacePathInCGContext(inShape: HIShapeRef, inContext: CGContextRef) OSStatus;
pub extern fn HIShapeEnumerate(inShape: HIShapeRef, inOptions: OptionBits, inProc: HIShapeEnumerateProcPtr, inRefcon: ?*anyopaque) OSStatus;
pub extern fn HIShapeCreateMutable() HIMutableShapeRef;
pub extern fn HIShapeCreateMutableCopy(inOrig: HIShapeRef) HIMutableShapeRef;
pub extern fn HIShapeCreateMutableWithRect(inRect: [*c]const CGRect) HIMutableShapeRef;
pub extern fn HIShapeSetEmpty(inShape: HIMutableShapeRef) OSStatus;
pub extern fn HIShapeSetWithShape(inDestShape: HIMutableShapeRef, inSrcShape: HIShapeRef) OSStatus;
pub extern fn HIShapeIntersect(inShape1: HIShapeRef, inShape2: HIShapeRef, outResult: HIMutableShapeRef) OSStatus;
pub extern fn HIShapeDifference(inShape1: HIShapeRef, inShape2: HIShapeRef, outResult: HIMutableShapeRef) OSStatus;
pub extern fn HIShapeUnion(inShape1: HIShapeRef, inShape2: HIShapeRef, outResult: HIMutableShapeRef) OSStatus;
pub extern fn HIShapeXor(inShape1: HIShapeRef, inShape2: HIShapeRef, outResult: HIMutableShapeRef) OSStatus;
pub extern fn HIShapeOffset(inShape: HIMutableShapeRef, inDX: CGFloat, inDY: CGFloat) OSStatus;
pub extern fn HIShapeInset(inShape: HIMutableShapeRef, inDX: CGFloat, inDY: CGFloat) OSStatus;
pub extern fn HIShapeUnionWithRect(inShape: HIMutableShapeRef, inRect: [*c]const CGRect) OSStatus;
pub const kAlignNone: c_int = 0;
pub const kAlignVerticalCenter: c_int = 1;
pub const kAlignTop: c_int = 2;
pub const kAlignBottom: c_int = 3;
pub const kAlignHorizontalCenter: c_int = 4;
pub const kAlignAbsoluteCenter: c_int = 5;
pub const kAlignCenterTop: c_int = 6;
pub const kAlignCenterBottom: c_int = 7;
pub const kAlignLeft: c_int = 8;
pub const kAlignCenterLeft: c_int = 9;
pub const kAlignTopLeft: c_int = 10;
pub const kAlignBottomLeft: c_int = 11;
pub const kAlignRight: c_int = 12;
pub const kAlignCenterRight: c_int = 13;
pub const kAlignTopRight: c_int = 14;
pub const kAlignBottomRight: c_int = 15;
const enum_unnamed_1567 = c_uint;
pub const atNone: c_int = 0;
pub const atVerticalCenter: c_int = 1;
pub const atTop: c_int = 2;
pub const atBottom: c_int = 3;
pub const atHorizontalCenter: c_int = 4;
pub const atAbsoluteCenter: c_int = 5;
pub const atCenterTop: c_int = 6;
pub const atCenterBottom: c_int = 7;
pub const atLeft: c_int = 8;
pub const atCenterLeft: c_int = 9;
pub const atTopLeft: c_int = 10;
pub const atBottomLeft: c_int = 11;
pub const atRight: c_int = 12;
pub const atCenterRight: c_int = 13;
pub const atTopRight: c_int = 14;
pub const atBottomRight: c_int = 15;
const enum_unnamed_1568 = c_uint;
pub const IconAlignmentType = SInt16;
pub const kTransformNone: c_int = 0;
pub const kTransformDisabled: c_int = 1;
pub const kTransformOffline: c_int = 2;
pub const kTransformOpen: c_int = 3;
pub const kTransformLabel1: c_int = 256;
pub const kTransformLabel2: c_int = 512;
pub const kTransformLabel3: c_int = 768;
pub const kTransformLabel4: c_int = 1024;
pub const kTransformLabel5: c_int = 1280;
pub const kTransformLabel6: c_int = 1536;
pub const kTransformLabel7: c_int = 1792;
pub const kTransformSelected: c_int = 16384;
pub const kTransformSelectedDisabled: c_int = 16385;
pub const kTransformSelectedOffline: c_int = 16386;
pub const kTransformSelectedOpen: c_int = 16387;
const enum_unnamed_1569 = c_uint;
pub const ttNone: c_int = 0;
pub const ttDisabled: c_int = 1;
pub const ttOffline: c_int = 2;
pub const ttOpen: c_int = 3;
pub const ttLabel1: c_int = 256;
pub const ttLabel2: c_int = 512;
pub const ttLabel3: c_int = 768;
pub const ttLabel4: c_int = 1024;
pub const ttLabel5: c_int = 1280;
pub const ttLabel6: c_int = 1536;
pub const ttLabel7: c_int = 1792;
pub const ttSelected: c_int = 16384;
pub const ttSelectedDisabled: c_int = 16385;
pub const ttSelectedOffline: c_int = 16386;
pub const ttSelectedOpen: c_int = 16387;
const enum_unnamed_1570 = c_uint;
pub const IconTransformType = SInt16;
pub const kSelectorLarge1Bit: c_int = 1;
pub const kSelectorLarge4Bit: c_int = 2;
pub const kSelectorLarge8Bit: c_int = 4;
pub const kSelectorLarge32Bit: c_int = 8;
pub const kSelectorLarge8BitMask: c_int = 16;
pub const kSelectorSmall1Bit: c_int = 256;
pub const kSelectorSmall4Bit: c_int = 512;
pub const kSelectorSmall8Bit: c_int = 1024;
pub const kSelectorSmall32Bit: c_int = 2048;
pub const kSelectorSmall8BitMask: c_int = 4096;
pub const kSelectorMini1Bit: c_int = 65536;
pub const kSelectorMini4Bit: c_int = 131072;
pub const kSelectorMini8Bit: c_int = 262144;
pub const kSelectorHuge1Bit: c_int = 16777216;
pub const kSelectorHuge4Bit: c_int = 33554432;
pub const kSelectorHuge8Bit: c_int = 67108864;
pub const kSelectorHuge32Bit: c_int = 134217728;
pub const kSelectorHuge8BitMask: c_int = 268435456;
pub const kSelectorAllLargeData: c_int = 255;
pub const kSelectorAllSmallData: c_int = 65280;
pub const kSelectorAllMiniData: c_int = 16711680;
pub const kSelectorAllHugeData: c_uint = 4278190080;
pub const kSelectorAll1BitData: c_int = 16843009;
pub const kSelectorAll4BitData: c_int = 33686018;
pub const kSelectorAll8BitData: c_int = 67372036;
pub const kSelectorAll32BitData: c_int = 134219784;
pub const kSelectorAllAvailableData: c_uint = 4294967295;
const enum_unnamed_1571 = c_uint;
pub const IconSelectorValue = UInt32;
pub const svLarge1Bit: c_int = 1;
pub const svLarge4Bit: c_int = 2;
pub const svLarge8Bit: c_int = 4;
pub const svSmall1Bit: c_int = 256;
pub const svSmall4Bit: c_int = 512;
pub const svSmall8Bit: c_int = 1024;
pub const svMini1Bit: c_int = 65536;
pub const svMini4Bit: c_int = 131072;
pub const svMini8Bit: c_int = 262144;
pub const svAllLargeData: c_int = 255;
pub const svAllSmallData: c_int = 65280;
pub const svAllMiniData: c_int = 16711680;
pub const svAll1BitData: c_int = 16843009;
pub const svAll4BitData: c_int = 33686018;
pub const svAll8BitData: c_int = 67372036;
pub const svAllAvailableData: c_uint = 4294967295;
const enum_unnamed_1572 = c_uint;
pub const IconActionProcPtr = ?*const fn (ResType, [*c]Handle, ?*anyopaque) callconv(.C) OSErr;
pub const IconGetterProcPtr = ?*const fn (ResType, ?*anyopaque) callconv(.C) Handle;
pub const IconActionUPP = IconActionProcPtr;
pub const IconGetterUPP = IconGetterProcPtr;
pub extern fn NewIconActionUPP(userRoutine: IconActionProcPtr) IconActionUPP;
pub extern fn NewIconGetterUPP(userRoutine: IconGetterProcPtr) IconGetterUPP;
pub extern fn DisposeIconActionUPP(userUPP: IconActionUPP) void;
pub extern fn DisposeIconGetterUPP(userUPP: IconGetterUPP) void;
pub extern fn InvokeIconActionUPP(theType: ResType, theIcon: [*c]Handle, yourDataPtr: ?*anyopaque, userUPP: IconActionUPP) OSErr;
pub extern fn InvokeIconGetterUPP(theType: ResType, yourDataPtr: ?*anyopaque, userUPP: IconGetterUPP) Handle;
pub const PlotIconRefFlags = UInt32;
pub const kPlotIconRefNormalFlags: c_int = 0;
pub const kPlotIconRefNoImage: c_int = 2;
pub const kPlotIconRefNoMask: c_int = 4;
const enum_unnamed_1573 = c_uint;
pub extern fn IconRefToIconFamily(theIconRef: IconRef, whichIcons: IconSelectorValue, iconFamily: [*c]IconFamilyHandle) OSErr;
pub extern fn SetIconFamilyData(iconFamily: IconFamilyHandle, iconType: OSType, h: Handle) OSErr;
pub extern fn GetIconFamilyData(iconFamily: IconFamilyHandle, iconType: OSType, h: Handle) OSErr;
pub extern fn PlotIconRefInContext(inContext: CGContextRef, inRect: [*c]const CGRect, inAlign: IconAlignmentType, inTransform: IconTransformType, inLabelColor: [*c]const RGBColor, inFlags: PlotIconRefFlags, inIconRef: IconRef) OSStatus;
pub extern fn IconRefContainsCGPoint(testPt: [*c]const CGPoint, iconRect: [*c]const CGRect, @"align": IconAlignmentType, iconServicesUsageFlags: IconServicesUsageFlags, theIconRef: IconRef) Boolean;
pub extern fn IconRefIntersectsCGRect(testRect: [*c]const CGRect, iconRect: [*c]const CGRect, @"align": IconAlignmentType, iconServicesUsageFlags: IconServicesUsageFlags, theIconRef: IconRef) Boolean;
pub extern fn IconRefToHIShape(iconRect: [*c]const CGRect, @"align": IconAlignmentType, iconServicesUsageFlags: IconServicesUsageFlags, theIconRef: IconRef) HIShapeRef;
pub extern fn IsIconRefMaskEmpty(iconRef: IconRef) Boolean;
pub extern fn GetIconRefVariant(inIconRef: IconRef, inVariant: OSType, outTransform: [*c]IconTransformType) IconRef;
pub const icPrefNotFoundErr: c_int = -666;
pub const icPermErr: c_int = -667;
pub const icPrefDataErr: c_int = -668;
pub const icInternalErr: c_int = -669;
pub const icTruncatedErr: c_int = -670;
pub const icNoMoreWritersErr: c_int = -671;
pub const icNothingToOverrideErr: c_int = -672;
pub const icNoURLErr: c_int = -673;
pub const icConfigNotFoundErr: c_int = -674;
pub const icConfigInappropriateErr: c_int = -675;
pub const icProfileNotFoundErr: c_int = -676;
pub const icTooManyProfilesErr: c_int = -677;
const enum_unnamed_1574 = c_int;
pub const kICComponentInterfaceVersion0: c_int = 0;
pub const kICComponentInterfaceVersion1: c_int = 65536;
pub const kICComponentInterfaceVersion2: c_int = 131072;
pub const kICComponentInterfaceVersion3: c_int = 196608;
pub const kICComponentInterfaceVersion4: c_int = 262144;
pub const kICComponentInterfaceVersion: c_int = 262144;
const enum_unnamed_1575 = c_uint;
pub const struct_OpaqueICInstance = opaque {};
pub const ICInstance = ?*struct_OpaqueICInstance;
pub const ICAttr = UInt32;
pub const kICAttrLockedBit: c_int = 0;
pub const kICAttrVolatileBit: c_int = 1;
const enum_unnamed_1576 = c_uint;
pub const kICAttrNoChange: c_uint = 4294967295;
pub const kICAttrLockedMask: c_int = 1;
pub const kICAttrVolatileMask: c_int = 2;
const enum_unnamed_1577 = c_uint;
pub const ICPerm = UInt8;
pub const icNoPerm: c_int = 0;
pub const icReadOnlyPerm: c_int = 1;
pub const icReadWritePerm: c_int = 2;
const enum_unnamed_1578 = c_uint;
pub const ICProfileID = SInt32;
pub const ICProfileIDPtr = [*c]ICProfileID;
pub const kICNilProfileID: c_int = 0;
const enum_unnamed_1579 = c_uint;
pub const kICNoUserInteractionBit: c_int = 0;
const enum_unnamed_1580 = c_uint;
pub const kICNoUserInteractionMask: c_int = 1;
const enum_unnamed_1581 = c_uint;
pub const kICFileType: c_int = 1229144432;
pub const kICCreator: c_int = 1229144432;
const enum_unnamed_1582 = c_uint;
pub const kInternetEventClass: c_int = 1196773964;
pub const kAEGetURL: c_int = 1196773964;
pub const kAEFetchURL: c_int = 1179996748;
pub const keyAEAttaching: c_int = 1098146664;
const enum_unnamed_1583 = c_uint;
pub const kICEditPreferenceEventClass: c_int = 1229144432;
pub const kICEditPreferenceEvent: c_int = 1229144432;
pub const keyICEditPreferenceDestination: c_int = 1684370292;
const enum_unnamed_1584 = c_uint;
pub const kICComponentVersion: c_int = 0;
pub const kICNumVersion: c_int = 1;
const enum_unnamed_1585 = c_uint;
pub const struct_ICFontRecord = extern struct {
    size: SInt16,
    face: Style,
    pad: u8,
    font: Str255,
};
pub const ICFontRecord = struct_ICFontRecord;
pub const ICFontRecordPtr = [*c]ICFontRecord;
pub const ICFontRecordHandle = [*c]ICFontRecordPtr;
pub const struct_ICCharTable = extern struct {
    netToMac: [256]u8,
    macToNet: [256]u8,
};
pub const ICCharTable = struct_ICCharTable;
pub const ICCharTablePtr = [*c]ICCharTable;
pub const ICCharTableHandle = [*c]ICCharTablePtr;
pub const struct_ICAppSpec = extern struct {
    fCreator: OSType,
    name: Str63,
};
pub const ICAppSpec = struct_ICAppSpec;
pub const ICAppSpecPtr = [*c]ICAppSpec;
pub const ICAppSpecHandle = [*c]ICAppSpecPtr;
pub const struct_ICAppSpecList = extern struct {
    numberOfItems: SInt16,
    appSpecs: [1]ICAppSpec,
};
pub const ICAppSpecList = struct_ICAppSpecList;
pub const ICAppSpecListPtr = [*c]ICAppSpecList;
pub const ICAppSpecListHandle = [*c]ICAppSpecListPtr;
pub const struct_ICFileSpec = extern struct {
    volName: Str31,
    volCreationDate: SInt32,
    fss: FSSpec,
    alias: AliasRecord,
};
pub const ICFileSpec = struct_ICFileSpec;
pub const ICFileSpecPtr = [*c]ICFileSpec;
pub const ICFileSpecHandle = [*c]ICFileSpecPtr;
pub const kICFileSpecHeaderSize: c_int = 106;
const enum_unnamed_1586 = c_uint;
pub const ICMapEntryFlags = SInt32;
pub const ICFixedLength = SInt16;
pub const struct_ICMapEntry = extern struct {
    totalLength: SInt16,
    fixedLength: ICFixedLength,
    version: SInt16,
    fileType: OSType,
    fileCreator: OSType,
    postCreator: OSType,
    flags: ICMapEntryFlags,
    extension: Str255,
    creatorAppName: Str255,
    postAppName: Str255,
    MIMEType: Str255,
    entryName: Str255,
};
pub const ICMapEntry = struct_ICMapEntry;
pub const ICMapEntryPtr = [*c]ICMapEntry;
pub const ICMapEntryHandle = [*c]ICMapEntryPtr;
pub const kICMapFixedLength: c_int = 22;
const enum_unnamed_1587 = c_uint;
pub const kICMapBinaryBit: c_int = 0;
pub const kICMapResourceForkBit: c_int = 1;
pub const kICMapDataForkBit: c_int = 2;
pub const kICMapPostBit: c_int = 3;
pub const kICMapNotIncomingBit: c_int = 4;
pub const kICMapNotOutgoingBit: c_int = 5;
const enum_unnamed_1588 = c_uint;
pub const kICMapBinaryMask: c_int = 1;
pub const kICMapResourceForkMask: c_int = 2;
pub const kICMapDataForkMask: c_int = 4;
pub const kICMapPostMask: c_int = 8;
pub const kICMapNotIncomingMask: c_int = 16;
pub const kICMapNotOutgoingMask: c_int = 32;
const enum_unnamed_1589 = c_uint;
pub const ICServiceEntryFlags = SInt16;
pub const struct_ICServiceEntry = extern struct {
    name: Str255,
    port: SInt16,
    flags: ICServiceEntryFlags,
};
pub const ICServiceEntry = struct_ICServiceEntry;
pub const ICServiceEntryPtr = [*c]ICServiceEntry;
pub const ICServiceEntryHandle = [*c]ICServiceEntryPtr;
pub const kICServicesTCPBit: c_int = 0;
pub const kICServicesUDPBit: c_int = 1;
const enum_unnamed_1590 = c_uint;
pub const kICServicesTCPMask: c_int = 1;
pub const kICServicesUDPMask: c_int = 2;
const enum_unnamed_1591 = c_uint;
pub const struct_ICServices = extern struct {
    count: SInt16,
    services: [1]ICServiceEntry,
};
pub const ICServices = struct_ICServices;
pub const ICServicesPtr = [*c]ICServices;
pub const ICServicesHandle = [*c]ICServicesPtr;
pub extern fn ICStart(inst: [*c]ICInstance, signature: OSType) OSStatus;
pub extern fn ICStop(inst: ICInstance) OSStatus;
pub extern fn ICGetVersion(inst: ICInstance, whichVersion: c_long, version: [*c]UInt32) OSStatus;
pub extern fn ICGetConfigName(inst: ICInstance, longname: Boolean, name: [*c]u8) OSStatus;
pub extern fn ICGetSeed(inst: ICInstance, seed: [*c]c_long) OSStatus;
pub extern fn ICGetPerm(inst: ICInstance, perm: [*c]ICPerm) OSStatus;
pub extern fn ICBegin(inst: ICInstance, perm: ICPerm) OSStatus;
pub extern fn ICGetPref(inst: ICInstance, key: ConstStr255Param, attr: [*c]ICAttr, buf: ?*anyopaque, size: [*c]c_long) OSStatus;
pub extern fn ICSetPref(inst: ICInstance, key: ConstStr255Param, attr: ICAttr, buf: ?*const anyopaque, size: c_long) OSStatus;
pub extern fn ICFindPrefHandle(inst: ICInstance, key: ConstStr255Param, attr: [*c]ICAttr, prefh: Handle) OSStatus;
pub extern fn ICGetPrefHandle(inst: ICInstance, key: ConstStr255Param, attr: [*c]ICAttr, prefh: [*c]Handle) OSStatus;
pub extern fn ICSetPrefHandle(inst: ICInstance, key: ConstStr255Param, attr: ICAttr, prefh: Handle) OSStatus;
pub extern fn ICCountPref(inst: ICInstance, count: [*c]c_long) OSStatus;
pub extern fn ICGetIndPref(inst: ICInstance, index: c_long, key: [*c]u8) OSStatus;
pub extern fn ICDeletePref(inst: ICInstance, key: ConstStr255Param) OSStatus;
pub extern fn ICEnd(inst: ICInstance) OSStatus;
pub extern fn ICGetDefaultPref(inst: ICInstance, key: ConstStr255Param, prefH: Handle) OSStatus;
pub extern fn ICEditPreferences(inst: ICInstance, key: ConstStr255Param) OSStatus;
pub extern fn ICLaunchURL(inst: ICInstance, hint: ConstStr255Param, data: ?*const anyopaque, len: c_long, selStart: [*c]c_long, selEnd: [*c]c_long) OSStatus;
pub extern fn ICParseURL(inst: ICInstance, hint: ConstStr255Param, data: ?*const anyopaque, len: c_long, selStart: [*c]c_long, selEnd: [*c]c_long, url: Handle) OSStatus;
pub extern fn ICCreateGURLEvent(inst: ICInstance, helperCreator: OSType, urlH: Handle, theEvent: [*c]AppleEvent) OSStatus;
pub extern fn ICSendGURLEvent(inst: ICInstance, theEvent: [*c]AppleEvent) OSStatus;
pub extern fn ICMapFilename(inst: ICInstance, filename: ConstStr255Param, entry: [*c]ICMapEntry) OSStatus;
pub extern fn ICMapTypeCreator(inst: ICInstance, fType: OSType, fCreator: OSType, filename: ConstStr255Param, entry: [*c]ICMapEntry) OSStatus;
pub extern fn ICMapEntriesFilename(inst: ICInstance, entries: Handle, filename: ConstStr255Param, entry: [*c]ICMapEntry) OSStatus;
pub extern fn ICMapEntriesTypeCreator(inst: ICInstance, entries: Handle, fType: OSType, fCreator: OSType, filename: ConstStr255Param, entry: [*c]ICMapEntry) OSStatus;
pub extern fn ICCountMapEntries(inst: ICInstance, entries: Handle, count: [*c]c_long) OSStatus;
pub extern fn ICGetIndMapEntry(inst: ICInstance, entries: Handle, index: c_long, pos: [*c]c_long, entry: [*c]ICMapEntry) OSStatus;
pub extern fn ICGetMapEntry(inst: ICInstance, entries: Handle, pos: c_long, entry: [*c]ICMapEntry) OSStatus;
pub extern fn ICSetMapEntry(inst: ICInstance, entries: Handle, pos: c_long, entry: [*c]const ICMapEntry) OSStatus;
pub extern fn ICDeleteMapEntry(inst: ICInstance, entries: Handle, pos: c_long) OSStatus;
pub extern fn ICAddMapEntry(inst: ICInstance, entries: Handle, entry: [*c]const ICMapEntry) OSStatus;
pub extern fn ICGetCurrentProfile(inst: ICInstance, currentID: [*c]ICProfileID) OSStatus;
pub extern fn ICSetCurrentProfile(inst: ICInstance, newID: ICProfileID) OSStatus;
pub extern fn ICCountProfiles(inst: ICInstance, count: [*c]c_long) OSStatus;
pub extern fn ICGetIndProfile(inst: ICInstance, index: c_long, thisID: [*c]ICProfileID) OSStatus;
pub extern fn ICGetProfileName(inst: ICInstance, thisID: ICProfileID, name: [*c]u8) OSStatus;
pub extern fn ICSetProfileName(inst: ICInstance, thisID: ICProfileID, name: ConstStr255Param) OSStatus;
pub extern fn ICAddProfile(inst: ICInstance, prototypeID: ICProfileID, newID: [*c]ICProfileID) OSStatus;
pub extern fn ICDeleteProfile(inst: ICInstance, thisID: ICProfileID) OSStatus;
pub const kNoProcess: c_int = 0;
pub const kSystemProcess: c_int = 1;
pub const kCurrentProcess: c_int = 2;
const enum_unnamed_1592 = c_uint;
pub const LaunchFlags = UInt16;
pub const launchContinue: c_int = 16384;
pub const launchNoFileFlags: c_int = 2048;
pub const launchUseMinimum: c_int = 1024;
pub const launchDontSwitch: c_int = 512;
pub const launchAllow24Bit: c_int = 256;
pub const launchInhibitDaemon: c_int = 128;
const enum_unnamed_1593 = c_uint;
const struct_unnamed_1594 = extern struct {
    what: UInt16,
    message: UInt32,
    when: UInt32,
    where: Point,
    modifiers: UInt16,
};
pub const struct_AppParameters = extern struct {
    theMsgEvent: struct_unnamed_1594,
    eventRefCon: UInt32,
    messageLength: UInt32,
};
pub const AppParameters = struct_AppParameters;
pub const AppParametersPtr = [*c]AppParameters;
pub const struct_LaunchParamBlockRec = extern struct {
    reserved1: UInt32,
    reserved2: UInt16,
    launchBlockID: UInt16,
    launchEPBLength: UInt32,
    launchFileFlags: UInt16,
    launchControlFlags: LaunchFlags,
    launchAppRef: FSRefPtr,
    launchProcessSN: ProcessSerialNumber,
    launchPreferredSize: UInt32,
    launchMinimumSize: UInt32,
    launchAvailableSize: UInt32,
    launchAppParameters: AppParametersPtr,
};
pub const LaunchParamBlockRec = struct_LaunchParamBlockRec;
pub const LaunchPBPtr = [*c]LaunchParamBlockRec;
pub const extendedBlock: c_int = 19523;
pub const extendedBlockLen: c_int = 40;
const enum_unnamed_1595 = c_uint;
pub const modeReserved: c_int = 16777216;
pub const modeControlPanel: c_int = 524288;
pub const modeLaunchDontSwitch: c_int = 262144;
pub const modeDeskAccessory: c_int = 131072;
pub const modeMultiLaunch: c_int = 65536;
pub const modeNeedSuspendResume: c_int = 16384;
pub const modeCanBackground: c_int = 4096;
pub const modeDoesActivateOnFGSwitch: c_int = 2048;
pub const modeOnlyBackground: c_int = 1024;
pub const modeGetFrontClicks: c_int = 512;
pub const modeGetAppDiedMsg: c_int = 256;
pub const mode32BitCompatible: c_int = 128;
pub const modeHighLevelEventAware: c_int = 64;
pub const modeLocalAndRemoteHLEvents: c_int = 32;
pub const modeStationeryAware: c_int = 16;
pub const modeUseTextEditServices: c_int = 8;
pub const modeDisplayManagerAware: c_int = 4;
const enum_unnamed_1596 = c_uint;
pub const ProcessApplicationTransformState = UInt32;
pub const kProcessTransformToForegroundApplication: c_int = 1;
pub const kProcessTransformToBackgroundApplication: c_int = 2;
pub const kProcessTransformToUIElementApplication: c_int = 4;
const enum_unnamed_1597 = c_uint;
pub const struct_ProcessInfoRec = extern struct {
    processInfoLength: UInt32,
    processName: StringPtr,
    processNumber: ProcessSerialNumber,
    processType: UInt32,
    processSignature: OSType,
    processMode: UInt32,
    processLocation: Ptr,
    processSize: UInt32,
    processFreeMem: UInt32,
    processLauncher: ProcessSerialNumber,
    processLaunchDate: UInt32,
    processActiveTime: UInt32,
    processAppRef: FSRefPtr,
};
pub const ProcessInfoRec = struct_ProcessInfoRec;
pub const ProcessInfoRecPtr = [*c]ProcessInfoRec;
pub const struct_ProcessInfoExtendedRec = extern struct {
    processInfoLength: UInt32,
    processName: StringPtr,
    processNumber: ProcessSerialNumber,
    processType: UInt32,
    processSignature: OSType,
    processMode: UInt32,
    processLocation: Ptr,
    processSize: UInt32,
    processFreeMem: UInt32,
    processLauncher: ProcessSerialNumber,
    processLaunchDate: UInt32,
    processActiveTime: UInt32,
    processAppRef: FSRefPtr,
    processTempMemTotal: UInt32,
    processPurgeableTempMemTotal: UInt32,
};
pub const ProcessInfoExtendedRec = struct_ProcessInfoExtendedRec;
pub const ProcessInfoExtendedRecPtr = [*c]ProcessInfoExtendedRec;
pub const struct_SizeResourceRec = extern struct {
    flags: UInt16,
    preferredHeapSize: UInt32,
    minimumHeapSize: UInt32,
};
pub const SizeResourceRec = struct_SizeResourceRec;
pub const SizeResourceRecPtr = [*c]SizeResourceRec;
pub const SizeResourceRecHandle = [*c]SizeResourceRecPtr;
pub const kProcessDictionaryIncludeAllInformationMask: c_int = -1;
const enum_unnamed_1598 = c_int;
pub const kQuitBeforeNormalTimeMask: c_int = 1;
pub const kQuitAtNormalTimeMask: c_int = 2;
pub const kQuitBeforeFBAsQuitMask: c_int = 4;
pub const kQuitBeforeShellQuitsMask: c_int = 8;
pub const kQuitBeforeTerminatorAppQuitsMask: c_int = 16;
pub const kQuitNeverMask: c_int = 32;
pub const kQuitOptionsMask: c_int = 127;
pub const kQuitNotQuitDuringInstallMask: c_int = 256;
pub const kQuitNotQuitDuringLogoutMask: c_int = 512;
const enum_unnamed_1599 = c_uint;
pub extern fn LaunchApplication(LaunchParams: LaunchPBPtr) OSErr;
pub extern fn GetCurrentProcess(PSN: [*c]ProcessSerialNumber) OSErr;
pub extern fn GetFrontProcess(PSN: [*c]ProcessSerialNumber) OSErr;
pub extern fn GetNextProcess(PSN: [*c]ProcessSerialNumber) OSErr;
pub extern fn GetProcessInformation(PSN: [*c]const ProcessSerialNumber, info: [*c]ProcessInfoRec) OSErr;
pub extern fn ProcessInformationCopyDictionary(PSN: [*c]const ProcessSerialNumber, infoToReturn: UInt32) CFDictionaryRef;
pub extern fn SetFrontProcess(PSN: [*c]const ProcessSerialNumber) OSErr;
pub const kSetFrontProcessFrontWindowOnly: c_int = 1;
pub const kSetFrontProcessCausedByUser: c_int = 2;
const enum_unnamed_1600 = c_uint;
pub extern fn SetFrontProcessWithOptions(inProcess: [*c]const ProcessSerialNumber, inOptions: OptionBits) OSStatus;
pub extern fn WakeUpProcess(PSN: [*c]const ProcessSerialNumber) OSErr;
pub extern fn SameProcess(PSN1: [*c]const ProcessSerialNumber, PSN2: [*c]const ProcessSerialNumber, result: [*c]Boolean) OSErr;
pub extern fn ExitToShell() noreturn;
pub extern fn KillProcess(inProcess: [*c]const ProcessSerialNumber) OSErr;
pub extern fn GetProcessBundleLocation(psn: [*c]const ProcessSerialNumber, location: [*c]FSRef) OSStatus;
pub extern fn CopyProcessName(psn: [*c]const ProcessSerialNumber, name: [*c]CFStringRef) OSStatus;
pub extern fn GetProcessPID(psn: [*c]const ProcessSerialNumber, pid: [*c]pid_t) OSStatus;
pub extern fn GetProcessForPID(pid: pid_t, psn: [*c]ProcessSerialNumber) OSStatus;
pub extern fn IsProcessVisible(psn: [*c]const ProcessSerialNumber) Boolean;
pub extern fn ShowHideProcess(psn: [*c]const ProcessSerialNumber, visible: Boolean) OSErr;
pub extern fn TransformProcessType(psn: [*c]const ProcessSerialNumber, transformState: ProcessApplicationTransformState) OSStatus;
pub const initDev: c_int = 0;
pub const hitDev: c_int = 1;
pub const closeDev: c_int = 2;
pub const nulDev: c_int = 3;
pub const updateDev: c_int = 4;
pub const activDev: c_int = 5;
pub const deactivDev: c_int = 6;
pub const keyEvtDev: c_int = 7;
pub const macDev: c_int = 8;
pub const undoDev: c_int = 9;
pub const cutDev: c_int = 10;
pub const copyDev: c_int = 11;
pub const pasteDev: c_int = 12;
pub const clearDev: c_int = 13;
pub const cursorDev: c_int = 14;
const enum_unnamed_1601 = c_uint;
pub const cdevGenErr: c_int = -1;
pub const cdevMemErr: c_int = 0;
pub const cdevResErr: c_int = 1;
pub const cdevUnset: c_int = 3;
const enum_unnamed_1602 = c_int;
pub const struct_OpaquePasteboardRef = opaque {};
pub const PasteboardRef = ?*struct_OpaquePasteboardRef;
pub const PasteboardItemID = ?*anyopaque;
pub const badPasteboardSyncErr: c_int = -25130;
pub const badPasteboardIndexErr: c_int = -25131;
pub const badPasteboardItemErr: c_int = -25132;
pub const badPasteboardFlavorErr: c_int = -25133;
pub const duplicatePasteboardFlavorErr: c_int = -25134;
pub const notPasteboardOwnerErr: c_int = -25135;
pub const noPasteboardPromiseKeeperErr: c_int = -25136;
const enum_unnamed_1603 = c_int;
pub const PasteboardSyncFlags = OptionBits;
pub const kPasteboardModified: c_int = 1;
pub const kPasteboardClientIsOwner: c_int = 2;
const enum_unnamed_1604 = c_uint;
pub const PasteboardFlavorFlags = OptionBits;
pub const kPasteboardFlavorNoFlags: c_int = 0;
pub const kPasteboardFlavorSenderOnly: c_int = 1;
pub const kPasteboardFlavorSenderTranslated: c_int = 2;
pub const kPasteboardFlavorNotSaved: c_int = 4;
pub const kPasteboardFlavorRequestOnly: c_int = 8;
pub const kPasteboardFlavorSystemTranslated: c_int = 256;
pub const kPasteboardFlavorPromised: c_int = 512;
const enum_unnamed_1605 = c_uint;
pub const PasteboardStandardLocation = OSType;
pub const kPasteboardStandardLocationTrash: c_int = 1953657704;
pub const kPasteboardStandardLocationUnknown: c_int = 1970170734;
const enum_unnamed_1606 = c_uint;
pub extern fn PasteboardGetTypeID() CFTypeID;
pub extern fn PasteboardCreate(inName: CFStringRef, outPasteboard: [*c]PasteboardRef) OSStatus;
pub extern fn PasteboardSynchronize(inPasteboard: PasteboardRef) PasteboardSyncFlags;
pub extern fn PasteboardClear(inPasteboard: PasteboardRef) OSStatus;
pub extern fn PasteboardCopyName(inPasteboard: PasteboardRef, outName: [*c]CFStringRef) OSStatus;
pub extern fn PasteboardGetItemCount(inPasteboard: PasteboardRef, outItemCount: [*c]ItemCount) OSStatus;
pub extern fn PasteboardGetItemIdentifier(inPasteboard: PasteboardRef, inIndex: CFIndex, outItem: [*c]PasteboardItemID) OSStatus;
pub extern fn PasteboardCopyItemFlavors(inPasteboard: PasteboardRef, inItem: PasteboardItemID, outFlavorTypes: [*c]CFArrayRef) OSStatus;
pub extern fn PasteboardGetItemFlavorFlags(inPasteboard: PasteboardRef, inItem: PasteboardItemID, inFlavorType: CFStringRef, outFlags: [*c]PasteboardFlavorFlags) OSStatus;
pub extern fn PasteboardCopyItemFlavorData(inPasteboard: PasteboardRef, inItem: PasteboardItemID, inFlavorType: CFStringRef, outData: [*c]CFDataRef) OSStatus;
pub extern fn PasteboardPutItemFlavor(inPasteboard: PasteboardRef, inItem: PasteboardItemID, inFlavorType: CFStringRef, inData: CFDataRef, inFlags: PasteboardFlavorFlags) OSStatus;
pub extern fn PasteboardCopyPasteLocation(inPasteboard: PasteboardRef, outPasteLocation: [*c]CFURLRef) OSStatus;
pub extern fn PasteboardSetPasteLocation(inPasteboard: PasteboardRef, inPasteLocation: CFURLRef) OSStatus;
pub const PasteboardPromiseKeeperProcPtr = ?*const fn (PasteboardRef, PasteboardItemID, CFStringRef, ?*anyopaque) callconv(.C) OSStatus;
pub extern fn PasteboardSetPromiseKeeper(inPasteboard: PasteboardRef, inPromiseKeeper: PasteboardPromiseKeeperProcPtr, inContext: ?*anyopaque) OSStatus;
pub extern fn PasteboardResolvePromises(inPasteboard: PasteboardRef) OSStatus;
pub const struct_OpaqueTranslationRef = opaque {};
pub const TranslationRef = ?*struct_OpaqueTranslationRef;
pub const badTranslationRefErr: c_int = -3031;
const enum_unnamed_1607 = c_int;
pub const TranslationFlags = OptionBits;
pub const kTranslationDataTranslation: c_int = 1;
pub const kTranslationFileTranslation: c_int = 2;
const enum_unnamed_1608 = c_uint;
pub extern fn TranslationGetTypeID() CFTypeID;
pub extern fn TranslationCreate(inSourceType: CFStringRef, inDestinationType: CFStringRef, inTranslationFlags: TranslationFlags, outTranslation: [*c]TranslationRef) OSStatus;
pub extern fn TranslationCreateWithSourceArray(inSourceTypes: CFArrayRef, inTranslationFlags: TranslationFlags, outDestinationTypes: [*c]CFArrayRef, outTranslations: [*c]CFDictionaryRef) OSStatus;
pub extern fn TranslationPerformForData(inTranslation: TranslationRef, inSourceData: CFDataRef, outDestinationData: [*c]CFDataRef) OSStatus;
pub extern fn TranslationPerformForFile(inTranslation: TranslationRef, inSourceFile: [*c]const FSRef, inDestinationDirectory: [*c]const FSRef, inDestinationName: CFStringRef, outTranslatedFile: [*c]FSRef) OSStatus;
pub extern fn TranslationPerformForURL(inTranslation: TranslationRef, inSourceURL: CFURLRef, inDestinationURL: CFURLRef, outTranslatedURL: [*c]CFURLRef) OSStatus;
pub extern fn TranslationCopySourceType(inTranslation: TranslationRef, outSourceType: [*c]CFStringRef) OSStatus;
pub extern fn TranslationCopyDestinationType(inTranslation: TranslationRef, outDestinationType: [*c]CFStringRef) OSStatus;
pub extern fn TranslationGetTranslationFlags(inTranslation: TranslationRef, outTranslationFlags: [*c]TranslationFlags) OSStatus;
pub const AXError = SInt32;
pub const kAXErrorSuccess: c_int = 0;
pub const kAXErrorFailure: c_int = -25200;
pub const kAXErrorIllegalArgument: c_int = -25201;
pub const kAXErrorInvalidUIElement: c_int = -25202;
pub const kAXErrorInvalidUIElementObserver: c_int = -25203;
pub const kAXErrorCannotComplete: c_int = -25204;
pub const kAXErrorAttributeUnsupported: c_int = -25205;
pub const kAXErrorActionUnsupported: c_int = -25206;
pub const kAXErrorNotificationUnsupported: c_int = -25207;
pub const kAXErrorNotImplemented: c_int = -25208;
pub const kAXErrorNotificationAlreadyRegistered: c_int = -25209;
pub const kAXErrorNotificationNotRegistered: c_int = -25210;
pub const kAXErrorAPIDisabled: c_int = -25211;
pub const kAXErrorNoValue: c_int = -25212;
pub const kAXErrorParameterizedAttributeUnsupported: c_int = -25213;
pub const kAXErrorNotEnoughPrecision: c_int = -25214;
const enum_unnamed_1609 = c_int;
pub const AXMenuItemModifiers = UInt32;
pub const kAXMenuItemModifierNone: c_int = 0;
pub const kAXMenuItemModifierShift: c_int = 1;
pub const kAXMenuItemModifierOption: c_int = 2;
pub const kAXMenuItemModifierControl: c_int = 4;
pub const kAXMenuItemModifierNoCommand: c_int = 8;
const enum_unnamed_1610 = c_uint;
pub const AXPriority = CFIndex;
pub const kAXPriorityLow: c_int = 10;
pub const kAXPriorityMedium: c_int = 50;
pub const kAXPriorityHigh: c_int = 90;
const enum_unnamed_1611 = c_uint;
pub extern fn AXAPIEnabled() Boolean;
pub extern fn AXIsProcessTrustedWithOptions(options: CFDictionaryRef) Boolean;
pub extern var kAXTrustedCheckOptionPrompt: CFStringRef;
pub extern fn AXIsProcessTrusted() Boolean;
pub extern fn AXMakeProcessTrusted(executablePath: CFStringRef) AXError;
pub const struct___AXUIElement = opaque {};
pub const AXUIElementRef = ?*const struct___AXUIElement;
pub const AXCopyMultipleAttributeOptions = UInt32;
pub const kAXCopyMultipleAttributeOptionStopOnError: c_int = 1;
const enum_unnamed_1612 = c_uint;
pub extern fn AXUIElementGetTypeID() CFTypeID;
pub extern fn AXUIElementCopyAttributeNames(element: AXUIElementRef, names: [*c]CFArrayRef) AXError;
pub extern fn AXUIElementCopyAttributeValue(element: AXUIElementRef, attribute: CFStringRef, value: [*c]CFTypeRef) AXError;
pub extern fn AXUIElementGetAttributeValueCount(element: AXUIElementRef, attribute: CFStringRef, count: [*c]CFIndex) AXError;
pub extern fn AXUIElementCopyAttributeValues(element: AXUIElementRef, attribute: CFStringRef, index: CFIndex, maxValues: CFIndex, values: [*c]CFArrayRef) AXError;
pub extern fn AXUIElementIsAttributeSettable(element: AXUIElementRef, attribute: CFStringRef, settable: [*c]Boolean) AXError;
pub extern fn AXUIElementSetAttributeValue(element: AXUIElementRef, attribute: CFStringRef, value: CFTypeRef) AXError;
pub extern fn AXUIElementCopyMultipleAttributeValues(element: AXUIElementRef, attributes: CFArrayRef, options: AXCopyMultipleAttributeOptions, values: [*c]CFArrayRef) AXError;
pub extern fn AXUIElementCopyParameterizedAttributeNames(element: AXUIElementRef, names: [*c]CFArrayRef) AXError;
pub extern fn AXUIElementCopyParameterizedAttributeValue(element: AXUIElementRef, parameterizedAttribute: CFStringRef, parameter: CFTypeRef, result: [*c]CFTypeRef) AXError;
pub extern fn AXUIElementCopyActionNames(element: AXUIElementRef, names: [*c]CFArrayRef) AXError;
pub extern fn AXUIElementCopyActionDescription(element: AXUIElementRef, action: CFStringRef, description: [*c]CFStringRef) AXError;
pub extern fn AXUIElementPerformAction(element: AXUIElementRef, action: CFStringRef) AXError;
pub extern fn AXUIElementCopyElementAtPosition(application: AXUIElementRef, x: f32, y: f32, element: [*c]AXUIElementRef) AXError;
pub extern fn AXUIElementCreateApplication(pid: pid_t) AXUIElementRef;
pub extern fn AXUIElementCreateSystemWide() AXUIElementRef;
pub extern fn AXUIElementGetPid(element: AXUIElementRef, pid: [*c]pid_t) AXError;
pub extern fn AXUIElementSetMessagingTimeout(element: AXUIElementRef, timeoutInSeconds: f32) AXError;
pub extern fn AXUIElementPostKeyboardEvent(application: AXUIElementRef, keyChar: CGCharCode, virtualKey: CGKeyCode, keyDown: Boolean) AXError;
pub const struct___AXTextMarker = opaque {};
pub const AXTextMarkerRef = ?*const struct___AXTextMarker;
pub extern fn AXTextMarkerGetTypeID() CFTypeID;
pub extern fn AXTextMarkerCreate(allocator: CFAllocatorRef, bytes: [*c]const UInt8, length: CFIndex) AXTextMarkerRef;
pub extern fn AXTextMarkerGetLength(marker: AXTextMarkerRef) CFIndex;
pub extern fn AXTextMarkerGetBytePtr(theTextMarker: AXTextMarkerRef) [*c]const UInt8;
pub const struct___AXTextMarkerRange = opaque {};
pub const AXTextMarkerRangeRef = ?*const struct___AXTextMarkerRange;
pub extern fn AXTextMarkerRangeGetTypeID() CFTypeID;
pub extern fn AXTextMarkerRangeCreate(allocator: CFAllocatorRef, startMarker: AXTextMarkerRef, endMarker: AXTextMarkerRef) AXTextMarkerRangeRef;
pub extern fn AXTextMarkerRangeCreateWithBytes(allocator: CFAllocatorRef, startMarkerBytes: [*c]const UInt8, startMarkerLength: CFIndex, endMarkerBytes: [*c]const UInt8, endMarkerLength: CFIndex) AXTextMarkerRangeRef;
pub extern fn AXTextMarkerRangeCopyStartMarker(textMarkerRange: AXTextMarkerRangeRef) AXTextMarkerRef;
pub extern fn AXTextMarkerRangeCopyEndMarker(textMarkerRange: AXTextMarkerRangeRef) AXTextMarkerRef;
pub const struct___AXObserver = opaque {};
pub const AXObserverRef = ?*struct___AXObserver;
pub const AXObserverCallback = ?*const fn (AXObserverRef, AXUIElementRef, CFStringRef, ?*anyopaque) callconv(.C) void;
pub const AXObserverCallbackWithInfo = ?*const fn (AXObserverRef, AXUIElementRef, CFStringRef, CFDictionaryRef, ?*anyopaque) callconv(.C) void;
pub extern fn AXObserverGetTypeID() CFTypeID;
pub extern fn AXObserverCreate(application: pid_t, callback: AXObserverCallback, outObserver: [*c]AXObserverRef) AXError;
pub extern fn AXObserverCreateWithInfoCallback(application: pid_t, callback: AXObserverCallbackWithInfo, outObserver: [*c]AXObserverRef) AXError;
pub extern fn AXObserverAddNotification(observer: AXObserverRef, element: AXUIElementRef, notification: CFStringRef, refcon: ?*anyopaque) AXError;
pub extern fn AXObserverRemoveNotification(observer: AXObserverRef, element: AXUIElementRef, notification: CFStringRef) AXError;
pub extern fn AXObserverGetRunLoopSource(observer: AXObserverRef) CFRunLoopSourceRef;
pub const AXValueType = UInt32;
pub const kAXValueTypeCGPoint: c_int = 1;
pub const kAXValueTypeCGSize: c_int = 2;
pub const kAXValueTypeCGRect: c_int = 3;
pub const kAXValueTypeCFRange: c_int = 4;
pub const kAXValueTypeAXError: c_int = 5;
pub const kAXValueTypeIllegal: c_int = 0;
const enum_unnamed_1613 = c_uint;
pub const kAXValueCGPointType: UInt32 = @bitCast(UInt32, kAXValueTypeCGPoint);
pub const kAXValueCGSizeType: UInt32 = @bitCast(UInt32, kAXValueTypeCGSize);
pub const kAXValueCGRectType: UInt32 = @bitCast(UInt32, kAXValueTypeCGRect);
pub const kAXValueCFRangeType: UInt32 = @bitCast(UInt32, kAXValueTypeCFRange);
pub const kAXValueAXErrorType: UInt32 = @bitCast(UInt32, kAXValueTypeAXError);
pub const kAXValueIllegalType: UInt32 = @bitCast(UInt32, kAXValueTypeIllegal);
pub const struct___AXValue = opaque {};
pub const AXValueRef = ?*const struct___AXValue;
pub extern fn AXValueGetTypeID(...) CFTypeID;
pub extern fn AXValueCreate(theType: AXValueType, valuePtr: ?*const anyopaque) AXValueRef;
pub extern fn AXValueGetType(value: AXValueRef) AXValueType;
pub extern fn AXValueGetValue(value: AXValueRef, theType: AXValueType, valuePtr: ?*anyopaque) Boolean;
pub extern var kAXFontTextAttribute: CFStringRef;
pub extern var kAXForegroundColorTextAttribute: CFStringRef;
pub extern var kAXBackgroundColorTextAttribute: CFStringRef;
pub extern var kAXUnderlineColorTextAttribute: CFStringRef;
pub extern var kAXStrikethroughColorTextAttribute: CFStringRef;
pub extern var kAXUnderlineTextAttribute: CFStringRef;
pub extern var kAXSuperscriptTextAttribute: CFStringRef;
pub extern var kAXStrikethroughTextAttribute: CFStringRef;
pub extern var kAXShadowTextAttribute: CFStringRef;
pub extern var kAXAttachmentTextAttribute: CFStringRef;
pub extern var kAXLinkTextAttribute: CFStringRef;
pub extern var kAXNaturalLanguageTextAttribute: CFStringRef;
pub extern var kAXReplacementStringTextAttribute: CFStringRef;
pub extern var kAXMisspelledTextAttribute: CFStringRef;
pub extern var kAXMarkedMisspelledTextAttribute: CFStringRef;
pub extern var kAXAutocorrectedTextAttribute: CFStringRef;
pub extern var kAXListItemPrefixTextAttribute: CFStringRef;
pub extern var kAXListItemIndexTextAttribute: CFStringRef;
pub extern var kAXListItemLevelTextAttribute: CFStringRef;
pub extern var kAXFontNameKey: CFStringRef;
pub extern var kAXFontFamilyKey: CFStringRef;
pub extern var kAXVisibleNameKey: CFStringRef;
pub extern var kAXFontSizeKey: CFStringRef;
pub const AXUnderlineStyle = UInt32;
pub const kAXUnderlineStyleNone: c_int = 0;
pub const kAXUnderlineStyleSingle: c_int = 1;
pub const kAXUnderlineStyleThick: c_int = 2;
pub const kAXUnderlineStyleDouble: c_int = 9;
const enum_unnamed_1614 = c_uint;
pub extern var kAXForegoundColorTextAttribute: CFStringRef;
pub const UAZoomChangeFocusType = UInt32;
pub const kUAZoomFocusTypeOther: c_int = 0;
pub const kUAZoomFocusTypeInsertionPoint: c_int = 1;
const enum_unnamed_1615 = c_uint;
pub extern fn UAZoomEnabled() Boolean;
pub extern fn UAZoomChangeFocus(inRect: [*c]const CGRect, inHighlightRect: [*c]const CGRect, inType: UAZoomChangeFocusType) OSStatus;
pub const struct_CGImageSource = opaque {};
pub const CGImageSourceRef = ?*struct_CGImageSource;
pub const struct_CGImageMetadata = opaque {};
pub const CGImageMetadataRef = ?*const struct_CGImageMetadata;
pub extern fn CGImageMetadataGetTypeID() CFTypeID;
pub const CGMutableImageMetadataRef = ?*struct_CGImageMetadata;
pub extern fn CGImageMetadataCreateMutable() CGMutableImageMetadataRef;
pub extern fn CGImageMetadataCreateMutableCopy(metadata: CGImageMetadataRef) CGMutableImageMetadataRef;
pub const struct_CGImageMetadataTag = opaque {};
pub const CGImageMetadataTagRef = ?*struct_CGImageMetadataTag;
pub extern fn CGImageMetadataTagGetTypeID() CFTypeID;
pub extern const kCGImageMetadataNamespaceExif: CFStringRef;
pub extern const kCGImageMetadataNamespaceExifAux: CFStringRef;
pub extern const kCGImageMetadataNamespaceExifEX: CFStringRef;
pub extern const kCGImageMetadataNamespaceDublinCore: CFStringRef;
pub extern const kCGImageMetadataNamespaceIPTCCore: CFStringRef;
pub extern const kCGImageMetadataNamespaceIPTCExtension: CFStringRef;
pub extern const kCGImageMetadataNamespacePhotoshop: CFStringRef;
pub extern const kCGImageMetadataNamespaceTIFF: CFStringRef;
pub extern const kCGImageMetadataNamespaceXMPBasic: CFStringRef;
pub extern const kCGImageMetadataNamespaceXMPRights: CFStringRef;
pub extern const kCGImageMetadataPrefixExif: CFStringRef;
pub extern const kCGImageMetadataPrefixExifAux: CFStringRef;
pub extern const kCGImageMetadataPrefixExifEX: CFStringRef;
pub extern const kCGImageMetadataPrefixDublinCore: CFStringRef;
pub extern const kCGImageMetadataPrefixIPTCCore: CFStringRef;
pub extern const kCGImageMetadataPrefixIPTCExtension: CFStringRef;
pub extern const kCGImageMetadataPrefixPhotoshop: CFStringRef;
pub extern const kCGImageMetadataPrefixTIFF: CFStringRef;
pub extern const kCGImageMetadataPrefixXMPBasic: CFStringRef;
pub extern const kCGImageMetadataPrefixXMPRights: CFStringRef;
pub const CGImageMetadataType = i32;
pub const kCGImageMetadataTypeInvalid: c_int = -1;
pub const kCGImageMetadataTypeDefault: c_int = 0;
pub const kCGImageMetadataTypeString: c_int = 1;
pub const kCGImageMetadataTypeArrayUnordered: c_int = 2;
pub const kCGImageMetadataTypeArrayOrdered: c_int = 3;
pub const kCGImageMetadataTypeAlternateArray: c_int = 4;
pub const kCGImageMetadataTypeAlternateText: c_int = 5;
pub const kCGImageMetadataTypeStructure: c_int = 6;
const enum_unnamed_1616 = c_int;
pub extern fn CGImageMetadataTagCreate(xmlns: CFStringRef, prefix: CFStringRef, name: CFStringRef, @"type": CGImageMetadataType, value: CFTypeRef) CGImageMetadataTagRef;
pub extern fn CGImageMetadataTagCopyNamespace(tag: CGImageMetadataTagRef) CFStringRef;
pub extern fn CGImageMetadataTagCopyPrefix(tag: CGImageMetadataTagRef) CFStringRef;
pub extern fn CGImageMetadataTagCopyName(tag: CGImageMetadataTagRef) CFStringRef;
pub extern fn CGImageMetadataTagCopyValue(tag: CGImageMetadataTagRef) CFTypeRef;
pub extern fn CGImageMetadataTagGetType(tag: CGImageMetadataTagRef) CGImageMetadataType;
pub extern fn CGImageMetadataTagCopyQualifiers(tag: CGImageMetadataTagRef) CFArrayRef;
pub extern fn CGImageMetadataCopyTags(metadata: CGImageMetadataRef) CFArrayRef;
pub extern fn CGImageMetadataCopyTagWithPath(metadata: CGImageMetadataRef, parent: CGImageMetadataTagRef, path: CFStringRef) CGImageMetadataTagRef;
pub extern fn CGImageMetadataCopyStringValueWithPath(metadata: CGImageMetadataRef, parent: CGImageMetadataTagRef, path: CFStringRef) CFStringRef;
pub extern fn CGImageMetadataRegisterNamespaceForPrefix(metadata: CGMutableImageMetadataRef, xmlns: CFStringRef, prefix: CFStringRef, err: [*c]CFErrorRef) bool;
pub extern fn CGImageMetadataSetTagWithPath(metadata: CGMutableImageMetadataRef, parent: CGImageMetadataTagRef, path: CFStringRef, tag: CGImageMetadataTagRef) bool;
pub extern fn CGImageMetadataSetValueWithPath(metadata: CGMutableImageMetadataRef, parent: CGImageMetadataTagRef, path: CFStringRef, value: CFTypeRef) bool;
pub extern fn CGImageMetadataRemoveTagWithPath(metadata: CGMutableImageMetadataRef, parent: CGImageMetadataTagRef, path: CFStringRef) bool; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/CGImageMetadata.h:480:15: warning: unsupported type: 'BlockPointer'
pub const CGImageMetadataTagBlock = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/CGImageMetadata.h:480:15
pub extern fn CGImageMetadataEnumerateTagsUsingBlock(metadata: CGImageMetadataRef, rootPath: CFStringRef, options: CFDictionaryRef, block: CGImageMetadataTagBlock) void;
pub extern const kCGImageMetadataEnumerateRecursively: CFStringRef;
pub extern fn CGImageMetadataCopyTagMatchingImageProperty(metadata: CGImageMetadataRef, dictionaryName: CFStringRef, propertyName: CFStringRef) CGImageMetadataTagRef;
pub extern fn CGImageMetadataSetValueMatchingImageProperty(metadata: CGMutableImageMetadataRef, dictionaryName: CFStringRef, propertyName: CFStringRef, value: CFTypeRef) bool;
pub extern fn CGImageMetadataCreateXMPData(metadata: CGImageMetadataRef, options: CFDictionaryRef) CFDataRef;
pub extern fn CGImageMetadataCreateFromXMPData(data: CFDataRef) CGImageMetadataRef;
pub extern const kCFErrorDomainCGImageMetadata: CFStringRef;
pub const CGImageMetadataErrors = i32;
pub const kCGImageMetadataErrorUnknown: c_int = 0;
pub const kCGImageMetadataErrorUnsupportedFormat: c_int = 1;
pub const kCGImageMetadataErrorBadArgument: c_int = 2;
pub const kCGImageMetadataErrorConflictingArguments: c_int = 3;
pub const kCGImageMetadataErrorPrefixConflict: c_int = 4;
const enum_unnamed_1617 = c_uint;
pub const CGImageSourceStatus = i32;
pub const kCGImageStatusUnexpectedEOF: c_int = -5;
pub const kCGImageStatusInvalidData: c_int = -4;
pub const kCGImageStatusUnknownType: c_int = -3;
pub const kCGImageStatusReadingHeader: c_int = -2;
pub const kCGImageStatusIncomplete: c_int = -1;
pub const kCGImageStatusComplete: c_int = 0;
const enum_unnamed_1618 = c_int;
pub extern const kCGImageSourceTypeIdentifierHint: CFStringRef;
pub extern const kCGImageSourceShouldCache: CFStringRef;
pub extern const kCGImageSourceShouldCacheImmediately: CFStringRef;
pub extern const kCGImageSourceShouldAllowFloat: CFStringRef;
pub extern const kCGImageSourceCreateThumbnailFromImageIfAbsent: CFStringRef;
pub extern const kCGImageSourceCreateThumbnailFromImageAlways: CFStringRef;
pub extern const kCGImageSourceThumbnailMaxPixelSize: CFStringRef;
pub extern const kCGImageSourceCreateThumbnailWithTransform: CFStringRef;
pub extern const kCGImageSourceSubsampleFactor: CFStringRef;
pub extern fn CGImageSourceGetTypeID() CFTypeID;
pub extern fn CGImageSourceCopyTypeIdentifiers() CFArrayRef;
pub extern fn CGImageSourceCreateWithDataProvider(provider: CGDataProviderRef, options: CFDictionaryRef) CGImageSourceRef;
pub extern fn CGImageSourceCreateWithData(data: CFDataRef, options: CFDictionaryRef) CGImageSourceRef;
pub extern fn CGImageSourceCreateWithURL(url: CFURLRef, options: CFDictionaryRef) CGImageSourceRef;
pub extern fn CGImageSourceGetType(isrc: CGImageSourceRef) CFStringRef;
pub extern fn CGImageSourceGetCount(isrc: CGImageSourceRef) usize;
pub extern fn CGImageSourceCopyProperties(isrc: CGImageSourceRef, options: CFDictionaryRef) CFDictionaryRef;
pub extern fn CGImageSourceCopyPropertiesAtIndex(isrc: CGImageSourceRef, index: usize, options: CFDictionaryRef) CFDictionaryRef;
pub extern fn CGImageSourceCopyMetadataAtIndex(isrc: CGImageSourceRef, index: usize, options: CFDictionaryRef) CGImageMetadataRef;
pub extern fn CGImageSourceCreateImageAtIndex(isrc: CGImageSourceRef, index: usize, options: CFDictionaryRef) CGImageRef;
pub extern fn CGImageSourceRemoveCacheAtIndex(isrc: CGImageSourceRef, index: usize) void;
pub extern fn CGImageSourceCreateThumbnailAtIndex(isrc: CGImageSourceRef, index: usize, options: CFDictionaryRef) CGImageRef;
pub extern fn CGImageSourceCreateIncremental(options: CFDictionaryRef) CGImageSourceRef;
pub extern fn CGImageSourceUpdateData(isrc: CGImageSourceRef, data: CFDataRef, final: bool) void;
pub extern fn CGImageSourceUpdateDataProvider(isrc: CGImageSourceRef, provider: CGDataProviderRef, final: bool) void;
pub extern fn CGImageSourceGetStatus(isrc: CGImageSourceRef) CGImageSourceStatus;
pub extern fn CGImageSourceGetStatusAtIndex(isrc: CGImageSourceRef, index: usize) CGImageSourceStatus;
pub extern fn CGImageSourceGetPrimaryImageIndex(isrc: CGImageSourceRef) usize;
pub extern fn CGImageSourceCopyAuxiliaryDataInfoAtIndex(isrc: CGImageSourceRef, index: usize, auxiliaryImageDataType: CFStringRef) CFDictionaryRef;
pub const struct_CGImageDestination = opaque {};
pub const CGImageDestinationRef = ?*struct_CGImageDestination;
pub extern const kCGImageDestinationLossyCompressionQuality: CFStringRef;
pub extern const kCGImageDestinationBackgroundColor: CFStringRef;
pub extern const kCGImageDestinationImageMaxPixelSize: CFStringRef;
pub extern const kCGImageDestinationEmbedThumbnail: CFStringRef;
pub extern const kCGImageDestinationOptimizeColorForSharing: CFStringRef;
pub extern fn CGImageDestinationGetTypeID() CFTypeID;
pub extern fn CGImageDestinationCopyTypeIdentifiers() CFArrayRef;
pub extern fn CGImageDestinationCreateWithDataConsumer(consumer: CGDataConsumerRef, @"type": CFStringRef, count: usize, options: CFDictionaryRef) CGImageDestinationRef;
pub extern fn CGImageDestinationCreateWithData(data: CFMutableDataRef, @"type": CFStringRef, count: usize, options: CFDictionaryRef) CGImageDestinationRef;
pub extern fn CGImageDestinationCreateWithURL(url: CFURLRef, @"type": CFStringRef, count: usize, options: CFDictionaryRef) CGImageDestinationRef;
pub extern fn CGImageDestinationSetProperties(idst: CGImageDestinationRef, properties: CFDictionaryRef) void;
pub extern fn CGImageDestinationAddImage(idst: CGImageDestinationRef, image: CGImageRef, properties: CFDictionaryRef) void;
pub extern fn CGImageDestinationAddImageFromSource(idst: CGImageDestinationRef, isrc: CGImageSourceRef, index: usize, properties: CFDictionaryRef) void;
pub extern fn CGImageDestinationFinalize(idst: CGImageDestinationRef) bool;
pub extern fn CGImageDestinationAddImageAndMetadata(idst: CGImageDestinationRef, image: CGImageRef, metadata: CGImageMetadataRef, options: CFDictionaryRef) void;
pub extern const kCGImageDestinationPreserveGainMap: CFStringRef;
pub extern const kCGImageDestinationMetadata: CFStringRef;
pub extern const kCGImageDestinationMergeMetadata: CFStringRef;
pub extern const kCGImageMetadataShouldExcludeXMP: CFStringRef;
pub extern const kCGImageMetadataShouldExcludeGPS: CFStringRef;
pub extern const kCGImageDestinationDateTime: CFStringRef;
pub extern const kCGImageDestinationOrientation: CFStringRef;
pub extern fn CGImageDestinationCopyImageSource(idst: CGImageDestinationRef, isrc: CGImageSourceRef, options: CFDictionaryRef, err: [*c]CFErrorRef) bool;
pub extern fn CGImageDestinationAddAuxiliaryDataInfo(idst: CGImageDestinationRef, auxiliaryImageDataType: CFStringRef, auxiliaryDataInfoDictionary: CFDictionaryRef) void;
pub extern const kCGImagePropertyTIFFDictionary: CFStringRef;
pub extern const kCGImagePropertyGIFDictionary: CFStringRef;
pub extern const kCGImagePropertyJFIFDictionary: CFStringRef;
pub extern const kCGImagePropertyHEICSDictionary: CFStringRef;
pub extern const kCGImagePropertyExifDictionary: CFStringRef;
pub extern const kCGImagePropertyPNGDictionary: CFStringRef;
pub extern const kCGImagePropertyIPTCDictionary: CFStringRef;
pub extern const kCGImagePropertyGPSDictionary: CFStringRef;
pub extern const kCGImagePropertyRawDictionary: CFStringRef;
pub extern const kCGImagePropertyCIFFDictionary: CFStringRef;
pub extern const kCGImagePropertyMakerCanonDictionary: CFStringRef;
pub extern const kCGImagePropertyMakerNikonDictionary: CFStringRef;
pub extern const kCGImagePropertyMakerMinoltaDictionary: CFStringRef;
pub extern const kCGImagePropertyMakerFujiDictionary: CFStringRef;
pub extern const kCGImagePropertyMakerOlympusDictionary: CFStringRef;
pub extern const kCGImagePropertyMakerPentaxDictionary: CFStringRef;
pub extern const kCGImageProperty8BIMDictionary: CFStringRef;
pub extern const kCGImagePropertyDNGDictionary: CFStringRef;
pub extern const kCGImagePropertyExifAuxDictionary: CFStringRef;
pub extern const kCGImagePropertyOpenEXRDictionary: CFStringRef;
pub extern const kCGImagePropertyMakerAppleDictionary: CFStringRef;
pub extern const kCGImagePropertyFileContentsDictionary: CFStringRef;
pub extern const kCGImagePropertyWebPDictionary: CFStringRef;
pub extern const kCGImagePropertyTGADictionary: CFStringRef;
pub extern const kCGImagePropertyFileSize: CFStringRef;
pub extern const kCGImagePropertyPixelHeight: CFStringRef;
pub extern const kCGImagePropertyPixelWidth: CFStringRef;
pub extern const kCGImagePropertyDPIHeight: CFStringRef;
pub extern const kCGImagePropertyDPIWidth: CFStringRef;
pub extern const kCGImagePropertyDepth: CFStringRef;
pub extern const kCGImagePropertyOrientation: CFStringRef;
pub extern const kCGImagePropertyIsFloat: CFStringRef;
pub extern const kCGImagePropertyIsIndexed: CFStringRef;
pub extern const kCGImagePropertyHasAlpha: CFStringRef;
pub extern const kCGImagePropertyColorModel: CFStringRef;
pub extern const kCGImagePropertyProfileName: CFStringRef;
pub extern const kCGImagePropertyPrimaryImage: CFStringRef;
pub extern const kCGImagePropertyColorModelRGB: CFStringRef;
pub extern const kCGImagePropertyColorModelGray: CFStringRef;
pub extern const kCGImagePropertyColorModelCMYK: CFStringRef;
pub extern const kCGImagePropertyColorModelLab: CFStringRef;
pub extern const kCGImagePropertyTIFFCompression: CFStringRef;
pub extern const kCGImagePropertyTIFFPhotometricInterpretation: CFStringRef;
pub extern const kCGImagePropertyTIFFDocumentName: CFStringRef;
pub extern const kCGImagePropertyTIFFImageDescription: CFStringRef;
pub extern const kCGImagePropertyTIFFMake: CFStringRef;
pub extern const kCGImagePropertyTIFFModel: CFStringRef;
pub extern const kCGImagePropertyTIFFOrientation: CFStringRef;
pub extern const kCGImagePropertyTIFFXResolution: CFStringRef;
pub extern const kCGImagePropertyTIFFYResolution: CFStringRef;
pub extern const kCGImagePropertyTIFFResolutionUnit: CFStringRef;
pub extern const kCGImagePropertyTIFFSoftware: CFStringRef;
pub extern const kCGImagePropertyTIFFTransferFunction: CFStringRef;
pub extern const kCGImagePropertyTIFFDateTime: CFStringRef;
pub extern const kCGImagePropertyTIFFArtist: CFStringRef;
pub extern const kCGImagePropertyTIFFHostComputer: CFStringRef;
pub extern const kCGImagePropertyTIFFCopyright: CFStringRef;
pub extern const kCGImagePropertyTIFFWhitePoint: CFStringRef;
pub extern const kCGImagePropertyTIFFPrimaryChromaticities: CFStringRef;
pub extern const kCGImagePropertyTIFFTileWidth: CFStringRef;
pub extern const kCGImagePropertyTIFFTileLength: CFStringRef;
pub extern const kCGImagePropertyJFIFVersion: CFStringRef;
pub extern const kCGImagePropertyJFIFXDensity: CFStringRef;
pub extern const kCGImagePropertyJFIFYDensity: CFStringRef;
pub extern const kCGImagePropertyJFIFDensityUnit: CFStringRef;
pub extern const kCGImagePropertyJFIFIsProgressive: CFStringRef;
pub extern const kCGImagePropertyHEICSLoopCount: CFStringRef;
pub extern const kCGImagePropertyHEICSDelayTime: CFStringRef;
pub extern const kCGImagePropertyHEICSUnclampedDelayTime: CFStringRef;
pub extern const kCGImagePropertyHEICSCanvasPixelWidth: CFStringRef;
pub extern const kCGImagePropertyHEICSCanvasPixelHeight: CFStringRef;
pub extern const kCGImagePropertyHEICSFrameInfoArray: CFStringRef;
pub extern const kCGImagePropertyExifExposureTime: CFStringRef;
pub extern const kCGImagePropertyExifFNumber: CFStringRef;
pub extern const kCGImagePropertyExifExposureProgram: CFStringRef;
pub extern const kCGImagePropertyExifSpectralSensitivity: CFStringRef;
pub extern const kCGImagePropertyExifISOSpeedRatings: CFStringRef;
pub extern const kCGImagePropertyExifOECF: CFStringRef;
pub extern const kCGImagePropertyExifSensitivityType: CFStringRef;
pub extern const kCGImagePropertyExifStandardOutputSensitivity: CFStringRef;
pub extern const kCGImagePropertyExifRecommendedExposureIndex: CFStringRef;
pub extern const kCGImagePropertyExifISOSpeed: CFStringRef;
pub extern const kCGImagePropertyExifISOSpeedLatitudeyyy: CFStringRef;
pub extern const kCGImagePropertyExifISOSpeedLatitudezzz: CFStringRef;
pub extern const kCGImagePropertyExifVersion: CFStringRef;
pub extern const kCGImagePropertyExifDateTimeOriginal: CFStringRef;
pub extern const kCGImagePropertyExifDateTimeDigitized: CFStringRef;
pub extern const kCGImagePropertyExifOffsetTime: CFStringRef;
pub extern const kCGImagePropertyExifOffsetTimeOriginal: CFStringRef;
pub extern const kCGImagePropertyExifOffsetTimeDigitized: CFStringRef;
pub extern const kCGImagePropertyExifComponentsConfiguration: CFStringRef;
pub extern const kCGImagePropertyExifCompressedBitsPerPixel: CFStringRef;
pub extern const kCGImagePropertyExifShutterSpeedValue: CFStringRef;
pub extern const kCGImagePropertyExifApertureValue: CFStringRef;
pub extern const kCGImagePropertyExifBrightnessValue: CFStringRef;
pub extern const kCGImagePropertyExifExposureBiasValue: CFStringRef;
pub extern const kCGImagePropertyExifMaxApertureValue: CFStringRef;
pub extern const kCGImagePropertyExifSubjectDistance: CFStringRef;
pub extern const kCGImagePropertyExifMeteringMode: CFStringRef;
pub extern const kCGImagePropertyExifLightSource: CFStringRef;
pub extern const kCGImagePropertyExifFlash: CFStringRef;
pub extern const kCGImagePropertyExifFocalLength: CFStringRef;
pub extern const kCGImagePropertyExifSubjectArea: CFStringRef;
pub extern const kCGImagePropertyExifMakerNote: CFStringRef;
pub extern const kCGImagePropertyExifUserComment: CFStringRef;
pub extern const kCGImagePropertyExifSubsecTime: CFStringRef;
pub extern const kCGImagePropertyExifSubsecTimeOriginal: CFStringRef;
pub extern const kCGImagePropertyExifSubsecTimeDigitized: CFStringRef;
pub extern const kCGImagePropertyExifFlashPixVersion: CFStringRef;
pub extern const kCGImagePropertyExifColorSpace: CFStringRef;
pub extern const kCGImagePropertyExifPixelXDimension: CFStringRef;
pub extern const kCGImagePropertyExifPixelYDimension: CFStringRef;
pub extern const kCGImagePropertyExifRelatedSoundFile: CFStringRef;
pub extern const kCGImagePropertyExifFlashEnergy: CFStringRef;
pub extern const kCGImagePropertyExifSpatialFrequencyResponse: CFStringRef;
pub extern const kCGImagePropertyExifFocalPlaneXResolution: CFStringRef;
pub extern const kCGImagePropertyExifFocalPlaneYResolution: CFStringRef;
pub extern const kCGImagePropertyExifFocalPlaneResolutionUnit: CFStringRef;
pub extern const kCGImagePropertyExifSubjectLocation: CFStringRef;
pub extern const kCGImagePropertyExifExposureIndex: CFStringRef;
pub extern const kCGImagePropertyExifSensingMethod: CFStringRef;
pub extern const kCGImagePropertyExifFileSource: CFStringRef;
pub extern const kCGImagePropertyExifSceneType: CFStringRef;
pub extern const kCGImagePropertyExifCFAPattern: CFStringRef;
pub extern const kCGImagePropertyExifCustomRendered: CFStringRef;
pub extern const kCGImagePropertyExifExposureMode: CFStringRef;
pub extern const kCGImagePropertyExifWhiteBalance: CFStringRef;
pub extern const kCGImagePropertyExifDigitalZoomRatio: CFStringRef;
pub extern const kCGImagePropertyExifFocalLenIn35mmFilm: CFStringRef;
pub extern const kCGImagePropertyExifSceneCaptureType: CFStringRef;
pub extern const kCGImagePropertyExifGainControl: CFStringRef;
pub extern const kCGImagePropertyExifContrast: CFStringRef;
pub extern const kCGImagePropertyExifSaturation: CFStringRef;
pub extern const kCGImagePropertyExifSharpness: CFStringRef;
pub extern const kCGImagePropertyExifDeviceSettingDescription: CFStringRef;
pub extern const kCGImagePropertyExifSubjectDistRange: CFStringRef;
pub extern const kCGImagePropertyExifImageUniqueID: CFStringRef;
pub extern const kCGImagePropertyExifCameraOwnerName: CFStringRef;
pub extern const kCGImagePropertyExifBodySerialNumber: CFStringRef;
pub extern const kCGImagePropertyExifLensSpecification: CFStringRef;
pub extern const kCGImagePropertyExifLensMake: CFStringRef;
pub extern const kCGImagePropertyExifLensModel: CFStringRef;
pub extern const kCGImagePropertyExifLensSerialNumber: CFStringRef;
pub extern const kCGImagePropertyExifGamma: CFStringRef;
pub extern const kCGImagePropertyExifCompositeImage: CFStringRef;
pub extern const kCGImagePropertyExifSourceImageNumberOfCompositeImage: CFStringRef;
pub extern const kCGImagePropertyExifSourceExposureTimesOfCompositeImage: CFStringRef;
pub extern const kCGImagePropertyExifSubsecTimeOrginal: CFStringRef;
pub extern const kCGImagePropertyExifAuxLensInfo: CFStringRef;
pub extern const kCGImagePropertyExifAuxLensModel: CFStringRef;
pub extern const kCGImagePropertyExifAuxSerialNumber: CFStringRef;
pub extern const kCGImagePropertyExifAuxLensID: CFStringRef;
pub extern const kCGImagePropertyExifAuxLensSerialNumber: CFStringRef;
pub extern const kCGImagePropertyExifAuxImageNumber: CFStringRef;
pub extern const kCGImagePropertyExifAuxFlashCompensation: CFStringRef;
pub extern const kCGImagePropertyExifAuxOwnerName: CFStringRef;
pub extern const kCGImagePropertyExifAuxFirmware: CFStringRef;
pub extern const kCGImagePropertyGIFLoopCount: CFStringRef;
pub extern const kCGImagePropertyGIFDelayTime: CFStringRef;
pub extern const kCGImagePropertyGIFImageColorMap: CFStringRef;
pub extern const kCGImagePropertyGIFHasGlobalColorMap: CFStringRef;
pub extern const kCGImagePropertyGIFUnclampedDelayTime: CFStringRef;
pub extern const kCGImagePropertyGIFCanvasPixelWidth: CFStringRef;
pub extern const kCGImagePropertyGIFCanvasPixelHeight: CFStringRef;
pub extern const kCGImagePropertyGIFFrameInfoArray: CFStringRef;
pub extern const kCGImagePropertyPNGAuthor: CFStringRef;
pub extern const kCGImagePropertyPNGChromaticities: CFStringRef;
pub extern const kCGImagePropertyPNGComment: CFStringRef;
pub extern const kCGImagePropertyPNGCopyright: CFStringRef;
pub extern const kCGImagePropertyPNGCreationTime: CFStringRef;
pub extern const kCGImagePropertyPNGDescription: CFStringRef;
pub extern const kCGImagePropertyPNGDisclaimer: CFStringRef;
pub extern const kCGImagePropertyPNGGamma: CFStringRef;
pub extern const kCGImagePropertyPNGInterlaceType: CFStringRef;
pub extern const kCGImagePropertyPNGModificationTime: CFStringRef;
pub extern const kCGImagePropertyPNGSoftware: CFStringRef;
pub extern const kCGImagePropertyPNGSource: CFStringRef;
pub extern const kCGImagePropertyPNGsRGBIntent: CFStringRef;
pub extern const kCGImagePropertyPNGTitle: CFStringRef;
pub extern const kCGImagePropertyPNGWarning: CFStringRef;
pub extern const kCGImagePropertyPNGXPixelsPerMeter: CFStringRef;
pub extern const kCGImagePropertyPNGYPixelsPerMeter: CFStringRef;
pub extern const kCGImagePropertyPNGPixelsAspectRatio: CFStringRef;
pub extern const kCGImagePropertyAPNGLoopCount: CFStringRef;
pub extern const kCGImagePropertyAPNGDelayTime: CFStringRef;
pub extern const kCGImagePropertyAPNGUnclampedDelayTime: CFStringRef;
pub extern const kCGImagePropertyAPNGFrameInfoArray: CFStringRef;
pub extern const kCGImagePropertyAPNGCanvasPixelWidth: CFStringRef;
pub extern const kCGImagePropertyAPNGCanvasPixelHeight: CFStringRef;
pub extern const kCGImagePropertyWebPLoopCount: CFStringRef;
pub extern const kCGImagePropertyWebPDelayTime: CFStringRef;
pub extern const kCGImagePropertyWebPUnclampedDelayTime: CFStringRef;
pub extern const kCGImagePropertyWebPFrameInfoArray: CFStringRef;
pub extern const kCGImagePropertyWebPCanvasPixelWidth: CFStringRef;
pub extern const kCGImagePropertyWebPCanvasPixelHeight: CFStringRef;
pub extern const kCGImagePropertyGPSVersion: CFStringRef;
pub extern const kCGImagePropertyGPSLatitudeRef: CFStringRef;
pub extern const kCGImagePropertyGPSLatitude: CFStringRef;
pub extern const kCGImagePropertyGPSLongitudeRef: CFStringRef;
pub extern const kCGImagePropertyGPSLongitude: CFStringRef;
pub extern const kCGImagePropertyGPSAltitudeRef: CFStringRef;
pub extern const kCGImagePropertyGPSAltitude: CFStringRef;
pub extern const kCGImagePropertyGPSTimeStamp: CFStringRef;
pub extern const kCGImagePropertyGPSSatellites: CFStringRef;
pub extern const kCGImagePropertyGPSStatus: CFStringRef;
pub extern const kCGImagePropertyGPSMeasureMode: CFStringRef;
pub extern const kCGImagePropertyGPSDOP: CFStringRef;
pub extern const kCGImagePropertyGPSSpeedRef: CFStringRef;
pub extern const kCGImagePropertyGPSSpeed: CFStringRef;
pub extern const kCGImagePropertyGPSTrackRef: CFStringRef;
pub extern const kCGImagePropertyGPSTrack: CFStringRef;
pub extern const kCGImagePropertyGPSImgDirectionRef: CFStringRef;
pub extern const kCGImagePropertyGPSImgDirection: CFStringRef;
pub extern const kCGImagePropertyGPSMapDatum: CFStringRef;
pub extern const kCGImagePropertyGPSDestLatitudeRef: CFStringRef;
pub extern const kCGImagePropertyGPSDestLatitude: CFStringRef;
pub extern const kCGImagePropertyGPSDestLongitudeRef: CFStringRef;
pub extern const kCGImagePropertyGPSDestLongitude: CFStringRef;
pub extern const kCGImagePropertyGPSDestBearingRef: CFStringRef;
pub extern const kCGImagePropertyGPSDestBearing: CFStringRef;
pub extern const kCGImagePropertyGPSDestDistanceRef: CFStringRef;
pub extern const kCGImagePropertyGPSDestDistance: CFStringRef;
pub extern const kCGImagePropertyGPSProcessingMethod: CFStringRef;
pub extern const kCGImagePropertyGPSAreaInformation: CFStringRef;
pub extern const kCGImagePropertyGPSDateStamp: CFStringRef;
pub extern const kCGImagePropertyGPSDifferental: CFStringRef;
pub extern const kCGImagePropertyGPSHPositioningError: CFStringRef;
pub extern const kCGImagePropertyIPTCObjectTypeReference: CFStringRef;
pub extern const kCGImagePropertyIPTCObjectAttributeReference: CFStringRef;
pub extern const kCGImagePropertyIPTCObjectName: CFStringRef;
pub extern const kCGImagePropertyIPTCEditStatus: CFStringRef;
pub extern const kCGImagePropertyIPTCEditorialUpdate: CFStringRef;
pub extern const kCGImagePropertyIPTCUrgency: CFStringRef;
pub extern const kCGImagePropertyIPTCSubjectReference: CFStringRef;
pub extern const kCGImagePropertyIPTCCategory: CFStringRef;
pub extern const kCGImagePropertyIPTCSupplementalCategory: CFStringRef;
pub extern const kCGImagePropertyIPTCFixtureIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCKeywords: CFStringRef;
pub extern const kCGImagePropertyIPTCContentLocationCode: CFStringRef;
pub extern const kCGImagePropertyIPTCContentLocationName: CFStringRef;
pub extern const kCGImagePropertyIPTCReleaseDate: CFStringRef;
pub extern const kCGImagePropertyIPTCReleaseTime: CFStringRef;
pub extern const kCGImagePropertyIPTCExpirationDate: CFStringRef;
pub extern const kCGImagePropertyIPTCExpirationTime: CFStringRef;
pub extern const kCGImagePropertyIPTCSpecialInstructions: CFStringRef;
pub extern const kCGImagePropertyIPTCActionAdvised: CFStringRef;
pub extern const kCGImagePropertyIPTCReferenceService: CFStringRef;
pub extern const kCGImagePropertyIPTCReferenceDate: CFStringRef;
pub extern const kCGImagePropertyIPTCReferenceNumber: CFStringRef;
pub extern const kCGImagePropertyIPTCDateCreated: CFStringRef;
pub extern const kCGImagePropertyIPTCTimeCreated: CFStringRef;
pub extern const kCGImagePropertyIPTCDigitalCreationDate: CFStringRef;
pub extern const kCGImagePropertyIPTCDigitalCreationTime: CFStringRef;
pub extern const kCGImagePropertyIPTCOriginatingProgram: CFStringRef;
pub extern const kCGImagePropertyIPTCProgramVersion: CFStringRef;
pub extern const kCGImagePropertyIPTCObjectCycle: CFStringRef;
pub extern const kCGImagePropertyIPTCByline: CFStringRef;
pub extern const kCGImagePropertyIPTCBylineTitle: CFStringRef;
pub extern const kCGImagePropertyIPTCCity: CFStringRef;
pub extern const kCGImagePropertyIPTCSubLocation: CFStringRef;
pub extern const kCGImagePropertyIPTCProvinceState: CFStringRef;
pub extern const kCGImagePropertyIPTCCountryPrimaryLocationCode: CFStringRef;
pub extern const kCGImagePropertyIPTCCountryPrimaryLocationName: CFStringRef;
pub extern const kCGImagePropertyIPTCOriginalTransmissionReference: CFStringRef;
pub extern const kCGImagePropertyIPTCHeadline: CFStringRef;
pub extern const kCGImagePropertyIPTCCredit: CFStringRef;
pub extern const kCGImagePropertyIPTCSource: CFStringRef;
pub extern const kCGImagePropertyIPTCCopyrightNotice: CFStringRef;
pub extern const kCGImagePropertyIPTCContact: CFStringRef;
pub extern const kCGImagePropertyIPTCCaptionAbstract: CFStringRef;
pub extern const kCGImagePropertyIPTCWriterEditor: CFStringRef;
pub extern const kCGImagePropertyIPTCImageType: CFStringRef;
pub extern const kCGImagePropertyIPTCImageOrientation: CFStringRef;
pub extern const kCGImagePropertyIPTCLanguageIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCStarRating: CFStringRef;
pub extern const kCGImagePropertyIPTCCreatorContactInfo: CFStringRef;
pub extern const kCGImagePropertyIPTCRightsUsageTerms: CFStringRef;
pub extern const kCGImagePropertyIPTCScene: CFStringRef;
pub extern const kCGImagePropertyIPTCExtAboutCvTerm: CFStringRef;
pub extern const kCGImagePropertyIPTCExtAboutCvTermCvId: CFStringRef;
pub extern const kCGImagePropertyIPTCExtAboutCvTermId: CFStringRef;
pub extern const kCGImagePropertyIPTCExtAboutCvTermName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtAboutCvTermRefinedAbout: CFStringRef;
pub extern const kCGImagePropertyIPTCExtAddlModelInfo: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkOrObject: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkCircaDateCreated: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkContentDescription: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkContributionDescription: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkCopyrightNotice: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkCreator: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkCreatorID: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkCopyrightOwnerID: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkCopyrightOwnerName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkLicensorID: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkLicensorName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkDateCreated: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkPhysicalDescription: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkSource: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkSourceInventoryNo: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkSourceInvURL: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkStylePeriod: CFStringRef;
pub extern const kCGImagePropertyIPTCExtArtworkTitle: CFStringRef;
pub extern const kCGImagePropertyIPTCExtAudioBitrate: CFStringRef;
pub extern const kCGImagePropertyIPTCExtAudioBitrateMode: CFStringRef;
pub extern const kCGImagePropertyIPTCExtAudioChannelCount: CFStringRef;
pub extern const kCGImagePropertyIPTCExtCircaDateCreated: CFStringRef;
pub extern const kCGImagePropertyIPTCExtContainerFormat: CFStringRef;
pub extern const kCGImagePropertyIPTCExtContainerFormatIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtContainerFormatName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtContributor: CFStringRef;
pub extern const kCGImagePropertyIPTCExtContributorIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtContributorName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtContributorRole: CFStringRef;
pub extern const kCGImagePropertyIPTCExtCopyrightYear: CFStringRef;
pub extern const kCGImagePropertyIPTCExtCreator: CFStringRef;
pub extern const kCGImagePropertyIPTCExtCreatorIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtCreatorName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtCreatorRole: CFStringRef;
pub extern const kCGImagePropertyIPTCExtControlledVocabularyTerm: CFStringRef;
pub extern const kCGImagePropertyIPTCExtDataOnScreen: CFStringRef;
pub extern const kCGImagePropertyIPTCExtDataOnScreenRegion: CFStringRef;
pub extern const kCGImagePropertyIPTCExtDataOnScreenRegionD: CFStringRef;
pub extern const kCGImagePropertyIPTCExtDataOnScreenRegionH: CFStringRef;
pub extern const kCGImagePropertyIPTCExtDataOnScreenRegionText: CFStringRef;
pub extern const kCGImagePropertyIPTCExtDataOnScreenRegionUnit: CFStringRef;
pub extern const kCGImagePropertyIPTCExtDataOnScreenRegionW: CFStringRef;
pub extern const kCGImagePropertyIPTCExtDataOnScreenRegionX: CFStringRef;
pub extern const kCGImagePropertyIPTCExtDataOnScreenRegionY: CFStringRef;
pub extern const kCGImagePropertyIPTCExtDigitalImageGUID: CFStringRef;
pub extern const kCGImagePropertyIPTCExtDigitalSourceFileType: CFStringRef;
pub extern const kCGImagePropertyIPTCExtDigitalSourceType: CFStringRef;
pub extern const kCGImagePropertyIPTCExtDopesheet: CFStringRef;
pub extern const kCGImagePropertyIPTCExtDopesheetLink: CFStringRef;
pub extern const kCGImagePropertyIPTCExtDopesheetLinkLink: CFStringRef;
pub extern const kCGImagePropertyIPTCExtDopesheetLinkLinkQualifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtEmbdEncRightsExpr: CFStringRef;
pub extern const kCGImagePropertyIPTCExtEmbeddedEncodedRightsExpr: CFStringRef;
pub extern const kCGImagePropertyIPTCExtEmbeddedEncodedRightsExprType: CFStringRef;
pub extern const kCGImagePropertyIPTCExtEmbeddedEncodedRightsExprLangID: CFStringRef;
pub extern const kCGImagePropertyIPTCExtEpisode: CFStringRef;
pub extern const kCGImagePropertyIPTCExtEpisodeIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtEpisodeName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtEpisodeNumber: CFStringRef;
pub extern const kCGImagePropertyIPTCExtEvent: CFStringRef;
pub extern const kCGImagePropertyIPTCExtShownEvent: CFStringRef;
pub extern const kCGImagePropertyIPTCExtShownEventIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtShownEventName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtExternalMetadataLink: CFStringRef;
pub extern const kCGImagePropertyIPTCExtFeedIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtGenre: CFStringRef;
pub extern const kCGImagePropertyIPTCExtGenreCvId: CFStringRef;
pub extern const kCGImagePropertyIPTCExtGenreCvTermId: CFStringRef;
pub extern const kCGImagePropertyIPTCExtGenreCvTermName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtGenreCvTermRefinedAbout: CFStringRef;
pub extern const kCGImagePropertyIPTCExtHeadline: CFStringRef;
pub extern const kCGImagePropertyIPTCExtIPTCLastEdited: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLinkedEncRightsExpr: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLinkedEncodedRightsExpr: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLinkedEncodedRightsExprType: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLinkedEncodedRightsExprLangID: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLocationCreated: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLocationCity: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLocationCountryCode: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLocationCountryName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLocationGPSAltitude: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLocationGPSLatitude: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLocationGPSLongitude: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLocationIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLocationLocationId: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLocationLocationName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLocationProvinceState: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLocationSublocation: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLocationWorldRegion: CFStringRef;
pub extern const kCGImagePropertyIPTCExtLocationShown: CFStringRef;
pub extern const kCGImagePropertyIPTCExtMaxAvailHeight: CFStringRef;
pub extern const kCGImagePropertyIPTCExtMaxAvailWidth: CFStringRef;
pub extern const kCGImagePropertyIPTCExtModelAge: CFStringRef;
pub extern const kCGImagePropertyIPTCExtOrganisationInImageCode: CFStringRef;
pub extern const kCGImagePropertyIPTCExtOrganisationInImageName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPersonHeard: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPersonHeardIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPersonHeardName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPersonInImage: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPersonInImageWDetails: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPersonInImageCharacteristic: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPersonInImageCvTermCvId: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPersonInImageCvTermId: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPersonInImageCvTermName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPersonInImageCvTermRefinedAbout: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPersonInImageDescription: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPersonInImageId: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPersonInImageName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtProductInImage: CFStringRef;
pub extern const kCGImagePropertyIPTCExtProductInImageDescription: CFStringRef;
pub extern const kCGImagePropertyIPTCExtProductInImageGTIN: CFStringRef;
pub extern const kCGImagePropertyIPTCExtProductInImageName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPublicationEvent: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPublicationEventDate: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPublicationEventIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtPublicationEventName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRating: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingRatingRegion: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingRegionCity: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingRegionCountryCode: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingRegionCountryName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingRegionGPSAltitude: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingRegionGPSLatitude: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingRegionGPSLongitude: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingRegionIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingRegionLocationId: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingRegionLocationName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingRegionProvinceState: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingRegionSublocation: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingRegionWorldRegion: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingScaleMaxValue: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingScaleMinValue: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingSourceLink: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingValue: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRatingValueLogoLink: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRegistryID: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRegistryEntryRole: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRegistryItemID: CFStringRef;
pub extern const kCGImagePropertyIPTCExtRegistryOrganisationID: CFStringRef;
pub extern const kCGImagePropertyIPTCExtReleaseReady: CFStringRef;
pub extern const kCGImagePropertyIPTCExtSeason: CFStringRef;
pub extern const kCGImagePropertyIPTCExtSeasonIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtSeasonName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtSeasonNumber: CFStringRef;
pub extern const kCGImagePropertyIPTCExtSeries: CFStringRef;
pub extern const kCGImagePropertyIPTCExtSeriesIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtSeriesName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtStorylineIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtStreamReady: CFStringRef;
pub extern const kCGImagePropertyIPTCExtStylePeriod: CFStringRef;
pub extern const kCGImagePropertyIPTCExtSupplyChainSource: CFStringRef;
pub extern const kCGImagePropertyIPTCExtSupplyChainSourceIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtSupplyChainSourceName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtTemporalCoverage: CFStringRef;
pub extern const kCGImagePropertyIPTCExtTemporalCoverageFrom: CFStringRef;
pub extern const kCGImagePropertyIPTCExtTemporalCoverageTo: CFStringRef;
pub extern const kCGImagePropertyIPTCExtTranscript: CFStringRef;
pub extern const kCGImagePropertyIPTCExtTranscriptLink: CFStringRef;
pub extern const kCGImagePropertyIPTCExtTranscriptLinkLink: CFStringRef;
pub extern const kCGImagePropertyIPTCExtTranscriptLinkLinkQualifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtVideoBitrate: CFStringRef;
pub extern const kCGImagePropertyIPTCExtVideoBitrateMode: CFStringRef;
pub extern const kCGImagePropertyIPTCExtVideoDisplayAspectRatio: CFStringRef;
pub extern const kCGImagePropertyIPTCExtVideoEncodingProfile: CFStringRef;
pub extern const kCGImagePropertyIPTCExtVideoShotType: CFStringRef;
pub extern const kCGImagePropertyIPTCExtVideoShotTypeIdentifier: CFStringRef;
pub extern const kCGImagePropertyIPTCExtVideoShotTypeName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtVideoStreamsCount: CFStringRef;
pub extern const kCGImagePropertyIPTCExtVisualColor: CFStringRef;
pub extern const kCGImagePropertyIPTCExtWorkflowTag: CFStringRef;
pub extern const kCGImagePropertyIPTCExtWorkflowTagCvId: CFStringRef;
pub extern const kCGImagePropertyIPTCExtWorkflowTagCvTermId: CFStringRef;
pub extern const kCGImagePropertyIPTCExtWorkflowTagCvTermName: CFStringRef;
pub extern const kCGImagePropertyIPTCExtWorkflowTagCvTermRefinedAbout: CFStringRef;
pub extern const kCGImagePropertyIPTCContactInfoCity: CFStringRef;
pub extern const kCGImagePropertyIPTCContactInfoCountry: CFStringRef;
pub extern const kCGImagePropertyIPTCContactInfoAddress: CFStringRef;
pub extern const kCGImagePropertyIPTCContactInfoPostalCode: CFStringRef;
pub extern const kCGImagePropertyIPTCContactInfoStateProvince: CFStringRef;
pub extern const kCGImagePropertyIPTCContactInfoEmails: CFStringRef;
pub extern const kCGImagePropertyIPTCContactInfoPhones: CFStringRef;
pub extern const kCGImagePropertyIPTCContactInfoWebURLs: CFStringRef;
pub extern const kCGImageProperty8BIMLayerNames: CFStringRef;
pub extern const kCGImageProperty8BIMVersion: CFStringRef;
pub extern const kCGImagePropertyDNGVersion: CFStringRef;
pub extern const kCGImagePropertyDNGBackwardVersion: CFStringRef;
pub extern const kCGImagePropertyDNGUniqueCameraModel: CFStringRef;
pub extern const kCGImagePropertyDNGLocalizedCameraModel: CFStringRef;
pub extern const kCGImagePropertyDNGCameraSerialNumber: CFStringRef;
pub extern const kCGImagePropertyDNGLensInfo: CFStringRef;
pub extern const kCGImagePropertyDNGBlackLevel: CFStringRef;
pub extern const kCGImagePropertyDNGWhiteLevel: CFStringRef;
pub extern const kCGImagePropertyDNGCalibrationIlluminant1: CFStringRef;
pub extern const kCGImagePropertyDNGCalibrationIlluminant2: CFStringRef;
pub extern const kCGImagePropertyDNGColorMatrix1: CFStringRef;
pub extern const kCGImagePropertyDNGColorMatrix2: CFStringRef;
pub extern const kCGImagePropertyDNGCameraCalibration1: CFStringRef;
pub extern const kCGImagePropertyDNGCameraCalibration2: CFStringRef;
pub extern const kCGImagePropertyDNGAsShotNeutral: CFStringRef;
pub extern const kCGImagePropertyDNGAsShotWhiteXY: CFStringRef;
pub extern const kCGImagePropertyDNGBaselineExposure: CFStringRef;
pub extern const kCGImagePropertyDNGBaselineNoise: CFStringRef;
pub extern const kCGImagePropertyDNGBaselineSharpness: CFStringRef;
pub extern const kCGImagePropertyDNGPrivateData: CFStringRef;
pub extern const kCGImagePropertyDNGCameraCalibrationSignature: CFStringRef;
pub extern const kCGImagePropertyDNGProfileCalibrationSignature: CFStringRef;
pub extern const kCGImagePropertyDNGNoiseProfile: CFStringRef;
pub extern const kCGImagePropertyDNGWarpRectilinear: CFStringRef;
pub extern const kCGImagePropertyDNGWarpFisheye: CFStringRef;
pub extern const kCGImagePropertyDNGFixVignetteRadial: CFStringRef;
pub extern const kCGImagePropertyDNGActiveArea: CFStringRef;
pub extern const kCGImagePropertyDNGAnalogBalance: CFStringRef;
pub extern const kCGImagePropertyDNGAntiAliasStrength: CFStringRef;
pub extern const kCGImagePropertyDNGAsShotICCProfile: CFStringRef;
pub extern const kCGImagePropertyDNGAsShotPreProfileMatrix: CFStringRef;
pub extern const kCGImagePropertyDNGAsShotProfileName: CFStringRef;
pub extern const kCGImagePropertyDNGBaselineExposureOffset: CFStringRef;
pub extern const kCGImagePropertyDNGBayerGreenSplit: CFStringRef;
pub extern const kCGImagePropertyDNGBestQualityScale: CFStringRef;
pub extern const kCGImagePropertyDNGBlackLevelDeltaH: CFStringRef;
pub extern const kCGImagePropertyDNGBlackLevelDeltaV: CFStringRef;
pub extern const kCGImagePropertyDNGBlackLevelRepeatDim: CFStringRef;
pub extern const kCGImagePropertyDNGCFALayout: CFStringRef;
pub extern const kCGImagePropertyDNGCFAPlaneColor: CFStringRef;
pub extern const kCGImagePropertyDNGChromaBlurRadius: CFStringRef;
pub extern const kCGImagePropertyDNGColorimetricReference: CFStringRef;
pub extern const kCGImagePropertyDNGCurrentICCProfile: CFStringRef;
pub extern const kCGImagePropertyDNGCurrentPreProfileMatrix: CFStringRef;
pub extern const kCGImagePropertyDNGDefaultBlackRender: CFStringRef;
pub extern const kCGImagePropertyDNGDefaultCropOrigin: CFStringRef;
pub extern const kCGImagePropertyDNGDefaultCropSize: CFStringRef;
pub extern const kCGImagePropertyDNGDefaultScale: CFStringRef;
pub extern const kCGImagePropertyDNGDefaultUserCrop: CFStringRef;
pub extern const kCGImagePropertyDNGExtraCameraProfiles: CFStringRef;
pub extern const kCGImagePropertyDNGForwardMatrix1: CFStringRef;
pub extern const kCGImagePropertyDNGForwardMatrix2: CFStringRef;
pub extern const kCGImagePropertyDNGLinearizationTable: CFStringRef;
pub extern const kCGImagePropertyDNGLinearResponseLimit: CFStringRef;
pub extern const kCGImagePropertyDNGMakerNoteSafety: CFStringRef;
pub extern const kCGImagePropertyDNGMaskedAreas: CFStringRef;
pub extern const kCGImagePropertyDNGNewRawImageDigest: CFStringRef;
pub extern const kCGImagePropertyDNGNoiseReductionApplied: CFStringRef;
pub extern const kCGImagePropertyDNGOpcodeList1: CFStringRef;
pub extern const kCGImagePropertyDNGOpcodeList2: CFStringRef;
pub extern const kCGImagePropertyDNGOpcodeList3: CFStringRef;
pub extern const kCGImagePropertyDNGOriginalBestQualityFinalSize: CFStringRef;
pub extern const kCGImagePropertyDNGOriginalDefaultCropSize: CFStringRef;
pub extern const kCGImagePropertyDNGOriginalDefaultFinalSize: CFStringRef;
pub extern const kCGImagePropertyDNGOriginalRawFileData: CFStringRef;
pub extern const kCGImagePropertyDNGOriginalRawFileDigest: CFStringRef;
pub extern const kCGImagePropertyDNGOriginalRawFileName: CFStringRef;
pub extern const kCGImagePropertyDNGPreviewApplicationName: CFStringRef;
pub extern const kCGImagePropertyDNGPreviewApplicationVersion: CFStringRef;
pub extern const kCGImagePropertyDNGPreviewColorSpace: CFStringRef;
pub extern const kCGImagePropertyDNGPreviewDateTime: CFStringRef;
pub extern const kCGImagePropertyDNGPreviewSettingsDigest: CFStringRef;
pub extern const kCGImagePropertyDNGPreviewSettingsName: CFStringRef;
pub extern const kCGImagePropertyDNGProfileCopyright: CFStringRef;
pub extern const kCGImagePropertyDNGProfileEmbedPolicy: CFStringRef;
pub extern const kCGImagePropertyDNGProfileHueSatMapData1: CFStringRef;
pub extern const kCGImagePropertyDNGProfileHueSatMapData2: CFStringRef;
pub extern const kCGImagePropertyDNGProfileHueSatMapDims: CFStringRef;
pub extern const kCGImagePropertyDNGProfileHueSatMapEncoding: CFStringRef;
pub extern const kCGImagePropertyDNGProfileLookTableData: CFStringRef;
pub extern const kCGImagePropertyDNGProfileLookTableDims: CFStringRef;
pub extern const kCGImagePropertyDNGProfileLookTableEncoding: CFStringRef;
pub extern const kCGImagePropertyDNGProfileName: CFStringRef;
pub extern const kCGImagePropertyDNGProfileToneCurve: CFStringRef;
pub extern const kCGImagePropertyDNGRawDataUniqueID: CFStringRef;
pub extern const kCGImagePropertyDNGRawImageDigest: CFStringRef;
pub extern const kCGImagePropertyDNGRawToPreviewGain: CFStringRef;
pub extern const kCGImagePropertyDNGReductionMatrix1: CFStringRef;
pub extern const kCGImagePropertyDNGReductionMatrix2: CFStringRef;
pub extern const kCGImagePropertyDNGRowInterleaveFactor: CFStringRef;
pub extern const kCGImagePropertyDNGShadowScale: CFStringRef;
pub extern const kCGImagePropertyDNGSubTileBlockSize: CFStringRef;
pub extern const kCGImagePropertyCIFFDescription: CFStringRef;
pub extern const kCGImagePropertyCIFFFirmware: CFStringRef;
pub extern const kCGImagePropertyCIFFOwnerName: CFStringRef;
pub extern const kCGImagePropertyCIFFImageName: CFStringRef;
pub extern const kCGImagePropertyCIFFImageFileName: CFStringRef;
pub extern const kCGImagePropertyCIFFReleaseMethod: CFStringRef;
pub extern const kCGImagePropertyCIFFReleaseTiming: CFStringRef;
pub extern const kCGImagePropertyCIFFRecordID: CFStringRef;
pub extern const kCGImagePropertyCIFFSelfTimingTime: CFStringRef;
pub extern const kCGImagePropertyCIFFCameraSerialNumber: CFStringRef;
pub extern const kCGImagePropertyCIFFImageSerialNumber: CFStringRef;
pub extern const kCGImagePropertyCIFFContinuousDrive: CFStringRef;
pub extern const kCGImagePropertyCIFFFocusMode: CFStringRef;
pub extern const kCGImagePropertyCIFFMeteringMode: CFStringRef;
pub extern const kCGImagePropertyCIFFShootingMode: CFStringRef;
pub extern const kCGImagePropertyCIFFLensModel: CFStringRef;
pub extern const kCGImagePropertyCIFFLensMaxMM: CFStringRef;
pub extern const kCGImagePropertyCIFFLensMinMM: CFStringRef;
pub extern const kCGImagePropertyCIFFWhiteBalanceIndex: CFStringRef;
pub extern const kCGImagePropertyCIFFFlashExposureComp: CFStringRef;
pub extern const kCGImagePropertyCIFFMeasuredEV: CFStringRef;
pub extern const kCGImagePropertyMakerNikonISOSetting: CFStringRef;
pub extern const kCGImagePropertyMakerNikonColorMode: CFStringRef;
pub extern const kCGImagePropertyMakerNikonQuality: CFStringRef;
pub extern const kCGImagePropertyMakerNikonWhiteBalanceMode: CFStringRef;
pub extern const kCGImagePropertyMakerNikonSharpenMode: CFStringRef;
pub extern const kCGImagePropertyMakerNikonFocusMode: CFStringRef;
pub extern const kCGImagePropertyMakerNikonFlashSetting: CFStringRef;
pub extern const kCGImagePropertyMakerNikonISOSelection: CFStringRef;
pub extern const kCGImagePropertyMakerNikonFlashExposureComp: CFStringRef;
pub extern const kCGImagePropertyMakerNikonImageAdjustment: CFStringRef;
pub extern const kCGImagePropertyMakerNikonLensAdapter: CFStringRef;
pub extern const kCGImagePropertyMakerNikonLensType: CFStringRef;
pub extern const kCGImagePropertyMakerNikonLensInfo: CFStringRef;
pub extern const kCGImagePropertyMakerNikonFocusDistance: CFStringRef;
pub extern const kCGImagePropertyMakerNikonDigitalZoom: CFStringRef;
pub extern const kCGImagePropertyMakerNikonShootingMode: CFStringRef;
pub extern const kCGImagePropertyMakerNikonCameraSerialNumber: CFStringRef;
pub extern const kCGImagePropertyMakerNikonShutterCount: CFStringRef;
pub extern const kCGImagePropertyMakerCanonOwnerName: CFStringRef;
pub extern const kCGImagePropertyMakerCanonCameraSerialNumber: CFStringRef;
pub extern const kCGImagePropertyMakerCanonImageSerialNumber: CFStringRef;
pub extern const kCGImagePropertyMakerCanonFlashExposureComp: CFStringRef;
pub extern const kCGImagePropertyMakerCanonContinuousDrive: CFStringRef;
pub extern const kCGImagePropertyMakerCanonLensModel: CFStringRef;
pub extern const kCGImagePropertyMakerCanonFirmware: CFStringRef;
pub extern const kCGImagePropertyMakerCanonAspectRatioInfo: CFStringRef;
pub extern const kCGImagePropertyOpenEXRAspectRatio: CFStringRef;
pub const CGImagePropertyOrientation = u32;
pub const kCGImagePropertyOrientationUp: c_int = 1;
pub const kCGImagePropertyOrientationUpMirrored: c_int = 2;
pub const kCGImagePropertyOrientationDown: c_int = 3;
pub const kCGImagePropertyOrientationDownMirrored: c_int = 4;
pub const kCGImagePropertyOrientationLeftMirrored: c_int = 5;
pub const kCGImagePropertyOrientationRight: c_int = 6;
pub const kCGImagePropertyOrientationRightMirrored: c_int = 7;
pub const kCGImagePropertyOrientationLeft: c_int = 8;
const enum_unnamed_1619 = c_uint;
pub extern const kCGImagePropertyTGACompression: CFStringRef;
pub const CGImagePropertyTGACompression = u32;
pub const kCGImageTGACompressionNone: c_int = 0;
pub const kCGImageTGACompressionRLE: c_int = 1;
const enum_unnamed_1620 = c_uint;
pub extern const kCGImagePropertyPNGCompressionFilter: CFStringRef;
pub extern const kCGImagePropertyPNGTransparency: CFStringRef;
pub extern const kCGImageAuxiliaryDataTypeDepth: CFStringRef;
pub extern const kCGImageAuxiliaryDataTypeDisparity: CFStringRef;
pub extern const kCGImageAuxiliaryDataTypePortraitEffectsMatte: CFStringRef;
pub extern const kCGImageAuxiliaryDataTypeSemanticSegmentationSkinMatte: CFStringRef;
pub extern const kCGImageAuxiliaryDataTypeSemanticSegmentationHairMatte: CFStringRef;
pub extern const kCGImageAuxiliaryDataTypeSemanticSegmentationTeethMatte: CFStringRef;
pub extern const kCGImageAuxiliaryDataTypeSemanticSegmentationGlassesMatte: CFStringRef;
pub extern const kCGImageAuxiliaryDataTypeSemanticSegmentationSkyMatte: CFStringRef;
pub extern const kCGImageAuxiliaryDataTypeHDRGainMap: CFStringRef;
pub extern const kCGImageAuxiliaryDataInfoData: CFStringRef;
pub extern const kCGImageAuxiliaryDataInfoDataDescription: CFStringRef;
pub extern const kCGImageAuxiliaryDataInfoMetadata: CFStringRef;
pub extern const kCGImagePropertyImageCount: CFStringRef;
pub extern const kCGImagePropertyWidth: CFStringRef;
pub extern const kCGImagePropertyHeight: CFStringRef;
pub extern const kCGImagePropertyBytesPerRow: CFStringRef;
pub extern const kCGImagePropertyNamedColorSpace: CFStringRef;
pub extern const kCGImagePropertyPixelFormat: CFStringRef;
pub extern const kCGImagePropertyImages: CFStringRef;
pub extern const kCGImagePropertyThumbnailImages: CFStringRef;
pub extern const kCGImagePropertyAuxiliaryData: CFStringRef;
pub extern const kCGImagePropertyAuxiliaryDataType: CFStringRef;
pub extern const kCGImagePropertyImageIndex: CFStringRef;
pub extern const kCGImagePropertyGroups: CFStringRef;
pub extern const kCGImagePropertyGroupIndex: CFStringRef;
pub extern const kCGImagePropertyGroupType: CFStringRef;
pub extern const kCGImagePropertyGroupTypeStereoPair: CFStringRef;
pub extern const kCGImagePropertyGroupTypeAlternate: CFStringRef;
pub extern const kCGImagePropertyGroupImagesAlternate: CFStringRef;
pub extern const kCGImagePropertyGroupImageIndexLeft: CFStringRef;
pub extern const kCGImagePropertyGroupImageIndexRight: CFStringRef;
pub extern const kCGImagePropertyGroupImageIsLeftImage: CFStringRef;
pub extern const kCGImagePropertyGroupImageIsRightImage: CFStringRef;
pub extern const kCGImagePropertyGroupImageIsAlternateImage: CFStringRef;
pub const CGImageAnimationStatus = OSStatus;
pub const kCGImageAnimationStatus_ParameterError: c_int = -22140;
pub const kCGImageAnimationStatus_CorruptInputImage: c_int = -22141;
pub const kCGImageAnimationStatus_UnsupportedFormat: c_int = -22142;
pub const kCGImageAnimationStatus_IncompleteInputImage: c_int = -22143;
pub const kCGImageAnimationStatus_AllocationFailure: c_int = -22144;
const enum_unnamed_1621 = c_int;
pub extern const kCGImageAnimationStartIndex: CFStringRef;
pub extern const kCGImageAnimationDelayTime: CFStringRef;
pub extern const kCGImageAnimationLoopCount: CFStringRef; // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/CGImageAnimation.h:42:16: warning: unsupported type: 'BlockPointer'
pub const CGImageSourceAnimationBlock = @compileError("unable to resolve typedef child type"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/CGImageAnimation.h:42:16
pub extern fn CGAnimateImageAtURLWithBlock(url: CFURLRef, options: CFDictionaryRef, block: CGImageSourceAnimationBlock) OSStatus;
pub extern fn CGAnimateImageDataWithBlock(data: CFDataRef, options: CFDictionaryRef, block: CGImageSourceAnimationBlock) OSStatus;
pub const PMObject = ?*const anyopaque;
pub const struct_OpaquePMPrintSettings = opaque {};
pub const PMPrintSettings = ?*struct_OpaquePMPrintSettings;
pub const struct_OpaquePMPageFormat = opaque {};
pub const PMPageFormat = ?*struct_OpaquePMPageFormat;
pub const struct_OpaquePMPrintSession = opaque {};
pub const PMPrintSession = ?*struct_OpaquePMPrintSession;
pub const struct_OpaquePMPrinter = opaque {};
pub const PMPrinter = ?*struct_OpaquePMPrinter;
pub const struct_OpaquePMServer = opaque {};
pub const PMServer = ?*struct_OpaquePMServer;
pub const struct_OpaquePMPreset = opaque {};
pub const PMPreset = ?*struct_OpaquePMPreset;
pub const struct_OpaquePMPaper = opaque {};
pub const PMPaper = ?*struct_OpaquePMPaper;
pub const kPMCancel: c_int = 128;
const enum_unnamed_1622 = c_uint;
pub const PMDestinationType = UInt16;
pub const kPMDestinationInvalid: c_int = 0;
pub const kPMDestinationPrinter: c_int = 1;
pub const kPMDestinationFile: c_int = 2;
pub const kPMDestinationFax: c_int = 3;
pub const kPMDestinationPreview: c_int = 4;
pub const kPMDestinationProcessPDF: c_int = 5;
const enum_unnamed_1623 = c_uint;
pub const PMOrientation = UInt16;
pub const kPMPortrait: c_int = 1;
pub const kPMLandscape: c_int = 2;
pub const kPMReversePortrait: c_int = 3;
pub const kPMReverseLandscape: c_int = 4;
const enum_unnamed_1624 = c_uint;
pub const PMPrinterState = UInt16;
pub const kPMPrinterIdle: c_int = 3;
pub const kPMPrinterProcessing: c_int = 4;
pub const kPMPrinterStopped: c_int = 5;
const enum_unnamed_1625 = c_uint;
pub const PMColorSpaceModel = UInt32;
pub const kPMUnknownColorSpaceModel: c_int = 0;
pub const kPMGrayColorSpaceModel: c_int = 1;
pub const kPMRGBColorSpaceModel: c_int = 2;
pub const kPMCMYKColorSpaceModel: c_int = 3;
pub const kPMDevNColorSpaceModel: c_int = 4;
const enum_unnamed_1626 = c_uint;
pub const PMQualityMode = UInt32;
pub const kPMQualityLowest: c_int = 0;
pub const kPMQualityInkSaver: c_int = 1;
pub const kPMQualityDraft: c_int = 4;
pub const kPMQualityNormal: c_int = 8;
pub const kPMQualityPhoto: c_int = 11;
pub const kPMQualityBest: c_int = 13;
pub const kPMQualityHighest: c_int = 15;
const enum_unnamed_1627 = c_uint;
pub const PMPaperType = UInt32;
pub const kPMPaperTypeUnknown: c_int = 0;
pub const kPMPaperTypePlain: c_int = 1;
pub const kPMPaperTypeCoated: c_int = 2;
pub const kPMPaperTypePremium: c_int = 3;
pub const kPMPaperTypeGlossy: c_int = 4;
pub const kPMPaperTypeTransparency: c_int = 5;
pub const kPMPaperTypeTShirt: c_int = 6;
const enum_unnamed_1628 = c_uint;
pub const PMScalingAlignment = UInt16;
pub const kPMScalingPinTopLeft: c_int = 1;
pub const kPMScalingPinTopRight: c_int = 2;
pub const kPMScalingPinBottomLeft: c_int = 3;
pub const kPMScalingPinBottomRight: c_int = 4;
pub const kPMScalingCenterOnPaper: c_int = 5;
pub const kPMScalingCenterOnImgArea: c_int = 6;
const enum_unnamed_1629 = c_uint;
pub const PMDuplexMode = UInt32;
pub const kPMDuplexNone: c_int = 1;
pub const kPMDuplexNoTumble: c_int = 2;
pub const kPMDuplexTumble: c_int = 3;
pub const kPMSimplexTumble: c_int = 4;
const enum_unnamed_1630 = c_uint;
pub const PMLayoutDirection = UInt16;
pub const kPMLayoutLeftRightTopBottom: c_int = 1;
pub const kPMLayoutLeftRightBottomTop: c_int = 2;
pub const kPMLayoutRightLeftTopBottom: c_int = 3;
pub const kPMLayoutRightLeftBottomTop: c_int = 4;
pub const kPMLayoutTopBottomLeftRight: c_int = 5;
pub const kPMLayoutTopBottomRightLeft: c_int = 6;
pub const kPMLayoutBottomTopLeftRight: c_int = 7;
pub const kPMLayoutBottomTopRightLeft: c_int = 8;
const enum_unnamed_1631 = c_uint;
pub const PMBorderType = UInt16;
pub const kPMBorderSingleHairline: c_int = 1;
pub const kPMBorderDoubleHairline: c_int = 2;
pub const kPMBorderSingleThickline: c_int = 3;
pub const kPMBorderDoubleThickline: c_int = 4;
const enum_unnamed_1632 = c_uint;
pub const PMPrintDialogOptionFlags = OptionBits;
pub const kPMHideInlineItems: c_int = 0;
pub const kPMShowDefaultInlineItems: c_int = 32768;
pub const kPMShowInlineCopies: c_int = 1;
pub const kPMShowInlinePageRange: c_int = 2;
pub const kPMShowInlinePageRangeWithSelection: c_int = 64;
pub const kPMShowInlinePaperSize: c_int = 4;
pub const kPMShowInlineOrientation: c_int = 8;
pub const kPMShowInlineScale: c_int = 128;
pub const kPMShowPageAttributesPDE: c_int = 256;
const enum_unnamed_1633 = c_uint;
pub const PMPPDDomain = UInt16;
pub const kAllPPDDomains: c_int = 1;
pub const kSystemPPDDomain: c_int = 2;
pub const kLocalPPDDomain: c_int = 3;
pub const kNetworkPPDDomain: c_int = 4;
pub const kUserPPDDomain: c_int = 5;
pub const kCUPSPPDDomain: c_int = 6;
const enum_unnamed_1634 = c_uint;
pub const kPMNoError: c_int = 0;
pub const kPMGeneralError: c_int = -30870;
pub const kPMOutOfScope: c_int = -30871;
pub const kPMInvalidParameter: c_int = -50;
pub const kPMNoDefaultPrinter: c_int = -30872;
pub const kPMNotImplemented: c_int = -30873;
pub const kPMNoSuchEntry: c_int = -30874;
pub const kPMInvalidPrintSettings: c_int = -30875;
pub const kPMInvalidPageFormat: c_int = -30876;
pub const kPMValueOutOfRange: c_int = -30877;
const enum_unnamed_1635 = c_int;
pub const kPMInvalidPrintSession: c_int = -30879;
pub const kPMInvalidPrinter: c_int = -30880;
pub const kPMObjectInUse: c_int = -30881;
pub const kPMInvalidPreset: c_int = -30899;
const enum_unnamed_1636 = c_int;
pub const kPMPrintAllPages: c_int = -1;
const enum_unnamed_1637 = c_int;
pub const kPMUnlocked: c_int = 0;
const enum_unnamed_1638 = c_uint;
pub const struct_PMRect = extern struct {
    top: f64,
    left: f64,
    bottom: f64,
    right: f64,
};
pub const PMRect = struct_PMRect;
pub const struct_PMResolution = extern struct {
    hRes: f64,
    vRes: f64,
};
pub const PMResolution = struct_PMResolution;
pub const struct_PMLanguageInfo = extern struct {
    level: Str32,
    version: Str32,
    release: Str32,
};
pub const PMLanguageInfo = struct_PMLanguageInfo;
pub const PMPaperMargins = PMRect;
pub const kPMDataFormatXMLDefault: c_int = 0;
pub const kPMDataFormatXMLMinimal: c_int = 1;
pub const kPMDataFormatXMLCompressed: c_int = 2;
pub const enum_PMDataFormat = c_uint;
pub const PMDataFormat = enum_PMDataFormat;
pub extern fn PMRetain(object: PMObject) OSStatus;
pub extern fn PMRelease(object: PMObject) OSStatus;
pub extern fn PMCreateSession(printSession: [*c]PMPrintSession) OSStatus;
pub extern fn PMSessionError(printSession: PMPrintSession) OSStatus;
pub extern fn PMSessionSetError(printSession: PMPrintSession, printError: OSStatus) OSStatus;
pub extern fn PMSessionBeginCGDocumentNoDialog(printSession: PMPrintSession, printSettings: PMPrintSettings, pageFormat: PMPageFormat) OSStatus;
pub extern fn PMSessionEndDocumentNoDialog(printSession: PMPrintSession) OSStatus;
pub extern fn PMSessionBeginPageNoDialog(printSession: PMPrintSession, pageFormat: PMPageFormat, pageFrame: [*c]const PMRect) OSStatus;
pub extern fn PMSessionEndPageNoDialog(printSession: PMPrintSession) OSStatus;
pub extern fn PMSessionGetCGGraphicsContext(printSession: PMPrintSession, context: [*c]CGContextRef) OSStatus;
pub extern fn PMSessionGetDestinationType(printSession: PMPrintSession, printSettings: PMPrintSettings, destTypeP: [*c]PMDestinationType) OSStatus;
pub extern fn PMSessionCopyDestinationFormat(printSession: PMPrintSession, printSettings: PMPrintSettings, destFormatP: [*c]CFStringRef) OSStatus;
pub extern fn PMSessionCopyDestinationLocation(printSession: PMPrintSession, printSettings: PMPrintSettings, destLocationP: [*c]CFURLRef) OSStatus;
pub extern fn PMSessionSetDestination(printSession: PMPrintSession, printSettings: PMPrintSettings, destType: PMDestinationType, destFormat: CFStringRef, destLocation: CFURLRef) OSStatus;
pub extern fn PMSessionCopyOutputFormatList(printSession: PMPrintSession, destType: PMDestinationType, documentFormatP: [*c]CFArrayRef) OSStatus;
pub extern fn PMSessionCreatePageFormatList(printSession: PMPrintSession, printer: PMPrinter, pageFormatList: [*c]CFArrayRef) OSStatus;
pub extern fn PMSessionCreatePrinterList(printSession: PMPrintSession, printerList: [*c]CFArrayRef, currentIndex: [*c]CFIndex, currentPrinter: [*c]PMPrinter) OSStatus;
pub extern fn PMSessionGetCurrentPrinter(printSession: PMPrintSession, currentPrinter: [*c]PMPrinter) OSStatus;
pub extern fn PMSessionSetCurrentPMPrinter(session: PMPrintSession, printer: PMPrinter) OSStatus;
pub extern fn PMSessionGetDataFromSession(printSession: PMPrintSession, key: CFStringRef, data: [*c]CFTypeRef) OSStatus;
pub extern fn PMSessionSetDataInSession(printSession: PMPrintSession, key: CFStringRef, data: CFTypeRef) OSStatus;
pub extern fn PMCreatePageFormat(pageFormat: [*c]PMPageFormat) OSStatus;
pub extern fn PMSessionDefaultPageFormat(printSession: PMPrintSession, pageFormat: PMPageFormat) OSStatus;
pub extern fn PMSessionValidatePageFormat(printSession: PMPrintSession, pageFormat: PMPageFormat, changed: [*c]Boolean) OSStatus;
pub extern fn PMCopyPageFormat(formatSrc: PMPageFormat, formatDest: PMPageFormat) OSStatus;
pub extern fn PMCreatePageFormatWithPMPaper(pageFormat: [*c]PMPageFormat, paper: PMPaper) OSStatus;
pub extern fn PMPageFormatCreateDataRepresentation(pageFormat: PMPageFormat, data: [*c]CFDataRef, format: PMDataFormat) OSStatus;
pub extern fn PMPageFormatCreateWithDataRepresentation(data: CFDataRef, pageFormat: [*c]PMPageFormat) OSStatus;
pub extern fn PMGetAdjustedPageRect(pageFormat: PMPageFormat, pageRect: [*c]PMRect) OSStatus;
pub extern fn PMGetAdjustedPaperRect(pageFormat: PMPageFormat, paperRect: [*c]PMRect) OSStatus;
pub extern fn PMGetOrientation(pageFormat: PMPageFormat, orientation: [*c]PMOrientation) OSStatus;
pub extern fn PMGetPageFormatExtendedData(pageFormat: PMPageFormat, dataID: OSType, size: [*c]UInt32, extendedData: ?*anyopaque) OSStatus;
pub extern fn PMPageFormatGetPrinterID(pageFormat: PMPageFormat, printerID: [*c]CFStringRef) OSStatus;
pub extern fn PMGetScale(pageFormat: PMPageFormat, scale: [*c]f64) OSStatus;
pub extern fn PMGetUnadjustedPageRect(pageFormat: PMPageFormat, pageRect: [*c]PMRect) OSStatus;
pub extern fn PMGetUnadjustedPaperRect(pageFormat: PMPageFormat, paperRect: [*c]PMRect) OSStatus;
pub extern fn PMSetOrientation(pageFormat: PMPageFormat, orientation: PMOrientation, lock: Boolean) OSStatus;
pub extern fn PMSetPageFormatExtendedData(pageFormat: PMPageFormat, dataID: OSType, size: UInt32, extendedData: ?*anyopaque) OSStatus;
pub extern fn PMSetScale(pageFormat: PMPageFormat, scale: f64) OSStatus;
pub extern fn PMCreatePrintSettings(printSettings: [*c]PMPrintSettings) OSStatus;
pub extern fn PMSessionDefaultPrintSettings(printSession: PMPrintSession, printSettings: PMPrintSettings) OSStatus;
pub extern fn PMSessionValidatePrintSettings(printSession: PMPrintSession, printSettings: PMPrintSettings, changed: [*c]Boolean) OSStatus;
pub extern fn PMCopyPrintSettings(settingSrc: PMPrintSettings, settingDest: PMPrintSettings) OSStatus;
pub extern fn PMPrintSettingsCreateDataRepresentation(printSettings: PMPrintSettings, data: [*c]CFDataRef, format: PMDataFormat) OSStatus;
pub extern fn PMPrintSettingsCreateWithDataRepresentation(data: CFDataRef, printSettings: [*c]PMPrintSettings) OSStatus;
pub extern fn PMGetCollate(printSettings: PMPrintSettings, collate: [*c]Boolean) OSStatus;
pub extern fn PMGetCopies(printSettings: PMPrintSettings, copies: [*c]UInt32) OSStatus;
pub extern fn PMGetDuplex(printSettings: PMPrintSettings, duplexSetting: [*c]PMDuplexMode) OSStatus;
pub extern fn PMGetFirstPage(printSettings: PMPrintSettings, first: [*c]UInt32) OSStatus;
pub extern fn PMGetLastPage(printSettings: PMPrintSettings, last: [*c]UInt32) OSStatus;
pub extern fn PMGetPageRange(printSettings: PMPrintSettings, minPage: [*c]UInt32, maxPage: [*c]UInt32) OSStatus;
pub extern fn PMPrintSettingsGetJobName(printSettings: PMPrintSettings, name: [*c]CFStringRef) OSStatus;
pub extern fn PMPrintSettingsGetValue(printSettings: PMPrintSettings, key: CFStringRef, value: [*c]CFTypeRef) OSStatus;
pub extern fn PMSetCollate(printSettings: PMPrintSettings, collate: Boolean) OSStatus;
pub extern fn PMSetCopies(printSettings: PMPrintSettings, copies: UInt32, lock: Boolean) OSStatus;
pub extern fn PMSetDuplex(printSettings: PMPrintSettings, duplexSetting: PMDuplexMode) OSStatus;
pub extern fn PMSetFirstPage(printSettings: PMPrintSettings, first: UInt32, lock: Boolean) OSStatus;
pub extern fn PMSetLastPage(printSettings: PMPrintSettings, last: UInt32, lock: Boolean) OSStatus;
pub extern fn PMSetPageRange(printSettings: PMPrintSettings, minPage: UInt32, maxPage: UInt32) OSStatus;
pub extern fn PMPrintSettingsSetJobName(printSettings: PMPrintSettings, name: CFStringRef) OSStatus;
pub extern fn PMPrintSettingsSetValue(printSettings: PMPrintSettings, key: CFStringRef, value: CFTypeRef, locked: Boolean) OSStatus;
pub extern fn PMPrintSettingsCopyAsDictionary(printSettings: PMPrintSettings, settingsDictionary: [*c]CFDictionaryRef) OSStatus;
pub extern fn PMPrintSettingsCopyKeys(printSettings: PMPrintSettings, settingsKeys: [*c]CFArrayRef) OSStatus;
pub extern fn PMCreateGenericPrinter(printer: [*c]PMPrinter) OSStatus;
pub extern fn PMServerCreatePrinterList(server: PMServer, printerList: [*c]CFArrayRef) OSStatus;
pub extern fn PMServerLaunchPrinterBrowser(server: PMServer, options: CFDictionaryRef) OSStatus;
pub extern fn PMPrinterCreateFromPrinterID(printerID: CFStringRef) PMPrinter;
pub extern fn PMPrinterCopyDescriptionURL(printer: PMPrinter, descriptionType: CFStringRef, fileURL: [*c]CFURLRef) OSStatus;
pub extern fn PMPrinterCopyDeviceURI(printer: PMPrinter, deviceURI: [*c]CFURLRef) OSStatus;
pub extern fn PMPrinterCopyHostName(printer: PMPrinter, hostNameP: [*c]CFStringRef) OSStatus;
pub extern fn PMPrinterCopyPresets(printer: PMPrinter, presetList: [*c]CFArrayRef) OSStatus;
pub extern fn PMPrinterGetCommInfo(printer: PMPrinter, supportsControlCharRangeP: [*c]Boolean, supportsEightBitP: [*c]Boolean) OSStatus;
pub extern fn PMPrinterGetID(printer: PMPrinter) CFStringRef;
pub extern fn PMPrinterGetLocation(printer: PMPrinter) CFStringRef;
pub extern fn PMPrinterGetDriverCreator(printer: PMPrinter, creator: [*c]OSType) OSStatus;
pub extern fn PMPrinterGetDriverReleaseInfo(printer: PMPrinter, release: [*c]VersRec) OSStatus;
pub extern fn PMPrinterGetPrinterResolutionCount(printer: PMPrinter, countP: [*c]UInt32) OSStatus;
pub extern fn PMPrinterGetIndexedPrinterResolution(printer: PMPrinter, index: UInt32, resolutionP: [*c]PMResolution) OSStatus;
pub extern fn PMPrinterGetOutputResolution(printer: PMPrinter, printSettings: PMPrintSettings, resolutionP: [*c]PMResolution) OSStatus;
pub extern fn PMPrinterSetOutputResolution(printer: PMPrinter, printSettings: PMPrintSettings, resolutionP: [*c]const PMResolution) OSStatus;
pub extern fn PMPrinterGetLanguageInfo(printer: PMPrinter, info: [*c]PMLanguageInfo) OSStatus;
pub extern fn PMPrinterGetMakeAndModelName(printer: PMPrinter, makeAndModel: [*c]CFStringRef) OSStatus;
pub extern fn PMPrinterGetMimeTypes(printer: PMPrinter, settings: PMPrintSettings, mimeTypes: [*c]CFArrayRef) OSStatus;
pub extern fn PMPrinterGetName(printer: PMPrinter) CFStringRef;
pub extern fn PMPrinterGetPaperList(printer: PMPrinter, paperList: [*c]CFArrayRef) OSStatus;
pub extern fn PMPrinterGetState(printer: PMPrinter, state: [*c]PMPrinterState) OSStatus;
pub extern fn PMPrinterIsDefault(printer: PMPrinter) Boolean;
pub extern fn PMPrinterIsFavorite(printer: PMPrinter) Boolean;
pub extern fn PMPrinterIsPostScriptCapable(printer: PMPrinter) Boolean;
pub extern fn PMPrinterIsPostScriptPrinter(printer: PMPrinter, isPSPrinter: [*c]Boolean) OSStatus;
pub extern fn PMPrinterIsRemote(printer: PMPrinter, isRemoteP: [*c]Boolean) OSStatus;
pub extern fn PMPrinterSetDefault(printer: PMPrinter) OSStatus;
pub extern fn PMPresetCopyName(preset: PMPreset, name: [*c]CFStringRef) OSStatus;
pub extern fn PMPresetCreatePrintSettings(preset: PMPreset, session: PMPrintSession, printSettings: [*c]PMPrintSettings) OSStatus;
pub extern fn PMPresetGetAttributes(preset: PMPreset, attributes: [*c]CFDictionaryRef) OSStatus;
pub extern fn PMGetPageFormatPaper(format: PMPageFormat, paper: [*c]PMPaper) OSStatus;
pub extern fn PMPaperCreateCustom(printer: PMPrinter, id: CFStringRef, name: CFStringRef, width: f64, height: f64, margins: [*c]const PMPaperMargins, paperP: [*c]PMPaper) OSStatus;
pub extern fn PMPaperGetWidth(paper: PMPaper, paperWidth: [*c]f64) OSStatus;
pub extern fn PMPaperGetHeight(paper: PMPaper, paperHeight: [*c]f64) OSStatus;
pub extern fn PMPaperGetMargins(paper: PMPaper, paperMargins: [*c]PMPaperMargins) OSStatus;
pub extern fn PMPaperGetID(paper: PMPaper, paperID: [*c]CFStringRef) OSStatus;
pub extern fn PMPaperGetPPDPaperName(paper: PMPaper, paperName: [*c]CFStringRef) OSStatus;
pub extern fn PMPaperCreateLocalizedName(paper: PMPaper, printer: PMPrinter, paperName: [*c]CFStringRef) OSStatus;
pub extern fn PMPaperGetPrinterID(paper: PMPaper, printerID: [*c]CFStringRef) OSStatus;
pub extern fn PMPaperIsCustom(paper: PMPaper) Boolean;
pub extern fn PMWorkflowCopyItems(workflowItems: [*c]CFArrayRef) OSStatus;
pub extern fn PMWorkflowSubmitPDFWithOptions(workflowItem: CFURLRef, title: CFStringRef, options: [*c]const u8, pdfFile: CFURLRef) OSStatus;
pub extern fn PMWorkflowSubmitPDFWithSettings(workflowItem: CFURLRef, settings: PMPrintSettings, pdfFile: CFURLRef) OSStatus;
pub extern fn PMPrinterPrintWithProvider(printer: PMPrinter, settings: PMPrintSettings, format: PMPageFormat, mimeType: CFStringRef, provider: CGDataProviderRef) OSStatus;
pub extern fn PMPrinterPrintWithFile(printer: PMPrinter, settings: PMPrintSettings, format: PMPageFormat, mimeType: CFStringRef, fileURL: CFURLRef) OSStatus;
pub extern fn PMPrinterWritePostScriptToURL(printer: PMPrinter, settings: PMPrintSettings, format: PMPageFormat, mimeType: CFStringRef, sourceFileURL: CFURLRef, destinationFileURL: CFURLRef) OSStatus;
pub extern fn PMPrintSettingsToOptions(settings: PMPrintSettings, options: [*c][*c]u8) OSStatus;
pub extern fn PMPrintSettingsToOptionsWithPrinterAndPageFormat(settings: PMPrintSettings, printer: PMPrinter, pageFormat: PMPageFormat, options: [*c][*c]u8) OSStatus;
pub extern fn PMPrinterSendCommand(printer: PMPrinter, commandString: CFStringRef, jobTitle: CFStringRef, options: CFDictionaryRef) OSStatus;
pub extern fn PMPrinterCopyState(printer: PMPrinter, stateDict: [*c]CFDictionaryRef) OSStatus;
pub extern fn PMCopyAvailablePPDs(domain: PMPPDDomain, ppds: [*c]CFArrayRef) OSStatus;
pub extern fn PMCopyLocalizedPPD(ppd: CFURLRef, localizedPPD: [*c]CFURLRef) OSStatus;
pub extern fn PMCopyPPDData(ppd: CFURLRef, data: [*c]CFDataRef) OSStatus;
pub extern fn PMCGImageCreateWithEPSDataProvider(epsDataProvider: CGDataProviderRef, epsPreview: CGImageRef) CGImageRef;
pub const kPMCoverPageNone: c_int = 1;
pub const kPMCoverPageBefore: c_int = 2;
pub const kPMCoverPageAfter: c_int = 3;
const enum_unnamed_1639 = c_uint;
pub const kPMPageToPaperMappingNone: c_int = 1;
pub const kPMPageToPaperMappingScaleToFit: c_int = 2;
pub const PMPageToPaperMappingType = c_uint;
pub const kPMAllocationFailure: c_int = -108;
pub const kPMInternalError: c_int = -30870;
pub const kPMInvalidIndex: c_int = -30882;
pub const kPMStringConversionFailure: c_int = -30883;
pub const kPMXMLParseError: c_int = -30884;
pub const kPMInvalidJobTemplate: c_int = -30885;
pub const kPMInvalidPrinterInfo: c_int = -30886;
pub const kPMInvalidConnection: c_int = -30887;
pub const kPMInvalidKey: c_int = -30888;
pub const kPMInvalidValue: c_int = -30889;
pub const kPMInvalidAllocator: c_int = -30890;
pub const kPMInvalidTicket: c_int = -30891;
pub const kPMInvalidItem: c_int = -30892;
pub const kPMInvalidType: c_int = -30893;
pub const kPMInvalidReply: c_int = -30894;
pub const kPMInvalidFileType: c_int = -30895;
pub const kPMInvalidObject: c_int = -30896;
pub const kPMInvalidPaper: c_int = -30897;
pub const kPMInvalidCalibrationTarget: c_int = -30898;
pub const kPMNoDefaultItem: c_int = -9500;
pub const kPMNoDefaultSettings: c_int = -9501;
pub const kPMInvalidPDEContext: c_int = -9530;
pub const kPMDontSwitchPDEError: c_int = -9531;
pub const kPMUnableToFindProcess: c_int = -9532;
pub const kPMFeatureNotInstalled: c_int = -9533;
pub const kPMInvalidPBMRef: c_int = -9540;
pub const kPMNoSelectedPrinters: c_int = -9541;
pub const kPMInvalidLookupSpec: c_int = -9542;
pub const kPMSyncRequestFailed: c_int = -9543;
pub const kPMEditRequestFailed: c_int = -9544;
pub const kPMPrBrowserNoUI: c_int = -9545;
pub const kPMTicketTypeNotFound: c_int = -9580;
pub const kPMUpdateTicketFailed: c_int = -9581;
pub const kPMValidateTicketFailed: c_int = -9582;
pub const kPMSubTicketNotFound: c_int = -9583;
pub const kPMInvalidSubTicket: c_int = -9584;
pub const kPMDeleteSubTicketFailed: c_int = -9585;
pub const kPMItemIsLocked: c_int = -9586;
pub const kPMTicketIsLocked: c_int = -9587;
pub const kPMTemplateIsLocked: c_int = -9588;
pub const kPMKeyNotFound: c_int = -9589;
pub const kPMKeyNotUnique: c_int = -9590;
pub const kPMUnknownDataType: c_int = -9591;
pub const kPMCreateMessageFailed: c_int = -9620;
pub const kPMServerCommunicationFailed: c_int = -9621;
pub const kPMKeyOrValueNotFound: c_int = -9623;
pub const kPMMessagingError: c_int = -9624;
pub const kPMServerNotFound: c_int = -9630;
pub const kPMServerAlreadyRunning: c_int = -9631;
pub const kPMServerSuspended: c_int = -9632;
pub const kPMServerAttributeRestricted: c_int = -9633;
pub const kPMFileOrDirOperationFailed: c_int = -9634;
pub const kPMUserOrGroupNotFound: c_int = -9635;
pub const kPMPermissionError: c_int = -9636;
pub const kPMUnknownMessage: c_int = -9637;
pub const kPMQueueNotFound: c_int = -9638;
pub const kPMQueueAlreadyExists: c_int = -9639;
pub const kPMQueueJobFailed: c_int = -9640;
pub const kPMJobNotFound: c_int = -9641;
pub const kPMJobBusy: c_int = -9642;
pub const kPMJobCanceled: c_int = -9643;
pub const kPMDocumentNotFound: c_int = -9644;
pub const kPMPMSymbolNotFound: c_int = -9660;
pub const kPMIOMSymbolNotFound: c_int = -9661;
pub const kPMCVMSymbolNotFound: c_int = -9662;
pub const kPMInvalidPMContext: c_int = -9663;
pub const kPMInvalidIOMContext: c_int = -9664;
pub const kPMInvalidCVMContext: c_int = -9665;
pub const kPMInvalidJobID: c_int = -9666;
pub const kPMNoPrinterJobID: c_int = -9667;
pub const kPMJobStreamOpenFailed: c_int = -9668;
pub const kPMJobStreamReadFailed: c_int = -9669;
pub const kPMJobStreamEndError: c_int = -9670;
pub const kPMJobManagerAborted: c_int = -9671;
pub const kPMJobGetTicketBadFormatError: c_int = -9672;
pub const kPMJobGetTicketReadError: c_int = -9673;
pub const kPMPluginNotFound: c_int = -9701;
pub const kPMPluginRegisterationFailed: c_int = -9702;
pub const kPMFontNotFound: c_int = -9703;
pub const kPMFontNameTooLong: c_int = -9704;
pub const kPMGeneralCGError: c_int = -9705;
pub const kPMInvalidState: c_int = -9706;
pub const kPMUnexpectedImagingError: c_int = -9707;
pub const kPMInvalidPrinterAddress: c_int = -9780;
pub const kPMOpenFailed: c_int = -9781;
pub const kPMReadFailed: c_int = -9782;
pub const kPMWriteFailed: c_int = -9783;
pub const kPMStatusFailed: c_int = -9784;
pub const kPMCloseFailed: c_int = -9785;
pub const kPMUnsupportedConnection: c_int = -9786;
pub const kPMIOAttrNotAvailable: c_int = -9787;
pub const kPMReadGotZeroData: c_int = -9788;
pub const kPMLastErrorCodeToMakeMaintenanceOfThisListEasier: c_int = -9799;
const enum_unnamed_1640 = c_int;
pub const struct_FontRec = extern struct {
    fontType: SInt16,
    firstChar: SInt16,
    lastChar: SInt16,
    widMax: SInt16,
    kernMax: SInt16,
    nDescent: SInt16,
    fRectWidth: SInt16,
    fRectHeight: SInt16,
    owTLoc: UInt16,
    ascent: SInt16,
    descent: SInt16,
    leading: SInt16,
    rowWords: SInt16,
};
pub const FontRec = struct_FontRec;
pub const FontRecPtr = [*c]FontRec;
pub const FontRecHdl = [*c]FontRecPtr;
pub const struct_FMInput = extern struct {
    family: c_short,
    size: c_short,
    face: Style,
    needBits: Boolean,
    device: c_short,
    numer: Point,
    denom: Point,
};
pub const FMInput = struct_FMInput;
pub const struct_FamRec = extern struct {
    ffFlags: SInt16,
    ffFamID: SInt16,
    ffFirstChar: SInt16,
    ffLastChar: SInt16,
    ffAscent: SInt16,
    ffDescent: SInt16,
    ffLeading: SInt16,
    ffWidMax: SInt16,
    ffWTabOff: SInt32,
    ffKernOff: SInt32,
    ffStylOff: SInt32,
    ffProperty: [9]SInt16,
    ffIntl: [2]SInt16,
    ffVersion: SInt16,
};
pub const FamRec = struct_FamRec;
pub const struct_AsscEntry = extern struct {
    fontSize: SInt16,
    fontStyle: SInt16,
    fontID: SInt16,
};
pub const AsscEntry = struct_AsscEntry;
pub const struct_FontAssoc = extern struct {
    numAssoc: SInt16,
};
pub const FontAssoc = struct_FontAssoc;
pub const struct_StyleTable = extern struct {
    fontClass: SInt16,
    offset: SInt32,
    reserved: SInt32,
    indexes: [48]u8,
};
pub const StyleTable = struct_StyleTable;
pub const struct_NameTable = extern struct {
    stringCount: SInt16,
    baseFontName: Str255,
};
pub const NameTable = struct_NameTable;
pub const struct_KernPair = extern struct {
    kernFirst: u8,
    kernSecond: u8,
    kernWidth: SInt16,
};
pub const KernPair = struct_KernPair;
pub const struct_KernEntry = extern struct {
    kernStyle: SInt16,
    kernLength: SInt16,
};
pub const KernEntry = struct_KernEntry;
pub const struct_KernTable = extern struct {
    numKerns: SInt16,
};
pub const KernTable = struct_KernTable;
pub const struct_OpaqueATSUTextLayout = opaque {};
pub const ATSUTextLayout = ?*struct_OpaqueATSUTextLayout;
pub const struct_OpaqueATSUStyle = opaque {};
pub const ATSUStyle = ?*struct_OpaqueATSUStyle;
pub const struct_OpaqueATSUFontFallbacks = opaque {};
pub const ATSUFontFallbacks = ?*struct_OpaqueATSUFontFallbacks;
pub const ATSUTextMeasurement = Fixed;
pub const ATSUFontID = FMFont;
pub const ATSUFontFeatureType = UInt16;
pub const ATSUFontFeatureSelector = UInt16;
pub const ATSUFontVariationAxis = FourCharCode;
pub const ATSUFontVariationValue = Fixed;
pub const ATSUAttributeTag = UInt32;
pub const kATSULineWidthTag: c_int = 1;
pub const kATSULineRotationTag: c_int = 2;
pub const kATSULineDirectionTag: c_int = 3;
pub const kATSULineJustificationFactorTag: c_int = 4;
pub const kATSULineFlushFactorTag: c_int = 5;
pub const kATSULineBaselineValuesTag: c_int = 6;
pub const kATSULineLayoutOptionsTag: c_int = 7;
pub const kATSULineAscentTag: c_int = 8;
pub const kATSULineDescentTag: c_int = 9;
pub const kATSULineLangRegionTag: c_int = 10;
pub const kATSULineTextLocatorTag: c_int = 11;
pub const kATSULineTruncationTag: c_int = 12;
pub const kATSULineFontFallbacksTag: c_int = 13;
pub const kATSULineDecimalTabCharacterTag: c_int = 14;
pub const kATSULayoutOperationOverrideTag: c_int = 15;
pub const kATSULineHighlightCGColorTag: c_int = 17;
pub const kATSUMaxLineTag: c_int = 18;
pub const kATSULineLanguageTag: c_int = 10;
pub const kATSUCGContextTag: c_int = 32767;
pub const kATSUQDBoldfaceTag: c_int = 256;
pub const kATSUQDItalicTag: c_int = 257;
pub const kATSUQDUnderlineTag: c_int = 258;
pub const kATSUQDCondensedTag: c_int = 259;
pub const kATSUQDExtendedTag: c_int = 260;
pub const kATSUFontTag: c_int = 261;
pub const kATSUSizeTag: c_int = 262;
pub const kATSUColorTag: c_int = 263;
pub const kATSULangRegionTag: c_int = 264;
pub const kATSUVerticalCharacterTag: c_int = 265;
pub const kATSUImposeWidthTag: c_int = 266;
pub const kATSUBeforeWithStreamShiftTag: c_int = 267;
pub const kATSUAfterWithStreamShiftTag: c_int = 268;
pub const kATSUCrossStreamShiftTag: c_int = 269;
pub const kATSUTrackingTag: c_int = 270;
pub const kATSUHangingInhibitFactorTag: c_int = 271;
pub const kATSUKerningInhibitFactorTag: c_int = 272;
pub const kATSUDecompositionFactorTag: c_int = 273;
pub const kATSUBaselineClassTag: c_int = 274;
pub const kATSUPriorityJustOverrideTag: c_int = 275;
pub const kATSUNoLigatureSplitTag: c_int = 276;
pub const kATSUNoCaretAngleTag: c_int = 277;
pub const kATSUSuppressCrossKerningTag: c_int = 278;
pub const kATSUNoOpticalAlignmentTag: c_int = 279;
pub const kATSUForceHangingTag: c_int = 280;
pub const kATSUNoSpecialJustificationTag: c_int = 281;
pub const kATSUStyleTextLocatorTag: c_int = 282;
pub const kATSUStyleRenderingOptionsTag: c_int = 283;
pub const kATSUAscentTag: c_int = 284;
pub const kATSUDescentTag: c_int = 285;
pub const kATSULeadingTag: c_int = 286;
pub const kATSUGlyphSelectorTag: c_int = 287;
pub const kATSURGBAlphaColorTag: c_int = 288;
pub const kATSUFontMatrixTag: c_int = 289;
pub const kATSUStyleUnderlineCountOptionTag: c_int = 290;
pub const kATSUStyleUnderlineColorOptionTag: c_int = 291;
pub const kATSUStyleStrikeThroughTag: c_int = 292;
pub const kATSUStyleStrikeThroughCountOptionTag: c_int = 293;
pub const kATSUStyleStrikeThroughColorOptionTag: c_int = 294;
pub const kATSUStyleDropShadowTag: c_int = 295;
pub const kATSUStyleDropShadowBlurOptionTag: c_int = 296;
pub const kATSUStyleDropShadowOffsetOptionTag: c_int = 297;
pub const kATSUStyleDropShadowColorOptionTag: c_int = 298;
pub const kATSUMaxStyleTag: c_int = 299;
pub const kATSULanguageTag: c_int = 264;
pub const kATSUMaxATSUITagValue: c_int = 65535;
const enum_unnamed_1641 = c_uint;
pub const ATSUAttributeValuePtr = ?*anyopaque;
pub const ConstATSUAttributeValuePtr = ?*const anyopaque;
pub const struct_ATSUAttributeInfo = extern struct {
    fTag: ATSUAttributeTag,
    fValueSize: ByteCount,
};
pub const ATSUAttributeInfo = struct_ATSUAttributeInfo;
pub const struct_ATSUCaret = extern struct {
    fX: Fixed,
    fY: Fixed,
    fDeltaX: Fixed,
    fDeltaY: Fixed,
};
pub const ATSUCaret = struct_ATSUCaret;
pub const ATSUCursorMovementType = UInt16;
pub const kATSUByCharacter: c_int = 0;
pub const kATSUByTypographicCluster: c_int = 1;
pub const kATSUByWord: c_int = 2;
pub const kATSUByCharacterCluster: c_int = 3;
pub const kATSUByCluster: c_int = 1;
const enum_unnamed_1642 = c_uint;
pub const ATSULineTruncation = UInt32;
pub const kATSUTruncateNone: c_int = 0;
pub const kATSUTruncateStart: c_int = 1;
pub const kATSUTruncateEnd: c_int = 2;
pub const kATSUTruncateMiddle: c_int = 3;
pub const kATSUTruncateSpecificationMask: c_int = 7;
pub const kATSUTruncFeatNoSquishing: c_int = 8;
const enum_unnamed_1643 = c_uint;
pub const ATSUStyleLineCountType = UInt16;
pub const kATSUStyleSingleLineCount: c_int = 1;
pub const kATSUStyleDoubleLineCount: c_int = 2;
const enum_unnamed_1644 = c_uint;
pub const ATSUVerticalCharacterType = UInt16;
pub const kATSUStronglyHorizontal: c_int = 0;
pub const kATSUStronglyVertical: c_int = 1;
const enum_unnamed_1645 = c_uint;
pub const ATSUStyleComparison = UInt16;
pub const kATSUStyleUnequal: c_int = 0;
pub const kATSUStyleContains: c_int = 1;
pub const kATSUStyleEquals: c_int = 2;
pub const kATSUStyleContainedBy: c_int = 3;
const enum_unnamed_1646 = c_uint;
pub const ATSUFontFallbackMethod = UInt16;
pub const kATSUDefaultFontFallbacks: c_int = 0;
pub const kATSULastResortOnlyFallback: c_int = 1;
pub const kATSUSequentialFallbacksPreferred: c_int = 2;
pub const kATSUSequentialFallbacksExclusive: c_int = 3;
const enum_unnamed_1647 = c_uint;
pub const ATSUTabType = UInt16;
pub const kATSULeftTab: c_int = 0;
pub const kATSUCenterTab: c_int = 1;
pub const kATSURightTab: c_int = 2;
pub const kATSUDecimalTab: c_int = 3;
pub const kATSUNumberTabTypes: c_int = 4;
const enum_unnamed_1648 = c_uint;
pub const struct_ATSUTab = extern struct {
    tabPosition: ATSUTextMeasurement,
    tabType: ATSUTabType,
};
pub const ATSUTab = struct_ATSUTab;
pub const struct_ATSURGBAlphaColor = extern struct {
    red: f32,
    green: f32,
    blue: f32,
    alpha: f32,
};
pub const ATSURGBAlphaColor = struct_ATSURGBAlphaColor;
pub const GlyphCollection = UInt16;
pub const kGlyphCollectionGID: c_int = 0;
pub const kGlyphCollectionAdobeCNS1: c_int = 1;
pub const kGlyphCollectionAdobeGB1: c_int = 2;
pub const kGlyphCollectionAdobeJapan1: c_int = 3;
pub const kGlyphCollectionAdobeJapan2: c_int = 4;
pub const kGlyphCollectionAdobeKorea1: c_int = 5;
pub const kGlyphCollectionUnspecified: c_int = 255;
const enum_unnamed_1649 = c_uint;
pub const struct_ATSUGlyphSelector = extern struct {
    collection: GlyphCollection,
    glyphID: GlyphID,
};
pub const ATSUGlyphSelector = struct_ATSUGlyphSelector;
pub const struct_ATSUGlyphInfo = extern struct {
    glyphID: GlyphID,
    reserved: UInt16,
    layoutFlags: UInt32,
    charIndex: UniCharArrayOffset,
    style: ATSUStyle,
    deltaY: Float32,
    idealX: Float32,
    screenX: SInt16,
    caretX: SInt16,
};
pub const ATSUGlyphInfo = struct_ATSUGlyphInfo;
pub const struct_ATSUGlyphInfoArray = extern struct {
    layout: ATSUTextLayout,
    numGlyphs: ItemCount,
    glyphs: [1]ATSUGlyphInfo,
};
pub const ATSUGlyphInfoArray = struct_ATSUGlyphInfoArray;
pub const ATSUHighlightMethod = UInt32;
pub const kInvertHighlighting: c_int = 0;
pub const kRedrawHighlighting: c_int = 1;
const enum_unnamed_1650 = c_uint;
pub const ATSUBackgroundDataType = UInt32;
pub const kATSUBackgroundColor: c_int = 0;
pub const kATSUBackgroundCallback: c_int = 1;
const enum_unnamed_1651 = c_uint;
pub const ATSUBackgroundColor = ATSURGBAlphaColor;
pub const RedrawBackgroundProcPtr = ?*const fn (ATSUTextLayout, UniCharArrayOffset, UniCharCount, [*c]ATSTrapezoid, ItemCount) callconv(.C) Boolean;
pub const RedrawBackgroundUPP = RedrawBackgroundProcPtr;
pub const union_ATSUBackgroundData = extern union {
    backgroundColor: ATSUBackgroundColor,
    backgroundUPP: RedrawBackgroundUPP,
};
pub const ATSUBackgroundData = union_ATSUBackgroundData;
pub const struct_ATSUUnhighlightData = extern struct {
    dataType: ATSUBackgroundDataType,
    unhighlightData: ATSUBackgroundData,
};
pub const ATSUUnhighlightData = struct_ATSUUnhighlightData;
pub const kATSULeftToRightBaseDirection: c_int = 0;
pub const kATSURightToLeftBaseDirection: c_int = 1;
const enum_unnamed_1652 = c_uint;
pub const kATSUInvalidFontID: c_int = 0;
const enum_unnamed_1653 = c_uint;
pub const kATSUUseLineControlWidth: c_int = 2147483647;
const enum_unnamed_1654 = c_uint;
pub const kATSUNoSelector: c_int = 65535;
const enum_unnamed_1655 = c_uint;
pub const kATSUFromTextBeginning: c_uint = 4294967295;
pub const kATSUToTextEnd: c_uint = 4294967295;
pub const kATSUFromPreviousLayout: c_uint = 4294967294;
pub const kATSUFromFollowingLayout: c_uint = 4294967293;
const enum_unnamed_1656 = c_uint;
pub const kATSUUseGrafPortPenLoc: c_uint = 4294967295;
pub const kATSUClearAll: c_uint = 4294967295;
const enum_unnamed_1657 = c_uint;
pub const ATSQuadraticNewPathProcPtr = ?*const fn (?*anyopaque) callconv(.C) OSStatus;
pub const ATSQuadraticNewPathUPP = ATSQuadraticNewPathProcPtr;
pub const ATSQuadraticLineProcPtr = ?*const fn ([*c]const Float32Point, [*c]const Float32Point, ?*anyopaque) callconv(.C) OSStatus;
pub const ATSQuadraticLineUPP = ATSQuadraticLineProcPtr;
pub const ATSQuadraticCurveProcPtr = ?*const fn ([*c]const Float32Point, [*c]const Float32Point, [*c]const Float32Point, ?*anyopaque) callconv(.C) OSStatus;
pub const ATSQuadraticCurveUPP = ATSQuadraticCurveProcPtr;
pub const ATSQuadraticClosePathProcPtr = ?*const fn (?*anyopaque) callconv(.C) OSStatus;
pub const ATSQuadraticClosePathUPP = ATSQuadraticClosePathProcPtr;
pub const ATSCubicMoveToProcPtr = ?*const fn ([*c]const Float32Point, ?*anyopaque) callconv(.C) OSStatus;
pub const ATSCubicMoveToUPP = ATSCubicMoveToProcPtr;
pub const ATSCubicLineToProcPtr = ?*const fn ([*c]const Float32Point, ?*anyopaque) callconv(.C) OSStatus;
pub const ATSCubicLineToUPP = ATSCubicLineToProcPtr;
pub const ATSCubicCurveToProcPtr = ?*const fn ([*c]const Float32Point, [*c]const Float32Point, [*c]const Float32Point, ?*anyopaque) callconv(.C) OSStatus;
pub const ATSCubicCurveToUPP = ATSCubicCurveToProcPtr;
pub const ATSCubicClosePathProcPtr = ?*const fn (?*anyopaque) callconv(.C) OSStatus;
pub const ATSCubicClosePathUPP = ATSCubicClosePathProcPtr;
pub const ATSUFlattenedDataStreamFormat = UInt32;
pub const kATSUDataStreamUnicodeStyledText: c_int = 1970500716;
const enum_unnamed_1658 = c_uint;
pub const ATSUFlattenStyleRunOptions = UInt32;
pub const kATSUFlattenOptionNoOptionsMask: c_int = 0;
const enum_unnamed_1659 = c_uint;
pub const ATSUUnFlattenStyleRunOptions = UInt32;
pub const kATSUUnFlattenOptionNoOptionsMask: c_int = 0;
const enum_unnamed_1660 = c_uint;
pub const struct_ATSUStyleRunInfo = extern struct {
    runLength: UInt32,
    styleObjectIndex: UInt32,
};
pub const ATSUStyleRunInfo = struct_ATSUStyleRunInfo;
pub const kATSFlatDataUstlVersion0: c_int = 0;
pub const kATSFlatDataUstlVersion1: c_int = 1;
pub const kATSFlatDataUstlVersion2: c_int = 2;
pub const kATSFlatDataUstlCurrentVersion: c_int = 2;
const enum_unnamed_1661 = c_uint;
pub const struct_ATSFlatDataMainHeaderBlock = extern struct {
    version: UInt32,
    sizeOfDataBlock: UInt32,
    offsetToTextLayouts: UInt32,
    offsetToStyleRuns: UInt32,
    offsetToStyleList: UInt32,
};
pub const ATSFlatDataMainHeaderBlock = struct_ATSFlatDataMainHeaderBlock;
pub const struct_ATSFlatDataTextLayoutDataHeader = extern struct {
    sizeOfLayoutData: UInt32,
    textLayoutLength: UInt32,
    offsetToLayoutControls: UInt32,
    offsetToLineInfo: UInt32,
};
pub const ATSFlatDataTextLayoutDataHeader = struct_ATSFlatDataTextLayoutDataHeader;
pub const struct_ATSFlatDataTextLayoutHeader = extern struct {
    numFlattenedTextLayouts: UInt32,
    flattenedTextLayouts: [1]ATSFlatDataTextLayoutDataHeader,
};
pub const ATSFlatDataTextLayoutHeader = struct_ATSFlatDataTextLayoutHeader;
pub const struct_ATSFlatDataLayoutControlsDataHeader = extern struct {
    numberOfLayoutControls: UInt32,
    controlArray: [1]ATSUAttributeInfo,
};
pub const ATSFlatDataLayoutControlsDataHeader = struct_ATSFlatDataLayoutControlsDataHeader;
pub const struct_ATSFlatDataLineInfoData = extern struct {
    lineLength: UInt32,
    numberOfLineControls: UInt32,
};
pub const ATSFlatDataLineInfoData = struct_ATSFlatDataLineInfoData;
pub const struct_ATSFlatDataLineInfoHeader = extern struct {
    numberOfLines: UInt32,
    lineInfoArray: [1]ATSFlatDataLineInfoData,
};
pub const ATSFlatDataLineInfoHeader = struct_ATSFlatDataLineInfoHeader;
pub const struct_ATSFlatDataStyleRunDataHeader = extern struct {
    numberOfStyleRuns: UInt32,
    styleRunArray: [1]ATSUStyleRunInfo,
};
pub const ATSFlatDataStyleRunDataHeader = struct_ATSFlatDataStyleRunDataHeader;
pub const struct_ATSFlatDataStyleListStyleDataHeader = extern struct {
    sizeOfStyleInfo: UInt32,
    numberOfSetAttributes: UInt32,
    numberOfSetFeatures: UInt32,
    numberOfSetVariations: UInt32,
};
pub const ATSFlatDataStyleListStyleDataHeader = struct_ATSFlatDataStyleListStyleDataHeader;
pub const struct_ATSFlatDataStyleListHeader = extern struct {
    numberOfStyles: UInt32,
    styleDataArray: [1]ATSFlatDataStyleListStyleDataHeader,
};
pub const ATSFlatDataStyleListHeader = struct_ATSFlatDataStyleListHeader;
pub const struct_ATSFlatDataStyleListFeatureData = extern struct {
    theFeatureType: ATSUFontFeatureType,
    theFeatureSelector: ATSUFontFeatureSelector,
};
pub const ATSFlatDataStyleListFeatureData = struct_ATSFlatDataStyleListFeatureData;
pub const struct_ATSFlatDataStyleListVariationData = extern struct {
    theVariationAxis: ATSUFontVariationAxis,
    theVariationValue: ATSUFontVariationValue,
};
pub const ATSFlatDataStyleListVariationData = struct_ATSFlatDataStyleListVariationData;
pub const ATSFlatDataFontSpeciferType = UInt32;
pub const kATSFlattenedFontSpecifierRawNameData: c_int = 1851878756;
const enum_unnamed_1662 = c_uint;
pub const struct_ATSFlatDataFontNameDataHeader = extern struct {
    nameSpecifierType: ATSFlatDataFontSpeciferType,
    nameSpecifierSize: UInt32,
};
pub const ATSFlatDataFontNameDataHeader = struct_ATSFlatDataFontNameDataHeader;
pub const struct_ATSFlatDataFontSpecRawNameData = extern struct {
    fontNameType: FontNameCode,
    fontNamePlatform: FontPlatformCode,
    fontNameScript: FontScriptCode,
    fontNameLanguage: FontLanguageCode,
    fontNameLength: UInt32,
};
pub const ATSFlatDataFontSpecRawNameData = struct_ATSFlatDataFontSpecRawNameData;
pub const struct_ATSFlatDataFontSpecRawNameDataHeader = extern struct {
    numberOfFlattenedNames: UInt32,
    nameDataArray: [1]ATSFlatDataFontSpecRawNameData,
};
pub const ATSFlatDataFontSpecRawNameDataHeader = struct_ATSFlatDataFontSpecRawNameDataHeader;
pub const ATSUDirectDataSelector = UInt32;
pub const kATSUDirectDataAdvanceDeltaFixedArray: c_int = 0;
pub const kATSUDirectDataBaselineDeltaFixedArray: c_int = 1;
pub const kATSUDirectDataDeviceDeltaSInt16Array: c_int = 2;
pub const kATSUDirectDataStyleIndexUInt16Array: c_int = 3;
pub const kATSUDirectDataStyleSettingATSUStyleSettingRefArray: c_int = 4;
pub const kATSUDirectDataLayoutRecordATSLayoutRecordVersion1: c_int = 100;
pub const kATSUDirectDataLayoutRecordATSLayoutRecordCurrent: c_int = 100;
const enum_unnamed_1663 = c_uint;
pub const struct_LLCStyleInfo = opaque {};
pub const ATSUStyleSettingRef = ?*struct_LLCStyleInfo;
pub const kTextToSpeechSynthType: c_int = 1953788771;
pub const kTextToSpeechVoiceType: c_int = 1953789540;
pub const kTextToSpeechVoiceFileType: c_int = 1953789542;
pub const kTextToSpeechVoiceBundleType: c_int = 1953789538;
const enum_unnamed_1664 = c_uint;
pub const kNoEndingProsody: c_int = 1;
pub const kNoSpeechInterrupt: c_int = 2;
pub const kPreflightThenPause: c_int = 4;
const enum_unnamed_1665 = c_uint;
pub const kImmediate: c_int = 0;
pub const kEndOfWord: c_int = 1;
pub const kEndOfSentence: c_int = 2;
const enum_unnamed_1666 = c_uint;
pub const soStatus: c_int = 1937006964;
pub const soErrors: c_int = 1701999215;
pub const soInputMode: c_int = 1768845428;
pub const soCharacterMode: c_int = 1667785074;
pub const soNumberMode: c_int = 1852662386;
pub const soRate: c_int = 1918989413;
pub const soPitchBase: c_int = 1885495667;
pub const soPitchMod: c_int = 1886220132;
pub const soVolume: c_int = 1987013741;
pub const soSynthType: c_int = 1986359923;
pub const soRecentSync: c_int = 1937337955;
pub const soPhonemeSymbols: c_int = 1885893497;
pub const soCurrentVoice: c_int = 1668706168;
pub const soCommandDelimiter: c_int = 1684826477;
pub const soReset: c_int = 1920165236;
pub const soCurrentA5: c_int = 1836663093;
pub const soRefCon: c_int = 1919247971;
pub const soTextDoneCallBack: c_int = 1952736098;
pub const soSpeechDoneCallBack: c_int = 1935958882;
pub const soSyncCallBack: c_int = 1937335138;
pub const soErrorCallBack: c_int = 1701995362;
pub const soPhonemeCallBack: c_int = 1885889378;
pub const soWordCallBack: c_int = 2003067746;
pub const soSynthExtension: c_int = 2020896356;
pub const soSoundOutput: c_int = 1936614511;
pub const soOutputToFileWithCFURL: c_int = 1869635942;
pub const soOutputToExtAudioFile: c_int = 1869635960;
pub const soOutputToAudioDevice: c_int = 1869635940;
pub const soPhonemeOptions: c_int = 1886351476;
const enum_unnamed_1667 = c_uint;
pub const modeText: c_int = 1413830740;
pub const modePhonemes: c_int = 1346916174;
pub const modeTune: c_int = 1414876741;
pub const modeNormal: c_int = 1313821261;
pub const modeLiteral: c_int = 1280594508;
const enum_unnamed_1668 = c_uint;
pub const soVoiceDescription: c_int = 1768842863;
pub const soVoiceFile: c_int = 1718773094;
const enum_unnamed_1669 = c_uint;
pub const kSpeechGenerateTune: c_int = 1;
pub const kSpeechRelativePitch: c_int = 2;
pub const kSpeechRelativeDuration: c_int = 4;
pub const kSpeechShowSyllables: c_int = 8;
const enum_unnamed_1670 = c_uint;
pub const kAudioUnitSubType_SpeechSynthesis: c_int = 1953788784;
pub const kAudioUnitProperty_Voice: c_int = 3330;
pub const kAudioUnitProperty_SpeechChannel: c_int = 3331;
const enum_unnamed_1671 = c_uint;
pub const struct_SpeechChannelRecord = extern struct {
    data: [1]c_long,
};
pub const SpeechChannelRecord = struct_SpeechChannelRecord;
pub const SpeechChannel = [*c]SpeechChannelRecord;
pub const struct_VoiceSpec = extern struct {
    creator: OSType,
    id: OSType,
};
pub const VoiceSpec = struct_VoiceSpec;
pub const VoiceSpecPtr = [*c]VoiceSpec;
pub const kNeuter: c_int = 0;
pub const kMale: c_int = 1;
pub const kFemale: c_int = 2;
const enum_unnamed_1672 = c_uint;
pub const struct_VoiceDescription = extern struct {
    length: SInt32,
    voice: VoiceSpec,
    version: SInt32,
    name: Str63,
    comment: Str255,
    gender: SInt16,
    age: SInt16,
    script: SInt16,
    language: SInt16,
    region: SInt16,
    reserved: [4]SInt32,
};
pub const VoiceDescription = struct_VoiceDescription;
pub const struct_VoiceFileInfo = extern struct {
    fileSpec: FSSpec,
    resID: SInt16,
};
pub const VoiceFileInfo = struct_VoiceFileInfo;
pub const struct_SpeechStatusInfo = extern struct {
    outputBusy: Boolean,
    outputPaused: Boolean,
    inputBytesLeft: c_long,
    phonemeCode: SInt16,
};
pub const SpeechStatusInfo = struct_SpeechStatusInfo;
pub const struct_SpeechErrorInfo = extern struct {
    count: SInt16,
    oldest: OSErr,
    oldPos: c_long,
    newest: OSErr,
    newPos: c_long,
};
pub const SpeechErrorInfo = struct_SpeechErrorInfo;
pub const struct_SpeechVersionInfo = extern struct {
    synthType: OSType,
    synthSubType: OSType,
    synthManufacturer: OSType,
    synthFlags: SInt32,
    synthVersion: NumVersion,
};
pub const SpeechVersionInfo = struct_SpeechVersionInfo;
pub const struct_PhonemeInfo = extern struct {
    opcode: SInt16,
    phStr: Str15,
    exampleStr: Str31,
    hiliteStart: SInt16,
    hiliteEnd: SInt16,
};
pub const PhonemeInfo = struct_PhonemeInfo;
pub const struct_PhonemeDescriptor = extern struct {
    phonemeCount: SInt16,
    thePhonemes: [1]PhonemeInfo,
};
pub const PhonemeDescriptor = struct_PhonemeDescriptor;
pub const struct_SpeechXtndData = extern struct {
    synthCreator: OSType,
    synthData: [2]Byte,
};
pub const SpeechXtndData = struct_SpeechXtndData;
pub const struct_DelimiterInfo = extern struct {
    startDelimiter: [2]Byte,
    endDelimiter: [2]Byte,
};
pub const DelimiterInfo = struct_DelimiterInfo;
pub extern const kSpeechStatusProperty: CFStringRef;
pub extern const kSpeechErrorsProperty: CFStringRef;
pub extern const kSpeechInputModeProperty: CFStringRef;
pub extern const kSpeechCharacterModeProperty: CFStringRef;
pub extern const kSpeechNumberModeProperty: CFStringRef;
pub extern const kSpeechRateProperty: CFStringRef;
pub extern const kSpeechPitchBaseProperty: CFStringRef;
pub extern const kSpeechPitchModProperty: CFStringRef;
pub extern const kSpeechVolumeProperty: CFStringRef;
pub extern const kSpeechSynthesizerInfoProperty: CFStringRef;
pub extern const kSpeechRecentSyncProperty: CFStringRef;
pub extern const kSpeechPhonemeSymbolsProperty: CFStringRef;
pub extern const kSpeechCurrentVoiceProperty: CFStringRef;
pub extern const kSpeechCommandDelimiterProperty: CFStringRef;
pub extern const kSpeechResetProperty: CFStringRef;
pub extern const kSpeechOutputToFileURLProperty: CFStringRef;
pub extern const kSpeechOutputToExtAudioFileProperty: CFStringRef;
pub extern const kSpeechOutputToAudioDeviceProperty: CFStringRef;
pub extern const kSpeechOutputToFileDescriptorProperty: CFStringRef;
pub extern const kSpeechAudioOutputFormatProperty: CFStringRef;
pub extern const kSpeechOutputChannelMapProperty: CFStringRef;
pub extern const kSpeechRefConProperty: CFStringRef;
pub extern const kSpeechTextDoneCallBack: CFStringRef;
pub extern const kSpeechSpeechDoneCallBack: CFStringRef;
pub extern const kSpeechSyncCallBack: CFStringRef;
pub extern const kSpeechPhonemeCallBack: CFStringRef;
pub extern const kSpeechErrorCFCallBack: CFStringRef;
pub extern const kSpeechWordCFCallBack: CFStringRef;
pub extern const kSpeechPhonemeOptionsProperty: CFStringRef;
pub extern const kSpeechAudioUnitProperty: CFStringRef;
pub extern const kSpeechAudioGraphProperty: CFStringRef;
pub extern const kSpeechSynthExtensionProperty: CFStringRef;
pub extern const kSpeechModeText: CFStringRef;
pub extern const kSpeechModePhoneme: CFStringRef;
pub extern const kSpeechModeTune: CFStringRef;
pub extern const kSpeechModeNormal: CFStringRef;
pub extern const kSpeechModeLiteral: CFStringRef;
pub extern const kSpeechNoEndingProsody: CFStringRef;
pub extern const kSpeechNoSpeechInterrupt: CFStringRef;
pub extern const kSpeechPreflightThenPause: CFStringRef;
pub extern const kSpeechStatusOutputBusy: CFStringRef;
pub extern const kSpeechStatusOutputPaused: CFStringRef;
pub extern const kSpeechStatusNumberOfCharactersLeft: CFStringRef;
pub extern const kSpeechStatusPhonemeCode: CFStringRef;
pub extern const kSpeechErrorCount: CFStringRef;
pub extern const kSpeechErrorOldest: CFStringRef;
pub extern const kSpeechErrorOldestCharacterOffset: CFStringRef;
pub extern const kSpeechErrorNewest: CFStringRef;
pub extern const kSpeechErrorNewestCharacterOffset: CFStringRef;
pub extern const kSpeechSynthesizerInfoIdentifier: CFStringRef;
pub extern const kSpeechSynthesizerInfoManufacturer: CFStringRef;
pub extern const kSpeechSynthesizerInfoVersion: CFStringRef;
pub extern const kSpeechPhonemeInfoOpcode: CFStringRef;
pub extern const kSpeechPhonemeInfoSymbol: CFStringRef;
pub extern const kSpeechPhonemeInfoExample: CFStringRef;
pub extern const kSpeechPhonemeInfoHiliteStart: CFStringRef;
pub extern const kSpeechPhonemeInfoHiliteEnd: CFStringRef;
pub extern const kSpeechVoiceCreator: CFStringRef;
pub extern const kSpeechVoiceID: CFStringRef;
pub extern const kSpeechCommandPrefix: CFStringRef;
pub extern const kSpeechCommandSuffix: CFStringRef;
pub extern const kSpeechDictionaryLocaleIdentifier: CFStringRef;
pub extern const kSpeechDictionaryModificationDate: CFStringRef;
pub extern const kSpeechDictionaryPronunciations: CFStringRef;
pub extern const kSpeechDictionaryAbbreviations: CFStringRef;
pub extern const kSpeechDictionaryEntrySpelling: CFStringRef;
pub extern const kSpeechDictionaryEntryPhonemes: CFStringRef;
pub extern const kSpeechErrorCallbackSpokenString: CFStringRef;
pub extern const kSpeechErrorCallbackCharacterOffset: CFStringRef;
pub const SpeechTextDoneProcPtr = ?*const fn (SpeechChannel, SRefCon, [*c]?*const anyopaque, [*c]c_ulong, [*c]SInt32) callconv(.C) void;
pub const SpeechDoneProcPtr = ?*const fn (SpeechChannel, SRefCon) callconv(.C) void;
pub const SpeechSyncProcPtr = ?*const fn (SpeechChannel, SRefCon, OSType) callconv(.C) void;
pub const SpeechErrorProcPtr = ?*const fn (SpeechChannel, SRefCon, OSErr, c_long) callconv(.C) void;
pub const SpeechPhonemeProcPtr = ?*const fn (SpeechChannel, SRefCon, SInt16) callconv(.C) void;
pub const SpeechWordProcPtr = ?*const fn (SpeechChannel, SRefCon, c_ulong, UInt16) callconv(.C) void;
pub const SpeechTextDoneUPP = SpeechTextDoneProcPtr;
pub const SpeechDoneUPP = SpeechDoneProcPtr;
pub const SpeechSyncUPP = SpeechSyncProcPtr;
pub const SpeechErrorUPP = SpeechErrorProcPtr;
pub const SpeechPhonemeUPP = SpeechPhonemeProcPtr;
pub const SpeechWordUPP = SpeechWordProcPtr;
pub extern fn NewSpeechTextDoneUPP(userRoutine: SpeechTextDoneProcPtr) SpeechTextDoneUPP;
pub extern fn NewSpeechDoneUPP(userRoutine: SpeechDoneProcPtr) SpeechDoneUPP;
pub extern fn NewSpeechSyncUPP(userRoutine: SpeechSyncProcPtr) SpeechSyncUPP;
pub extern fn NewSpeechErrorUPP(userRoutine: SpeechErrorProcPtr) SpeechErrorUPP;
pub extern fn NewSpeechPhonemeUPP(userRoutine: SpeechPhonemeProcPtr) SpeechPhonemeUPP;
pub extern fn NewSpeechWordUPP(userRoutine: SpeechWordProcPtr) SpeechWordUPP;
pub extern fn DisposeSpeechTextDoneUPP(userUPP: SpeechTextDoneUPP) void;
pub extern fn DisposeSpeechDoneUPP(userUPP: SpeechDoneUPP) void;
pub extern fn DisposeSpeechSyncUPP(userUPP: SpeechSyncUPP) void;
pub extern fn DisposeSpeechErrorUPP(userUPP: SpeechErrorUPP) void;
pub extern fn DisposeSpeechPhonemeUPP(userUPP: SpeechPhonemeUPP) void;
pub extern fn DisposeSpeechWordUPP(userUPP: SpeechWordUPP) void;
pub extern fn InvokeSpeechTextDoneUPP(chan: SpeechChannel, refCon: SRefCon, nextBuf: [*c]?*const anyopaque, byteLen: [*c]c_ulong, controlFlags: [*c]SInt32, userUPP: SpeechTextDoneUPP) void;
pub extern fn InvokeSpeechDoneUPP(chan: SpeechChannel, refCon: SRefCon, userUPP: SpeechDoneUPP) void;
pub extern fn InvokeSpeechSyncUPP(chan: SpeechChannel, refCon: SRefCon, syncMessage: OSType, userUPP: SpeechSyncUPP) void;
pub extern fn InvokeSpeechErrorUPP(chan: SpeechChannel, refCon: SRefCon, theError: OSErr, bytePos: c_long, userUPP: SpeechErrorUPP) void;
pub extern fn InvokeSpeechPhonemeUPP(chan: SpeechChannel, refCon: SRefCon, phonemeOpcode: SInt16, userUPP: SpeechPhonemeUPP) void;
pub extern fn InvokeSpeechWordUPP(chan: SpeechChannel, refCon: SRefCon, wordPos: c_ulong, wordLen: UInt16, userUPP: SpeechWordUPP) void;
pub const SpeechErrorCFProcPtr = ?*const fn (SpeechChannel, SRefCon, CFErrorRef) callconv(.C) void;
pub const SpeechWordCFProcPtr = ?*const fn (SpeechChannel, SRefCon, CFStringRef, CFRange) callconv(.C) void;
pub extern fn SpeechManagerVersion() NumVersion;
pub extern fn MakeVoiceSpec(creator: OSType, id: OSType, voice: [*c]VoiceSpec) OSErr;
pub extern fn CountVoices(numVoices: [*c]SInt16) OSErr;
pub extern fn GetIndVoice(index: SInt16, voice: [*c]VoiceSpec) OSErr;
pub extern fn GetVoiceDescription(voice: [*c]const VoiceSpec, info: [*c]VoiceDescription, infoLength: c_long) OSErr;
pub extern fn GetVoiceInfo(voice: [*c]const VoiceSpec, selector: OSType, voiceInfo: ?*anyopaque) OSErr;
pub extern fn NewSpeechChannel(voice: [*c]VoiceSpec, chan: [*c]SpeechChannel) OSErr;
pub extern fn DisposeSpeechChannel(chan: SpeechChannel) OSErr;
pub extern fn SpeakString(textToBeSpoken: ConstStr255Param) OSErr;
pub extern fn SpeakText(chan: SpeechChannel, textBuf: ?*const anyopaque, textBytes: c_ulong) OSErr;
pub extern fn SpeakBuffer(chan: SpeechChannel, textBuf: ?*const anyopaque, textBytes: c_ulong, controlFlags: SInt32) OSErr;
pub extern fn StopSpeech(chan: SpeechChannel) OSErr;
pub extern fn StopSpeechAt(chan: SpeechChannel, whereToStop: SInt32) OSErr;
pub extern fn PauseSpeechAt(chan: SpeechChannel, whereToPause: SInt32) OSErr;
pub extern fn ContinueSpeech(chan: SpeechChannel) OSErr;
pub extern fn SpeechBusy() SInt16;
pub extern fn SpeechBusySystemWide() SInt16;
pub extern fn SetSpeechRate(chan: SpeechChannel, rate: Fixed) OSErr;
pub extern fn GetSpeechRate(chan: SpeechChannel, rate: [*c]Fixed) OSErr;
pub extern fn SetSpeechPitch(chan: SpeechChannel, pitch: Fixed) OSErr;
pub extern fn GetSpeechPitch(chan: SpeechChannel, pitch: [*c]Fixed) OSErr;
pub extern fn SetSpeechInfo(chan: SpeechChannel, selector: OSType, speechInfo: ?*const anyopaque) OSErr;
pub extern fn GetSpeechInfo(chan: SpeechChannel, selector: OSType, speechInfo: ?*anyopaque) OSErr;
pub extern fn TextToPhonemes(chan: SpeechChannel, textBuf: ?*const anyopaque, textBytes: c_ulong, phonemeBuf: Handle, phonemeBytes: [*c]c_long) OSErr;
pub extern fn UseDictionary(chan: SpeechChannel, dictionary: Handle) OSErr;
pub extern fn SpeakCFString(chan: SpeechChannel, aString: CFStringRef, options: CFDictionaryRef) OSErr;
pub extern fn UseSpeechDictionary(chan: SpeechChannel, speechDictionary: CFDictionaryRef) OSErr;
pub extern fn CopyPhonemesFromText(chan: SpeechChannel, text: CFStringRef, phonemes: [*c]CFStringRef) OSErr;
pub extern fn CopySpeechProperty(chan: SpeechChannel, property: CFStringRef, object: [*c]CFTypeRef) OSErr;
pub extern fn SetSpeechProperty(chan: SpeechChannel, property: CFStringRef, object: CFTypeRef) OSErr;
pub extern fn SpeechSynthesisRegisterModuleURL(url: CFURLRef) OSErr;
pub extern fn SpeechSynthesisUnregisterModuleURL(url: CFURLRef) OSErr;
pub const struct_objc_class = opaque {};
pub const Class = ?*struct_objc_class;
pub const struct_objc_object = extern struct {
    isa: Class,
};
pub const id = [*c]struct_objc_object;
pub const struct_objc_selector = opaque {};
pub const SEL = ?*struct_objc_selector;
pub const IMP = ?*const fn () callconv(.C) void;
pub const BOOL = bool;
pub extern fn sel_getName(sel: SEL) [*c]const u8;
pub extern fn sel_registerName(str: [*c]const u8) SEL;
pub extern fn object_getClassName(obj: id) [*c]const u8;
pub extern fn object_getIndexedIvars(obj: id) ?*anyopaque;
pub extern fn sel_isMapped(sel: SEL) BOOL;
pub extern fn sel_getUid(str: [*c]const u8) SEL;
pub const objc_objectptr_t = ?*const anyopaque;
pub extern fn objc_retainedObject(obj: objc_objectptr_t) id;
pub extern fn objc_unretainedObject(obj: objc_objectptr_t) id;
pub extern fn objc_unretainedPointer(obj: id) objc_objectptr_t;
pub const arith_t = c_long;
pub const uarith_t = c_ulong;
pub const STR = [*c]u8;
pub extern fn glfwGetCocoaMonitor(monitor: ?*GLFWmonitor) CGDirectDisplayID;
pub extern fn glfwGetCocoaWindow(window: ?*GLFWwindow) id;
pub const __block = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):27:9
pub const __INTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `L`"); // (no file):82:9
pub const __UINTMAX_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `UL`"); // (no file):88:9
pub const __FLT16_DENORM_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):111:9
pub const __FLT16_EPSILON__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):115:9
pub const __FLT16_MAX__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):121:9
pub const __FLT16_MIN__ = @compileError("unable to translate C expr: unexpected token 'IntegerLiteral'"); // (no file):124:9
pub const __INT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `LL`"); // (no file):184:9
pub const __UINT32_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `U`"); // (no file):206:9
pub const __UINT64_C_SUFFIX__ = @compileError("unable to translate macro: undefined identifier `ULL`"); // (no file):214:9
pub const __USER_LABEL_PREFIX__ = @compileError("unable to translate macro: undefined identifier `_`"); // (no file):305:9
pub const __nonnull = @compileError("unable to translate macro: undefined identifier `_Nonnull`"); // (no file):337:9
pub const __null_unspecified = @compileError("unable to translate macro: undefined identifier `_Null_unspecified`"); // (no file):338:9
pub const __nullable = @compileError("unable to translate macro: undefined identifier `_Nullable`"); // (no file):339:9
pub const __weak = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // (no file):392:9
pub const offsetof = @compileError("unable to translate macro: undefined identifier `__builtin_offsetof`"); // /Users/slimsag/Desktop/zig/build/stage1/lib/zig/include/stddef.h:104:9
pub const __CONCAT = @compileError("unable to translate C expr: unexpected token '##'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:113:9
pub const __STRING = @compileError("unable to translate C expr: unexpected token '#'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:114:9
pub const __const = @compileError("unable to translate C expr: unexpected token 'const'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:116:9
pub const __volatile = @compileError("unable to translate C expr: unexpected token 'volatile'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:118:9
pub const __dead2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:162:9
pub const __pure2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:163:9
pub const __stateful_pure = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:164:9
pub const __unused = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:169:9
pub const __used = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:174:9
pub const __cold = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:180:9
pub const __exported = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:190:9
pub const __exported_push = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:191:9
pub const __exported_pop = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:192:9
pub const __deprecated = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:204:9
pub const __deprecated_msg = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:208:10
pub const __kpi_deprecated = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:219:9
pub const __unavailable = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:225:9
pub const __restrict = @compileError("unable to translate C expr: unexpected token 'restrict'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:247:9
pub const __disable_tail_calls = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:280:9
pub const __not_tail_called = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:292:9
pub const __result_use_check = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:303:9
pub const __swift_unavailable = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:313:9
pub const __header_inline = @compileError("unable to translate C expr: unexpected token 'inline'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:347:10
pub const __header_always_inline = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:360:10
pub const __unreachable_ok_push = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:373:10
pub const __unreachable_ok_pop = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:376:10
pub const __printflike = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:397:9
pub const __printf0like = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:399:9
pub const __scanflike = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:401:9
pub const __IDSTRING = @compileError("unable to translate C expr: unexpected token 'static'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:404:9
pub const __COPYRIGHT = @compileError("unable to translate macro: undefined identifier `copyright`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:407:9
pub const __RCSID = @compileError("unable to translate macro: undefined identifier `rcsid`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:411:9
pub const __SCCSID = @compileError("unable to translate macro: undefined identifier `sccsid`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:415:9
pub const __PROJECT_VERSION = @compileError("unable to translate macro: undefined identifier `project_version`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:419:9
pub const __FBSDID = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:424:9
pub const __DECONST = @compileError("unable to translate C expr: unexpected token 'const'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:428:9
pub const __DEVOLATILE = @compileError("unable to translate C expr: unexpected token 'volatile'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:432:9
pub const __DEQUALIFY = @compileError("unable to translate C expr: unexpected token 'const'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:436:9
pub const __alloc_size = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:454:9
pub const __DARWIN_ALIAS = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:639:9
pub const __DARWIN_ALIAS_C = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:640:9
pub const __DARWIN_ALIAS_I = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:641:9
pub const __DARWIN_NOCANCEL = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:642:9
pub const __DARWIN_INODE64 = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:643:9
pub const __DARWIN_1050 = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:645:9
pub const __DARWIN_1050ALIAS = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:646:9
pub const __DARWIN_1050ALIAS_C = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:647:9
pub const __DARWIN_1050ALIAS_I = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:648:9
pub const __DARWIN_1050INODE64 = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:649:9
pub const __DARWIN_EXTSN = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:651:9
pub const __DARWIN_EXTSN_C = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:652:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:35:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:41:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_2_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:47:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:53:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:59:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_3_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:65:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:71:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:77:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:83:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_4_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:89:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_5_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:95:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_5_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:101:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_6_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:107:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_6_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:113:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_7_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:119:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_7_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:125:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:131:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:137:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:143:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:149:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_8_4 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:155:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:161:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:167:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:173:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_9_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:179:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:185:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:191:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:197:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_10_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:203:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:209:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:215:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:221:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:227:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_11_4 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:233:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:239:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:245:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:251:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:257:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_12_4 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:263:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:269:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:275:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:281:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:287:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_4 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:293:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_5 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:299:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_6 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:305:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_13_7 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:311:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:317:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:323:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_2 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:329:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_3 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:335:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_14_5 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:341:9
pub const __DARWIN_ALIAS_STARTING_IPHONE___IPHONE_15_0 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_symbol_aliasing.h:347:9
pub const __DARWIN_ALIAS_STARTING = @compileError("unable to translate macro: undefined identifier `__DARWIN_ALIAS_STARTING_MAC_`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:662:9
pub const __POSIX_C_DEPRECATED = @compileError("unable to translate macro: undefined identifier `___POSIX_C_DEPRECATED_STARTING_`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:725:9
pub const __XNU_PRIVATE_EXTERN = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:825:9
pub const __compiler_barrier = @compileError("unable to translate macro: undefined identifier `__asm__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:842:9
pub const __enum_open = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:845:9
pub const __enum_closed = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:846:9
pub const __enum_options = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:853:9
pub const __enum_decl = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:866:9
pub const __enum_closed_decl = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:868:9
pub const __options_decl = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:870:9
pub const __options_closed_decl = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/cdefs.h:872:9
pub const __offsetof = @compileError("unable to translate macro: undefined identifier `__builtin_offsetof`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_types.h:83:9
pub const VK_DEFINE_HANDLE = @compileError("unable to translate macro: undefined identifier `_T`"); // /Users/slimsag/Desktop/hexops/mach/gpu/libs/mach-glfw/upstream/vulkan_headers/include/vulkan/vulkan_core.h:25:9
pub const VK_DEFINE_NON_DISPATCHABLE_HANDLE = @compileError("unable to translate macro: undefined identifier `_T`"); // /Users/slimsag/Desktop/hexops/mach/gpu/libs/mach-glfw/upstream/vulkan_headers/include/vulkan/vulkan_core.h:55:17
pub const __AVAILABILITY_INTERNAL_DEPRECATED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:109:9
pub const __AVAILABILITY_INTERNAL_DEPRECATED_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:112:17
pub const __AVAILABILITY_INTERNAL_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:121:9
pub const __AVAILABILITY_INTERNAL_WEAK_IMPORT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:122:9
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2922:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2923:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2924:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2926:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2930:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2932:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2937:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2941:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2942:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2944:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2948:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2950:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2954:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2956:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2961:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2965:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2966:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2968:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2972:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2974:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2978:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2980:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2985:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2990:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2994:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:2996:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3000:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3002:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3006:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3008:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3012:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3014:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3018:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3020:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3024:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3026:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3030:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3032:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3036:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3038:25
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3042:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3043:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3044:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3045:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3046:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3047:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3049:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3053:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3055:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3060:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3064:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3065:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3067:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3071:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3073:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3077:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3079:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3084:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3088:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3089:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3091:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3095:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3097:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3101:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3103:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3108:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3112:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3113:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3115:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3119:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3121:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3125:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3127:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3131:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3133:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3137:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3139:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3143:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3145:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3149:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3151:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3155:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3157:25
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3161:21
pub const __AVAILABILITY_INTERNAL__MAC_10_2_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3162:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3163:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3164:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3165:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3166:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3168:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3172:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3174:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3179:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3183:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3184:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3186:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3190:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3192:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3196:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3198:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3203:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3207:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3208:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3210:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3214:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3216:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3220:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3222:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3227:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3231:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3232:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3234:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3238:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3240:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3244:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3246:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3250:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3252:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3256:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3258:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3262:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3264:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3268:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3270:25
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3274:21
pub const __AVAILABILITY_INTERNAL__MAC_10_3_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3275:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3276:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3277:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3278:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3279:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3281:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3285:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3287:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3292:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3296:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3297:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3299:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3303:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3305:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3309:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3311:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3316:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3320:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3321:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3323:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3327:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3329:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3333:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3335:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3340:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3344:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3345:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3347:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3351:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3353:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3357:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3359:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3363:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3365:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3369:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3371:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3375:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3377:25
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3381:21
pub const __AVAILABILITY_INTERNAL__MAC_10_4_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3382:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3383:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEPRECATED__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3384:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3385:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3386:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3387:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3389:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3393:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3395:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3400:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3404:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3405:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3407:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3411:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3413:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3417:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3419:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3424:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3428:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3429:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3431:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3435:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3437:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3441:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3443:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3448:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3452:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3454:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3458:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3460:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3464:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3466:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3470:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3472:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3476:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3478:25
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3482:21
pub const __AVAILABILITY_INTERNAL__MAC_10_5_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3483:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3484:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3485:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3486:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3487:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3489:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3493:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3495:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3500:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3504:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3505:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3507:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3511:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3513:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3517:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3519:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3524:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3528:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3529:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3531:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3535:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3537:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3541:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3543:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3548:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3552:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3553:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3555:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3559:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3561:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3565:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3567:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3571:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3573:25
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3577:21
pub const __AVAILABILITY_INTERNAL__MAC_10_6_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3578:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3579:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3580:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3581:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3582:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3584:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3588:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3590:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3595:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3599:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3600:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3602:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3606:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3608:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3612:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3614:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3619:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3623:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3624:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3626:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3630:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3632:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3636:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3638:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3643:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_13_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3647:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3648:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3650:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3654:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3656:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3660:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3662:25
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3666:21
pub const __AVAILABILITY_INTERNAL__MAC_10_7_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3667:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3668:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3669:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3670:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3671:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3673:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3677:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3679:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3684:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3688:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3689:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3691:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3695:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3697:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3701:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3703:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3708:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3712:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3713:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3715:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3719:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3721:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3725:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3727:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3732:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3736:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3737:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3739:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3743:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3745:25
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3749:21
pub const __AVAILABILITY_INTERNAL__MAC_10_8_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3750:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3751:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3752:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3753:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3754:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3756:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3760:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3762:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3767:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3771:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3772:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3774:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3778:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3780:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3784:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3786:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3791:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3795:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3796:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3798:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3802:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3804:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3808:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3810:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3815:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3819:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_14 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3820:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3821:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3823:25
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3827:21
pub const __AVAILABILITY_INTERNAL__MAC_10_9_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3828:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3829:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_0 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3830:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_0_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3832:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3836:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3837:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3838:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3840:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3844:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3846:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3851:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3855:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3856:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3858:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3862:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3864:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3868:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3870:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3875:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3879:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3880:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3882:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3886:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3888:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3892:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3894:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3899:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3903:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3905:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3909:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3911:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3915:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3917:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3921:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3923:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3927:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_5_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3929:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3933:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_6_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3935:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3939:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_7_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3941:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3945:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_8_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3947:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3951:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_9_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3953:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_10_13_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3958:25
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3962:21
pub const __AVAILABILITY_INTERNAL__MAC_10_0_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3963:21
pub const __AVAILABILITY_INTERNAL__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3964:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3965:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3966:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3967:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3969:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3973:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3975:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3979:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3980:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3982:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3986:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3988:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3992:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3994:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:3999:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4003:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4004:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4006:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4010:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4012:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4016:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4018:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4023:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4027:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_2_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4028:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4029:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4030:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4032:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4036:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4037:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4039:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4043:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4045:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4049:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4051:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4056:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4060:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4061:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4063:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4067:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4069:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4073:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4075:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4080:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4084:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_3_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4085:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4086:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4087:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4088:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4090:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4094:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4096:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_10_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4101:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4105:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4106:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4108:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4112:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4114:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4118:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4120:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4125:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4129:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4130:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4132:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4136:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4138:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4142:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4144:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4149:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4153:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4155:25
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_10_13_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4159:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4160:21
pub const __AVAILABILITY_INTERNAL__MAC_10_10_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4161:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4162:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4163:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4164:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4166:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4170:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4172:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4176:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4178:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4182:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4183:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4185:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4189:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4191:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4195:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4197:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4202:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4206:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_2_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4207:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4208:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4209:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4211:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4215:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4217:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4221:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4222:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4224:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4228:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4230:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4234:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4236:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4241:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4245:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_3_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4246:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4247:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4248:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4250:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4254:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4255:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4257:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4261:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4263:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4267:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4269:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4274:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4278:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_4_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4279:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4280:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4281:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4282:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4284:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4288:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_3_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4290:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4294:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4296:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_11_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4301:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4305:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4306:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4308:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4312:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4314:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4318:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4320:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4325:25
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4329:21
pub const __AVAILABILITY_INTERNAL__MAC_10_11_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4330:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4331:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4332:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4333:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4335:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4339:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4341:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4345:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4347:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4351:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_1_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4352:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4353:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4354:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4356:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4360:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4362:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4366:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_2_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4367:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4368:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4369:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4371:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4375:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_4_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4376:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4377:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4378:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_1_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4380:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4384:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_2_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4386:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4390:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_4_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4392:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_12_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4397:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4401:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4403:25
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_13_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4407:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_10_14 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4408:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4409:21
pub const __AVAILABILITY_INTERNAL__MAC_10_12_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4410:21
pub const __AVAILABILITY_INTERNAL__MAC_10_13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4411:21
pub const __AVAILABILITY_INTERNAL__MAC_10_13_4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4412:21
pub const __AVAILABILITY_INTERNAL__MAC_10_14 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4413:21
pub const __AVAILABILITY_INTERNAL__MAC_10_14_DEP__MAC_10_14 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4414:21
pub const __AVAILABILITY_INTERNAL__MAC_10_15 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4415:21
pub const __AVAILABILITY_INTERNAL__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4417:21
pub const __AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4418:21
pub const __AVAILABILITY_INTERNAL__MAC_NA_DEP__MAC_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4419:21
pub const __AVAILABILITY_INTERNAL__IPHONE_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4421:21
pub const __AVAILABILITY_INTERNAL__IPHONE_NA__IPHONE_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4422:21
pub const __AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4423:21
pub const __AVAILABILITY_INTERNAL__IPHONE_NA_DEP__IPHONE_NA_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4424:21
pub const __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4427:22
pub const __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION_DEP__IPHONE_COMPAT_VERSION = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4428:22
pub const __AVAILABILITY_INTERNAL__IPHONE_COMPAT_VERSION_DEP__IPHONE_COMPAT_VERSION_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4429:22
pub const __API_AVAILABLE_PLATFORM_macos = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4445:13
pub const __API_AVAILABLE_PLATFORM_macosx = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4446:13
pub const __API_AVAILABLE_PLATFORM_ios = @compileError("unable to translate macro: undefined identifier `ios`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4447:13
pub const __API_AVAILABLE_PLATFORM_watchos = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4448:13
pub const __API_AVAILABLE_PLATFORM_tvos = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4449:13
pub const __API_AVAILABLE_PLATFORM_macCatalyst = @compileError("unable to translate macro: undefined identifier `macCatalyst`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4451:13
pub const __API_AVAILABLE_PLATFORM_uikitformac = @compileError("unable to translate macro: undefined identifier `uikitformac`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4454:14
pub const __API_AVAILABLE_PLATFORM_driverkit = @compileError("unable to translate macro: undefined identifier `driverkit`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4456:13
pub const __API_A = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4460:17
pub const __API_AVAILABLE2 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4469:13
pub const __API_AVAILABLE3 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4470:13
pub const __API_AVAILABLE4 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4471:13
pub const __API_AVAILABLE5 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4472:13
pub const __API_AVAILABLE6 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4473:13
pub const __API_AVAILABLE7 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4474:13
pub const __API_AVAILABLE_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4475:13
pub const __API_APPLY_TO = @compileError("unable to translate macro: undefined identifier `any`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4477:13
pub const __API_RANGE_STRINGIFY2 = @compileError("unable to translate C expr: unexpected token '#'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4479:13
pub const __API_A_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4481:13
pub const __API_AVAILABLE_BEGIN2 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4484:13
pub const __API_AVAILABLE_BEGIN3 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4485:13
pub const __API_AVAILABLE_BEGIN4 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4486:13
pub const __API_AVAILABLE_BEGIN5 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4487:13
pub const __API_AVAILABLE_BEGIN6 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4488:13
pub const __API_AVAILABLE_BEGIN7 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4489:13
pub const __API_AVAILABLE_BEGIN_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4490:13
pub const __API_DEPRECATED_PLATFORM_macos = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4493:13
pub const __API_DEPRECATED_PLATFORM_macosx = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4494:13
pub const __API_DEPRECATED_PLATFORM_ios = @compileError("unable to translate macro: undefined identifier `ios`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4495:13
pub const __API_DEPRECATED_PLATFORM_watchos = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4496:13
pub const __API_DEPRECATED_PLATFORM_tvos = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4497:13
pub const __API_DEPRECATED_PLATFORM_macCatalyst = @compileError("unable to translate macro: undefined identifier `macCatalyst`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4499:13
pub const __API_DEPRECATED_PLATFORM_uikitformac = @compileError("unable to translate macro: undefined identifier `uikitformac`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4502:14
pub const __API_DEPRECATED_PLATFORM_driverkit = @compileError("unable to translate macro: undefined identifier `driverkit`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4504:13
pub const __API_D = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4508:17
pub const __API_DEPRECATED_MSG3 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4517:13
pub const __API_DEPRECATED_MSG4 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4518:13
pub const __API_DEPRECATED_MSG5 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4519:13
pub const __API_DEPRECATED_MSG6 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4520:13
pub const __API_DEPRECATED_MSG7 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4521:13
pub const __API_DEPRECATED_MSG8 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4522:13
pub const __API_DEPRECATED_MSG_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4523:13
pub const __API_D_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4525:13
pub const __API_DEPRECATED_BEGIN_MSG3 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4528:13
pub const __API_DEPRECATED_BEGIN_MSG4 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4529:13
pub const __API_DEPRECATED_BEGIN_MSG5 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4530:13
pub const __API_DEPRECATED_BEGIN_MSG6 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4531:13
pub const __API_DEPRECATED_BEGIN_MSG7 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4532:13
pub const __API_DEPRECATED_BEGIN_MSG8 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4533:13
pub const __API_DEPRECATED_BEGIN_MSG_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4534:13
pub const __API_R = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4537:17
pub const __API_DEPRECATED_REP3 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4543:13
pub const __API_DEPRECATED_REP4 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4544:13
pub const __API_DEPRECATED_REP5 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4545:13
pub const __API_DEPRECATED_REP6 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4546:13
pub const __API_DEPRECATED_REP7 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4547:13
pub const __API_DEPRECATED_REP8 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4548:13
pub const __API_DEPRECATED_REP_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4549:13
pub const __API_R_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4552:17
pub const __API_DEPRECATED_BEGIN_REP3 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4558:13
pub const __API_DEPRECATED_BEGIN_REP4 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4559:13
pub const __API_DEPRECATED_BEGIN_REP5 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4560:13
pub const __API_DEPRECATED_BEGIN_REP6 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4561:13
pub const __API_DEPRECATED_BEGIN_REP7 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4562:13
pub const __API_DEPRECATED_BEGIN_REP8 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4563:13
pub const __API_DEPRECATED_BEGIN_REP_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4564:13
pub const __API_UNAVAILABLE_PLATFORM_macos = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4574:13
pub const __API_UNAVAILABLE_PLATFORM_macosx = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4575:13
pub const __API_UNAVAILABLE_PLATFORM_ios = @compileError("unable to translate macro: undefined identifier `ios`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4576:13
pub const __API_UNAVAILABLE_PLATFORM_watchos = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4577:13
pub const __API_UNAVAILABLE_PLATFORM_tvos = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4578:13
pub const __API_UNAVAILABLE_PLATFORM_macCatalyst = @compileError("unable to translate macro: undefined identifier `macCatalyst`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4580:13
pub const __API_UNAVAILABLE_PLATFORM_uikitformac = @compileError("unable to translate macro: undefined identifier `uikitformac`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4583:14
pub const __API_UNAVAILABLE_PLATFORM_driverkit = @compileError("unable to translate macro: undefined identifier `driverkit`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4585:13
pub const __API_U = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4589:17
pub const __API_UNAVAILABLE2 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4598:13
pub const __API_UNAVAILABLE3 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4599:13
pub const __API_UNAVAILABLE4 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4600:13
pub const __API_UNAVAILABLE5 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4601:13
pub const __API_UNAVAILABLE6 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4602:13
pub const __API_UNAVAILABLE7 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4603:13
pub const __API_UNAVAILABLE_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4604:13
pub const __API_U_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4606:13
pub const __API_UNAVAILABLE_BEGIN2 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4609:13
pub const __API_UNAVAILABLE_BEGIN3 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4610:13
pub const __API_UNAVAILABLE_BEGIN4 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4611:13
pub const __API_UNAVAILABLE_BEGIN5 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4612:13
pub const __API_UNAVAILABLE_BEGIN6 = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4613:13
pub const __API_UNAVAILABLE_BEGIN7 = @compileError("unable to translate macro: undefined identifier `g`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4614:13
pub const __API_UNAVAILABLE_BEGIN_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4615:13
pub const __swift_compiler_version_at_least = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4664:13
pub const __SPI_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityInternal.h:4672:11
pub const API_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/availability.h:61:13
pub const API_AVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/availability.h:63:13
pub const API_AVAILABLE_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/availability.h:64:13
pub const API_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/availability.h:83:13
pub const API_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/availability.h:84:13
pub const API_DEPRECATED_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/availability.h:86:13
pub const API_DEPRECATED_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/availability.h:87:13
pub const API_DEPRECATED_WITH_REPLACEMENT_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/availability.h:89:13
pub const API_DEPRECATED_WITH_REPLACEMENT_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/availability.h:90:13
pub const API_UNAVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/availability.h:102:13
pub const API_UNAVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/availability.h:104:13
pub const API_UNAVAILABLE_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/availability.h:105:13
pub const SPI_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/availability.h:154:11
pub const SPI_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/availability.h:158:11
pub const SPI_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/availability.h:162:11
pub const OPENGL_AVAILABLE = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/OpenGL.framework/Headers/OpenGLAvailability.h:11:10
pub const OPENGL_DEPRECATED = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/OpenGL.framework/Headers/OpenGLAvailability.h:12:10
pub const OPENGL_DEPRECATED_MSG = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/OpenGL.framework/Headers/OpenGLAvailability.h:13:10
pub const __OSX_AVAILABLE_STARTING = @compileError("unable to translate macro: undefined identifier `__AVAILABILITY_INTERNAL`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:172:17
pub const __OSX_AVAILABLE_BUT_DEPRECATED = @compileError("unable to translate macro: undefined identifier `__AVAILABILITY_INTERNAL`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:173:17
pub const __OSX_AVAILABLE_BUT_DEPRECATED_MSG = @compileError("unable to translate macro: undefined identifier `__AVAILABILITY_INTERNAL`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:175:17
pub const __OS_AVAILABILITY = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:198:13
pub const __OS_AVAILABILITY_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:199:13
pub const __OSX_EXTENSION_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `macosx_app_extension`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:216:13
pub const __IOS_EXTENSION_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `ios_app_extension`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:217:13
pub const __OS_EXTENSION_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:227:9
pub const __OSX_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:234:13
pub const __OSX_AVAILABLE = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:235:13
pub const __OSX_DEPRECATED = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:236:13
pub const __IOS_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `ios`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:256:13
pub const __IOS_PROHIBITED = @compileError("unable to translate macro: undefined identifier `ios`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:257:13
pub const __IOS_AVAILABLE = @compileError("unable to translate macro: undefined identifier `ios`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:258:13
pub const __IOS_DEPRECATED = @compileError("unable to translate macro: undefined identifier `ios`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:259:13
pub const __TVOS_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:283:13
pub const __TVOS_PROHIBITED = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:284:13
pub const __TVOS_AVAILABLE = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:285:13
pub const __TVOS_DEPRECATED = @compileError("unable to translate macro: undefined identifier `tvos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:286:13
pub const __WATCHOS_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:310:13
pub const __WATCHOS_PROHIBITED = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:311:13
pub const __WATCHOS_AVAILABLE = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:312:13
pub const __WATCHOS_DEPRECATED = @compileError("unable to translate macro: undefined identifier `watchos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:313:13
pub const __SWIFT_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `swift`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:337:13
pub const __SWIFT_UNAVAILABLE_MSG = @compileError("unable to translate macro: undefined identifier `swift`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:338:13
pub const __API_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:381:13
pub const __API_AVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:383:13
pub const __API_AVAILABLE_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:384:13
pub const __API_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:402:13
pub const __API_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:403:13
pub const __API_DEPRECATED_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:405:13
pub const __API_DEPRECATED_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:406:13
pub const __API_DEPRECATED_WITH_REPLACEMENT_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:408:13
pub const __API_DEPRECATED_WITH_REPLACEMENT_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:409:13
pub const __API_UNAVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:419:13
pub const __API_UNAVAILABLE_BEGIN = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:421:13
pub const __API_UNAVAILABLE_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:422:13
pub const __SPI_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:475:11
pub const __SPI_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Availability.h:479:11
pub const __DARWIN_OS_INLINE = @compileError("unable to translate C expr: unexpected token 'static'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/libkern/_OSByteOrder.h:67:17
pub const NTOHL = @compileError("unable to translate C expr: unexpected token '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_endian.h:143:9
pub const NTOHS = @compileError("unable to translate C expr: unexpected token '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_endian.h:144:9
pub const NTOHLL = @compileError("unable to translate C expr: unexpected token '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_endian.h:145:9
pub const HTONL = @compileError("unable to translate C expr: unexpected token '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_endian.h:146:9
pub const HTONS = @compileError("unable to translate C expr: unexpected token '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_endian.h:147:9
pub const HTONLL = @compileError("unable to translate C expr: unexpected token '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_endian.h:148:9
pub const __DARWIN_FD_ZERO = @compileError("unable to translate macro: undefined identifier `__builtin_bzero`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_types/_fd_def.h:115:9
pub const __DARWIN_FD_COPY = @compileError("unable to translate C expr: unexpected token '*'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/_types/_fd_def.h:120:9
pub const va_start = @compileError("unable to translate macro: undefined identifier `__builtin_va_start`"); // /Users/slimsag/Desktop/zig/build/stage1/lib/zig/include/stdarg.h:17:9
pub const va_end = @compileError("unable to translate macro: undefined identifier `__builtin_va_end`"); // /Users/slimsag/Desktop/zig/build/stage1/lib/zig/include/stdarg.h:18:9
pub const va_arg = @compileError("unable to translate macro: undefined identifier `__builtin_va_arg`"); // /Users/slimsag/Desktop/zig/build/stage1/lib/zig/include/stdarg.h:19:9
pub const __va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`"); // /Users/slimsag/Desktop/zig/build/stage1/lib/zig/include/stdarg.h:24:9
pub const va_copy = @compileError("unable to translate macro: undefined identifier `__builtin_va_copy`"); // /Users/slimsag/Desktop/zig/build/stage1/lib/zig/include/stdarg.h:27:9
pub const __ASSERT_FILE_NAME = @compileError("unable to translate macro: undefined identifier `__FILE_NAME__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/assert.h:60:9
pub const __assert = @compileError("unable to translate C expr: unexpected token 'const'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/assert.h:93:9
pub const assert = @compileError("unable to translate macro: undefined identifier `__func__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/assert.h:98:9
pub const static_assert = @compileError("unable to translate C expr: unexpected token '_Static_assert'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/assert.h:113:9
pub const __strfmonlike = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/_types.h:31:9
pub const __strftimelike = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/_types.h:33:9
pub const FLT_ROUNDS = @compileError("unable to translate macro: undefined identifier `__builtin_flt_rounds`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/float.h:76:9
pub const HUGE_VAL = @compileError("unable to translate macro: undefined identifier `__builtin_huge_val`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:57:15
pub const HUGE_VALL = @compileError("unable to translate macro: undefined identifier `__builtin_huge_vall`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:59:15
pub const fpclassify = @compileError("unable to translate: TODO long double"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:126:9
pub const isnormal = @compileError("unable to translate: TODO long double"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:149:9
pub const isfinite = @compileError("unable to translate: TODO long double"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:154:9
pub const isinf = @compileError("unable to translate: TODO long double"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:159:9
pub const isnan = @compileError("unable to translate: TODO long double"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:164:9
pub const signbit = @compileError("unable to translate: TODO long double"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:169:9
pub const isgreater = @compileError("unable to translate macro: undefined identifier `__builtin_isgreater`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:543:9
pub const isgreaterequal = @compileError("unable to translate macro: undefined identifier `__builtin_isgreaterequal`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:544:9
pub const isless = @compileError("unable to translate macro: undefined identifier `__builtin_isless`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:545:9
pub const islessequal = @compileError("unable to translate macro: undefined identifier `__builtin_islessequal`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:546:9
pub const islessgreater = @compileError("unable to translate macro: undefined identifier `__builtin_islessgreater`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:547:9
pub const isunordered = @compileError("unable to translate macro: undefined identifier `__builtin_isunordered`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/math.h:548:9
pub const SIG_DFL = @compileError("unable to translate C expr: expected ')' instead got '('"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/signal.h:131:9
pub const SIG_IGN = @compileError("unable to translate C expr: expected ')' instead got '('"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/signal.h:132:9
pub const SIG_HOLD = @compileError("unable to translate C expr: expected ')' instead got '('"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/signal.h:133:9
pub const SIG_ERR = @compileError("unable to translate C expr: expected ')' instead got '('"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/signal.h:134:9
pub const __darwin_arm_thread_state64_set_pc_fptr = @compileError("unable to translate C expr: expected ')' instead got '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/arm/_structs.h:353:9
pub const __darwin_arm_thread_state64_set_lr_fptr = @compileError("unable to translate C expr: expected ')' instead got '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/arm/_structs.h:362:9
pub const __darwin_arm_thread_state64_set_sp = @compileError("unable to translate C expr: expected ')' instead got '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/arm/_structs.h:368:9
pub const __darwin_arm_thread_state64_set_fp = @compileError("unable to translate C expr: expected ')' instead got '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/arm/_structs.h:374:9
pub const sv_onstack = @compileError("unable to translate macro: undefined identifier `sv_flags`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/signal.h:361:9
pub const __sgetc = @compileError("TODO unary inc/dec expr"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/stdio.h:251:9
pub const __sclearerr = @compileError("unable to translate C expr: expected ')' instead got '&='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/stdio.h:275:9
pub const ru_first = @compileError("unable to translate macro: undefined identifier `ru_ixrss`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/resource.h:164:9
pub const ru_last = @compileError("unable to translate macro: undefined identifier `ru_nivcsw`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/resource.h:178:9
pub const w_termsig = @compileError("unable to translate macro: undefined identifier `w_T`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/wait.h:231:9
pub const w_coredump = @compileError("unable to translate macro: undefined identifier `w_T`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/wait.h:232:9
pub const w_retcode = @compileError("unable to translate macro: undefined identifier `w_T`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/wait.h:233:9
pub const w_stopval = @compileError("unable to translate macro: undefined identifier `w_S`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/wait.h:234:9
pub const w_stopsig = @compileError("unable to translate macro: undefined identifier `w_S`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/wait.h:235:9
pub const __alloca = @compileError("unable to translate macro: undefined identifier `__builtin_alloca`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/alloca.h:40:9
pub const __bsearch_noescape = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/stdlib.h:272:9
pub const __sort_noescape = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/stdlib.h:305:9
pub const __CLOCK_AVAILABILITY = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/time.h:148:9
pub const WEAK_IMPORT_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityMacros.h:171:13
pub const DEPRECATED_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityMacros.h:183:17
pub const DEPRECATED_MSG_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityMacros.h:185:21
pub const UNAVAILABLE_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityMacros.h:209:13
pub const __IPHONE_COMPAT_VERSION = @compileError("unable to translate macro: undefined identifier `__IPHONE_NA`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AvailabilityMacros.h:247:9
pub const CF_AVAILABLE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:46:9
pub const CF_AVAILABLE_MAC = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:47:9
pub const CF_AVAILABLE_IOS = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:48:9
pub const CF_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:49:9
pub const CF_DEPRECATED_MAC = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:50:9
pub const CF_DEPRECATED_IOS = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:51:9
pub const CF_ENUM_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:100:9
pub const CF_ENUM_DEPRECATED_MAC = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:101:9
pub const CF_ENUM_DEPRECATED_IOS = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:102:9
pub const __CF_ENUM_ATTRIBUTES = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:125:9
pub const __CF_CLOSED_ENUM_ATTRIBUTES = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:126:9
pub const __CF_OPTIONS_ATTRIBUTES = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:127:9
pub const __CF_ENUM_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:134:9
pub const __CF_ENUM_FIXED_IS_AVAILABLE = @compileError("unable to translate macro: undefined identifier `__cplusplus`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:136:9
pub const __CF_NAMED_ENUM = @compileError("unable to translate C expr: unexpected token ';'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:151:9
pub const __CF_ANON_ENUM = @compileError("unable to translate C expr: expected 'Identifier' instead got 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:152:9
pub const CF_CLOSED_ENUM = @compileError("unable to translate C expr: unexpected token ';'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:153:9
pub const CF_OPTIONS = @compileError("unable to translate C expr: unexpected token ';'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:154:9
pub const CF_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:169:9
pub const _CF_TYPED_ENUM = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:172:9
pub const _CF_TYPED_EXTENSIBLE_ENUM = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:178:9
pub const __CF_ERROR_ENUM_GET_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:197:9
pub const CF_ERROR_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:218:9
pub const CF_SWIFT_BRIDGED_TYPEDEF = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:222:9
pub const CF_SWIFT_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFAvailability.h:235:9
pub const BLOCK_EXPORT = @compileError("unable to translate C expr: unexpected token 'extern'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Block.h:17:16
pub const Block_copy = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Block.h:60:9
pub const Block_release = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/Block.h:61:9
pub const EXTERN_API = @compileError("unable to translate C expr: unexpected token 'extern'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:367:13
pub const EXTERN_API_C = @compileError("unable to translate C expr: unexpected token 'extern'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:368:13
pub const EXTERN_API_STDCALL = @compileError("unable to translate C expr: unexpected token 'extern'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:369:13
pub const EXTERN_API_C_STDCALL = @compileError("unable to translate C expr: unexpected token 'extern'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:370:13
pub const PRAGMA_ALIGN_SUPPORTED = @compileError("unable to translate macro: undefined identifier `PRAGMA_ALIGN_SUPPORTED_is_obsolete`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:478:9
pub const GENERATINGPOWERPC = @compileError("unable to translate macro: undefined identifier `GENERATINGPOWERPC_is_obsolete`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:479:9
pub const GENERATING68K = @compileError("unable to translate macro: undefined identifier `GENERATING68K_is_obsolete`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:480:9
pub const GENERATING68881 = @compileError("unable to translate macro: undefined identifier `GENERATING68881_is_obsolete`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:481:9
pub const GENERATINGCFM = @compileError("unable to translate macro: undefined identifier `GENERATINGCFM_is_obsolete`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:482:9
pub const CFMSYSTEMCALLS = @compileError("unable to translate macro: undefined identifier `CFMSYSTEMCALLS_is_obsolete`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:483:9
pub const ONEWORDINLINE = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:535:11
pub const TWOWORDINLINE = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:536:11
pub const THREEWORDINLINE = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:537:12
pub const FOURWORDINLINE = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:538:11
pub const FIVEWORDINLINE = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:539:13
pub const SIXWORDINLINE = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:540:10
pub const SEVENWORDINLINE = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:541:12
pub const EIGHTWORDINLINE = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:542:11
pub const NINEWORDINLINE = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:543:12
pub const TENWORDINLINE = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:544:10
pub const ELEVENWORDINLINE = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:545:11
pub const TWELVEWORDINLINE = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/ConditionalMacros.h:546:12
pub const StrLength = @compileError("unable to translate C expr: unexpected token 'const'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/MacTypes.h:503:9
pub const CF_EXPORT = @compileError("unable to translate C expr: unexpected token 'extern'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:153:9
pub const CF_INLINE = @compileError("unable to translate macro: undefined identifier `__inline__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:178:17
pub const CF_RETURNS_RETAINED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:194:9
pub const CF_RETURNS_NOT_RETAINED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:204:9
pub const CF_RELEASES_ARGUMENT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:213:9
pub const CF_CONSUMED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:222:9
pub const CF_IMPLICIT_BRIDGING_ENABLED = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:237:9
pub const CF_IMPLICIT_BRIDGING_DISABLED = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:245:9
pub const CF_BRIDGED_TYPE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:270:9
pub const CF_BRIDGED_MUTABLE_TYPE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:271:9
pub const CF_RELATED_TYPE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:272:9
pub const CF_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:281:9
pub const CF_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:282:9
pub const CF_REFINED_FOR_SWIFT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:303:10
pub const CF_SWIFT_NAME = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:310:10
pub const CF_NOESCAPE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:316:9
pub const CF_NO_TAIL_CALL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:322:9
pub const CF_WARN_UNUSED_RESULT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFBase.h:328:9
pub const CF_CALENDAR_ENUM_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDate.h:55:9
pub const CF_CALENDAR_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFDate.h:56:9
pub const CFSTR = @compileError("unable to translate macro: undefined identifier `__builtin___CFStringMakeConstantString`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h:197:9
pub const CF_FORMAT_FUNCTION = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h:205:9
pub const CF_FORMAT_ARGUMENT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreFoundation.framework/Headers/CFString.h:206:9
pub const MACH_MSG_TYPE_INTEGER_T = @compileError("unable to translate macro: undefined identifier `MACH_MSG_TYPE_INTEGER_32`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/arm/vm_types.h:158:9
pub const OS_NORETURN = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:45:9
pub const OS_NOTHROW = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:46:9
pub const OS_NONNULL1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:47:9
pub const OS_NONNULL2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:48:9
pub const OS_NONNULL3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:49:9
pub const OS_NONNULL4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:50:9
pub const OS_NONNULL5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:51:9
pub const OS_NONNULL6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:52:9
pub const OS_NONNULL7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:53:9
pub const OS_NONNULL8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:54:9
pub const OS_NONNULL9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:55:9
pub const OS_NONNULL10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:56:9
pub const OS_NONNULL11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:57:9
pub const OS_NONNULL12 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:58:9
pub const OS_NONNULL13 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:59:9
pub const OS_NONNULL14 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:60:9
pub const OS_NONNULL15 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:61:9
pub const OS_NONNULL_ALL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:62:9
pub const OS_SENTINEL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:63:9
pub const OS_PURE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:64:9
pub const OS_CONST = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:65:9
pub const OS_WARN_RESULT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:66:9
pub const OS_MALLOC = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:67:9
pub const OS_USED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:68:9
pub const OS_UNUSED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:69:9
pub const OS_COLD = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:70:9
pub const OS_WEAK = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:71:9
pub const OS_WEAK_IMPORT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:72:9
pub const OS_NOINLINE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:73:9
pub const OS_ALWAYS_INLINE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:74:9
pub const OS_TRANSPARENT_UNION = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:75:9
pub const OS_ALIGNED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:76:9
pub const OS_FORMAT_PRINTF = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:77:9
pub const OS_EXPORT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:78:9
pub const OS_INLINE = @compileError("unable to translate macro: undefined identifier `__inline__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:79:9
pub const OS_NOESCAPE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:121:9
pub const OS_FALLTHROUGH = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:129:9
pub const OS_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:135:9
pub const OS_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:136:9
pub const OS_OVERLOADABLE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:149:9
pub const OS_ANALYZER_SUPPRESS = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:157:9
pub const __OS_ENUM_ATTR = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:161:9
pub const __OS_ENUM_ATTR_CLOSED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:162:9
pub const __OS_OPTIONS_ATTR = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:176:9
pub const OS_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:183:9
pub const OS_CLOSED_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:185:9
pub const OS_OPTIONS = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:187:9
pub const OS_CLOSED_OPTIONS = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:189:9
pub const OS_SWIFT_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:240:9
pub const OS_REFINED_FOR_SWIFT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:247:10
pub const OS_SWIFT_NAME = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:253:10
pub const __OS_STRINGIFY = @compileError("unable to translate C expr: unexpected token '#'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:258:9
pub const __OS_CONCAT = @compileError("unable to translate C expr: unexpected token '##'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:260:9
pub const os_prevent_tail_call_optimization = @compileError("unable to translate macro: undefined identifier `__asm__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:264:9
pub const os_compiler_barrier = @compileError("unable to translate macro: undefined identifier `__asm__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:266:9
pub const OS_NOT_TAIL_CALLED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/base.h:274:9
pub const OS_OBJECT_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/object.h:102:9
pub const OS_OBJECT_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/object.h:103:9
pub const OS_OBJECT_WARN_UNUSED_RESULT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/object.h:108:9
pub const OS_OBJECT_DECL_CLASS = @compileError("unable to translate macro: undefined identifier `_s`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/object.h:225:9
pub const OS_OBJECT_DECL_PROTOCOL = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/object.h:243:9
pub const OS_OBJECT_SHOW_CLASS = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/object.h:244:9
pub const OS_OBJECT_SHOW_SUBCLASS = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/object.h:246:9
pub const OS_WORKGROUP_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/workgroup_base.h:23:9
pub const OS_WORKGROUP_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/workgroup_base.h:24:9
pub const OS_WORKGROUP_WARN_RESULT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/workgroup_base.h:29:9
pub const OS_WORKGROUP_DECL = @compileError("unable to translate macro: undefined identifier `OS_OBJECT_CLASS`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/workgroup_base.h:33:9
pub const OS_WORKGROUP_SUBCLASS_DECL_PROTO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/workgroup_base.h:42:9
pub const OS_WORKGROUP_SUBCLASS_DECL = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/workgroup_base.h:45:9
pub const OS_WORKGROUP_ATTR_INITIALIZER_DEFAULT = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/workgroup_object.h:65:9
pub const OS_WORKGROUP_INTERVAL_DATA_INITIALIZER = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/os/workgroup_interval.h:57:9
pub const DISPATCH_NORETURN = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:45:9
pub const DISPATCH_NOTHROW = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:46:9
pub const DISPATCH_NONNULL1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:47:9
pub const DISPATCH_NONNULL2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:48:9
pub const DISPATCH_NONNULL3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:49:9
pub const DISPATCH_NONNULL4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:50:9
pub const DISPATCH_NONNULL5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:51:9
pub const DISPATCH_NONNULL6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:52:9
pub const DISPATCH_NONNULL7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:53:9
pub const DISPATCH_NONNULL_ALL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:58:9
pub const DISPATCH_SENTINEL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:60:9
pub const DISPATCH_PURE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:61:9
pub const DISPATCH_CONST = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:62:9
pub const DISPATCH_WARN_RESULT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:63:9
pub const DISPATCH_MALLOC = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:64:9
pub const DISPATCH_ALWAYS_INLINE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:65:9
pub const DISPATCH_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:66:9
pub const DISPATCH_UNAVAILABLE_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:67:9
pub const DISPATCH_LINUX_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:130:9
pub const DISPATCH_FREEBSD_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:137:9
pub const DISPATCH_ALIAS_V2 = @compileError("unable to translate macro: undefined identifier `__asm__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:142:9
pub const DISPATCH_EXPORT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:155:9
pub const DISPATCH_INLINE = @compileError("unable to translate macro: undefined identifier `__inline__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:161:9
pub const dispatch_compiler_barrier = @compileError("unable to translate macro: undefined identifier `__asm__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:168:9
pub const DISPATCH_NOT_TAIL_CALLED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:175:9
pub const DISPATCH_NOESCAPE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:187:9
pub const DISPATCH_COLD = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:193:9
pub const DISPATCH_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:199:9
pub const DISPATCH_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:200:9
pub const DISPATCH_RETURNS_RETAINED_BLOCK = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:220:9
pub const __DISPATCH_ENUM_ATTR = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:227:9
pub const __DISPATCH_ENUM_ATTR_CLOSED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:228:9
pub const __DISPATCH_OPTIONS_ATTR = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:235:9
pub const DISPATCH_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:243:9
pub const DISPATCH_OPTIONS = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:245:9
pub const DISPATCH_ENUM_API_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:257:9
pub const DISPATCH_ENUM_API_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:258:9
pub const DISPATCH_ENUM_API_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:259:9
pub const DISPATCH_SWIFT_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:274:9
pub const DISPATCH_SWIFT3_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:283:9
pub const DISPATCH_REFINED_FOR_SWIFT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:287:9
pub const DISPATCH_SWIFT_NAME = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:293:9
pub const DISPATCH_TRANSPARENT_UNION = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/base.h:299:9
pub const time_value_add_usec = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/time_value.h:79:9
pub const time_value_add = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/time_value.h:87:9
pub const ADD_MACH_TIMESPEC = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/clock_types.h:99:9
pub const SUB_MACH_TIMESPEC = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/clock_types.h:109:9
pub const __QOS_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/qos.h:114:9
pub const __QOS_CLASS_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/qos.h:115:9
pub const DISPATCH_DECL = @compileError("unable to translate macro: undefined identifier `_s`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/object.h:108:9
pub const DISPATCH_DECL_SUBCLASS = @compileError("unable to translate macro: undefined identifier `_t`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/object.h:109:9
pub const DISPATCH_SOURCE_DECL = @compileError("unable to translate C expr: unexpected token ';'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/object.h:129:9
pub const DISPATCH_SOURCE_TYPE_DECL = @compileError("unable to translate macro: undefined identifier `_dispatch_source_type_`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/object.h:132:9
pub const DISPATCH_APPLY_QUEUE_ARG_NULLABILITY = @compileError("unable to translate macro: undefined identifier `_Nullable`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/queue.h:425:9
pub const DISPATCH_APPLY_AUTO = @compileError("unable to translate macro: undefined identifier `_Nonnull`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/queue.h:448:9
pub const msgh_reserved = @compileError("unable to translate macro: undefined identifier `msgh_voucher_port`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/message.h:422:9
pub const KERNEL_SECURITY_TOKEN_VALUE = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/message.h:554:11
pub const KERNEL_AUDIT_TOKEN_VALUE = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/message.h:557:11
pub const msgh_kind = @compileError("unable to translate macro: undefined identifier `msgh_seqno`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/message.h:605:9
pub const DISPATCH_DATA_DESTRUCTOR_TYPE_DECL = @compileError("unable to translate macro: undefined identifier `_dispatch_data_destructor_`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/dispatch/data.h:66:9
pub const KAUTH_ACL_SIZE = @compileError("unable to translate macro: undefined identifier `acl_ace`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/kauth.h:231:9
pub const fsec_entrycount = @compileError("unable to translate macro: undefined identifier `fsec_acl`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/kauth.h:257:9
pub const fsec_flags = @compileError("unable to translate macro: undefined identifier `fsec_acl`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/kauth.h:258:9
pub const fsec_ace = @compileError("unable to translate macro: undefined identifier `fsec_acl`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/kauth.h:259:9
pub const KAUTH_FILESEC_SIZE = @compileError("unable to translate macro: undefined identifier `fsec_acl`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/kauth.h:271:9
pub const KAUTH_INVALIDATE_CACHED_RIGHTS = @compileError("unable to translate macro: undefined identifier `kauth_action_t`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/kauth.h:365:9
pub const FixedSquareRoot = @compileError("unable to translate macro: undefined identifier `FractSquareRoot`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/FixMath.h:97:9
pub const FractToColor = @compileError("unable to translate macro: undefined identifier `gxColorValue`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/FixMath.h:106:9
pub const UC_INLINE = @compileError("unable to translate macro: undefined identifier `__inline__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/TextCommon.h:1097:10
pub const GetCurrentArchitecture = @compileError("unable to translate macro: undefined identifier `GetCurrentISA`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/MixedMode.h:101:14
pub const DisposeRoutineDescriptor = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/MixedMode.h:252:11
pub const SwapMMUMode = @compileError("unable to translate C expr: expected ')' instead got '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/OSUtils.h:482:9
pub const VM_GET_FLAGS_ALIAS = @compileError("unable to translate C expr: unexpected token '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/vm_statistics.h:285:9
pub const VM_SET_FLAGS_ALIAS = @compileError("unable to translate C expr: unexpected token '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/vm_statistics.h:287:9
pub const invalid_memory_object_flavor = @compileError("unable to translate macro: undefined identifier `OLD_MEMORY_OBJECT_BEHAVIOR_INFO`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/memory_object_types.h:238:9
pub const SET_MAP_MEM = @compileError("unable to translate C expr: expected ')' instead got '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/memory_object_types.h:271:9
pub const ts_32 = @compileError("unable to translate macro: undefined identifier `uts`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/arm/thread_status.h:155:9
pub const ts_64 = @compileError("unable to translate macro: undefined identifier `uts`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/arm/thread_status.h:156:9
pub const UPDATE_IO_STATS = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/thread_info.h:175:9
pub const UPDATE_IO_STATS_ATOMIC = @compileError("unable to translate macro: undefined identifier `OSIncrementAtomic64`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/thread_info.h:181:9
pub const KMOD_DECL = @compileError("unable to translate macro: undefined identifier `_module_start`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/kmod.h:147:9
pub const KMOD_EXPLICIT_DECL = @compileError("unable to translate C expr: unexpected token '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/kmod.h:155:9
pub const iokit_common_err = @compileError("unable to translate C expr: expected ')' instead got 'return'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/IOKit.framework/Headers/IOReturn.h:90:9
pub const iokit_family_err = @compileError("unable to translate C expr: expected ')' instead got 'return'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/IOKit.framework/Headers/IOReturn.h:91:9
pub const iokit_vendor_specific_err = @compileError("unable to translate C expr: expected ')' instead got 'return'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/IOKit.framework/Headers/IOReturn.h:92:9
pub const IO_NULL_VM_TASK = @compileError("unable to translate macro: undefined identifier `vm_task_t`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/IOKit.framework/Headers/IOTypes.h:146:9
pub const MPLibraryPName = @compileError("unable to translate macro: undefined identifier `p`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Multiprocessing.h:63:9
pub const MPRPC = @compileError("unable to translate macro: undefined identifier `_MPRPC`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Multiprocessing.h:1699:9
pub const MPTaskIsToolboxSafe = @compileError("unable to translate macro: undefined identifier `_MPTaskIsToolboxSafe`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Multiprocessing.h:1700:9
pub const QuoteExceptionString = @compileError("unable to translate C expr: unexpected token '#'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Debugging.h:91:9
pub const DEBUGASSERTMSG = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Debugging.h:179:15
pub const __Debug_String = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:253:13
pub const __Check = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:286:13
pub const __Check_String = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:324:13
pub const __Check_noErr = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:359:13
pub const __Check_noErr_String = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:395:13
pub const __Verify = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:428:13
pub const __Verify_String = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:473:13
pub const __Verify_noErr = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:515:13
pub const __Verify_noErr_String = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:557:13
pub const __Verify_noErr_Action = @compileError("unable to translate C expr: unexpected token 'if'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:600:13
pub const __Verify_Action = @compileError("unable to translate C expr: unexpected token 'if'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:640:13
pub const __Require = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:677:13
pub const __Require_Action = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:728:13
pub const __Require_Quiet = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:777:10
pub const __Require_Action_Quiet = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:810:10
pub const __Require_String = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:851:13
pub const __Require_Action_String = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:907:13
pub const __Require_noErr = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:961:13
pub const __Require_noErr_Action = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:1010:13
pub const __Require_noErr_Quiet = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:1056:10
pub const __Require_noErr_Action_Quiet = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:1086:10
pub const __Require_noErr_String = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:1122:13
pub const __Require_noErr_Action_String = @compileError("unable to translate C expr: unexpected token 'do'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:1174:13
pub const __Check_Compile_Time = @compileError("unable to translate C expr: unexpected token '_Static_assert'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/AssertMacros.h:1232:17
pub const check_tasklevel0_string = @compileError("unable to translate macro: undefined identifier `__Check_string`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Debugging.h:231:9
pub const require_tasklevel0_action = @compileError("unable to translate macro: undefined identifier `__Require_action`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Debugging.h:247:9
pub const require_tasklevel0_quiet = @compileError("unable to translate macro: undefined identifier `__Require_quiet`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Debugging.h:251:9
pub const require_tasklevel0_action_quiet = @compileError("unable to translate macro: undefined identifier `__Require_action_quiet`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Debugging.h:255:9
pub const require_tasklevel0_string = @compileError("unable to translate macro: undefined identifier `__Require_string`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Debugging.h:259:9
pub const require_tasklevel0_action_string = @compileError("unable to translate macro: undefined identifier `__Require_action_string`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Debugging.h:263:9
pub const DPRINTF = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/Debugging.h:285:13
pub const PEFRelocBasicOpcode = @compileError("unable to translate macro: undefined identifier `kPEFRelocBasicOpcodes`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/PEFBinaryFormat.h:659:9
pub const PEFRelocComposeLgBySection = @compileError("unable to translate macro: undefined identifier `PEFRelocComposeLgSetOrBySection`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/PEFBinaryFormat.h:1073:9
pub const PEFRelocComposeLgSetSectC = @compileError("unable to translate macro: undefined identifier `PEFRelocComposeLgSetOrBySection`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/PEFBinaryFormat.h:1074:9
pub const PEFRelocComposeLgSetSectD = @compileError("unable to translate macro: undefined identifier `PEFRelocComposeLgSetOrBySection`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/PEFBinaryFormat.h:1075:9
pub const hl_firstLinkID = @compileError("unable to translate macro: undefined identifier `reserved1`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/hfs/hfs_format.h:280:9
pub const hl_prevLinkID = @compileError("unable to translate macro: undefined identifier `bsdInfo`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/hfs/hfs_format.h:282:9
pub const hl_nextLinkID = @compileError("unable to translate macro: undefined identifier `bsdInfo`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/hfs/hfs_format.h:283:9
pub const hl_linkReference = @compileError("unable to translate macro: undefined identifier `bsdInfo`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/hfs/hfs_format.h:285:9
pub const hl_linkCount = @compileError("unable to translate macro: undefined identifier `bsdInfo`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/hfs/hfs_format.h:286:9
pub const UUID_DEFINE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/uuid/uuid.h:46:9
pub const NoneName = @compileError("unable to translate macro: undefined identifier `pnot`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/AIFF.h:58:9
pub const ACE2to1Name = @compileError("unable to translate macro: undefined identifier `pACE`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/AIFF.h:59:9
pub const ACE8to3Name = @compileError("unable to translate macro: undefined identifier `pACE`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/AIFF.h:60:9
pub const MACE3to1Name = @compileError("unable to translate macro: undefined identifier `pMACE`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/AIFF.h:61:9
pub const MACE6to1Name = @compileError("unable to translate macro: undefined identifier `pMACE`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/CarbonCore.framework/Headers/AIFF.h:62:9
pub const AEInitializeDescInline = @compileError("unable to translate macro: undefined identifier `d`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/AE.framework/Headers/AEDataModel.h:844:13
pub const CFN_EXPORT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CFNetwork.framework/Headers/CFNetworkDefs.h:31:10
pub const CSSM_DEPRECATED = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecBase.h:71:9
pub const SEC_ASN1_API_DEPRECATED = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecAsn1Types.h:48:9
pub const SEC_SUFFIX_LEGACYMAC = @compileError("unable to translate macro: undefined identifier `__asm`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecCertificate.h:160:9
pub const SEC_OBJECT_DECL = @compileError("unable to translate macro: undefined identifier `_t`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolObject.h:33:11
pub const SEC_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolObject.h:39:11
pub const SEC_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecProtocolObject.h:40:11
pub const SECASN1OID_DEF = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/oidsbase.h:33:9
pub const GOOGLE_BASE_OID_LEN = @compileError("unable to translate macro: undefined identifier `OID_DOD_LEN`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/oidsbase.h:505:9
pub const NMBCLUSTERS = @compileError("unable to translate macro: undefined identifier `CONFIG_NMBCLUSTERS`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/arm/param.h:93:9
pub const DELAY = @compileError("unable to translate macro: undefined identifier `N`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/arm/param.h:146:9
pub const CBSIZE = @compileError("unable to translate macro: undefined identifier `cblock`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/param.h:167:9
pub const setbit = @compileError("unable to translate C expr: expected ')' instead got '|='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/param.h:200:9
pub const clrbit = @compileError("unable to translate C expr: expected ')' instead got '&='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/sys/param.h:201:9
pub const __AUDIT_API_DEPRECATED = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/bsm/audit.h:338:9
pub const XPC_CONSTRUCTOR = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:40:9
pub const XPC_NORETURN = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:41:9
pub const XPC_NOTHROW = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:42:9
pub const XPC_NONNULL1 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:43:9
pub const XPC_NONNULL2 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:44:9
pub const XPC_NONNULL3 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:45:9
pub const XPC_NONNULL4 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:46:9
pub const XPC_NONNULL5 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:47:9
pub const XPC_NONNULL6 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:48:9
pub const XPC_NONNULL7 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:49:9
pub const XPC_NONNULL8 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:50:9
pub const XPC_NONNULL9 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:51:9
pub const XPC_NONNULL10 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:52:9
pub const XPC_NONNULL11 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:53:9
pub const XPC_NONNULL_ALL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:54:9
pub const XPC_SENTINEL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:55:9
pub const XPC_PURE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:56:9
pub const XPC_WARN_RESULT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:57:9
pub const XPC_MALLOC = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:58:9
pub const XPC_UNUSED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:59:9
pub const XPC_USED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:60:9
pub const XPC_PACKED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:61:9
pub const XPC_PRINTF = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:62:9
pub const XPC_INLINE = @compileError("unable to translate macro: undefined identifier `__inline__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:63:9
pub const XPC_NOINLINE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:64:9
pub const XPC_NOIMPL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:65:9
pub const XPC_NOESCAPE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:68:9
pub const XPC_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:74:9
pub const XPC_EXPORT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:79:9
pub const XPC_NOEXPORT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:80:9
pub const XPC_WEAKIMPORT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:81:9
pub const XPC_TRANSPARENT_UNION = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:83:9
pub const XPC_DEPRECATED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:85:9
pub const XPC_TESTSTATIC = @compileError("unable to translate C expr: unexpected token 'static'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:97:9
pub const XPC_ASSUME_NONNULL_BEGIN = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:185:9
pub const XPC_ASSUME_NONNULL_END = @compileError("unable to translate macro: undefined identifier `_Pragma`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:186:9
pub const XPC_NONNULL_ARRAY = @compileError("unable to translate macro: undefined identifier `_Nonnull`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:193:9
pub const XPC_FLAGS_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:199:9
pub const XPC_ENUM = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/base.h:207:9
pub const XPC_TYPE = @compileError("unable to translate C expr: unexpected token 'const'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/xpc.h:48:9
pub const XPC_DECL = @compileError("unable to translate macro: undefined identifier `_`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/xpc/xpc.h:83:9
pub const MACH_IPC_FLAVOR = @compileError("unable to translate macro: undefined identifier `UNTYPED`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/mach.h:63:9
pub const MIG_SERVER_ROUTINE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/mig.h:149:9
pub const subsystem_to_name_map_clock_priv = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/clock_priv.h:191:9
pub const SET_MZI_COLLECTABLE_BYTES = @compileError("unable to translate C expr: unexpected token '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach_debug/zone_info.h:129:9
pub const SET_MZI_COLLECTABLE_FLAG = @compileError("unable to translate C expr: unexpected token '='"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach_debug/zone_info.h:131:9
pub const subsystem_to_name_map_host_priv = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/host_priv.h:1134:9
pub const subsystem_to_name_map_host_security = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/host_security.h:213:9
pub const subsystem_to_name_map_lock_set = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/lock_set.h:338:9
pub const subsystem_to_name_map_processor = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/processor.h:348:9
pub const subsystem_to_name_map_processor_set = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/processor_set.h:568:9
pub const subsystem_to_name_map_task = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/task.h:2722:9
pub const subsystem_to_name_map_thread_act = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/thread_act.h:1387:9
pub const subsystem_to_name_map_vm_map = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/vm_map.h:1467:9
pub const subsystem_to_name_map_mach_port = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/mach_port.h:1890:9
pub const subsystem_to_name_map_mach_host = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/mach/mach_host.h:1255:9
pub const __SECURETRANSPORT_API_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/Security.framework/Headers/SecureTransport.h:76:9
pub const DER_counted_by = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/libDER/libDER_config.h:141:9
pub const DER_sized_by = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/libDER/libDER_config.h:142:9
pub const DER_ended_by = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/libDER/libDER_config.h:143:9
pub const DER_firebloom_replaced = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/libDER/libDER_config.h:150:9
pub const MD_EXPORT = @compileError("unable to translate C expr: unexpected token 'extern'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.framework/Headers/MDItem.h:41:25
pub const MD_AVAIL = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.framework/Headers/MDItem.h:43:17
pub const MD_AVAIL_LEOPARD = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.framework/Headers/MDItem.h:44:17
pub const MD_DEPRECATED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreServices.framework/Frameworks/Metadata.framework/Headers/MDItem.h:55:25
pub const ATS_AVAILABLE_BUT_DEPRECATED_WITH_ADVICE = @compileError("unable to translate macro: undefined identifier `__MAC_`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.framework/Headers/ATSDefines.h:17:11
pub const ATS_AVAILABLE_BUT_DEPRECATED = @compileError("unable to translate macro: undefined identifier `AVAILABLE_MAC_OS_X_VERSION_`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.framework/Headers/ATSDefines.h:33:11
pub const ATS_DEPRECATED_IN_MAC_OS_X_VERSION = @compileError("unable to translate macro: undefined identifier `DEPRECATED_IN_MAC_OS_X_VERSION_`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.framework/Headers/ATSDefines.h:40:10
pub const __CG_HAS_COMPILER_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `__has_attribute`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:19:11
pub const __CG_HAS_COMPILER_EXTENSION = @compileError("unable to translate macro: undefined identifier `__has_extension`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:31:11
pub const CG_EXTERN = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:68:12
pub const CG_LOCAL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:80:12
pub const CG_EXTERN_32 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:115:11
pub const CG_LOCAL_32 = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:135:11
pub const __CG_DEPRECATED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:145:11
pub const __CG_DEPRECATED_WITH_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:157:11
pub const __CG_DEPRECATED_ENUMERATOR = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:169:11
pub const __CG_DEPRECATED_ENUMERATOR_WITH_MSG = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:182:11
pub const GET_CG_AVAIL_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:190:9
pub const CG_AVAILABLE_STARTING = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:191:9
pub const CG_AVAILABLE_STARTING_IOS = @compileError("unable to translate macro: undefined identifier `ios`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:192:9
pub const CG_AVAILABLE_STARTING1 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:193:9
pub const CG_AVAILABLE_STARTING2 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:194:9
pub const GET_CG_AVAIL_BUT_DEPR_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:196:9
pub const CG_AVAILABLE_BUT_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:197:9
pub const CG_AVAILABLE_BUT_DEPRECATED1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:198:9
pub const CG_AVAILABLE_BUT_DEPRECATED2 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:199:9
pub const CG_AVAILABLE_BUT_DEPRECATED3 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:200:9
pub const CG_AVAILABLE_BUT_DEPRECATED4 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:201:9
pub const CG_AVAILABLE_BUT_DEPRECATED5 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:202:9
pub const CG_UNAVAILABLE_DESKTOP = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:203:9
pub const CG_UNAVAILABLE_EMBEDDED = @compileError("unable to translate macro: undefined identifier `ios`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:204:9
pub const __CG_STATIC_ASSERT = @compileError("unable to translate C expr: unexpected token '_Static_assert'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:275:11
pub const CG_INLINE = @compileError("unable to translate C expr: unexpected token 'static'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:286:11
pub const __CG_NO_INLINE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:302:11
pub const __CG_FORMAT_PRINTF = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:312:11
pub const __CG_FORMAT_VPRINTF = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:324:11
pub const CG_BOXABLE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreGraphics.framework/Headers/CGBase.h:388:10
pub const DisposeFMFontFamilyCallbackFilterUPP = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.framework/Headers/ATSTypes.h:243:13
pub const DisposeFMFontCallbackFilterUPP = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.framework/Headers/ATSTypes.h:244:13
pub const DisposeATSUDirectLayoutOperationOverrideUPP = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/ATS.framework/Headers/ATSLayoutTypes.h:654:13
pub const __CS_HAS_COMPILER_ATTRIBUTE = @compileError("unable to translate macro: undefined identifier `__has_attribute`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:25:17
pub const CSEXTERN = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:41:17
pub const CSEXPORT = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:53:17
pub const CSLOCAL = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:62:21
pub const GET_CS_AVAIL_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:82:9
pub const CS_AVAILABLE_STARTING = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:83:9
pub const CS_AVAILABLE_STARTING_IOS = @compileError("unable to translate macro: undefined identifier `ios`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:84:9
pub const CS_AVAILABLE_STARTING1 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:85:9
pub const CS_AVAILABLE_STARTING2 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:86:9
pub const GET_CS_AVAIL_BUT_DEPR_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:88:9
pub const CS_AVAILABLE_BUT_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:89:9
pub const CS_AVAILABLE_BUT_DEPRECATED1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:90:9
pub const CS_AVAILABLE_BUT_DEPRECATED2 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:91:9
pub const CS_AVAILABLE_BUT_DEPRECATED3 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:92:9
pub const CS_AVAILABLE_BUT_DEPRECATED4 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:93:9
pub const CS_AVAILABLE_BUT_DEPRECATED5 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:94:9
pub const CS_UNAVAILABLE_DESKTOP = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:95:9
pub const CS_UNAVAILABLE_EMBEDDED = @compileError("unable to translate macro: undefined identifier `ios`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:96:9
pub const CS_AVAILABLE_PUBLIC_STARTING = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:99:9
pub const CS_AVAILABLE_PUBLIC_DESKTOP = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ColorSync.framework/Headers/ColorSyncBase.h:100:9
pub const OSATOMIC_BARRIER_DEPRECATED_MSG = @compileError("unable to translate C expr: unexpected token '#'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/libkern/OSAtomicDeprecated.h:50:9
pub const OSATOMIC_DEPRECATED_MSG = @compileError("unable to translate C expr: unexpected token '#'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/libkern/OSAtomicDeprecated.h:52:9
pub const OSATOMIC_BARRIER_DEPRECATED_REPLACE_WITH = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/libkern/OSAtomicDeprecated.h:60:9
pub const OSATOMIC_DEPRECATED_REPLACE_WITH = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/libkern/OSAtomicDeprecated.h:65:9
pub const OS_ATOMIC_FIFO_QUEUE_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/libkern/OSAtomicDeprecated.h:1211:9
pub const OSSPINLOCK_DEPRECATED_MSG = @compileError("unable to translate C expr: unexpected token '#'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/libkern/OSSpinLockDeprecated.h:45:9
pub const OSSPINLOCK_DEPRECATED_REPLACE_WITH = @compileError("unable to translate macro: undefined identifier `macosx`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/libkern/OSSpinLockDeprecated.h:46:9
pub const OS_ATOMIC_QUEUE_INIT = @compileError("unable to translate C expr: unexpected token '{'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/libkern/OSAtomicQueue.h:63:9
pub const CT_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTDefines.h:29:10
pub const CT_UNAVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTDefines.h:30:10
pub const CT_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTDefines.h:31:10
pub const CT_DEPRECATED_WITH_REPLACEMENT = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTDefines.h:32:10
pub const CT_ENUM_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTDefines.h:36:10
pub const CT_ENUM_AVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTDefines.h:37:10
pub const CT_ENUM_UNAVAILABLE = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTDefines.h:38:10
pub const CT_EXPORT = @compileError("unable to translate C expr: unexpected token 'extern'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/CoreText.framework/Headers/CTDefines.h:83:10
pub const kICReservedKey = @compileError("unable to translate macro: undefined identifier `pkICReservedKey`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:336:9
pub const kICArchieAll = @compileError("unable to translate macro: undefined identifier `pArchieAll`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:340:9
pub const kICArchiePreferred = @compileError("unable to translate macro: undefined identifier `pArchiePreferred`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:344:9
pub const kICCharacterSet = @compileError("unable to translate macro: undefined identifier `pCharacterSet`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:348:9
pub const kICDocumentFont = @compileError("unable to translate macro: undefined identifier `pDocumentFont`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:352:9
pub const kICDownloadFolder = @compileError("unable to translate macro: undefined identifier `pDownloadFolder`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:356:9
pub const kICEmail = @compileError("unable to translate macro: undefined identifier `pEmail`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:360:9
pub const kICFTPHost = @compileError("unable to translate macro: undefined identifier `pFTPHost`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:364:9
pub const kICFTPProxyAccount = @compileError("unable to translate macro: undefined identifier `pFTPProxyAccount`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:368:9
pub const kICFTPProxyHost = @compileError("unable to translate macro: undefined identifier `pFTPProxyHost`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:372:9
pub const kICFTPProxyPassword = @compileError("unable to translate macro: undefined identifier `pFTPProxyPassword`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:376:9
pub const kICFTPProxyUser = @compileError("unable to translate macro: undefined identifier `pFTPProxyUser`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:380:9
pub const kICFingerHost = @compileError("unable to translate macro: undefined identifier `pFingerHost`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:384:9
pub const kICGopherHost = @compileError("unable to translate macro: undefined identifier `pGopherHost`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:388:9
pub const kICGopherProxy = @compileError("unable to translate macro: undefined identifier `pGopherProxy`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:392:9
pub const kICHTTPProxyHost = @compileError("unable to translate macro: undefined identifier `pHTTPProxyHost`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:396:9
pub const kICHelper = @compileError("unable to translate macro: undefined identifier `pHelper`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:400:9
pub const kICHelperDesc = @compileError("unable to translate macro: undefined identifier `pHelperDesc`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:404:9
pub const kICHelperList = @compileError("unable to translate macro: undefined identifier `pHelperList`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:408:9
pub const kICIRCHost = @compileError("unable to translate macro: undefined identifier `pIRCHost`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:412:9
pub const kICInfoMacAll = @compileError("unable to translate macro: undefined identifier `pInfoMacAll`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:416:9
pub const kICInfoMacPreferred = @compileError("unable to translate macro: undefined identifier `pInfoMacPreferred`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:420:9
pub const kICLDAPSearchbase = @compileError("unable to translate macro: undefined identifier `pLDAPSearchbase`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:424:9
pub const kICLDAPServer = @compileError("unable to translate macro: undefined identifier `pLDAPServer`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:428:9
pub const kICListFont = @compileError("unable to translate macro: undefined identifier `pListFont`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:432:9
pub const kICMacSearchHost = @compileError("unable to translate macro: undefined identifier `pMacSearchHost`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:436:9
pub const kICMailAccount = @compileError("unable to translate macro: undefined identifier `pMailAccount`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:440:9
pub const kICMailHeaders = @compileError("unable to translate macro: undefined identifier `pMailHeaders`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:444:9
pub const kICMailPassword = @compileError("unable to translate macro: undefined identifier `pMailPassword`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:448:9
pub const kICMapping = @compileError("unable to translate macro: undefined identifier `pMapping`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:452:9
pub const kICNNTPHost = @compileError("unable to translate macro: undefined identifier `pNNTPHost`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:456:9
pub const kICNTPHost = @compileError("unable to translate macro: undefined identifier `pNTPHost`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:460:9
pub const kICNewMailDialog = @compileError("unable to translate macro: undefined identifier `pNewMailDialog`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:464:9
pub const kICNewMailFlashIcon = @compileError("unable to translate macro: undefined identifier `pNewMailFlashIcon`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:468:9
pub const kICNewMailPlaySound = @compileError("unable to translate macro: undefined identifier `pNewMailPlaySound`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:472:9
pub const kICNewMailSoundName = @compileError("unable to translate macro: undefined identifier `pNewMailSoundName`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:476:9
pub const kICNewsAuthPassword = @compileError("unable to translate macro: undefined identifier `pNewsAuthPassword`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:480:9
pub const kICNewsAuthUsername = @compileError("unable to translate macro: undefined identifier `pNewsAuthUsername`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:484:9
pub const kICNewsHeaders = @compileError("unable to translate macro: undefined identifier `pNewsHeaders`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:488:9
pub const kICNoProxyDomains = @compileError("unable to translate macro: undefined identifier `pNoProxyDomains`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:492:9
pub const kICOrganization = @compileError("unable to translate macro: undefined identifier `pOrganization`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:496:9
pub const kICPhHost = @compileError("unable to translate macro: undefined identifier `pPhHost`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:500:9
pub const kICPlan = @compileError("unable to translate macro: undefined identifier `pPlan`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:504:9
pub const kICPrinterFont = @compileError("unable to translate macro: undefined identifier `pPrinterFont`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:508:9
pub const kICQuotingString = @compileError("unable to translate macro: undefined identifier `pQuotingString`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:512:9
pub const kICRealName = @compileError("unable to translate macro: undefined identifier `pRealName`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:516:9
pub const kICRTSPProxyHost = @compileError("unable to translate macro: undefined identifier `pRTSPProxyHost`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:520:9
pub const kICSMTPHost = @compileError("unable to translate macro: undefined identifier `pSMTPHost`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:524:9
pub const kICScreenFont = @compileError("unable to translate macro: undefined identifier `pScreenFont`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:528:9
pub const kICServices = @compileError("unable to translate macro: undefined identifier `pServices`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:532:9
pub const kICSignature = @compileError("unable to translate macro: undefined identifier `pSignature`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:536:9
pub const kICSnailMailAddress = @compileError("unable to translate macro: undefined identifier `pSnailMailAddress`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:540:9
pub const kICSocksHost = @compileError("unable to translate macro: undefined identifier `pSocksHost`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:544:9
pub const kICTelnetHost = @compileError("unable to translate macro: undefined identifier `pTelnetHost`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:548:9
pub const kICUMichAll = @compileError("unable to translate macro: undefined identifier `pUMichAll`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:552:9
pub const kICUMichPreferred = @compileError("unable to translate macro: undefined identifier `pUMichPreferred`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:556:9
pub const kICUseFTPProxy = @compileError("unable to translate macro: undefined identifier `pUseFTPProxy`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:560:9
pub const kICUseGopherProxy = @compileError("unable to translate macro: undefined identifier `pUseGopherProxy`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:564:9
pub const kICUseHTTPProxy = @compileError("unable to translate macro: undefined identifier `pUseHTTPProxy`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:568:9
pub const kICUsePassiveFTP = @compileError("unable to translate macro: undefined identifier `pUsePassiveFTP`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:572:9
pub const kICUseRTSPProxy = @compileError("unable to translate macro: undefined identifier `pUseRTSPProxy`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:576:9
pub const kICUseSocks = @compileError("unable to translate macro: undefined identifier `pUseSocks`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:580:9
pub const kICWAISGateway = @compileError("unable to translate macro: undefined identifier `pWAISGateway`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:584:9
pub const kICWWWHomePage = @compileError("unable to translate macro: undefined identifier `pWWWHomePage`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:588:9
pub const kICWebBackgroundColour = @compileError("unable to translate macro: undefined identifier `pWebBackgroundColour`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:592:9
pub const kICWebReadColor = @compileError("unable to translate macro: undefined identifier `p646F6777`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:596:9
pub const kICWebSearchPagePrefs = @compileError("unable to translate macro: undefined identifier `pWebSearchPagePrefs`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:600:9
pub const kICWebTextColor = @compileError("unable to translate macro: undefined identifier `pWebTextColor`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:604:9
pub const kICWebUnderlineLinks = @compileError("unable to translate macro: undefined identifier `p646F6777`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:608:9
pub const kICWebUnreadColor = @compileError("unable to translate macro: undefined identifier `p646F6777`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:612:9
pub const kICWhoisHost = @compileError("unable to translate macro: undefined identifier `pWhoisHost`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ApplicationServices.framework/Frameworks/HIServices.framework/Headers/InternetConfig.h:616:9
pub const GET_IMAGEIO_AVAIL_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:37:9
pub const IMAGEIO_AVAILABLE_STARTING = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:38:9
pub const IMAGEIO_AVAILABLE_STARTING1 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:39:9
pub const IMAGEIO_AVAILABLE_STARTING2 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:40:9
pub const IMAGEIO_AVAILABLE_STARTING3 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:41:9
pub const IMAGEIO_AVAILABLE_STARTING4 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:42:9
pub const GET_IMAGEIO_AVAIL_BUT_DEPR_MACRO = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:44:9
pub const IMAGEIO_AVAILABLE_BUT_DEPRECATED = @compileError("unable to translate C expr: expected ')' instead got '...'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:45:9
pub const IMAGEIO_AVAILABLE_BUT_DEPRECATED1 = @compileError("unable to translate C expr: unexpected token 'Eof'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:46:9
pub const IMAGEIO_AVAILABLE_BUT_DEPRECATED2 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:47:9
pub const IMAGEIO_AVAILABLE_BUT_DEPRECATED3 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:48:9
pub const IMAGEIO_AVAILABLE_BUT_DEPRECATED4 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:49:9
pub const IMAGEIO_AVAILABLE_BUT_DEPRECATED5 = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:50:9
pub const IMAGEIO_UNAVAILABLE_DESKTOP = @compileError("unable to translate macro: undefined identifier `macos`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:52:9
pub const IMAGEIO_UNAVAILABLE_EMBEDDED = @compileError("unable to translate macro: undefined identifier `ios`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:53:9
pub const _iio_Nullable = @compileError("unable to translate macro: undefined identifier `_Nullable`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:55:10
pub const _iio_Nonnull = @compileError("unable to translate macro: undefined identifier `_Nonnull`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:56:10
pub const IMAGEIO_EXTERN = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/System/Library/Frameworks/ImageIO.framework/Headers/ImageIOBase.h:79:20
pub const OBJC_AVAILABLE = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/objc/objc-api.h:122:16
pub const OBJC_OSX_DEPRECATED_OTHERS_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/objc/objc-api.h:133:16
pub const OBJC_OSX_AVAILABLE_OTHERS_UNAVAILABLE = @compileError("unable to translate C expr: unexpected token 'Identifier'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/objc/objc-api.h:145:16
pub const OBJC_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/objc/objc-api.h:166:16
pub const OBJC_DEPRECATED = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/objc/objc-api.h:175:16
pub const OBJC_SWIFT_UNAVAILABLE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/objc/objc-api.h:193:16
pub const OBJC_EXTERN = @compileError("unable to translate C expr: unexpected token 'extern'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/objc/objc-api.h:217:16
pub const OBJC_VISIBLE = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/objc/objc-api.h:229:16
pub const OBJC_IMPORT = @compileError("unable to translate C expr: unexpected token 'extern'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/objc/objc-api.h:238:12
pub const OBJC_ROOT_CLASS = @compileError("unable to translate macro: undefined identifier `__attribute__`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/objc/objc-api.h:243:16
pub const OBJC_INLINE = @compileError("unable to translate macro: undefined identifier `__inline`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/objc/objc-api.h:254:12
pub const OBJC_ENUM = @compileError("unable to translate C expr: unexpected token ';'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/objc/objc-api.h:266:9
pub const OBJC_OPTIONS = @compileError("unable to translate C expr: unexpected token ';'"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/objc/objc-api.h:267:9
pub const YES = @compileError("unable to translate macro: undefined identifier `__objc_yes`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/objc/objc.h:89:9
pub const NO = @compileError("unable to translate macro: undefined identifier `__objc_no`"); // /Users/slimsag/Library/Application Support/hexops/sdk-macos-12.0/root/usr/include/objc/objc.h:90:9
pub const __llvm__ = @as(c_int, 1);
pub const __clang__ = @as(c_int, 1);
pub const __clang_major__ = @as(c_int, 14);
pub const __clang_minor__ = @as(c_int, 0);
pub const __clang_patchlevel__ = @as(c_int, 6);
pub const __clang_version__ = "14.0.6 ";
pub const __GNUC__ = @as(c_int, 4);
pub const __GNUC_MINOR__ = @as(c_int, 2);
pub const __GNUC_PATCHLEVEL__ = @as(c_int, 1);
pub const __GXX_ABI_VERSION = @as(c_int, 1002);
pub const __ATOMIC_RELAXED = @as(c_int, 0);
pub const __ATOMIC_CONSUME = @as(c_int, 1);
pub const __ATOMIC_ACQUIRE = @as(c_int, 2);
pub const __ATOMIC_RELEASE = @as(c_int, 3);
pub const __ATOMIC_ACQ_REL = @as(c_int, 4);
pub const __ATOMIC_SEQ_CST = @as(c_int, 5);
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = @as(c_int, 0);
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = @as(c_int, 1);
pub const __OPENCL_MEMORY_SCOPE_DEVICE = @as(c_int, 2);
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = @as(c_int, 3);
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = @as(c_int, 4);
pub const __PRAGMA_REDEFINE_EXTNAME = @as(c_int, 1);
pub const __VERSION__ = "Homebrew Clang 14.0.6";
pub const __OBJC_BOOL_IS_BOOL = @as(c_int, 1);
pub const __CONSTANT_CFSTRINGS__ = @as(c_int, 1);
pub const __BLOCKS__ = @as(c_int, 1);
pub const __clang_literal_encoding__ = "UTF-8";
pub const __clang_wide_literal_encoding__ = "UTF-32";
pub const __ORDER_LITTLE_ENDIAN__ = @as(c_int, 1234);
pub const __ORDER_BIG_ENDIAN__ = @as(c_int, 4321);
pub const __ORDER_PDP_ENDIAN__ = @as(c_int, 3412);
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const __LITTLE_ENDIAN__ = @as(c_int, 1);
pub const _LP64 = @as(c_int, 1);
pub const __LP64__ = @as(c_int, 1);
pub const __CHAR_BIT__ = @as(c_int, 8);
pub const __BOOL_WIDTH__ = @as(c_int, 8);
pub const __SHRT_WIDTH__ = @as(c_int, 16);
pub const __INT_WIDTH__ = @as(c_int, 32);
pub const __LONG_WIDTH__ = @as(c_int, 64);
pub const __LLONG_WIDTH__ = @as(c_int, 64);
pub const __BITINT_MAXWIDTH__ = @as(c_int, 128);
pub const __SCHAR_MAX__ = @as(c_int, 127);
pub const __SHRT_MAX__ = @as(c_int, 32767);
pub const __INT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __LONG_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __WCHAR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WCHAR_WIDTH__ = @as(c_int, 32);
pub const __WINT_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __WINT_WIDTH__ = @as(c_int, 32);
pub const __INTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTMAX_WIDTH__ = @as(c_int, 64);
pub const __SIZE_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __SIZE_WIDTH__ = @as(c_int, 64);
pub const __UINTMAX_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTMAX_WIDTH__ = @as(c_int, 64);
pub const __PTRDIFF_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __PTRDIFF_WIDTH__ = @as(c_int, 64);
pub const __INTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const __INTPTR_WIDTH__ = @as(c_int, 64);
pub const __UINTPTR_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const __UINTPTR_WIDTH__ = @as(c_int, 64);
pub const __SIZEOF_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_FLOAT__ = @as(c_int, 4);
pub const __SIZEOF_INT__ = @as(c_int, 4);
pub const __SIZEOF_LONG__ = @as(c_int, 8);
pub const __SIZEOF_LONG_DOUBLE__ = @as(c_int, 8);
pub const __SIZEOF_LONG_LONG__ = @as(c_int, 8);
pub const __SIZEOF_POINTER__ = @as(c_int, 8);
pub const __SIZEOF_SHORT__ = @as(c_int, 2);
pub const __SIZEOF_PTRDIFF_T__ = @as(c_int, 8);
pub const __SIZEOF_SIZE_T__ = @as(c_int, 8);
pub const __SIZEOF_WCHAR_T__ = @as(c_int, 4);
pub const __SIZEOF_WINT_T__ = @as(c_int, 4);
pub const __SIZEOF_INT128__ = @as(c_int, 16);
pub const __INTMAX_TYPE__ = c_long;
pub const __INTMAX_FMTd__ = "ld";
pub const __INTMAX_FMTi__ = "li";
pub const __UINTMAX_TYPE__ = c_ulong;
pub const __UINTMAX_FMTo__ = "lo";
pub const __UINTMAX_FMTu__ = "lu";
pub const __UINTMAX_FMTx__ = "lx";
pub const __UINTMAX_FMTX__ = "lX";
pub const __PTRDIFF_TYPE__ = c_long;
pub const __PTRDIFF_FMTd__ = "ld";
pub const __PTRDIFF_FMTi__ = "li";
pub const __INTPTR_TYPE__ = c_long;
pub const __INTPTR_FMTd__ = "ld";
pub const __INTPTR_FMTi__ = "li";
pub const __SIZE_TYPE__ = c_ulong;
pub const __SIZE_FMTo__ = "lo";
pub const __SIZE_FMTu__ = "lu";
pub const __SIZE_FMTx__ = "lx";
pub const __SIZE_FMTX__ = "lX";
pub const __WCHAR_TYPE__ = c_int;
pub const __WINT_TYPE__ = c_int;
pub const __SIG_ATOMIC_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __SIG_ATOMIC_WIDTH__ = @as(c_int, 32);
pub const __CHAR16_TYPE__ = c_ushort;
pub const __CHAR32_TYPE__ = c_uint;
pub const __UINTPTR_TYPE__ = c_ulong;
pub const __UINTPTR_FMTo__ = "lo";
pub const __UINTPTR_FMTu__ = "lu";
pub const __UINTPTR_FMTx__ = "lx";
pub const __UINTPTR_FMTX__ = "lX";
pub const __FLT16_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT16_DIG__ = @as(c_int, 3);
pub const __FLT16_DECIMAL_DIG__ = @as(c_int, 5);
pub const __FLT16_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT16_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT16_MANT_DIG__ = @as(c_int, 11);
pub const __FLT16_MAX_10_EXP__ = @as(c_int, 4);
pub const __FLT16_MAX_EXP__ = @as(c_int, 16);
pub const __FLT16_MIN_10_EXP__ = -@as(c_int, 4);
pub const __FLT16_MIN_EXP__ = -@as(c_int, 13);
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const __FLT_HAS_DENORM__ = @as(c_int, 1);
pub const __FLT_DIG__ = @as(c_int, 6);
pub const __FLT_DECIMAL_DIG__ = @as(c_int, 9);
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const __FLT_HAS_INFINITY__ = @as(c_int, 1);
pub const __FLT_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __FLT_MANT_DIG__ = @as(c_int, 24);
pub const __FLT_MAX_10_EXP__ = @as(c_int, 38);
pub const __FLT_MAX_EXP__ = @as(c_int, 128);
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub const __FLT_MIN_10_EXP__ = -@as(c_int, 37);
pub const __FLT_MIN_EXP__ = -@as(c_int, 125);
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const __DBL_DENORM_MIN__ = 4.9406564584124654e-324;
pub const __DBL_HAS_DENORM__ = @as(c_int, 1);
pub const __DBL_DIG__ = @as(c_int, 15);
pub const __DBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __DBL_EPSILON__ = 2.2204460492503131e-16;
pub const __DBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __DBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __DBL_MANT_DIG__ = @as(c_int, 53);
pub const __DBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __DBL_MAX_EXP__ = @as(c_int, 1024);
pub const __DBL_MAX__ = 1.7976931348623157e+308;
pub const __DBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __DBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __DBL_MIN__ = 2.2250738585072014e-308;
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 4.9406564584124654e-324);
pub const __LDBL_HAS_DENORM__ = @as(c_int, 1);
pub const __LDBL_DIG__ = @as(c_int, 15);
pub const __LDBL_DECIMAL_DIG__ = @as(c_int, 17);
pub const __LDBL_EPSILON__ = @as(c_longdouble, 2.2204460492503131e-16);
pub const __LDBL_HAS_INFINITY__ = @as(c_int, 1);
pub const __LDBL_HAS_QUIET_NAN__ = @as(c_int, 1);
pub const __LDBL_MANT_DIG__ = @as(c_int, 53);
pub const __LDBL_MAX_10_EXP__ = @as(c_int, 308);
pub const __LDBL_MAX_EXP__ = @as(c_int, 1024);
pub const __LDBL_MAX__ = @as(c_longdouble, 1.7976931348623157e+308);
pub const __LDBL_MIN_10_EXP__ = -@as(c_int, 307);
pub const __LDBL_MIN_EXP__ = -@as(c_int, 1021);
pub const __LDBL_MIN__ = @as(c_longdouble, 2.2250738585072014e-308);
pub const __POINTER_WIDTH__ = @as(c_int, 64);
pub const __BIGGEST_ALIGNMENT__ = @as(c_int, 8);
pub const __INT8_TYPE__ = i8;
pub const __INT8_FMTd__ = "hhd";
pub const __INT8_FMTi__ = "hhi";
pub const __INT8_C_SUFFIX__ = "";
pub const __INT16_TYPE__ = c_short;
pub const __INT16_FMTd__ = "hd";
pub const __INT16_FMTi__ = "hi";
pub const __INT16_C_SUFFIX__ = "";
pub const __INT32_TYPE__ = c_int;
pub const __INT32_FMTd__ = "d";
pub const __INT32_FMTi__ = "i";
pub const __INT32_C_SUFFIX__ = "";
pub const __INT64_TYPE__ = c_longlong;
pub const __INT64_FMTd__ = "lld";
pub const __INT64_FMTi__ = "lli";
pub const __UINT8_TYPE__ = u8;
pub const __UINT8_FMTo__ = "hho";
pub const __UINT8_FMTu__ = "hhu";
pub const __UINT8_FMTx__ = "hhx";
pub const __UINT8_FMTX__ = "hhX";
pub const __UINT8_C_SUFFIX__ = "";
pub const __UINT8_MAX__ = @as(c_int, 255);
pub const __INT8_MAX__ = @as(c_int, 127);
pub const __UINT16_TYPE__ = c_ushort;
pub const __UINT16_FMTo__ = "ho";
pub const __UINT16_FMTu__ = "hu";
pub const __UINT16_FMTx__ = "hx";
pub const __UINT16_FMTX__ = "hX";
pub const __UINT16_C_SUFFIX__ = "";
pub const __UINT16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __INT16_MAX__ = @as(c_int, 32767);
pub const __UINT32_TYPE__ = c_uint;
pub const __UINT32_FMTo__ = "o";
pub const __UINT32_FMTu__ = "u";
pub const __UINT32_FMTx__ = "x";
pub const __UINT32_FMTX__ = "X";
pub const __UINT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __INT32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __UINT64_TYPE__ = c_ulonglong;
pub const __UINT64_FMTo__ = "llo";
pub const __UINT64_FMTu__ = "llu";
pub const __UINT64_FMTx__ = "llx";
pub const __UINT64_FMTX__ = "llX";
pub const __UINT64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __INT64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST8_TYPE__ = i8;
pub const __INT_LEAST8_MAX__ = @as(c_int, 127);
pub const __INT_LEAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __UINT_LEAST8_TYPE__ = u8;
pub const __UINT_LEAST8_MAX__ = @as(c_int, 255);
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const __INT_LEAST16_TYPE__ = c_short;
pub const __INT_LEAST16_MAX__ = @as(c_int, 32767);
pub const __INT_LEAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_LEAST16_FMTd__ = "hd";
pub const __INT_LEAST16_FMTi__ = "hi";
pub const __UINT_LEAST16_TYPE__ = c_ushort;
pub const __UINT_LEAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_LEAST16_FMTo__ = "ho";
pub const __UINT_LEAST16_FMTu__ = "hu";
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const __INT_LEAST32_TYPE__ = c_int;
pub const __INT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_LEAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_LEAST32_FMTd__ = "d";
pub const __INT_LEAST32_FMTi__ = "i";
pub const __UINT_LEAST32_TYPE__ = c_uint;
pub const __UINT_LEAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_LEAST32_FMTo__ = "o";
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __UINT_LEAST32_FMTx__ = "x";
pub const __UINT_LEAST32_FMTX__ = "X";
pub const __INT_LEAST64_TYPE__ = c_longlong;
pub const __INT_LEAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_LEAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_LEAST64_FMTd__ = "lld";
pub const __INT_LEAST64_FMTi__ = "lli";
pub const __UINT_LEAST64_TYPE__ = c_ulonglong;
pub const __UINT_LEAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_LEAST64_FMTo__ = "llo";
pub const __UINT_LEAST64_FMTu__ = "llu";
pub const __UINT_LEAST64_FMTx__ = "llx";
pub const __UINT_LEAST64_FMTX__ = "llX";
pub const __INT_FAST8_TYPE__ = i8;
pub const __INT_FAST8_MAX__ = @as(c_int, 127);
pub const __INT_FAST8_WIDTH__ = @as(c_int, 8);
pub const __INT_FAST8_FMTd__ = "hhd";
pub const __INT_FAST8_FMTi__ = "hhi";
pub const __UINT_FAST8_TYPE__ = u8;
pub const __UINT_FAST8_MAX__ = @as(c_int, 255);
pub const __UINT_FAST8_FMTo__ = "hho";
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const __INT_FAST16_TYPE__ = c_short;
pub const __INT_FAST16_MAX__ = @as(c_int, 32767);
pub const __INT_FAST16_WIDTH__ = @as(c_int, 16);
pub const __INT_FAST16_FMTd__ = "hd";
pub const __INT_FAST16_FMTi__ = "hi";
pub const __UINT_FAST16_TYPE__ = c_ushort;
pub const __UINT_FAST16_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const __UINT_FAST16_FMTo__ = "ho";
pub const __UINT_FAST16_FMTu__ = "hu";
pub const __UINT_FAST16_FMTx__ = "hx";
pub const __UINT_FAST16_FMTX__ = "hX";
pub const __INT_FAST32_TYPE__ = c_int;
pub const __INT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const __INT_FAST32_WIDTH__ = @as(c_int, 32);
pub const __INT_FAST32_FMTd__ = "d";
pub const __INT_FAST32_FMTi__ = "i";
pub const __UINT_FAST32_TYPE__ = c_uint;
pub const __UINT_FAST32_MAX__ = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const __UINT_FAST32_FMTo__ = "o";
pub const __UINT_FAST32_FMTu__ = "u";
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINT_FAST32_FMTX__ = "X";
pub const __INT_FAST64_TYPE__ = c_longlong;
pub const __INT_FAST64_MAX__ = @as(c_longlong, 9223372036854775807);
pub const __INT_FAST64_WIDTH__ = @as(c_int, 64);
pub const __INT_FAST64_FMTd__ = "lld";
pub const __INT_FAST64_FMTi__ = "lli";
pub const __UINT_FAST64_TYPE__ = c_ulonglong;
pub const __UINT_FAST64_MAX__ = @as(c_ulonglong, 18446744073709551615);
pub const __UINT_FAST64_FMTo__ = "llo";
pub const __UINT_FAST64_FMTu__ = "llu";
pub const __UINT_FAST64_FMTx__ = "llx";
pub const __UINT_FAST64_FMTX__ = "llX";
pub const __NO_MATH_ERRNO__ = @as(c_int, 1);
pub const __FINITE_MATH_ONLY__ = @as(c_int, 0);
pub const __GNUC_STDC_INLINE__ = @as(c_int, 1);
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = @as(c_int, 1);
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_INT_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = @as(c_int, 2);
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = @as(c_int, 2);
pub const __NO_INLINE__ = @as(c_int, 1);
pub const __PIC__ = @as(c_int, 2);
pub const __pic__ = @as(c_int, 2);
pub const __FLT_EVAL_METHOD__ = @as(c_int, 0);
pub const __FLT_RADIX__ = @as(c_int, 2);
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const __SSP_STRONG__ = @as(c_int, 2);
pub const __AARCH64EL__ = @as(c_int, 1);
pub const __aarch64__ = @as(c_int, 1);
pub const __AARCH64_CMODEL_SMALL__ = @as(c_int, 1);
pub const __ARM_ACLE = @as(c_int, 200);
pub const __ARM_ARCH = @as(c_int, 8);
pub const __ARM_ARCH_PROFILE = 'A';
pub const __ARM_64BIT_STATE = @as(c_int, 1);
pub const __ARM_PCS_AAPCS64 = @as(c_int, 1);
pub const __ARM_ARCH_ISA_A64 = @as(c_int, 1);
pub const __ARM_FEATURE_CLZ = @as(c_int, 1);
pub const __ARM_FEATURE_FMA = @as(c_int, 1);
pub const __ARM_FEATURE_LDREX = @as(c_int, 0xF);
pub const __ARM_FEATURE_IDIV = @as(c_int, 1);
pub const __ARM_FEATURE_DIV = @as(c_int, 1);
pub const __ARM_FEATURE_NUMERIC_MAXMIN = @as(c_int, 1);
pub const __ARM_FEATURE_DIRECTED_ROUNDING = @as(c_int, 1);
pub const __ARM_ALIGN_MAX_STACK_PWR = @as(c_int, 4);
pub const __ARM_FP = @as(c_int, 0xE);
pub const __ARM_FP16_FORMAT_IEEE = @as(c_int, 1);
pub const __ARM_FP16_ARGS = @as(c_int, 1);
pub const __ARM_SIZEOF_WCHAR_T = @as(c_int, 4);
pub const __ARM_SIZEOF_MINIMAL_ENUM = @as(c_int, 4);
pub const __ARM_NEON = @as(c_int, 1);
pub const __ARM_NEON_FP = @as(c_int, 0xE);
pub const __ARM_FEATURE_CRC32 = @as(c_int, 1);
pub const __ARM_FEATURE_CRYPTO = @as(c_int, 1);
pub const __ARM_FEATURE_AES = @as(c_int, 1);
pub const __ARM_FEATURE_SHA2 = @as(c_int, 1);
pub const __ARM_FEATURE_SHA3 = @as(c_int, 1);
pub const __ARM_FEATURE_SHA512 = @as(c_int, 1);
pub const __ARM_FEATURE_UNALIGNED = @as(c_int, 1);
pub const __ARM_FEATURE_FP16_VECTOR_ARITHMETIC = @as(c_int, 1);
pub const __ARM_FEATURE_FP16_SCALAR_ARITHMETIC = @as(c_int, 1);
pub const __ARM_FEATURE_DOTPROD = @as(c_int, 1);
pub const __ARM_FEATURE_ATOMICS = @as(c_int, 1);
pub const __ARM_FEATURE_FP16_FML = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = @as(c_int, 1);
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = @as(c_int, 1);
pub const __AARCH64_SIMD__ = @as(c_int, 1);
pub const __ARM64_ARCH_8__ = @as(c_int, 1);
pub const __ARM_NEON__ = @as(c_int, 1);
pub const __REGISTER_PREFIX__ = "";
pub const __arm64 = @as(c_int, 1);
pub const __arm64__ = @as(c_int, 1);
pub const __APPLE_CC__ = @as(c_int, 6000);
pub const __APPLE__ = @as(c_int, 1);
pub const __STDC_NO_THREADS__ = @as(c_int, 1);
pub const __strong = "";
pub const __unsafe_unretained = "";
pub const __DYNAMIC__ = @as(c_int, 1);
pub const __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120100, .decimal);
pub const __MACH__ = @as(c_int, 1);
pub const __STDC__ = @as(c_int, 1);
pub const __STDC_HOSTED__ = @as(c_int, 1);
pub const __STDC_VERSION__ = @as(c_long, 201710);
pub const __STDC_UTF_16__ = @as(c_int, 1);
pub const __STDC_UTF_32__ = @as(c_int, 1);
pub const _LIBCPP_DISABLE_VISIBILITY_ANNOTATIONS = @as(c_int, 1);
pub const _LIBCXXABI_DISABLE_VISIBILITY_ANNOTATIONS = @as(c_int, 1);
pub const _LIBCPP_HAS_NO_VENDOR_AVAILABILITY_ANNOTATIONS = @as(c_int, 1);
pub const _DEBUG = @as(c_int, 1);
pub const __GCC_HAVE_DWARF2_CFI_ASM = @as(c_int, 1);
pub const GLFW_INCLUDE_VULKAN = @as(c_int, 1);
pub const _glfw3_h_ = "";
pub const _LIBCPP_STDDEF_H = "";
pub const _LIBCPP_CONFIG = "";
pub const __STDDEF_H = "";
pub const __need_ptrdiff_t = "";
pub const __need_size_t = "";
pub const __need_wchar_t = "";
pub const __need_NULL = "";
pub const __need_STDDEF_H_misc = "";
pub const _PTRDIFF_T = "";
pub const _SIZE_T = "";
pub const _WCHAR_T = "";
pub const NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const __CLANG_MAX_ALIGN_T_DEFINED = "";
pub const _LIBCPP_STDINT_H = "";
pub const __CLANG_STDINT_H = "";
pub const _STDINT_H_ = "";
pub const __WORDSIZE = @as(c_int, 64);
pub const _INT8_T = "";
pub const _INT16_T = "";
pub const _INT32_T = "";
pub const _INT64_T = "";
pub const _UINT8_T = "";
pub const _UINT16_T = "";
pub const _UINT32_T = "";
pub const _UINT64_T = "";
pub const _SYS__TYPES_H_ = "";
pub const _CDEFS_H_ = "";
pub const __BEGIN_DECLS = "";
pub const __END_DECLS = "";
pub inline fn __P(protos: anytype) @TypeOf(protos) {
    return protos;
}
pub const __signed = c_int;
pub inline fn __deprecated_enum_msg(_msg: anytype) @TypeOf(__deprecated_msg(_msg)) {
    return __deprecated_msg(_msg);
}
pub const __kpi_unavailable = "";
pub const __kpi_deprecated_arm64_macos_unavailable = "";
pub const __dead = "";
pub const __pure = "";
pub const __abortlike = __dead2 ++ __cold ++ __not_tail_called;
pub const __DARWIN_ONLY_64_BIT_INO_T = @as(c_int, 1);
pub const __DARWIN_ONLY_UNIX_CONFORMANCE = @as(c_int, 1);
pub const __DARWIN_ONLY_VERS_1050 = @as(c_int, 1);
pub const __DARWIN_UNIX03 = @as(c_int, 1);
pub const __DARWIN_64_BIT_INO_T = @as(c_int, 1);
pub const __DARWIN_VERS_1050 = @as(c_int, 1);
pub const __DARWIN_NON_CANCELABLE = @as(c_int, 0);
pub const __DARWIN_SUF_UNIX03 = "";
pub const __DARWIN_SUF_64_BIT_INO_T = "";
pub const __DARWIN_SUF_1050 = "";
pub const __DARWIN_SUF_NON_CANCELABLE = "";
pub const __DARWIN_SUF_EXTSN = "$DARWIN_EXTSN";
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_0(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_1(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_2(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_3(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_4(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_5(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_6(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_7(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_8(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_9(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_10(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_10_2(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_10_3(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_2(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_3(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_11_4(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_1(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_2(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_12_4(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_1(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_2(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_13_4(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_1(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_4(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_5(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_14_6(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_15(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_15_1(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_10_16(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_0(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_1(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_11_3(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn __DARWIN_ALIAS_STARTING_MAC___MAC_12_0(x: anytype) @TypeOf(x) {
    return x;
}
pub const ___POSIX_C_DEPRECATED_STARTING_198808L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_199009L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_199209L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_199309L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_199506L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_200112L = "";
pub const ___POSIX_C_DEPRECATED_STARTING_200809L = "";
pub const __DARWIN_C_ANSI = @as(c_long, 0o10000);
pub const __DARWIN_C_FULL = @as(c_long, 900000);
pub const __DARWIN_C_LEVEL = __DARWIN_C_FULL;
pub const __STDC_WANT_LIB_EXT1__ = @as(c_int, 1);
pub const __DARWIN_NO_LONG_LONG = @as(c_int, 0);
pub const _DARWIN_FEATURE_64_BIT_INODE = @as(c_int, 1);
pub const _DARWIN_FEATURE_ONLY_64_BIT_INODE = @as(c_int, 1);
pub const _DARWIN_FEATURE_ONLY_VERS_1050 = @as(c_int, 1);
pub const _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = @as(c_int, 1);
pub const _DARWIN_FEATURE_UNIX_CONFORMANCE = @as(c_int, 3);
pub inline fn __CAST_AWAY_QUALIFIER(variable: anytype, qualifier: anytype, @"type": anytype) @TypeOf(@"type"(c_long)(variable)) {
    _ = qualifier;
    return @"type"(c_long)(variable);
}
pub const __kernel_ptr_semantics = "";
pub const __kernel_data_semantics = "";
pub const __kernel_dual_semantics = "";
pub const _BSD_MACHINE__TYPES_H_ = "";
pub const _BSD_ARM__TYPES_H_ = "";
pub const __DARWIN_NULL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const _SYS__PTHREAD_TYPES_H_ = "";
pub const __PTHREAD_SIZE__ = @as(c_int, 8176);
pub const __PTHREAD_ATTR_SIZE__ = @as(c_int, 56);
pub const __PTHREAD_MUTEXATTR_SIZE__ = @as(c_int, 8);
pub const __PTHREAD_MUTEX_SIZE__ = @as(c_int, 56);
pub const __PTHREAD_CONDATTR_SIZE__ = @as(c_int, 8);
pub const __PTHREAD_COND_SIZE__ = @as(c_int, 40);
pub const __PTHREAD_ONCE_SIZE__ = @as(c_int, 8);
pub const __PTHREAD_RWLOCK_SIZE__ = @as(c_int, 192);
pub const __PTHREAD_RWLOCKATTR_SIZE__ = @as(c_int, 16);
pub const _INTPTR_T = "";
pub const _BSD_MACHINE_TYPES_H_ = "";
pub const _ARM_MACHTYPES_H_ = "";
pub const _MACHTYPES_H_ = "";
pub const _U_INT8_T = "";
pub const _U_INT16_T = "";
pub const _U_INT32_T = "";
pub const _U_INT64_T = "";
pub const _UINTPTR_T = "";
pub const USER_ADDR_NULL = @import("std").zig.c_translation.cast(user_addr_t, @as(c_int, 0));
pub inline fn CAST_USER_ADDR_T(a_ptr: anytype) user_addr_t {
    return @import("std").zig.c_translation.cast(user_addr_t, @import("std").zig.c_translation.cast(usize, a_ptr));
}
pub const _INTMAX_T = "";
pub const _UINTMAX_T = "";
pub inline fn INT8_C(v: anytype) @TypeOf(v) {
    return v;
}
pub inline fn INT16_C(v: anytype) @TypeOf(v) {
    return v;
}
pub inline fn INT32_C(v: anytype) @TypeOf(v) {
    return v;
}
pub const INT64_C = @import("std").zig.c_translation.Macros.LL_SUFFIX;
pub inline fn UINT8_C(v: anytype) @TypeOf(v) {
    return v;
}
pub inline fn UINT16_C(v: anytype) @TypeOf(v) {
    return v;
}
pub const UINT32_C = @import("std").zig.c_translation.Macros.U_SUFFIX;
pub const UINT64_C = @import("std").zig.c_translation.Macros.ULL_SUFFIX;
pub const INTMAX_C = @import("std").zig.c_translation.Macros.L_SUFFIX;
pub const UINTMAX_C = @import("std").zig.c_translation.Macros.UL_SUFFIX;
pub const INT8_MAX = @as(c_int, 127);
pub const INT16_MAX = @as(c_int, 32767);
pub const INT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT64_MAX = @as(c_longlong, 9223372036854775807);
pub const INT8_MIN = -@as(c_int, 128);
pub const INT16_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const INT32_MIN = -INT32_MAX - @as(c_int, 1);
pub const INT64_MIN = -INT64_MAX - @as(c_int, 1);
pub const UINT8_MAX = @as(c_int, 255);
pub const UINT16_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const UINT32_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 4294967295, .decimal);
pub const UINT64_MAX = @as(c_ulonglong, 18446744073709551615);
pub const INT_LEAST8_MIN = INT8_MIN;
pub const INT_LEAST16_MIN = INT16_MIN;
pub const INT_LEAST32_MIN = INT32_MIN;
pub const INT_LEAST64_MIN = INT64_MIN;
pub const INT_LEAST8_MAX = INT8_MAX;
pub const INT_LEAST16_MAX = INT16_MAX;
pub const INT_LEAST32_MAX = INT32_MAX;
pub const INT_LEAST64_MAX = INT64_MAX;
pub const UINT_LEAST8_MAX = UINT8_MAX;
pub const UINT_LEAST16_MAX = UINT16_MAX;
pub const UINT_LEAST32_MAX = UINT32_MAX;
pub const UINT_LEAST64_MAX = UINT64_MAX;
pub const INT_FAST8_MIN = INT8_MIN;
pub const INT_FAST16_MIN = INT16_MIN;
pub const INT_FAST32_MIN = INT32_MIN;
pub const INT_FAST64_MIN = INT64_MIN;
pub const INT_FAST8_MAX = INT8_MAX;
pub const INT_FAST16_MAX = INT16_MAX;
pub const INT_FAST32_MAX = INT32_MAX;
pub const INT_FAST64_MAX = INT64_MAX;
pub const UINT_FAST8_MAX = UINT8_MAX;
pub const UINT_FAST16_MAX = UINT16_MAX;
pub const UINT_FAST32_MAX = UINT32_MAX;
pub const UINT_FAST64_MAX = UINT64_MAX;
pub const INTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 9223372036854775807, .decimal);
pub const INTPTR_MIN = -INTPTR_MAX - @as(c_int, 1);
pub const UINTPTR_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 18446744073709551615, .decimal);
pub const INTMAX_MAX = INTMAX_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 9223372036854775807, .decimal));
pub const UINTMAX_MAX = UINTMAX_C(@import("std").zig.c_translation.promoteIntLiteral(c_int, 18446744073709551615, .decimal));
pub const INTMAX_MIN = -INTMAX_MAX - @as(c_int, 1);
pub const PTRDIFF_MIN = INTMAX_MIN;
pub const PTRDIFF_MAX = INTMAX_MAX;
pub const SIZE_MAX = UINTPTR_MAX;
pub const RSIZE_MAX = SIZE_MAX >> @as(c_int, 1);
pub const WCHAR_MAX = __WCHAR_MAX__;
pub const WCHAR_MIN = -WCHAR_MAX - @as(c_int, 1);
pub const WINT_MIN = INT32_MIN;
pub const WINT_MAX = INT32_MAX;
pub const SIG_ATOMIC_MIN = INT32_MIN;
pub const SIG_ATOMIC_MAX = INT32_MAX;
pub const VULKAN_H_ = @as(c_int, 1);
pub const VK_PLATFORM_H_ = "";
pub const VKAPI_ATTR = "";
pub const VKAPI_CALL = "";
pub const VKAPI_PTR = "";
pub const VULKAN_CORE_H_ = @as(c_int, 1);
pub const VK_VERSION_1_0 = @as(c_int, 1);
pub const VK_USE_64_BIT_PTR_DEFINES = @as(c_int, 1);
pub const VK_NULL_HANDLE = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub inline fn VK_MAKE_VERSION(major_1: anytype, minor_2: anytype, patch: anytype) @TypeOf(((@import("std").zig.c_translation.cast(u32, major_1) << @as(c_int, 22)) | (@import("std").zig.c_translation.cast(u32, minor_2) << @as(c_int, 12))) | @import("std").zig.c_translation.cast(u32, patch)) {
    return ((@import("std").zig.c_translation.cast(u32, major_1) << @as(c_int, 22)) | (@import("std").zig.c_translation.cast(u32, minor_2) << @as(c_int, 12))) | @import("std").zig.c_translation.cast(u32, patch);
}
pub inline fn VK_MAKE_API_VERSION(variant: anytype, major_1: anytype, minor_2: anytype, patch: anytype) @TypeOf((((@import("std").zig.c_translation.cast(u32, variant) << @as(c_int, 29)) | (@import("std").zig.c_translation.cast(u32, major_1) << @as(c_int, 22))) | (@import("std").zig.c_translation.cast(u32, minor_2) << @as(c_int, 12))) | @import("std").zig.c_translation.cast(u32, patch)) {
    return (((@import("std").zig.c_translation.cast(u32, variant) << @as(c_int, 29)) | (@import("std").zig.c_translation.cast(u32, major_1) << @as(c_int, 22))) | (@import("std").zig.c_translation.cast(u32, minor_2) << @as(c_int, 12))) | @import("std").zig.c_translation.cast(u32, patch);
}
pub const VK_API_VERSION_1_0 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 0), @as(c_int, 0));
pub const VK_HEADER_VERSION = @as(c_int, 224);
pub const VK_HEADER_VERSION_COMPLETE = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 3), VK_HEADER_VERSION);
pub inline fn VK_VERSION_MAJOR(version: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, version) >> @as(c_int, 22)) {
    return @import("std").zig.c_translation.cast(u32, version) >> @as(c_int, 22);
}
pub inline fn VK_VERSION_MINOR(version: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32, version) >> @as(c_int, 12)) & @as(c_uint, 0x3FF)) {
    return (@import("std").zig.c_translation.cast(u32, version) >> @as(c_int, 12)) & @as(c_uint, 0x3FF);
}
pub inline fn VK_VERSION_PATCH(version: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, version) & @as(c_uint, 0xFFF)) {
    return @import("std").zig.c_translation.cast(u32, version) & @as(c_uint, 0xFFF);
}
pub inline fn VK_API_VERSION_VARIANT(version: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, version) >> @as(c_int, 29)) {
    return @import("std").zig.c_translation.cast(u32, version) >> @as(c_int, 29);
}
pub inline fn VK_API_VERSION_MAJOR(version: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32, version) >> @as(c_int, 22)) & @as(c_uint, 0x7F)) {
    return (@import("std").zig.c_translation.cast(u32, version) >> @as(c_int, 22)) & @as(c_uint, 0x7F);
}
pub inline fn VK_API_VERSION_MINOR(version: anytype) @TypeOf((@import("std").zig.c_translation.cast(u32, version) >> @as(c_int, 12)) & @as(c_uint, 0x3FF)) {
    return (@import("std").zig.c_translation.cast(u32, version) >> @as(c_int, 12)) & @as(c_uint, 0x3FF);
}
pub inline fn VK_API_VERSION_PATCH(version: anytype) @TypeOf(@import("std").zig.c_translation.cast(u32, version) & @as(c_uint, 0xFFF)) {
    return @import("std").zig.c_translation.cast(u32, version) & @as(c_uint, 0xFFF);
}
pub const VK_ATTACHMENT_UNUSED = ~@as(c_uint, 0);
pub const VK_FALSE = @as(c_uint, 0);
pub const VK_LOD_CLAMP_NONE = @as(f32, 1000.0);
pub const VK_QUEUE_FAMILY_IGNORED = ~@as(c_uint, 0);
pub const VK_REMAINING_ARRAY_LAYERS = ~@as(c_uint, 0);
pub const VK_REMAINING_MIP_LEVELS = ~@as(c_uint, 0);
pub const VK_SUBPASS_EXTERNAL = ~@as(c_uint, 0);
pub const VK_TRUE = @as(c_uint, 1);
pub const VK_WHOLE_SIZE = ~@as(c_ulonglong, 0);
pub const VK_MAX_MEMORY_TYPES = @as(c_uint, 32);
pub const VK_MAX_PHYSICAL_DEVICE_NAME_SIZE = @as(c_uint, 256);
pub const VK_UUID_SIZE = @as(c_uint, 16);
pub const VK_MAX_EXTENSION_NAME_SIZE = @as(c_uint, 256);
pub const VK_MAX_DESCRIPTION_SIZE = @as(c_uint, 256);
pub const VK_MAX_MEMORY_HEAPS = @as(c_uint, 16);
pub const VK_VERSION_1_1 = @as(c_int, 1);
pub const VK_API_VERSION_1_1 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 1), @as(c_int, 0));
pub const VK_MAX_DEVICE_GROUP_SIZE = @as(c_uint, 32);
pub const VK_LUID_SIZE = @as(c_uint, 8);
pub const VK_QUEUE_FAMILY_EXTERNAL = ~@as(c_uint, 1);
pub const VK_VERSION_1_2 = @as(c_int, 1);
pub const VK_API_VERSION_1_2 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 2), @as(c_int, 0));
pub const VK_MAX_DRIVER_NAME_SIZE = @as(c_uint, 256);
pub const VK_MAX_DRIVER_INFO_SIZE = @as(c_uint, 256);
pub const VK_VERSION_1_3 = @as(c_int, 1);
pub const VK_API_VERSION_1_3 = VK_MAKE_API_VERSION(@as(c_int, 0), @as(c_int, 1), @as(c_int, 3), @as(c_int, 0));
pub const VK_KHR_surface = @as(c_int, 1);
pub const VK_KHR_SURFACE_SPEC_VERSION = @as(c_int, 25);
pub const VK_KHR_SURFACE_EXTENSION_NAME = "VK_KHR_surface";
pub const VK_KHR_swapchain = @as(c_int, 1);
pub const VK_KHR_SWAPCHAIN_SPEC_VERSION = @as(c_int, 70);
pub const VK_KHR_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_swapchain";
pub const VK_KHR_display = @as(c_int, 1);
pub const VK_KHR_DISPLAY_SPEC_VERSION = @as(c_int, 23);
pub const VK_KHR_DISPLAY_EXTENSION_NAME = "VK_KHR_display";
pub const VK_KHR_display_swapchain = @as(c_int, 1);
pub const VK_KHR_DISPLAY_SWAPCHAIN_SPEC_VERSION = @as(c_int, 10);
pub const VK_KHR_DISPLAY_SWAPCHAIN_EXTENSION_NAME = "VK_KHR_display_swapchain";
pub const VK_KHR_sampler_mirror_clamp_to_edge = @as(c_int, 1);
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_SPEC_VERSION = @as(c_int, 3);
pub const VK_KHR_SAMPLER_MIRROR_CLAMP_TO_EDGE_EXTENSION_NAME = "VK_KHR_sampler_mirror_clamp_to_edge";
pub const VK_KHR_dynamic_rendering = @as(c_int, 1);
pub const VK_KHR_DYNAMIC_RENDERING_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DYNAMIC_RENDERING_EXTENSION_NAME = "VK_KHR_dynamic_rendering";
pub const VK_KHR_multiview = @as(c_int, 1);
pub const VK_KHR_MULTIVIEW_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MULTIVIEW_EXTENSION_NAME = "VK_KHR_multiview";
pub const VK_KHR_get_physical_device_properties2 = @as(c_int, 1);
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_GET_PHYSICAL_DEVICE_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_physical_device_properties2";
pub const VK_KHR_device_group = @as(c_int, 1);
pub const VK_KHR_DEVICE_GROUP_SPEC_VERSION = @as(c_int, 4);
pub const VK_KHR_DEVICE_GROUP_EXTENSION_NAME = "VK_KHR_device_group";
pub const VK_KHR_shader_draw_parameters = @as(c_int, 1);
pub const VK_KHR_SHADER_DRAW_PARAMETERS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_DRAW_PARAMETERS_EXTENSION_NAME = "VK_KHR_shader_draw_parameters";
pub const VK_KHR_maintenance1 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_maintenance1";
pub const VK_KHR_MAINTENANCE1_SPEC_VERSION = VK_KHR_MAINTENANCE_1_SPEC_VERSION;
pub const VK_KHR_MAINTENANCE1_EXTENSION_NAME = VK_KHR_MAINTENANCE_1_EXTENSION_NAME;
pub const VK_KHR_device_group_creation = @as(c_int, 1);
pub const VK_KHR_DEVICE_GROUP_CREATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DEVICE_GROUP_CREATION_EXTENSION_NAME = "VK_KHR_device_group_creation";
pub const VK_MAX_DEVICE_GROUP_SIZE_KHR = VK_MAX_DEVICE_GROUP_SIZE;
pub const VK_KHR_external_memory_capabilities = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_memory_capabilities";
pub const VK_LUID_SIZE_KHR = VK_LUID_SIZE;
pub const VK_KHR_external_memory = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_KHR_external_memory";
pub const VK_QUEUE_FAMILY_EXTERNAL_KHR = VK_QUEUE_FAMILY_EXTERNAL;
pub const VK_KHR_external_memory_fd = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_FD_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_MEMORY_FD_EXTENSION_NAME = "VK_KHR_external_memory_fd";
pub const VK_KHR_external_semaphore_capabilities = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_semaphore_capabilities";
pub const VK_KHR_external_semaphore = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_EXTENSION_NAME = "VK_KHR_external_semaphore";
pub const VK_KHR_external_semaphore_fd = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_SEMAPHORE_FD_EXTENSION_NAME = "VK_KHR_external_semaphore_fd";
pub const VK_KHR_push_descriptor = @as(c_int, 1);
pub const VK_KHR_PUSH_DESCRIPTOR_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_PUSH_DESCRIPTOR_EXTENSION_NAME = "VK_KHR_push_descriptor";
pub const VK_KHR_shader_float16_int8 = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT16_INT8_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT16_INT8_EXTENSION_NAME = "VK_KHR_shader_float16_int8";
pub const VK_KHR_16bit_storage = @as(c_int, 1);
pub const VK_KHR_16BIT_STORAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_16BIT_STORAGE_EXTENSION_NAME = "VK_KHR_16bit_storage";
pub const VK_KHR_incremental_present = @as(c_int, 1);
pub const VK_KHR_INCREMENTAL_PRESENT_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_INCREMENTAL_PRESENT_EXTENSION_NAME = "VK_KHR_incremental_present";
pub const VK_KHR_descriptor_update_template = @as(c_int, 1);
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DESCRIPTOR_UPDATE_TEMPLATE_EXTENSION_NAME = "VK_KHR_descriptor_update_template";
pub const VK_KHR_imageless_framebuffer = @as(c_int, 1);
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_IMAGELESS_FRAMEBUFFER_EXTENSION_NAME = "VK_KHR_imageless_framebuffer";
pub const VK_KHR_create_renderpass2 = @as(c_int, 1);
pub const VK_KHR_CREATE_RENDERPASS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_CREATE_RENDERPASS_2_EXTENSION_NAME = "VK_KHR_create_renderpass2";
pub const VK_KHR_shared_presentable_image = @as(c_int, 1);
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHARED_PRESENTABLE_IMAGE_EXTENSION_NAME = "VK_KHR_shared_presentable_image";
pub const VK_KHR_external_fence_capabilities = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_CAPABILITIES_EXTENSION_NAME = "VK_KHR_external_fence_capabilities";
pub const VK_KHR_external_fence = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_EXTENSION_NAME = "VK_KHR_external_fence";
pub const VK_KHR_external_fence_fd = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_FD_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_EXTERNAL_FENCE_FD_EXTENSION_NAME = "VK_KHR_external_fence_fd";
pub const VK_KHR_performance_query = @as(c_int, 1);
pub const VK_KHR_PERFORMANCE_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_KHR_performance_query";
pub const VK_KHR_maintenance2 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_2_EXTENSION_NAME = "VK_KHR_maintenance2";
pub const VK_KHR_MAINTENANCE2_SPEC_VERSION = VK_KHR_MAINTENANCE_2_SPEC_VERSION;
pub const VK_KHR_MAINTENANCE2_EXTENSION_NAME = VK_KHR_MAINTENANCE_2_EXTENSION_NAME;
pub const VK_KHR_get_surface_capabilities2 = @as(c_int, 1);
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_GET_SURFACE_CAPABILITIES_2_EXTENSION_NAME = "VK_KHR_get_surface_capabilities2";
pub const VK_KHR_variable_pointers = @as(c_int, 1);
pub const VK_KHR_VARIABLE_POINTERS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_VARIABLE_POINTERS_EXTENSION_NAME = "VK_KHR_variable_pointers";
pub const VK_KHR_get_display_properties2 = @as(c_int, 1);
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_GET_DISPLAY_PROPERTIES_2_EXTENSION_NAME = "VK_KHR_get_display_properties2";
pub const VK_KHR_dedicated_allocation = @as(c_int, 1);
pub const VK_KHR_DEDICATED_ALLOCATION_SPEC_VERSION = @as(c_int, 3);
pub const VK_KHR_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_KHR_dedicated_allocation";
pub const VK_KHR_storage_buffer_storage_class = @as(c_int, 1);
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_STORAGE_BUFFER_STORAGE_CLASS_EXTENSION_NAME = "VK_KHR_storage_buffer_storage_class";
pub const VK_KHR_relaxed_block_layout = @as(c_int, 1);
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RELAXED_BLOCK_LAYOUT_EXTENSION_NAME = "VK_KHR_relaxed_block_layout";
pub const VK_KHR_get_memory_requirements2 = @as(c_int, 1);
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_GET_MEMORY_REQUIREMENTS_2_EXTENSION_NAME = "VK_KHR_get_memory_requirements2";
pub const VK_KHR_image_format_list = @as(c_int, 1);
pub const VK_KHR_IMAGE_FORMAT_LIST_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_IMAGE_FORMAT_LIST_EXTENSION_NAME = "VK_KHR_image_format_list";
pub const VK_KHR_sampler_ycbcr_conversion = @as(c_int, 1);
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_SPEC_VERSION = @as(c_int, 14);
pub const VK_KHR_SAMPLER_YCBCR_CONVERSION_EXTENSION_NAME = "VK_KHR_sampler_ycbcr_conversion";
pub const VK_KHR_bind_memory2 = @as(c_int, 1);
pub const VK_KHR_BIND_MEMORY_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_BIND_MEMORY_2_EXTENSION_NAME = "VK_KHR_bind_memory2";
pub const VK_KHR_maintenance3 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_3_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_3_EXTENSION_NAME = "VK_KHR_maintenance3";
pub const VK_KHR_MAINTENANCE3_SPEC_VERSION = VK_KHR_MAINTENANCE_3_SPEC_VERSION;
pub const VK_KHR_MAINTENANCE3_EXTENSION_NAME = VK_KHR_MAINTENANCE_3_EXTENSION_NAME;
pub const VK_KHR_draw_indirect_count = @as(c_int, 1);
pub const VK_KHR_DRAW_INDIRECT_COUNT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_KHR_draw_indirect_count";
pub const VK_KHR_shader_subgroup_extended_types = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_EXTENDED_TYPES_EXTENSION_NAME = "VK_KHR_shader_subgroup_extended_types";
pub const VK_KHR_8bit_storage = @as(c_int, 1);
pub const VK_KHR_8BIT_STORAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_8BIT_STORAGE_EXTENSION_NAME = "VK_KHR_8bit_storage";
pub const VK_KHR_shader_atomic_int64 = @as(c_int, 1);
pub const VK_KHR_SHADER_ATOMIC_INT64_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_ATOMIC_INT64_EXTENSION_NAME = "VK_KHR_shader_atomic_int64";
pub const VK_KHR_shader_clock = @as(c_int, 1);
pub const VK_KHR_SHADER_CLOCK_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_CLOCK_EXTENSION_NAME = "VK_KHR_shader_clock";
pub const VK_KHR_global_priority = @as(c_int, 1);
pub const VK_MAX_GLOBAL_PRIORITY_SIZE_KHR = @as(c_uint, 16);
pub const VK_KHR_GLOBAL_PRIORITY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_KHR_global_priority";
pub const VK_KHR_driver_properties = @as(c_int, 1);
pub const VK_KHR_DRIVER_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DRIVER_PROPERTIES_EXTENSION_NAME = "VK_KHR_driver_properties";
pub const VK_MAX_DRIVER_NAME_SIZE_KHR = VK_MAX_DRIVER_NAME_SIZE;
pub const VK_MAX_DRIVER_INFO_SIZE_KHR = VK_MAX_DRIVER_INFO_SIZE;
pub const VK_KHR_shader_float_controls = @as(c_int, 1);
pub const VK_KHR_SHADER_FLOAT_CONTROLS_SPEC_VERSION = @as(c_int, 4);
pub const VK_KHR_SHADER_FLOAT_CONTROLS_EXTENSION_NAME = "VK_KHR_shader_float_controls";
pub const VK_KHR_depth_stencil_resolve = @as(c_int, 1);
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_DEPTH_STENCIL_RESOLVE_EXTENSION_NAME = "VK_KHR_depth_stencil_resolve";
pub const VK_KHR_swapchain_mutable_format = @as(c_int, 1);
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SWAPCHAIN_MUTABLE_FORMAT_EXTENSION_NAME = "VK_KHR_swapchain_mutable_format";
pub const VK_KHR_timeline_semaphore = @as(c_int, 1);
pub const VK_KHR_TIMELINE_SEMAPHORE_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_TIMELINE_SEMAPHORE_EXTENSION_NAME = "VK_KHR_timeline_semaphore";
pub const VK_KHR_vulkan_memory_model = @as(c_int, 1);
pub const VK_KHR_VULKAN_MEMORY_MODEL_SPEC_VERSION = @as(c_int, 3);
pub const VK_KHR_VULKAN_MEMORY_MODEL_EXTENSION_NAME = "VK_KHR_vulkan_memory_model";
pub const VK_KHR_shader_terminate_invocation = @as(c_int, 1);
pub const VK_KHR_SHADER_TERMINATE_INVOCATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_TERMINATE_INVOCATION_EXTENSION_NAME = "VK_KHR_shader_terminate_invocation";
pub const VK_KHR_fragment_shading_rate = @as(c_int, 1);
pub const VK_KHR_FRAGMENT_SHADING_RATE_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_FRAGMENT_SHADING_RATE_EXTENSION_NAME = "VK_KHR_fragment_shading_rate";
pub const VK_KHR_spirv_1_4 = @as(c_int, 1);
pub const VK_KHR_SPIRV_1_4_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SPIRV_1_4_EXTENSION_NAME = "VK_KHR_spirv_1_4";
pub const VK_KHR_surface_protected_capabilities = @as(c_int, 1);
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SURFACE_PROTECTED_CAPABILITIES_EXTENSION_NAME = "VK_KHR_surface_protected_capabilities";
pub const VK_KHR_separate_depth_stencil_layouts = @as(c_int, 1);
pub const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SEPARATE_DEPTH_STENCIL_LAYOUTS_EXTENSION_NAME = "VK_KHR_separate_depth_stencil_layouts";
pub const VK_KHR_present_wait = @as(c_int, 1);
pub const VK_KHR_PRESENT_WAIT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PRESENT_WAIT_EXTENSION_NAME = "VK_KHR_present_wait";
pub const VK_KHR_uniform_buffer_standard_layout = @as(c_int, 1);
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_UNIFORM_BUFFER_STANDARD_LAYOUT_EXTENSION_NAME = "VK_KHR_uniform_buffer_standard_layout";
pub const VK_KHR_buffer_device_address = @as(c_int, 1);
pub const VK_KHR_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_KHR_buffer_device_address";
pub const VK_KHR_deferred_host_operations = @as(c_int, 1);
pub const VK_KHR_DEFERRED_HOST_OPERATIONS_SPEC_VERSION = @as(c_int, 4);
pub const VK_KHR_DEFERRED_HOST_OPERATIONS_EXTENSION_NAME = "VK_KHR_deferred_host_operations";
pub const VK_KHR_pipeline_executable_properties = @as(c_int, 1);
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PIPELINE_EXECUTABLE_PROPERTIES_EXTENSION_NAME = "VK_KHR_pipeline_executable_properties";
pub const VK_KHR_shader_integer_dot_product = @as(c_int, 1);
pub const VK_KHR_SHADER_INTEGER_DOT_PRODUCT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_INTEGER_DOT_PRODUCT_EXTENSION_NAME = "VK_KHR_shader_integer_dot_product";
pub const VK_KHR_pipeline_library = @as(c_int, 1);
pub const VK_KHR_PIPELINE_LIBRARY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_KHR_pipeline_library";
pub const VK_KHR_shader_non_semantic_info = @as(c_int, 1);
pub const VK_KHR_SHADER_NON_SEMANTIC_INFO_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_NON_SEMANTIC_INFO_EXTENSION_NAME = "VK_KHR_shader_non_semantic_info";
pub const VK_KHR_present_id = @as(c_int, 1);
pub const VK_KHR_PRESENT_ID_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PRESENT_ID_EXTENSION_NAME = "VK_KHR_present_id";
pub const VK_KHR_synchronization2 = @as(c_int, 1);
pub const VK_KHR_SYNCHRONIZATION_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SYNCHRONIZATION_2_EXTENSION_NAME = "VK_KHR_synchronization2";
pub const VK_KHR_fragment_shader_barycentric = @as(c_int, 1);
pub const VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_KHR_fragment_shader_barycentric";
pub const VK_KHR_shader_subgroup_uniform_control_flow = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_SHADER_SUBGROUP_UNIFORM_CONTROL_FLOW_EXTENSION_NAME = "VK_KHR_shader_subgroup_uniform_control_flow";
pub const VK_KHR_zero_initialize_workgroup_memory = @as(c_int, 1);
pub const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_ZERO_INITIALIZE_WORKGROUP_MEMORY_EXTENSION_NAME = "VK_KHR_zero_initialize_workgroup_memory";
pub const VK_KHR_workgroup_memory_explicit_layout = @as(c_int, 1);
pub const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_WORKGROUP_MEMORY_EXPLICIT_LAYOUT_EXTENSION_NAME = "VK_KHR_workgroup_memory_explicit_layout";
pub const VK_KHR_copy_commands2 = @as(c_int, 1);
pub const VK_KHR_COPY_COMMANDS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_COPY_COMMANDS_2_EXTENSION_NAME = "VK_KHR_copy_commands2";
pub const VK_KHR_format_feature_flags2 = @as(c_int, 1);
pub const VK_KHR_FORMAT_FEATURE_FLAGS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_FORMAT_FEATURE_FLAGS_2_EXTENSION_NAME = "VK_KHR_format_feature_flags2";
pub const VK_KHR_ray_tracing_maintenance1 = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_MAINTENANCE_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_MAINTENANCE_1_EXTENSION_NAME = "VK_KHR_ray_tracing_maintenance1";
pub const VK_KHR_portability_enumeration = @as(c_int, 1);
pub const VK_KHR_PORTABILITY_ENUMERATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_PORTABILITY_ENUMERATION_EXTENSION_NAME = "VK_KHR_portability_enumeration";
pub const VK_KHR_maintenance4 = @as(c_int, 1);
pub const VK_KHR_MAINTENANCE_4_SPEC_VERSION = @as(c_int, 2);
pub const VK_KHR_MAINTENANCE_4_EXTENSION_NAME = "VK_KHR_maintenance4";
pub const VK_EXT_debug_report = @as(c_int, 1);
pub const VK_EXT_DEBUG_REPORT_SPEC_VERSION = @as(c_int, 10);
pub const VK_EXT_DEBUG_REPORT_EXTENSION_NAME = "VK_EXT_debug_report";
pub const VK_NV_glsl_shader = @as(c_int, 1);
pub const VK_NV_GLSL_SHADER_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_GLSL_SHADER_EXTENSION_NAME = "VK_NV_glsl_shader";
pub const VK_EXT_depth_range_unrestricted = @as(c_int, 1);
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_RANGE_UNRESTRICTED_EXTENSION_NAME = "VK_EXT_depth_range_unrestricted";
pub const VK_IMG_filter_cubic = @as(c_int, 1);
pub const VK_IMG_FILTER_CUBIC_SPEC_VERSION = @as(c_int, 1);
pub const VK_IMG_FILTER_CUBIC_EXTENSION_NAME = "VK_IMG_filter_cubic";
pub const VK_AMD_rasterization_order = @as(c_int, 1);
pub const VK_AMD_RASTERIZATION_ORDER_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_RASTERIZATION_ORDER_EXTENSION_NAME = "VK_AMD_rasterization_order";
pub const VK_AMD_shader_trinary_minmax = @as(c_int, 1);
pub const VK_AMD_SHADER_TRINARY_MINMAX_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_TRINARY_MINMAX_EXTENSION_NAME = "VK_AMD_shader_trinary_minmax";
pub const VK_AMD_shader_explicit_vertex_parameter = @as(c_int, 1);
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_EXPLICIT_VERTEX_PARAMETER_EXTENSION_NAME = "VK_AMD_shader_explicit_vertex_parameter";
pub const VK_EXT_debug_marker = @as(c_int, 1);
pub const VK_EXT_DEBUG_MARKER_SPEC_VERSION = @as(c_int, 4);
pub const VK_EXT_DEBUG_MARKER_EXTENSION_NAME = "VK_EXT_debug_marker";
pub const VK_AMD_gcn_shader = @as(c_int, 1);
pub const VK_AMD_GCN_SHADER_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_GCN_SHADER_EXTENSION_NAME = "VK_AMD_gcn_shader";
pub const VK_NV_dedicated_allocation = @as(c_int, 1);
pub const VK_NV_DEDICATED_ALLOCATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_DEDICATED_ALLOCATION_EXTENSION_NAME = "VK_NV_dedicated_allocation";
pub const VK_EXT_transform_feedback = @as(c_int, 1);
pub const VK_EXT_TRANSFORM_FEEDBACK_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_TRANSFORM_FEEDBACK_EXTENSION_NAME = "VK_EXT_transform_feedback";
pub const VK_NVX_binary_import = @as(c_int, 1);
pub const VK_NVX_BINARY_IMPORT_SPEC_VERSION = @as(c_int, 1);
pub const VK_NVX_BINARY_IMPORT_EXTENSION_NAME = "VK_NVX_binary_import";
pub const VK_NVX_image_view_handle = @as(c_int, 1);
pub const VK_NVX_IMAGE_VIEW_HANDLE_SPEC_VERSION = @as(c_int, 2);
pub const VK_NVX_IMAGE_VIEW_HANDLE_EXTENSION_NAME = "VK_NVX_image_view_handle";
pub const VK_AMD_draw_indirect_count = @as(c_int, 1);
pub const VK_AMD_DRAW_INDIRECT_COUNT_SPEC_VERSION = @as(c_int, 2);
pub const VK_AMD_DRAW_INDIRECT_COUNT_EXTENSION_NAME = "VK_AMD_draw_indirect_count";
pub const VK_AMD_negative_viewport_height = @as(c_int, 1);
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_NEGATIVE_VIEWPORT_HEIGHT_EXTENSION_NAME = "VK_AMD_negative_viewport_height";
pub const VK_AMD_gpu_shader_half_float = @as(c_int, 1);
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_SPEC_VERSION = @as(c_int, 2);
pub const VK_AMD_GPU_SHADER_HALF_FLOAT_EXTENSION_NAME = "VK_AMD_gpu_shader_half_float";
pub const VK_AMD_shader_ballot = @as(c_int, 1);
pub const VK_AMD_SHADER_BALLOT_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_BALLOT_EXTENSION_NAME = "VK_AMD_shader_ballot";
pub const VK_AMD_texture_gather_bias_lod = @as(c_int, 1);
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_TEXTURE_GATHER_BIAS_LOD_EXTENSION_NAME = "VK_AMD_texture_gather_bias_lod";
pub const VK_AMD_shader_info = @as(c_int, 1);
pub const VK_AMD_SHADER_INFO_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_INFO_EXTENSION_NAME = "VK_AMD_shader_info";
pub const VK_AMD_shader_image_load_store_lod = @as(c_int, 1);
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_IMAGE_LOAD_STORE_LOD_EXTENSION_NAME = "VK_AMD_shader_image_load_store_lod";
pub const VK_NV_corner_sampled_image = @as(c_int, 1);
pub const VK_NV_CORNER_SAMPLED_IMAGE_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_CORNER_SAMPLED_IMAGE_EXTENSION_NAME = "VK_NV_corner_sampled_image";
pub const VK_IMG_format_pvrtc = @as(c_int, 1);
pub const VK_IMG_FORMAT_PVRTC_SPEC_VERSION = @as(c_int, 1);
pub const VK_IMG_FORMAT_PVRTC_EXTENSION_NAME = "VK_IMG_format_pvrtc";
pub const VK_NV_external_memory_capabilities = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_CAPABILITIES_EXTENSION_NAME = "VK_NV_external_memory_capabilities";
pub const VK_NV_external_memory = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_EXTENSION_NAME = "VK_NV_external_memory";
pub const VK_EXT_validation_flags = @as(c_int, 1);
pub const VK_EXT_VALIDATION_FLAGS_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_VALIDATION_FLAGS_EXTENSION_NAME = "VK_EXT_validation_flags";
pub const VK_EXT_shader_subgroup_ballot = @as(c_int, 1);
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_SUBGROUP_BALLOT_EXTENSION_NAME = "VK_EXT_shader_subgroup_ballot";
pub const VK_EXT_shader_subgroup_vote = @as(c_int, 1);
pub const VK_EXT_SHADER_SUBGROUP_VOTE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_SUBGROUP_VOTE_EXTENSION_NAME = "VK_EXT_shader_subgroup_vote";
pub const VK_EXT_texture_compression_astc_hdr = @as(c_int, 1);
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_TEXTURE_COMPRESSION_ASTC_HDR_EXTENSION_NAME = "VK_EXT_texture_compression_astc_hdr";
pub const VK_EXT_astc_decode_mode = @as(c_int, 1);
pub const VK_EXT_ASTC_DECODE_MODE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_ASTC_DECODE_MODE_EXTENSION_NAME = "VK_EXT_astc_decode_mode";
pub const VK_EXT_pipeline_robustness = @as(c_int, 1);
pub const VK_EXT_PIPELINE_ROBUSTNESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_pipeline_robustness";
pub const VK_EXT_conditional_rendering = @as(c_int, 1);
pub const VK_EXT_CONDITIONAL_RENDERING_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_CONDITIONAL_RENDERING_EXTENSION_NAME = "VK_EXT_conditional_rendering";
pub const VK_NV_clip_space_w_scaling = @as(c_int, 1);
pub const VK_NV_CLIP_SPACE_W_SCALING_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_CLIP_SPACE_W_SCALING_EXTENSION_NAME = "VK_NV_clip_space_w_scaling";
pub const VK_EXT_direct_mode_display = @as(c_int, 1);
pub const VK_EXT_DIRECT_MODE_DISPLAY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DIRECT_MODE_DISPLAY_EXTENSION_NAME = "VK_EXT_direct_mode_display";
pub const VK_EXT_display_surface_counter = @as(c_int, 1);
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DISPLAY_SURFACE_COUNTER_EXTENSION_NAME = "VK_EXT_display_surface_counter";
pub const VK_EXT_display_control = @as(c_int, 1);
pub const VK_EXT_DISPLAY_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DISPLAY_CONTROL_EXTENSION_NAME = "VK_EXT_display_control";
pub const VK_GOOGLE_display_timing = @as(c_int, 1);
pub const VK_GOOGLE_DISPLAY_TIMING_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_DISPLAY_TIMING_EXTENSION_NAME = "VK_GOOGLE_display_timing";
pub const VK_NV_sample_mask_override_coverage = @as(c_int, 1);
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_SAMPLE_MASK_OVERRIDE_COVERAGE_EXTENSION_NAME = "VK_NV_sample_mask_override_coverage";
pub const VK_NV_geometry_shader_passthrough = @as(c_int, 1);
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_GEOMETRY_SHADER_PASSTHROUGH_EXTENSION_NAME = "VK_NV_geometry_shader_passthrough";
pub const VK_NV_viewport_array2 = @as(c_int, 1);
pub const VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME = "VK_NV_viewport_array2";
pub const VK_NV_VIEWPORT_ARRAY2_SPEC_VERSION = VK_NV_VIEWPORT_ARRAY_2_SPEC_VERSION;
pub const VK_NV_VIEWPORT_ARRAY2_EXTENSION_NAME = VK_NV_VIEWPORT_ARRAY_2_EXTENSION_NAME;
pub const VK_NVX_multiview_per_view_attributes = @as(c_int, 1);
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_SPEC_VERSION = @as(c_int, 1);
pub const VK_NVX_MULTIVIEW_PER_VIEW_ATTRIBUTES_EXTENSION_NAME = "VK_NVX_multiview_per_view_attributes";
pub const VK_NV_viewport_swizzle = @as(c_int, 1);
pub const VK_NV_VIEWPORT_SWIZZLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_VIEWPORT_SWIZZLE_EXTENSION_NAME = "VK_NV_viewport_swizzle";
pub const VK_EXT_discard_rectangles = @as(c_int, 1);
pub const VK_EXT_DISCARD_RECTANGLES_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DISCARD_RECTANGLES_EXTENSION_NAME = "VK_EXT_discard_rectangles";
pub const VK_EXT_conservative_rasterization = @as(c_int, 1);
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_CONSERVATIVE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_conservative_rasterization";
pub const VK_EXT_depth_clip_enable = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLIP_ENABLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLIP_ENABLE_EXTENSION_NAME = "VK_EXT_depth_clip_enable";
pub const VK_EXT_swapchain_colorspace = @as(c_int, 1);
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_SPEC_VERSION = @as(c_int, 4);
pub const VK_EXT_SWAPCHAIN_COLOR_SPACE_EXTENSION_NAME = "VK_EXT_swapchain_colorspace";
pub const VK_EXT_hdr_metadata = @as(c_int, 1);
pub const VK_EXT_HDR_METADATA_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_HDR_METADATA_EXTENSION_NAME = "VK_EXT_hdr_metadata";
pub const VK_EXT_external_memory_dma_buf = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_DMA_BUF_EXTENSION_NAME = "VK_EXT_external_memory_dma_buf";
pub const VK_EXT_queue_family_foreign = @as(c_int, 1);
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_QUEUE_FAMILY_FOREIGN_EXTENSION_NAME = "VK_EXT_queue_family_foreign";
pub const VK_QUEUE_FAMILY_FOREIGN_EXT = ~@as(c_uint, 2);
pub const VK_EXT_debug_utils = @as(c_int, 1);
pub const VK_EXT_DEBUG_UTILS_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DEBUG_UTILS_EXTENSION_NAME = "VK_EXT_debug_utils";
pub const VK_EXT_sampler_filter_minmax = @as(c_int, 1);
pub const VK_EXT_SAMPLER_FILTER_MINMAX_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_SAMPLER_FILTER_MINMAX_EXTENSION_NAME = "VK_EXT_sampler_filter_minmax";
pub const VK_AMD_gpu_shader_int16 = @as(c_int, 1);
pub const VK_AMD_GPU_SHADER_INT16_SPEC_VERSION = @as(c_int, 2);
pub const VK_AMD_GPU_SHADER_INT16_EXTENSION_NAME = "VK_AMD_gpu_shader_int16";
pub const VK_AMD_mixed_attachment_samples = @as(c_int, 1);
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_MIXED_ATTACHMENT_SAMPLES_EXTENSION_NAME = "VK_AMD_mixed_attachment_samples";
pub const VK_AMD_shader_fragment_mask = @as(c_int, 1);
pub const VK_AMD_SHADER_FRAGMENT_MASK_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_FRAGMENT_MASK_EXTENSION_NAME = "VK_AMD_shader_fragment_mask";
pub const VK_EXT_inline_uniform_block = @as(c_int, 1);
pub const VK_EXT_INLINE_UNIFORM_BLOCK_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_INLINE_UNIFORM_BLOCK_EXTENSION_NAME = "VK_EXT_inline_uniform_block";
pub const VK_EXT_shader_stencil_export = @as(c_int, 1);
pub const VK_EXT_SHADER_STENCIL_EXPORT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_STENCIL_EXPORT_EXTENSION_NAME = "VK_EXT_shader_stencil_export";
pub const VK_EXT_sample_locations = @as(c_int, 1);
pub const VK_EXT_SAMPLE_LOCATIONS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SAMPLE_LOCATIONS_EXTENSION_NAME = "VK_EXT_sample_locations";
pub const VK_EXT_blend_operation_advanced = @as(c_int, 1);
pub const VK_EXT_BLEND_OPERATION_ADVANCED_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_BLEND_OPERATION_ADVANCED_EXTENSION_NAME = "VK_EXT_blend_operation_advanced";
pub const VK_NV_fragment_coverage_to_color = @as(c_int, 1);
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FRAGMENT_COVERAGE_TO_COLOR_EXTENSION_NAME = "VK_NV_fragment_coverage_to_color";
pub const VK_NV_framebuffer_mixed_samples = @as(c_int, 1);
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FRAMEBUFFER_MIXED_SAMPLES_EXTENSION_NAME = "VK_NV_framebuffer_mixed_samples";
pub const VK_NV_fill_rectangle = @as(c_int, 1);
pub const VK_NV_FILL_RECTANGLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FILL_RECTANGLE_EXTENSION_NAME = "VK_NV_fill_rectangle";
pub const VK_NV_shader_sm_builtins = @as(c_int, 1);
pub const VK_NV_SHADER_SM_BUILTINS_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_SHADER_SM_BUILTINS_EXTENSION_NAME = "VK_NV_shader_sm_builtins";
pub const VK_EXT_post_depth_coverage = @as(c_int, 1);
pub const VK_EXT_POST_DEPTH_COVERAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_POST_DEPTH_COVERAGE_EXTENSION_NAME = "VK_EXT_post_depth_coverage";
pub const VK_EXT_image_drm_format_modifier = @as(c_int, 1);
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_IMAGE_DRM_FORMAT_MODIFIER_EXTENSION_NAME = "VK_EXT_image_drm_format_modifier";
pub const VK_EXT_validation_cache = @as(c_int, 1);
pub const VK_EXT_VALIDATION_CACHE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_VALIDATION_CACHE_EXTENSION_NAME = "VK_EXT_validation_cache";
pub const VK_EXT_descriptor_indexing = @as(c_int, 1);
pub const VK_EXT_DESCRIPTOR_INDEXING_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DESCRIPTOR_INDEXING_EXTENSION_NAME = "VK_EXT_descriptor_indexing";
pub const VK_EXT_shader_viewport_index_layer = @as(c_int, 1);
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_VIEWPORT_INDEX_LAYER_EXTENSION_NAME = "VK_EXT_shader_viewport_index_layer";
pub const VK_NV_shading_rate_image = @as(c_int, 1);
pub const VK_NV_SHADING_RATE_IMAGE_SPEC_VERSION = @as(c_int, 3);
pub const VK_NV_SHADING_RATE_IMAGE_EXTENSION_NAME = "VK_NV_shading_rate_image";
pub const VK_NV_ray_tracing = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_SPEC_VERSION = @as(c_int, 3);
pub const VK_NV_RAY_TRACING_EXTENSION_NAME = "VK_NV_ray_tracing";
pub const VK_SHADER_UNUSED_KHR = ~@as(c_uint, 0);
pub const VK_SHADER_UNUSED_NV = VK_SHADER_UNUSED_KHR;
pub const VK_NV_representative_fragment_test = @as(c_int, 1);
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_REPRESENTATIVE_FRAGMENT_TEST_EXTENSION_NAME = "VK_NV_representative_fragment_test";
pub const VK_EXT_filter_cubic = @as(c_int, 1);
pub const VK_EXT_FILTER_CUBIC_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_FILTER_CUBIC_EXTENSION_NAME = "VK_EXT_filter_cubic";
pub const VK_QCOM_render_pass_shader_resolve = @as(c_int, 1);
pub const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_SPEC_VERSION = @as(c_int, 4);
pub const VK_QCOM_RENDER_PASS_SHADER_RESOLVE_EXTENSION_NAME = "VK_QCOM_render_pass_shader_resolve";
pub const VK_EXT_global_priority = @as(c_int, 1);
pub const VK_EXT_GLOBAL_PRIORITY_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_GLOBAL_PRIORITY_EXTENSION_NAME = "VK_EXT_global_priority";
pub const VK_EXT_external_memory_host = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_HOST_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTERNAL_MEMORY_HOST_EXTENSION_NAME = "VK_EXT_external_memory_host";
pub const VK_AMD_buffer_marker = @as(c_int, 1);
pub const VK_AMD_BUFFER_MARKER_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_BUFFER_MARKER_EXTENSION_NAME = "VK_AMD_buffer_marker";
pub const VK_AMD_pipeline_compiler_control = @as(c_int, 1);
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_PIPELINE_COMPILER_CONTROL_EXTENSION_NAME = "VK_AMD_pipeline_compiler_control";
pub const VK_EXT_calibrated_timestamps = @as(c_int, 1);
pub const VK_EXT_CALIBRATED_TIMESTAMPS_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_CALIBRATED_TIMESTAMPS_EXTENSION_NAME = "VK_EXT_calibrated_timestamps";
pub const VK_AMD_shader_core_properties = @as(c_int, 1);
pub const VK_AMD_SHADER_CORE_PROPERTIES_SPEC_VERSION = @as(c_int, 2);
pub const VK_AMD_SHADER_CORE_PROPERTIES_EXTENSION_NAME = "VK_AMD_shader_core_properties";
pub const VK_AMD_memory_overallocation_behavior = @as(c_int, 1);
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_MEMORY_OVERALLOCATION_BEHAVIOR_EXTENSION_NAME = "VK_AMD_memory_overallocation_behavior";
pub const VK_EXT_vertex_attribute_divisor = @as(c_int, 1);
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_VERTEX_ATTRIBUTE_DIVISOR_EXTENSION_NAME = "VK_EXT_vertex_attribute_divisor";
pub const VK_EXT_pipeline_creation_feedback = @as(c_int, 1);
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_CREATION_FEEDBACK_EXTENSION_NAME = "VK_EXT_pipeline_creation_feedback";
pub const VK_NV_shader_subgroup_partitioned = @as(c_int, 1);
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_SHADER_SUBGROUP_PARTITIONED_EXTENSION_NAME = "VK_NV_shader_subgroup_partitioned";
pub const VK_NV_compute_shader_derivatives = @as(c_int, 1);
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COMPUTE_SHADER_DERIVATIVES_EXTENSION_NAME = "VK_NV_compute_shader_derivatives";
pub const VK_NV_mesh_shader = @as(c_int, 1);
pub const VK_NV_MESH_SHADER_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_MESH_SHADER_EXTENSION_NAME = "VK_NV_mesh_shader";
pub const VK_NV_fragment_shader_barycentric = @as(c_int, 1);
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FRAGMENT_SHADER_BARYCENTRIC_EXTENSION_NAME = "VK_NV_fragment_shader_barycentric";
pub const VK_NV_shader_image_footprint = @as(c_int, 1);
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_SHADER_IMAGE_FOOTPRINT_EXTENSION_NAME = "VK_NV_shader_image_footprint";
pub const VK_NV_scissor_exclusive = @as(c_int, 1);
pub const VK_NV_SCISSOR_EXCLUSIVE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_SCISSOR_EXCLUSIVE_EXTENSION_NAME = "VK_NV_scissor_exclusive";
pub const VK_NV_device_diagnostic_checkpoints = @as(c_int, 1);
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_DEVICE_DIAGNOSTIC_CHECKPOINTS_EXTENSION_NAME = "VK_NV_device_diagnostic_checkpoints";
pub const VK_INTEL_shader_integer_functions2 = @as(c_int, 1);
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_INTEL_SHADER_INTEGER_FUNCTIONS_2_EXTENSION_NAME = "VK_INTEL_shader_integer_functions2";
pub const VK_INTEL_performance_query = @as(c_int, 1);
pub const VK_INTEL_PERFORMANCE_QUERY_SPEC_VERSION = @as(c_int, 2);
pub const VK_INTEL_PERFORMANCE_QUERY_EXTENSION_NAME = "VK_INTEL_performance_query";
pub const VK_EXT_pci_bus_info = @as(c_int, 1);
pub const VK_EXT_PCI_BUS_INFO_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_PCI_BUS_INFO_EXTENSION_NAME = "VK_EXT_pci_bus_info";
pub const VK_AMD_display_native_hdr = @as(c_int, 1);
pub const VK_AMD_DISPLAY_NATIVE_HDR_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_DISPLAY_NATIVE_HDR_EXTENSION_NAME = "VK_AMD_display_native_hdr";
pub const VK_EXT_fragment_density_map = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_DENSITY_MAP_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_FRAGMENT_DENSITY_MAP_EXTENSION_NAME = "VK_EXT_fragment_density_map";
pub const VK_EXT_scalar_block_layout = @as(c_int, 1);
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SCALAR_BLOCK_LAYOUT_EXTENSION_NAME = "VK_EXT_scalar_block_layout";
pub const VK_GOOGLE_hlsl_functionality1 = @as(c_int, 1);
pub const VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME = "VK_GOOGLE_hlsl_functionality1";
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_SPEC_VERSION = VK_GOOGLE_HLSL_FUNCTIONALITY_1_SPEC_VERSION;
pub const VK_GOOGLE_HLSL_FUNCTIONALITY1_EXTENSION_NAME = VK_GOOGLE_HLSL_FUNCTIONALITY_1_EXTENSION_NAME;
pub const VK_GOOGLE_decorate_string = @as(c_int, 1);
pub const VK_GOOGLE_DECORATE_STRING_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_DECORATE_STRING_EXTENSION_NAME = "VK_GOOGLE_decorate_string";
pub const VK_EXT_subgroup_size_control = @as(c_int, 1);
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_SUBGROUP_SIZE_CONTROL_EXTENSION_NAME = "VK_EXT_subgroup_size_control";
pub const VK_AMD_shader_core_properties2 = @as(c_int, 1);
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_CORE_PROPERTIES_2_EXTENSION_NAME = "VK_AMD_shader_core_properties2";
pub const VK_AMD_device_coherent_memory = @as(c_int, 1);
pub const VK_AMD_DEVICE_COHERENT_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_DEVICE_COHERENT_MEMORY_EXTENSION_NAME = "VK_AMD_device_coherent_memory";
pub const VK_EXT_shader_image_atomic_int64 = @as(c_int, 1);
pub const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_IMAGE_ATOMIC_INT64_EXTENSION_NAME = "VK_EXT_shader_image_atomic_int64";
pub const VK_EXT_memory_budget = @as(c_int, 1);
pub const VK_EXT_MEMORY_BUDGET_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MEMORY_BUDGET_EXTENSION_NAME = "VK_EXT_memory_budget";
pub const VK_EXT_memory_priority = @as(c_int, 1);
pub const VK_EXT_MEMORY_PRIORITY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MEMORY_PRIORITY_EXTENSION_NAME = "VK_EXT_memory_priority";
pub const VK_NV_dedicated_allocation_image_aliasing = @as(c_int, 1);
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_DEDICATED_ALLOCATION_IMAGE_ALIASING_EXTENSION_NAME = "VK_NV_dedicated_allocation_image_aliasing";
pub const VK_EXT_buffer_device_address = @as(c_int, 1);
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_BUFFER_DEVICE_ADDRESS_EXTENSION_NAME = "VK_EXT_buffer_device_address";
pub const VK_EXT_tooling_info = @as(c_int, 1);
pub const VK_EXT_TOOLING_INFO_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_TOOLING_INFO_EXTENSION_NAME = "VK_EXT_tooling_info";
pub const VK_EXT_separate_stencil_usage = @as(c_int, 1);
pub const VK_EXT_SEPARATE_STENCIL_USAGE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SEPARATE_STENCIL_USAGE_EXTENSION_NAME = "VK_EXT_separate_stencil_usage";
pub const VK_EXT_validation_features = @as(c_int, 1);
pub const VK_EXT_VALIDATION_FEATURES_SPEC_VERSION = @as(c_int, 5);
pub const VK_EXT_VALIDATION_FEATURES_EXTENSION_NAME = "VK_EXT_validation_features";
pub const VK_NV_cooperative_matrix = @as(c_int, 1);
pub const VK_NV_COOPERATIVE_MATRIX_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COOPERATIVE_MATRIX_EXTENSION_NAME = "VK_NV_cooperative_matrix";
pub const VK_NV_coverage_reduction_mode = @as(c_int, 1);
pub const VK_NV_COVERAGE_REDUCTION_MODE_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_COVERAGE_REDUCTION_MODE_EXTENSION_NAME = "VK_NV_coverage_reduction_mode";
pub const VK_EXT_fragment_shader_interlock = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_SHADER_INTERLOCK_EXTENSION_NAME = "VK_EXT_fragment_shader_interlock";
pub const VK_EXT_ycbcr_image_arrays = @as(c_int, 1);
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_YCBCR_IMAGE_ARRAYS_EXTENSION_NAME = "VK_EXT_ycbcr_image_arrays";
pub const VK_EXT_provoking_vertex = @as(c_int, 1);
pub const VK_EXT_PROVOKING_VERTEX_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PROVOKING_VERTEX_EXTENSION_NAME = "VK_EXT_provoking_vertex";
pub const VK_EXT_headless_surface = @as(c_int, 1);
pub const VK_EXT_HEADLESS_SURFACE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_HEADLESS_SURFACE_EXTENSION_NAME = "VK_EXT_headless_surface";
pub const VK_EXT_line_rasterization = @as(c_int, 1);
pub const VK_EXT_LINE_RASTERIZATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_LINE_RASTERIZATION_EXTENSION_NAME = "VK_EXT_line_rasterization";
pub const VK_EXT_shader_atomic_float = @as(c_int, 1);
pub const VK_EXT_SHADER_ATOMIC_FLOAT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_ATOMIC_FLOAT_EXTENSION_NAME = "VK_EXT_shader_atomic_float";
pub const VK_EXT_host_query_reset = @as(c_int, 1);
pub const VK_EXT_HOST_QUERY_RESET_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_HOST_QUERY_RESET_EXTENSION_NAME = "VK_EXT_host_query_reset";
pub const VK_EXT_index_type_uint8 = @as(c_int, 1);
pub const VK_EXT_INDEX_TYPE_UINT8_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_INDEX_TYPE_UINT8_EXTENSION_NAME = "VK_EXT_index_type_uint8";
pub const VK_EXT_extended_dynamic_state = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_extended_dynamic_state";
pub const VK_EXT_shader_atomic_float2 = @as(c_int, 1);
pub const VK_EXT_SHADER_ATOMIC_FLOAT_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_ATOMIC_FLOAT_2_EXTENSION_NAME = "VK_EXT_shader_atomic_float2";
pub const VK_EXT_shader_demote_to_helper_invocation = @as(c_int, 1);
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_DEMOTE_TO_HELPER_INVOCATION_EXTENSION_NAME = "VK_EXT_shader_demote_to_helper_invocation";
pub const VK_NV_device_generated_commands = @as(c_int, 1);
pub const VK_NV_DEVICE_GENERATED_COMMANDS_SPEC_VERSION = @as(c_int, 3);
pub const VK_NV_DEVICE_GENERATED_COMMANDS_EXTENSION_NAME = "VK_NV_device_generated_commands";
pub const VK_NV_inherited_viewport_scissor = @as(c_int, 1);
pub const VK_NV_INHERITED_VIEWPORT_SCISSOR_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_INHERITED_VIEWPORT_SCISSOR_EXTENSION_NAME = "VK_NV_inherited_viewport_scissor";
pub const VK_EXT_texel_buffer_alignment = @as(c_int, 1);
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_TEXEL_BUFFER_ALIGNMENT_EXTENSION_NAME = "VK_EXT_texel_buffer_alignment";
pub const VK_QCOM_render_pass_transform = @as(c_int, 1);
pub const VK_QCOM_RENDER_PASS_TRANSFORM_SPEC_VERSION = @as(c_int, 3);
pub const VK_QCOM_RENDER_PASS_TRANSFORM_EXTENSION_NAME = "VK_QCOM_render_pass_transform";
pub const VK_EXT_device_memory_report = @as(c_int, 1);
pub const VK_EXT_DEVICE_MEMORY_REPORT_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_DEVICE_MEMORY_REPORT_EXTENSION_NAME = "VK_EXT_device_memory_report";
pub const VK_EXT_acquire_drm_display = @as(c_int, 1);
pub const VK_EXT_ACQUIRE_DRM_DISPLAY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_ACQUIRE_DRM_DISPLAY_EXTENSION_NAME = "VK_EXT_acquire_drm_display";
pub const VK_EXT_robustness2 = @as(c_int, 1);
pub const VK_EXT_ROBUSTNESS_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_ROBUSTNESS_2_EXTENSION_NAME = "VK_EXT_robustness2";
pub const VK_EXT_custom_border_color = @as(c_int, 1);
pub const VK_EXT_CUSTOM_BORDER_COLOR_SPEC_VERSION = @as(c_int, 12);
pub const VK_EXT_CUSTOM_BORDER_COLOR_EXTENSION_NAME = "VK_EXT_custom_border_color";
pub const VK_GOOGLE_user_type = @as(c_int, 1);
pub const VK_GOOGLE_USER_TYPE_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_USER_TYPE_EXTENSION_NAME = "VK_GOOGLE_user_type";
pub const VK_EXT_private_data = @as(c_int, 1);
pub const VK_EXT_PRIVATE_DATA_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PRIVATE_DATA_EXTENSION_NAME = "VK_EXT_private_data";
pub const VK_EXT_pipeline_creation_cache_control = @as(c_int, 1);
pub const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_SPEC_VERSION = @as(c_int, 3);
pub const VK_EXT_PIPELINE_CREATION_CACHE_CONTROL_EXTENSION_NAME = "VK_EXT_pipeline_creation_cache_control";
pub const VK_NV_device_diagnostics_config = @as(c_int, 1);
pub const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_SPEC_VERSION = @as(c_int, 2);
pub const VK_NV_DEVICE_DIAGNOSTICS_CONFIG_EXTENSION_NAME = "VK_NV_device_diagnostics_config";
pub const VK_QCOM_render_pass_store_ops = @as(c_int, 1);
pub const VK_QCOM_RENDER_PASS_STORE_OPS_SPEC_VERSION = @as(c_int, 2);
pub const VK_QCOM_RENDER_PASS_STORE_OPS_EXTENSION_NAME = "VK_QCOM_render_pass_store_ops";
pub const VK_EXT_graphics_pipeline_library = @as(c_int, 1);
pub const VK_EXT_GRAPHICS_PIPELINE_LIBRARY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_GRAPHICS_PIPELINE_LIBRARY_EXTENSION_NAME = "VK_EXT_graphics_pipeline_library";
pub const VK_AMD_shader_early_and_late_fragment_tests = @as(c_int, 1);
pub const VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_SPEC_VERSION = @as(c_int, 1);
pub const VK_AMD_SHADER_EARLY_AND_LATE_FRAGMENT_TESTS_EXTENSION_NAME = "VK_AMD_shader_early_and_late_fragment_tests";
pub const VK_NV_fragment_shading_rate_enums = @as(c_int, 1);
pub const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_FRAGMENT_SHADING_RATE_ENUMS_EXTENSION_NAME = "VK_NV_fragment_shading_rate_enums";
pub const VK_NV_ray_tracing_motion_blur = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_MOTION_BLUR_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_RAY_TRACING_MOTION_BLUR_EXTENSION_NAME = "VK_NV_ray_tracing_motion_blur";
pub const VK_EXT_ycbcr_2plane_444_formats = @as(c_int, 1);
pub const VK_EXT_YCBCR_2PLANE_444_FORMATS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_YCBCR_2PLANE_444_FORMATS_EXTENSION_NAME = "VK_EXT_ycbcr_2plane_444_formats";
pub const VK_EXT_fragment_density_map2 = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_DENSITY_MAP_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_FRAGMENT_DENSITY_MAP_2_EXTENSION_NAME = "VK_EXT_fragment_density_map2";
pub const VK_QCOM_rotated_copy_commands = @as(c_int, 1);
pub const VK_QCOM_ROTATED_COPY_COMMANDS_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_ROTATED_COPY_COMMANDS_EXTENSION_NAME = "VK_QCOM_rotated_copy_commands";
pub const VK_EXT_image_robustness = @as(c_int, 1);
pub const VK_EXT_IMAGE_ROBUSTNESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_ROBUSTNESS_EXTENSION_NAME = "VK_EXT_image_robustness";
pub const VK_EXT_image_compression_control = @as(c_int, 1);
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_EXTENSION_NAME = "VK_EXT_image_compression_control";
pub const VK_EXT_attachment_feedback_loop_layout = @as(c_int, 1);
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_ATTACHMENT_FEEDBACK_LOOP_LAYOUT_EXTENSION_NAME = "VK_EXT_attachment_feedback_loop_layout";
pub const VK_EXT_4444_formats = @as(c_int, 1);
pub const VK_EXT_4444_FORMATS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_4444_FORMATS_EXTENSION_NAME = "VK_EXT_4444_formats";
pub const VK_ARM_rasterization_order_attachment_access = @as(c_int, 1);
pub const VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_SPEC_VERSION = @as(c_int, 1);
pub const VK_ARM_RASTERIZATION_ORDER_ATTACHMENT_ACCESS_EXTENSION_NAME = "VK_ARM_rasterization_order_attachment_access";
pub const VK_EXT_rgba10x6_formats = @as(c_int, 1);
pub const VK_EXT_RGBA10X6_FORMATS_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_RGBA10X6_FORMATS_EXTENSION_NAME = "VK_EXT_rgba10x6_formats";
pub const VK_NV_acquire_winrt_display = @as(c_int, 1);
pub const VK_NV_ACQUIRE_WINRT_DISPLAY_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_ACQUIRE_WINRT_DISPLAY_EXTENSION_NAME = "VK_NV_acquire_winrt_display";
pub const VK_VALVE_mutable_descriptor_type = @as(c_int, 1);
pub const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_SPEC_VERSION = @as(c_int, 1);
pub const VK_VALVE_MUTABLE_DESCRIPTOR_TYPE_EXTENSION_NAME = "VK_VALVE_mutable_descriptor_type";
pub const VK_EXT_vertex_input_dynamic_state = @as(c_int, 1);
pub const VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_VERTEX_INPUT_DYNAMIC_STATE_EXTENSION_NAME = "VK_EXT_vertex_input_dynamic_state";
pub const VK_EXT_physical_device_drm = @as(c_int, 1);
pub const VK_EXT_PHYSICAL_DEVICE_DRM_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PHYSICAL_DEVICE_DRM_EXTENSION_NAME = "VK_EXT_physical_device_drm";
pub const VK_EXT_depth_clip_control = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLIP_CONTROL_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_DEPTH_CLIP_CONTROL_EXTENSION_NAME = "VK_EXT_depth_clip_control";
pub const VK_EXT_primitive_topology_list_restart = @as(c_int, 1);
pub const VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PRIMITIVE_TOPOLOGY_LIST_RESTART_EXTENSION_NAME = "VK_EXT_primitive_topology_list_restart";
pub const VK_HUAWEI_subpass_shading = @as(c_int, 1);
pub const VK_HUAWEI_SUBPASS_SHADING_SPEC_VERSION = @as(c_int, 2);
pub const VK_HUAWEI_SUBPASS_SHADING_EXTENSION_NAME = "VK_HUAWEI_subpass_shading";
pub const VK_HUAWEI_invocation_mask = @as(c_int, 1);
pub const VK_HUAWEI_INVOCATION_MASK_SPEC_VERSION = @as(c_int, 1);
pub const VK_HUAWEI_INVOCATION_MASK_EXTENSION_NAME = "VK_HUAWEI_invocation_mask";
pub const VK_NV_external_memory_rdma = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_RDMA_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_EXTERNAL_MEMORY_RDMA_EXTENSION_NAME = "VK_NV_external_memory_rdma";
pub const VK_EXT_pipeline_properties = @as(c_int, 1);
pub const VK_EXT_PIPELINE_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PIPELINE_PROPERTIES_EXTENSION_NAME = "VK_EXT_pipeline_properties";
pub const VK_EXT_multisampled_render_to_single_sampled = @as(c_int, 1);
pub const VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MULTISAMPLED_RENDER_TO_SINGLE_SAMPLED_EXTENSION_NAME = "VK_EXT_multisampled_render_to_single_sampled";
pub const VK_EXT_extended_dynamic_state2 = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_2_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_EXTENDED_DYNAMIC_STATE_2_EXTENSION_NAME = "VK_EXT_extended_dynamic_state2";
pub const VK_EXT_color_write_enable = @as(c_int, 1);
pub const VK_EXT_COLOR_WRITE_ENABLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_COLOR_WRITE_ENABLE_EXTENSION_NAME = "VK_EXT_color_write_enable";
pub const VK_EXT_primitives_generated_query = @as(c_int, 1);
pub const VK_EXT_PRIMITIVES_GENERATED_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PRIMITIVES_GENERATED_QUERY_EXTENSION_NAME = "VK_EXT_primitives_generated_query";
pub const VK_EXT_global_priority_query = @as(c_int, 1);
pub const VK_EXT_GLOBAL_PRIORITY_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_GLOBAL_PRIORITY_QUERY_EXTENSION_NAME = "VK_EXT_global_priority_query";
pub const VK_MAX_GLOBAL_PRIORITY_SIZE_EXT = VK_MAX_GLOBAL_PRIORITY_SIZE_KHR;
pub const VK_EXT_image_view_min_lod = @as(c_int, 1);
pub const VK_EXT_IMAGE_VIEW_MIN_LOD_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_VIEW_MIN_LOD_EXTENSION_NAME = "VK_EXT_image_view_min_lod";
pub const VK_EXT_multi_draw = @as(c_int, 1);
pub const VK_EXT_MULTI_DRAW_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_MULTI_DRAW_EXTENSION_NAME = "VK_EXT_multi_draw";
pub const VK_EXT_image_2d_view_of_3d = @as(c_int, 1);
pub const VK_EXT_IMAGE_2D_VIEW_OF_3D_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_2D_VIEW_OF_3D_EXTENSION_NAME = "VK_EXT_image_2d_view_of_3d";
pub const VK_EXT_load_store_op_none = @as(c_int, 1);
pub const VK_EXT_LOAD_STORE_OP_NONE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_LOAD_STORE_OP_NONE_EXTENSION_NAME = "VK_EXT_load_store_op_none";
pub const VK_EXT_border_color_swizzle = @as(c_int, 1);
pub const VK_EXT_BORDER_COLOR_SWIZZLE_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_BORDER_COLOR_SWIZZLE_EXTENSION_NAME = "VK_EXT_border_color_swizzle";
pub const VK_EXT_pageable_device_local_memory = @as(c_int, 1);
pub const VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_PAGEABLE_DEVICE_LOCAL_MEMORY_EXTENSION_NAME = "VK_EXT_pageable_device_local_memory";
pub const VK_VALVE_descriptor_set_host_mapping = @as(c_int, 1);
pub const VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_SPEC_VERSION = @as(c_int, 1);
pub const VK_VALVE_DESCRIPTOR_SET_HOST_MAPPING_EXTENSION_NAME = "VK_VALVE_descriptor_set_host_mapping";
pub const VK_EXT_non_seamless_cube_map = @as(c_int, 1);
pub const VK_EXT_NON_SEAMLESS_CUBE_MAP_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_NON_SEAMLESS_CUBE_MAP_EXTENSION_NAME = "VK_EXT_non_seamless_cube_map";
pub const VK_QCOM_fragment_density_map_offset = @as(c_int, 1);
pub const VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_FRAGMENT_DENSITY_MAP_OFFSET_EXTENSION_NAME = "VK_QCOM_fragment_density_map_offset";
pub const VK_NV_linear_color_attachment = @as(c_int, 1);
pub const VK_NV_LINEAR_COLOR_ATTACHMENT_SPEC_VERSION = @as(c_int, 1);
pub const VK_NV_LINEAR_COLOR_ATTACHMENT_EXTENSION_NAME = "VK_NV_linear_color_attachment";
pub const VK_GOOGLE_surfaceless_query = @as(c_int, 1);
pub const VK_GOOGLE_SURFACELESS_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_GOOGLE_SURFACELESS_QUERY_EXTENSION_NAME = "VK_GOOGLE_surfaceless_query";
pub const VK_EXT_image_compression_control_swapchain = @as(c_int, 1);
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_IMAGE_COMPRESSION_CONTROL_SWAPCHAIN_EXTENSION_NAME = "VK_EXT_image_compression_control_swapchain";
pub const VK_QCOM_image_processing = @as(c_int, 1);
pub const VK_QCOM_IMAGE_PROCESSING_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_IMAGE_PROCESSING_EXTENSION_NAME = "VK_QCOM_image_processing";
pub const VK_EXT_subpass_merge_feedback = @as(c_int, 1);
pub const VK_EXT_SUBPASS_MERGE_FEEDBACK_SPEC_VERSION = @as(c_int, 2);
pub const VK_EXT_SUBPASS_MERGE_FEEDBACK_EXTENSION_NAME = "VK_EXT_subpass_merge_feedback";
pub const VK_EXT_shader_module_identifier = @as(c_int, 1);
pub const VK_MAX_SHADER_MODULE_IDENTIFIER_SIZE_EXT = @as(c_uint, 32);
pub const VK_EXT_SHADER_MODULE_IDENTIFIER_SPEC_VERSION = @as(c_int, 1);
pub const VK_EXT_SHADER_MODULE_IDENTIFIER_EXTENSION_NAME = "VK_EXT_shader_module_identifier";
pub const VK_QCOM_tile_properties = @as(c_int, 1);
pub const VK_QCOM_TILE_PROPERTIES_SPEC_VERSION = @as(c_int, 1);
pub const VK_QCOM_TILE_PROPERTIES_EXTENSION_NAME = "VK_QCOM_tile_properties";
pub const VK_SEC_amigo_profiling = @as(c_int, 1);
pub const VK_SEC_AMIGO_PROFILING_SPEC_VERSION = @as(c_int, 1);
pub const VK_SEC_AMIGO_PROFILING_EXTENSION_NAME = "VK_SEC_amigo_profiling";
pub const VK_KHR_acceleration_structure = @as(c_int, 1);
pub const VK_KHR_ACCELERATION_STRUCTURE_SPEC_VERSION = @as(c_int, 13);
pub const VK_KHR_ACCELERATION_STRUCTURE_EXTENSION_NAME = "VK_KHR_acceleration_structure";
pub const VK_KHR_ray_tracing_pipeline = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_PIPELINE_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RAY_TRACING_PIPELINE_EXTENSION_NAME = "VK_KHR_ray_tracing_pipeline";
pub const VK_KHR_ray_query = @as(c_int, 1);
pub const VK_KHR_RAY_QUERY_SPEC_VERSION = @as(c_int, 1);
pub const VK_KHR_RAY_QUERY_EXTENSION_NAME = "VK_KHR_ray_query";
pub const APIENTRY = "";
pub const GLFW_APIENTRY_DEFINED = "";
pub const GL_GLEXT_LEGACY = "";
pub const __gl_h_ = "";
pub const __gltypes_h_ = "";
pub const _OpenGLAvailability_H = "";
pub const __OS_AVAILABILITY__ = "";
pub const API_TO_BE_DEPRECATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __AVAILABILITY_INTERNAL__ = "";
pub const __MAC_OS_X_VERSION_MIN_REQUIRED = __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__;
pub const __MAC_OS_X_VERSION_MAX_ALLOWED = __MAC_12_0;
pub const __AVAILABILITY_INTERNAL_REGULAR = "";
pub const __ENABLE_LEGACY_MAC_AVAILABILITY = @as(c_int, 1);
pub inline fn __API_AVAILABLE1(x: anytype) @TypeOf(__API_A(x)) {
    return __API_A(x);
}
pub inline fn __API_RANGE_STRINGIFY(x: anytype) @TypeOf(__API_RANGE_STRINGIFY2(x)) {
    return __API_RANGE_STRINGIFY2(x);
}
pub inline fn __API_AVAILABLE_BEGIN1(a: anytype) @TypeOf(__API_A_BEGIN(a)) {
    return __API_A_BEGIN(a);
}
pub inline fn __API_DEPRECATED_MSG2(msg: anytype, x: anytype) @TypeOf(__API_D(msg, x)) {
    return __API_D(msg, x);
}
pub inline fn __API_DEPRECATED_BEGIN_MSG2(msg: anytype, a: anytype) @TypeOf(__API_D_BEGIN(msg, a)) {
    return __API_D_BEGIN(msg, a);
}
pub inline fn __API_DEPRECATED_REP2(rep: anytype, x: anytype) @TypeOf(__API_R(rep, x)) {
    return __API_R(rep, x);
}
pub inline fn __API_DEPRECATED_BEGIN_REP2(rep: anytype, a: anytype) @TypeOf(__API_R_BEGIN(rep, a)) {
    return __API_R_BEGIN(rep, a);
}
pub inline fn __API_UNAVAILABLE1(x: anytype) @TypeOf(__API_U(x)) {
    return __API_U(x);
}
pub inline fn __API_UNAVAILABLE_BEGIN1(a: anytype) @TypeOf(__API_U_BEGIN(a)) {
    return __API_U_BEGIN(a);
}
pub inline fn OPENGL_ENUM_AVAILABLE(from: anytype) @TypeOf(OPENGL_AVAILABLE(from)) {
    return OPENGL_AVAILABLE(from);
}
pub inline fn OPENGL_ENUM_DEPRECATED(from: anytype, to: anytype) @TypeOf(OPENGL_DEPRECATED(from, to)) {
    return OPENGL_DEPRECATED(from, to);
}
pub inline fn OPENGL_ENUM_DEPRECATED_MSG(from: anytype, to: anytype, msg: anytype) @TypeOf(OPENGL_DEPRECATED_MSG(from, to, msg)) {
    return OPENGL_DEPRECATED_MSG(from, to, msg);
}
pub const GL_LOGIC_OP = GL_INDEX_LOGIC_OP;
pub const GL_TEXTURE_COMPONENTS = GL_TEXTURE_INTERNAL_FORMAT;
pub const GL_VERSION_1_1 = @as(c_int, 1);
pub const GL_VERSION_1_2 = @as(c_int, 1);
pub const GL_VERSION_1_3 = @as(c_int, 1);
pub const GL_VERSION_1_4 = @as(c_int, 1);
pub const GL_VERSION_1_5 = @as(c_int, 1);
pub const GL_VERSION_2_0 = @as(c_int, 1);
pub const GL_VERSION_2_1 = @as(c_int, 1);
pub const GL_ACCUM = @as(c_int, 0x0100);
pub const GL_LOAD = @as(c_int, 0x0101);
pub const GL_RETURN = @as(c_int, 0x0102);
pub const GL_MULT = @as(c_int, 0x0103);
pub const GL_ADD = @as(c_int, 0x0104);
pub const GL_NEVER = @as(c_int, 0x0200);
pub const GL_LESS = @as(c_int, 0x0201);
pub const GL_EQUAL = @as(c_int, 0x0202);
pub const GL_LEQUAL = @as(c_int, 0x0203);
pub const GL_GREATER = @as(c_int, 0x0204);
pub const GL_NOTEQUAL = @as(c_int, 0x0205);
pub const GL_GEQUAL = @as(c_int, 0x0206);
pub const GL_ALWAYS = @as(c_int, 0x0207);
pub const GL_CURRENT_BIT = @as(c_int, 0x00000001);
pub const GL_POINT_BIT = @as(c_int, 0x00000002);
pub const GL_LINE_BIT = @as(c_int, 0x00000004);
pub const GL_POLYGON_BIT = @as(c_int, 0x00000008);
pub const GL_POLYGON_STIPPLE_BIT = @as(c_int, 0x00000010);
pub const GL_PIXEL_MODE_BIT = @as(c_int, 0x00000020);
pub const GL_LIGHTING_BIT = @as(c_int, 0x00000040);
pub const GL_FOG_BIT = @as(c_int, 0x00000080);
pub const GL_DEPTH_BUFFER_BIT = @as(c_int, 0x00000100);
pub const GL_ACCUM_BUFFER_BIT = @as(c_int, 0x00000200);
pub const GL_STENCIL_BUFFER_BIT = @as(c_int, 0x00000400);
pub const GL_VIEWPORT_BIT = @as(c_int, 0x00000800);
pub const GL_TRANSFORM_BIT = @as(c_int, 0x00001000);
pub const GL_ENABLE_BIT = @as(c_int, 0x00002000);
pub const GL_COLOR_BUFFER_BIT = @as(c_int, 0x00004000);
pub const GL_HINT_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal);
pub const GL_EVAL_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const GL_LIST_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const GL_TEXTURE_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const GL_SCISSOR_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const GL_ALL_ATTRIB_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000fffff, .hexadecimal);
pub const GL_POINTS = @as(c_int, 0x0000);
pub const GL_LINES = @as(c_int, 0x0001);
pub const GL_LINE_LOOP = @as(c_int, 0x0002);
pub const GL_LINE_STRIP = @as(c_int, 0x0003);
pub const GL_TRIANGLES = @as(c_int, 0x0004);
pub const GL_TRIANGLE_STRIP = @as(c_int, 0x0005);
pub const GL_TRIANGLE_FAN = @as(c_int, 0x0006);
pub const GL_QUADS = @as(c_int, 0x0007);
pub const GL_QUAD_STRIP = @as(c_int, 0x0008);
pub const GL_POLYGON = @as(c_int, 0x0009);
pub const GL_ZERO = @as(c_int, 0);
pub const GL_ONE = @as(c_int, 1);
pub const GL_SRC_COLOR = @as(c_int, 0x0300);
pub const GL_ONE_MINUS_SRC_COLOR = @as(c_int, 0x0301);
pub const GL_SRC_ALPHA = @as(c_int, 0x0302);
pub const GL_ONE_MINUS_SRC_ALPHA = @as(c_int, 0x0303);
pub const GL_DST_ALPHA = @as(c_int, 0x0304);
pub const GL_ONE_MINUS_DST_ALPHA = @as(c_int, 0x0305);
pub const GL_DST_COLOR = @as(c_int, 0x0306);
pub const GL_ONE_MINUS_DST_COLOR = @as(c_int, 0x0307);
pub const GL_SRC_ALPHA_SATURATE = @as(c_int, 0x0308);
pub const GL_TRUE = @as(c_int, 1);
pub const GL_FALSE = @as(c_int, 0);
pub const GL_CLIP_PLANE0 = @as(c_int, 0x3000);
pub const GL_CLIP_PLANE1 = @as(c_int, 0x3001);
pub const GL_CLIP_PLANE2 = @as(c_int, 0x3002);
pub const GL_CLIP_PLANE3 = @as(c_int, 0x3003);
pub const GL_CLIP_PLANE4 = @as(c_int, 0x3004);
pub const GL_CLIP_PLANE5 = @as(c_int, 0x3005);
pub const GL_BYTE = @as(c_int, 0x1400);
pub const GL_UNSIGNED_BYTE = @as(c_int, 0x1401);
pub const GL_SHORT = @as(c_int, 0x1402);
pub const GL_UNSIGNED_SHORT = @as(c_int, 0x1403);
pub const GL_INT = @as(c_int, 0x1404);
pub const GL_UNSIGNED_INT = @as(c_int, 0x1405);
pub const GL_FLOAT = @as(c_int, 0x1406);
pub const GL_2_BYTES = @as(c_int, 0x1407);
pub const GL_3_BYTES = @as(c_int, 0x1408);
pub const GL_4_BYTES = @as(c_int, 0x1409);
pub const GL_DOUBLE = @as(c_int, 0x140A);
pub const GL_NONE = @as(c_int, 0);
pub const GL_FRONT_LEFT = @as(c_int, 0x0400);
pub const GL_FRONT_RIGHT = @as(c_int, 0x0401);
pub const GL_BACK_LEFT = @as(c_int, 0x0402);
pub const GL_BACK_RIGHT = @as(c_int, 0x0403);
pub const GL_FRONT = @as(c_int, 0x0404);
pub const GL_BACK = @as(c_int, 0x0405);
pub const GL_LEFT = @as(c_int, 0x0406);
pub const GL_RIGHT = @as(c_int, 0x0407);
pub const GL_FRONT_AND_BACK = @as(c_int, 0x0408);
pub const GL_AUX0 = @as(c_int, 0x0409);
pub const GL_AUX1 = @as(c_int, 0x040A);
pub const GL_AUX2 = @as(c_int, 0x040B);
pub const GL_AUX3 = @as(c_int, 0x040C);
pub const GL_NO_ERROR = @as(c_int, 0);
pub const GL_INVALID_ENUM = @as(c_int, 0x0500);
pub const GL_INVALID_VALUE = @as(c_int, 0x0501);
pub const GL_INVALID_OPERATION = @as(c_int, 0x0502);
pub const GL_STACK_OVERFLOW = @as(c_int, 0x0503);
pub const GL_STACK_UNDERFLOW = @as(c_int, 0x0504);
pub const GL_OUT_OF_MEMORY = @as(c_int, 0x0505);
pub const GL_2D = @as(c_int, 0x0600);
pub const GL_3D = @as(c_int, 0x0601);
pub const GL_3D_COLOR = @as(c_int, 0x0602);
pub const GL_3D_COLOR_TEXTURE = @as(c_int, 0x0603);
pub const GL_4D_COLOR_TEXTURE = @as(c_int, 0x0604);
pub const GL_PASS_THROUGH_TOKEN = @as(c_int, 0x0700);
pub const GL_POINT_TOKEN = @as(c_int, 0x0701);
pub const GL_LINE_TOKEN = @as(c_int, 0x0702);
pub const GL_POLYGON_TOKEN = @as(c_int, 0x0703);
pub const GL_BITMAP_TOKEN = @as(c_int, 0x0704);
pub const GL_DRAW_PIXEL_TOKEN = @as(c_int, 0x0705);
pub const GL_COPY_PIXEL_TOKEN = @as(c_int, 0x0706);
pub const GL_LINE_RESET_TOKEN = @as(c_int, 0x0707);
pub const GL_EXP = @as(c_int, 0x0800);
pub const GL_EXP2 = @as(c_int, 0x0801);
pub const GL_CW = @as(c_int, 0x0900);
pub const GL_CCW = @as(c_int, 0x0901);
pub const GL_COEFF = @as(c_int, 0x0A00);
pub const GL_ORDER = @as(c_int, 0x0A01);
pub const GL_DOMAIN = @as(c_int, 0x0A02);
pub const GL_CURRENT_COLOR = @as(c_int, 0x0B00);
pub const GL_CURRENT_INDEX = @as(c_int, 0x0B01);
pub const GL_CURRENT_NORMAL = @as(c_int, 0x0B02);
pub const GL_CURRENT_TEXTURE_COORDS = @as(c_int, 0x0B03);
pub const GL_CURRENT_RASTER_COLOR = @as(c_int, 0x0B04);
pub const GL_CURRENT_RASTER_INDEX = @as(c_int, 0x0B05);
pub const GL_CURRENT_RASTER_TEXTURE_COORDS = @as(c_int, 0x0B06);
pub const GL_CURRENT_RASTER_POSITION = @as(c_int, 0x0B07);
pub const GL_CURRENT_RASTER_POSITION_VALID = @as(c_int, 0x0B08);
pub const GL_CURRENT_RASTER_DISTANCE = @as(c_int, 0x0B09);
pub const GL_POINT_SMOOTH = @as(c_int, 0x0B10);
pub const GL_POINT_SIZE = @as(c_int, 0x0B11);
pub const GL_POINT_SIZE_RANGE = @as(c_int, 0x0B12);
pub const GL_POINT_SIZE_GRANULARITY = @as(c_int, 0x0B13);
pub const GL_LINE_SMOOTH = @as(c_int, 0x0B20);
pub const GL_LINE_WIDTH = @as(c_int, 0x0B21);
pub const GL_LINE_WIDTH_RANGE = @as(c_int, 0x0B22);
pub const GL_LINE_WIDTH_GRANULARITY = @as(c_int, 0x0B23);
pub const GL_LINE_STIPPLE = @as(c_int, 0x0B24);
pub const GL_LINE_STIPPLE_PATTERN = @as(c_int, 0x0B25);
pub const GL_LINE_STIPPLE_REPEAT = @as(c_int, 0x0B26);
pub const GL_LIST_MODE = @as(c_int, 0x0B30);
pub const GL_MAX_LIST_NESTING = @as(c_int, 0x0B31);
pub const GL_LIST_BASE = @as(c_int, 0x0B32);
pub const GL_LIST_INDEX = @as(c_int, 0x0B33);
pub const GL_POLYGON_MODE = @as(c_int, 0x0B40);
pub const GL_POLYGON_SMOOTH = @as(c_int, 0x0B41);
pub const GL_POLYGON_STIPPLE = @as(c_int, 0x0B42);
pub const GL_EDGE_FLAG = @as(c_int, 0x0B43);
pub const GL_CULL_FACE = @as(c_int, 0x0B44);
pub const GL_CULL_FACE_MODE = @as(c_int, 0x0B45);
pub const GL_FRONT_FACE = @as(c_int, 0x0B46);
pub const GL_LIGHTING = @as(c_int, 0x0B50);
pub const GL_LIGHT_MODEL_LOCAL_VIEWER = @as(c_int, 0x0B51);
pub const GL_LIGHT_MODEL_TWO_SIDE = @as(c_int, 0x0B52);
pub const GL_LIGHT_MODEL_AMBIENT = @as(c_int, 0x0B53);
pub const GL_SHADE_MODEL = @as(c_int, 0x0B54);
pub const GL_COLOR_MATERIAL_FACE = @as(c_int, 0x0B55);
pub const GL_COLOR_MATERIAL_PARAMETER = @as(c_int, 0x0B56);
pub const GL_COLOR_MATERIAL = @as(c_int, 0x0B57);
pub const GL_FOG = @as(c_int, 0x0B60);
pub const GL_FOG_INDEX = @as(c_int, 0x0B61);
pub const GL_FOG_DENSITY = @as(c_int, 0x0B62);
pub const GL_FOG_START = @as(c_int, 0x0B63);
pub const GL_FOG_END = @as(c_int, 0x0B64);
pub const GL_FOG_MODE = @as(c_int, 0x0B65);
pub const GL_FOG_COLOR = @as(c_int, 0x0B66);
pub const GL_DEPTH_RANGE = @as(c_int, 0x0B70);
pub const GL_DEPTH_TEST = @as(c_int, 0x0B71);
pub const GL_DEPTH_WRITEMASK = @as(c_int, 0x0B72);
pub const GL_DEPTH_CLEAR_VALUE = @as(c_int, 0x0B73);
pub const GL_DEPTH_FUNC = @as(c_int, 0x0B74);
pub const GL_ACCUM_CLEAR_VALUE = @as(c_int, 0x0B80);
pub const GL_STENCIL_TEST = @as(c_int, 0x0B90);
pub const GL_STENCIL_CLEAR_VALUE = @as(c_int, 0x0B91);
pub const GL_STENCIL_FUNC = @as(c_int, 0x0B92);
pub const GL_STENCIL_VALUE_MASK = @as(c_int, 0x0B93);
pub const GL_STENCIL_FAIL = @as(c_int, 0x0B94);
pub const GL_STENCIL_PASS_DEPTH_FAIL = @as(c_int, 0x0B95);
pub const GL_STENCIL_PASS_DEPTH_PASS = @as(c_int, 0x0B96);
pub const GL_STENCIL_REF = @as(c_int, 0x0B97);
pub const GL_STENCIL_WRITEMASK = @as(c_int, 0x0B98);
pub const GL_MATRIX_MODE = @as(c_int, 0x0BA0);
pub const GL_NORMALIZE = @as(c_int, 0x0BA1);
pub const GL_VIEWPORT = @as(c_int, 0x0BA2);
pub const GL_MODELVIEW_STACK_DEPTH = @as(c_int, 0x0BA3);
pub const GL_PROJECTION_STACK_DEPTH = @as(c_int, 0x0BA4);
pub const GL_TEXTURE_STACK_DEPTH = @as(c_int, 0x0BA5);
pub const GL_MODELVIEW_MATRIX = @as(c_int, 0x0BA6);
pub const GL_PROJECTION_MATRIX = @as(c_int, 0x0BA7);
pub const GL_TEXTURE_MATRIX = @as(c_int, 0x0BA8);
pub const GL_ATTRIB_STACK_DEPTH = @as(c_int, 0x0BB0);
pub const GL_CLIENT_ATTRIB_STACK_DEPTH = @as(c_int, 0x0BB1);
pub const GL_ALPHA_TEST = @as(c_int, 0x0BC0);
pub const GL_ALPHA_TEST_FUNC = @as(c_int, 0x0BC1);
pub const GL_ALPHA_TEST_REF = @as(c_int, 0x0BC2);
pub const GL_DITHER = @as(c_int, 0x0BD0);
pub const GL_BLEND_DST = @as(c_int, 0x0BE0);
pub const GL_BLEND_SRC = @as(c_int, 0x0BE1);
pub const GL_BLEND = @as(c_int, 0x0BE2);
pub const GL_LOGIC_OP_MODE = @as(c_int, 0x0BF0);
pub const GL_INDEX_LOGIC_OP = @as(c_int, 0x0BF1);
pub const GL_COLOR_LOGIC_OP = @as(c_int, 0x0BF2);
pub const GL_AUX_BUFFERS = @as(c_int, 0x0C00);
pub const GL_DRAW_BUFFER = @as(c_int, 0x0C01);
pub const GL_READ_BUFFER = @as(c_int, 0x0C02);
pub const GL_SCISSOR_BOX = @as(c_int, 0x0C10);
pub const GL_SCISSOR_TEST = @as(c_int, 0x0C11);
pub const GL_INDEX_CLEAR_VALUE = @as(c_int, 0x0C20);
pub const GL_INDEX_WRITEMASK = @as(c_int, 0x0C21);
pub const GL_COLOR_CLEAR_VALUE = @as(c_int, 0x0C22);
pub const GL_COLOR_WRITEMASK = @as(c_int, 0x0C23);
pub const GL_INDEX_MODE = @as(c_int, 0x0C30);
pub const GL_RGBA_MODE = @as(c_int, 0x0C31);
pub const GL_DOUBLEBUFFER = @as(c_int, 0x0C32);
pub const GL_STEREO = @as(c_int, 0x0C33);
pub const GL_RENDER_MODE = @as(c_int, 0x0C40);
pub const GL_PERSPECTIVE_CORRECTION_HINT = @as(c_int, 0x0C50);
pub const GL_POINT_SMOOTH_HINT = @as(c_int, 0x0C51);
pub const GL_LINE_SMOOTH_HINT = @as(c_int, 0x0C52);
pub const GL_POLYGON_SMOOTH_HINT = @as(c_int, 0x0C53);
pub const GL_FOG_HINT = @as(c_int, 0x0C54);
pub const GL_TEXTURE_GEN_S = @as(c_int, 0x0C60);
pub const GL_TEXTURE_GEN_T = @as(c_int, 0x0C61);
pub const GL_TEXTURE_GEN_R = @as(c_int, 0x0C62);
pub const GL_TEXTURE_GEN_Q = @as(c_int, 0x0C63);
pub const GL_PIXEL_MAP_I_TO_I = @as(c_int, 0x0C70);
pub const GL_PIXEL_MAP_S_TO_S = @as(c_int, 0x0C71);
pub const GL_PIXEL_MAP_I_TO_R = @as(c_int, 0x0C72);
pub const GL_PIXEL_MAP_I_TO_G = @as(c_int, 0x0C73);
pub const GL_PIXEL_MAP_I_TO_B = @as(c_int, 0x0C74);
pub const GL_PIXEL_MAP_I_TO_A = @as(c_int, 0x0C75);
pub const GL_PIXEL_MAP_R_TO_R = @as(c_int, 0x0C76);
pub const GL_PIXEL_MAP_G_TO_G = @as(c_int, 0x0C77);
pub const GL_PIXEL_MAP_B_TO_B = @as(c_int, 0x0C78);
pub const GL_PIXEL_MAP_A_TO_A = @as(c_int, 0x0C79);
pub const GL_PIXEL_MAP_I_TO_I_SIZE = @as(c_int, 0x0CB0);
pub const GL_PIXEL_MAP_S_TO_S_SIZE = @as(c_int, 0x0CB1);
pub const GL_PIXEL_MAP_I_TO_R_SIZE = @as(c_int, 0x0CB2);
pub const GL_PIXEL_MAP_I_TO_G_SIZE = @as(c_int, 0x0CB3);
pub const GL_PIXEL_MAP_I_TO_B_SIZE = @as(c_int, 0x0CB4);
pub const GL_PIXEL_MAP_I_TO_A_SIZE = @as(c_int, 0x0CB5);
pub const GL_PIXEL_MAP_R_TO_R_SIZE = @as(c_int, 0x0CB6);
pub const GL_PIXEL_MAP_G_TO_G_SIZE = @as(c_int, 0x0CB7);
pub const GL_PIXEL_MAP_B_TO_B_SIZE = @as(c_int, 0x0CB8);
pub const GL_PIXEL_MAP_A_TO_A_SIZE = @as(c_int, 0x0CB9);
pub const GL_UNPACK_SWAP_BYTES = @as(c_int, 0x0CF0);
pub const GL_UNPACK_LSB_FIRST = @as(c_int, 0x0CF1);
pub const GL_UNPACK_ROW_LENGTH = @as(c_int, 0x0CF2);
pub const GL_UNPACK_SKIP_ROWS = @as(c_int, 0x0CF3);
pub const GL_UNPACK_SKIP_PIXELS = @as(c_int, 0x0CF4);
pub const GL_UNPACK_ALIGNMENT = @as(c_int, 0x0CF5);
pub const GL_PACK_SWAP_BYTES = @as(c_int, 0x0D00);
pub const GL_PACK_LSB_FIRST = @as(c_int, 0x0D01);
pub const GL_PACK_ROW_LENGTH = @as(c_int, 0x0D02);
pub const GL_PACK_SKIP_ROWS = @as(c_int, 0x0D03);
pub const GL_PACK_SKIP_PIXELS = @as(c_int, 0x0D04);
pub const GL_PACK_ALIGNMENT = @as(c_int, 0x0D05);
pub const GL_MAP_COLOR = @as(c_int, 0x0D10);
pub const GL_MAP_STENCIL = @as(c_int, 0x0D11);
pub const GL_INDEX_SHIFT = @as(c_int, 0x0D12);
pub const GL_INDEX_OFFSET = @as(c_int, 0x0D13);
pub const GL_RED_SCALE = @as(c_int, 0x0D14);
pub const GL_RED_BIAS = @as(c_int, 0x0D15);
pub const GL_ZOOM_X = @as(c_int, 0x0D16);
pub const GL_ZOOM_Y = @as(c_int, 0x0D17);
pub const GL_GREEN_SCALE = @as(c_int, 0x0D18);
pub const GL_GREEN_BIAS = @as(c_int, 0x0D19);
pub const GL_BLUE_SCALE = @as(c_int, 0x0D1A);
pub const GL_BLUE_BIAS = @as(c_int, 0x0D1B);
pub const GL_ALPHA_SCALE = @as(c_int, 0x0D1C);
pub const GL_ALPHA_BIAS = @as(c_int, 0x0D1D);
pub const GL_DEPTH_SCALE = @as(c_int, 0x0D1E);
pub const GL_DEPTH_BIAS = @as(c_int, 0x0D1F);
pub const GL_MAX_EVAL_ORDER = @as(c_int, 0x0D30);
pub const GL_MAX_LIGHTS = @as(c_int, 0x0D31);
pub const GL_MAX_CLIP_PLANES = @as(c_int, 0x0D32);
pub const GL_MAX_TEXTURE_SIZE = @as(c_int, 0x0D33);
pub const GL_MAX_PIXEL_MAP_TABLE = @as(c_int, 0x0D34);
pub const GL_MAX_ATTRIB_STACK_DEPTH = @as(c_int, 0x0D35);
pub const GL_MAX_MODELVIEW_STACK_DEPTH = @as(c_int, 0x0D36);
pub const GL_MAX_NAME_STACK_DEPTH = @as(c_int, 0x0D37);
pub const GL_MAX_PROJECTION_STACK_DEPTH = @as(c_int, 0x0D38);
pub const GL_MAX_TEXTURE_STACK_DEPTH = @as(c_int, 0x0D39);
pub const GL_MAX_VIEWPORT_DIMS = @as(c_int, 0x0D3A);
pub const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = @as(c_int, 0x0D3B);
pub const GL_SUBPIXEL_BITS = @as(c_int, 0x0D50);
pub const GL_INDEX_BITS = @as(c_int, 0x0D51);
pub const GL_RED_BITS = @as(c_int, 0x0D52);
pub const GL_GREEN_BITS = @as(c_int, 0x0D53);
pub const GL_BLUE_BITS = @as(c_int, 0x0D54);
pub const GL_ALPHA_BITS = @as(c_int, 0x0D55);
pub const GL_DEPTH_BITS = @as(c_int, 0x0D56);
pub const GL_STENCIL_BITS = @as(c_int, 0x0D57);
pub const GL_ACCUM_RED_BITS = @as(c_int, 0x0D58);
pub const GL_ACCUM_GREEN_BITS = @as(c_int, 0x0D59);
pub const GL_ACCUM_BLUE_BITS = @as(c_int, 0x0D5A);
pub const GL_ACCUM_ALPHA_BITS = @as(c_int, 0x0D5B);
pub const GL_NAME_STACK_DEPTH = @as(c_int, 0x0D70);
pub const GL_AUTO_NORMAL = @as(c_int, 0x0D80);
pub const GL_MAP1_COLOR_4 = @as(c_int, 0x0D90);
pub const GL_MAP1_INDEX = @as(c_int, 0x0D91);
pub const GL_MAP1_NORMAL = @as(c_int, 0x0D92);
pub const GL_MAP1_TEXTURE_COORD_1 = @as(c_int, 0x0D93);
pub const GL_MAP1_TEXTURE_COORD_2 = @as(c_int, 0x0D94);
pub const GL_MAP1_TEXTURE_COORD_3 = @as(c_int, 0x0D95);
pub const GL_MAP1_TEXTURE_COORD_4 = @as(c_int, 0x0D96);
pub const GL_MAP1_VERTEX_3 = @as(c_int, 0x0D97);
pub const GL_MAP1_VERTEX_4 = @as(c_int, 0x0D98);
pub const GL_MAP2_COLOR_4 = @as(c_int, 0x0DB0);
pub const GL_MAP2_INDEX = @as(c_int, 0x0DB1);
pub const GL_MAP2_NORMAL = @as(c_int, 0x0DB2);
pub const GL_MAP2_TEXTURE_COORD_1 = @as(c_int, 0x0DB3);
pub const GL_MAP2_TEXTURE_COORD_2 = @as(c_int, 0x0DB4);
pub const GL_MAP2_TEXTURE_COORD_3 = @as(c_int, 0x0DB5);
pub const GL_MAP2_TEXTURE_COORD_4 = @as(c_int, 0x0DB6);
pub const GL_MAP2_VERTEX_3 = @as(c_int, 0x0DB7);
pub const GL_MAP2_VERTEX_4 = @as(c_int, 0x0DB8);
pub const GL_MAP1_GRID_DOMAIN = @as(c_int, 0x0DD0);
pub const GL_MAP1_GRID_SEGMENTS = @as(c_int, 0x0DD1);
pub const GL_MAP2_GRID_DOMAIN = @as(c_int, 0x0DD2);
pub const GL_MAP2_GRID_SEGMENTS = @as(c_int, 0x0DD3);
pub const GL_TEXTURE_1D = @as(c_int, 0x0DE0);
pub const GL_TEXTURE_2D = @as(c_int, 0x0DE1);
pub const GL_FEEDBACK_BUFFER_POINTER = @as(c_int, 0x0DF0);
pub const GL_FEEDBACK_BUFFER_SIZE = @as(c_int, 0x0DF1);
pub const GL_FEEDBACK_BUFFER_TYPE = @as(c_int, 0x0DF2);
pub const GL_SELECTION_BUFFER_POINTER = @as(c_int, 0x0DF3);
pub const GL_SELECTION_BUFFER_SIZE = @as(c_int, 0x0DF4);
pub const GL_TEXTURE_WIDTH = @as(c_int, 0x1000);
pub const GL_TEXTURE_HEIGHT = @as(c_int, 0x1001);
pub const GL_TEXTURE_INTERNAL_FORMAT = @as(c_int, 0x1003);
pub const GL_TEXTURE_BORDER_COLOR = @as(c_int, 0x1004);
pub const GL_TEXTURE_BORDER = @as(c_int, 0x1005);
pub const GL_DONT_CARE = @as(c_int, 0x1100);
pub const GL_FASTEST = @as(c_int, 0x1101);
pub const GL_NICEST = @as(c_int, 0x1102);
pub const GL_LIGHT0 = @as(c_int, 0x4000);
pub const GL_LIGHT1 = @as(c_int, 0x4001);
pub const GL_LIGHT2 = @as(c_int, 0x4002);
pub const GL_LIGHT3 = @as(c_int, 0x4003);
pub const GL_LIGHT4 = @as(c_int, 0x4004);
pub const GL_LIGHT5 = @as(c_int, 0x4005);
pub const GL_LIGHT6 = @as(c_int, 0x4006);
pub const GL_LIGHT7 = @as(c_int, 0x4007);
pub const GL_AMBIENT = @as(c_int, 0x1200);
pub const GL_DIFFUSE = @as(c_int, 0x1201);
pub const GL_SPECULAR = @as(c_int, 0x1202);
pub const GL_POSITION = @as(c_int, 0x1203);
pub const GL_SPOT_DIRECTION = @as(c_int, 0x1204);
pub const GL_SPOT_EXPONENT = @as(c_int, 0x1205);
pub const GL_SPOT_CUTOFF = @as(c_int, 0x1206);
pub const GL_CONSTANT_ATTENUATION = @as(c_int, 0x1207);
pub const GL_LINEAR_ATTENUATION = @as(c_int, 0x1208);
pub const GL_QUADRATIC_ATTENUATION = @as(c_int, 0x1209);
pub const GL_COMPILE = @as(c_int, 0x1300);
pub const GL_COMPILE_AND_EXECUTE = @as(c_int, 0x1301);
pub const GL_CLEAR = @as(c_int, 0x1500);
pub const GL_AND = @as(c_int, 0x1501);
pub const GL_AND_REVERSE = @as(c_int, 0x1502);
pub const GL_COPY = @as(c_int, 0x1503);
pub const GL_AND_INVERTED = @as(c_int, 0x1504);
pub const GL_NOOP = @as(c_int, 0x1505);
pub const GL_XOR = @as(c_int, 0x1506);
pub const GL_OR = @as(c_int, 0x1507);
pub const GL_NOR = @as(c_int, 0x1508);
pub const GL_EQUIV = @as(c_int, 0x1509);
pub const GL_INVERT = @as(c_int, 0x150A);
pub const GL_OR_REVERSE = @as(c_int, 0x150B);
pub const GL_COPY_INVERTED = @as(c_int, 0x150C);
pub const GL_OR_INVERTED = @as(c_int, 0x150D);
pub const GL_NAND = @as(c_int, 0x150E);
pub const GL_SET = @as(c_int, 0x150F);
pub const GL_EMISSION = @as(c_int, 0x1600);
pub const GL_SHININESS = @as(c_int, 0x1601);
pub const GL_AMBIENT_AND_DIFFUSE = @as(c_int, 0x1602);
pub const GL_COLOR_INDEXES = @as(c_int, 0x1603);
pub const GL_MODELVIEW = @as(c_int, 0x1700);
pub const GL_PROJECTION = @as(c_int, 0x1701);
pub const GL_TEXTURE = @as(c_int, 0x1702);
pub const GL_COLOR = @as(c_int, 0x1800);
pub const GL_DEPTH = @as(c_int, 0x1801);
pub const GL_STENCIL = @as(c_int, 0x1802);
pub const GL_COLOR_INDEX = @as(c_int, 0x1900);
pub const GL_STENCIL_INDEX = @as(c_int, 0x1901);
pub const GL_DEPTH_COMPONENT = @as(c_int, 0x1902);
pub const GL_RED = @as(c_int, 0x1903);
pub const GL_GREEN = @as(c_int, 0x1904);
pub const GL_BLUE = @as(c_int, 0x1905);
pub const GL_ALPHA = @as(c_int, 0x1906);
pub const GL_RGB = @as(c_int, 0x1907);
pub const GL_RGBA = @as(c_int, 0x1908);
pub const GL_LUMINANCE = @as(c_int, 0x1909);
pub const GL_LUMINANCE_ALPHA = @as(c_int, 0x190A);
pub const GL_BITMAP = @as(c_int, 0x1A00);
pub const GL_POINT = @as(c_int, 0x1B00);
pub const GL_LINE = @as(c_int, 0x1B01);
pub const GL_FILL = @as(c_int, 0x1B02);
pub const GL_RENDER = @as(c_int, 0x1C00);
pub const GL_FEEDBACK = @as(c_int, 0x1C01);
pub const GL_SELECT = @as(c_int, 0x1C02);
pub const GL_FLAT = @as(c_int, 0x1D00);
pub const GL_SMOOTH = @as(c_int, 0x1D01);
pub const GL_KEEP = @as(c_int, 0x1E00);
pub const GL_REPLACE = @as(c_int, 0x1E01);
pub const GL_INCR = @as(c_int, 0x1E02);
pub const GL_DECR = @as(c_int, 0x1E03);
pub const GL_VENDOR = @as(c_int, 0x1F00);
pub const GL_RENDERER = @as(c_int, 0x1F01);
pub const GL_VERSION = @as(c_int, 0x1F02);
pub const GL_EXTENSIONS = @as(c_int, 0x1F03);
pub const GL_S = @as(c_int, 0x2000);
pub const GL_T = @as(c_int, 0x2001);
pub const GL_R = @as(c_int, 0x2002);
pub const GL_Q = @as(c_int, 0x2003);
pub const GL_MODULATE = @as(c_int, 0x2100);
pub const GL_DECAL = @as(c_int, 0x2101);
pub const GL_TEXTURE_ENV_MODE = @as(c_int, 0x2200);
pub const GL_TEXTURE_ENV_COLOR = @as(c_int, 0x2201);
pub const GL_TEXTURE_ENV = @as(c_int, 0x2300);
pub const GL_EYE_LINEAR = @as(c_int, 0x2400);
pub const GL_OBJECT_LINEAR = @as(c_int, 0x2401);
pub const GL_SPHERE_MAP = @as(c_int, 0x2402);
pub const GL_TEXTURE_GEN_MODE = @as(c_int, 0x2500);
pub const GL_OBJECT_PLANE = @as(c_int, 0x2501);
pub const GL_EYE_PLANE = @as(c_int, 0x2502);
pub const GL_NEAREST = @as(c_int, 0x2600);
pub const GL_LINEAR = @as(c_int, 0x2601);
pub const GL_NEAREST_MIPMAP_NEAREST = @as(c_int, 0x2700);
pub const GL_LINEAR_MIPMAP_NEAREST = @as(c_int, 0x2701);
pub const GL_NEAREST_MIPMAP_LINEAR = @as(c_int, 0x2702);
pub const GL_LINEAR_MIPMAP_LINEAR = @as(c_int, 0x2703);
pub const GL_TEXTURE_MAG_FILTER = @as(c_int, 0x2800);
pub const GL_TEXTURE_MIN_FILTER = @as(c_int, 0x2801);
pub const GL_TEXTURE_WRAP_S = @as(c_int, 0x2802);
pub const GL_TEXTURE_WRAP_T = @as(c_int, 0x2803);
pub const GL_CLAMP = @as(c_int, 0x2900);
pub const GL_REPEAT = @as(c_int, 0x2901);
pub const GL_CLIENT_PIXEL_STORE_BIT = @as(c_int, 0x00000001);
pub const GL_CLIENT_VERTEX_ARRAY_BIT = @as(c_int, 0x00000002);
pub const GL_CLIENT_ALL_ATTRIB_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal);
pub const GL_POLYGON_OFFSET_FACTOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8038, .hexadecimal);
pub const GL_POLYGON_OFFSET_UNITS = @as(c_int, 0x2A00);
pub const GL_POLYGON_OFFSET_POINT = @as(c_int, 0x2A01);
pub const GL_POLYGON_OFFSET_LINE = @as(c_int, 0x2A02);
pub const GL_POLYGON_OFFSET_FILL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8037, .hexadecimal);
pub const GL_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803B, .hexadecimal);
pub const GL_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803C, .hexadecimal);
pub const GL_ALPHA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803D, .hexadecimal);
pub const GL_ALPHA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803E, .hexadecimal);
pub const GL_LUMINANCE4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803F, .hexadecimal);
pub const GL_LUMINANCE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8040, .hexadecimal);
pub const GL_LUMINANCE12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8041, .hexadecimal);
pub const GL_LUMINANCE16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8042, .hexadecimal);
pub const GL_LUMINANCE4_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8043, .hexadecimal);
pub const GL_LUMINANCE6_ALPHA2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8044, .hexadecimal);
pub const GL_LUMINANCE8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8045, .hexadecimal);
pub const GL_LUMINANCE12_ALPHA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8046, .hexadecimal);
pub const GL_LUMINANCE12_ALPHA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8047, .hexadecimal);
pub const GL_LUMINANCE16_ALPHA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8048, .hexadecimal);
pub const GL_INTENSITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8049, .hexadecimal);
pub const GL_INTENSITY4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804A, .hexadecimal);
pub const GL_INTENSITY8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804B, .hexadecimal);
pub const GL_INTENSITY12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804C, .hexadecimal);
pub const GL_INTENSITY16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804D, .hexadecimal);
pub const GL_R3_G3_B2 = @as(c_int, 0x2A10);
pub const GL_RGB4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x804F, .hexadecimal);
pub const GL_RGB5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8050, .hexadecimal);
pub const GL_RGB8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8051, .hexadecimal);
pub const GL_RGB10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8052, .hexadecimal);
pub const GL_RGB12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8053, .hexadecimal);
pub const GL_RGB16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8054, .hexadecimal);
pub const GL_RGBA2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8055, .hexadecimal);
pub const GL_RGBA4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8056, .hexadecimal);
pub const GL_RGB5_A1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8057, .hexadecimal);
pub const GL_RGBA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8058, .hexadecimal);
pub const GL_RGB10_A2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8059, .hexadecimal);
pub const GL_RGBA12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805A, .hexadecimal);
pub const GL_RGBA16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805B, .hexadecimal);
pub const GL_TEXTURE_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805C, .hexadecimal);
pub const GL_TEXTURE_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805D, .hexadecimal);
pub const GL_TEXTURE_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805E, .hexadecimal);
pub const GL_TEXTURE_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x805F, .hexadecimal);
pub const GL_TEXTURE_LUMINANCE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8060, .hexadecimal);
pub const GL_TEXTURE_INTENSITY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8061, .hexadecimal);
pub const GL_PROXY_TEXTURE_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8063, .hexadecimal);
pub const GL_PROXY_TEXTURE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8064, .hexadecimal);
pub const GL_TEXTURE_PRIORITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8066, .hexadecimal);
pub const GL_TEXTURE_RESIDENT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8067, .hexadecimal);
pub const GL_TEXTURE_BINDING_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8068, .hexadecimal);
pub const GL_TEXTURE_BINDING_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8069, .hexadecimal);
pub const GL_TEXTURE_BINDING_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806A, .hexadecimal);
pub const GL_VERTEX_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8074, .hexadecimal);
pub const GL_NORMAL_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8075, .hexadecimal);
pub const GL_COLOR_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8076, .hexadecimal);
pub const GL_INDEX_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8077, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8078, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8079, .hexadecimal);
pub const GL_VERTEX_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807A, .hexadecimal);
pub const GL_VERTEX_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807B, .hexadecimal);
pub const GL_VERTEX_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807C, .hexadecimal);
pub const GL_NORMAL_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807E, .hexadecimal);
pub const GL_NORMAL_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x807F, .hexadecimal);
pub const GL_COLOR_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8081, .hexadecimal);
pub const GL_COLOR_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8082, .hexadecimal);
pub const GL_COLOR_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8083, .hexadecimal);
pub const GL_INDEX_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8085, .hexadecimal);
pub const GL_INDEX_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8086, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8088, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8089, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808A, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808C, .hexadecimal);
pub const GL_VERTEX_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808E, .hexadecimal);
pub const GL_NORMAL_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x808F, .hexadecimal);
pub const GL_COLOR_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8090, .hexadecimal);
pub const GL_INDEX_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8091, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8092, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8093, .hexadecimal);
pub const GL_V2F = @as(c_int, 0x2A20);
pub const GL_V3F = @as(c_int, 0x2A21);
pub const GL_C4UB_V2F = @as(c_int, 0x2A22);
pub const GL_C4UB_V3F = @as(c_int, 0x2A23);
pub const GL_C3F_V3F = @as(c_int, 0x2A24);
pub const GL_N3F_V3F = @as(c_int, 0x2A25);
pub const GL_C4F_N3F_V3F = @as(c_int, 0x2A26);
pub const GL_T2F_V3F = @as(c_int, 0x2A27);
pub const GL_T4F_V4F = @as(c_int, 0x2A28);
pub const GL_T2F_C4UB_V3F = @as(c_int, 0x2A29);
pub const GL_T2F_C3F_V3F = @as(c_int, 0x2A2A);
pub const GL_T2F_N3F_V3F = @as(c_int, 0x2A2B);
pub const GL_T2F_C4F_N3F_V3F = @as(c_int, 0x2A2C);
pub const GL_T4F_C4F_N3F_V4F = @as(c_int, 0x2A2D);
pub const GL_BGR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E0, .hexadecimal);
pub const GL_BGRA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E1, .hexadecimal);
pub const GL_CONSTANT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8001, .hexadecimal);
pub const GL_ONE_MINUS_CONSTANT_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8002, .hexadecimal);
pub const GL_CONSTANT_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8003, .hexadecimal);
pub const GL_ONE_MINUS_CONSTANT_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8004, .hexadecimal);
pub const GL_BLEND_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8005, .hexadecimal);
pub const GL_FUNC_ADD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8006, .hexadecimal);
pub const GL_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8007, .hexadecimal);
pub const GL_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8008, .hexadecimal);
pub const GL_BLEND_EQUATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const GL_BLEND_EQUATION_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8009, .hexadecimal);
pub const GL_BLEND_EQUATION_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x883D, .hexadecimal);
pub const GL_FUNC_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800A, .hexadecimal);
pub const GL_FUNC_REVERSE_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800B, .hexadecimal);
pub const GL_COLOR_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B1, .hexadecimal);
pub const GL_COLOR_MATRIX_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B2, .hexadecimal);
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B3, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_RED_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B4, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B5, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B6, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B7, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_RED_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B8, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80B9, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BA, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80BB, .hexadecimal);
pub const GL_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D0, .hexadecimal);
pub const GL_POST_CONVOLUTION_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D1, .hexadecimal);
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D2, .hexadecimal);
pub const GL_PROXY_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D3, .hexadecimal);
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D4, .hexadecimal);
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D5, .hexadecimal);
pub const GL_COLOR_TABLE_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D6, .hexadecimal);
pub const GL_COLOR_TABLE_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D7, .hexadecimal);
pub const GL_COLOR_TABLE_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D8, .hexadecimal);
pub const GL_COLOR_TABLE_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80D9, .hexadecimal);
pub const GL_COLOR_TABLE_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DA, .hexadecimal);
pub const GL_COLOR_TABLE_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DB, .hexadecimal);
pub const GL_COLOR_TABLE_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DC, .hexadecimal);
pub const GL_COLOR_TABLE_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DD, .hexadecimal);
pub const GL_COLOR_TABLE_LUMINANCE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DE, .hexadecimal);
pub const GL_COLOR_TABLE_INTENSITY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80DF, .hexadecimal);
pub const GL_CONVOLUTION_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8010, .hexadecimal);
pub const GL_CONVOLUTION_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8011, .hexadecimal);
pub const GL_SEPARABLE_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8012, .hexadecimal);
pub const GL_CONVOLUTION_BORDER_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8013, .hexadecimal);
pub const GL_CONVOLUTION_FILTER_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8014, .hexadecimal);
pub const GL_CONVOLUTION_FILTER_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8015, .hexadecimal);
pub const GL_REDUCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8016, .hexadecimal);
pub const GL_CONVOLUTION_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8017, .hexadecimal);
pub const GL_CONVOLUTION_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8018, .hexadecimal);
pub const GL_CONVOLUTION_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8019, .hexadecimal);
pub const GL_MAX_CONVOLUTION_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801A, .hexadecimal);
pub const GL_MAX_CONVOLUTION_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801B, .hexadecimal);
pub const GL_POST_CONVOLUTION_RED_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801C, .hexadecimal);
pub const GL_POST_CONVOLUTION_GREEN_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801D, .hexadecimal);
pub const GL_POST_CONVOLUTION_BLUE_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801E, .hexadecimal);
pub const GL_POST_CONVOLUTION_ALPHA_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x801F, .hexadecimal);
pub const GL_POST_CONVOLUTION_RED_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8020, .hexadecimal);
pub const GL_POST_CONVOLUTION_GREEN_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8021, .hexadecimal);
pub const GL_POST_CONVOLUTION_BLUE_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8022, .hexadecimal);
pub const GL_POST_CONVOLUTION_ALPHA_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8023, .hexadecimal);
pub const GL_CONSTANT_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8151, .hexadecimal);
pub const GL_REPLICATE_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8153, .hexadecimal);
pub const GL_CONVOLUTION_BORDER_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8154, .hexadecimal);
pub const GL_MAX_ELEMENTS_VERTICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E8, .hexadecimal);
pub const GL_MAX_ELEMENTS_INDICES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80E9, .hexadecimal);
pub const GL_HISTOGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8024, .hexadecimal);
pub const GL_PROXY_HISTOGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8025, .hexadecimal);
pub const GL_HISTOGRAM_WIDTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8026, .hexadecimal);
pub const GL_HISTOGRAM_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8027, .hexadecimal);
pub const GL_HISTOGRAM_RED_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8028, .hexadecimal);
pub const GL_HISTOGRAM_GREEN_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8029, .hexadecimal);
pub const GL_HISTOGRAM_BLUE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802A, .hexadecimal);
pub const GL_HISTOGRAM_ALPHA_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802B, .hexadecimal);
pub const GL_HISTOGRAM_LUMINANCE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802C, .hexadecimal);
pub const GL_HISTOGRAM_SINK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802D, .hexadecimal);
pub const GL_MINMAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802E, .hexadecimal);
pub const GL_MINMAX_FORMAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x802F, .hexadecimal);
pub const GL_MINMAX_SINK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8030, .hexadecimal);
pub const GL_TABLE_TOO_LARGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8031, .hexadecimal);
pub const GL_UNSIGNED_BYTE_3_3_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8032, .hexadecimal);
pub const GL_UNSIGNED_SHORT_4_4_4_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8033, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_5_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8034, .hexadecimal);
pub const GL_UNSIGNED_INT_8_8_8_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8035, .hexadecimal);
pub const GL_UNSIGNED_INT_10_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8036, .hexadecimal);
pub const GL_UNSIGNED_BYTE_2_3_3_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8362, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_6_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8363, .hexadecimal);
pub const GL_UNSIGNED_SHORT_5_6_5_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8364, .hexadecimal);
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8365, .hexadecimal);
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8366, .hexadecimal);
pub const GL_UNSIGNED_INT_8_8_8_8_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8367, .hexadecimal);
pub const GL_UNSIGNED_INT_2_10_10_10_REV = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8368, .hexadecimal);
pub const GL_RESCALE_NORMAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x803A, .hexadecimal);
pub const GL_LIGHT_MODEL_COLOR_CONTROL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F8, .hexadecimal);
pub const GL_SINGLE_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81F9, .hexadecimal);
pub const GL_SEPARATE_SPECULAR_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81FA, .hexadecimal);
pub const GL_PACK_SKIP_IMAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806B, .hexadecimal);
pub const GL_PACK_IMAGE_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806C, .hexadecimal);
pub const GL_UNPACK_SKIP_IMAGES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806D, .hexadecimal);
pub const GL_UNPACK_IMAGE_HEIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806E, .hexadecimal);
pub const GL_TEXTURE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x806F, .hexadecimal);
pub const GL_PROXY_TEXTURE_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8070, .hexadecimal);
pub const GL_TEXTURE_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8071, .hexadecimal);
pub const GL_TEXTURE_WRAP_R = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8072, .hexadecimal);
pub const GL_MAX_3D_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8073, .hexadecimal);
pub const GL_CLAMP_TO_EDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812F, .hexadecimal);
pub const GL_CLAMP_TO_BORDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x812D, .hexadecimal);
pub const GL_TEXTURE_MIN_LOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813A, .hexadecimal);
pub const GL_TEXTURE_MAX_LOD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813B, .hexadecimal);
pub const GL_TEXTURE_BASE_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813C, .hexadecimal);
pub const GL_TEXTURE_MAX_LEVEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x813D, .hexadecimal);
pub const GL_SMOOTH_POINT_SIZE_RANGE = @as(c_int, 0x0B12);
pub const GL_SMOOTH_POINT_SIZE_GRANULARITY = @as(c_int, 0x0B13);
pub const GL_SMOOTH_LINE_WIDTH_RANGE = @as(c_int, 0x0B22);
pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY = @as(c_int, 0x0B23);
pub const GL_ALIASED_POINT_SIZE_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846D, .hexadecimal);
pub const GL_ALIASED_LINE_WIDTH_RANGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x846E, .hexadecimal);
pub const GL_TEXTURE0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C0, .hexadecimal);
pub const GL_TEXTURE1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C1, .hexadecimal);
pub const GL_TEXTURE2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C2, .hexadecimal);
pub const GL_TEXTURE3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C3, .hexadecimal);
pub const GL_TEXTURE4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C4, .hexadecimal);
pub const GL_TEXTURE5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C5, .hexadecimal);
pub const GL_TEXTURE6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C6, .hexadecimal);
pub const GL_TEXTURE7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C7, .hexadecimal);
pub const GL_TEXTURE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C8, .hexadecimal);
pub const GL_TEXTURE9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84C9, .hexadecimal);
pub const GL_TEXTURE10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CA, .hexadecimal);
pub const GL_TEXTURE11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CB, .hexadecimal);
pub const GL_TEXTURE12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CC, .hexadecimal);
pub const GL_TEXTURE13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CD, .hexadecimal);
pub const GL_TEXTURE14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CE, .hexadecimal);
pub const GL_TEXTURE15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84CF, .hexadecimal);
pub const GL_TEXTURE16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D0, .hexadecimal);
pub const GL_TEXTURE17 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D1, .hexadecimal);
pub const GL_TEXTURE18 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D2, .hexadecimal);
pub const GL_TEXTURE19 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D3, .hexadecimal);
pub const GL_TEXTURE20 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D4, .hexadecimal);
pub const GL_TEXTURE21 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D5, .hexadecimal);
pub const GL_TEXTURE22 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D6, .hexadecimal);
pub const GL_TEXTURE23 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D7, .hexadecimal);
pub const GL_TEXTURE24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D8, .hexadecimal);
pub const GL_TEXTURE25 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84D9, .hexadecimal);
pub const GL_TEXTURE26 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DA, .hexadecimal);
pub const GL_TEXTURE27 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DB, .hexadecimal);
pub const GL_TEXTURE28 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DC, .hexadecimal);
pub const GL_TEXTURE29 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DD, .hexadecimal);
pub const GL_TEXTURE30 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DE, .hexadecimal);
pub const GL_TEXTURE31 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84DF, .hexadecimal);
pub const GL_ACTIVE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E0, .hexadecimal);
pub const GL_CLIENT_ACTIVE_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E1, .hexadecimal);
pub const GL_MAX_TEXTURE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E2, .hexadecimal);
pub const GL_COMBINE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8570, .hexadecimal);
pub const GL_COMBINE_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8571, .hexadecimal);
pub const GL_COMBINE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8572, .hexadecimal);
pub const GL_RGB_SCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8573, .hexadecimal);
pub const GL_ADD_SIGNED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8574, .hexadecimal);
pub const GL_INTERPOLATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8575, .hexadecimal);
pub const GL_CONSTANT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8576, .hexadecimal);
pub const GL_PRIMARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8577, .hexadecimal);
pub const GL_PREVIOUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8578, .hexadecimal);
pub const GL_SUBTRACT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E7, .hexadecimal);
pub const GL_SRC0_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hexadecimal);
pub const GL_SRC1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hexadecimal);
pub const GL_SRC2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hexadecimal);
pub const GL_SRC0_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hexadecimal);
pub const GL_SRC1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const GL_SRC2_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hexadecimal);
pub const GL_SOURCE0_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8580, .hexadecimal);
pub const GL_SOURCE1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8581, .hexadecimal);
pub const GL_SOURCE2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8582, .hexadecimal);
pub const GL_SOURCE0_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8588, .hexadecimal);
pub const GL_SOURCE1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8589, .hexadecimal);
pub const GL_SOURCE2_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x858A, .hexadecimal);
pub const GL_OPERAND0_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8590, .hexadecimal);
pub const GL_OPERAND1_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8591, .hexadecimal);
pub const GL_OPERAND2_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8592, .hexadecimal);
pub const GL_OPERAND0_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8598, .hexadecimal);
pub const GL_OPERAND1_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8599, .hexadecimal);
pub const GL_OPERAND2_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x859A, .hexadecimal);
pub const GL_DOT3_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AE, .hexadecimal);
pub const GL_DOT3_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86AF, .hexadecimal);
pub const GL_TRANSPOSE_MODELVIEW_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E3, .hexadecimal);
pub const GL_TRANSPOSE_PROJECTION_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E4, .hexadecimal);
pub const GL_TRANSPOSE_TEXTURE_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E5, .hexadecimal);
pub const GL_TRANSPOSE_COLOR_MATRIX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E6, .hexadecimal);
pub const GL_NORMAL_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8511, .hexadecimal);
pub const GL_REFLECTION_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8512, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8513, .hexadecimal);
pub const GL_TEXTURE_BINDING_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8514, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8515, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8516, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8517, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8518, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8519, .hexadecimal);
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851A, .hexadecimal);
pub const GL_PROXY_TEXTURE_CUBE_MAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851B, .hexadecimal);
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x851C, .hexadecimal);
pub const GL_COMPRESSED_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84E9, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EA, .hexadecimal);
pub const GL_COMPRESSED_LUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EB, .hexadecimal);
pub const GL_COMPRESSED_INTENSITY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EC, .hexadecimal);
pub const GL_COMPRESSED_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84ED, .hexadecimal);
pub const GL_COMPRESSED_RGBA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EE, .hexadecimal);
pub const GL_TEXTURE_COMPRESSION_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84EF, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A0, .hexadecimal);
pub const GL_TEXTURE_COMPRESSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A1, .hexadecimal);
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A2, .hexadecimal);
pub const GL_COMPRESSED_TEXTURE_FORMATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x86A3, .hexadecimal);
pub const GL_MULTISAMPLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809D, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_COVERAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809E, .hexadecimal);
pub const GL_SAMPLE_ALPHA_TO_ONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x809F, .hexadecimal);
pub const GL_SAMPLE_COVERAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A0, .hexadecimal);
pub const GL_SAMPLE_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A8, .hexadecimal);
pub const GL_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80A9, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AA, .hexadecimal);
pub const GL_SAMPLE_COVERAGE_INVERT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80AB, .hexadecimal);
pub const GL_MULTISAMPLE_BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const GL_DEPTH_COMPONENT16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A5, .hexadecimal);
pub const GL_DEPTH_COMPONENT24 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A6, .hexadecimal);
pub const GL_DEPTH_COMPONENT32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x81A7, .hexadecimal);
pub const GL_TEXTURE_DEPTH_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884A, .hexadecimal);
pub const GL_DEPTH_TEXTURE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884B, .hexadecimal);
pub const GL_TEXTURE_COMPARE_MODE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884C, .hexadecimal);
pub const GL_TEXTURE_COMPARE_FUNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884D, .hexadecimal);
pub const GL_COMPARE_R_TO_TEXTURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x884E, .hexadecimal);
pub const GL_QUERY_COUNTER_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8864, .hexadecimal);
pub const GL_CURRENT_QUERY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8865, .hexadecimal);
pub const GL_QUERY_RESULT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8866, .hexadecimal);
pub const GL_QUERY_RESULT_AVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8867, .hexadecimal);
pub const GL_SAMPLES_PASSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8914, .hexadecimal);
pub const GL_FOG_COORD_SRC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8450, .hexadecimal);
pub const GL_FOG_COORD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8451, .hexadecimal);
pub const GL_FRAGMENT_DEPTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8452, .hexadecimal);
pub const GL_CURRENT_FOG_COORD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8453, .hexadecimal);
pub const GL_FOG_COORD_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8454, .hexadecimal);
pub const GL_FOG_COORD_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8455, .hexadecimal);
pub const GL_FOG_COORD_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8456, .hexadecimal);
pub const GL_FOG_COORD_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8457, .hexadecimal);
pub const GL_FOG_COORDINATE_SOURCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8450, .hexadecimal);
pub const GL_FOG_COORDINATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8451, .hexadecimal);
pub const GL_CURRENT_FOG_COORDINATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8453, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8454, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8455, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8456, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8457, .hexadecimal);
pub const GL_COLOR_SUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8458, .hexadecimal);
pub const GL_CURRENT_SECONDARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8459, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845A, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845B, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845C, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845D, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845E, .hexadecimal);
pub const GL_POINT_SIZE_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8126, .hexadecimal);
pub const GL_POINT_SIZE_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8127, .hexadecimal);
pub const GL_POINT_FADE_THRESHOLD_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8128, .hexadecimal);
pub const GL_POINT_DISTANCE_ATTENUATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8129, .hexadecimal);
pub const GL_BLEND_DST_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C8, .hexadecimal);
pub const GL_BLEND_SRC_RGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80C9, .hexadecimal);
pub const GL_BLEND_DST_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CA, .hexadecimal);
pub const GL_BLEND_SRC_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80CB, .hexadecimal);
pub const GL_GENERATE_MIPMAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8191, .hexadecimal);
pub const GL_GENERATE_MIPMAP_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8192, .hexadecimal);
pub const GL_INCR_WRAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8507, .hexadecimal);
pub const GL_DECR_WRAP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8508, .hexadecimal);
pub const GL_MIRRORED_REPEAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8370, .hexadecimal);
pub const GL_MAX_TEXTURE_LOD_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x84FD, .hexadecimal);
pub const GL_TEXTURE_FILTER_CONTROL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8500, .hexadecimal);
pub const GL_TEXTURE_LOD_BIAS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8501, .hexadecimal);
pub const GL_ARRAY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8892, .hexadecimal);
pub const GL_ELEMENT_ARRAY_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8893, .hexadecimal);
pub const GL_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8894, .hexadecimal);
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8895, .hexadecimal);
pub const GL_VERTEX_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8896, .hexadecimal);
pub const GL_NORMAL_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8897, .hexadecimal);
pub const GL_COLOR_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8898, .hexadecimal);
pub const GL_INDEX_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8899, .hexadecimal);
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889A, .hexadecimal);
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889B, .hexadecimal);
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889C, .hexadecimal);
pub const GL_FOG_COORD_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889D, .hexadecimal);
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889E, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889F, .hexadecimal);
pub const GL_STREAM_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E0, .hexadecimal);
pub const GL_STREAM_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E1, .hexadecimal);
pub const GL_STREAM_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E2, .hexadecimal);
pub const GL_STATIC_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E4, .hexadecimal);
pub const GL_STATIC_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E5, .hexadecimal);
pub const GL_STATIC_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E6, .hexadecimal);
pub const GL_DYNAMIC_DRAW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E8, .hexadecimal);
pub const GL_DYNAMIC_READ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88E9, .hexadecimal);
pub const GL_DYNAMIC_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EA, .hexadecimal);
pub const GL_READ_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B8, .hexadecimal);
pub const GL_WRITE_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88B9, .hexadecimal);
pub const GL_READ_WRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BA, .hexadecimal);
pub const GL_BUFFER_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8764, .hexadecimal);
pub const GL_BUFFER_USAGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8765, .hexadecimal);
pub const GL_BUFFER_ACCESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BB, .hexadecimal);
pub const GL_BUFFER_MAPPED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BC, .hexadecimal);
pub const GL_BUFFER_MAP_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88BD, .hexadecimal);
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x889D, .hexadecimal);
pub const GL_CURRENT_PROGRAM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8D, .hexadecimal);
pub const GL_SHADER_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4F, .hexadecimal);
pub const GL_DELETE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B80, .hexadecimal);
pub const GL_COMPILE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B81, .hexadecimal);
pub const GL_LINK_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B82, .hexadecimal);
pub const GL_VALIDATE_STATUS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B83, .hexadecimal);
pub const GL_INFO_LOG_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B84, .hexadecimal);
pub const GL_ATTACHED_SHADERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B85, .hexadecimal);
pub const GL_ACTIVE_UNIFORMS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B86, .hexadecimal);
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B87, .hexadecimal);
pub const GL_SHADER_SOURCE_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B88, .hexadecimal);
pub const GL_FLOAT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B50, .hexadecimal);
pub const GL_FLOAT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B51, .hexadecimal);
pub const GL_FLOAT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B52, .hexadecimal);
pub const GL_INT_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B53, .hexadecimal);
pub const GL_INT_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B54, .hexadecimal);
pub const GL_INT_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B55, .hexadecimal);
pub const GL_BOOL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B56, .hexadecimal);
pub const GL_BOOL_VEC2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B57, .hexadecimal);
pub const GL_BOOL_VEC3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B58, .hexadecimal);
pub const GL_BOOL_VEC4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B59, .hexadecimal);
pub const GL_FLOAT_MAT2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5A, .hexadecimal);
pub const GL_FLOAT_MAT3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5B, .hexadecimal);
pub const GL_FLOAT_MAT4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5C, .hexadecimal);
pub const GL_SAMPLER_1D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5D, .hexadecimal);
pub const GL_SAMPLER_2D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5E, .hexadecimal);
pub const GL_SAMPLER_3D = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B5F, .hexadecimal);
pub const GL_SAMPLER_CUBE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B60, .hexadecimal);
pub const GL_SAMPLER_1D_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B61, .hexadecimal);
pub const GL_SAMPLER_2D_SHADOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B62, .hexadecimal);
pub const GL_SHADING_LANGUAGE_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8C, .hexadecimal);
pub const GL_VERTEX_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B31, .hexadecimal);
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4A, .hexadecimal);
pub const GL_MAX_VARYING_FLOATS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4B, .hexadecimal);
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4C, .hexadecimal);
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B4D, .hexadecimal);
pub const GL_ACTIVE_ATTRIBUTES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B89, .hexadecimal);
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8A, .hexadecimal);
pub const GL_FRAGMENT_SHADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B30, .hexadecimal);
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B49, .hexadecimal);
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B8B, .hexadecimal);
pub const GL_MAX_VERTEX_ATTRIBS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8869, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8622, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8623, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8624, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8625, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x886A, .hexadecimal);
pub const GL_CURRENT_VERTEX_ATTRIB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8626, .hexadecimal);
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8645, .hexadecimal);
pub const GL_VERTEX_PROGRAM_POINT_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8642, .hexadecimal);
pub const GL_VERTEX_PROGRAM_TWO_SIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8643, .hexadecimal);
pub const GL_MAX_TEXTURE_COORDS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8871, .hexadecimal);
pub const GL_MAX_TEXTURE_IMAGE_UNITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8872, .hexadecimal);
pub const GL_MAX_DRAW_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8824, .hexadecimal);
pub const GL_DRAW_BUFFER0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8825, .hexadecimal);
pub const GL_DRAW_BUFFER1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8826, .hexadecimal);
pub const GL_DRAW_BUFFER2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8827, .hexadecimal);
pub const GL_DRAW_BUFFER3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8828, .hexadecimal);
pub const GL_DRAW_BUFFER4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8829, .hexadecimal);
pub const GL_DRAW_BUFFER5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882A, .hexadecimal);
pub const GL_DRAW_BUFFER6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882B, .hexadecimal);
pub const GL_DRAW_BUFFER7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882C, .hexadecimal);
pub const GL_DRAW_BUFFER8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882D, .hexadecimal);
pub const GL_DRAW_BUFFER9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882E, .hexadecimal);
pub const GL_DRAW_BUFFER10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x882F, .hexadecimal);
pub const GL_DRAW_BUFFER11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8830, .hexadecimal);
pub const GL_DRAW_BUFFER12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8831, .hexadecimal);
pub const GL_DRAW_BUFFER13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8832, .hexadecimal);
pub const GL_DRAW_BUFFER14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8833, .hexadecimal);
pub const GL_DRAW_BUFFER15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8834, .hexadecimal);
pub const GL_POINT_SPRITE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8861, .hexadecimal);
pub const GL_COORD_REPLACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8862, .hexadecimal);
pub const GL_POINT_SPRITE_COORD_ORIGIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA0, .hexadecimal);
pub const GL_LOWER_LEFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA1, .hexadecimal);
pub const GL_UPPER_LEFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA2, .hexadecimal);
pub const GL_STENCIL_BACK_FUNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8800, .hexadecimal);
pub const GL_STENCIL_BACK_VALUE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA4, .hexadecimal);
pub const GL_STENCIL_BACK_REF = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA3, .hexadecimal);
pub const GL_STENCIL_BACK_FAIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8801, .hexadecimal);
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8802, .hexadecimal);
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8803, .hexadecimal);
pub const GL_STENCIL_BACK_WRITEMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8CA5, .hexadecimal);
pub const GL_CURRENT_RASTER_SECONDARY_COLOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x845F, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EB, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EC, .hexadecimal);
pub const GL_PIXEL_PACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88ED, .hexadecimal);
pub const GL_PIXEL_UNPACK_BUFFER_BINDING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x88EF, .hexadecimal);
pub const GL_FLOAT_MAT2x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B65, .hexadecimal);
pub const GL_FLOAT_MAT2x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B66, .hexadecimal);
pub const GL_FLOAT_MAT3x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B67, .hexadecimal);
pub const GL_FLOAT_MAT3x4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B68, .hexadecimal);
pub const GL_FLOAT_MAT4x2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B69, .hexadecimal);
pub const GL_FLOAT_MAT4x3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8B6A, .hexadecimal);
pub const GL_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C40, .hexadecimal);
pub const GL_SRGB8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C41, .hexadecimal);
pub const GL_SRGB_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C42, .hexadecimal);
pub const GL_SRGB8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C43, .hexadecimal);
pub const GL_SLUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C44, .hexadecimal);
pub const GL_SLUMINANCE8_ALPHA8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C45, .hexadecimal);
pub const GL_SLUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C46, .hexadecimal);
pub const GL_SLUMINANCE8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C47, .hexadecimal);
pub const GL_COMPRESSED_SRGB = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C48, .hexadecimal);
pub const GL_COMPRESSED_SRGB_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C49, .hexadecimal);
pub const GL_COMPRESSED_SLUMINANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4A, .hexadecimal);
pub const GL_COMPRESSED_SLUMINANCE_ALPHA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8C4B, .hexadecimal);
pub const GLFWAPI = "";
pub const GLFW_VERSION_MAJOR = @as(c_int, 3);
pub const GLFW_VERSION_MINOR = @as(c_int, 4);
pub const GLFW_VERSION_REVISION = @as(c_int, 0);
pub const GLFW_TRUE = @as(c_int, 1);
pub const GLFW_FALSE = @as(c_int, 0);
pub const GLFW_RELEASE = @as(c_int, 0);
pub const GLFW_PRESS = @as(c_int, 1);
pub const GLFW_REPEAT = @as(c_int, 2);
pub const GLFW_HAT_CENTERED = @as(c_int, 0);
pub const GLFW_HAT_UP = @as(c_int, 1);
pub const GLFW_HAT_RIGHT = @as(c_int, 2);
pub const GLFW_HAT_DOWN = @as(c_int, 4);
pub const GLFW_HAT_LEFT = @as(c_int, 8);
pub const GLFW_HAT_RIGHT_UP = GLFW_HAT_RIGHT | GLFW_HAT_UP;
pub const GLFW_HAT_RIGHT_DOWN = GLFW_HAT_RIGHT | GLFW_HAT_DOWN;
pub const GLFW_HAT_LEFT_UP = GLFW_HAT_LEFT | GLFW_HAT_UP;
pub const GLFW_HAT_LEFT_DOWN = GLFW_HAT_LEFT | GLFW_HAT_DOWN;
pub const GLFW_KEY_UNKNOWN = -@as(c_int, 1);
pub const GLFW_KEY_SPACE = @as(c_int, 32);
pub const GLFW_KEY_APOSTROPHE = @as(c_int, 39);
pub const GLFW_KEY_COMMA = @as(c_int, 44);
pub const GLFW_KEY_MINUS = @as(c_int, 45);
pub const GLFW_KEY_PERIOD = @as(c_int, 46);
pub const GLFW_KEY_SLASH = @as(c_int, 47);
pub const GLFW_KEY_0 = @as(c_int, 48);
pub const GLFW_KEY_1 = @as(c_int, 49);
pub const GLFW_KEY_2 = @as(c_int, 50);
pub const GLFW_KEY_3 = @as(c_int, 51);
pub const GLFW_KEY_4 = @as(c_int, 52);
pub const GLFW_KEY_5 = @as(c_int, 53);
pub const GLFW_KEY_6 = @as(c_int, 54);
pub const GLFW_KEY_7 = @as(c_int, 55);
pub const GLFW_KEY_8 = @as(c_int, 56);
pub const GLFW_KEY_9 = @as(c_int, 57);
pub const GLFW_KEY_SEMICOLON = @as(c_int, 59);
pub const GLFW_KEY_EQUAL = @as(c_int, 61);
pub const GLFW_KEY_A = @as(c_int, 65);
pub const GLFW_KEY_B = @as(c_int, 66);
pub const GLFW_KEY_C = @as(c_int, 67);
pub const GLFW_KEY_D = @as(c_int, 68);
pub const GLFW_KEY_E = @as(c_int, 69);
pub const GLFW_KEY_F = @as(c_int, 70);
pub const GLFW_KEY_G = @as(c_int, 71);
pub const GLFW_KEY_H = @as(c_int, 72);
pub const GLFW_KEY_I = @as(c_int, 73);
pub const GLFW_KEY_J = @as(c_int, 74);
pub const GLFW_KEY_K = @as(c_int, 75);
pub const GLFW_KEY_L = @as(c_int, 76);
pub const GLFW_KEY_M = @as(c_int, 77);
pub const GLFW_KEY_N = @as(c_int, 78);
pub const GLFW_KEY_O = @as(c_int, 79);
pub const GLFW_KEY_P = @as(c_int, 80);
pub const GLFW_KEY_Q = @as(c_int, 81);
pub const GLFW_KEY_R = @as(c_int, 82);
pub const GLFW_KEY_S = @as(c_int, 83);
pub const GLFW_KEY_T = @as(c_int, 84);
pub const GLFW_KEY_U = @as(c_int, 85);
pub const GLFW_KEY_V = @as(c_int, 86);
pub const GLFW_KEY_W = @as(c_int, 87);
pub const GLFW_KEY_X = @as(c_int, 88);
pub const GLFW_KEY_Y = @as(c_int, 89);
pub const GLFW_KEY_Z = @as(c_int, 90);
pub const GLFW_KEY_LEFT_BRACKET = @as(c_int, 91);
pub const GLFW_KEY_BACKSLASH = @as(c_int, 92);
pub const GLFW_KEY_RIGHT_BRACKET = @as(c_int, 93);
pub const GLFW_KEY_GRAVE_ACCENT = @as(c_int, 96);
pub const GLFW_KEY_WORLD_1 = @as(c_int, 161);
pub const GLFW_KEY_WORLD_2 = @as(c_int, 162);
pub const GLFW_KEY_ESCAPE = @as(c_int, 256);
pub const GLFW_KEY_ENTER = @as(c_int, 257);
pub const GLFW_KEY_TAB = @as(c_int, 258);
pub const GLFW_KEY_BACKSPACE = @as(c_int, 259);
pub const GLFW_KEY_INSERT = @as(c_int, 260);
pub const GLFW_KEY_DELETE = @as(c_int, 261);
pub const GLFW_KEY_RIGHT = @as(c_int, 262);
pub const GLFW_KEY_LEFT = @as(c_int, 263);
pub const GLFW_KEY_DOWN = @as(c_int, 264);
pub const GLFW_KEY_UP = @as(c_int, 265);
pub const GLFW_KEY_PAGE_UP = @as(c_int, 266);
pub const GLFW_KEY_PAGE_DOWN = @as(c_int, 267);
pub const GLFW_KEY_HOME = @as(c_int, 268);
pub const GLFW_KEY_END = @as(c_int, 269);
pub const GLFW_KEY_CAPS_LOCK = @as(c_int, 280);
pub const GLFW_KEY_SCROLL_LOCK = @as(c_int, 281);
pub const GLFW_KEY_NUM_LOCK = @as(c_int, 282);
pub const GLFW_KEY_PRINT_SCREEN = @as(c_int, 283);
pub const GLFW_KEY_PAUSE = @as(c_int, 284);
pub const GLFW_KEY_F1 = @as(c_int, 290);
pub const GLFW_KEY_F2 = @as(c_int, 291);
pub const GLFW_KEY_F3 = @as(c_int, 292);
pub const GLFW_KEY_F4 = @as(c_int, 293);
pub const GLFW_KEY_F5 = @as(c_int, 294);
pub const GLFW_KEY_F6 = @as(c_int, 295);
pub const GLFW_KEY_F7 = @as(c_int, 296);
pub const GLFW_KEY_F8 = @as(c_int, 297);
pub const GLFW_KEY_F9 = @as(c_int, 298);
pub const GLFW_KEY_F10 = @as(c_int, 299);
pub const GLFW_KEY_F11 = @as(c_int, 300);
pub const GLFW_KEY_F12 = @as(c_int, 301);
pub const GLFW_KEY_F13 = @as(c_int, 302);
pub const GLFW_KEY_F14 = @as(c_int, 303);
pub const GLFW_KEY_F15 = @as(c_int, 304);
pub const GLFW_KEY_F16 = @as(c_int, 305);
pub const GLFW_KEY_F17 = @as(c_int, 306);
pub const GLFW_KEY_F18 = @as(c_int, 307);
pub const GLFW_KEY_F19 = @as(c_int, 308);
pub const GLFW_KEY_F20 = @as(c_int, 309);
pub const GLFW_KEY_F21 = @as(c_int, 310);
pub const GLFW_KEY_F22 = @as(c_int, 311);
pub const GLFW_KEY_F23 = @as(c_int, 312);
pub const GLFW_KEY_F24 = @as(c_int, 313);
pub const GLFW_KEY_F25 = @as(c_int, 314);
pub const GLFW_KEY_KP_0 = @as(c_int, 320);
pub const GLFW_KEY_KP_1 = @as(c_int, 321);
pub const GLFW_KEY_KP_2 = @as(c_int, 322);
pub const GLFW_KEY_KP_3 = @as(c_int, 323);
pub const GLFW_KEY_KP_4 = @as(c_int, 324);
pub const GLFW_KEY_KP_5 = @as(c_int, 325);
pub const GLFW_KEY_KP_6 = @as(c_int, 326);
pub const GLFW_KEY_KP_7 = @as(c_int, 327);
pub const GLFW_KEY_KP_8 = @as(c_int, 328);
pub const GLFW_KEY_KP_9 = @as(c_int, 329);
pub const GLFW_KEY_KP_DECIMAL = @as(c_int, 330);
pub const GLFW_KEY_KP_DIVIDE = @as(c_int, 331);
pub const GLFW_KEY_KP_MULTIPLY = @as(c_int, 332);
pub const GLFW_KEY_KP_SUBTRACT = @as(c_int, 333);
pub const GLFW_KEY_KP_ADD = @as(c_int, 334);
pub const GLFW_KEY_KP_ENTER = @as(c_int, 335);
pub const GLFW_KEY_KP_EQUAL = @as(c_int, 336);
pub const GLFW_KEY_LEFT_SHIFT = @as(c_int, 340);
pub const GLFW_KEY_LEFT_CONTROL = @as(c_int, 341);
pub const GLFW_KEY_LEFT_ALT = @as(c_int, 342);
pub const GLFW_KEY_LEFT_SUPER = @as(c_int, 343);
pub const GLFW_KEY_RIGHT_SHIFT = @as(c_int, 344);
pub const GLFW_KEY_RIGHT_CONTROL = @as(c_int, 345);
pub const GLFW_KEY_RIGHT_ALT = @as(c_int, 346);
pub const GLFW_KEY_RIGHT_SUPER = @as(c_int, 347);
pub const GLFW_KEY_MENU = @as(c_int, 348);
pub const GLFW_KEY_LAST = GLFW_KEY_MENU;
pub const GLFW_MOD_SHIFT = @as(c_int, 0x0001);
pub const GLFW_MOD_CONTROL = @as(c_int, 0x0002);
pub const GLFW_MOD_ALT = @as(c_int, 0x0004);
pub const GLFW_MOD_SUPER = @as(c_int, 0x0008);
pub const GLFW_MOD_CAPS_LOCK = @as(c_int, 0x0010);
pub const GLFW_MOD_NUM_LOCK = @as(c_int, 0x0020);
pub const GLFW_MOUSE_BUTTON_1 = @as(c_int, 0);
pub const GLFW_MOUSE_BUTTON_2 = @as(c_int, 1);
pub const GLFW_MOUSE_BUTTON_3 = @as(c_int, 2);
pub const GLFW_MOUSE_BUTTON_4 = @as(c_int, 3);
pub const GLFW_MOUSE_BUTTON_5 = @as(c_int, 4);
pub const GLFW_MOUSE_BUTTON_6 = @as(c_int, 5);
pub const GLFW_MOUSE_BUTTON_7 = @as(c_int, 6);
pub const GLFW_MOUSE_BUTTON_8 = @as(c_int, 7);
pub const GLFW_MOUSE_BUTTON_LAST = GLFW_MOUSE_BUTTON_8;
pub const GLFW_MOUSE_BUTTON_LEFT = GLFW_MOUSE_BUTTON_1;
pub const GLFW_MOUSE_BUTTON_RIGHT = GLFW_MOUSE_BUTTON_2;
pub const GLFW_MOUSE_BUTTON_MIDDLE = GLFW_MOUSE_BUTTON_3;
pub const GLFW_JOYSTICK_1 = @as(c_int, 0);
pub const GLFW_JOYSTICK_2 = @as(c_int, 1);
pub const GLFW_JOYSTICK_3 = @as(c_int, 2);
pub const GLFW_JOYSTICK_4 = @as(c_int, 3);
pub const GLFW_JOYSTICK_5 = @as(c_int, 4);
pub const GLFW_JOYSTICK_6 = @as(c_int, 5);
pub const GLFW_JOYSTICK_7 = @as(c_int, 6);
pub const GLFW_JOYSTICK_8 = @as(c_int, 7);
pub const GLFW_JOYSTICK_9 = @as(c_int, 8);
pub const GLFW_JOYSTICK_10 = @as(c_int, 9);
pub const GLFW_JOYSTICK_11 = @as(c_int, 10);
pub const GLFW_JOYSTICK_12 = @as(c_int, 11);
pub const GLFW_JOYSTICK_13 = @as(c_int, 12);
pub const GLFW_JOYSTICK_14 = @as(c_int, 13);
pub const GLFW_JOYSTICK_15 = @as(c_int, 14);
pub const GLFW_JOYSTICK_16 = @as(c_int, 15);
pub const GLFW_JOYSTICK_LAST = GLFW_JOYSTICK_16;
pub const GLFW_GAMEPAD_BUTTON_A = @as(c_int, 0);
pub const GLFW_GAMEPAD_BUTTON_B = @as(c_int, 1);
pub const GLFW_GAMEPAD_BUTTON_X = @as(c_int, 2);
pub const GLFW_GAMEPAD_BUTTON_Y = @as(c_int, 3);
pub const GLFW_GAMEPAD_BUTTON_LEFT_BUMPER = @as(c_int, 4);
pub const GLFW_GAMEPAD_BUTTON_RIGHT_BUMPER = @as(c_int, 5);
pub const GLFW_GAMEPAD_BUTTON_BACK = @as(c_int, 6);
pub const GLFW_GAMEPAD_BUTTON_START = @as(c_int, 7);
pub const GLFW_GAMEPAD_BUTTON_GUIDE = @as(c_int, 8);
pub const GLFW_GAMEPAD_BUTTON_LEFT_THUMB = @as(c_int, 9);
pub const GLFW_GAMEPAD_BUTTON_RIGHT_THUMB = @as(c_int, 10);
pub const GLFW_GAMEPAD_BUTTON_DPAD_UP = @as(c_int, 11);
pub const GLFW_GAMEPAD_BUTTON_DPAD_RIGHT = @as(c_int, 12);
pub const GLFW_GAMEPAD_BUTTON_DPAD_DOWN = @as(c_int, 13);
pub const GLFW_GAMEPAD_BUTTON_DPAD_LEFT = @as(c_int, 14);
pub const GLFW_GAMEPAD_BUTTON_LAST = GLFW_GAMEPAD_BUTTON_DPAD_LEFT;
pub const GLFW_GAMEPAD_BUTTON_CROSS = GLFW_GAMEPAD_BUTTON_A;
pub const GLFW_GAMEPAD_BUTTON_CIRCLE = GLFW_GAMEPAD_BUTTON_B;
pub const GLFW_GAMEPAD_BUTTON_SQUARE = GLFW_GAMEPAD_BUTTON_X;
pub const GLFW_GAMEPAD_BUTTON_TRIANGLE = GLFW_GAMEPAD_BUTTON_Y;
pub const GLFW_GAMEPAD_AXIS_LEFT_X = @as(c_int, 0);
pub const GLFW_GAMEPAD_AXIS_LEFT_Y = @as(c_int, 1);
pub const GLFW_GAMEPAD_AXIS_RIGHT_X = @as(c_int, 2);
pub const GLFW_GAMEPAD_AXIS_RIGHT_Y = @as(c_int, 3);
pub const GLFW_GAMEPAD_AXIS_LEFT_TRIGGER = @as(c_int, 4);
pub const GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER = @as(c_int, 5);
pub const GLFW_GAMEPAD_AXIS_LAST = GLFW_GAMEPAD_AXIS_RIGHT_TRIGGER;
pub const GLFW_NO_ERROR = @as(c_int, 0);
pub const GLFW_NOT_INITIALIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010001, .hexadecimal);
pub const GLFW_NO_CURRENT_CONTEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010002, .hexadecimal);
pub const GLFW_INVALID_ENUM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010003, .hexadecimal);
pub const GLFW_INVALID_VALUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010004, .hexadecimal);
pub const GLFW_OUT_OF_MEMORY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010005, .hexadecimal);
pub const GLFW_API_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010006, .hexadecimal);
pub const GLFW_VERSION_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010007, .hexadecimal);
pub const GLFW_PLATFORM_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010008, .hexadecimal);
pub const GLFW_FORMAT_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010009, .hexadecimal);
pub const GLFW_NO_WINDOW_CONTEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001000A, .hexadecimal);
pub const GLFW_CURSOR_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001000B, .hexadecimal);
pub const GLFW_FEATURE_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001000C, .hexadecimal);
pub const GLFW_FEATURE_UNIMPLEMENTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001000D, .hexadecimal);
pub const GLFW_PLATFORM_UNAVAILABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0001000E, .hexadecimal);
pub const GLFW_FOCUSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020001, .hexadecimal);
pub const GLFW_ICONIFIED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020002, .hexadecimal);
pub const GLFW_RESIZABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020003, .hexadecimal);
pub const GLFW_VISIBLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020004, .hexadecimal);
pub const GLFW_DECORATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020005, .hexadecimal);
pub const GLFW_AUTO_ICONIFY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020006, .hexadecimal);
pub const GLFW_FLOATING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020007, .hexadecimal);
pub const GLFW_MAXIMIZED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020008, .hexadecimal);
pub const GLFW_CENTER_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020009, .hexadecimal);
pub const GLFW_TRANSPARENT_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000A, .hexadecimal);
pub const GLFW_HOVERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000B, .hexadecimal);
pub const GLFW_FOCUS_ON_SHOW = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000C, .hexadecimal);
pub const GLFW_MOUSE_PASSTHROUGH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002000D, .hexadecimal);
pub const GLFW_RED_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021001, .hexadecimal);
pub const GLFW_GREEN_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021002, .hexadecimal);
pub const GLFW_BLUE_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021003, .hexadecimal);
pub const GLFW_ALPHA_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021004, .hexadecimal);
pub const GLFW_DEPTH_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021005, .hexadecimal);
pub const GLFW_STENCIL_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021006, .hexadecimal);
pub const GLFW_ACCUM_RED_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021007, .hexadecimal);
pub const GLFW_ACCUM_GREEN_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021008, .hexadecimal);
pub const GLFW_ACCUM_BLUE_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021009, .hexadecimal);
pub const GLFW_ACCUM_ALPHA_BITS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100A, .hexadecimal);
pub const GLFW_AUX_BUFFERS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100B, .hexadecimal);
pub const GLFW_STEREO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100C, .hexadecimal);
pub const GLFW_SAMPLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100D, .hexadecimal);
pub const GLFW_SRGB_CAPABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100E, .hexadecimal);
pub const GLFW_REFRESH_RATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002100F, .hexadecimal);
pub const GLFW_DOUBLEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00021010, .hexadecimal);
pub const GLFW_CLIENT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022001, .hexadecimal);
pub const GLFW_CONTEXT_VERSION_MAJOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022002, .hexadecimal);
pub const GLFW_CONTEXT_VERSION_MINOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022003, .hexadecimal);
pub const GLFW_CONTEXT_REVISION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022004, .hexadecimal);
pub const GLFW_CONTEXT_ROBUSTNESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022005, .hexadecimal);
pub const GLFW_OPENGL_FORWARD_COMPAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022006, .hexadecimal);
pub const GLFW_CONTEXT_DEBUG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022007, .hexadecimal);
pub const GLFW_OPENGL_DEBUG_CONTEXT = GLFW_CONTEXT_DEBUG;
pub const GLFW_OPENGL_PROFILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022008, .hexadecimal);
pub const GLFW_CONTEXT_RELEASE_BEHAVIOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00022009, .hexadecimal);
pub const GLFW_CONTEXT_NO_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002200A, .hexadecimal);
pub const GLFW_CONTEXT_CREATION_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002200B, .hexadecimal);
pub const GLFW_SCALE_TO_MONITOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0002200C, .hexadecimal);
pub const GLFW_COCOA_RETINA_FRAMEBUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00023001, .hexadecimal);
pub const GLFW_COCOA_FRAME_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00023002, .hexadecimal);
pub const GLFW_COCOA_GRAPHICS_SWITCHING = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00023003, .hexadecimal);
pub const GLFW_X11_CLASS_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00024001, .hexadecimal);
pub const GLFW_X11_INSTANCE_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00024002, .hexadecimal);
pub const GLFW_WIN32_KEYBOARD_MENU = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00025001, .hexadecimal);
pub const GLFW_NO_API = @as(c_int, 0);
pub const GLFW_OPENGL_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030001, .hexadecimal);
pub const GLFW_OPENGL_ES_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030002, .hexadecimal);
pub const GLFW_NO_ROBUSTNESS = @as(c_int, 0);
pub const GLFW_NO_RESET_NOTIFICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00031001, .hexadecimal);
pub const GLFW_LOSE_CONTEXT_ON_RESET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00031002, .hexadecimal);
pub const GLFW_OPENGL_ANY_PROFILE = @as(c_int, 0);
pub const GLFW_OPENGL_CORE_PROFILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00032001, .hexadecimal);
pub const GLFW_OPENGL_COMPAT_PROFILE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00032002, .hexadecimal);
pub const GLFW_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033001, .hexadecimal);
pub const GLFW_STICKY_KEYS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033002, .hexadecimal);
pub const GLFW_STICKY_MOUSE_BUTTONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033003, .hexadecimal);
pub const GLFW_LOCK_KEY_MODS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033004, .hexadecimal);
pub const GLFW_RAW_MOUSE_MOTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00033005, .hexadecimal);
pub const GLFW_CURSOR_NORMAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00034001, .hexadecimal);
pub const GLFW_CURSOR_HIDDEN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00034002, .hexadecimal);
pub const GLFW_CURSOR_DISABLED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00034003, .hexadecimal);
pub const GLFW_ANY_RELEASE_BEHAVIOR = @as(c_int, 0);
pub const GLFW_RELEASE_BEHAVIOR_FLUSH = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00035001, .hexadecimal);
pub const GLFW_RELEASE_BEHAVIOR_NONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00035002, .hexadecimal);
pub const GLFW_NATIVE_CONTEXT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036001, .hexadecimal);
pub const GLFW_EGL_CONTEXT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036002, .hexadecimal);
pub const GLFW_OSMESA_CONTEXT_API = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036003, .hexadecimal);
pub const GLFW_ANGLE_PLATFORM_TYPE_NONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00037001, .hexadecimal);
pub const GLFW_ANGLE_PLATFORM_TYPE_OPENGL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00037002, .hexadecimal);
pub const GLFW_ANGLE_PLATFORM_TYPE_OPENGLES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00037003, .hexadecimal);
pub const GLFW_ANGLE_PLATFORM_TYPE_D3D9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00037004, .hexadecimal);
pub const GLFW_ANGLE_PLATFORM_TYPE_D3D11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00037005, .hexadecimal);
pub const GLFW_ANGLE_PLATFORM_TYPE_VULKAN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00037007, .hexadecimal);
pub const GLFW_ANGLE_PLATFORM_TYPE_METAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00037008, .hexadecimal);
pub const GLFW_ARROW_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036001, .hexadecimal);
pub const GLFW_IBEAM_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036002, .hexadecimal);
pub const GLFW_CROSSHAIR_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036003, .hexadecimal);
pub const GLFW_POINTING_HAND_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036004, .hexadecimal);
pub const GLFW_RESIZE_EW_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036005, .hexadecimal);
pub const GLFW_RESIZE_NS_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036006, .hexadecimal);
pub const GLFW_RESIZE_NWSE_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036007, .hexadecimal);
pub const GLFW_RESIZE_NESW_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036008, .hexadecimal);
pub const GLFW_RESIZE_ALL_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00036009, .hexadecimal);
pub const GLFW_NOT_ALLOWED_CURSOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0003600A, .hexadecimal);
pub const GLFW_HRESIZE_CURSOR = GLFW_RESIZE_EW_CURSOR;
pub const GLFW_VRESIZE_CURSOR = GLFW_RESIZE_NS_CURSOR;
pub const GLFW_HAND_CURSOR = GLFW_POINTING_HAND_CURSOR;
pub const GLFW_CONNECTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040001, .hexadecimal);
pub const GLFW_DISCONNECTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040002, .hexadecimal);
pub const GLFW_JOYSTICK_HAT_BUTTONS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00050001, .hexadecimal);
pub const GLFW_ANGLE_PLATFORM_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00050002, .hexadecimal);
pub const GLFW_PLATFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00050003, .hexadecimal);
pub const GLFW_COCOA_CHDIR_RESOURCES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00051001, .hexadecimal);
pub const GLFW_COCOA_MENUBAR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00051002, .hexadecimal);
pub const GLFW_X11_XCB_VULKAN_SURFACE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00052001, .hexadecimal);
pub const GLFW_ANY_PLATFORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00060000, .hexadecimal);
pub const GLFW_PLATFORM_WIN32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00060001, .hexadecimal);
pub const GLFW_PLATFORM_COCOA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00060002, .hexadecimal);
pub const GLFW_PLATFORM_WAYLAND = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00060003, .hexadecimal);
pub const GLFW_PLATFORM_X11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00060004, .hexadecimal);
pub const GLFW_PLATFORM_NULL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00060005, .hexadecimal);
pub const GLFW_DONT_CARE = -@as(c_int, 1);
pub const GLAPIENTRY = APIENTRY;
pub const GLFW_GLAPIENTRY_DEFINED = "";
pub const GLFW_EXPOSE_NATIVE_COCOA = @as(c_int, 1);
pub const _glfw3_native_h_ = "";
pub const __APPLICATIONSERVICES__ = "";
pub const __AVAILABILITY__ = "";
pub const __API_TO_BE_DEPRECATED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __AVAILABILITY_VERSIONS__ = "";
pub const __MAC_10_0 = @as(c_int, 1000);
pub const __MAC_10_1 = @as(c_int, 1010);
pub const __MAC_10_2 = @as(c_int, 1020);
pub const __MAC_10_3 = @as(c_int, 1030);
pub const __MAC_10_4 = @as(c_int, 1040);
pub const __MAC_10_5 = @as(c_int, 1050);
pub const __MAC_10_6 = @as(c_int, 1060);
pub const __MAC_10_7 = @as(c_int, 1070);
pub const __MAC_10_8 = @as(c_int, 1080);
pub const __MAC_10_9 = @as(c_int, 1090);
pub const __MAC_10_10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101000, .decimal);
pub const __MAC_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101002, .decimal);
pub const __MAC_10_10_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101003, .decimal);
pub const __MAC_10_11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101100, .decimal);
pub const __MAC_10_11_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101102, .decimal);
pub const __MAC_10_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101103, .decimal);
pub const __MAC_10_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101104, .decimal);
pub const __MAC_10_12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101200, .decimal);
pub const __MAC_10_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101201, .decimal);
pub const __MAC_10_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101202, .decimal);
pub const __MAC_10_12_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101204, .decimal);
pub const __MAC_10_13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101300, .decimal);
pub const __MAC_10_13_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101301, .decimal);
pub const __MAC_10_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101302, .decimal);
pub const __MAC_10_13_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101304, .decimal);
pub const __MAC_10_14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101400, .decimal);
pub const __MAC_10_14_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101401, .decimal);
pub const __MAC_10_14_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101404, .decimal);
pub const __MAC_10_14_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101406, .decimal);
pub const __MAC_10_15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101500, .decimal);
pub const __MAC_10_15_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101501, .decimal);
pub const __MAC_10_15_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101504, .decimal);
pub const __MAC_10_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101600, .decimal);
pub const __MAC_11_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110000, .decimal);
pub const __MAC_11_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110100, .decimal);
pub const __MAC_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110300, .decimal);
pub const __MAC_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110400, .decimal);
pub const __MAC_11_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110500, .decimal);
pub const __MAC_12_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120000, .decimal);
pub const __IPHONE_2_0 = @as(c_int, 20000);
pub const __IPHONE_2_1 = @as(c_int, 20100);
pub const __IPHONE_2_2 = @as(c_int, 20200);
pub const __IPHONE_3_0 = @as(c_int, 30000);
pub const __IPHONE_3_1 = @as(c_int, 30100);
pub const __IPHONE_3_2 = @as(c_int, 30200);
pub const __IPHONE_4_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40000, .decimal);
pub const __IPHONE_4_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40100, .decimal);
pub const __IPHONE_4_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40200, .decimal);
pub const __IPHONE_4_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40300, .decimal);
pub const __IPHONE_5_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50000, .decimal);
pub const __IPHONE_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50100, .decimal);
pub const __IPHONE_6_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60000, .decimal);
pub const __IPHONE_6_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60100, .decimal);
pub const __IPHONE_7_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70000, .decimal);
pub const __IPHONE_7_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70100, .decimal);
pub const __IPHONE_8_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80000, .decimal);
pub const __IPHONE_8_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80100, .decimal);
pub const __IPHONE_8_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80200, .decimal);
pub const __IPHONE_8_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80300, .decimal);
pub const __IPHONE_8_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80400, .decimal);
pub const __IPHONE_9_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90000, .decimal);
pub const __IPHONE_9_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90100, .decimal);
pub const __IPHONE_9_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90200, .decimal);
pub const __IPHONE_9_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90300, .decimal);
pub const __IPHONE_10_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __IPHONE_10_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100100, .decimal);
pub const __IPHONE_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100200, .decimal);
pub const __IPHONE_10_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100300, .decimal);
pub const __IPHONE_11_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110000, .decimal);
pub const __IPHONE_11_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110100, .decimal);
pub const __IPHONE_11_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110200, .decimal);
pub const __IPHONE_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110300, .decimal);
pub const __IPHONE_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110400, .decimal);
pub const __IPHONE_12_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120000, .decimal);
pub const __IPHONE_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120100, .decimal);
pub const __IPHONE_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120200, .decimal);
pub const __IPHONE_12_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120300, .decimal);
pub const __IPHONE_12_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120400, .decimal);
pub const __IPHONE_13_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130000, .decimal);
pub const __IPHONE_13_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130100, .decimal);
pub const __IPHONE_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130200, .decimal);
pub const __IPHONE_13_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130300, .decimal);
pub const __IPHONE_13_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130400, .decimal);
pub const __IPHONE_13_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130500, .decimal);
pub const __IPHONE_13_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130600, .decimal);
pub const __IPHONE_13_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130700, .decimal);
pub const __IPHONE_14_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140000, .decimal);
pub const __IPHONE_14_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140100, .decimal);
pub const __IPHONE_14_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140200, .decimal);
pub const __IPHONE_14_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140300, .decimal);
pub const __IPHONE_14_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140500, .decimal);
pub const __IPHONE_14_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140600, .decimal);
pub const __IPHONE_14_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140700, .decimal);
pub const __IPHONE_14_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140800, .decimal);
pub const __IPHONE_15_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150000, .decimal);
pub const __TVOS_9_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90000, .decimal);
pub const __TVOS_9_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90100, .decimal);
pub const __TVOS_9_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 90200, .decimal);
pub const __TVOS_10_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const __TVOS_10_0_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100001, .decimal);
pub const __TVOS_10_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100100, .decimal);
pub const __TVOS_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100200, .decimal);
pub const __TVOS_11_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110000, .decimal);
pub const __TVOS_11_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110100, .decimal);
pub const __TVOS_11_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110200, .decimal);
pub const __TVOS_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110300, .decimal);
pub const __TVOS_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110400, .decimal);
pub const __TVOS_12_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120000, .decimal);
pub const __TVOS_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120100, .decimal);
pub const __TVOS_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120200, .decimal);
pub const __TVOS_12_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120300, .decimal);
pub const __TVOS_12_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120400, .decimal);
pub const __TVOS_13_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130000, .decimal);
pub const __TVOS_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130200, .decimal);
pub const __TVOS_13_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130300, .decimal);
pub const __TVOS_13_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 130400, .decimal);
pub const __TVOS_14_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140000, .decimal);
pub const __TVOS_14_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140100, .decimal);
pub const __TVOS_14_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140200, .decimal);
pub const __TVOS_14_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140300, .decimal);
pub const __TVOS_14_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140500, .decimal);
pub const __TVOS_14_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140600, .decimal);
pub const __TVOS_14_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 140700, .decimal);
pub const __TVOS_15_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 150000, .decimal);
pub const __WATCHOS_1_0 = @as(c_int, 10000);
pub const __WATCHOS_2_0 = @as(c_int, 20000);
pub const __WATCHOS_2_1 = @as(c_int, 20100);
pub const __WATCHOS_2_2 = @as(c_int, 20200);
pub const __WATCHOS_3_0 = @as(c_int, 30000);
pub const __WATCHOS_3_1 = @as(c_int, 30100);
pub const __WATCHOS_3_1_1 = @as(c_int, 30101);
pub const __WATCHOS_3_2 = @as(c_int, 30200);
pub const __WATCHOS_4_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40000, .decimal);
pub const __WATCHOS_4_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40100, .decimal);
pub const __WATCHOS_4_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40200, .decimal);
pub const __WATCHOS_4_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 40300, .decimal);
pub const __WATCHOS_5_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50000, .decimal);
pub const __WATCHOS_5_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50100, .decimal);
pub const __WATCHOS_5_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50200, .decimal);
pub const __WATCHOS_5_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 50300, .decimal);
pub const __WATCHOS_6_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60000, .decimal);
pub const __WATCHOS_6_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60100, .decimal);
pub const __WATCHOS_6_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 60200, .decimal);
pub const __WATCHOS_7_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70000, .decimal);
pub const __WATCHOS_7_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70100, .decimal);
pub const __WATCHOS_7_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70200, .decimal);
pub const __WATCHOS_7_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70300, .decimal);
pub const __WATCHOS_7_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70400, .decimal);
pub const __WATCHOS_7_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70500, .decimal);
pub const __WATCHOS_7_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 70600, .decimal);
pub const __WATCHOS_8_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 80000, .decimal);
pub const MAC_OS_X_VERSION_10_0 = @as(c_int, 1000);
pub const MAC_OS_X_VERSION_10_1 = @as(c_int, 1010);
pub const MAC_OS_X_VERSION_10_2 = @as(c_int, 1020);
pub const MAC_OS_X_VERSION_10_3 = @as(c_int, 1030);
pub const MAC_OS_X_VERSION_10_4 = @as(c_int, 1040);
pub const MAC_OS_X_VERSION_10_5 = @as(c_int, 1050);
pub const MAC_OS_X_VERSION_10_6 = @as(c_int, 1060);
pub const MAC_OS_X_VERSION_10_7 = @as(c_int, 1070);
pub const MAC_OS_X_VERSION_10_8 = @as(c_int, 1080);
pub const MAC_OS_X_VERSION_10_9 = @as(c_int, 1090);
pub const MAC_OS_X_VERSION_10_10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101000, .decimal);
pub const MAC_OS_X_VERSION_10_10_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101002, .decimal);
pub const MAC_OS_X_VERSION_10_10_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101003, .decimal);
pub const MAC_OS_X_VERSION_10_11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101100, .decimal);
pub const MAC_OS_X_VERSION_10_11_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101102, .decimal);
pub const MAC_OS_X_VERSION_10_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101103, .decimal);
pub const MAC_OS_X_VERSION_10_11_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101104, .decimal);
pub const MAC_OS_X_VERSION_10_12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101200, .decimal);
pub const MAC_OS_X_VERSION_10_12_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101201, .decimal);
pub const MAC_OS_X_VERSION_10_12_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101202, .decimal);
pub const MAC_OS_X_VERSION_10_12_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101204, .decimal);
pub const MAC_OS_X_VERSION_10_13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101300, .decimal);
pub const MAC_OS_X_VERSION_10_13_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101301, .decimal);
pub const MAC_OS_X_VERSION_10_13_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101302, .decimal);
pub const MAC_OS_X_VERSION_10_13_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101304, .decimal);
pub const MAC_OS_X_VERSION_10_14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101400, .decimal);
pub const MAC_OS_X_VERSION_10_14_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101401, .decimal);
pub const MAC_OS_X_VERSION_10_14_4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101404, .decimal);
pub const MAC_OS_X_VERSION_10_14_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101406, .decimal);
pub const MAC_OS_X_VERSION_10_15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101500, .decimal);
pub const MAC_OS_X_VERSION_10_15_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101501, .decimal);
pub const MAC_OS_X_VERSION_10_16 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 101600, .decimal);
pub const MAC_OS_VERSION_11_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110000, .decimal);
pub const MAC_OS_VERSION_12_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 120000, .decimal);
pub const __DRIVERKIT_19_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 190000, .decimal);
pub const __DRIVERKIT_20_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 200000, .decimal);
pub const __DRIVERKIT_21_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 210000, .decimal);
pub const __CORESERVICES__ = "";
pub const __COREFOUNDATION_COREFOUNDATION__ = @as(c_int, 1);
pub const __COREFOUNDATION__ = @as(c_int, 1);
pub const _SYS_TYPES_H_ = "";
pub const __SYS_APPLEAPIOPTS_H__ = "";
pub const __APPLE_API_STANDARD = "";
pub const __APPLE_API_STABLE = "";
pub const __APPLE_API_EVOLVING = "";
pub const __APPLE_API_UNSTABLE = "";
pub const __APPLE_API_PRIVATE = "";
pub const __APPLE_API_OBSOLETE = "";
pub const _BSD_MACHINE_ENDIAN_H_ = "";
pub const _ARM__ENDIAN_H_ = "";
pub const _QUAD_HIGHWORD = @as(c_int, 1);
pub const _QUAD_LOWWORD = @as(c_int, 0);
pub const __DARWIN_LITTLE_ENDIAN = @as(c_int, 1234);
pub const __DARWIN_BIG_ENDIAN = @as(c_int, 4321);
pub const __DARWIN_PDP_ENDIAN = @as(c_int, 3412);
pub const __DARWIN_BYTE_ORDER = __DARWIN_LITTLE_ENDIAN;
pub const LITTLE_ENDIAN = __DARWIN_LITTLE_ENDIAN;
pub const BIG_ENDIAN = __DARWIN_BIG_ENDIAN;
pub const PDP_ENDIAN = __DARWIN_PDP_ENDIAN;
pub const BYTE_ORDER = __DARWIN_BYTE_ORDER;
pub const _SYS__ENDIAN_H_ = "";
pub const _OS__OSBYTEORDER_H = "";
pub inline fn __DARWIN_OSSwapConstInt16(x: anytype) __uint16_t {
    return @import("std").zig.c_translation.cast(__uint16_t, ((@import("std").zig.c_translation.cast(__uint16_t, x) & @as(c_uint, 0xff00)) >> @as(c_int, 8)) | ((@import("std").zig.c_translation.cast(__uint16_t, x) & @as(c_uint, 0x00ff)) << @as(c_int, 8)));
}
pub inline fn __DARWIN_OSSwapConstInt32(x: anytype) __uint32_t {
    return @import("std").zig.c_translation.cast(__uint32_t, ((((@import("std").zig.c_translation.cast(__uint32_t, x) & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xff000000, .hexadecimal)) >> @as(c_int, 24)) | ((@import("std").zig.c_translation.cast(__uint32_t, x) & @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x00ff0000, .hexadecimal)) >> @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(__uint32_t, x) & @as(c_uint, 0x0000ff00)) << @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(__uint32_t, x) & @as(c_uint, 0x000000ff)) << @as(c_int, 24)));
}
pub inline fn __DARWIN_OSSwapConstInt64(x: anytype) __uint64_t {
    return @import("std").zig.c_translation.cast(__uint64_t, ((((((((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0xff00000000000000)) >> @as(c_int, 56)) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x00ff000000000000)) >> @as(c_int, 40))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x0000ff0000000000)) >> @as(c_int, 24))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x000000ff00000000)) >> @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x00000000ff000000)) << @as(c_int, 8))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x0000000000ff0000)) << @as(c_int, 24))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x000000000000ff00)) << @as(c_int, 40))) | ((@import("std").zig.c_translation.cast(__uint64_t, x) & @as(c_ulonglong, 0x00000000000000ff)) << @as(c_int, 56)));
}
pub const _OS_OSBYTEORDERARM_H = "";
pub const _ARM_ARCH_H = "";
pub inline fn __DARWIN_OSSwapInt16(x: anytype) __uint16_t {
    return @import("std").zig.c_translation.cast(__uint16_t, if (__builtin_constant_p(x)) __DARWIN_OSSwapConstInt16(x) else _OSSwapInt16(x));
}
pub inline fn __DARWIN_OSSwapInt32(x: anytype) @TypeOf(if (__builtin_constant_p(x)) __DARWIN_OSSwapConstInt32(x) else _OSSwapInt32(x)) {
    return if (__builtin_constant_p(x)) __DARWIN_OSSwapConstInt32(x) else _OSSwapInt32(x);
}
pub inline fn __DARWIN_OSSwapInt64(x: anytype) @TypeOf(if (__builtin_constant_p(x)) __DARWIN_OSSwapConstInt64(x) else _OSSwapInt64(x)) {
    return if (__builtin_constant_p(x)) __DARWIN_OSSwapConstInt64(x) else _OSSwapInt64(x);
}
pub inline fn ntohs(x: anytype) @TypeOf(__DARWIN_OSSwapInt16(x)) {
    return __DARWIN_OSSwapInt16(x);
}
pub inline fn htons(x: anytype) @TypeOf(__DARWIN_OSSwapInt16(x)) {
    return __DARWIN_OSSwapInt16(x);
}
pub inline fn ntohl(x: anytype) @TypeOf(__DARWIN_OSSwapInt32(x)) {
    return __DARWIN_OSSwapInt32(x);
}
pub inline fn htonl(x: anytype) @TypeOf(__DARWIN_OSSwapInt32(x)) {
    return __DARWIN_OSSwapInt32(x);
}
pub inline fn ntohll(x: anytype) @TypeOf(__DARWIN_OSSwapInt64(x)) {
    return __DARWIN_OSSwapInt64(x);
}
pub inline fn htonll(x: anytype) @TypeOf(__DARWIN_OSSwapInt64(x)) {
    return __DARWIN_OSSwapInt64(x);
}
pub const _U_CHAR = "";
pub const _U_SHORT = "";
pub const _U_INT = "";
pub const _U_LONG = "";
pub const _CADDR_T = "";
pub const _DEV_T = "";
pub const _BLKCNT_T = "";
pub const _BLKSIZE_T = "";
pub const _GID_T = "";
pub const _IN_ADDR_T = "";
pub const _IN_PORT_T = "";
pub const _INO_T = "";
pub const _INO64_T = "";
pub const _KEY_T = "";
pub const _MODE_T = "";
pub const _NLINK_T = "";
pub const _ID_T = "";
pub const _PID_T = "";
pub const _OFF_T = "";
pub const _UID_T = "";
pub inline fn major(x: anytype) i32 {
    return @import("std").zig.c_translation.cast(i32, (@import("std").zig.c_translation.cast(u_int32_t, x) >> @as(c_int, 24)) & @as(c_int, 0xff));
}
pub inline fn minor(x: anytype) i32 {
    return @import("std").zig.c_translation.cast(i32, x & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff, .hexadecimal));
}
pub inline fn makedev(x: anytype, y: anytype) dev_t {
    return @import("std").zig.c_translation.cast(dev_t, (x << @as(c_int, 24)) | y);
}
pub const _CLOCK_T = "";
pub const _SSIZE_T = "";
pub const _TIME_T = "";
pub const _USECONDS_T = "";
pub const _SUSECONDS_T = "";
pub const _RSIZE_T = "";
pub const _ERRNO_T = "";
pub const _FD_SET = "";
pub const __DARWIN_FD_SETSIZE = @as(c_int, 1024);
pub const __DARWIN_NBBY = @as(c_int, 8);
pub const __DARWIN_NFDBITS = @import("std").zig.c_translation.sizeof(__int32_t) * __DARWIN_NBBY;
pub inline fn __DARWIN_howmany(x: anytype, y: anytype) @TypeOf(if ((x % y) == @as(c_int, 0)) x / y else (x / y) + @as(c_int, 1)) {
    return if ((x % y) == @as(c_int, 0)) x / y else (x / y) + @as(c_int, 1);
}
pub inline fn __DARWIN_FD_SET(n: anytype, p: anytype) @TypeOf(__darwin_fd_set(n, p)) {
    return __darwin_fd_set(n, p);
}
pub inline fn __DARWIN_FD_CLR(n: anytype, p: anytype) @TypeOf(__darwin_fd_clr(n, p)) {
    return __darwin_fd_clr(n, p);
}
pub inline fn __DARWIN_FD_ISSET(n: anytype, p: anytype) @TypeOf(__darwin_fd_isset(n, p)) {
    return __darwin_fd_isset(n, p);
}
pub const NBBY = __DARWIN_NBBY;
pub const NFDBITS = __DARWIN_NFDBITS;
pub inline fn howmany(x: anytype, y: anytype) @TypeOf(__DARWIN_howmany(x, y)) {
    return __DARWIN_howmany(x, y);
}
pub const FD_SETSIZE = __DARWIN_FD_SETSIZE;
pub inline fn FD_SET(n: anytype, p: anytype) @TypeOf(__DARWIN_FD_SET(n, p)) {
    return __DARWIN_FD_SET(n, p);
}
pub inline fn FD_CLR(n: anytype, p: anytype) @TypeOf(__DARWIN_FD_CLR(n, p)) {
    return __DARWIN_FD_CLR(n, p);
}
pub inline fn FD_ZERO(p: anytype) @TypeOf(__DARWIN_FD_ZERO(p)) {
    return __DARWIN_FD_ZERO(p);
}
pub inline fn FD_ISSET(n: anytype, p: anytype) @TypeOf(__DARWIN_FD_ISSET(n, p)) {
    return __DARWIN_FD_ISSET(n, p);
}
pub inline fn FD_COPY(f: anytype, t: anytype) @TypeOf(__DARWIN_FD_COPY(f, t)) {
    return __DARWIN_FD_COPY(f, t);
}
pub const _PTHREAD_ATTR_T = "";
pub const _PTHREAD_COND_T = "";
pub const _PTHREAD_CONDATTR_T = "";
pub const _PTHREAD_MUTEX_T = "";
pub const _PTHREAD_MUTEXATTR_T = "";
pub const _PTHREAD_ONCE_T = "";
pub const _PTHREAD_RWLOCK_T = "";
pub const _PTHREAD_RWLOCKATTR_T = "";
pub const _PTHREAD_T = "";
pub const _PTHREAD_KEY_T = "";
pub const _FSBLKCNT_T = "";
pub const _FSFILCNT_T = "";
pub const __STDARG_H = "";
pub const _VA_LIST = "";
pub const __GNUC_VA_LIST = @as(c_int, 1);
pub const _ASSERT_H_ = "";
pub const _LIBCPP_CTYPE_H = "";
pub const _CTYPE_H_ = "";
pub const __CTYPE_H_ = "";
pub const _RUNETYPE_H_ = "";
pub const __TYPES_H_ = "";
pub const __DARWIN_WCHAR_MAX = __WCHAR_MAX__;
pub const __DARWIN_WCHAR_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hexadecimal) - @as(c_int, 1);
pub const __DARWIN_WEOF = @import("std").zig.c_translation.cast(__darwin_wint_t, -@as(c_int, 1));
pub const _FORTIFY_SOURCE = @as(c_int, 2);
pub const _CT_RUNE_T = "";
pub const _RUNE_T = "";
pub const _WINT_T = "";
pub const _CACHED_RUNES = @as(c_int, 1) << @as(c_int, 8);
pub const _CRMASK = ~(_CACHED_RUNES - @as(c_int, 1));
pub const _RUNE_MAGIC_A = "RuneMagA";
pub const _CTYPE_A = @as(c_long, 0x00000100);
pub const _CTYPE_C = @as(c_long, 0x00000200);
pub const _CTYPE_D = @as(c_long, 0x00000400);
pub const _CTYPE_G = @as(c_long, 0x00000800);
pub const _CTYPE_L = @as(c_long, 0x00001000);
pub const _CTYPE_P = @as(c_long, 0x00002000);
pub const _CTYPE_S = @as(c_long, 0x00004000);
pub const _CTYPE_U = @as(c_long, 0x00008000);
pub const _CTYPE_X = @as(c_long, 0x00010000);
pub const _CTYPE_B = @as(c_long, 0x00020000);
pub const _CTYPE_R = @as(c_long, 0x00040000);
pub const _CTYPE_I = @as(c_long, 0x00080000);
pub const _CTYPE_T = @as(c_long, 0x00100000);
pub const _CTYPE_Q = @as(c_long, 0x00200000);
pub const _CTYPE_SW0 = @as(c_long, 0x20000000);
pub const _CTYPE_SW1 = @as(c_long, 0x40000000);
pub const _CTYPE_SW2 = @import("std").zig.c_translation.promoteIntLiteral(c_long, 0x80000000, .hexadecimal);
pub const _CTYPE_SW3 = @import("std").zig.c_translation.promoteIntLiteral(c_long, 0xc0000000, .hexadecimal);
pub const _CTYPE_SWM = @import("std").zig.c_translation.promoteIntLiteral(c_long, 0xe0000000, .hexadecimal);
pub const _CTYPE_SWS = @as(c_int, 30);
pub const __DARWIN_CTYPE_inline = __header_inline;
pub const __DARWIN_CTYPE_TOP_inline = __header_inline;
pub inline fn _tolower(c: anytype) @TypeOf(__tolower(c)) {
    return __tolower(c);
}
pub inline fn _toupper(c: anytype) @TypeOf(__toupper(c)) {
    return __toupper(c);
}
pub const _LIBCPP_ERRNO_H = "";
pub const _SYS_ERRNO_H_ = "";
pub const errno = __error().*;
pub const EPERM = @as(c_int, 1);
pub const ENOENT = @as(c_int, 2);
pub const ESRCH = @as(c_int, 3);
pub const EINTR = @as(c_int, 4);
pub const EIO = @as(c_int, 5);
pub const ENXIO = @as(c_int, 6);
pub const E2BIG = @as(c_int, 7);
pub const ENOEXEC = @as(c_int, 8);
pub const EBADF = @as(c_int, 9);
pub const ECHILD = @as(c_int, 10);
pub const EDEADLK = @as(c_int, 11);
pub const ENOMEM = @as(c_int, 12);
pub const EACCES = @as(c_int, 13);
pub const EFAULT = @as(c_int, 14);
pub const ENOTBLK = @as(c_int, 15);
pub const EBUSY = @as(c_int, 16);
pub const EEXIST = @as(c_int, 17);
pub const EXDEV = @as(c_int, 18);
pub const ENODEV = @as(c_int, 19);
pub const ENOTDIR = @as(c_int, 20);
pub const EISDIR = @as(c_int, 21);
pub const EINVAL = @as(c_int, 22);
pub const ENFILE = @as(c_int, 23);
pub const EMFILE = @as(c_int, 24);
pub const ENOTTY = @as(c_int, 25);
pub const ETXTBSY = @as(c_int, 26);
pub const EFBIG = @as(c_int, 27);
pub const ENOSPC = @as(c_int, 28);
pub const ESPIPE = @as(c_int, 29);
pub const EROFS = @as(c_int, 30);
pub const EMLINK = @as(c_int, 31);
pub const EPIPE = @as(c_int, 32);
pub const EDOM = @as(c_int, 33);
pub const ERANGE = @as(c_int, 34);
pub const EAGAIN = @as(c_int, 35);
pub const EWOULDBLOCK = EAGAIN;
pub const EINPROGRESS = @as(c_int, 36);
pub const EALREADY = @as(c_int, 37);
pub const ENOTSOCK = @as(c_int, 38);
pub const EDESTADDRREQ = @as(c_int, 39);
pub const EMSGSIZE = @as(c_int, 40);
pub const EPROTOTYPE = @as(c_int, 41);
pub const ENOPROTOOPT = @as(c_int, 42);
pub const EPROTONOSUPPORT = @as(c_int, 43);
pub const ESOCKTNOSUPPORT = @as(c_int, 44);
pub const ENOTSUP = @as(c_int, 45);
pub const EPFNOSUPPORT = @as(c_int, 46);
pub const EAFNOSUPPORT = @as(c_int, 47);
pub const EADDRINUSE = @as(c_int, 48);
pub const EADDRNOTAVAIL = @as(c_int, 49);
pub const ENETDOWN = @as(c_int, 50);
pub const ENETUNREACH = @as(c_int, 51);
pub const ENETRESET = @as(c_int, 52);
pub const ECONNABORTED = @as(c_int, 53);
pub const ECONNRESET = @as(c_int, 54);
pub const ENOBUFS = @as(c_int, 55);
pub const EISCONN = @as(c_int, 56);
pub const ENOTCONN = @as(c_int, 57);
pub const ESHUTDOWN = @as(c_int, 58);
pub const ETOOMANYREFS = @as(c_int, 59);
pub const ETIMEDOUT = @as(c_int, 60);
pub const ECONNREFUSED = @as(c_int, 61);
pub const ELOOP = @as(c_int, 62);
pub const ENAMETOOLONG = @as(c_int, 63);
pub const EHOSTDOWN = @as(c_int, 64);
pub const EHOSTUNREACH = @as(c_int, 65);
pub const ENOTEMPTY = @as(c_int, 66);
pub const EPROCLIM = @as(c_int, 67);
pub const EUSERS = @as(c_int, 68);
pub const EDQUOT = @as(c_int, 69);
pub const ESTALE = @as(c_int, 70);
pub const EREMOTE = @as(c_int, 71);
pub const EBADRPC = @as(c_int, 72);
pub const ERPCMISMATCH = @as(c_int, 73);
pub const EPROGUNAVAIL = @as(c_int, 74);
pub const EPROGMISMATCH = @as(c_int, 75);
pub const EPROCUNAVAIL = @as(c_int, 76);
pub const ENOLCK = @as(c_int, 77);
pub const ENOSYS = @as(c_int, 78);
pub const EFTYPE = @as(c_int, 79);
pub const EAUTH = @as(c_int, 80);
pub const ENEEDAUTH = @as(c_int, 81);
pub const EPWROFF = @as(c_int, 82);
pub const EDEVERR = @as(c_int, 83);
pub const EOVERFLOW = @as(c_int, 84);
pub const EBADEXEC = @as(c_int, 85);
pub const EBADARCH = @as(c_int, 86);
pub const ESHLIBVERS = @as(c_int, 87);
pub const EBADMACHO = @as(c_int, 88);
pub const ECANCELED = @as(c_int, 89);
pub const EIDRM = @as(c_int, 90);
pub const ENOMSG = @as(c_int, 91);
pub const EILSEQ = @as(c_int, 92);
pub const ENOATTR = @as(c_int, 93);
pub const EBADMSG = @as(c_int, 94);
pub const EMULTIHOP = @as(c_int, 95);
pub const ENODATA = @as(c_int, 96);
pub const ENOLINK = @as(c_int, 97);
pub const ENOSR = @as(c_int, 98);
pub const ENOSTR = @as(c_int, 99);
pub const EPROTO = @as(c_int, 100);
pub const ETIME = @as(c_int, 101);
pub const EOPNOTSUPP = @as(c_int, 102);
pub const ENOPOLICY = @as(c_int, 103);
pub const ENOTRECOVERABLE = @as(c_int, 104);
pub const EOWNERDEAD = @as(c_int, 105);
pub const EQFULL = @as(c_int, 106);
pub const ELAST = @as(c_int, 106);
pub const _LIBCPP_FLOAT_H = "";
pub const __CLANG_FLOAT_H = "";
pub const _FLOAT_H_ = "";
pub const __FLOAT_H = "";
pub const FLT_EVAL_METHOD = __FLT_EVAL_METHOD__;
pub const FLT_RADIX = __FLT_RADIX__;
pub const FLT_MANT_DIG = __FLT_MANT_DIG__;
pub const DBL_MANT_DIG = __DBL_MANT_DIG__;
pub const LDBL_MANT_DIG = __LDBL_MANT_DIG__;
pub const FLT_DIG = __FLT_DIG__;
pub const DBL_DIG = __DBL_DIG__;
pub const LDBL_DIG = __LDBL_DIG__;
pub const FLT_MIN_EXP = __FLT_MIN_EXP__;
pub const DBL_MIN_EXP = __DBL_MIN_EXP__;
pub const LDBL_MIN_EXP = __LDBL_MIN_EXP__;
pub const FLT_MIN_10_EXP = __FLT_MIN_10_EXP__;
pub const DBL_MIN_10_EXP = __DBL_MIN_10_EXP__;
pub const LDBL_MIN_10_EXP = __LDBL_MIN_10_EXP__;
pub const FLT_MAX_EXP = __FLT_MAX_EXP__;
pub const DBL_MAX_EXP = __DBL_MAX_EXP__;
pub const LDBL_MAX_EXP = __LDBL_MAX_EXP__;
pub const FLT_MAX_10_EXP = __FLT_MAX_10_EXP__;
pub const DBL_MAX_10_EXP = __DBL_MAX_10_EXP__;
pub const LDBL_MAX_10_EXP = __LDBL_MAX_10_EXP__;
pub const FLT_MAX = __FLT_MAX__;
pub const DBL_MAX = __DBL_MAX__;
pub const LDBL_MAX = __LDBL_MAX__;
pub const FLT_EPSILON = __FLT_EPSILON__;
pub const DBL_EPSILON = __DBL_EPSILON__;
pub const LDBL_EPSILON = __LDBL_EPSILON__;
pub const FLT_MIN = __FLT_MIN__;
pub const DBL_MIN = __DBL_MIN__;
pub const LDBL_MIN = __LDBL_MIN__;
pub const DECIMAL_DIG = __DECIMAL_DIG__;
pub const FLT_HAS_SUBNORM = @as(c_int, 1);
pub const DBL_HAS_SUBNORM = @as(c_int, 1);
pub const LDBL_HAS_SUBNORM = @as(c_int, 1);
pub const FLT_TRUE_MIN = __FLT_DENORM_MIN__;
pub const DBL_TRUE_MIN = __DBL_DENORM_MIN__;
pub const LDBL_TRUE_MIN = __LDBL_DENORM_MIN__;
pub const FLT_DECIMAL_DIG = __FLT_DECIMAL_DIG__;
pub const DBL_DECIMAL_DIG = __DBL_DECIMAL_DIG__;
pub const LDBL_DECIMAL_DIG = __LDBL_DECIMAL_DIG__;
pub const _LIBCPP_LIMITS_H = "";
pub const _GCC_LIMITS_H_ = "";
pub const _GCC_NEXT_LIMITS_H = "";
pub const __CLANG_LIMITS_H = "";
pub const _LIMITS_H_ = "";
pub const _BSD_MACHINE_LIMITS_H_ = "";
pub const _ARM_LIMITS_H_ = "";
pub const _ARM__LIMITS_H_ = "";
pub const __DARWIN_CLK_TCK = @as(c_int, 100);
pub const CHAR_BIT = @as(c_int, 8);
pub const MB_LEN_MAX = @as(c_int, 6);
pub const CLK_TCK = __DARWIN_CLK_TCK;
pub const SCHAR_MAX = @as(c_int, 127);
pub const SCHAR_MIN = -@as(c_int, 128);
pub const UCHAR_MAX = @as(c_int, 255);
pub const CHAR_MAX = @as(c_int, 127);
pub const CHAR_MIN = -@as(c_int, 128);
pub const USHRT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const SHRT_MAX = @as(c_int, 32767);
pub const SHRT_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const UINT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffffff, .hexadecimal);
pub const INT_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal);
pub const INT_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const ULONG_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_ulong, 0xffffffffffffffff, .hexadecimal);
pub const LONG_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_long, 0x7fffffffffffffff, .hexadecimal);
pub const LONG_MIN = -@import("std").zig.c_translation.promoteIntLiteral(c_long, 0x7fffffffffffffff, .hexadecimal) - @as(c_int, 1);
pub const ULLONG_MAX = @as(c_ulonglong, 0xffffffffffffffff);
pub const LLONG_MAX = @as(c_longlong, 0x7fffffffffffffff);
pub const LLONG_MIN = -@as(c_longlong, 0x7fffffffffffffff) - @as(c_int, 1);
pub const LONG_BIT = @as(c_int, 64);
pub const SSIZE_MAX = LONG_MAX;
pub const WORD_BIT = @as(c_int, 32);
pub const SIZE_T_MAX = ULONG_MAX;
pub const UQUAD_MAX = ULLONG_MAX;
pub const QUAD_MAX = LLONG_MAX;
pub const QUAD_MIN = LLONG_MIN;
pub const _SYS_SYSLIMITS_H_ = "";
pub const ARG_MAX = @as(c_int, 1024) * @as(c_int, 1024);
pub const CHILD_MAX = @as(c_int, 266);
pub const GID_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 2147483647, .decimal);
pub const LINK_MAX = @as(c_int, 32767);
pub const MAX_CANON = @as(c_int, 1024);
pub const MAX_INPUT = @as(c_int, 1024);
pub const NAME_MAX = @as(c_int, 255);
pub const NGROUPS_MAX = @as(c_int, 16);
pub const UID_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 2147483647, .decimal);
pub const OPEN_MAX = @as(c_int, 10240);
pub const PATH_MAX = @as(c_int, 1024);
pub const PIPE_BUF = @as(c_int, 512);
pub const BC_BASE_MAX = @as(c_int, 99);
pub const BC_DIM_MAX = @as(c_int, 2048);
pub const BC_SCALE_MAX = @as(c_int, 99);
pub const BC_STRING_MAX = @as(c_int, 1000);
pub const CHARCLASS_NAME_MAX = @as(c_int, 14);
pub const COLL_WEIGHTS_MAX = @as(c_int, 2);
pub const EQUIV_CLASS_MAX = @as(c_int, 2);
pub const EXPR_NEST_MAX = @as(c_int, 32);
pub const LINE_MAX = @as(c_int, 2048);
pub const RE_DUP_MAX = @as(c_int, 255);
pub const NZERO = @as(c_int, 20);
pub const _POSIX_ARG_MAX = @as(c_int, 4096);
pub const _POSIX_CHILD_MAX = @as(c_int, 25);
pub const _POSIX_LINK_MAX = @as(c_int, 8);
pub const _POSIX_MAX_CANON = @as(c_int, 255);
pub const _POSIX_MAX_INPUT = @as(c_int, 255);
pub const _POSIX_NAME_MAX = @as(c_int, 14);
pub const _POSIX_NGROUPS_MAX = @as(c_int, 8);
pub const _POSIX_OPEN_MAX = @as(c_int, 20);
pub const _POSIX_PATH_MAX = @as(c_int, 256);
pub const _POSIX_PIPE_BUF = @as(c_int, 512);
pub const _POSIX_SSIZE_MAX = @as(c_int, 32767);
pub const _POSIX_STREAM_MAX = @as(c_int, 8);
pub const _POSIX_TZNAME_MAX = @as(c_int, 6);
pub const _POSIX2_BC_BASE_MAX = @as(c_int, 99);
pub const _POSIX2_BC_DIM_MAX = @as(c_int, 2048);
pub const _POSIX2_BC_SCALE_MAX = @as(c_int, 99);
pub const _POSIX2_BC_STRING_MAX = @as(c_int, 1000);
pub const _POSIX2_EQUIV_CLASS_MAX = @as(c_int, 2);
pub const _POSIX2_EXPR_NEST_MAX = @as(c_int, 32);
pub const _POSIX2_LINE_MAX = @as(c_int, 2048);
pub const _POSIX2_RE_DUP_MAX = @as(c_int, 255);
pub const _POSIX_AIO_LISTIO_MAX = @as(c_int, 2);
pub const _POSIX_AIO_MAX = @as(c_int, 1);
pub const _POSIX_DELAYTIMER_MAX = @as(c_int, 32);
pub const _POSIX_MQ_OPEN_MAX = @as(c_int, 8);
pub const _POSIX_MQ_PRIO_MAX = @as(c_int, 32);
pub const _POSIX_RTSIG_MAX = @as(c_int, 8);
pub const _POSIX_SEM_NSEMS_MAX = @as(c_int, 256);
pub const _POSIX_SEM_VALUE_MAX = @as(c_int, 32767);
pub const _POSIX_SIGQUEUE_MAX = @as(c_int, 32);
pub const _POSIX_TIMER_MAX = @as(c_int, 32);
pub const _POSIX_CLOCKRES_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 20000000, .decimal);
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS = @as(c_int, 4);
pub const _POSIX_THREAD_KEYS_MAX = @as(c_int, 128);
pub const _POSIX_THREAD_THREADS_MAX = @as(c_int, 64);
pub const PTHREAD_DESTRUCTOR_ITERATIONS = @as(c_int, 4);
pub const PTHREAD_KEYS_MAX = @as(c_int, 512);
pub const PTHREAD_STACK_MIN = @as(c_int, 16384);
pub const _POSIX_HOST_NAME_MAX = @as(c_int, 255);
pub const _POSIX_LOGIN_NAME_MAX = @as(c_int, 9);
pub const _POSIX_SS_REPL_MAX = @as(c_int, 4);
pub const _POSIX_SYMLINK_MAX = @as(c_int, 255);
pub const _POSIX_SYMLOOP_MAX = @as(c_int, 8);
pub const _POSIX_TRACE_EVENT_NAME_MAX = @as(c_int, 30);
pub const _POSIX_TRACE_NAME_MAX = @as(c_int, 8);
pub const _POSIX_TRACE_SYS_MAX = @as(c_int, 8);
pub const _POSIX_TRACE_USER_EVENT_MAX = @as(c_int, 32);
pub const _POSIX_TTY_NAME_MAX = @as(c_int, 9);
pub const _POSIX2_CHARCLASS_NAME_MAX = @as(c_int, 14);
pub const _POSIX2_COLL_WEIGHTS_MAX = @as(c_int, 2);
pub const _POSIX_RE_DUP_MAX = _POSIX2_RE_DUP_MAX;
pub const OFF_MIN = LLONG_MIN;
pub const OFF_MAX = LLONG_MAX;
pub const PASS_MAX = @as(c_int, 128);
pub const NL_ARGMAX = @as(c_int, 9);
pub const NL_LANGMAX = @as(c_int, 14);
pub const NL_MSGMAX = @as(c_int, 32767);
pub const NL_NMAX = @as(c_int, 1);
pub const NL_SETMAX = @as(c_int, 255);
pub const NL_TEXTMAX = @as(c_int, 2048);
pub const _XOPEN_IOV_MAX = @as(c_int, 16);
pub const IOV_MAX = @as(c_int, 1024);
pub const _XOPEN_NAME_MAX = @as(c_int, 255);
pub const _XOPEN_PATH_MAX = @as(c_int, 1024);
pub const LONG_LONG_MAX = __LONG_LONG_MAX__;
pub const LONG_LONG_MIN = -__LONG_LONG_MAX__ - @as(c_longlong, 1);
pub const ULONG_LONG_MAX = (__LONG_LONG_MAX__ * @as(c_ulonglong, 2)) + @as(c_ulonglong, 1);
pub const _LIBCPP_LOCALE_H = "";
pub const _LOCALE_H_ = "";
pub const __LOCALE_H_ = "";
pub const LC_ALL = @as(c_int, 0);
pub const LC_COLLATE = @as(c_int, 1);
pub const LC_CTYPE = @as(c_int, 2);
pub const LC_MONETARY = @as(c_int, 3);
pub const LC_NUMERIC = @as(c_int, 4);
pub const LC_TIME = @as(c_int, 5);
pub const LC_MESSAGES = @as(c_int, 6);
pub const _LC_LAST = @as(c_int, 7);
pub const _LIBCPP_MATH_H = "";
pub const __MATH_H__ = "";
pub const __MATH__ = "";
pub const HUGE_VALF = __builtin_huge_valf();
pub const NAN = __builtin_nanf("0x7fc00000");
pub const INFINITY = HUGE_VALF;
pub const FP_NAN = @as(c_int, 1);
pub const FP_INFINITE = @as(c_int, 2);
pub const FP_ZERO = @as(c_int, 3);
pub const FP_NORMAL = @as(c_int, 4);
pub const FP_SUBNORMAL = @as(c_int, 5);
pub const FP_SUPERNORMAL = @as(c_int, 6);
pub const FP_FAST_FMA = @as(c_int, 1);
pub const FP_FAST_FMAF = @as(c_int, 1);
pub const FP_FAST_FMAL = @as(c_int, 1);
pub const FP_ILOGB0 = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const FP_ILOGBNAN = -@import("std").zig.c_translation.promoteIntLiteral(c_int, 2147483647, .decimal) - @as(c_int, 1);
pub const MATH_ERRNO = @as(c_int, 1);
pub const MATH_ERREXCEPT = @as(c_int, 2);
pub const math_errhandling = __math_errhandling();
pub const M_E = 2.71828182845904523536028747135266250;
pub const M_LOG2E = 1.44269504088896340735992468100189214;
pub const M_LOG10E = 0.434294481903251827651128918916605082;
pub const M_LN2 = 0.693147180559945309417232121458176568;
pub const M_LN10 = 2.30258509299404568401799145468436421;
pub const M_PI = 3.14159265358979323846264338327950288;
pub const M_PI_2 = 1.57079632679489661923132169163975144;
pub const M_PI_4 = 0.785398163397448309615660845819875721;
pub const M_1_PI = 0.318309886183790671537767526745028724;
pub const M_2_PI = 0.636619772367581343075535053490057448;
pub const M_2_SQRTPI = 1.12837916709551257389615890312154517;
pub const M_SQRT2 = 1.41421356237309504880168872420969808;
pub const M_SQRT1_2 = 0.707106781186547524400844362104849039;
pub const MAXFLOAT = @as(f32, 0x1.fffffep+127);
pub const FP_SNAN = FP_NAN;
pub const FP_QNAN = FP_NAN;
pub const HUGE = MAXFLOAT;
pub const X_TLOSS = 1.41484755040568800000e+16;
pub const DOMAIN = @as(c_int, 1);
pub const SING = @as(c_int, 2);
pub const OVERFLOW = @as(c_int, 3);
pub const UNDERFLOW = @as(c_int, 4);
pub const TLOSS = @as(c_int, 5);
pub const PLOSS = @as(c_int, 6);
pub const _LIBCPP_SETJMP_H = "";
pub const _BSD_SETJMP_H = "";
pub const _JBLEN = ((@as(c_int, 14) + @as(c_int, 8)) + @as(c_int, 2)) * @as(c_int, 2);
pub const _USER_SIGNAL_H = "";
pub const _SYS_SIGNAL_H_ = "";
pub const __DARWIN_NSIG = @as(c_int, 32);
pub const NSIG = __DARWIN_NSIG;
pub const _BSD_MACHINE_SIGNAL_H_ = "";
pub const _ARM_SIGNAL_ = @as(c_int, 1);
pub const SIGHUP = @as(c_int, 1);
pub const SIGINT = @as(c_int, 2);
pub const SIGQUIT = @as(c_int, 3);
pub const SIGILL = @as(c_int, 4);
pub const SIGTRAP = @as(c_int, 5);
pub const SIGABRT = @as(c_int, 6);
pub const SIGIOT = SIGABRT;
pub const SIGEMT = @as(c_int, 7);
pub const SIGFPE = @as(c_int, 8);
pub const SIGKILL = @as(c_int, 9);
pub const SIGBUS = @as(c_int, 10);
pub const SIGSEGV = @as(c_int, 11);
pub const SIGSYS = @as(c_int, 12);
pub const SIGPIPE = @as(c_int, 13);
pub const SIGALRM = @as(c_int, 14);
pub const SIGTERM = @as(c_int, 15);
pub const SIGURG = @as(c_int, 16);
pub const SIGSTOP = @as(c_int, 17);
pub const SIGTSTP = @as(c_int, 18);
pub const SIGCONT = @as(c_int, 19);
pub const SIGCHLD = @as(c_int, 20);
pub const SIGTTIN = @as(c_int, 21);
pub const SIGTTOU = @as(c_int, 22);
pub const SIGIO = @as(c_int, 23);
pub const SIGXCPU = @as(c_int, 24);
pub const SIGXFSZ = @as(c_int, 25);
pub const SIGVTALRM = @as(c_int, 26);
pub const SIGPROF = @as(c_int, 27);
pub const SIGWINCH = @as(c_int, 28);
pub const SIGINFO = @as(c_int, 29);
pub const SIGUSR1 = @as(c_int, 30);
pub const SIGUSR2 = @as(c_int, 31);
pub const _BSD_MACHINE__MCONTEXT_H_ = "";
pub const __ARM_MCONTEXT_H_ = "";
pub const _MACH_MACHINE__STRUCTS_H_ = "";
pub const _MACH_ARM__STRUCTS_H_ = "";
pub const _STRUCT_ARM_EXCEPTION_STATE = struct___darwin_arm_exception_state;
pub const _STRUCT_ARM_EXCEPTION_STATE64 = struct___darwin_arm_exception_state64;
pub const _STRUCT_ARM_THREAD_STATE = struct___darwin_arm_thread_state;
pub const __DARWIN_OPAQUE_ARM_THREAD_STATE64 = @as(c_int, 0);
pub const _STRUCT_ARM_THREAD_STATE64 = struct___darwin_arm_thread_state64;
pub inline fn __darwin_arm_thread_state64_get_pc(ts: anytype) @TypeOf(ts.__pc) {
    return ts.__pc;
}
pub inline fn __darwin_arm_thread_state64_get_pc_fptr(ts: anytype) ?*anyopaque {
    return @import("std").zig.c_translation.cast(?*anyopaque, @import("std").zig.c_translation.cast(usize, ts.__pc));
}
pub inline fn __darwin_arm_thread_state64_get_lr(ts: anytype) @TypeOf(ts.__lr) {
    return ts.__lr;
}
pub inline fn __darwin_arm_thread_state64_get_lr_fptr(ts: anytype) ?*anyopaque {
    return @import("std").zig.c_translation.cast(?*anyopaque, @import("std").zig.c_translation.cast(usize, ts.__lr));
}
pub inline fn __darwin_arm_thread_state64_get_sp(ts: anytype) @TypeOf(ts.__sp) {
    return ts.__sp;
}
pub inline fn __darwin_arm_thread_state64_get_fp(ts: anytype) @TypeOf(ts.__fp) {
    return ts.__fp;
}
pub const __darwin_arm_thread_state64_ptrauth_strip = @import("std").zig.c_translation.Macros.DISCARD;
pub const _STRUCT_ARM_VFP_STATE = struct___darwin_arm_vfp_state;
pub const _STRUCT_ARM_NEON_STATE64 = struct___darwin_arm_neon_state64;
pub const _STRUCT_ARM_NEON_STATE = struct___darwin_arm_neon_state;
pub const _STRUCT_ARM_PAGEIN_STATE = struct___arm_pagein_state;
pub const _STRUCT_ARM_LEGACY_DEBUG_STATE = struct___arm_legacy_debug_state;
pub const _STRUCT_ARM_DEBUG_STATE32 = struct___darwin_arm_debug_state32;
pub const _STRUCT_ARM_DEBUG_STATE64 = struct___darwin_arm_debug_state64;
pub const _STRUCT_ARM_CPMU_STATE64 = struct___darwin_arm_cpmu_state64;
pub const _STRUCT_MCONTEXT32 = struct___darwin_mcontext32;
pub const _STRUCT_MCONTEXT64 = struct___darwin_mcontext64;
pub const _MCONTEXT_T = "";
pub const _STRUCT_MCONTEXT = _STRUCT_MCONTEXT64;
pub const _STRUCT_SIGALTSTACK = struct___darwin_sigaltstack;
pub const _STRUCT_UCONTEXT = struct___darwin_ucontext;
pub const _SIGSET_T = "";
pub const SIGEV_NONE = @as(c_int, 0);
pub const SIGEV_SIGNAL = @as(c_int, 1);
pub const SIGEV_THREAD = @as(c_int, 3);
pub const ILL_NOOP = @as(c_int, 0);
pub const ILL_ILLOPC = @as(c_int, 1);
pub const ILL_ILLTRP = @as(c_int, 2);
pub const ILL_PRVOPC = @as(c_int, 3);
pub const ILL_ILLOPN = @as(c_int, 4);
pub const ILL_ILLADR = @as(c_int, 5);
pub const ILL_PRVREG = @as(c_int, 6);
pub const ILL_COPROC = @as(c_int, 7);
pub const ILL_BADSTK = @as(c_int, 8);
pub const FPE_NOOP = @as(c_int, 0);
pub const FPE_FLTDIV = @as(c_int, 1);
pub const FPE_FLTOVF = @as(c_int, 2);
pub const FPE_FLTUND = @as(c_int, 3);
pub const FPE_FLTRES = @as(c_int, 4);
pub const FPE_FLTINV = @as(c_int, 5);
pub const FPE_FLTSUB = @as(c_int, 6);
pub const FPE_INTDIV = @as(c_int, 7);
pub const FPE_INTOVF = @as(c_int, 8);
pub const SEGV_NOOP = @as(c_int, 0);
pub const SEGV_MAPERR = @as(c_int, 1);
pub const SEGV_ACCERR = @as(c_int, 2);
pub const BUS_NOOP = @as(c_int, 0);
pub const BUS_ADRALN = @as(c_int, 1);
pub const BUS_ADRERR = @as(c_int, 2);
pub const BUS_OBJERR = @as(c_int, 3);
pub const TRAP_BRKPT = @as(c_int, 1);
pub const TRAP_TRACE = @as(c_int, 2);
pub const CLD_NOOP = @as(c_int, 0);
pub const CLD_EXITED = @as(c_int, 1);
pub const CLD_KILLED = @as(c_int, 2);
pub const CLD_DUMPED = @as(c_int, 3);
pub const CLD_TRAPPED = @as(c_int, 4);
pub const CLD_STOPPED = @as(c_int, 5);
pub const CLD_CONTINUED = @as(c_int, 6);
pub const POLL_IN = @as(c_int, 1);
pub const POLL_OUT = @as(c_int, 2);
pub const POLL_MSG = @as(c_int, 3);
pub const POLL_ERR = @as(c_int, 4);
pub const POLL_PRI = @as(c_int, 5);
pub const POLL_HUP = @as(c_int, 6);
pub const sa_handler = __sigaction_u.__sa_handler;
pub const sa_sigaction = __sigaction_u.__sa_sigaction;
pub const SA_ONSTACK = @as(c_int, 0x0001);
pub const SA_RESTART = @as(c_int, 0x0002);
pub const SA_RESETHAND = @as(c_int, 0x0004);
pub const SA_NOCLDSTOP = @as(c_int, 0x0008);
pub const SA_NODEFER = @as(c_int, 0x0010);
pub const SA_NOCLDWAIT = @as(c_int, 0x0020);
pub const SA_SIGINFO = @as(c_int, 0x0040);
pub const SA_USERTRAMP = @as(c_int, 0x0100);
pub const SA_64REGSET = @as(c_int, 0x0200);
pub const SA_USERSPACE_MASK = (((((SA_ONSTACK | SA_RESTART) | SA_RESETHAND) | SA_NOCLDSTOP) | SA_NODEFER) | SA_NOCLDWAIT) | SA_SIGINFO;
pub const SIG_BLOCK = @as(c_int, 1);
pub const SIG_UNBLOCK = @as(c_int, 2);
pub const SIG_SETMASK = @as(c_int, 3);
pub const SI_USER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10001, .hexadecimal);
pub const SI_QUEUE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10002, .hexadecimal);
pub const SI_TIMER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10003, .hexadecimal);
pub const SI_ASYNCIO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004, .hexadecimal);
pub const SI_MESGQ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10005, .hexadecimal);
pub const SS_ONSTACK = @as(c_int, 0x0001);
pub const SS_DISABLE = @as(c_int, 0x0004);
pub const MINSIGSTKSZ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 32768, .decimal);
pub const SIGSTKSZ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 131072, .decimal);
pub const SV_ONSTACK = SA_ONSTACK;
pub const SV_INTERRUPT = SA_RESTART;
pub const SV_RESETHAND = SA_RESETHAND;
pub const SV_NODEFER = SA_NODEFER;
pub const SV_NOCLDSTOP = SA_NOCLDSTOP;
pub const SV_SIGINFO = SA_SIGINFO;
pub inline fn sigmask(m: anytype) @TypeOf(@as(c_int, 1) << (m - @as(c_int, 1))) {
    return @as(c_int, 1) << (m - @as(c_int, 1));
}
pub const BADSIG = SIG_ERR;
pub const _LIBCPP_STDIO_H = "";
pub const _STDIO_H_ = "";
pub const __STDIO_H_ = "";
pub const _VA_LIST_T = "";
pub const _SYS_STDIO_H_ = "";
pub const RENAME_SECLUDE = @as(c_int, 0x00000001);
pub const RENAME_SWAP = @as(c_int, 0x00000002);
pub const RENAME_EXCL = @as(c_int, 0x00000004);
pub const _FSTDIO = "";
pub const __SLBF = @as(c_int, 0x0001);
pub const __SNBF = @as(c_int, 0x0002);
pub const __SRD = @as(c_int, 0x0004);
pub const __SWR = @as(c_int, 0x0008);
pub const __SRW = @as(c_int, 0x0010);
pub const __SEOF = @as(c_int, 0x0020);
pub const __SERR = @as(c_int, 0x0040);
pub const __SMBF = @as(c_int, 0x0080);
pub const __SAPP = @as(c_int, 0x0100);
pub const __SSTR = @as(c_int, 0x0200);
pub const __SOPT = @as(c_int, 0x0400);
pub const __SNPT = @as(c_int, 0x0800);
pub const __SOFF = @as(c_int, 0x1000);
pub const __SMOD = @as(c_int, 0x2000);
pub const __SALC = @as(c_int, 0x4000);
pub const __SIGN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hexadecimal);
pub const _IOFBF = @as(c_int, 0);
pub const _IOLBF = @as(c_int, 1);
pub const _IONBF = @as(c_int, 2);
pub const BUFSIZ = @as(c_int, 1024);
pub const EOF = -@as(c_int, 1);
pub const FOPEN_MAX = @as(c_int, 20);
pub const FILENAME_MAX = @as(c_int, 1024);
pub const P_tmpdir = "/var/tmp/";
pub const L_tmpnam = @as(c_int, 1024);
pub const TMP_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 308915776, .decimal);
pub const SEEK_SET = @as(c_int, 0);
pub const SEEK_CUR = @as(c_int, 1);
pub const SEEK_END = @as(c_int, 2);
pub const stdin = __stdinp;
pub const stdout = __stdoutp;
pub const stderr = __stderrp;
pub const L_ctermid = @as(c_int, 1024);
pub const _CTERMID_H_ = "";
pub inline fn __sfeof(p: anytype) @TypeOf((p.*._flags & __SEOF) != @as(c_int, 0)) {
    return (p.*._flags & __SEOF) != @as(c_int, 0);
}
pub inline fn __sferror(p: anytype) @TypeOf((p.*._flags & __SERR) != @as(c_int, 0)) {
    return (p.*._flags & __SERR) != @as(c_int, 0);
}
pub inline fn __sfileno(p: anytype) @TypeOf(p.*._file) {
    return p.*._file;
}
pub inline fn fropen(cookie: anytype, @"fn": anytype) @TypeOf(funopen(cookie, @"fn", @as(c_int, 0), @as(c_int, 0), @as(c_int, 0))) {
    return funopen(cookie, @"fn", @as(c_int, 0), @as(c_int, 0), @as(c_int, 0));
}
pub inline fn fwopen(cookie: anytype, @"fn": anytype) @TypeOf(funopen(cookie, @as(c_int, 0), @"fn", @as(c_int, 0), @as(c_int, 0))) {
    return funopen(cookie, @as(c_int, 0), @"fn", @as(c_int, 0), @as(c_int, 0));
}
pub inline fn feof_unlocked(p: anytype) @TypeOf(__sfeof(p)) {
    return __sfeof(p);
}
pub inline fn ferror_unlocked(p: anytype) @TypeOf(__sferror(p)) {
    return __sferror(p);
}
pub inline fn clearerr_unlocked(p: anytype) @TypeOf(__sclearerr(p)) {
    return __sclearerr(p);
}
pub inline fn fileno_unlocked(p: anytype) @TypeOf(__sfileno(p)) {
    return __sfileno(p);
}
pub const _SECURE__STDIO_H_ = "";
pub const _SECURE__COMMON_H_ = "";
pub const _USE_FORTIFY_LEVEL = @as(c_int, 2);
pub inline fn __darwin_obsz0(object: anytype) @TypeOf(__builtin_object_size(object, @as(c_int, 0))) {
    return __builtin_object_size(object, @as(c_int, 0));
}
pub inline fn __darwin_obsz(object: anytype) @TypeOf(__builtin_object_size(object, if (_USE_FORTIFY_LEVEL > @as(c_int, 1)) @as(c_int, 1) else @as(c_int, 0))) {
    return __builtin_object_size(object, if (_USE_FORTIFY_LEVEL > @as(c_int, 1)) @as(c_int, 1) else @as(c_int, 0));
}
pub const _LIBCPP_STDLIB_H = "";
pub const _STDLIB_H_ = "";
pub const _SYS_WAIT_H_ = "";
pub const _SYS_RESOURCE_H_ = "";
pub const _STRUCT_TIMEVAL = struct_timeval;
pub const PRIO_PROCESS = @as(c_int, 0);
pub const PRIO_PGRP = @as(c_int, 1);
pub const PRIO_USER = @as(c_int, 2);
pub const PRIO_DARWIN_THREAD = @as(c_int, 3);
pub const PRIO_DARWIN_PROCESS = @as(c_int, 4);
pub const PRIO_MIN = -@as(c_int, 20);
pub const PRIO_MAX = @as(c_int, 20);
pub const PRIO_DARWIN_BG = @as(c_int, 0x1000);
pub const PRIO_DARWIN_NONUI = @as(c_int, 0x1001);
pub const RUSAGE_SELF = @as(c_int, 0);
pub const RUSAGE_CHILDREN = -@as(c_int, 1);
pub const RUSAGE_INFO_V0 = @as(c_int, 0);
pub const RUSAGE_INFO_V1 = @as(c_int, 1);
pub const RUSAGE_INFO_V2 = @as(c_int, 2);
pub const RUSAGE_INFO_V3 = @as(c_int, 3);
pub const RUSAGE_INFO_V4 = @as(c_int, 4);
pub const RUSAGE_INFO_V5 = @as(c_int, 5);
pub const RUSAGE_INFO_CURRENT = RUSAGE_INFO_V5;
pub const RU_PROC_RUNS_RESLIDE = @as(c_int, 0x00000001);
pub const RLIM_INFINITY = (@import("std").zig.c_translation.cast(__uint64_t, @as(c_int, 1)) << @as(c_int, 63)) - @as(c_int, 1);
pub const RLIM_SAVED_MAX = RLIM_INFINITY;
pub const RLIM_SAVED_CUR = RLIM_INFINITY;
pub const RLIMIT_CPU = @as(c_int, 0);
pub const RLIMIT_FSIZE = @as(c_int, 1);
pub const RLIMIT_DATA = @as(c_int, 2);
pub const RLIMIT_STACK = @as(c_int, 3);
pub const RLIMIT_CORE = @as(c_int, 4);
pub const RLIMIT_AS = @as(c_int, 5);
pub const RLIMIT_RSS = RLIMIT_AS;
pub const RLIMIT_MEMLOCK = @as(c_int, 6);
pub const RLIMIT_NPROC = @as(c_int, 7);
pub const RLIMIT_NOFILE = @as(c_int, 8);
pub const RLIM_NLIMITS = @as(c_int, 9);
pub const _RLIMIT_POSIX_FLAG = @as(c_int, 0x1000);
pub const RLIMIT_WAKEUPS_MONITOR = @as(c_int, 0x1);
pub const RLIMIT_CPU_USAGE_MONITOR = @as(c_int, 0x2);
pub const RLIMIT_THREAD_CPULIMITS = @as(c_int, 0x3);
pub const RLIMIT_FOOTPRINT_INTERVAL = @as(c_int, 0x4);
pub const WAKEMON_ENABLE = @as(c_int, 0x01);
pub const WAKEMON_DISABLE = @as(c_int, 0x02);
pub const WAKEMON_GET_PARAMS = @as(c_int, 0x04);
pub const WAKEMON_SET_DEFAULTS = @as(c_int, 0x08);
pub const WAKEMON_MAKE_FATAL = @as(c_int, 0x10);
pub const CPUMON_MAKE_FATAL = @as(c_int, 0x1000);
pub const FOOTPRINT_INTERVAL_RESET = @as(c_int, 0x1);
pub const IOPOL_TYPE_DISK = @as(c_int, 0);
pub const IOPOL_TYPE_VFS_ATIME_UPDATES = @as(c_int, 2);
pub const IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = @as(c_int, 3);
pub const IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = @as(c_int, 4);
pub const IOPOL_TYPE_VFS_TRIGGER_RESOLVE = @as(c_int, 5);
pub const IOPOL_TYPE_VFS_IGNORE_CONTENT_PROTECTION = @as(c_int, 6);
pub const IOPOL_TYPE_VFS_IGNORE_PERMISSIONS = @as(c_int, 7);
pub const IOPOL_TYPE_VFS_SKIP_MTIME_UPDATE = @as(c_int, 8);
pub const IOPOL_TYPE_VFS_ALLOW_LOW_SPACE_WRITES = @as(c_int, 9);
pub const IOPOL_SCOPE_PROCESS = @as(c_int, 0);
pub const IOPOL_SCOPE_THREAD = @as(c_int, 1);
pub const IOPOL_SCOPE_DARWIN_BG = @as(c_int, 2);
pub const IOPOL_DEFAULT = @as(c_int, 0);
pub const IOPOL_IMPORTANT = @as(c_int, 1);
pub const IOPOL_PASSIVE = @as(c_int, 2);
pub const IOPOL_THROTTLE = @as(c_int, 3);
pub const IOPOL_UTILITY = @as(c_int, 4);
pub const IOPOL_STANDARD = @as(c_int, 5);
pub const IOPOL_APPLICATION = IOPOL_STANDARD;
pub const IOPOL_NORMAL = IOPOL_IMPORTANT;
pub const IOPOL_ATIME_UPDATES_DEFAULT = @as(c_int, 0);
pub const IOPOL_ATIME_UPDATES_OFF = @as(c_int, 1);
pub const IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = @as(c_int, 0);
pub const IOPOL_MATERIALIZE_DATALESS_FILES_OFF = @as(c_int, 1);
pub const IOPOL_MATERIALIZE_DATALESS_FILES_ON = @as(c_int, 2);
pub const IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = @as(c_int, 0);
pub const IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = @as(c_int, 1);
pub const IOPOL_VFS_TRIGGER_RESOLVE_DEFAULT = @as(c_int, 0);
pub const IOPOL_VFS_TRIGGER_RESOLVE_OFF = @as(c_int, 1);
pub const IOPOL_VFS_CONTENT_PROTECTION_DEFAULT = @as(c_int, 0);
pub const IOPOL_VFS_CONTENT_PROTECTION_IGNORE = @as(c_int, 1);
pub const IOPOL_VFS_IGNORE_PERMISSIONS_OFF = @as(c_int, 0);
pub const IOPOL_VFS_IGNORE_PERMISSIONS_ON = @as(c_int, 1);
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_OFF = @as(c_int, 0);
pub const IOPOL_VFS_SKIP_MTIME_UPDATE_ON = @as(c_int, 1);
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_OFF = @as(c_int, 0);
pub const IOPOL_VFS_ALLOW_LOW_SPACE_WRITES_ON = @as(c_int, 1);
pub const WNOHANG = @as(c_int, 0x00000001);
pub const WUNTRACED = @as(c_int, 0x00000002);
pub inline fn _W_INT(w: anytype) @TypeOf(@import("std").zig.c_translation.cast([*c]c_int, &w).*) {
    return @import("std").zig.c_translation.cast([*c]c_int, &w).*;
}
pub const WCOREFLAG = @as(c_int, 0o200);
pub inline fn _WSTATUS(x: anytype) @TypeOf(_W_INT(x) & @as(c_int, 0o177)) {
    return _W_INT(x) & @as(c_int, 0o177);
}
pub const _WSTOPPED = @as(c_int, 0o177);
pub inline fn WEXITSTATUS(x: anytype) @TypeOf((_W_INT(x) >> @as(c_int, 8)) & @as(c_int, 0x000000ff)) {
    return (_W_INT(x) >> @as(c_int, 8)) & @as(c_int, 0x000000ff);
}
pub inline fn WSTOPSIG(x: anytype) @TypeOf(_W_INT(x) >> @as(c_int, 8)) {
    return _W_INT(x) >> @as(c_int, 8);
}
pub inline fn WIFCONTINUED(x: anytype) @TypeOf((_WSTATUS(x) == _WSTOPPED) and (WSTOPSIG(x) == @as(c_int, 0x13))) {
    return (_WSTATUS(x) == _WSTOPPED) and (WSTOPSIG(x) == @as(c_int, 0x13));
}
pub inline fn WIFSTOPPED(x: anytype) @TypeOf((_WSTATUS(x) == _WSTOPPED) and (WSTOPSIG(x) != @as(c_int, 0x13))) {
    return (_WSTATUS(x) == _WSTOPPED) and (WSTOPSIG(x) != @as(c_int, 0x13));
}
pub inline fn WIFEXITED(x: anytype) @TypeOf(_WSTATUS(x) == @as(c_int, 0)) {
    return _WSTATUS(x) == @as(c_int, 0);
}
pub inline fn WIFSIGNALED(x: anytype) @TypeOf((_WSTATUS(x) != _WSTOPPED) and (_WSTATUS(x) != @as(c_int, 0))) {
    return (_WSTATUS(x) != _WSTOPPED) and (_WSTATUS(x) != @as(c_int, 0));
}
pub inline fn WTERMSIG(x: anytype) @TypeOf(_WSTATUS(x)) {
    return _WSTATUS(x);
}
pub inline fn WCOREDUMP(x: anytype) @TypeOf(_W_INT(x) & WCOREFLAG) {
    return _W_INT(x) & WCOREFLAG;
}
pub inline fn W_EXITCODE(ret: anytype, sig: anytype) @TypeOf((ret << @as(c_int, 8)) | sig) {
    return (ret << @as(c_int, 8)) | sig;
}
pub inline fn W_STOPCODE(sig: anytype) @TypeOf((sig << @as(c_int, 8)) | _WSTOPPED) {
    return (sig << @as(c_int, 8)) | _WSTOPPED;
}
pub const WEXITED = @as(c_int, 0x00000004);
pub const WSTOPPED = @as(c_int, 0x00000008);
pub const WCONTINUED = @as(c_int, 0x00000010);
pub const WNOWAIT = @as(c_int, 0x00000020);
pub const WAIT_ANY = -@as(c_int, 1);
pub const WAIT_MYPGRP = @as(c_int, 0);
pub const _ALLOCA_H_ = "";
pub const EXIT_FAILURE = @as(c_int, 1);
pub const EXIT_SUCCESS = @as(c_int, 0);
pub const RAND_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x7fffffff, .hexadecimal);
pub const MB_CUR_MAX = __mb_cur_max;
pub const _MALLOC_UNDERSCORE_MALLOC_H_ = "";
pub const _LIBCPP_STRING_H = "";
pub const _STRING_H_ = "";
pub const _STRINGS_H_ = "";
pub const _SECURE__STRINGS_H_ = "";
pub const _SECURE__STRING_H_ = "";
pub const __HAS_FIXED_CHK_PROTOTYPES = @as(c_int, 1);
pub const _TIME_H_ = "";
pub const _STRUCT_TIMESPEC = struct_timespec;
pub const CLOCKS_PER_SEC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal);
pub const CLOCK_REALTIME = _CLOCK_REALTIME;
pub const CLOCK_MONOTONIC = _CLOCK_MONOTONIC;
pub const CLOCK_MONOTONIC_RAW = _CLOCK_MONOTONIC_RAW;
pub const CLOCK_MONOTONIC_RAW_APPROX = _CLOCK_MONOTONIC_RAW_APPROX;
pub const CLOCK_UPTIME_RAW = _CLOCK_UPTIME_RAW;
pub const CLOCK_UPTIME_RAW_APPROX = _CLOCK_UPTIME_RAW_APPROX;
pub const CLOCK_PROCESS_CPUTIME_ID = _CLOCK_PROCESS_CPUTIME_ID;
pub const CLOCK_THREAD_CPUTIME_ID = _CLOCK_THREAD_CPUTIME_ID;
pub const TIME_UTC = @as(c_int, 1);
pub const _LIBCPP_INTTYPES_H = "";
pub const __CLANG_INTTYPES_H = "";
pub const _INTTYPES_H_ = "";
pub const __PRI_8_LENGTH_MODIFIER__ = "hh";
pub const __PRI_64_LENGTH_MODIFIER__ = "ll";
pub const __SCN_64_LENGTH_MODIFIER__ = "ll";
pub const __PRI_MAX_LENGTH_MODIFIER__ = "j";
pub const __SCN_MAX_LENGTH_MODIFIER__ = "j";
pub const PRId8 = __PRI_8_LENGTH_MODIFIER__ ++ "d";
pub const PRIi8 = __PRI_8_LENGTH_MODIFIER__ ++ "i";
pub const PRIo8 = __PRI_8_LENGTH_MODIFIER__ ++ "o";
pub const PRIu8 = __PRI_8_LENGTH_MODIFIER__ ++ "u";
pub const PRIx8 = __PRI_8_LENGTH_MODIFIER__ ++ "x";
pub const PRIX8 = __PRI_8_LENGTH_MODIFIER__ ++ "X";
pub const PRId16 = "hd";
pub const PRIi16 = "hi";
pub const PRIo16 = "ho";
pub const PRIu16 = "hu";
pub const PRIx16 = "hx";
pub const PRIX16 = "hX";
pub const PRId32 = "d";
pub const PRIi32 = "i";
pub const PRIo32 = "o";
pub const PRIu32 = "u";
pub const PRIx32 = "x";
pub const PRIX32 = "X";
pub const PRId64 = __PRI_64_LENGTH_MODIFIER__ ++ "d";
pub const PRIi64 = __PRI_64_LENGTH_MODIFIER__ ++ "i";
pub const PRIo64 = __PRI_64_LENGTH_MODIFIER__ ++ "o";
pub const PRIu64 = __PRI_64_LENGTH_MODIFIER__ ++ "u";
pub const PRIx64 = __PRI_64_LENGTH_MODIFIER__ ++ "x";
pub const PRIX64 = __PRI_64_LENGTH_MODIFIER__ ++ "X";
pub const PRIdLEAST8 = PRId8;
pub const PRIiLEAST8 = PRIi8;
pub const PRIoLEAST8 = PRIo8;
pub const PRIuLEAST8 = PRIu8;
pub const PRIxLEAST8 = PRIx8;
pub const PRIXLEAST8 = PRIX8;
pub const PRIdLEAST16 = PRId16;
pub const PRIiLEAST16 = PRIi16;
pub const PRIoLEAST16 = PRIo16;
pub const PRIuLEAST16 = PRIu16;
pub const PRIxLEAST16 = PRIx16;
pub const PRIXLEAST16 = PRIX16;
pub const PRIdLEAST32 = PRId32;
pub const PRIiLEAST32 = PRIi32;
pub const PRIoLEAST32 = PRIo32;
pub const PRIuLEAST32 = PRIu32;
pub const PRIxLEAST32 = PRIx32;
pub const PRIXLEAST32 = PRIX32;
pub const PRIdLEAST64 = PRId64;
pub const PRIiLEAST64 = PRIi64;
pub const PRIoLEAST64 = PRIo64;
pub const PRIuLEAST64 = PRIu64;
pub const PRIxLEAST64 = PRIx64;
pub const PRIXLEAST64 = PRIX64;
pub const PRIdFAST8 = PRId8;
pub const PRIiFAST8 = PRIi8;
pub const PRIoFAST8 = PRIo8;
pub const PRIuFAST8 = PRIu8;
pub const PRIxFAST8 = PRIx8;
pub const PRIXFAST8 = PRIX8;
pub const PRIdFAST16 = PRId16;
pub const PRIiFAST16 = PRIi16;
pub const PRIoFAST16 = PRIo16;
pub const PRIuFAST16 = PRIu16;
pub const PRIxFAST16 = PRIx16;
pub const PRIXFAST16 = PRIX16;
pub const PRIdFAST32 = PRId32;
pub const PRIiFAST32 = PRIi32;
pub const PRIoFAST32 = PRIo32;
pub const PRIuFAST32 = PRIu32;
pub const PRIxFAST32 = PRIx32;
pub const PRIXFAST32 = PRIX32;
pub const PRIdFAST64 = PRId64;
pub const PRIiFAST64 = PRIi64;
pub const PRIoFAST64 = PRIo64;
pub const PRIuFAST64 = PRIu64;
pub const PRIxFAST64 = PRIx64;
pub const PRIXFAST64 = PRIX64;
pub const PRIdPTR = "ld";
pub const PRIiPTR = "li";
pub const PRIoPTR = "lo";
pub const PRIuPTR = "lu";
pub const PRIxPTR = "lx";
pub const PRIXPTR = "lX";
pub const PRIdMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "d";
pub const PRIiMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "i";
pub const PRIoMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "o";
pub const PRIuMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "u";
pub const PRIxMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "x";
pub const PRIXMAX = __PRI_MAX_LENGTH_MODIFIER__ ++ "X";
pub const SCNd8 = __PRI_8_LENGTH_MODIFIER__ ++ "d";
pub const SCNi8 = __PRI_8_LENGTH_MODIFIER__ ++ "i";
pub const SCNo8 = __PRI_8_LENGTH_MODIFIER__ ++ "o";
pub const SCNu8 = __PRI_8_LENGTH_MODIFIER__ ++ "u";
pub const SCNx8 = __PRI_8_LENGTH_MODIFIER__ ++ "x";
pub const SCNd16 = "hd";
pub const SCNi16 = "hi";
pub const SCNo16 = "ho";
pub const SCNu16 = "hu";
pub const SCNx16 = "hx";
pub const SCNd32 = "d";
pub const SCNi32 = "i";
pub const SCNo32 = "o";
pub const SCNu32 = "u";
pub const SCNx32 = "x";
pub const SCNd64 = __SCN_64_LENGTH_MODIFIER__ ++ "d";
pub const SCNi64 = __SCN_64_LENGTH_MODIFIER__ ++ "i";
pub const SCNo64 = __SCN_64_LENGTH_MODIFIER__ ++ "o";
pub const SCNu64 = __SCN_64_LENGTH_MODIFIER__ ++ "u";
pub const SCNx64 = __SCN_64_LENGTH_MODIFIER__ ++ "x";
pub const SCNdLEAST8 = SCNd8;
pub const SCNiLEAST8 = SCNi8;
pub const SCNoLEAST8 = SCNo8;
pub const SCNuLEAST8 = SCNu8;
pub const SCNxLEAST8 = SCNx8;
pub const SCNdLEAST16 = SCNd16;
pub const SCNiLEAST16 = SCNi16;
pub const SCNoLEAST16 = SCNo16;
pub const SCNuLEAST16 = SCNu16;
pub const SCNxLEAST16 = SCNx16;
pub const SCNdLEAST32 = SCNd32;
pub const SCNiLEAST32 = SCNi32;
pub const SCNoLEAST32 = SCNo32;
pub const SCNuLEAST32 = SCNu32;
pub const SCNxLEAST32 = SCNx32;
pub const SCNdLEAST64 = SCNd64;
pub const SCNiLEAST64 = SCNi64;
pub const SCNoLEAST64 = SCNo64;
pub const SCNuLEAST64 = SCNu64;
pub const SCNxLEAST64 = SCNx64;
pub const SCNdFAST8 = SCNd8;
pub const SCNiFAST8 = SCNi8;
pub const SCNoFAST8 = SCNo8;
pub const SCNuFAST8 = SCNu8;
pub const SCNxFAST8 = SCNx8;
pub const SCNdFAST16 = SCNd16;
pub const SCNiFAST16 = SCNi16;
pub const SCNoFAST16 = SCNo16;
pub const SCNuFAST16 = SCNu16;
pub const SCNxFAST16 = SCNx16;
pub const SCNdFAST32 = SCNd32;
pub const SCNiFAST32 = SCNi32;
pub const SCNoFAST32 = SCNo32;
pub const SCNuFAST32 = SCNu32;
pub const SCNxFAST32 = SCNx32;
pub const SCNdFAST64 = SCNd64;
pub const SCNiFAST64 = SCNi64;
pub const SCNoFAST64 = SCNo64;
pub const SCNuFAST64 = SCNu64;
pub const SCNxFAST64 = SCNx64;
pub const SCNdPTR = "ld";
pub const SCNiPTR = "li";
pub const SCNoPTR = "lo";
pub const SCNuPTR = "lu";
pub const SCNxPTR = "lx";
pub const SCNdMAX = __SCN_MAX_LENGTH_MODIFIER__ ++ "d";
pub const SCNiMAX = __SCN_MAX_LENGTH_MODIFIER__ ++ "i";
pub const SCNoMAX = __SCN_MAX_LENGTH_MODIFIER__ ++ "o";
pub const SCNuMAX = __SCN_MAX_LENGTH_MODIFIER__ ++ "u";
pub const SCNxMAX = __SCN_MAX_LENGTH_MODIFIER__ ++ "x";
pub const _LIBCPP_STDBOOL_H = "";
pub const __STDBOOL_H = "";
pub const @"bool" = bool;
pub const @"true" = @as(c_int, 1);
pub const @"false" = @as(c_int, 0);
pub const __bool_true_false_are_defined = @as(c_int, 1);
pub const __COREFOUNDATION_CFBASE__ = @as(c_int, 1);
pub const __TARGETCONDITIONALS__ = "";
pub const DYNAMIC_TARGETS_ENABLED = @as(c_int, 0);
pub const TARGET_OS_MAC = @as(c_int, 1);
pub const TARGET_OS_WIN32 = @as(c_int, 0);
pub const TARGET_OS_WINDOWS = @as(c_int, 0);
pub const TARGET_OS_UNIX = @as(c_int, 0);
pub const TARGET_OS_LINUX = @as(c_int, 0);
pub const TARGET_OS_OSX = @as(c_int, 1);
pub const TARGET_OS_IPHONE = @as(c_int, 0);
pub const TARGET_OS_IOS = @as(c_int, 0);
pub const TARGET_OS_WATCH = @as(c_int, 0);
pub const TARGET_OS_TV = @as(c_int, 0);
pub const TARGET_OS_MACCATALYST = @as(c_int, 0);
pub const TARGET_OS_UIKITFORMAC = @as(c_int, 0);
pub const TARGET_OS_SIMULATOR = @as(c_int, 0);
pub const TARGET_OS_EMBEDDED = @as(c_int, 0);
pub const TARGET_OS_RTKIT = @as(c_int, 0);
pub const TARGET_OS_DRIVERKIT = @as(c_int, 0);
pub const TARGET_IPHONE_SIMULATOR = TARGET_OS_SIMULATOR;
pub const TARGET_OS_NANO = TARGET_OS_WATCH;
pub const TARGET_ABI_USES_IOS_VALUES = !(TARGET_CPU_X86_64 != 0) or ((TARGET_OS_IPHONE != 0) and !(TARGET_OS_MACCATALYST != 0));
pub const TARGET_CPU_PPC = @as(c_int, 0);
pub const TARGET_CPU_PPC64 = @as(c_int, 0);
pub const TARGET_CPU_68K = @as(c_int, 0);
pub const TARGET_CPU_X86 = @as(c_int, 0);
pub const TARGET_CPU_X86_64 = @as(c_int, 0);
pub const TARGET_CPU_ARM = @as(c_int, 0);
pub const TARGET_CPU_ARM64 = @as(c_int, 1);
pub const TARGET_CPU_MIPS = @as(c_int, 0);
pub const TARGET_CPU_SPARC = @as(c_int, 0);
pub const TARGET_CPU_ALPHA = @as(c_int, 0);
pub const TARGET_RT_MAC_CFM = @as(c_int, 0);
pub const TARGET_RT_MAC_MACHO = @as(c_int, 1);
pub const TARGET_RT_LITTLE_ENDIAN = @as(c_int, 1);
pub const TARGET_RT_BIG_ENDIAN = @as(c_int, 0);
pub const TARGET_RT_64_BIT = @as(c_int, 1);
pub const __COREFOUNDATION_CFAVAILABILITY__ = @as(c_int, 1);
pub const __AVAILABILITYMACROS__ = "";
pub const MAC_OS_VERSION_11_1 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110100, .decimal);
pub const MAC_OS_VERSION_11_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 110300, .decimal);
pub const MAC_OS_X_VERSION_MIN_REQUIRED = __ENVIRONMENT_MAC_OS_X_VERSION_MIN_REQUIRED__;
pub const MAC_OS_X_VERSION_MAX_ALLOWED = MAC_OS_X_VERSION_MIN_REQUIRED;
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER = "";
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED = DEPRECATED_ATTRIBUTE;
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_0_AND_LATER = DEPRECATED_ATTRIBUTE;
pub const __AVAILABILITY_MACROS_USES_AVAILABILITY = @as(c_int, 1);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_1, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_2, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_3, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_4, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_5, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_5 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_6, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_6 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_7, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_7 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_13 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_13, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_8, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_8 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_9, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_9 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_10, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_10_2, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_10_3, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_10_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_11, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_11_2, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_11_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_11_3, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_3 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_11_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_11_4, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_11_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_11_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_12, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_1_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_12_1, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_1_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_1, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_1 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_12_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_2_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_12_2, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_2_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_2, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_2 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_1, __MAC_10_12_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_4_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_12_4, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_4_AND_LATER_BUT_DEPRECATED = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_4, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_0_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_1, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_2, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_3, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_4, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_5_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_5, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_6_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_6, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_7_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_7, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_8_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_8, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_9_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_9, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_2, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_10_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_10_3, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_2, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_3_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_3, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_11_4_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_11_4, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_1_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_1, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_12_2_AND_LATER_BUT_DEPRECATED_IN_MAC_OS_X_VERSION_10_12_4 = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_12_2, __MAC_10_12_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_13_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_13, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_14_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_14, __IPHONE_COMPAT_VERSION);
pub const AVAILABLE_MAC_OS_X_VERSION_10_15_AND_LATER = __OSX_AVAILABLE_STARTING(__MAC_10_15, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_1_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_1, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_2_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_2, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_3_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_3, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_4_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_5_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_5, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_6_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_6, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_7_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_7, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_8_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_8, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_9_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_9, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_10_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_10, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_11_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_11, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_12_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_12, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_13_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_13, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub const DEPRECATED_IN_MAC_OS_X_VERSION_10_14_4_AND_LATER = __OSX_AVAILABLE_BUT_DEPRECATED(__MAC_10_0, __MAC_10_14_4, __IPHONE_COMPAT_VERSION, __IPHONE_COMPAT_VERSION);
pub inline fn CF_AVAILABLE_IPHONE(_ios: anytype) @TypeOf(CF_AVAILABLE_IOS(_ios)) {
    return CF_AVAILABLE_IOS(_ios);
}
pub inline fn CF_DEPRECATED_IPHONE(_iosIntro: anytype, _iosDep: anytype) @TypeOf(CF_DEPRECATED_IOS(_iosIntro, _iosDep)) {
    return CF_DEPRECATED_IOS(_iosIntro, _iosDep);
}
pub inline fn CF_ENUM_AVAILABLE(_mac: anytype, _ios: anytype) @TypeOf(CF_AVAILABLE(_mac, _ios)) {
    return CF_AVAILABLE(_mac, _ios);
}
pub inline fn CF_ENUM_AVAILABLE_MAC(_mac: anytype) @TypeOf(CF_AVAILABLE_MAC(_mac)) {
    return CF_AVAILABLE_MAC(_mac);
}
pub inline fn CF_ENUM_AVAILABLE_IOS(_ios: anytype) @TypeOf(CF_AVAILABLE_IOS(_ios)) {
    return CF_AVAILABLE_IOS(_ios);
}
pub const CF_STRING_ENUM = _CF_TYPED_ENUM;
pub const CF_EXTENSIBLE_STRING_ENUM = _CF_TYPED_EXTENSIBLE_ENUM;
pub const CF_TYPED_ENUM = _CF_TYPED_ENUM;
pub const CF_TYPED_EXTENSIBLE_ENUM = _CF_TYPED_EXTENSIBLE_ENUM;
pub inline fn __CF_NAMED_ERROR_ENUM(_domain: anytype, _name: anytype) @TypeOf(__CF_NAMED_ENUM(CFIndex, _name)) {
    _ = _domain;
    return __CF_NAMED_ENUM(CFIndex, _name);
}
pub inline fn __CF_ANON_ERROR_ENUM(_domain: anytype) @TypeOf(__CF_ANON_ENUM(CFIndex)) {
    _ = _domain;
    return __CF_ANON_ENUM(CFIndex);
}
pub inline fn CF_EXTENSION_UNAVAILABLE(_msg: anytype) @TypeOf(__OS_EXTENSION_UNAVAILABLE(_msg)) {
    return __OS_EXTENSION_UNAVAILABLE(_msg);
}
pub inline fn CF_EXTENSION_UNAVAILABLE_MAC(_msg: anytype) @TypeOf(__OSX_EXTENSION_UNAVAILABLE(_msg)) {
    return __OSX_EXTENSION_UNAVAILABLE(_msg);
}
pub inline fn CF_EXTENSION_UNAVAILABLE_IOS(_msg: anytype) @TypeOf(__IOS_EXTENSION_UNAVAILABLE(_msg)) {
    return __IOS_EXTENSION_UNAVAILABLE(_msg);
}
pub const _Block_H_ = "";
pub const __MACTYPES__ = "";
pub const __CONDITIONALMACROS__ = "";
pub const UNIVERSAL_INTERFACES_VERSION = @as(c_int, 0x0400);
pub const PRAGMA_IMPORT = @as(c_int, 0);
pub const PRAGMA_ONCE = @as(c_int, 0);
pub const PRAGMA_STRUCT_PACK = @as(c_int, 1);
pub const PRAGMA_STRUCT_PACKPUSH = @as(c_int, 1);
pub const PRAGMA_STRUCT_ALIGN = @as(c_int, 0);
pub const PRAGMA_ENUM_PACK = @as(c_int, 0);
pub const PRAGMA_ENUM_ALWAYSINT = @as(c_int, 0);
pub const PRAGMA_ENUM_OPTIONS = @as(c_int, 0);
pub inline fn FOUR_CHAR_CODE(x: anytype) @TypeOf(x) {
    return x;
}
pub const TYPE_EXTENDED = @as(c_int, 0);
pub const TYPE_LONGDOUBLE_IS_DOUBLE = @as(c_int, 0);
pub const TYPE_LONGLONG = @as(c_int, 1);
pub const FUNCTION_PASCAL = @as(c_int, 0);
pub const FUNCTION_DECLSPEC = @as(c_int, 0);
pub const FUNCTION_WIN32CC = @as(c_int, 0);
pub inline fn DEFINE_API(_type: anytype) @TypeOf(_type) {
    return _type;
}
pub inline fn DEFINE_API_C(_type: anytype) @TypeOf(_type) {
    return _type;
}
pub inline fn DEFINE_API_STDCALL(_type: anytype) @TypeOf(_type) {
    return _type;
}
pub inline fn DEFINE_API_C_STDCALL(_type: anytype) @TypeOf(_type) {
    return _type;
}
pub inline fn CALLBACK_API(_type: anytype, _name: anytype) @TypeOf(_type(_name.*)) {
    return _type(_name.*);
}
pub inline fn CALLBACK_API_C(_type: anytype, _name: anytype) @TypeOf(_type(_name.*)) {
    return _type(_name.*);
}
pub inline fn CALLBACK_API_STDCALL(_type: anytype, _name: anytype) @TypeOf(_type(_name.*)) {
    return _type(_name.*);
}
pub inline fn CALLBACK_API_C_STDCALL(_type: anytype, _name: anytype) @TypeOf(_type(_name.*)) {
    return _type(_name.*);
}
pub const pascal = "";
pub const TARGET_API_MAC_OS8 = @as(c_int, 0);
pub const TARGET_API_MAC_CARBON = @as(c_int, 1);
pub const TARGET_API_MAC_OSX = @as(c_int, 1);
pub const TARGET_CARBON = @as(c_int, 1);
pub const OLDROUTINENAMES = @as(c_int, 0);
pub const OPAQUE_TOOLBOX_STRUCTS = @as(c_int, 1);
pub const OPAQUE_UPP_TYPES = @as(c_int, 1);
pub const ACCESSOR_CALLS_ARE_FUNCTIONS = @as(c_int, 1);
pub const CALL_NOT_IN_CARBON = @as(c_int, 0);
pub const MIXEDMODE_CALLS_ARE_FUNCTIONS = @as(c_int, 1);
pub const ALLOW_OBSOLETE_CARBON_MACMEMORY = @as(c_int, 0);
pub const ALLOW_OBSOLETE_CARBON_OSUTILS = @as(c_int, 0);
pub const nil = __DARWIN_NULL;
pub const kInvalidID = @as(c_int, 0);
pub const CF_EXTERN_C_BEGIN = "";
pub const CF_EXTERN_C_END = "";
pub const TRUE = @as(c_int, 1);
pub const FALSE = @as(c_int, 0);
pub const CF_AUTOMATED_REFCOUNT_UNAVAILABLE = "";
pub const __covariant = "";
pub const __contravariant = "";
pub const kCFCoreFoundationVersionNumber10_0 = 196.40;
pub const kCFCoreFoundationVersionNumber10_0_3 = 196.50;
pub const kCFCoreFoundationVersionNumber10_1 = 226.00;
pub const kCFCoreFoundationVersionNumber10_1_1 = 226.00;
pub const kCFCoreFoundationVersionNumber10_1_2 = 227.20;
pub const kCFCoreFoundationVersionNumber10_1_3 = 227.20;
pub const kCFCoreFoundationVersionNumber10_1_4 = 227.30;
pub const kCFCoreFoundationVersionNumber10_2 = 263.00;
pub const kCFCoreFoundationVersionNumber10_2_1 = 263.10;
pub const kCFCoreFoundationVersionNumber10_2_2 = 263.10;
pub const kCFCoreFoundationVersionNumber10_2_3 = 263.30;
pub const kCFCoreFoundationVersionNumber10_2_4 = 263.30;
pub const kCFCoreFoundationVersionNumber10_2_5 = 263.50;
pub const kCFCoreFoundationVersionNumber10_2_6 = 263.50;
pub const kCFCoreFoundationVersionNumber10_2_7 = 263.50;
pub const kCFCoreFoundationVersionNumber10_2_8 = 263.50;
pub const kCFCoreFoundationVersionNumber10_3 = 299.00;
pub const kCFCoreFoundationVersionNumber10_3_1 = 299.00;
pub const kCFCoreFoundationVersionNumber10_3_2 = 299.00;
pub const kCFCoreFoundationVersionNumber10_3_3 = 299.30;
pub const kCFCoreFoundationVersionNumber10_3_4 = 299.31;
pub const kCFCoreFoundationVersionNumber10_3_5 = 299.31;
pub const kCFCoreFoundationVersionNumber10_3_6 = 299.32;
pub const kCFCoreFoundationVersionNumber10_3_7 = 299.33;
pub const kCFCoreFoundationVersionNumber10_3_8 = 299.33;
pub const kCFCoreFoundationVersionNumber10_3_9 = 299.35;
pub const kCFCoreFoundationVersionNumber10_4 = 368.00;
pub const kCFCoreFoundationVersionNumber10_4_1 = 368.10;
pub const kCFCoreFoundationVersionNumber10_4_2 = 368.11;
pub const kCFCoreFoundationVersionNumber10_4_3 = 368.18;
pub const kCFCoreFoundationVersionNumber10_4_4_Intel = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_4_PowerPC = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_5_Intel = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_5_PowerPC = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_6_Intel = 368.26;
pub const kCFCoreFoundationVersionNumber10_4_6_PowerPC = 368.25;
pub const kCFCoreFoundationVersionNumber10_4_7 = 368.27;
pub const kCFCoreFoundationVersionNumber10_4_8 = 368.27;
pub const kCFCoreFoundationVersionNumber10_4_9 = 368.28;
pub const kCFCoreFoundationVersionNumber10_4_10 = 368.28;
pub const kCFCoreFoundationVersionNumber10_4_11 = 368.31;
pub const kCFCoreFoundationVersionNumber10_5 = 476.00;
pub const kCFCoreFoundationVersionNumber10_5_1 = 476.00;
pub const kCFCoreFoundationVersionNumber10_5_2 = 476.10;
pub const kCFCoreFoundationVersionNumber10_5_3 = 476.13;
pub const kCFCoreFoundationVersionNumber10_5_4 = 476.14;
pub const kCFCoreFoundationVersionNumber10_5_5 = 476.15;
pub const kCFCoreFoundationVersionNumber10_5_6 = 476.17;
pub const kCFCoreFoundationVersionNumber10_5_7 = 476.18;
pub const kCFCoreFoundationVersionNumber10_5_8 = 476.19;
pub const kCFCoreFoundationVersionNumber10_6 = 550.00;
pub const kCFCoreFoundationVersionNumber10_6_1 = 550.00;
pub const kCFCoreFoundationVersionNumber10_6_2 = 550.13;
pub const kCFCoreFoundationVersionNumber10_6_3 = 550.19;
pub const kCFCoreFoundationVersionNumber10_6_4 = 550.29;
pub const kCFCoreFoundationVersionNumber10_6_5 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_6 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_7 = 550.42;
pub const kCFCoreFoundationVersionNumber10_6_8 = 550.43;
pub const kCFCoreFoundationVersionNumber10_7 = 635.00;
pub const kCFCoreFoundationVersionNumber10_7_1 = 635.00;
pub const kCFCoreFoundationVersionNumber10_7_2 = 635.15;
pub const kCFCoreFoundationVersionNumber10_7_3 = 635.19;
pub const kCFCoreFoundationVersionNumber10_7_4 = 635.21;
pub const kCFCoreFoundationVersionNumber10_7_5 = 635.21;
pub const kCFCoreFoundationVersionNumber10_8 = 744.00;
pub const kCFCoreFoundationVersionNumber10_8_1 = 744.00;
pub const kCFCoreFoundationVersionNumber10_8_2 = 744.12;
pub const kCFCoreFoundationVersionNumber10_8_3 = 744.18;
pub const kCFCoreFoundationVersionNumber10_8_4 = 744.19;
pub const kCFCoreFoundationVersionNumber10_9 = 855.11;
pub const kCFCoreFoundationVersionNumber10_9_1 = 855.11;
pub const kCFCoreFoundationVersionNumber10_9_2 = 855.14;
pub const kCFCoreFoundationVersionNumber10_10 = 1151.16;
pub const kCFCoreFoundationVersionNumber10_10_1 = 1151.16;
pub const kCFCoreFoundationVersionNumber10_10_2 = @as(c_int, 1152);
pub const kCFCoreFoundationVersionNumber10_10_3 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_4 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_5 = 1153.18;
pub const kCFCoreFoundationVersionNumber10_10_Max = @as(c_int, 1199);
pub const kCFCoreFoundationVersionNumber10_11 = @as(c_int, 1253);
pub const kCFCoreFoundationVersionNumber10_11_1 = 1255.1;
pub const kCFCoreFoundationVersionNumber10_11_2 = 1256.14;
pub const kCFCoreFoundationVersionNumber10_11_3 = 1256.14;
pub const kCFCoreFoundationVersionNumber10_11_4 = 1258.1;
pub const kCFCoreFoundationVersionNumber10_11_Max = @as(c_int, 1299);
pub const __ptrauth_objc_isa_pointer = "";
pub const ISA_PTRAUTH_DISCRIMINATOR = @as(c_int, 0x6AE1);
pub const __ptrauth_cf_objc_isa_pointer = "";
pub const __COREFOUNDATION_CFARRAY__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFBAG__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFBINARYHEAP__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFBITVECTOR__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFBYTEORDER__ = @as(c_int, 1);
pub const _OS_OSBYTEORDER_H = "";
pub inline fn OSSwapConstInt16(x: anytype) @TypeOf(__DARWIN_OSSwapConstInt16(x)) {
    return __DARWIN_OSSwapConstInt16(x);
}
pub inline fn OSSwapConstInt32(x: anytype) @TypeOf(__DARWIN_OSSwapConstInt32(x)) {
    return __DARWIN_OSSwapConstInt32(x);
}
pub inline fn OSSwapConstInt64(x: anytype) @TypeOf(__DARWIN_OSSwapConstInt64(x)) {
    return __DARWIN_OSSwapConstInt64(x);
}
pub inline fn OSSwapInt16(x: anytype) @TypeOf(__DARWIN_OSSwapInt16(x)) {
    return __DARWIN_OSSwapInt16(x);
}
pub inline fn OSSwapInt32(x: anytype) @TypeOf(__DARWIN_OSSwapInt32(x)) {
    return __DARWIN_OSSwapInt32(x);
}
pub inline fn OSSwapInt64(x: anytype) @TypeOf(__DARWIN_OSSwapInt64(x)) {
    return __DARWIN_OSSwapInt64(x);
}
pub inline fn OSReadBigInt(x: anytype, y: anytype) @TypeOf(OSReadBigInt32(x, y)) {
    return OSReadBigInt32(x, y);
}
pub inline fn OSWriteBigInt(x: anytype, y: anytype, z: anytype) @TypeOf(OSWriteBigInt32(x, y, z)) {
    return OSWriteBigInt32(x, y, z);
}
pub inline fn OSSwapBigToHostInt(x: anytype) @TypeOf(OSSwapBigToHostInt32(x)) {
    return OSSwapBigToHostInt32(x);
}
pub inline fn OSSwapHostToBigInt(x: anytype) @TypeOf(OSSwapHostToBigInt32(x)) {
    return OSSwapHostToBigInt32(x);
}
pub inline fn OSReadLittleInt(x: anytype, y: anytype) @TypeOf(OSReadLittleInt32(x, y)) {
    return OSReadLittleInt32(x, y);
}
pub inline fn OSWriteLittleInt(x: anytype, y: anytype, z: anytype) @TypeOf(OSWriteLittleInt32(x, y, z)) {
    return OSWriteLittleInt32(x, y, z);
}
pub inline fn OSSwapHostToLittleInt(x: anytype) @TypeOf(OSSwapHostToLittleInt32(x)) {
    return OSSwapHostToLittleInt32(x);
}
pub inline fn OSSwapLittleToHostInt(x: anytype) @TypeOf(OSSwapLittleToHostInt32(x)) {
    return OSSwapLittleToHostInt32(x);
}
pub inline fn OSReadBigInt16(base: anytype, byteOffset: anytype) @TypeOf(OSReadSwapInt16(base, byteOffset)) {
    return OSReadSwapInt16(base, byteOffset);
}
pub inline fn OSReadBigInt32(base: anytype, byteOffset: anytype) @TypeOf(OSReadSwapInt32(base, byteOffset)) {
    return OSReadSwapInt32(base, byteOffset);
}
pub inline fn OSReadBigInt64(base: anytype, byteOffset: anytype) @TypeOf(OSReadSwapInt64(base, byteOffset)) {
    return OSReadSwapInt64(base, byteOffset);
}
pub inline fn OSWriteBigInt16(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(OSWriteSwapInt16(base, byteOffset, data)) {
    return OSWriteSwapInt16(base, byteOffset, data);
}
pub inline fn OSWriteBigInt32(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(OSWriteSwapInt32(base, byteOffset, data)) {
    return OSWriteSwapInt32(base, byteOffset, data);
}
pub inline fn OSWriteBigInt64(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(OSWriteSwapInt64(base, byteOffset, data)) {
    return OSWriteSwapInt64(base, byteOffset, data);
}
pub inline fn OSReadLittleInt16(base: anytype, byteOffset: anytype) @TypeOf(_OSReadInt16(base, byteOffset)) {
    return _OSReadInt16(base, byteOffset);
}
pub inline fn OSReadLittleInt32(base: anytype, byteOffset: anytype) @TypeOf(_OSReadInt32(base, byteOffset)) {
    return _OSReadInt32(base, byteOffset);
}
pub inline fn OSReadLittleInt64(base: anytype, byteOffset: anytype) @TypeOf(_OSReadInt64(base, byteOffset)) {
    return _OSReadInt64(base, byteOffset);
}
pub inline fn OSWriteLittleInt16(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(_OSWriteInt16(base, byteOffset, data)) {
    return _OSWriteInt16(base, byteOffset, data);
}
pub inline fn OSWriteLittleInt32(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(_OSWriteInt32(base, byteOffset, data)) {
    return _OSWriteInt32(base, byteOffset, data);
}
pub inline fn OSWriteLittleInt64(base: anytype, byteOffset: anytype, data: anytype) @TypeOf(_OSWriteInt64(base, byteOffset, data)) {
    return _OSWriteInt64(base, byteOffset, data);
}
pub inline fn OSSwapHostToBigConstInt16(x: anytype) @TypeOf(OSSwapConstInt16(x)) {
    return OSSwapConstInt16(x);
}
pub inline fn OSSwapHostToBigConstInt32(x: anytype) @TypeOf(OSSwapConstInt32(x)) {
    return OSSwapConstInt32(x);
}
pub inline fn OSSwapHostToBigConstInt64(x: anytype) @TypeOf(OSSwapConstInt64(x)) {
    return OSSwapConstInt64(x);
}
pub inline fn OSSwapHostToBigInt16(x: anytype) @TypeOf(OSSwapInt16(x)) {
    return OSSwapInt16(x);
}
pub inline fn OSSwapHostToBigInt32(x: anytype) @TypeOf(OSSwapInt32(x)) {
    return OSSwapInt32(x);
}
pub inline fn OSSwapHostToBigInt64(x: anytype) @TypeOf(OSSwapInt64(x)) {
    return OSSwapInt64(x);
}
pub inline fn OSSwapHostToLittleConstInt16(x: anytype) u16 {
    return @import("std").zig.c_translation.cast(u16, x);
}
pub inline fn OSSwapHostToLittleConstInt32(x: anytype) u32 {
    return @import("std").zig.c_translation.cast(u32, x);
}
pub inline fn OSSwapHostToLittleConstInt64(x: anytype) u64 {
    return @import("std").zig.c_translation.cast(u64, x);
}
pub inline fn OSSwapHostToLittleInt16(x: anytype) u16 {
    return @import("std").zig.c_translation.cast(u16, x);
}
pub inline fn OSSwapHostToLittleInt32(x: anytype) u32 {
    return @import("std").zig.c_translation.cast(u32, x);
}
pub inline fn OSSwapHostToLittleInt64(x: anytype) u64 {
    return @import("std").zig.c_translation.cast(u64, x);
}
pub inline fn OSSwapBigToHostConstInt16(x: anytype) @TypeOf(OSSwapConstInt16(x)) {
    return OSSwapConstInt16(x);
}
pub inline fn OSSwapBigToHostConstInt32(x: anytype) @TypeOf(OSSwapConstInt32(x)) {
    return OSSwapConstInt32(x);
}
pub inline fn OSSwapBigToHostConstInt64(x: anytype) @TypeOf(OSSwapConstInt64(x)) {
    return OSSwapConstInt64(x);
}
pub inline fn OSSwapBigToHostInt16(x: anytype) @TypeOf(OSSwapInt16(x)) {
    return OSSwapInt16(x);
}
pub inline fn OSSwapBigToHostInt32(x: anytype) @TypeOf(OSSwapInt32(x)) {
    return OSSwapInt32(x);
}
pub inline fn OSSwapBigToHostInt64(x: anytype) @TypeOf(OSSwapInt64(x)) {
    return OSSwapInt64(x);
}
pub inline fn OSSwapLittleToHostConstInt16(x: anytype) u16 {
    return @import("std").zig.c_translation.cast(u16, x);
}
pub inline fn OSSwapLittleToHostConstInt32(x: anytype) u32 {
    return @import("std").zig.c_translation.cast(u32, x);
}
pub inline fn OSSwapLittleToHostConstInt64(x: anytype) u64 {
    return @import("std").zig.c_translation.cast(u64, x);
}
pub inline fn OSSwapLittleToHostInt16(x: anytype) u16 {
    return @import("std").zig.c_translation.cast(u16, x);
}
pub inline fn OSSwapLittleToHostInt32(x: anytype) u32 {
    return @import("std").zig.c_translation.cast(u32, x);
}
pub inline fn OSSwapLittleToHostInt64(x: anytype) u64 {
    return @import("std").zig.c_translation.cast(u64, x);
}
pub const CF_USE_OSBYTEORDER_H = @as(c_int, 1);
pub const __COREFOUNDATION_CFCALENDAR__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFLOCALE__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFDICTIONARY__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFNOTIFICATIONCENTER__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFDATE__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFTIMEZONE__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFDATA__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFSTRING__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFCHARACTERSET__ = @as(c_int, 1);
pub const kCFStringEncodingInvalidId = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xffffffff, .hexadecimal);
pub const __kCFStringInlineBufferLength = @as(c_int, 64);
pub const __COREFOUNDATION_CFDATEFORMATTER__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFERROR__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFNUMBER__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFNUMBERFORMATTER__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFPREFERENCES__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFPROPERTYLIST__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFSTREAM__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFURL__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFRUNLOOP__ = @as(c_int, 1);
pub const _MACH_PORT_H_ = "";
pub const _MACH_BOOLEAN_H_ = "";
pub const _MACH_MACHINE_BOOLEAN_H_ = "";
pub const _MACH_ARM_BOOLEAN_H_ = "";
pub const _MACH_MACHINE_VM_TYPES_H_ = "";
pub const _MACH_ARM_VM_TYPES_H_ = "";
pub const _MACH_PORT_T = "";
pub const MACH_PORT_NULL = @as(c_int, 0);
pub const MACH_PORT_DEAD = @import("std").zig.c_translation.cast(mach_port_name_t, ~@as(c_int, 0));
pub inline fn MACH_PORT_VALID(name: anytype) @TypeOf((name != MACH_PORT_NULL) and (name != MACH_PORT_DEAD)) {
    return (name != MACH_PORT_NULL) and (name != MACH_PORT_DEAD);
}
pub inline fn MACH_PORT_INDEX(name: anytype) @TypeOf(name >> @as(c_int, 8)) {
    return name >> @as(c_int, 8);
}
pub inline fn MACH_PORT_GEN(name: anytype) @TypeOf((name & @as(c_int, 0xff)) << @as(c_int, 24)) {
    return (name & @as(c_int, 0xff)) << @as(c_int, 24);
}
pub inline fn MACH_PORT_MAKE(index_1: anytype, gen: anytype) @TypeOf((index_1 << @as(c_int, 8)) | (gen >> @as(c_int, 24))) {
    return (index_1 << @as(c_int, 8)) | (gen >> @as(c_int, 24));
}
pub const MACH_PORT_RIGHT_SEND = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 0));
pub const MACH_PORT_RIGHT_RECEIVE = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 1));
pub const MACH_PORT_RIGHT_SEND_ONCE = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 2));
pub const MACH_PORT_RIGHT_PORT_SET = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 3));
pub const MACH_PORT_RIGHT_DEAD_NAME = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 4));
pub const MACH_PORT_RIGHT_LABELH = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 5));
pub const MACH_PORT_RIGHT_NUMBER = @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 6));
pub inline fn MACH_PORT_TYPE(right: anytype) mach_port_type_t {
    return @import("std").zig.c_translation.cast(mach_port_type_t, @import("std").zig.c_translation.cast(mach_port_type_t, @as(c_int, 1)) << (right + @import("std").zig.c_translation.cast(mach_port_right_t, @as(c_int, 16))));
}
pub const MACH_PORT_TYPE_NONE = @import("std").zig.c_translation.cast(mach_port_type_t, @as(c_long, 0));
pub const MACH_PORT_TYPE_SEND = MACH_PORT_TYPE(MACH_PORT_RIGHT_SEND);
pub const MACH_PORT_TYPE_RECEIVE = MACH_PORT_TYPE(MACH_PORT_RIGHT_RECEIVE);
pub const MACH_PORT_TYPE_SEND_ONCE = MACH_PORT_TYPE(MACH_PORT_RIGHT_SEND_ONCE);
pub const MACH_PORT_TYPE_PORT_SET = MACH_PORT_TYPE(MACH_PORT_RIGHT_PORT_SET);
pub const MACH_PORT_TYPE_DEAD_NAME = MACH_PORT_TYPE(MACH_PORT_RIGHT_DEAD_NAME);
pub const MACH_PORT_TYPE_LABELH = MACH_PORT_TYPE(MACH_PORT_RIGHT_LABELH);
pub const MACH_PORT_TYPE_SEND_RECEIVE = MACH_PORT_TYPE_SEND | MACH_PORT_TYPE_RECEIVE;
pub const MACH_PORT_TYPE_SEND_RIGHTS = MACH_PORT_TYPE_SEND | MACH_PORT_TYPE_SEND_ONCE;
pub const MACH_PORT_TYPE_PORT_RIGHTS = MACH_PORT_TYPE_SEND_RIGHTS | MACH_PORT_TYPE_RECEIVE;
pub const MACH_PORT_TYPE_PORT_OR_DEAD = MACH_PORT_TYPE_PORT_RIGHTS | MACH_PORT_TYPE_DEAD_NAME;
pub const MACH_PORT_TYPE_ALL_RIGHTS = MACH_PORT_TYPE_PORT_OR_DEAD | MACH_PORT_TYPE_PORT_SET;
pub const MACH_PORT_TYPE_DNREQUEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const MACH_PORT_TYPE_SPREQUEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const MACH_PORT_TYPE_SPREQUEST_DELAYED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const MACH_PORT_SRIGHTS_NONE = @as(c_int, 0);
pub const MACH_PORT_SRIGHTS_PRESENT = @as(c_int, 1);
pub const MACH_PORT_QLIMIT_ZERO = @as(c_int, 0);
pub const MACH_PORT_QLIMIT_BASIC = @as(c_int, 5);
pub const MACH_PORT_QLIMIT_SMALL = @as(c_int, 16);
pub const MACH_PORT_QLIMIT_LARGE = @as(c_int, 1024);
pub const MACH_PORT_QLIMIT_KERNEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65534, .decimal);
pub const MACH_PORT_QLIMIT_MIN = MACH_PORT_QLIMIT_ZERO;
pub const MACH_PORT_QLIMIT_DEFAULT = MACH_PORT_QLIMIT_BASIC;
pub const MACH_PORT_QLIMIT_MAX = MACH_PORT_QLIMIT_LARGE;
pub const MACH_PORT_STATUS_FLAG_TEMPOWNER = @as(c_int, 0x01);
pub const MACH_PORT_STATUS_FLAG_GUARDED = @as(c_int, 0x02);
pub const MACH_PORT_STATUS_FLAG_STRICT_GUARD = @as(c_int, 0x04);
pub const MACH_PORT_STATUS_FLAG_IMP_DONATION = @as(c_int, 0x08);
pub const MACH_PORT_STATUS_FLAG_REVIVE = @as(c_int, 0x10);
pub const MACH_PORT_STATUS_FLAG_TASKPTR = @as(c_int, 0x20);
pub const MACH_PORT_STATUS_FLAG_GUARD_IMMOVABLE_RECEIVE = @as(c_int, 0x40);
pub const MACH_PORT_STATUS_FLAG_NO_GRANT = @as(c_int, 0x80);
pub const MACH_PORT_LIMITS_INFO = @as(c_int, 1);
pub const MACH_PORT_RECEIVE_STATUS = @as(c_int, 2);
pub const MACH_PORT_DNREQUESTS_SIZE = @as(c_int, 3);
pub const MACH_PORT_TEMPOWNER = @as(c_int, 4);
pub const MACH_PORT_IMPORTANCE_RECEIVER = @as(c_int, 5);
pub const MACH_PORT_DENAP_RECEIVER = @as(c_int, 6);
pub const MACH_PORT_INFO_EXT = @as(c_int, 7);
pub const MACH_PORT_GUARD_INFO = @as(c_int, 8);
pub const MACH_PORT_LIMITS_INFO_COUNT = @import("std").zig.c_translation.cast(natural_t, @import("std").zig.c_translation.sizeof(mach_port_limits_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const MACH_PORT_RECEIVE_STATUS_COUNT = @import("std").zig.c_translation.cast(natural_t, @import("std").zig.c_translation.sizeof(mach_port_status_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const MACH_PORT_DNREQUESTS_SIZE_COUNT = @as(c_int, 1);
pub const MACH_PORT_INFO_EXT_COUNT = @import("std").zig.c_translation.cast(natural_t, @import("std").zig.c_translation.sizeof(mach_port_info_ext_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const MACH_PORT_GUARD_INFO_COUNT = @import("std").zig.c_translation.cast(natural_t, @import("std").zig.c_translation.sizeof(mach_port_guard_info_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const MACH_SERVICE_PORT_INFO_STRING_NAME_MAX_BUF_LEN = @as(c_int, 255);
pub const MACH_SERVICE_PORT_INFO_COUNT = @import("std").zig.c_translation.cast(u8, @import("std").zig.c_translation.sizeof(mach_service_port_info_data_t) / @import("std").zig.c_translation.sizeof(u8));
pub const MPO_CONTEXT_AS_GUARD = @as(c_int, 0x01);
pub const MPO_QLIMIT = @as(c_int, 0x02);
pub const MPO_TEMPOWNER = @as(c_int, 0x04);
pub const MPO_IMPORTANCE_RECEIVER = @as(c_int, 0x08);
pub const MPO_INSERT_SEND_RIGHT = @as(c_int, 0x10);
pub const MPO_STRICT = @as(c_int, 0x20);
pub const MPO_DENAP_RECEIVER = @as(c_int, 0x40);
pub const MPO_IMMOVABLE_RECEIVE = @as(c_int, 0x80);
pub const MPO_FILTER_MSG = @as(c_int, 0x100);
pub const MPO_TG_BLOCK_TRACKING = @as(c_int, 0x200);
pub const MPO_SERVICE_PORT = @as(c_int, 0x400);
pub const MPO_CONNECTION_PORT = @as(c_int, 0x800);
pub const GUARD_TYPE_MACH_PORT = @as(c_int, 0x1);
pub const MAX_FATAL_kGUARD_EXC_CODE = @as(c_uint, 1) << @as(c_int, 7);
pub const MPG_FLAGS_NONE = @as(c_ulonglong, 0x00);
pub const MAX_OPTIONAL_kGUARD_EXC_CODE = @as(c_uint, 1) << @as(c_int, 19);
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_DISP = @as(c_ulonglong, 0x01) << @as(c_int, 56);
pub const MPG_FLAGS_STRICT_REPLY_INVALID_REPLY_PORT = @as(c_ulonglong, 0x02) << @as(c_int, 56);
pub const MPG_FLAGS_STRICT_REPLY_INVALID_VOUCHER = @as(c_ulonglong, 0x04) << @as(c_int, 56);
pub const MPG_FLAGS_STRICT_REPLY_NO_BANK_ATTR = @as(c_ulonglong, 0x08) << @as(c_int, 56);
pub const MPG_FLAGS_STRICT_REPLY_MISMATCHED_PERSONA = @as(c_ulonglong, 0x10) << @as(c_int, 56);
pub const MPG_FLAGS_STRICT_REPLY_MASK = @as(c_ulonglong, 0xff) << @as(c_int, 56);
pub const MPG_FLAGS_MOD_REFS_PINNED_DEALLOC = @as(c_ulonglong, 0x01) << @as(c_int, 56);
pub const MPG_FLAGS_MOD_REFS_PINNED_DESTROY = @as(c_ulonglong, 0x02) << @as(c_int, 56);
pub const MPG_FLAGS_MOD_REFS_PINNED_COPYIN = @as(c_ulonglong, 0x04) << @as(c_int, 56);
pub const MPG_FLAGS_IMMOVABLE_PINNED = @as(c_ulonglong, 0x01) << @as(c_int, 56);
pub const MPG_STRICT = @as(c_int, 0x01);
pub const MPG_IMMOVABLE_RECEIVE = @as(c_int, 0x02);
pub const __COREFOUNDATION_CFSOCKET__ = @as(c_int, 1);
pub const __DISPATCH_PUBLIC__ = "";
pub const __OS_BASE__ = "";
pub inline fn OS_EXPECT(x: anytype, v: anytype) @TypeOf(__builtin_expect(x, v)) {
    return __builtin_expect(x, v);
}
pub inline fn OS_COMPILER_CAN_ASSUME(expr: anytype) @TypeOf(__builtin_assume(expr)) {
    return __builtin_assume(expr);
}
pub inline fn OS_STRINGIFY(s: anytype) @TypeOf(__OS_STRINGIFY(s)) {
    return __OS_STRINGIFY(s);
}
pub inline fn OS_CONCAT(x: anytype, y: anytype) @TypeOf(__OS_CONCAT(x, y)) {
    return __OS_CONCAT(x, y);
}
pub inline fn os_is_compile_time_constant(expr: anytype) @TypeOf(__builtin_constant_p(expr)) {
    return __builtin_constant_p(expr);
}
pub const _UNISTD_H_ = "";
pub const _SYS_UNISTD_H_ = "";
pub const _POSIX_VERSION = @as(c_long, 200112);
pub const _POSIX2_VERSION = @as(c_long, 200112);
pub const _POSIX_VDISABLE = @import("std").zig.c_translation.cast(u8, '\xff');
pub const F_OK = @as(c_int, 0);
pub const X_OK = @as(c_int, 1) << @as(c_int, 0);
pub const W_OK = @as(c_int, 1) << @as(c_int, 1);
pub const R_OK = @as(c_int, 1) << @as(c_int, 2);
pub const _READ_OK = @as(c_int, 1) << @as(c_int, 9);
pub const _WRITE_OK = @as(c_int, 1) << @as(c_int, 10);
pub const _EXECUTE_OK = @as(c_int, 1) << @as(c_int, 11);
pub const _DELETE_OK = @as(c_int, 1) << @as(c_int, 12);
pub const _APPEND_OK = @as(c_int, 1) << @as(c_int, 13);
pub const _RMFILE_OK = @as(c_int, 1) << @as(c_int, 14);
pub const _RATTR_OK = @as(c_int, 1) << @as(c_int, 15);
pub const _WATTR_OK = @as(c_int, 1) << @as(c_int, 16);
pub const _REXT_OK = @as(c_int, 1) << @as(c_int, 17);
pub const _WEXT_OK = @as(c_int, 1) << @as(c_int, 18);
pub const _RPERM_OK = @as(c_int, 1) << @as(c_int, 19);
pub const _WPERM_OK = @as(c_int, 1) << @as(c_int, 20);
pub const _CHOWN_OK = @as(c_int, 1) << @as(c_int, 21);
pub const _ACCESS_EXTENDED_MASK = (((((((((((_READ_OK | _WRITE_OK) | _EXECUTE_OK) | _DELETE_OK) | _APPEND_OK) | _RMFILE_OK) | _REXT_OK) | _WEXT_OK) | _RATTR_OK) | _WATTR_OK) | _RPERM_OK) | _WPERM_OK) | _CHOWN_OK;
pub const SEEK_HOLE = @as(c_int, 3);
pub const SEEK_DATA = @as(c_int, 4);
pub const L_SET = SEEK_SET;
pub const L_INCR = SEEK_CUR;
pub const L_XTND = SEEK_END;
pub const ACCESSX_MAX_DESCRIPTORS = @as(c_int, 100);
pub const ACCESSX_MAX_TABLESIZE = @as(c_int, 16) * @as(c_int, 1024);
pub const _PC_LINK_MAX = @as(c_int, 1);
pub const _PC_MAX_CANON = @as(c_int, 2);
pub const _PC_MAX_INPUT = @as(c_int, 3);
pub const _PC_NAME_MAX = @as(c_int, 4);
pub const _PC_PATH_MAX = @as(c_int, 5);
pub const _PC_PIPE_BUF = @as(c_int, 6);
pub const _PC_CHOWN_RESTRICTED = @as(c_int, 7);
pub const _PC_NO_TRUNC = @as(c_int, 8);
pub const _PC_VDISABLE = @as(c_int, 9);
pub const _PC_NAME_CHARS_MAX = @as(c_int, 10);
pub const _PC_CASE_SENSITIVE = @as(c_int, 11);
pub const _PC_CASE_PRESERVING = @as(c_int, 12);
pub const _PC_EXTENDED_SECURITY_NP = @as(c_int, 13);
pub const _PC_AUTH_OPAQUE_NP = @as(c_int, 14);
pub const _PC_2_SYMLINKS = @as(c_int, 15);
pub const _PC_ALLOC_SIZE_MIN = @as(c_int, 16);
pub const _PC_ASYNC_IO = @as(c_int, 17);
pub const _PC_FILESIZEBITS = @as(c_int, 18);
pub const _PC_PRIO_IO = @as(c_int, 19);
pub const _PC_REC_INCR_XFER_SIZE = @as(c_int, 20);
pub const _PC_REC_MAX_XFER_SIZE = @as(c_int, 21);
pub const _PC_REC_MIN_XFER_SIZE = @as(c_int, 22);
pub const _PC_REC_XFER_ALIGN = @as(c_int, 23);
pub const _PC_SYMLINK_MAX = @as(c_int, 24);
pub const _PC_SYNC_IO = @as(c_int, 25);
pub const _PC_XATTR_SIZE_BITS = @as(c_int, 26);
pub const _PC_MIN_HOLE_SIZE = @as(c_int, 27);
pub const _CS_PATH = @as(c_int, 1);
pub const STDIN_FILENO = @as(c_int, 0);
pub const STDOUT_FILENO = @as(c_int, 1);
pub const STDERR_FILENO = @as(c_int, 2);
pub const _XOPEN_VERSION = @as(c_int, 600);
pub const _XOPEN_XCU_VERSION = @as(c_int, 4);
pub const _POSIX_ADVISORY_INFO = -@as(c_int, 1);
pub const _POSIX_ASYNCHRONOUS_IO = -@as(c_int, 1);
pub const _POSIX_BARRIERS = -@as(c_int, 1);
pub const _POSIX_CHOWN_RESTRICTED = @as(c_long, 200112);
pub const _POSIX_CLOCK_SELECTION = -@as(c_int, 1);
pub const _POSIX_CPUTIME = -@as(c_int, 1);
pub const _POSIX_FSYNC = @as(c_long, 200112);
pub const _POSIX_IPV6 = @as(c_long, 200112);
pub const _POSIX_JOB_CONTROL = @as(c_long, 200112);
pub const _POSIX_MAPPED_FILES = @as(c_long, 200112);
pub const _POSIX_MEMLOCK = -@as(c_int, 1);
pub const _POSIX_MEMLOCK_RANGE = -@as(c_int, 1);
pub const _POSIX_MEMORY_PROTECTION = @as(c_long, 200112);
pub const _POSIX_MESSAGE_PASSING = -@as(c_int, 1);
pub const _POSIX_MONOTONIC_CLOCK = -@as(c_int, 1);
pub const _POSIX_NO_TRUNC = @as(c_long, 200112);
pub const _POSIX_PRIORITIZED_IO = -@as(c_int, 1);
pub const _POSIX_PRIORITY_SCHEDULING = -@as(c_int, 1);
pub const _POSIX_RAW_SOCKETS = -@as(c_int, 1);
pub const _POSIX_READER_WRITER_LOCKS = @as(c_long, 200112);
pub const _POSIX_REALTIME_SIGNALS = -@as(c_int, 1);
pub const _POSIX_REGEXP = @as(c_long, 200112);
pub const _POSIX_SAVED_IDS = @as(c_long, 200112);
pub const _POSIX_SEMAPHORES = -@as(c_int, 1);
pub const _POSIX_SHARED_MEMORY_OBJECTS = -@as(c_int, 1);
pub const _POSIX_SHELL = @as(c_long, 200112);
pub const _POSIX_SPAWN = -@as(c_int, 1);
pub const _POSIX_SPIN_LOCKS = -@as(c_int, 1);
pub const _POSIX_SPORADIC_SERVER = -@as(c_int, 1);
pub const _POSIX_SYNCHRONIZED_IO = -@as(c_int, 1);
pub const _POSIX_THREAD_ATTR_STACKADDR = @as(c_long, 200112);
pub const _POSIX_THREAD_ATTR_STACKSIZE = @as(c_long, 200112);
pub const _POSIX_THREAD_CPUTIME = -@as(c_int, 1);
pub const _POSIX_THREAD_PRIO_INHERIT = -@as(c_int, 1);
pub const _POSIX_THREAD_PRIO_PROTECT = -@as(c_int, 1);
pub const _POSIX_THREAD_PRIORITY_SCHEDULING = -@as(c_int, 1);
pub const _POSIX_THREAD_PROCESS_SHARED = @as(c_long, 200112);
pub const _POSIX_THREAD_SAFE_FUNCTIONS = @as(c_long, 200112);
pub const _POSIX_THREAD_SPORADIC_SERVER = -@as(c_int, 1);
pub const _POSIX_THREADS = @as(c_long, 200112);
pub const _POSIX_TIMEOUTS = -@as(c_int, 1);
pub const _POSIX_TIMERS = -@as(c_int, 1);
pub const _POSIX_TRACE = -@as(c_int, 1);
pub const _POSIX_TRACE_EVENT_FILTER = -@as(c_int, 1);
pub const _POSIX_TRACE_INHERIT = -@as(c_int, 1);
pub const _POSIX_TRACE_LOG = -@as(c_int, 1);
pub const _POSIX_TYPED_MEMORY_OBJECTS = -@as(c_int, 1);
pub const _POSIX2_C_BIND = @as(c_long, 200112);
pub const _POSIX2_C_DEV = @as(c_long, 200112);
pub const _POSIX2_CHAR_TERM = @as(c_long, 200112);
pub const _POSIX2_FORT_DEV = -@as(c_int, 1);
pub const _POSIX2_FORT_RUN = @as(c_long, 200112);
pub const _POSIX2_LOCALEDEF = @as(c_long, 200112);
pub const _POSIX2_PBS = -@as(c_int, 1);
pub const _POSIX2_PBS_ACCOUNTING = -@as(c_int, 1);
pub const _POSIX2_PBS_CHECKPOINT = -@as(c_int, 1);
pub const _POSIX2_PBS_LOCATE = -@as(c_int, 1);
pub const _POSIX2_PBS_MESSAGE = -@as(c_int, 1);
pub const _POSIX2_PBS_TRACK = -@as(c_int, 1);
pub const _POSIX2_SW_DEV = @as(c_long, 200112);
pub const _POSIX2_UPE = @as(c_long, 200112);
pub const __ILP32_OFF32 = -@as(c_int, 1);
pub const __ILP32_OFFBIG = -@as(c_int, 1);
pub const __LP64_OFF64 = @as(c_int, 1);
pub const __LPBIG_OFFBIG = @as(c_int, 1);
pub const _POSIX_V6_ILP32_OFF32 = __ILP32_OFF32;
pub const _POSIX_V6_ILP32_OFFBIG = __ILP32_OFFBIG;
pub const _POSIX_V6_LP64_OFF64 = __LP64_OFF64;
pub const _POSIX_V6_LPBIG_OFFBIG = __LPBIG_OFFBIG;
pub const _POSIX_V7_ILP32_OFF32 = __ILP32_OFF32;
pub const _POSIX_V7_ILP32_OFFBIG = __ILP32_OFFBIG;
pub const _POSIX_V7_LP64_OFF64 = __LP64_OFF64;
pub const _POSIX_V7_LPBIG_OFFBIG = __LPBIG_OFFBIG;
pub const _V6_ILP32_OFF32 = __ILP32_OFF32;
pub const _V6_ILP32_OFFBIG = __ILP32_OFFBIG;
pub const _V6_LP64_OFF64 = __LP64_OFF64;
pub const _V6_LPBIG_OFFBIG = __LPBIG_OFFBIG;
pub const _XBS5_ILP32_OFF32 = __ILP32_OFF32;
pub const _XBS5_ILP32_OFFBIG = __ILP32_OFFBIG;
pub const _XBS5_LP64_OFF64 = __LP64_OFF64;
pub const _XBS5_LPBIG_OFFBIG = __LPBIG_OFFBIG;
pub const _XOPEN_CRYPT = @as(c_int, 1);
pub const _XOPEN_ENH_I18N = @as(c_int, 1);
pub const _XOPEN_LEGACY = -@as(c_int, 1);
pub const _XOPEN_REALTIME = -@as(c_int, 1);
pub const _XOPEN_REALTIME_THREADS = -@as(c_int, 1);
pub const _XOPEN_SHM = @as(c_int, 1);
pub const _XOPEN_STREAMS = -@as(c_int, 1);
pub const _XOPEN_UNIX = @as(c_int, 1);
pub const _SC_ARG_MAX = @as(c_int, 1);
pub const _SC_CHILD_MAX = @as(c_int, 2);
pub const _SC_CLK_TCK = @as(c_int, 3);
pub const _SC_NGROUPS_MAX = @as(c_int, 4);
pub const _SC_OPEN_MAX = @as(c_int, 5);
pub const _SC_JOB_CONTROL = @as(c_int, 6);
pub const _SC_SAVED_IDS = @as(c_int, 7);
pub const _SC_VERSION = @as(c_int, 8);
pub const _SC_BC_BASE_MAX = @as(c_int, 9);
pub const _SC_BC_DIM_MAX = @as(c_int, 10);
pub const _SC_BC_SCALE_MAX = @as(c_int, 11);
pub const _SC_BC_STRING_MAX = @as(c_int, 12);
pub const _SC_COLL_WEIGHTS_MAX = @as(c_int, 13);
pub const _SC_EXPR_NEST_MAX = @as(c_int, 14);
pub const _SC_LINE_MAX = @as(c_int, 15);
pub const _SC_RE_DUP_MAX = @as(c_int, 16);
pub const _SC_2_VERSION = @as(c_int, 17);
pub const _SC_2_C_BIND = @as(c_int, 18);
pub const _SC_2_C_DEV = @as(c_int, 19);
pub const _SC_2_CHAR_TERM = @as(c_int, 20);
pub const _SC_2_FORT_DEV = @as(c_int, 21);
pub const _SC_2_FORT_RUN = @as(c_int, 22);
pub const _SC_2_LOCALEDEF = @as(c_int, 23);
pub const _SC_2_SW_DEV = @as(c_int, 24);
pub const _SC_2_UPE = @as(c_int, 25);
pub const _SC_STREAM_MAX = @as(c_int, 26);
pub const _SC_TZNAME_MAX = @as(c_int, 27);
pub const _SC_ASYNCHRONOUS_IO = @as(c_int, 28);
pub const _SC_PAGESIZE = @as(c_int, 29);
pub const _SC_MEMLOCK = @as(c_int, 30);
pub const _SC_MEMLOCK_RANGE = @as(c_int, 31);
pub const _SC_MEMORY_PROTECTION = @as(c_int, 32);
pub const _SC_MESSAGE_PASSING = @as(c_int, 33);
pub const _SC_PRIORITIZED_IO = @as(c_int, 34);
pub const _SC_PRIORITY_SCHEDULING = @as(c_int, 35);
pub const _SC_REALTIME_SIGNALS = @as(c_int, 36);
pub const _SC_SEMAPHORES = @as(c_int, 37);
pub const _SC_FSYNC = @as(c_int, 38);
pub const _SC_SHARED_MEMORY_OBJECTS = @as(c_int, 39);
pub const _SC_SYNCHRONIZED_IO = @as(c_int, 40);
pub const _SC_TIMERS = @as(c_int, 41);
pub const _SC_AIO_LISTIO_MAX = @as(c_int, 42);
pub const _SC_AIO_MAX = @as(c_int, 43);
pub const _SC_AIO_PRIO_DELTA_MAX = @as(c_int, 44);
pub const _SC_DELAYTIMER_MAX = @as(c_int, 45);
pub const _SC_MQ_OPEN_MAX = @as(c_int, 46);
pub const _SC_MAPPED_FILES = @as(c_int, 47);
pub const _SC_RTSIG_MAX = @as(c_int, 48);
pub const _SC_SEM_NSEMS_MAX = @as(c_int, 49);
pub const _SC_SEM_VALUE_MAX = @as(c_int, 50);
pub const _SC_SIGQUEUE_MAX = @as(c_int, 51);
pub const _SC_TIMER_MAX = @as(c_int, 52);
pub const _SC_NPROCESSORS_CONF = @as(c_int, 57);
pub const _SC_NPROCESSORS_ONLN = @as(c_int, 58);
pub const _SC_2_PBS = @as(c_int, 59);
pub const _SC_2_PBS_ACCOUNTING = @as(c_int, 60);
pub const _SC_2_PBS_CHECKPOINT = @as(c_int, 61);
pub const _SC_2_PBS_LOCATE = @as(c_int, 62);
pub const _SC_2_PBS_MESSAGE = @as(c_int, 63);
pub const _SC_2_PBS_TRACK = @as(c_int, 64);
pub const _SC_ADVISORY_INFO = @as(c_int, 65);
pub const _SC_BARRIERS = @as(c_int, 66);
pub const _SC_CLOCK_SELECTION = @as(c_int, 67);
pub const _SC_CPUTIME = @as(c_int, 68);
pub const _SC_FILE_LOCKING = @as(c_int, 69);
pub const _SC_GETGR_R_SIZE_MAX = @as(c_int, 70);
pub const _SC_GETPW_R_SIZE_MAX = @as(c_int, 71);
pub const _SC_HOST_NAME_MAX = @as(c_int, 72);
pub const _SC_LOGIN_NAME_MAX = @as(c_int, 73);
pub const _SC_MONOTONIC_CLOCK = @as(c_int, 74);
pub const _SC_MQ_PRIO_MAX = @as(c_int, 75);
pub const _SC_READER_WRITER_LOCKS = @as(c_int, 76);
pub const _SC_REGEXP = @as(c_int, 77);
pub const _SC_SHELL = @as(c_int, 78);
pub const _SC_SPAWN = @as(c_int, 79);
pub const _SC_SPIN_LOCKS = @as(c_int, 80);
pub const _SC_SPORADIC_SERVER = @as(c_int, 81);
pub const _SC_THREAD_ATTR_STACKADDR = @as(c_int, 82);
pub const _SC_THREAD_ATTR_STACKSIZE = @as(c_int, 83);
pub const _SC_THREAD_CPUTIME = @as(c_int, 84);
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS = @as(c_int, 85);
pub const _SC_THREAD_KEYS_MAX = @as(c_int, 86);
pub const _SC_THREAD_PRIO_INHERIT = @as(c_int, 87);
pub const _SC_THREAD_PRIO_PROTECT = @as(c_int, 88);
pub const _SC_THREAD_PRIORITY_SCHEDULING = @as(c_int, 89);
pub const _SC_THREAD_PROCESS_SHARED = @as(c_int, 90);
pub const _SC_THREAD_SAFE_FUNCTIONS = @as(c_int, 91);
pub const _SC_THREAD_SPORADIC_SERVER = @as(c_int, 92);
pub const _SC_THREAD_STACK_MIN = @as(c_int, 93);
pub const _SC_THREAD_THREADS_MAX = @as(c_int, 94);
pub const _SC_TIMEOUTS = @as(c_int, 95);
pub const _SC_THREADS = @as(c_int, 96);
pub const _SC_TRACE = @as(c_int, 97);
pub const _SC_TRACE_EVENT_FILTER = @as(c_int, 98);
pub const _SC_TRACE_INHERIT = @as(c_int, 99);
pub const _SC_TRACE_LOG = @as(c_int, 100);
pub const _SC_TTY_NAME_MAX = @as(c_int, 101);
pub const _SC_TYPED_MEMORY_OBJECTS = @as(c_int, 102);
pub const _SC_V6_ILP32_OFF32 = @as(c_int, 103);
pub const _SC_V6_ILP32_OFFBIG = @as(c_int, 104);
pub const _SC_V6_LP64_OFF64 = @as(c_int, 105);
pub const _SC_V6_LPBIG_OFFBIG = @as(c_int, 106);
pub const _SC_IPV6 = @as(c_int, 118);
pub const _SC_RAW_SOCKETS = @as(c_int, 119);
pub const _SC_SYMLOOP_MAX = @as(c_int, 120);
pub const _SC_ATEXIT_MAX = @as(c_int, 107);
pub const _SC_IOV_MAX = @as(c_int, 56);
pub const _SC_PAGE_SIZE = _SC_PAGESIZE;
pub const _SC_XOPEN_CRYPT = @as(c_int, 108);
pub const _SC_XOPEN_ENH_I18N = @as(c_int, 109);
pub const _SC_XOPEN_LEGACY = @as(c_int, 110);
pub const _SC_XOPEN_REALTIME = @as(c_int, 111);
pub const _SC_XOPEN_REALTIME_THREADS = @as(c_int, 112);
pub const _SC_XOPEN_SHM = @as(c_int, 113);
pub const _SC_XOPEN_STREAMS = @as(c_int, 114);
pub const _SC_XOPEN_UNIX = @as(c_int, 115);
pub const _SC_XOPEN_VERSION = @as(c_int, 116);
pub const _SC_XOPEN_XCU_VERSION = @as(c_int, 121);
pub const _SC_XBS5_ILP32_OFF32 = @as(c_int, 122);
pub const _SC_XBS5_ILP32_OFFBIG = @as(c_int, 123);
pub const _SC_XBS5_LP64_OFF64 = @as(c_int, 124);
pub const _SC_XBS5_LPBIG_OFFBIG = @as(c_int, 125);
pub const _SC_SS_REPL_MAX = @as(c_int, 126);
pub const _SC_TRACE_EVENT_NAME_MAX = @as(c_int, 127);
pub const _SC_TRACE_NAME_MAX = @as(c_int, 128);
pub const _SC_TRACE_SYS_MAX = @as(c_int, 129);
pub const _SC_TRACE_USER_EVENT_MAX = @as(c_int, 130);
pub const _SC_PASS_MAX = @as(c_int, 131);
pub const _SC_PHYS_PAGES = @as(c_int, 200);
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS = @as(c_int, 2);
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS = @as(c_int, 3);
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS = @as(c_int, 4);
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS = @as(c_int, 5);
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS = @as(c_int, 6);
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS = @as(c_int, 7);
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS = @as(c_int, 8);
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS = @as(c_int, 9);
pub const _CS_POSIX_V6_LP64_OFF64_LIBS = @as(c_int, 10);
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS = @as(c_int, 11);
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS = @as(c_int, 12);
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS = @as(c_int, 13);
pub const _CS_POSIX_V6_WIDTH_RESTRICTED_ENVS = @as(c_int, 14);
pub const _CS_XBS5_ILP32_OFF32_CFLAGS = @as(c_int, 20);
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS = @as(c_int, 21);
pub const _CS_XBS5_ILP32_OFF32_LIBS = @as(c_int, 22);
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS = @as(c_int, 23);
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS = @as(c_int, 24);
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS = @as(c_int, 25);
pub const _CS_XBS5_ILP32_OFFBIG_LIBS = @as(c_int, 26);
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS = @as(c_int, 27);
pub const _CS_XBS5_LP64_OFF64_CFLAGS = @as(c_int, 28);
pub const _CS_XBS5_LP64_OFF64_LDFLAGS = @as(c_int, 29);
pub const _CS_XBS5_LP64_OFF64_LIBS = @as(c_int, 30);
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS = @as(c_int, 31);
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS = @as(c_int, 32);
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS = @as(c_int, 33);
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS = @as(c_int, 34);
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS = @as(c_int, 35);
pub const _CS_DARWIN_USER_DIR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65536, .decimal);
pub const _CS_DARWIN_USER_TEMP_DIR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65537, .decimal);
pub const _CS_DARWIN_USER_CACHE_DIR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65538, .decimal);
pub const F_ULOCK = @as(c_int, 0);
pub const F_LOCK = @as(c_int, 1);
pub const F_TLOCK = @as(c_int, 2);
pub const F_TEST = @as(c_int, 3);
pub const _SYS_SELECT_H_ = "";
pub const _SYS__SELECT_H_ = "";
pub const _UUID_T = "";
pub const __GETHOSTUUID_H = "";
pub const SYNC_VOLUME_FULLSYNC = @as(c_int, 0x01);
pub const SYNC_VOLUME_WAIT = @as(c_int, 0x02);
pub const _SYS_FCNTL_H_ = "";
pub const O_RDONLY = @as(c_int, 0x0000);
pub const O_WRONLY = @as(c_int, 0x0001);
pub const O_RDWR = @as(c_int, 0x0002);
pub const O_ACCMODE = @as(c_int, 0x0003);
pub const FREAD = @as(c_int, 0x00000001);
pub const FWRITE = @as(c_int, 0x00000002);
pub const O_NONBLOCK = @as(c_int, 0x00000004);
pub const O_APPEND = @as(c_int, 0x00000008);
pub const O_SYNC = @as(c_int, 0x0080);
pub const O_SHLOCK = @as(c_int, 0x00000010);
pub const O_EXLOCK = @as(c_int, 0x00000020);
pub const O_ASYNC = @as(c_int, 0x00000040);
pub const O_FSYNC = O_SYNC;
pub const O_NOFOLLOW = @as(c_int, 0x00000100);
pub const O_CREAT = @as(c_int, 0x00000200);
pub const O_TRUNC = @as(c_int, 0x00000400);
pub const O_EXCL = @as(c_int, 0x00000800);
pub const O_EVTONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal);
pub const O_NOCTTY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const O_DIRECTORY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal);
pub const O_SYMLINK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal);
pub const O_DSYNC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400000, .hexadecimal);
pub const O_CLOEXEC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const O_NOFOLLOW_ANY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const AT_FDCWD = -@as(c_int, 2);
pub const AT_EACCESS = @as(c_int, 0x0010);
pub const AT_SYMLINK_NOFOLLOW = @as(c_int, 0x0020);
pub const AT_SYMLINK_FOLLOW = @as(c_int, 0x0040);
pub const AT_REMOVEDIR = @as(c_int, 0x0080);
pub const AT_REALDEV = @as(c_int, 0x0200);
pub const AT_FDONLY = @as(c_int, 0x0400);
pub const O_DP_GETRAWENCRYPTED = @as(c_int, 0x0001);
pub const O_DP_GETRAWUNENCRYPTED = @as(c_int, 0x0002);
pub const FAPPEND = O_APPEND;
pub const FASYNC = O_ASYNC;
pub const FFSYNC = O_FSYNC;
pub const FFDSYNC = O_DSYNC;
pub const FNONBLOCK = O_NONBLOCK;
pub const FNDELAY = O_NONBLOCK;
pub const O_NDELAY = O_NONBLOCK;
pub const CPF_OVERWRITE = @as(c_int, 0x0001);
pub const CPF_IGNORE_MODE = @as(c_int, 0x0002);
pub const CPF_MASK = CPF_OVERWRITE | CPF_IGNORE_MODE;
pub const F_DUPFD = @as(c_int, 0);
pub const F_GETFD = @as(c_int, 1);
pub const F_SETFD = @as(c_int, 2);
pub const F_GETFL = @as(c_int, 3);
pub const F_SETFL = @as(c_int, 4);
pub const F_GETOWN = @as(c_int, 5);
pub const F_SETOWN = @as(c_int, 6);
pub const F_GETLK = @as(c_int, 7);
pub const F_SETLK = @as(c_int, 8);
pub const F_SETLKW = @as(c_int, 9);
pub const F_SETLKWTIMEOUT = @as(c_int, 10);
pub const F_FLUSH_DATA = @as(c_int, 40);
pub const F_CHKCLEAN = @as(c_int, 41);
pub const F_PREALLOCATE = @as(c_int, 42);
pub const F_SETSIZE = @as(c_int, 43);
pub const F_RDADVISE = @as(c_int, 44);
pub const F_RDAHEAD = @as(c_int, 45);
pub const F_NOCACHE = @as(c_int, 48);
pub const F_LOG2PHYS = @as(c_int, 49);
pub const F_GETPATH = @as(c_int, 50);
pub const F_FULLFSYNC = @as(c_int, 51);
pub const F_PATHPKG_CHECK = @as(c_int, 52);
pub const F_FREEZE_FS = @as(c_int, 53);
pub const F_THAW_FS = @as(c_int, 54);
pub const F_GLOBAL_NOCACHE = @as(c_int, 55);
pub const F_ADDSIGS = @as(c_int, 59);
pub const F_ADDFILESIGS = @as(c_int, 61);
pub const F_NODIRECT = @as(c_int, 62);
pub const F_GETPROTECTIONCLASS = @as(c_int, 63);
pub const F_SETPROTECTIONCLASS = @as(c_int, 64);
pub const F_LOG2PHYS_EXT = @as(c_int, 65);
pub const F_GETLKPID = @as(c_int, 66);
pub const F_SETBACKINGSTORE = @as(c_int, 70);
pub const F_GETPATH_MTMINFO = @as(c_int, 71);
pub const F_GETCODEDIR = @as(c_int, 72);
pub const F_SETNOSIGPIPE = @as(c_int, 73);
pub const F_GETNOSIGPIPE = @as(c_int, 74);
pub const F_TRANSCODEKEY = @as(c_int, 75);
pub const F_SINGLE_WRITER = @as(c_int, 76);
pub const F_GETPROTECTIONLEVEL = @as(c_int, 77);
pub const F_FINDSIGS = @as(c_int, 78);
pub const F_ADDFILESIGS_FOR_DYLD_SIM = @as(c_int, 83);
pub const F_BARRIERFSYNC = @as(c_int, 85);
pub const F_ADDFILESIGS_RETURN = @as(c_int, 97);
pub const F_CHECK_LV = @as(c_int, 98);
pub const F_PUNCHHOLE = @as(c_int, 99);
pub const F_TRIM_ACTIVE_FILE = @as(c_int, 100);
pub const F_SPECULATIVE_READ = @as(c_int, 101);
pub const F_GETPATH_NOFIRMLINK = @as(c_int, 102);
pub const F_ADDFILESIGS_INFO = @as(c_int, 103);
pub const F_ADDFILESUPPL = @as(c_int, 104);
pub const F_GETSIGSINFO = @as(c_int, 105);
pub const FCNTL_FS_SPECIFIC_BASE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const F_DUPFD_CLOEXEC = @as(c_int, 67);
pub const FD_CLOEXEC = @as(c_int, 1);
pub const F_RDLCK = @as(c_int, 1);
pub const F_UNLCK = @as(c_int, 2);
pub const F_WRLCK = @as(c_int, 3);
pub const S_IFMT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o170000, .octal);
pub const S_IFIFO = @as(c_int, 0o010000);
pub const S_IFCHR = @as(c_int, 0o020000);
pub const S_IFDIR = @as(c_int, 0o040000);
pub const S_IFBLK = @as(c_int, 0o060000);
pub const S_IFREG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o100000, .octal);
pub const S_IFLNK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o120000, .octal);
pub const S_IFSOCK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o140000, .octal);
pub const S_IFWHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0o160000, .octal);
pub const S_IRWXU = @as(c_int, 0o000700);
pub const S_IRUSR = @as(c_int, 0o000400);
pub const S_IWUSR = @as(c_int, 0o000200);
pub const S_IXUSR = @as(c_int, 0o000100);
pub const S_IRWXG = @as(c_int, 0o000070);
pub const S_IRGRP = @as(c_int, 0o000040);
pub const S_IWGRP = @as(c_int, 0o000020);
pub const S_IXGRP = @as(c_int, 0o000010);
pub const S_IRWXO = @as(c_int, 0o000007);
pub const S_IROTH = @as(c_int, 0o000004);
pub const S_IWOTH = @as(c_int, 0o000002);
pub const S_IXOTH = @as(c_int, 0o000001);
pub const S_ISUID = @as(c_int, 0o004000);
pub const S_ISGID = @as(c_int, 0o002000);
pub const S_ISVTX = @as(c_int, 0o001000);
pub const S_ISTXT = S_ISVTX;
pub const S_IREAD = S_IRUSR;
pub const S_IWRITE = S_IWUSR;
pub const S_IEXEC = S_IXUSR;
pub const F_ALLOCATECONTIG = @as(c_int, 0x00000002);
pub const F_ALLOCATEALL = @as(c_int, 0x00000004);
pub const F_PEOFPOSMODE = @as(c_int, 3);
pub const F_VOLPOSMODE = @as(c_int, 4);
pub const USER_FSIGNATURES_CDHASH_LEN = @as(c_int, 20);
pub const GETSIGSINFO_PLATFORM_BINARY = @as(c_int, 1);
pub const LOCK_SH = @as(c_int, 0x01);
pub const LOCK_EX = @as(c_int, 0x02);
pub const LOCK_NB = @as(c_int, 0x04);
pub const LOCK_UN = @as(c_int, 0x08);
pub const O_POPUP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const O_ALERT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const _FILESEC_T = "";
pub const FILESEC_GUID = FILESEC_UUID;
pub const _FILESEC_UNSET_PROPERTY = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 0));
pub const _FILESEC_REMOVE_ACL = @import("std").zig.c_translation.cast(?*anyopaque, @as(c_int, 1));
pub const DISPATCH_API_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 20181008, .decimal);
pub const __DISPATCH_INDIRECT__ = "";
pub const __OS_OBJECT__ = "";
pub const OS_OBJECT_HAVE_OBJC_SUPPORT = @as(c_int, 0);
pub const OS_OBJECT_USE_OBJC = @as(c_int, 0);
pub const OS_OBJECT_SWIFT3 = @as(c_int, 0);
pub const OS_OBJECT_RETURNS_RETAINED = "";
pub const OS_OBJECT_CONSUMED = "";
pub const OS_OBJECT_BRIDGE = "";
pub const OS_WARN_RESULT_NEEDS_RELEASE = OS_WARN_RESULT;
pub const OS_OBJECT_OBJC_RUNTIME_VISIBLE = "";
pub const OS_OBJECT_USE_OBJC_RETAIN_RELEASE = @as(c_int, 0);
pub inline fn OS_OBJECT_GLOBAL_OBJECT(@"type": anytype, object: anytype) @TypeOf((OS_OBJECT_BRIDGE ++ @"type") & object) {
    return (OS_OBJECT_BRIDGE ++ @"type") & object;
}
pub const __OS_WORKGROUP__ = "";
pub const __OS_WORKGROUP_INDIRECT__ = "";
pub const __OS_WORKGROUP_BASE__ = "";
pub const __OS_CLOCK__ = "";
pub const OS_WORKGROUP_EXPORT = OS_EXPORT;
pub const OS_WORKGROUP_RETURNS_RETAINED = OS_OBJECT_RETURNS_RETAINED;
pub const __OS_WORKGROUP_ATTR_SIZE__ = @as(c_int, 60);
pub const __OS_WORKGROUP_INTERVAL_DATA_SIZE__ = @as(c_int, 56);
pub const __OS_WORKGROUP_JOIN_TOKEN_SIZE__ = @as(c_int, 36);
pub const _OS_WORKGROUP_ATTR_SIG_DEFAULT_INIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x2FA863B4, .hexadecimal);
pub const _OS_WORKGROUP_ATTR_SIG_EMPTY_INIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x2FA863C4, .hexadecimal);
pub const _OS_WORKGROUP_INTERVAL_DATA_SIG_INIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x52A74C4D, .hexadecimal);
pub const __OS_WORKGROUP_OBJECT__ = "";
pub const __OS_WORKGROUP_INTERVAL__ = "";
pub const __OS_WORKGROUP_PARALLEL__ = "";
pub const __DISPATCH_BASE__ = "";
pub inline fn DISPATCH_EXPECT(x: anytype, v: anytype) @TypeOf(__builtin_expect(x, v)) {
    return __builtin_expect(x, v);
}
pub inline fn DISPATCH_COMPILER_CAN_ASSUME(expr: anytype) @TypeOf(__builtin_assume(expr)) {
    return __builtin_assume(expr);
}
pub const DISPATCH_SWIFT3_OVERLAY = @as(c_int, 0);
pub const __DISPATCH_TIME__ = "";
pub const _MACH_CLOCK_TYPES_H_ = "";
pub const _MACH_TIME_VALUE_H_ = "";
pub const TIME_MICROS_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 1000000, .decimal);
pub const SYSTEM_CLOCK = @as(c_int, 0);
pub const CALENDAR_CLOCK = @as(c_int, 1);
pub const REALTIME_CLOCK = @as(c_int, 0);
pub const CLOCK_GET_TIME_RES = @as(c_int, 1);
pub const CLOCK_ALARM_CURRES = @as(c_int, 3);
pub const CLOCK_ALARM_MINRES = @as(c_int, 4);
pub const CLOCK_ALARM_MAXRES = @as(c_int, 5);
pub const NSEC_PER_USEC = @as(c_ulonglong, 1000);
pub const USEC_PER_SEC = @as(c_ulonglong, 1000000);
pub const NSEC_PER_SEC = @as(c_ulonglong, 1000000000);
pub const NSEC_PER_MSEC = @as(c_ulonglong, 1000000);
pub inline fn BAD_MACH_TIMESPEC(t: anytype) @TypeOf((t.*.tv_nsec < @as(c_int, 0)) or (t.*.tv_nsec >= @import("std").zig.c_translation.cast(c_long, NSEC_PER_SEC))) {
    return (t.*.tv_nsec < @as(c_int, 0)) or (t.*.tv_nsec >= @import("std").zig.c_translation.cast(c_long, NSEC_PER_SEC));
}
pub inline fn CMP_MACH_TIMESPEC(t1: anytype, t2: anytype) @TypeOf(if (t1.*.tv_sec > t2.*.tv_sec) @import("std").zig.c_translation.cast(c_long, NSEC_PER_SEC) else if (t1.*.tv_sec < t2.*.tv_sec) @import("std").zig.c_translation.cast(c_long, -NSEC_PER_SEC) else t1.*.tv_nsec - t2.*.tv_nsec) {
    return if (t1.*.tv_sec > t2.*.tv_sec) @import("std").zig.c_translation.cast(c_long, NSEC_PER_SEC) else if (t1.*.tv_sec < t2.*.tv_sec) @import("std").zig.c_translation.cast(c_long, -NSEC_PER_SEC) else t1.*.tv_nsec - t2.*.tv_nsec;
}
pub const ALRMTYPE = @as(c_int, 0xff);
pub const TIME_ABSOLUTE = @as(c_int, 0x00);
pub const TIME_RELATIVE = @as(c_int, 0x01);
pub inline fn BAD_ALRMTYPE(t: anytype) @TypeOf((t & ~TIME_RELATIVE) != @as(c_int, 0)) {
    return (t & ~TIME_RELATIVE) != @as(c_int, 0);
}
pub const DISPATCH_TIME_NOW = @as(c_ulonglong, 0);
pub const DISPATCH_TIME_FOREVER = ~@as(c_ulonglong, 0);
pub const __DISPATCH_OBJECT__ = "";
pub const _SYS_QOS_H = "";
pub const QOS_MIN_RELATIVE_PRIORITY = -@as(c_int, 15);
pub inline fn DISPATCH_GLOBAL_OBJECT(@"type": anytype, object: anytype) @TypeOf(@"type" & object) {
    return @"type" & object;
}
pub const DISPATCH_RETURNS_RETAINED = "";
pub inline fn DISPATCH_DATA_DECL(name: anytype) @TypeOf(DISPATCH_DECL(name)) {
    return DISPATCH_DECL(name);
}
pub const __DISPATCH_QUEUE__ = "";
pub const DISPATCH_APPLY_AUTO_AVAILABLE = @as(c_int, 1);
pub const DISPATCH_QUEUE_PRIORITY_HIGH = @as(c_int, 2);
pub const DISPATCH_QUEUE_PRIORITY_DEFAULT = @as(c_int, 0);
pub const DISPATCH_QUEUE_PRIORITY_LOW = -@as(c_int, 2);
pub const DISPATCH_QUEUE_PRIORITY_BACKGROUND = INT16_MIN;
pub const DISPATCH_QUEUE_SERIAL = NULL;
pub const DISPATCH_QUEUE_SERIAL_INACTIVE = dispatch_queue_attr_make_initially_inactive(DISPATCH_QUEUE_SERIAL);
pub const DISPATCH_QUEUE_CONCURRENT = DISPATCH_GLOBAL_OBJECT(dispatch_queue_attr_t, _dispatch_queue_attr_concurrent);
pub const DISPATCH_QUEUE_CONCURRENT_INACTIVE = dispatch_queue_attr_make_initially_inactive(DISPATCH_QUEUE_CONCURRENT);
pub const DISPATCH_QUEUE_SERIAL_WITH_AUTORELEASE_POOL = dispatch_queue_attr_make_with_autorelease_frequency(DISPATCH_QUEUE_SERIAL, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
pub const DISPATCH_QUEUE_CONCURRENT_WITH_AUTORELEASE_POOL = dispatch_queue_attr_make_with_autorelease_frequency(DISPATCH_QUEUE_CONCURRENT, DISPATCH_AUTORELEASE_FREQUENCY_WORK_ITEM);
pub const DISPATCH_TARGET_QUEUE_DEFAULT = NULL;
pub const DISPATCH_CURRENT_QUEUE_LABEL = NULL;
pub inline fn dispatch_assert_queue_debug(q: anytype) @TypeOf(dispatch_assert_queue(q)) {
    return dispatch_assert_queue(q);
}
pub inline fn dispatch_assert_queue_barrier_debug(q: anytype) @TypeOf(dispatch_assert_queue_barrier(q)) {
    return dispatch_assert_queue_barrier(q);
}
pub inline fn dispatch_assert_queue_not_debug(q: anytype) @TypeOf(dispatch_assert_queue_not(q)) {
    return dispatch_assert_queue_not(q);
}
pub const __DISPATCH_BLOCK__ = "";
pub const __DISPATCH_SOURCE__ = "";
pub const _MACH_MESSAGE_H_ = "";
pub const _MACH_KERN_RETURN_H_ = "";
pub const _MACH_MACHINE_KERN_RETURN_H_ = "";
pub const _MACH_ARM_KERN_RETURN_H_ = "";
pub const KERN_SUCCESS = @as(c_int, 0);
pub const KERN_INVALID_ADDRESS = @as(c_int, 1);
pub const KERN_PROTECTION_FAILURE = @as(c_int, 2);
pub const KERN_NO_SPACE = @as(c_int, 3);
pub const KERN_INVALID_ARGUMENT = @as(c_int, 4);
pub const KERN_FAILURE = @as(c_int, 5);
pub const KERN_RESOURCE_SHORTAGE = @as(c_int, 6);
pub const KERN_NOT_RECEIVER = @as(c_int, 7);
pub const KERN_NO_ACCESS = @as(c_int, 8);
pub const KERN_MEMORY_FAILURE = @as(c_int, 9);
pub const KERN_MEMORY_ERROR = @as(c_int, 10);
pub const KERN_ALREADY_IN_SET = @as(c_int, 11);
pub const KERN_NOT_IN_SET = @as(c_int, 12);
pub const KERN_NAME_EXISTS = @as(c_int, 13);
pub const KERN_ABORTED = @as(c_int, 14);
pub const KERN_INVALID_NAME = @as(c_int, 15);
pub const KERN_INVALID_TASK = @as(c_int, 16);
pub const KERN_INVALID_RIGHT = @as(c_int, 17);
pub const KERN_INVALID_VALUE = @as(c_int, 18);
pub const KERN_UREFS_OVERFLOW = @as(c_int, 19);
pub const KERN_INVALID_CAPABILITY = @as(c_int, 20);
pub const KERN_RIGHT_EXISTS = @as(c_int, 21);
pub const KERN_INVALID_HOST = @as(c_int, 22);
pub const KERN_MEMORY_PRESENT = @as(c_int, 23);
pub const KERN_MEMORY_DATA_MOVED = @as(c_int, 24);
pub const KERN_MEMORY_RESTART_COPY = @as(c_int, 25);
pub const KERN_INVALID_PROCESSOR_SET = @as(c_int, 26);
pub const KERN_POLICY_LIMIT = @as(c_int, 27);
pub const KERN_INVALID_POLICY = @as(c_int, 28);
pub const KERN_INVALID_OBJECT = @as(c_int, 29);
pub const KERN_ALREADY_WAITING = @as(c_int, 30);
pub const KERN_DEFAULT_SET = @as(c_int, 31);
pub const KERN_EXCEPTION_PROTECTED = @as(c_int, 32);
pub const KERN_INVALID_LEDGER = @as(c_int, 33);
pub const KERN_INVALID_MEMORY_CONTROL = @as(c_int, 34);
pub const KERN_INVALID_SECURITY = @as(c_int, 35);
pub const KERN_NOT_DEPRESSED = @as(c_int, 36);
pub const KERN_TERMINATED = @as(c_int, 37);
pub const KERN_LOCK_SET_DESTROYED = @as(c_int, 38);
pub const KERN_LOCK_UNSTABLE = @as(c_int, 39);
pub const KERN_LOCK_OWNED = @as(c_int, 40);
pub const KERN_LOCK_OWNED_SELF = @as(c_int, 41);
pub const KERN_SEMAPHORE_DESTROYED = @as(c_int, 42);
pub const KERN_RPC_SERVER_TERMINATED = @as(c_int, 43);
pub const KERN_RPC_TERMINATE_ORPHAN = @as(c_int, 44);
pub const KERN_RPC_CONTINUE_ORPHAN = @as(c_int, 45);
pub const KERN_NOT_SUPPORTED = @as(c_int, 46);
pub const KERN_NODE_DOWN = @as(c_int, 47);
pub const KERN_NOT_WAITING = @as(c_int, 48);
pub const KERN_OPERATION_TIMED_OUT = @as(c_int, 49);
pub const KERN_CODESIGN_ERROR = @as(c_int, 50);
pub const KERN_POLICY_STATIC = @as(c_int, 51);
pub const KERN_INSUFFICIENT_BUFFER_SIZE = @as(c_int, 52);
pub const KERN_DENIED = @as(c_int, 53);
pub const KERN_MISSING_KC = @as(c_int, 54);
pub const KERN_INVALID_KC = @as(c_int, 55);
pub const KERN_NOT_FOUND = @as(c_int, 56);
pub const KERN_RETURN_MAX = @as(c_int, 0x100);
pub const MACH_MSG_TIMEOUT_NONE = @import("std").zig.c_translation.cast(mach_msg_timeout_t, @as(c_int, 0));
pub const MACH_MSGH_BITS_ZERO = @as(c_int, 0x00000000);
pub const MACH_MSGH_BITS_REMOTE_MASK = @as(c_int, 0x0000001f);
pub const MACH_MSGH_BITS_LOCAL_MASK = @as(c_int, 0x00001f00);
pub const MACH_MSGH_BITS_VOUCHER_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x001f0000, .hexadecimal);
pub const MACH_MSGH_BITS_PORTS_MASK = (MACH_MSGH_BITS_REMOTE_MASK | MACH_MSGH_BITS_LOCAL_MASK) | MACH_MSGH_BITS_VOUCHER_MASK;
pub const MACH_MSGH_BITS_COMPLEX = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x80000000, .hexadecimal);
pub const MACH_MSGH_BITS_USER = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x801f1f1f, .hexadecimal);
pub const MACH_MSGH_BITS_RAISEIMP = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x20000000, .hexadecimal);
pub const MACH_MSGH_BITS_DENAP = MACH_MSGH_BITS_RAISEIMP;
pub const MACH_MSGH_BITS_IMPHOLDASRT = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hexadecimal);
pub const MACH_MSGH_BITS_DENAPHOLDASRT = MACH_MSGH_BITS_IMPHOLDASRT;
pub const MACH_MSGH_BITS_CIRCULAR = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0x10000000, .hexadecimal);
pub const MACH_MSGH_BITS_USED = @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xb01f1f1f, .hexadecimal);
pub inline fn MACH_MSGH_BITS(remote: anytype, local: anytype) @TypeOf(remote | (local << @as(c_int, 8))) {
    return remote | (local << @as(c_int, 8));
}
pub inline fn MACH_MSGH_BITS_SET_PORTS(remote: anytype, local: anytype, voucher: anytype) @TypeOf(((remote & MACH_MSGH_BITS_REMOTE_MASK) | ((local << @as(c_int, 8)) & MACH_MSGH_BITS_LOCAL_MASK)) | ((voucher << @as(c_int, 16)) & MACH_MSGH_BITS_VOUCHER_MASK)) {
    return ((remote & MACH_MSGH_BITS_REMOTE_MASK) | ((local << @as(c_int, 8)) & MACH_MSGH_BITS_LOCAL_MASK)) | ((voucher << @as(c_int, 16)) & MACH_MSGH_BITS_VOUCHER_MASK);
}
pub inline fn MACH_MSGH_BITS_SET(remote: anytype, local: anytype, voucher: anytype, other: anytype) @TypeOf(MACH_MSGH_BITS_SET_PORTS(remote, local, voucher) | (other & ~MACH_MSGH_BITS_PORTS_MASK)) {
    return MACH_MSGH_BITS_SET_PORTS(remote, local, voucher) | (other & ~MACH_MSGH_BITS_PORTS_MASK);
}
pub inline fn MACH_MSGH_BITS_REMOTE(bits: anytype) @TypeOf(bits & MACH_MSGH_BITS_REMOTE_MASK) {
    return bits & MACH_MSGH_BITS_REMOTE_MASK;
}
pub inline fn MACH_MSGH_BITS_LOCAL(bits: anytype) @TypeOf((bits & MACH_MSGH_BITS_LOCAL_MASK) >> @as(c_int, 8)) {
    return (bits & MACH_MSGH_BITS_LOCAL_MASK) >> @as(c_int, 8);
}
pub inline fn MACH_MSGH_BITS_VOUCHER(bits: anytype) @TypeOf((bits & MACH_MSGH_BITS_VOUCHER_MASK) >> @as(c_int, 16)) {
    return (bits & MACH_MSGH_BITS_VOUCHER_MASK) >> @as(c_int, 16);
}
pub inline fn MACH_MSGH_BITS_PORTS(bits: anytype) @TypeOf(bits & MACH_MSGH_BITS_PORTS_MASK) {
    return bits & MACH_MSGH_BITS_PORTS_MASK;
}
pub inline fn MACH_MSGH_BITS_OTHER(bits: anytype) @TypeOf(bits & ~MACH_MSGH_BITS_PORTS_MASK) {
    return bits & ~MACH_MSGH_BITS_PORTS_MASK;
}
pub inline fn MACH_MSGH_BITS_HAS_REMOTE(bits: anytype) @TypeOf(MACH_MSGH_BITS_REMOTE(bits) != MACH_MSGH_BITS_ZERO) {
    return MACH_MSGH_BITS_REMOTE(bits) != MACH_MSGH_BITS_ZERO;
}
pub inline fn MACH_MSGH_BITS_HAS_LOCAL(bits: anytype) @TypeOf(MACH_MSGH_BITS_LOCAL(bits) != MACH_MSGH_BITS_ZERO) {
    return MACH_MSGH_BITS_LOCAL(bits) != MACH_MSGH_BITS_ZERO;
}
pub inline fn MACH_MSGH_BITS_HAS_VOUCHER(bits: anytype) @TypeOf(MACH_MSGH_BITS_VOUCHER(bits) != MACH_MSGH_BITS_ZERO) {
    return MACH_MSGH_BITS_VOUCHER(bits) != MACH_MSGH_BITS_ZERO;
}
pub inline fn MACH_MSGH_BITS_IS_COMPLEX(bits: anytype) @TypeOf((bits & MACH_MSGH_BITS_COMPLEX) != MACH_MSGH_BITS_ZERO) {
    return (bits & MACH_MSGH_BITS_COMPLEX) != MACH_MSGH_BITS_ZERO;
}
pub inline fn MACH_MSGH_BITS_RAISED_IMPORTANCE(bits: anytype) @TypeOf((bits & MACH_MSGH_BITS_RAISEIMP) != MACH_MSGH_BITS_ZERO) {
    return (bits & MACH_MSGH_BITS_RAISEIMP) != MACH_MSGH_BITS_ZERO;
}
pub inline fn MACH_MSGH_BITS_HOLDS_IMPORTANCE_ASSERTION(bits: anytype) @TypeOf((bits & MACH_MSGH_BITS_IMPHOLDASRT) != MACH_MSGH_BITS_ZERO) {
    return (bits & MACH_MSGH_BITS_IMPHOLDASRT) != MACH_MSGH_BITS_ZERO;
}
pub const MACH_MSG_SIZE_NULL = @import("std").zig.c_translation.cast([*c]mach_msg_size_t, @as(c_int, 0));
pub const MACH_MSG_PRIORITY_UNSPECIFIED = @import("std").zig.c_translation.cast(mach_msg_priority_t, @as(c_int, 0));
pub const MACH_MSG_TYPE_MOVE_RECEIVE = @as(c_int, 16);
pub const MACH_MSG_TYPE_MOVE_SEND = @as(c_int, 17);
pub const MACH_MSG_TYPE_MOVE_SEND_ONCE = @as(c_int, 18);
pub const MACH_MSG_TYPE_COPY_SEND = @as(c_int, 19);
pub const MACH_MSG_TYPE_MAKE_SEND = @as(c_int, 20);
pub const MACH_MSG_TYPE_MAKE_SEND_ONCE = @as(c_int, 21);
pub const MACH_MSG_TYPE_COPY_RECEIVE = @as(c_int, 22);
pub const MACH_MSG_TYPE_DISPOSE_RECEIVE = @as(c_int, 24);
pub const MACH_MSG_TYPE_DISPOSE_SEND = @as(c_int, 25);
pub const MACH_MSG_TYPE_DISPOSE_SEND_ONCE = @as(c_int, 26);
pub const MACH_MSG_PHYSICAL_COPY = @as(c_int, 0);
pub const MACH_MSG_VIRTUAL_COPY = @as(c_int, 1);
pub const MACH_MSG_ALLOCATE = @as(c_int, 2);
pub const MACH_MSG_OVERWRITE = @as(c_int, 3);
pub const MACH_MSG_GUARD_FLAGS_NONE = @as(c_int, 0x0000);
pub const MACH_MSG_GUARD_FLAGS_IMMOVABLE_RECEIVE = @as(c_int, 0x0001);
pub const MACH_MSG_GUARD_FLAGS_UNGUARDED_ON_SEND = @as(c_int, 0x0002);
pub const MACH_MSG_GUARD_FLAGS_MASK = @as(c_int, 0x0003);
pub const MACH_MSG_PORT_DESCRIPTOR = @as(c_int, 0);
pub const MACH_MSG_OOL_DESCRIPTOR = @as(c_int, 1);
pub const MACH_MSG_OOL_PORTS_DESCRIPTOR = @as(c_int, 2);
pub const MACH_MSG_OOL_VOLATILE_DESCRIPTOR = @as(c_int, 3);
pub const MACH_MSG_GUARDED_PORT_DESCRIPTOR = @as(c_int, 4);
pub const MACH_MSG_BODY_NULL = @import("std").zig.c_translation.cast([*c]mach_msg_body_t, @as(c_int, 0));
pub const MACH_MSG_DESCRIPTOR_NULL = @import("std").zig.c_translation.cast([*c]mach_msg_descriptor_t, @as(c_int, 0));
pub const MACH_MSG_NULL = @import("std").zig.c_translation.cast([*c]mach_msg_header_t, @as(c_int, 0));
pub const MACH_MSG_TRAILER_FORMAT_0 = @as(c_int, 0);
pub const MACH_MSG_FILTER_POLICY_ALLOW = @import("std").zig.c_translation.cast(mach_msg_filter_id, @as(c_int, 0));
pub const MACH_MSG_TRAILER_MINIMUM_SIZE = @import("std").zig.c_translation.sizeof(mach_msg_trailer_t);
pub const MAX_TRAILER_SIZE = @import("std").zig.c_translation.cast(mach_msg_size_t, @import("std").zig.c_translation.sizeof(mach_msg_max_trailer_t));
pub const MACH_MSG_TRAILER_FORMAT_0_SIZE = @import("std").zig.c_translation.sizeof(mach_msg_format_0_trailer_t);
pub inline fn round_msg(x: anytype) @TypeOf(((@import("std").zig.c_translation.cast(mach_msg_size_t, x) + @import("std").zig.c_translation.sizeof(natural_t)) - @as(c_int, 1)) & ~(@import("std").zig.c_translation.sizeof(natural_t) - @as(c_int, 1))) {
    return ((@import("std").zig.c_translation.cast(mach_msg_size_t, x) + @import("std").zig.c_translation.sizeof(natural_t)) - @as(c_int, 1)) & ~(@import("std").zig.c_translation.sizeof(natural_t) - @as(c_int, 1));
}
pub const MACH_MSG_SIZE_MAX = @import("std").zig.c_translation.cast(mach_msg_size_t, ~@as(c_int, 0));
pub const MACH_MSG_SIZE_RELIABLE = @import("std").zig.c_translation.cast(mach_msg_size_t, @as(c_int, 256)) * @as(c_int, 1024);
pub const MACH_MSGH_KIND_NORMAL = @as(c_int, 0x00000000);
pub const MACH_MSGH_KIND_NOTIFICATION = @as(c_int, 0x00000001);
pub const mach_msg_kind_t = mach_port_seqno_t;
pub const MACH_MSG_TYPE_PORT_NONE = @as(c_int, 0);
pub const MACH_MSG_TYPE_PORT_NAME = @as(c_int, 15);
pub const MACH_MSG_TYPE_PORT_RECEIVE = MACH_MSG_TYPE_MOVE_RECEIVE;
pub const MACH_MSG_TYPE_PORT_SEND = MACH_MSG_TYPE_MOVE_SEND;
pub const MACH_MSG_TYPE_PORT_SEND_ONCE = MACH_MSG_TYPE_MOVE_SEND_ONCE;
pub const MACH_MSG_TYPE_LAST = @as(c_int, 22);
pub const MACH_MSG_TYPE_POLYMORPHIC = @import("std").zig.c_translation.cast(mach_msg_type_name_t, -@as(c_int, 1));
pub inline fn MACH_MSG_TYPE_PORT_ANY(x: anytype) @TypeOf((x >= MACH_MSG_TYPE_MOVE_RECEIVE) and (x <= MACH_MSG_TYPE_MAKE_SEND_ONCE)) {
    return (x >= MACH_MSG_TYPE_MOVE_RECEIVE) and (x <= MACH_MSG_TYPE_MAKE_SEND_ONCE);
}
pub inline fn MACH_MSG_TYPE_PORT_ANY_SEND(x: anytype) @TypeOf((x >= MACH_MSG_TYPE_MOVE_SEND) and (x <= MACH_MSG_TYPE_MAKE_SEND_ONCE)) {
    return (x >= MACH_MSG_TYPE_MOVE_SEND) and (x <= MACH_MSG_TYPE_MAKE_SEND_ONCE);
}
pub inline fn MACH_MSG_TYPE_PORT_ANY_RIGHT(x: anytype) @TypeOf((x >= MACH_MSG_TYPE_MOVE_RECEIVE) and (x <= MACH_MSG_TYPE_MOVE_SEND_ONCE)) {
    return (x >= MACH_MSG_TYPE_MOVE_RECEIVE) and (x <= MACH_MSG_TYPE_MOVE_SEND_ONCE);
}
pub const MACH_MSG_OPTION_NONE = @as(c_int, 0x00000000);
pub const MACH_SEND_MSG = @as(c_int, 0x00000001);
pub const MACH_RCV_MSG = @as(c_int, 0x00000002);
pub const MACH_RCV_LARGE = @as(c_int, 0x00000004);
pub const MACH_RCV_LARGE_IDENTITY = @as(c_int, 0x00000008);
pub const MACH_SEND_TIMEOUT = @as(c_int, 0x00000010);
pub const MACH_SEND_OVERRIDE = @as(c_int, 0x00000020);
pub const MACH_SEND_INTERRUPT = @as(c_int, 0x00000040);
pub const MACH_SEND_NOTIFY = @as(c_int, 0x00000080);
pub const MACH_SEND_ALWAYS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const MACH_SEND_FILTER_NONFATAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const MACH_SEND_TRAILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const MACH_SEND_NOIMPORTANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const MACH_SEND_NODENAP = MACH_SEND_NOIMPORTANCE;
pub const MACH_SEND_IMPORTANCE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const MACH_SEND_SYNC_OVERRIDE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal);
pub const MACH_SEND_PROPAGATE_QOS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal);
pub const MACH_SEND_SYNC_USE_THRPRI = MACH_SEND_PROPAGATE_QOS;
pub const MACH_SEND_KERNEL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal);
pub const MACH_SEND_SYNC_BOOTSTRAP_CHECKIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal);
pub const MACH_RCV_TIMEOUT = @as(c_int, 0x00000100);
pub const MACH_RCV_NOTIFY = @as(c_int, 0x00000000);
pub const MACH_RCV_INTERRUPT = @as(c_int, 0x00000400);
pub const MACH_RCV_VOUCHER = @as(c_int, 0x00000800);
pub const MACH_RCV_OVERWRITE = @as(c_int, 0x00000000);
pub const MACH_RCV_GUARDED_DESC = @as(c_int, 0x00001000);
pub const MACH_RCV_SYNC_WAIT = @as(c_int, 0x00004000);
pub const MACH_RCV_SYNC_PEEK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00008000, .hexadecimal);
pub const MACH_MSG_STRICT_REPLY = @as(c_int, 0x00000200);
pub const MACH_RCV_TRAILER_NULL = @as(c_int, 0);
pub const MACH_RCV_TRAILER_SEQNO = @as(c_int, 1);
pub const MACH_RCV_TRAILER_SENDER = @as(c_int, 2);
pub const MACH_RCV_TRAILER_AUDIT = @as(c_int, 3);
pub const MACH_RCV_TRAILER_CTX = @as(c_int, 4);
pub const MACH_RCV_TRAILER_AV = @as(c_int, 7);
pub const MACH_RCV_TRAILER_LABELS = @as(c_int, 8);
pub inline fn MACH_RCV_TRAILER_TYPE(x: anytype) @TypeOf((x & @as(c_int, 0xf)) << @as(c_int, 28)) {
    return (x & @as(c_int, 0xf)) << @as(c_int, 28);
}
pub inline fn MACH_RCV_TRAILER_ELEMENTS(x: anytype) @TypeOf((x & @as(c_int, 0xf)) << @as(c_int, 24)) {
    return (x & @as(c_int, 0xf)) << @as(c_int, 24);
}
pub const MACH_RCV_TRAILER_MASK = @as(c_int, 0xf) << @as(c_int, 24);
pub inline fn GET_RCV_ELEMENTS(y: anytype) @TypeOf((y >> @as(c_int, 24)) & @as(c_int, 0xf)) {
    return (y >> @as(c_int, 24)) & @as(c_int, 0xf);
}
pub inline fn REQUESTED_TRAILER_SIZE_NATIVE(y: anytype) mach_msg_trailer_size_t {
    return @import("std").zig.c_translation.cast(mach_msg_trailer_size_t, if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_NULL) @import("std").zig.c_translation.sizeof(mach_msg_trailer_t) else if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_SEQNO) @import("std").zig.c_translation.sizeof(mach_msg_seqno_trailer_t) else if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_SENDER) @import("std").zig.c_translation.sizeof(mach_msg_security_trailer_t) else if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_AUDIT) @import("std").zig.c_translation.sizeof(mach_msg_audit_trailer_t) else if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_CTX) @import("std").zig.c_translation.sizeof(mach_msg_context_trailer_t) else if (GET_RCV_ELEMENTS(y) == MACH_RCV_TRAILER_AV) @import("std").zig.c_translation.sizeof(mach_msg_mac_trailer_t) else @import("std").zig.c_translation.sizeof(mach_msg_max_trailer_t));
}
pub inline fn REQUESTED_TRAILER_SIZE(y: anytype) @TypeOf(REQUESTED_TRAILER_SIZE_NATIVE(y)) {
    return REQUESTED_TRAILER_SIZE_NATIVE(y);
}
pub const MACH_MSG_SUCCESS = @as(c_int, 0x00000000);
pub const MACH_MSG_MASK = @as(c_int, 0x00003e00);
pub const MACH_MSG_IPC_SPACE = @as(c_int, 0x00002000);
pub const MACH_MSG_VM_SPACE = @as(c_int, 0x00001000);
pub const MACH_MSG_IPC_KERNEL = @as(c_int, 0x00000800);
pub const MACH_MSG_VM_KERNEL = @as(c_int, 0x00000400);
pub const MACH_SEND_IN_PROGRESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000001, .hexadecimal);
pub const MACH_SEND_INVALID_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000002, .hexadecimal);
pub const MACH_SEND_INVALID_DEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000003, .hexadecimal);
pub const MACH_SEND_TIMED_OUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000004, .hexadecimal);
pub const MACH_SEND_INVALID_VOUCHER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000005, .hexadecimal);
pub const MACH_SEND_INTERRUPTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000007, .hexadecimal);
pub const MACH_SEND_MSG_TOO_SMALL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000008, .hexadecimal);
pub const MACH_SEND_INVALID_REPLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000009, .hexadecimal);
pub const MACH_SEND_INVALID_RIGHT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000a, .hexadecimal);
pub const MACH_SEND_INVALID_NOTIFY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000b, .hexadecimal);
pub const MACH_SEND_INVALID_MEMORY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000c, .hexadecimal);
pub const MACH_SEND_NO_BUFFER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000d, .hexadecimal);
pub const MACH_SEND_TOO_LARGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000e, .hexadecimal);
pub const MACH_SEND_INVALID_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000f, .hexadecimal);
pub const MACH_SEND_INVALID_HEADER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000010, .hexadecimal);
pub const MACH_SEND_INVALID_TRAILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000011, .hexadecimal);
pub const MACH_SEND_INVALID_CONTEXT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000012, .hexadecimal);
pub const MACH_SEND_INVALID_RT_OOL_SIZE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000015, .hexadecimal);
pub const MACH_SEND_NO_GRANT_DEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000016, .hexadecimal);
pub const MACH_SEND_MSG_FILTERED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000017, .hexadecimal);
pub const MACH_RCV_IN_PROGRESS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004001, .hexadecimal);
pub const MACH_RCV_INVALID_NAME = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004002, .hexadecimal);
pub const MACH_RCV_TIMED_OUT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004003, .hexadecimal);
pub const MACH_RCV_TOO_LARGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004004, .hexadecimal);
pub const MACH_RCV_INTERRUPTED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004005, .hexadecimal);
pub const MACH_RCV_PORT_CHANGED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004006, .hexadecimal);
pub const MACH_RCV_INVALID_NOTIFY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004007, .hexadecimal);
pub const MACH_RCV_INVALID_DATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004008, .hexadecimal);
pub const MACH_RCV_PORT_DIED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004009, .hexadecimal);
pub const MACH_RCV_IN_SET = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400a, .hexadecimal);
pub const MACH_RCV_HEADER_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400b, .hexadecimal);
pub const MACH_RCV_BODY_ERROR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400c, .hexadecimal);
pub const MACH_RCV_INVALID_TYPE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400d, .hexadecimal);
pub const MACH_RCV_SCATTER_SMALL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400e, .hexadecimal);
pub const MACH_RCV_INVALID_TRAILER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000400f, .hexadecimal);
pub const MACH_RCV_IN_PROGRESS_TIMED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004011, .hexadecimal);
pub const MACH_RCV_INVALID_REPLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10004012, .hexadecimal);
pub const DISPATCH_SOURCE_TYPE_DATA_ADD = &_dispatch_source_type_data_add;
pub const DISPATCH_SOURCE_TYPE_DATA_OR = &_dispatch_source_type_data_or;
pub const DISPATCH_SOURCE_TYPE_DATA_REPLACE = &_dispatch_source_type_data_replace;
pub const DISPATCH_SOURCE_TYPE_MACH_SEND = &_dispatch_source_type_mach_send;
pub const DISPATCH_SOURCE_TYPE_MACH_RECV = &_dispatch_source_type_mach_recv;
pub const DISPATCH_SOURCE_TYPE_MEMORYPRESSURE = &_dispatch_source_type_memorypressure;
pub const DISPATCH_SOURCE_TYPE_PROC = &_dispatch_source_type_proc;
pub const DISPATCH_SOURCE_TYPE_READ = &_dispatch_source_type_read;
pub const DISPATCH_SOURCE_TYPE_SIGNAL = &_dispatch_source_type_signal;
pub const DISPATCH_SOURCE_TYPE_TIMER = &_dispatch_source_type_timer;
pub const DISPATCH_SOURCE_TYPE_VNODE = &_dispatch_source_type_vnode;
pub const DISPATCH_SOURCE_TYPE_WRITE = &_dispatch_source_type_write;
pub const DISPATCH_MACH_SEND_DEAD = @as(c_int, 0x1);
pub const DISPATCH_MEMORYPRESSURE_NORMAL = @as(c_int, 0x01);
pub const DISPATCH_MEMORYPRESSURE_WARN = @as(c_int, 0x02);
pub const DISPATCH_MEMORYPRESSURE_CRITICAL = @as(c_int, 0x04);
pub const DISPATCH_PROC_EXIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const DISPATCH_PROC_FORK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const DISPATCH_PROC_EXEC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000000, .hexadecimal);
pub const DISPATCH_PROC_SIGNAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000000, .hexadecimal);
pub const DISPATCH_VNODE_DELETE = @as(c_int, 0x1);
pub const DISPATCH_VNODE_WRITE = @as(c_int, 0x2);
pub const DISPATCH_VNODE_EXTEND = @as(c_int, 0x4);
pub const DISPATCH_VNODE_ATTRIB = @as(c_int, 0x8);
pub const DISPATCH_VNODE_LINK = @as(c_int, 0x10);
pub const DISPATCH_VNODE_RENAME = @as(c_int, 0x20);
pub const DISPATCH_VNODE_REVOKE = @as(c_int, 0x40);
pub const DISPATCH_VNODE_FUNLOCK = @as(c_int, 0x100);
pub const DISPATCH_TIMER_STRICT = @as(c_int, 0x1);
pub const __DISPATCH_GROUP__ = "";
pub const __DISPATCH_SEMAPHORE__ = "";
pub const __DISPATCH_ONCE__ = "";
pub const DISPATCH_ONCE_INLINE_FASTPATH = @as(c_int, 1);
pub const __DISPATCH_DATA__ = "";
pub const dispatch_data_empty = DISPATCH_GLOBAL_OBJECT(dispatch_data_t, _dispatch_data_empty);
pub const DISPATCH_DATA_DESTRUCTOR_DEFAULT = NULL;
pub const DISPATCH_DATA_DESTRUCTOR_FREE = _dispatch_data_destructor_free;
pub const DISPATCH_DATA_DESTRUCTOR_MUNMAP = _dispatch_data_destructor_munmap;
pub const __DISPATCH_IO__ = "";
pub const DISPATCH_IO_STREAM = @as(c_int, 0);
pub const DISPATCH_IO_RANDOM = @as(c_int, 1);
pub const DISPATCH_IO_STOP = @as(c_int, 0x1);
pub const DISPATCH_IO_STRICT_INTERVAL = @as(c_int, 0x1);
pub const __DISPATCH_WORKLOOP__ = "";
pub const __COREFOUNDATION_CFSET__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFSTRINGENCODINGEXT__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFTREE__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFURLACCESS__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFUUID__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFUTILITIES__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFBUNDLE__ = @as(c_int, 1);
pub const _MACH_MACHINE_H_ = "";
pub const CPU_STATE_MAX = @as(c_int, 4);
pub const CPU_STATE_USER = @as(c_int, 0);
pub const CPU_STATE_SYSTEM = @as(c_int, 1);
pub const CPU_STATE_IDLE = @as(c_int, 2);
pub const CPU_STATE_NICE = @as(c_int, 3);
pub const CPU_ARCH_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff000000, .hexadecimal);
pub const CPU_ARCH_ABI64 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const CPU_ARCH_ABI64_32 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x02000000, .hexadecimal);
pub const CPU_TYPE_ANY = @import("std").zig.c_translation.cast(cpu_type_t, -@as(c_int, 1));
pub const CPU_TYPE_VAX = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 1));
pub const CPU_TYPE_MC680x0 = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 6));
pub const CPU_TYPE_X86 = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 7));
pub const CPU_TYPE_I386 = CPU_TYPE_X86;
pub const CPU_TYPE_X86_64 = CPU_TYPE_X86 | CPU_ARCH_ABI64;
pub const CPU_TYPE_MC98000 = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 10));
pub const CPU_TYPE_HPPA = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 11));
pub const CPU_TYPE_ARM = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 12));
pub const CPU_TYPE_ARM64 = CPU_TYPE_ARM | CPU_ARCH_ABI64;
pub const CPU_TYPE_ARM64_32 = CPU_TYPE_ARM | CPU_ARCH_ABI64_32;
pub const CPU_TYPE_MC88000 = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 13));
pub const CPU_TYPE_SPARC = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 14));
pub const CPU_TYPE_I860 = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 15));
pub const CPU_TYPE_POWERPC = @import("std").zig.c_translation.cast(cpu_type_t, @as(c_int, 18));
pub const CPU_TYPE_POWERPC64 = CPU_TYPE_POWERPC | CPU_ARCH_ABI64;
pub const CPU_SUBTYPE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xff000000, .hexadecimal);
pub const CPU_SUBTYPE_LIB64 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const CPU_SUBTYPE_PTRAUTH_ABI = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const CPU_SUBTYPE_ANY = @import("std").zig.c_translation.cast(cpu_subtype_t, -@as(c_int, 1));
pub const CPU_SUBTYPE_MULTIPLE = @import("std").zig.c_translation.cast(cpu_subtype_t, -@as(c_int, 1));
pub const CPU_SUBTYPE_LITTLE_ENDIAN = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_BIG_ENDIAN = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_THREADTYPE_NONE = @import("std").zig.c_translation.cast(cpu_threadtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_VAX_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_VAX780 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_VAX785 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_VAX750 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub const CPU_SUBTYPE_VAX730 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 4));
pub const CPU_SUBTYPE_UVAXI = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 5));
pub const CPU_SUBTYPE_UVAXII = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 6));
pub const CPU_SUBTYPE_VAX8200 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 7));
pub const CPU_SUBTYPE_VAX8500 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 8));
pub const CPU_SUBTYPE_VAX8600 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 9));
pub const CPU_SUBTYPE_VAX8650 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 10));
pub const CPU_SUBTYPE_VAX8800 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 11));
pub const CPU_SUBTYPE_UVAXIII = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 12));
pub const CPU_SUBTYPE_MC680x0_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MC68030 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MC68040 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_MC68030_ONLY = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub inline fn CPU_SUBTYPE_INTEL(f: anytype, m: anytype) @TypeOf(@import("std").zig.c_translation.cast(cpu_subtype_t, f) + (m << @as(c_int, 4))) {
    return @import("std").zig.c_translation.cast(cpu_subtype_t, f) + (m << @as(c_int, 4));
}
pub const CPU_SUBTYPE_I386_ALL = CPU_SUBTYPE_INTEL(@as(c_int, 3), @as(c_int, 0));
pub const CPU_SUBTYPE_386 = CPU_SUBTYPE_INTEL(@as(c_int, 3), @as(c_int, 0));
pub const CPU_SUBTYPE_486 = CPU_SUBTYPE_INTEL(@as(c_int, 4), @as(c_int, 0));
pub const CPU_SUBTYPE_486SX = CPU_SUBTYPE_INTEL(@as(c_int, 4), @as(c_int, 8));
pub const CPU_SUBTYPE_586 = CPU_SUBTYPE_INTEL(@as(c_int, 5), @as(c_int, 0));
pub const CPU_SUBTYPE_PENT = CPU_SUBTYPE_INTEL(@as(c_int, 5), @as(c_int, 0));
pub const CPU_SUBTYPE_PENTPRO = CPU_SUBTYPE_INTEL(@as(c_int, 6), @as(c_int, 1));
pub const CPU_SUBTYPE_PENTII_M3 = CPU_SUBTYPE_INTEL(@as(c_int, 6), @as(c_int, 3));
pub const CPU_SUBTYPE_PENTII_M5 = CPU_SUBTYPE_INTEL(@as(c_int, 6), @as(c_int, 5));
pub const CPU_SUBTYPE_CELERON = CPU_SUBTYPE_INTEL(@as(c_int, 7), @as(c_int, 6));
pub const CPU_SUBTYPE_CELERON_MOBILE = CPU_SUBTYPE_INTEL(@as(c_int, 7), @as(c_int, 7));
pub const CPU_SUBTYPE_PENTIUM_3 = CPU_SUBTYPE_INTEL(@as(c_int, 8), @as(c_int, 0));
pub const CPU_SUBTYPE_PENTIUM_3_M = CPU_SUBTYPE_INTEL(@as(c_int, 8), @as(c_int, 1));
pub const CPU_SUBTYPE_PENTIUM_3_XEON = CPU_SUBTYPE_INTEL(@as(c_int, 8), @as(c_int, 2));
pub const CPU_SUBTYPE_PENTIUM_M = CPU_SUBTYPE_INTEL(@as(c_int, 9), @as(c_int, 0));
pub const CPU_SUBTYPE_PENTIUM_4 = CPU_SUBTYPE_INTEL(@as(c_int, 10), @as(c_int, 0));
pub const CPU_SUBTYPE_PENTIUM_4_M = CPU_SUBTYPE_INTEL(@as(c_int, 10), @as(c_int, 1));
pub const CPU_SUBTYPE_ITANIUM = CPU_SUBTYPE_INTEL(@as(c_int, 11), @as(c_int, 0));
pub const CPU_SUBTYPE_ITANIUM_2 = CPU_SUBTYPE_INTEL(@as(c_int, 11), @as(c_int, 1));
pub const CPU_SUBTYPE_XEON = CPU_SUBTYPE_INTEL(@as(c_int, 12), @as(c_int, 0));
pub const CPU_SUBTYPE_XEON_MP = CPU_SUBTYPE_INTEL(@as(c_int, 12), @as(c_int, 1));
pub inline fn CPU_SUBTYPE_INTEL_FAMILY(x: anytype) @TypeOf(x & @as(c_int, 15)) {
    return x & @as(c_int, 15);
}
pub const CPU_SUBTYPE_INTEL_FAMILY_MAX = @as(c_int, 15);
pub inline fn CPU_SUBTYPE_INTEL_MODEL(x: anytype) @TypeOf(x >> @as(c_int, 4)) {
    return x >> @as(c_int, 4);
}
pub const CPU_SUBTYPE_INTEL_MODEL_ALL = @as(c_int, 0);
pub const CPU_SUBTYPE_X86_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub const CPU_SUBTYPE_X86_64_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub const CPU_SUBTYPE_X86_ARCH1 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 4));
pub const CPU_SUBTYPE_X86_64_H = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 8));
pub const CPU_THREADTYPE_INTEL_HTT = @import("std").zig.c_translation.cast(cpu_threadtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MIPS_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_MIPS_R2300 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MIPS_R2600 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_MIPS_R2800 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub const CPU_SUBTYPE_MIPS_R2000a = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 4));
pub const CPU_SUBTYPE_MIPS_R2000 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 5));
pub const CPU_SUBTYPE_MIPS_R3000a = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 6));
pub const CPU_SUBTYPE_MIPS_R3000 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 7));
pub const CPU_SUBTYPE_MC98000_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_MC98601 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_HPPA_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_HPPA_7100 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_HPPA_7100LC = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MC88000_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_MC88100 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_MC88110 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_SPARC_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_I860_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_I860_860 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_POWERPC_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_POWERPC_601 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_POWERPC_602 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_POWERPC_603 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 3));
pub const CPU_SUBTYPE_POWERPC_603e = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 4));
pub const CPU_SUBTYPE_POWERPC_603ev = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 5));
pub const CPU_SUBTYPE_POWERPC_604 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 6));
pub const CPU_SUBTYPE_POWERPC_604e = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 7));
pub const CPU_SUBTYPE_POWERPC_620 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 8));
pub const CPU_SUBTYPE_POWERPC_750 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 9));
pub const CPU_SUBTYPE_POWERPC_7400 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 10));
pub const CPU_SUBTYPE_POWERPC_7450 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 11));
pub const CPU_SUBTYPE_POWERPC_970 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 100));
pub const CPU_SUBTYPE_ARM_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_ARM_V4T = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 5));
pub const CPU_SUBTYPE_ARM_V6 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 6));
pub const CPU_SUBTYPE_ARM_V5TEJ = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 7));
pub const CPU_SUBTYPE_ARM_XSCALE = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 8));
pub const CPU_SUBTYPE_ARM_V7 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 9));
pub const CPU_SUBTYPE_ARM_V7F = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 10));
pub const CPU_SUBTYPE_ARM_V7S = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 11));
pub const CPU_SUBTYPE_ARM_V7K = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 12));
pub const CPU_SUBTYPE_ARM_V8 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 13));
pub const CPU_SUBTYPE_ARM_V6M = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 14));
pub const CPU_SUBTYPE_ARM_V7M = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 15));
pub const CPU_SUBTYPE_ARM_V7EM = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 16));
pub const CPU_SUBTYPE_ARM_V8M = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 17));
pub const CPU_SUBTYPE_ARM64_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_ARM64_V8 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPU_SUBTYPE_ARM64E = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 2));
pub const CPU_SUBTYPE_ARM64_PTR_AUTH_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f000000, .hexadecimal);
pub inline fn CPU_SUBTYPE_ARM64_PTR_AUTH_VERSION(x: anytype) @TypeOf((x & CPU_SUBTYPE_ARM64_PTR_AUTH_MASK) >> @as(c_int, 24)) {
    return (x & CPU_SUBTYPE_ARM64_PTR_AUTH_MASK) >> @as(c_int, 24);
}
pub const CPU_SUBTYPE_ARM64_32_ALL = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 0));
pub const CPU_SUBTYPE_ARM64_32_V8 = @import("std").zig.c_translation.cast(cpu_subtype_t, @as(c_int, 1));
pub const CPUFAMILY_UNKNOWN = @as(c_int, 0);
pub const CPUFAMILY_POWERPC_G3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xcee41549, .hexadecimal);
pub const CPUFAMILY_POWERPC_G4 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x77c184ae, .hexadecimal);
pub const CPUFAMILY_POWERPC_G5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xed76d8aa, .hexadecimal);
pub const CPUFAMILY_INTEL_6_13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xaa33392b, .hexadecimal);
pub const CPUFAMILY_INTEL_PENRYN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x78ea4fbc, .hexadecimal);
pub const CPUFAMILY_INTEL_NEHALEM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x6b5a4cd2, .hexadecimal);
pub const CPUFAMILY_INTEL_WESTMERE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x573b5eec, .hexadecimal);
pub const CPUFAMILY_INTEL_SANDYBRIDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x5490b78c, .hexadecimal);
pub const CPUFAMILY_INTEL_IVYBRIDGE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1f65e835, .hexadecimal);
pub const CPUFAMILY_INTEL_HASWELL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10b282dc, .hexadecimal);
pub const CPUFAMILY_INTEL_BROADWELL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x582ed09c, .hexadecimal);
pub const CPUFAMILY_INTEL_SKYLAKE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x37fc219f, .hexadecimal);
pub const CPUFAMILY_INTEL_KABYLAKE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0f817246, .hexadecimal);
pub const CPUFAMILY_INTEL_ICELAKE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x38435547, .hexadecimal);
pub const CPUFAMILY_INTEL_COMETLAKE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1cf8a03e, .hexadecimal);
pub const CPUFAMILY_ARM_9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe73283ae, .hexadecimal);
pub const CPUFAMILY_ARM_11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8ff620d8, .hexadecimal);
pub const CPUFAMILY_ARM_XSCALE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x53b005f5, .hexadecimal);
pub const CPUFAMILY_ARM_12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xbd1b0ae9, .hexadecimal);
pub const CPUFAMILY_ARM_13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x0cc90e64, .hexadecimal);
pub const CPUFAMILY_ARM_14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x96077ef1, .hexadecimal);
pub const CPUFAMILY_ARM_15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xa8511bca, .hexadecimal);
pub const CPUFAMILY_ARM_SWIFT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1e2d6381, .hexadecimal);
pub const CPUFAMILY_ARM_CYCLONE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x37a09642, .hexadecimal);
pub const CPUFAMILY_ARM_TYPHOON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x2c91a47e, .hexadecimal);
pub const CPUFAMILY_ARM_TWISTER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x92fb37c8, .hexadecimal);
pub const CPUFAMILY_ARM_HURRICANE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x67ceee93, .hexadecimal);
pub const CPUFAMILY_ARM_MONSOON_MISTRAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xe81e7ef6, .hexadecimal);
pub const CPUFAMILY_ARM_VORTEX_TEMPEST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x07d34b9f, .hexadecimal);
pub const CPUFAMILY_ARM_LIGHTNING_THUNDER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x462504d2, .hexadecimal);
pub const CPUFAMILY_ARM_FIRESTORM_ICESTORM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1b588bb3, .hexadecimal);
pub const CPUFAMILY_ARM_BLIZZARD_AVALANCHE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xda33d83d, .hexadecimal);
pub const CPUSUBFAMILY_UNKNOWN = @as(c_int, 0);
pub const CPUSUBFAMILY_ARM_HP = @as(c_int, 1);
pub const CPUSUBFAMILY_ARM_HG = @as(c_int, 2);
pub const CPUSUBFAMILY_ARM_M = @as(c_int, 3);
pub const CPUSUBFAMILY_ARM_HS = @as(c_int, 4);
pub const CPUSUBFAMILY_ARM_HC_HD = @as(c_int, 5);
pub const CPUFAMILY_INTEL_6_23 = CPUFAMILY_INTEL_PENRYN;
pub const CPUFAMILY_INTEL_6_26 = CPUFAMILY_INTEL_NEHALEM;
pub inline fn CFCopyLocalizedString(key: anytype, comment: anytype) @TypeOf(CFBundleCopyLocalizedString(CFBundleGetMainBundle(), key, key, NULL)) {
    _ = comment;
    return CFBundleCopyLocalizedString(CFBundleGetMainBundle(), key, key, NULL);
}
pub inline fn CFCopyLocalizedStringFromTable(key: anytype, tbl: anytype, comment: anytype) @TypeOf(CFBundleCopyLocalizedString(CFBundleGetMainBundle(), key, key, tbl)) {
    _ = comment;
    return CFBundleCopyLocalizedString(CFBundleGetMainBundle(), key, key, tbl);
}
pub inline fn CFCopyLocalizedStringFromTableInBundle(key: anytype, tbl: anytype, bundle: anytype, comment: anytype) @TypeOf(CFBundleCopyLocalizedString(bundle, key, key, tbl)) {
    _ = comment;
    return CFBundleCopyLocalizedString(bundle, key, key, tbl);
}
pub inline fn CFCopyLocalizedStringWithDefaultValue(key: anytype, tbl: anytype, bundle: anytype, value: anytype, comment: anytype) @TypeOf(CFBundleCopyLocalizedString(bundle, key, value, tbl)) {
    _ = comment;
    return CFBundleCopyLocalizedString(bundle, key, value, tbl);
}
pub const __COREFOUNDATION_CFMESSAGEPORT__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFPLUGIN__ = @as(c_int, 1);
pub const COREFOUNDATION_CFPLUGINCOM_SEPARATE = @as(c_int, 1);
pub const __COREFOUNDATION_CFMACHPORT__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFATTRIBUTEDSTRING__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFURLENUMERATOR__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFFILESECURITY__ = @as(c_int, 1);
pub const _SYS_ACL_H = "";
pub const _SYS_KAUTH_H = "";
pub const KAUTH_UID_NONE = ~@import("std").zig.c_translation.cast(uid_t, @as(c_int, 0)) - @as(c_int, 100);
pub const KAUTH_GID_NONE = ~@import("std").zig.c_translation.cast(gid_t, @as(c_int, 0)) - @as(c_int, 100);
pub const _KAUTH_GUID = "";
pub const KAUTH_GUID_SIZE = @as(c_int, 16);
pub const _GUID_T = "";
pub const KAUTH_NTSID_MAX_AUTHORITIES = @as(c_int, 16);
pub const _NTSID_T = "";
pub const KAUTH_NTSID_HDRSIZE = @as(c_int, 8);
pub inline fn KAUTH_NTSID_SIZE(_s: anytype) @TypeOf(KAUTH_NTSID_HDRSIZE + (_s.*.sid_authcount * @import("std").zig.c_translation.sizeof(u_int32_t))) {
    return KAUTH_NTSID_HDRSIZE + (_s.*.sid_authcount * @import("std").zig.c_translation.sizeof(u_int32_t));
}
pub const KAUTH_EXTLOOKUP_SUCCESS = @as(c_int, 0);
pub const KAUTH_EXTLOOKUP_BADRQ = @as(c_int, 1);
pub const KAUTH_EXTLOOKUP_FAILURE = @as(c_int, 2);
pub const KAUTH_EXTLOOKUP_FATAL = @as(c_int, 3);
pub const KAUTH_EXTLOOKUP_INPROG = @as(c_int, 100);
pub const KAUTH_EXTLOOKUP_VALID_UID = @as(c_int, 1) << @as(c_int, 0);
pub const KAUTH_EXTLOOKUP_VALID_UGUID = @as(c_int, 1) << @as(c_int, 1);
pub const KAUTH_EXTLOOKUP_VALID_USID = @as(c_int, 1) << @as(c_int, 2);
pub const KAUTH_EXTLOOKUP_VALID_GID = @as(c_int, 1) << @as(c_int, 3);
pub const KAUTH_EXTLOOKUP_VALID_GGUID = @as(c_int, 1) << @as(c_int, 4);
pub const KAUTH_EXTLOOKUP_VALID_GSID = @as(c_int, 1) << @as(c_int, 5);
pub const KAUTH_EXTLOOKUP_WANT_UID = @as(c_int, 1) << @as(c_int, 6);
pub const KAUTH_EXTLOOKUP_WANT_UGUID = @as(c_int, 1) << @as(c_int, 7);
pub const KAUTH_EXTLOOKUP_WANT_USID = @as(c_int, 1) << @as(c_int, 8);
pub const KAUTH_EXTLOOKUP_WANT_GID = @as(c_int, 1) << @as(c_int, 9);
pub const KAUTH_EXTLOOKUP_WANT_GGUID = @as(c_int, 1) << @as(c_int, 10);
pub const KAUTH_EXTLOOKUP_WANT_GSID = @as(c_int, 1) << @as(c_int, 11);
pub const KAUTH_EXTLOOKUP_WANT_MEMBERSHIP = @as(c_int, 1) << @as(c_int, 12);
pub const KAUTH_EXTLOOKUP_VALID_MEMBERSHIP = @as(c_int, 1) << @as(c_int, 13);
pub const KAUTH_EXTLOOKUP_ISMEMBER = @as(c_int, 1) << @as(c_int, 14);
pub const KAUTH_EXTLOOKUP_VALID_PWNAM = @as(c_int, 1) << @as(c_int, 15);
pub const KAUTH_EXTLOOKUP_WANT_PWNAM = @as(c_int, 1) << @as(c_int, 16);
pub const KAUTH_EXTLOOKUP_VALID_GRNAM = @as(c_int, 1) << @as(c_int, 17);
pub const KAUTH_EXTLOOKUP_WANT_GRNAM = @as(c_int, 1) << @as(c_int, 18);
pub const KAUTH_EXTLOOKUP_VALID_SUPGRPS = @as(c_int, 1) << @as(c_int, 19);
pub const KAUTH_EXTLOOKUP_WANT_SUPGRPS = @as(c_int, 1) << @as(c_int, 20);
pub const KAUTH_EXTLOOKUP_REGISTER = @as(c_int, 0);
pub const KAUTH_EXTLOOKUP_RESULT = @as(c_int, 1) << @as(c_int, 0);
pub const KAUTH_EXTLOOKUP_WORKER = @as(c_int, 1) << @as(c_int, 1);
pub const KAUTH_EXTLOOKUP_DEREGISTER = @as(c_int, 1) << @as(c_int, 2);
pub const KAUTH_GET_CACHE_SIZES = @as(c_int, 1) << @as(c_int, 3);
pub const KAUTH_SET_CACHE_SIZES = @as(c_int, 1) << @as(c_int, 4);
pub const KAUTH_CLEAR_CACHES = @as(c_int, 1) << @as(c_int, 5);
pub const IDENTITYSVC_ENTITLEMENT = "com.apple.private.identitysvc";
pub const KAUTH_ACE_KINDMASK = @as(c_int, 0xf);
pub const KAUTH_ACE_PERMIT = @as(c_int, 1);
pub const KAUTH_ACE_DENY = @as(c_int, 2);
pub const KAUTH_ACE_AUDIT = @as(c_int, 3);
pub const KAUTH_ACE_ALARM = @as(c_int, 4);
pub const KAUTH_ACE_INHERITED = @as(c_int, 1) << @as(c_int, 4);
pub const KAUTH_ACE_FILE_INHERIT = @as(c_int, 1) << @as(c_int, 5);
pub const KAUTH_ACE_DIRECTORY_INHERIT = @as(c_int, 1) << @as(c_int, 6);
pub const KAUTH_ACE_LIMIT_INHERIT = @as(c_int, 1) << @as(c_int, 7);
pub const KAUTH_ACE_ONLY_INHERIT = @as(c_int, 1) << @as(c_int, 8);
pub const KAUTH_ACE_SUCCESS = @as(c_int, 1) << @as(c_int, 9);
pub const KAUTH_ACE_FAILURE = @as(c_int, 1) << @as(c_int, 10);
pub const KAUTH_ACE_INHERIT_CONTROL_FLAGS = ((KAUTH_ACE_FILE_INHERIT | KAUTH_ACE_DIRECTORY_INHERIT) | KAUTH_ACE_LIMIT_INHERIT) | KAUTH_ACE_ONLY_INHERIT;
pub const KAUTH_ACE_GENERIC_ALL = @as(c_int, 1) << @as(c_int, 21);
pub const KAUTH_ACE_GENERIC_EXECUTE = @as(c_int, 1) << @as(c_int, 22);
pub const KAUTH_ACE_GENERIC_WRITE = @as(c_int, 1) << @as(c_int, 23);
pub const KAUTH_ACE_GENERIC_READ = @as(c_int, 1) << @as(c_int, 24);
pub const _KAUTH_ACE = "";
pub const KAUTH_ACL_MAX_ENTRIES = @as(c_int, 128);
pub const KAUTH_ACL_FLAGS_PRIVATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffff, .hexadecimal);
pub const KAUTH_ACL_DEFER_INHERIT = @as(c_int, 1) << @as(c_int, 16);
pub const KAUTH_ACL_NO_INHERIT = @as(c_int, 1) << @as(c_int, 17);
pub const KAUTH_FILESEC_NOACL = @import("std").zig.c_translation.cast(u_int32_t, -@as(c_int, 1));
pub inline fn KAUTH_ACL_COPYSIZE(p: anytype) @TypeOf(KAUTH_ACL_SIZE(p.*.acl_entrycount)) {
    return KAUTH_ACL_SIZE(p.*.acl_entrycount);
}
pub const _KAUTH_ACL = "";
pub const KAUTH_FILESEC_MAGIC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x012cc16d, .hexadecimal);
pub const KAUTH_FILESEC_FLAGS_PRIVATE = KAUTH_ACL_FLAGS_PRIVATE;
pub const KAUTH_FILESEC_DEFER_INHERIT = KAUTH_ACL_DEFER_INHERIT;
pub const KAUTH_FILESEC_NO_INHERIT = KAUTH_ACL_NO_INHERIT;
pub const KAUTH_FILESEC_NONE = @import("std").zig.c_translation.cast(kauth_filesec_t, @as(c_int, 0));
pub const KAUTH_FILESEC_WANTED = @import("std").zig.c_translation.cast(kauth_filesec_t, @as(c_int, 1));
pub const _KAUTH_FILESEC = "";
pub inline fn KAUTH_FILESEC_COPYSIZE(p: anytype) @TypeOf(KAUTH_FILESEC_SIZE(if (p.*.fsec_entrycount == KAUTH_FILESEC_NOACL) @as(c_int, 0) else p.*.fsec_entrycount)) {
    return KAUTH_FILESEC_SIZE(if (p.*.fsec_entrycount == KAUTH_FILESEC_NOACL) @as(c_int, 0) else p.*.fsec_entrycount);
}
pub inline fn KAUTH_FILESEC_COUNT(s: anytype) @TypeOf((s - KAUTH_FILESEC_SIZE(@as(c_int, 0))) / @import("std").zig.c_translation.sizeof(struct_kauth_ace)) {
    return (s - KAUTH_FILESEC_SIZE(@as(c_int, 0))) / @import("std").zig.c_translation.sizeof(struct_kauth_ace);
}
pub inline fn KAUTH_FILESEC_VALID(s: anytype) @TypeOf((s >= KAUTH_FILESEC_SIZE(@as(c_int, 0))) and (((s - KAUTH_FILESEC_SIZE(@as(c_int, 0))) % @import("std").zig.c_translation.sizeof(struct_kauth_ace)) == @as(c_int, 0))) {
    return (s >= KAUTH_FILESEC_SIZE(@as(c_int, 0))) and (((s - KAUTH_FILESEC_SIZE(@as(c_int, 0))) % @import("std").zig.c_translation.sizeof(struct_kauth_ace)) == @as(c_int, 0));
}
pub const KAUTH_FILESEC_XATTR = "com.apple.system.Security";
pub const KAUTH_ENDIAN_HOST = @as(c_int, 0x00000001);
pub const KAUTH_ENDIAN_DISK = @as(c_int, 0x00000002);
pub const KAUTH_VNODE_READ_DATA = @as(c_uint, 1) << @as(c_int, 1);
pub const KAUTH_VNODE_LIST_DIRECTORY = KAUTH_VNODE_READ_DATA;
pub const KAUTH_VNODE_WRITE_DATA = @as(c_uint, 1) << @as(c_int, 2);
pub const KAUTH_VNODE_ADD_FILE = KAUTH_VNODE_WRITE_DATA;
pub const KAUTH_VNODE_EXECUTE = @as(c_uint, 1) << @as(c_int, 3);
pub const KAUTH_VNODE_SEARCH = KAUTH_VNODE_EXECUTE;
pub const KAUTH_VNODE_DELETE = @as(c_uint, 1) << @as(c_int, 4);
pub const KAUTH_VNODE_APPEND_DATA = @as(c_uint, 1) << @as(c_int, 5);
pub const KAUTH_VNODE_ADD_SUBDIRECTORY = KAUTH_VNODE_APPEND_DATA;
pub const KAUTH_VNODE_DELETE_CHILD = @as(c_uint, 1) << @as(c_int, 6);
pub const KAUTH_VNODE_READ_ATTRIBUTES = @as(c_uint, 1) << @as(c_int, 7);
pub const KAUTH_VNODE_WRITE_ATTRIBUTES = @as(c_uint, 1) << @as(c_int, 8);
pub const KAUTH_VNODE_READ_EXTATTRIBUTES = @as(c_uint, 1) << @as(c_int, 9);
pub const KAUTH_VNODE_WRITE_EXTATTRIBUTES = @as(c_uint, 1) << @as(c_int, 10);
pub const KAUTH_VNODE_READ_SECURITY = @as(c_uint, 1) << @as(c_int, 11);
pub const KAUTH_VNODE_WRITE_SECURITY = @as(c_uint, 1) << @as(c_int, 12);
pub const KAUTH_VNODE_TAKE_OWNERSHIP = @as(c_uint, 1) << @as(c_int, 13);
pub const KAUTH_VNODE_CHANGE_OWNER = KAUTH_VNODE_TAKE_OWNERSHIP;
pub const KAUTH_VNODE_SYNCHRONIZE = @as(c_uint, 1) << @as(c_int, 20);
pub const KAUTH_VNODE_LINKTARGET = @as(c_uint, 1) << @as(c_int, 25);
pub const KAUTH_VNODE_CHECKIMMUTABLE = @as(c_uint, 1) << @as(c_int, 26);
pub const KAUTH_VNODE_ACCESS = @as(c_uint, 1) << @as(c_int, 31);
pub const KAUTH_VNODE_NOIMMUTABLE = @as(c_uint, 1) << @as(c_int, 30);
pub const KAUTH_VNODE_SEARCHBYANYONE = @as(c_uint, 1) << @as(c_int, 29);
pub const KAUTH_VNODE_GENERIC_READ_BITS = ((KAUTH_VNODE_READ_DATA | KAUTH_VNODE_READ_ATTRIBUTES) | KAUTH_VNODE_READ_EXTATTRIBUTES) | KAUTH_VNODE_READ_SECURITY;
pub const KAUTH_VNODE_GENERIC_WRITE_BITS = (((((KAUTH_VNODE_WRITE_DATA | KAUTH_VNODE_APPEND_DATA) | KAUTH_VNODE_DELETE) | KAUTH_VNODE_DELETE_CHILD) | KAUTH_VNODE_WRITE_ATTRIBUTES) | KAUTH_VNODE_WRITE_EXTATTRIBUTES) | KAUTH_VNODE_WRITE_SECURITY;
pub const KAUTH_VNODE_GENERIC_EXECUTE_BITS = KAUTH_VNODE_EXECUTE;
pub const KAUTH_VNODE_GENERIC_ALL_BITS = (KAUTH_VNODE_GENERIC_READ_BITS | KAUTH_VNODE_GENERIC_WRITE_BITS) | KAUTH_VNODE_GENERIC_EXECUTE_BITS;
pub const KAUTH_VNODE_WRITE_RIGHTS = ((((((((((KAUTH_VNODE_ADD_FILE | KAUTH_VNODE_ADD_SUBDIRECTORY) | KAUTH_VNODE_DELETE_CHILD) | KAUTH_VNODE_WRITE_DATA) | KAUTH_VNODE_APPEND_DATA) | KAUTH_VNODE_DELETE) | KAUTH_VNODE_WRITE_ATTRIBUTES) | KAUTH_VNODE_WRITE_EXTATTRIBUTES) | KAUTH_VNODE_WRITE_SECURITY) | KAUTH_VNODE_TAKE_OWNERSHIP) | KAUTH_VNODE_LINKTARGET) | KAUTH_VNODE_CHECKIMMUTABLE;
pub const __DARWIN_ACL_READ_DATA = @as(c_int, 1) << @as(c_int, 1);
pub const __DARWIN_ACL_LIST_DIRECTORY = __DARWIN_ACL_READ_DATA;
pub const __DARWIN_ACL_WRITE_DATA = @as(c_int, 1) << @as(c_int, 2);
pub const __DARWIN_ACL_ADD_FILE = __DARWIN_ACL_WRITE_DATA;
pub const __DARWIN_ACL_EXECUTE = @as(c_int, 1) << @as(c_int, 3);
pub const __DARWIN_ACL_SEARCH = __DARWIN_ACL_EXECUTE;
pub const __DARWIN_ACL_DELETE = @as(c_int, 1) << @as(c_int, 4);
pub const __DARWIN_ACL_APPEND_DATA = @as(c_int, 1) << @as(c_int, 5);
pub const __DARWIN_ACL_ADD_SUBDIRECTORY = __DARWIN_ACL_APPEND_DATA;
pub const __DARWIN_ACL_DELETE_CHILD = @as(c_int, 1) << @as(c_int, 6);
pub const __DARWIN_ACL_READ_ATTRIBUTES = @as(c_int, 1) << @as(c_int, 7);
pub const __DARWIN_ACL_WRITE_ATTRIBUTES = @as(c_int, 1) << @as(c_int, 8);
pub const __DARWIN_ACL_READ_EXTATTRIBUTES = @as(c_int, 1) << @as(c_int, 9);
pub const __DARWIN_ACL_WRITE_EXTATTRIBUTES = @as(c_int, 1) << @as(c_int, 10);
pub const __DARWIN_ACL_READ_SECURITY = @as(c_int, 1) << @as(c_int, 11);
pub const __DARWIN_ACL_WRITE_SECURITY = @as(c_int, 1) << @as(c_int, 12);
pub const __DARWIN_ACL_CHANGE_OWNER = @as(c_int, 1) << @as(c_int, 13);
pub const __DARWIN_ACL_SYNCHRONIZE = @as(c_int, 1) << @as(c_int, 20);
pub const __DARWIN_ACL_EXTENDED_ALLOW = @as(c_int, 1);
pub const __DARWIN_ACL_EXTENDED_DENY = @as(c_int, 2);
pub const __DARWIN_ACL_ENTRY_INHERITED = @as(c_int, 1) << @as(c_int, 4);
pub const __DARWIN_ACL_ENTRY_FILE_INHERIT = @as(c_int, 1) << @as(c_int, 5);
pub const __DARWIN_ACL_ENTRY_DIRECTORY_INHERIT = @as(c_int, 1) << @as(c_int, 6);
pub const __DARWIN_ACL_ENTRY_LIMIT_INHERIT = @as(c_int, 1) << @as(c_int, 7);
pub const __DARWIN_ACL_ENTRY_ONLY_INHERIT = @as(c_int, 1) << @as(c_int, 8);
pub const __DARWIN_ACL_FLAG_NO_INHERIT = @as(c_int, 1) << @as(c_int, 17);
pub const ACL_MAX_ENTRIES = @as(c_int, 128);
pub const ACL_UNDEFINED_ID = NULL;
pub const kCFFileSecurityRemoveACL = @import("std").zig.c_translation.cast(acl_t, _FILESEC_REMOVE_ACL);
pub const __COREFOUNDATION_CFSTRINGTOKENIZER__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFFILEDESCRIPTOR__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFUSERNOTIFICATION__ = @as(c_int, 1);
pub const __COREFOUNDATION_CFXMLNODE__ = @as(c_int, 1);
pub const __CFXMLNode_DEPRECATION_MSG = "CFXMLNode is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead";
pub const __COREFOUNDATION_CFXMLPARSER__ = @as(c_int, 1);
pub const __CFXMLParser_DEPRECATION_MSG = "CFXMLParser is deprecated, use NSXMLParser, NSXMLDocument or libxml2 library instead";
pub const __AE__ = "";
pub const __CARBONCORE__ = "";
pub const __FINDER__ = "";
pub const __FIXMATH__ = "";
pub const fixed1 = @import("std").zig.c_translation.cast(Fixed, @as(c_long, 0x00010000));
pub const fract1 = @import("std").zig.c_translation.cast(Fract, @as(c_long, 0x40000000));
pub const positiveInfinity = @import("std").zig.c_translation.cast(Fixed, @as(c_long, 0x7FFFFFFF));
pub const negativeInfinity = @import("std").zig.c_translation.cast(Fixed, -@import("std").zig.c_translation.promoteIntLiteral(c_long, 0x80000000, .hexadecimal));
pub inline fn _IntSaturate(x: anytype) c_int {
    return @import("std").zig.c_translation.cast(c_int, x);
}
pub inline fn FloatToFixed(a: anytype) @TypeOf(_IntSaturate(a * fixed1)) {
    return _IntSaturate(a * fixed1);
}
pub inline fn FloatToFract(a: anytype) @TypeOf(_IntSaturate(a * fract1)) {
    return _IntSaturate(a * fract1);
}
pub inline fn FixedRound(a: anytype) c_short {
    return @import("std").zig.c_translation.cast(c_short, (@import("std").zig.c_translation.cast(Fixed, a) + (fixed1 / @as(c_int, 2))) >> @as(c_int, 16));
}
pub inline fn FixedTruncate(a: anytype) c_short {
    return @import("std").zig.c_translation.cast(c_short, @import("std").zig.c_translation.cast(Fixed, a) >> @as(c_int, 16));
}
pub inline fn FixedToFract(a: anytype) @TypeOf(@import("std").zig.c_translation.cast(Fract, a) << @as(c_int, 14)) {
    return @import("std").zig.c_translation.cast(Fract, a) << @as(c_int, 14);
}
pub inline fn FractToFixed(a: anytype) @TypeOf((@import("std").zig.c_translation.cast(Fixed, a) + @as(c_long, 8192)) >> @as(c_int, 14)) {
    return (@import("std").zig.c_translation.cast(Fixed, a) + @as(c_long, 8192)) >> @as(c_int, 14);
}
pub inline fn FixedToInt(a: anytype) c_short {
    return @import("std").zig.c_translation.cast(c_short, (@import("std").zig.c_translation.cast(Fixed, a) + (fixed1 / @as(c_int, 2))) >> @as(c_int, 16));
}
pub inline fn IntToFixed(a: anytype) @TypeOf(@import("std").zig.c_translation.cast(Fixed, a) << @as(c_int, 16)) {
    return @import("std").zig.c_translation.cast(Fixed, a) << @as(c_int, 16);
}
pub inline fn FixedToFloat(a: anytype) @TypeOf(@import("std").zig.c_translation.cast(f32, a) / fixed1) {
    return @import("std").zig.c_translation.cast(f32, a) / fixed1;
}
pub inline fn FractToFloat(a: anytype) @TypeOf(@import("std").zig.c_translation.cast(f32, a) / fract1) {
    return @import("std").zig.c_translation.cast(f32, a) / fract1;
}
pub inline fn ColorToFract(a: anytype) @TypeOf((@import("std").zig.c_translation.cast(Fract, a) << @as(c_int, 14)) + ((@import("std").zig.c_translation.cast(Fract, a) + @as(c_int, 2)) >> @as(c_int, 2))) {
    return (@import("std").zig.c_translation.cast(Fract, a) << @as(c_int, 14)) + ((@import("std").zig.c_translation.cast(Fract, a) + @as(c_int, 2)) >> @as(c_int, 2));
}
pub const __SCRIPT__ = "";
pub const __INTLRESOURCES__ = "";
pub const __WIDE_CHAR_USE_STRUCT__ = @as(c_int, 1);
pub const __UTCUTILS__ = "";
pub const __MACERRORS__ = "";
pub const __TEXTCOMMON__ = "";
pub const __COLLECTIONS__ = "";
pub const __MIXEDMODE__ = "";
pub inline fn NewRoutineDescriptor(theProc: anytype, procInfo: anytype, isa: anytype) UniversalProcPtr {
    _ = procInfo;
    _ = isa;
    return @import("std").zig.c_translation.cast(UniversalProcPtr, theProc);
}
pub inline fn SIZE_CODE(size: anytype) @TypeOf(if (size == @as(c_int, 4)) kFourByteCode else if (size == @as(c_int, 2)) kTwoByteCode else if (size == @as(c_int, 1)) kOneByteCode else @as(c_int, 0)) {
    return if (size == @as(c_int, 4)) kFourByteCode else if (size == @as(c_int, 2)) kTwoByteCode else if (size == @as(c_int, 1)) kOneByteCode else @as(c_int, 0);
}
pub inline fn RESULT_SIZE(sizeCode: anytype) @TypeOf(@import("std").zig.c_translation.cast(ProcInfoType, sizeCode) << kResultSizePhase) {
    return @import("std").zig.c_translation.cast(ProcInfoType, sizeCode) << kResultSizePhase;
}
pub inline fn STACK_ROUTINE_PARAMETER(whichParam: anytype, sizeCode: anytype) @TypeOf(@import("std").zig.c_translation.cast(ProcInfoType, sizeCode) << (kStackParameterPhase + ((whichParam - @as(c_int, 1)) * kStackParameterWidth))) {
    return @import("std").zig.c_translation.cast(ProcInfoType, sizeCode) << (kStackParameterPhase + ((whichParam - @as(c_int, 1)) * kStackParameterWidth));
}
pub inline fn DISPATCHED_STACK_ROUTINE_PARAMETER(whichParam: anytype, sizeCode: anytype) @TypeOf(@import("std").zig.c_translation.cast(ProcInfoType, sizeCode) << (kDispatchedParameterPhase + ((whichParam - @as(c_int, 1)) * kStackParameterWidth))) {
    return @import("std").zig.c_translation.cast(ProcInfoType, sizeCode) << (kDispatchedParameterPhase + ((whichParam - @as(c_int, 1)) * kStackParameterWidth));
}
pub inline fn DISPATCHED_STACK_ROUTINE_SELECTOR_SIZE(sizeCode: anytype) @TypeOf(@import("std").zig.c_translation.cast(ProcInfoType, sizeCode) << kDispatchedSelectorSizePhase) {
    return @import("std").zig.c_translation.cast(ProcInfoType, sizeCode) << kDispatchedSelectorSizePhase;
}
pub inline fn REGISTER_RESULT_LOCATION(whichReg: anytype) @TypeOf(@import("std").zig.c_translation.cast(ProcInfoType, whichReg) << kRegisterResultLocationPhase) {
    return @import("std").zig.c_translation.cast(ProcInfoType, whichReg) << kRegisterResultLocationPhase;
}
pub inline fn REGISTER_ROUTINE_PARAMETER(whichParam: anytype, whichReg: anytype, sizeCode: anytype) @TypeOf(((@import("std").zig.c_translation.cast(ProcInfoType, sizeCode) << kRegisterParameterSizePhase) | (@import("std").zig.c_translation.cast(ProcInfoType, whichReg) << kRegisterParameterWhichPhase)) << (kRegisterParameterPhase + ((whichParam - @as(c_int, 1)) * kRegisterParameterWidth))) {
    return ((@import("std").zig.c_translation.cast(ProcInfoType, sizeCode) << kRegisterParameterSizePhase) | (@import("std").zig.c_translation.cast(ProcInfoType, whichReg) << kRegisterParameterWhichPhase)) << (kRegisterParameterPhase + ((whichParam - @as(c_int, 1)) * kRegisterParameterWidth));
}
pub inline fn SPECIAL_CASE_PROCINFO(specialCaseCode: anytype) @TypeOf(kSpecialCase | (@import("std").zig.c_translation.cast(ProcInfoType, specialCaseCode) << @as(c_int, 4))) {
    return kSpecialCase | (@import("std").zig.c_translation.cast(ProcInfoType, specialCaseCode) << @as(c_int, 4));
}
pub inline fn STACK_UPP_TYPE(name: anytype) @TypeOf(name) {
    return name;
}
pub inline fn REGISTER_UPP_TYPE(name: anytype) @TypeOf(name) {
    return name;
}
pub inline fn TVECTOR_UPP_TYPE(name: anytype) @TypeOf(name) {
    return name;
}
pub inline fn CALL_ZERO_PARAMETER_UPP(upp: anytype, procInfo: anytype) @TypeOf(upp.*()) {
    _ = procInfo;
    return upp.*();
}
pub inline fn CALL_ONE_PARAMETER_UPP(upp: anytype, procInfo: anytype, p1: anytype) @TypeOf(upp.*(p1)) {
    _ = procInfo;
    return upp.*(p1);
}
pub inline fn CALL_TWO_PARAMETER_UPP(upp: anytype, procInfo: anytype, p1: anytype, p2: anytype) @TypeOf(upp.*(p1, p2)) {
    _ = procInfo;
    return upp.*(p1, p2);
}
pub inline fn CALL_THREE_PARAMETER_UPP(upp: anytype, procInfo: anytype, p1: anytype, p2: anytype, p3: anytype) @TypeOf(upp.*(p1, p2, p3)) {
    _ = procInfo;
    return upp.*(p1, p2, p3);
}
pub inline fn CALL_FOUR_PARAMETER_UPP(upp: anytype, procInfo: anytype, p1: anytype, p2: anytype, p3: anytype, p4: anytype) @TypeOf(upp.*(p1, p2, p3, p4)) {
    _ = procInfo;
    return upp.*(p1, p2, p3, p4);
}
pub inline fn CALL_FIVE_PARAMETER_UPP(upp: anytype, procInfo: anytype, p1: anytype, p2: anytype, p3: anytype, p4: anytype, p5: anytype) @TypeOf(upp.*(p1, p2, p3, p4, p5)) {
    _ = procInfo;
    return upp.*(p1, p2, p3, p4, p5);
}
pub inline fn CALL_SIX_PARAMETER_UPP(upp: anytype, procInfo: anytype, p1: anytype, p2: anytype, p3: anytype, p4: anytype, p5: anytype, p6: anytype) @TypeOf(upp.*(p1, p2, p3, p4, p5, p6)) {
    _ = procInfo;
    return upp.*(p1, p2, p3, p4, p5, p6);
}
pub inline fn CALL_SEVEN_PARAMETER_UPP(upp: anytype, procInfo: anytype, p1: anytype, p2: anytype, p3: anytype, p4: anytype, p5: anytype, p6: anytype, p7: anytype) @TypeOf(upp.*(p1, p2, p3, p4, p5, p6, p7)) {
    _ = procInfo;
    return upp.*(p1, p2, p3, p4, p5, p6, p7);
}
pub inline fn CALL_EIGHT_PARAMETER_UPP(upp: anytype, procInfo: anytype, p1: anytype, p2: anytype, p3: anytype, p4: anytype, p5: anytype, p6: anytype, p7: anytype, p8: anytype) @TypeOf(upp.*(p1, p2, p3, p4, p5, p6, p7, p8)) {
    _ = procInfo;
    return upp.*(p1, p2, p3, p4, p5, p6, p7, p8);
}
pub inline fn CALL_NINE_PARAMETER_UPP(upp: anytype, procInfo: anytype, p1: anytype, p2: anytype, p3: anytype, p4: anytype, p5: anytype, p6: anytype, p7: anytype, p8: anytype, p9: anytype) @TypeOf(upp.*(p1, p2, p3, p4, p5, p6, p7, p8, p9)) {
    _ = procInfo;
    return upp.*(p1, p2, p3, p4, p5, p6, p7, p8, p9);
}
pub inline fn CALL_TEN_PARAMETER_UPP(upp: anytype, procInfo: anytype, p1: anytype, p2: anytype, p3: anytype, p4: anytype, p5: anytype, p6: anytype, p7: anytype, p8: anytype, p9: anytype, p10: anytype) @TypeOf(upp.*(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10)) {
    _ = procInfo;
    return upp.*(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10);
}
pub inline fn CALL_ELEVEN_PARAMETER_UPP(upp: anytype, procInfo: anytype, p1: anytype, p2: anytype, p3: anytype, p4: anytype, p5: anytype, p6: anytype, p7: anytype, p8: anytype, p9: anytype, p10: anytype, p11: anytype) @TypeOf(upp.*(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11)) {
    _ = procInfo;
    return upp.*(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11);
}
pub inline fn CALL_TWELVE_PARAMETER_UPP(upp: anytype, procInfo: anytype, p1: anytype, p2: anytype, p3: anytype, p4: anytype, p5: anytype, p6: anytype, p7: anytype, p8: anytype, p9: anytype, p10: anytype, p11: anytype, p12: anytype) @TypeOf(upp.*(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12)) {
    _ = procInfo;
    return upp.*(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12);
}
pub inline fn CALL_THIRTEEN_PARAMETER_UPP(upp: anytype, procInfo: anytype, p1: anytype, p2: anytype, p3: anytype, p4: anytype, p5: anytype, p6: anytype, p7: anytype, p8: anytype, p9: anytype, p10: anytype, p11: anytype, p12: anytype, p13: anytype) @TypeOf(upp.*(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13)) {
    _ = procInfo;
    return upp.*(p1, p2, p3, p4, p5, p6, p7, p8, p9, p10, p11, p12, p13);
}
pub const __ENDIAN__ = "";
pub inline fn Endian16_Swap(value: anytype) UInt16 {
    return @import("std").zig.c_translation.cast(UInt16, if (__builtin_constant_p(value)) OSSwapConstInt16(value) else OSSwapInt16(value));
}
pub inline fn Endian32_Swap(value: anytype) UInt32 {
    return @import("std").zig.c_translation.cast(UInt32, if (__builtin_constant_p(value)) OSSwapConstInt32(value) else OSSwapInt32(value));
}
pub inline fn Endian64_Swap(value: anytype) UInt64 {
    return @import("std").zig.c_translation.cast(UInt64, if (__builtin_constant_p(value)) OSSwapConstInt64(value) else OSSwapInt64(value));
}
pub inline fn EndianS16_LtoN(value: anytype) @TypeOf(value) {
    return value;
}
pub inline fn EndianS16_NtoL(value: anytype) @TypeOf(value) {
    return value;
}
pub inline fn EndianU16_LtoN(value: anytype) @TypeOf(value) {
    return value;
}
pub inline fn EndianU16_NtoL(value: anytype) @TypeOf(value) {
    return value;
}
pub inline fn EndianS32_LtoN(value: anytype) @TypeOf(value) {
    return value;
}
pub inline fn EndianS32_NtoL(value: anytype) @TypeOf(value) {
    return value;
}
pub inline fn EndianU32_LtoN(value: anytype) @TypeOf(value) {
    return value;
}
pub inline fn EndianU32_NtoL(value: anytype) @TypeOf(value) {
    return value;
}
pub inline fn EndianS64_LtoN(value: anytype) @TypeOf(value) {
    return value;
}
pub inline fn EndianS64_NtoL(value: anytype) @TypeOf(value) {
    return value;
}
pub inline fn EndianU64_LtoN(value: anytype) @TypeOf(value) {
    return value;
}
pub inline fn EndianU64_NtoL(value: anytype) @TypeOf(value) {
    return value;
}
pub inline fn EndianS16_BtoN(value: anytype) @TypeOf(EndianS16_BtoL(value)) {
    return EndianS16_BtoL(value);
}
pub inline fn EndianS16_NtoB(value: anytype) @TypeOf(EndianS16_LtoB(value)) {
    return EndianS16_LtoB(value);
}
pub inline fn EndianU16_BtoN(value: anytype) @TypeOf(EndianU16_BtoL(value)) {
    return EndianU16_BtoL(value);
}
pub inline fn EndianU16_NtoB(value: anytype) @TypeOf(EndianU16_LtoB(value)) {
    return EndianU16_LtoB(value);
}
pub inline fn EndianS32_BtoN(value: anytype) @TypeOf(EndianS32_BtoL(value)) {
    return EndianS32_BtoL(value);
}
pub inline fn EndianS32_NtoB(value: anytype) @TypeOf(EndianS32_LtoB(value)) {
    return EndianS32_LtoB(value);
}
pub inline fn EndianU32_BtoN(value: anytype) @TypeOf(EndianU32_BtoL(value)) {
    return EndianU32_BtoL(value);
}
pub inline fn EndianU32_NtoB(value: anytype) @TypeOf(EndianU32_LtoB(value)) {
    return EndianU32_LtoB(value);
}
pub inline fn EndianS64_BtoN(value: anytype) @TypeOf(EndianS64_BtoL(value)) {
    return EndianS64_BtoL(value);
}
pub inline fn EndianS64_NtoB(value: anytype) @TypeOf(EndianS64_LtoB(value)) {
    return EndianS64_LtoB(value);
}
pub inline fn EndianU64_BtoN(value: anytype) @TypeOf(EndianU64_BtoL(value)) {
    return EndianU64_BtoL(value);
}
pub inline fn EndianU64_NtoB(value: anytype) @TypeOf(EndianU64_LtoB(value)) {
    return EndianU64_LtoB(value);
}
pub inline fn EndianS16_LtoB(value: anytype) SInt16 {
    return @import("std").zig.c_translation.cast(SInt16, Endian16_Swap(value));
}
pub inline fn EndianS16_BtoL(value: anytype) SInt16 {
    return @import("std").zig.c_translation.cast(SInt16, Endian16_Swap(value));
}
pub inline fn EndianU16_LtoB(value: anytype) UInt16 {
    return @import("std").zig.c_translation.cast(UInt16, Endian16_Swap(value));
}
pub inline fn EndianU16_BtoL(value: anytype) UInt16 {
    return @import("std").zig.c_translation.cast(UInt16, Endian16_Swap(value));
}
pub inline fn EndianS32_LtoB(value: anytype) SInt32 {
    return @import("std").zig.c_translation.cast(SInt32, Endian32_Swap(value));
}
pub inline fn EndianS32_BtoL(value: anytype) SInt32 {
    return @import("std").zig.c_translation.cast(SInt32, Endian32_Swap(value));
}
pub inline fn EndianU32_LtoB(value: anytype) UInt32 {
    return @import("std").zig.c_translation.cast(UInt32, Endian32_Swap(value));
}
pub inline fn EndianU32_BtoL(value: anytype) UInt32 {
    return @import("std").zig.c_translation.cast(UInt32, Endian32_Swap(value));
}
pub inline fn EndianS64_LtoB(value: anytype) SInt64 {
    return @import("std").zig.c_translation.cast(SInt64, Endian64_Swap(@import("std").zig.c_translation.cast(UInt64, value)));
}
pub inline fn EndianS64_BtoL(value: anytype) SInt64 {
    return @import("std").zig.c_translation.cast(SInt64, Endian64_Swap(@import("std").zig.c_translation.cast(UInt64, value)));
}
pub inline fn EndianU64_LtoB(value: anytype) UInt64 {
    return @import("std").zig.c_translation.cast(UInt64, Endian64_Swap(value));
}
pub inline fn EndianU64_BtoL(value: anytype) UInt64 {
    return @import("std").zig.c_translation.cast(UInt64, Endian64_Swap(value));
}
pub const __GESTALT__ = "";
pub const __MACMEMORY__ = "";
pub const __MAC_OS_X_MEMORY_MANAGER_CLEAN__ = @as(c_int, 0);
pub const __MATH64__ = "";
pub const __BACKUPCORE__ = "";
pub const __DISKSPACERECOVERY__ = "";
pub const __COMPONENTS__ = "";
pub const __FILES__ = "";
pub const __OSUTILS__ = "";
pub const __DATETIMEUTILS__ = "";
pub inline fn GetMMUMode() SInt8 {
    return @import("std").zig.c_translation.cast(SInt8, true32b);
}
pub const __DISKARBITRATION_DADISK__ = "";
pub const _IOKIT_IOKITLIB_H = "";
pub const _MACH_MACH_TYPES_H_ = "";
pub const _MACH_HOST_INFO_H_ = "";
pub const _MACH_VM_STATISTICS_H_ = "";
pub inline fn VM_STATISTICS_TRUNCATE_TO_32_BIT(value: anytype) u32 {
    return @import("std").zig.c_translation.cast(u32, if (value > UINT32_MAX) UINT32_MAX else value);
}
pub const VM_PAGE_QUERY_PAGE_PRESENT = @as(c_int, 0x1);
pub const VM_PAGE_QUERY_PAGE_FICTITIOUS = @as(c_int, 0x2);
pub const VM_PAGE_QUERY_PAGE_REF = @as(c_int, 0x4);
pub const VM_PAGE_QUERY_PAGE_DIRTY = @as(c_int, 0x8);
pub const VM_PAGE_QUERY_PAGE_PAGED_OUT = @as(c_int, 0x10);
pub const VM_PAGE_QUERY_PAGE_COPIED = @as(c_int, 0x20);
pub const VM_PAGE_QUERY_PAGE_SPECULATIVE = @as(c_int, 0x40);
pub const VM_PAGE_QUERY_PAGE_EXTERNAL = @as(c_int, 0x80);
pub const VM_PAGE_QUERY_PAGE_CS_VALIDATED = @as(c_int, 0x100);
pub const VM_PAGE_QUERY_PAGE_CS_TAINTED = @as(c_int, 0x200);
pub const VM_PAGE_QUERY_PAGE_CS_NX = @as(c_int, 0x400);
pub const VM_PAGE_QUERY_PAGE_REUSABLE = @as(c_int, 0x800);
pub const VM_FLAGS_FIXED = @as(c_int, 0x0000);
pub const VM_FLAGS_ANYWHERE = @as(c_int, 0x0001);
pub const VM_FLAGS_PURGABLE = @as(c_int, 0x0002);
pub const VM_FLAGS_4GB_CHUNK = @as(c_int, 0x0004);
pub const VM_FLAGS_RANDOM_ADDR = @as(c_int, 0x0008);
pub const VM_FLAGS_NO_CACHE = @as(c_int, 0x0010);
pub const VM_FLAGS_RESILIENT_CODESIGN = @as(c_int, 0x0020);
pub const VM_FLAGS_RESILIENT_MEDIA = @as(c_int, 0x0040);
pub const VM_FLAGS_PERMANENT = @as(c_int, 0x0080);
pub const VM_FLAGS_OVERWRITE = @as(c_int, 0x4000);
pub const VM_FLAGS_SUPERPAGE_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x70000, .hexadecimal);
pub const VM_FLAGS_RETURN_DATA_ADDR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x100000, .hexadecimal);
pub const VM_FLAGS_RETURN_4K_DATA_ADDR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800000, .hexadecimal);
pub const VM_FLAGS_ALIAS_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFF000000, .hexadecimal);
pub const VM_FLAGS_USER_ALLOCATE = ((((((((VM_FLAGS_FIXED | VM_FLAGS_ANYWHERE) | VM_FLAGS_PURGABLE) | VM_FLAGS_4GB_CHUNK) | VM_FLAGS_RANDOM_ADDR) | VM_FLAGS_NO_CACHE) | VM_FLAGS_PERMANENT) | VM_FLAGS_OVERWRITE) | VM_FLAGS_SUPERPAGE_MASK) | VM_FLAGS_ALIAS_MASK;
pub const VM_FLAGS_USER_MAP = (VM_FLAGS_USER_ALLOCATE | VM_FLAGS_RETURN_4K_DATA_ADDR) | VM_FLAGS_RETURN_DATA_ADDR;
pub const VM_FLAGS_USER_REMAP = (((((VM_FLAGS_FIXED | VM_FLAGS_ANYWHERE) | VM_FLAGS_RANDOM_ADDR) | VM_FLAGS_OVERWRITE) | VM_FLAGS_RETURN_DATA_ADDR) | VM_FLAGS_RESILIENT_CODESIGN) | VM_FLAGS_RESILIENT_MEDIA;
pub const VM_FLAGS_SUPERPAGE_SHIFT = @as(c_int, 16);
pub const SUPERPAGE_NONE = @as(c_int, 0);
pub const SUPERPAGE_SIZE_ANY = @as(c_int, 1);
pub const VM_FLAGS_SUPERPAGE_NONE = SUPERPAGE_NONE << VM_FLAGS_SUPERPAGE_SHIFT;
pub const VM_FLAGS_SUPERPAGE_SIZE_ANY = SUPERPAGE_SIZE_ANY << VM_FLAGS_SUPERPAGE_SHIFT;
pub const SUPERPAGE_SIZE_2MB = @as(c_int, 2);
pub const VM_FLAGS_SUPERPAGE_SIZE_2MB = SUPERPAGE_SIZE_2MB << VM_FLAGS_SUPERPAGE_SHIFT;
pub const GUARD_TYPE_VIRT_MEMORY = @as(c_int, 0x5);
pub const __VM_LEDGER_ACCOUNTING_POSTMARK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 2019032600, .decimal);
pub const VM_LEDGER_TAG_NONE = @as(c_int, 0x00000000);
pub const VM_LEDGER_TAG_DEFAULT = @as(c_int, 0x00000001);
pub const VM_LEDGER_TAG_NETWORK = @as(c_int, 0x00000002);
pub const VM_LEDGER_TAG_MEDIA = @as(c_int, 0x00000003);
pub const VM_LEDGER_TAG_GRAPHICS = @as(c_int, 0x00000004);
pub const VM_LEDGER_TAG_NEURAL = @as(c_int, 0x00000005);
pub const VM_LEDGER_TAG_MAX = @as(c_int, 0x00000005);
pub const VM_LEDGER_FLAG_NO_FOOTPRINT = @as(c_int, 1) << @as(c_int, 0);
pub const VM_LEDGER_FLAG_NO_FOOTPRINT_FOR_DEBUG = @as(c_int, 1) << @as(c_int, 1);
pub const VM_LEDGER_FLAGS = VM_LEDGER_FLAG_NO_FOOTPRINT | VM_LEDGER_FLAG_NO_FOOTPRINT_FOR_DEBUG;
pub const VM_MEMORY_MALLOC = @as(c_int, 1);
pub const VM_MEMORY_MALLOC_SMALL = @as(c_int, 2);
pub const VM_MEMORY_MALLOC_LARGE = @as(c_int, 3);
pub const VM_MEMORY_MALLOC_HUGE = @as(c_int, 4);
pub const VM_MEMORY_SBRK = @as(c_int, 5);
pub const VM_MEMORY_REALLOC = @as(c_int, 6);
pub const VM_MEMORY_MALLOC_TINY = @as(c_int, 7);
pub const VM_MEMORY_MALLOC_LARGE_REUSABLE = @as(c_int, 8);
pub const VM_MEMORY_MALLOC_LARGE_REUSED = @as(c_int, 9);
pub const VM_MEMORY_ANALYSIS_TOOL = @as(c_int, 10);
pub const VM_MEMORY_MALLOC_NANO = @as(c_int, 11);
pub const VM_MEMORY_MALLOC_MEDIUM = @as(c_int, 12);
pub const VM_MEMORY_MALLOC_PGUARD = @as(c_int, 13);
pub const VM_MEMORY_MALLOC_PROB_GUARD = @as(c_int, 13);
pub const VM_MEMORY_MACH_MSG = @as(c_int, 20);
pub const VM_MEMORY_IOKIT = @as(c_int, 21);
pub const VM_MEMORY_STACK = @as(c_int, 30);
pub const VM_MEMORY_GUARD = @as(c_int, 31);
pub const VM_MEMORY_SHARED_PMAP = @as(c_int, 32);
pub const VM_MEMORY_DYLIB = @as(c_int, 33);
pub const VM_MEMORY_OBJC_DISPATCHERS = @as(c_int, 34);
pub const VM_MEMORY_UNSHARED_PMAP = @as(c_int, 35);
pub const VM_MEMORY_APPKIT = @as(c_int, 40);
pub const VM_MEMORY_FOUNDATION = @as(c_int, 41);
pub const VM_MEMORY_COREGRAPHICS = @as(c_int, 42);
pub const VM_MEMORY_CORESERVICES = @as(c_int, 43);
pub const VM_MEMORY_CARBON = VM_MEMORY_CORESERVICES;
pub const VM_MEMORY_JAVA = @as(c_int, 44);
pub const VM_MEMORY_COREDATA = @as(c_int, 45);
pub const VM_MEMORY_COREDATA_OBJECTIDS = @as(c_int, 46);
pub const VM_MEMORY_ATS = @as(c_int, 50);
pub const VM_MEMORY_LAYERKIT = @as(c_int, 51);
pub const VM_MEMORY_CGIMAGE = @as(c_int, 52);
pub const VM_MEMORY_TCMALLOC = @as(c_int, 53);
pub const VM_MEMORY_COREGRAPHICS_DATA = @as(c_int, 54);
pub const VM_MEMORY_COREGRAPHICS_SHARED = @as(c_int, 55);
pub const VM_MEMORY_COREGRAPHICS_FRAMEBUFFERS = @as(c_int, 56);
pub const VM_MEMORY_COREGRAPHICS_BACKINGSTORES = @as(c_int, 57);
pub const VM_MEMORY_COREGRAPHICS_XALLOC = @as(c_int, 58);
pub const VM_MEMORY_COREGRAPHICS_MISC = VM_MEMORY_COREGRAPHICS;
pub const VM_MEMORY_DYLD = @as(c_int, 60);
pub const VM_MEMORY_DYLD_MALLOC = @as(c_int, 61);
pub const VM_MEMORY_SQLITE = @as(c_int, 62);
pub const VM_MEMORY_JAVASCRIPT_CORE = @as(c_int, 63);
pub const VM_MEMORY_WEBASSEMBLY = VM_MEMORY_JAVASCRIPT_CORE;
pub const VM_MEMORY_JAVASCRIPT_JIT_EXECUTABLE_ALLOCATOR = @as(c_int, 64);
pub const VM_MEMORY_JAVASCRIPT_JIT_REGISTER_FILE = @as(c_int, 65);
pub const VM_MEMORY_GLSL = @as(c_int, 66);
pub const VM_MEMORY_OPENCL = @as(c_int, 67);
pub const VM_MEMORY_COREIMAGE = @as(c_int, 68);
pub const VM_MEMORY_WEBCORE_PURGEABLE_BUFFERS = @as(c_int, 69);
pub const VM_MEMORY_IMAGEIO = @as(c_int, 70);
pub const VM_MEMORY_COREPROFILE = @as(c_int, 71);
pub const VM_MEMORY_ASSETSD = @as(c_int, 72);
pub const VM_MEMORY_OS_ALLOC_ONCE = @as(c_int, 73);
pub const VM_MEMORY_LIBDISPATCH = @as(c_int, 74);
pub const VM_MEMORY_ACCELERATE = @as(c_int, 75);
pub const VM_MEMORY_COREUI = @as(c_int, 76);
pub const VM_MEMORY_COREUIFILE = @as(c_int, 77);
pub const VM_MEMORY_GENEALOGY = @as(c_int, 78);
pub const VM_MEMORY_RAWCAMERA = @as(c_int, 79);
pub const VM_MEMORY_CORPSEINFO = @as(c_int, 80);
pub const VM_MEMORY_ASL = @as(c_int, 81);
pub const VM_MEMORY_SWIFT_RUNTIME = @as(c_int, 82);
pub const VM_MEMORY_SWIFT_METADATA = @as(c_int, 83);
pub const VM_MEMORY_DHMM = @as(c_int, 84);
pub const VM_MEMORY_SCENEKIT = @as(c_int, 86);
pub const VM_MEMORY_SKYWALK = @as(c_int, 87);
pub const VM_MEMORY_IOSURFACE = @as(c_int, 88);
pub const VM_MEMORY_LIBNETWORK = @as(c_int, 89);
pub const VM_MEMORY_AUDIO = @as(c_int, 90);
pub const VM_MEMORY_VIDEOBITSTREAM = @as(c_int, 91);
pub const VM_MEMORY_CM_XPC = @as(c_int, 92);
pub const VM_MEMORY_CM_RPC = @as(c_int, 93);
pub const VM_MEMORY_CM_MEMORYPOOL = @as(c_int, 94);
pub const VM_MEMORY_CM_READCACHE = @as(c_int, 95);
pub const VM_MEMORY_CM_CRABS = @as(c_int, 96);
pub const VM_MEMORY_QUICKLOOK_THUMBNAILS = @as(c_int, 97);
pub const VM_MEMORY_ACCOUNTS = @as(c_int, 98);
pub const VM_MEMORY_SANITIZER = @as(c_int, 99);
pub const VM_MEMORY_IOACCELERATOR = @as(c_int, 100);
pub const VM_MEMORY_CM_REGWARP = @as(c_int, 101);
pub const VM_MEMORY_EAR_DECODER = @as(c_int, 102);
pub const VM_MEMORY_COREUI_CACHED_IMAGE_DATA = @as(c_int, 103);
pub const VM_MEMORY_COLORSYNC = @as(c_int, 104);
pub const VM_MEMORY_ROSETTA = @as(c_int, 230);
pub const VM_MEMORY_ROSETTA_THREAD_CONTEXT = @as(c_int, 231);
pub const VM_MEMORY_ROSETTA_INDIRECT_BRANCH_MAP = @as(c_int, 232);
pub const VM_MEMORY_ROSETTA_RETURN_STACK = @as(c_int, 233);
pub const VM_MEMORY_ROSETTA_EXECUTABLE_HEAP = @as(c_int, 234);
pub const VM_MEMORY_ROSETTA_USER_LDT = @as(c_int, 235);
pub const VM_MEMORY_ROSETTA_ARENA = @as(c_int, 236);
pub const VM_MEMORY_ROSETTA_10 = @as(c_int, 239);
pub const VM_MEMORY_APPLICATION_SPECIFIC_1 = @as(c_int, 240);
pub const VM_MEMORY_APPLICATION_SPECIFIC_16 = @as(c_int, 255);
pub inline fn VM_MAKE_TAG(tag: anytype) @TypeOf(tag << @as(c_int, 24)) {
    return tag << @as(c_int, 24);
}
pub const HOST_INFO_MAX = @as(c_int, 1024);
pub const KERNEL_VERSION_MAX = @as(c_int, 512);
pub const KERNEL_BOOT_INFO_MAX = @as(c_int, 4096);
pub const HOST_BASIC_INFO = @as(c_int, 1);
pub const HOST_SCHED_INFO = @as(c_int, 3);
pub const HOST_RESOURCE_SIZES = @as(c_int, 4);
pub const HOST_PRIORITY_INFO = @as(c_int, 5);
pub const HOST_SEMAPHORE_TRAPS = @as(c_int, 7);
pub const HOST_MACH_MSG_TRAP = @as(c_int, 8);
pub const HOST_VM_PURGABLE = @as(c_int, 9);
pub const HOST_DEBUG_INFO_INTERNAL = @as(c_int, 10);
pub const HOST_CAN_HAS_DEBUGGER = @as(c_int, 11);
pub const HOST_PREFERRED_USER_ARCH = @as(c_int, 12);
pub const HOST_CAN_HAS_DEBUGGER_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(host_can_has_debugger_info_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const HOST_BASIC_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(host_basic_info_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const HOST_SCHED_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(host_sched_info_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const HOST_RESOURCE_SIZES_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(kernel_resource_sizes_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const HOST_PRIORITY_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(host_priority_info_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const HOST_LOAD_INFO = @as(c_int, 1);
pub const HOST_VM_INFO = @as(c_int, 2);
pub const HOST_CPU_LOAD_INFO = @as(c_int, 3);
pub const HOST_VM_INFO64 = @as(c_int, 4);
pub const HOST_EXTMOD_INFO64 = @as(c_int, 5);
pub const HOST_EXPIRED_TASK_INFO = @as(c_int, 6);
pub const HOST_LOAD_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(host_load_info_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const HOST_VM_PURGABLE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(host_purgable_info_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const HOST_VM_INFO64_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(vm_statistics64_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const HOST_VM_INFO64_LATEST_COUNT = HOST_VM_INFO64_COUNT;
pub const HOST_VM_INFO64_REV1_COUNT = HOST_VM_INFO64_LATEST_COUNT;
pub const HOST_VM_INFO64_REV0_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, HOST_VM_INFO64_REV1_COUNT - @as(c_int, 14));
pub const HOST_EXTMOD_INFO64_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(vm_extmod_statistics_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const HOST_EXTMOD_INFO64_LATEST_COUNT = HOST_EXTMOD_INFO64_COUNT;
pub const HOST_VM_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(vm_statistics_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const HOST_VM_INFO_LATEST_COUNT = HOST_VM_INFO_COUNT;
pub const HOST_VM_INFO_REV2_COUNT = HOST_VM_INFO_LATEST_COUNT;
pub const HOST_VM_INFO_REV1_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, HOST_VM_INFO_REV2_COUNT - @as(c_int, 1));
pub const HOST_VM_INFO_REV0_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, HOST_VM_INFO_REV1_COUNT - @as(c_int, 2));
pub const HOST_CPU_LOAD_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(host_cpu_load_info_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const HOST_PREFERRED_USER_ARCH_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(host_preferred_user_arch_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const _MACH_HOST_NOTIFY_H_ = "";
pub const HOST_NOTIFY_CALENDAR_CHANGE = @as(c_int, 0);
pub const HOST_NOTIFY_CALENDAR_SET = @as(c_int, 1);
pub const HOST_NOTIFY_TYPE_MAX = @as(c_int, 1);
pub const HOST_CALENDAR_CHANGED_REPLYID = @as(c_int, 950);
pub const HOST_CALENDAR_SET_REPLYID = @as(c_int, 951);
pub const _MACH_HOST_SPECIAL_PORTS_H_ = "";
pub const HOST_SECURITY_PORT = @as(c_int, 0);
pub const HOST_MIN_SPECIAL_PORT = HOST_SECURITY_PORT;
pub const HOST_PORT = @as(c_int, 1);
pub const HOST_PRIV_PORT = @as(c_int, 2);
pub const HOST_IO_MASTER_PORT = @as(c_int, 3);
pub const HOST_MAX_SPECIAL_KERNEL_PORT = @as(c_int, 7);
pub const HOST_LAST_SPECIAL_KERNEL_PORT = HOST_IO_MASTER_PORT;
pub const HOST_DYNAMIC_PAGER_PORT = @as(c_int, 1) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_AUDIT_CONTROL_PORT = @as(c_int, 2) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_USER_NOTIFICATION_PORT = @as(c_int, 3) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_AUTOMOUNTD_PORT = @as(c_int, 4) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_LOCKD_PORT = @as(c_int, 5) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_KTRACE_BACKGROUND_PORT = @as(c_int, 6) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_SEATBELT_PORT = @as(c_int, 7) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_KEXTD_PORT = @as(c_int, 8) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_LAUNCHCTL_PORT = @as(c_int, 9) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_UNFREED_PORT = @as(c_int, 10) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_AMFID_PORT = @as(c_int, 11) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_GSSD_PORT = @as(c_int, 12) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_TELEMETRY_PORT = @as(c_int, 13) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_ATM_NOTIFICATION_PORT = @as(c_int, 14) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_COALITION_PORT = @as(c_int, 15) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_SYSDIAGNOSE_PORT = @as(c_int, 16) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_XPC_EXCEPTION_PORT = @as(c_int, 17) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_CONTAINERD_PORT = @as(c_int, 18) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_NODE_PORT = @as(c_int, 19) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_RESOURCE_NOTIFY_PORT = @as(c_int, 20) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_CLOSURED_PORT = @as(c_int, 21) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_SYSPOLICYD_PORT = @as(c_int, 22) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_FILECOORDINATIOND_PORT = @as(c_int, 23) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_FAIRPLAYD_PORT = @as(c_int, 24) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_IOCOMPRESSIONSTATS_PORT = @as(c_int, 25) + HOST_MAX_SPECIAL_KERNEL_PORT;
pub const HOST_MAX_SPECIAL_PORT = HOST_IOCOMPRESSIONSTATS_PORT;
pub const HOST_CHUD_PORT = HOST_LAUNCHCTL_PORT;
pub const HOST_LOCAL_NODE = -@as(c_int, 1);
pub inline fn host_get_host_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_PORT, port);
}
pub inline fn host_set_host_port(host: anytype, port: anytype) @TypeOf(KERN_INVALID_ARGUMENT) {
    _ = host;
    _ = port;
    return KERN_INVALID_ARGUMENT;
}
pub inline fn host_get_host_priv_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_PRIV_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_PRIV_PORT, port);
}
pub inline fn host_set_host_priv_port(host: anytype, port: anytype) @TypeOf(KERN_INVALID_ARGUMENT) {
    _ = host;
    _ = port;
    return KERN_INVALID_ARGUMENT;
}
pub inline fn host_get_io_master_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_IO_MASTER_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_IO_MASTER_PORT, port);
}
pub inline fn host_set_io_master_port(host: anytype, port: anytype) @TypeOf(KERN_INVALID_ARGUMENT) {
    _ = host;
    _ = port;
    return KERN_INVALID_ARGUMENT;
}
pub inline fn host_get_dynamic_pager_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_DYNAMIC_PAGER_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_DYNAMIC_PAGER_PORT, port);
}
pub inline fn host_set_dynamic_pager_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_DYNAMIC_PAGER_PORT, port)) {
    return host_set_special_port(host, HOST_DYNAMIC_PAGER_PORT, port);
}
pub inline fn host_get_audit_control_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_AUDIT_CONTROL_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_AUDIT_CONTROL_PORT, port);
}
pub inline fn host_set_audit_control_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_AUDIT_CONTROL_PORT, port)) {
    return host_set_special_port(host, HOST_AUDIT_CONTROL_PORT, port);
}
pub inline fn host_get_user_notification_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_USER_NOTIFICATION_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_USER_NOTIFICATION_PORT, port);
}
pub inline fn host_set_user_notification_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_USER_NOTIFICATION_PORT, port)) {
    return host_set_special_port(host, HOST_USER_NOTIFICATION_PORT, port);
}
pub inline fn host_get_automountd_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_AUTOMOUNTD_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_AUTOMOUNTD_PORT, port);
}
pub inline fn host_set_automountd_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_AUTOMOUNTD_PORT, port)) {
    return host_set_special_port(host, HOST_AUTOMOUNTD_PORT, port);
}
pub inline fn host_get_lockd_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_LOCKD_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_LOCKD_PORT, port);
}
pub inline fn host_set_lockd_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_LOCKD_PORT, port)) {
    return host_set_special_port(host, HOST_LOCKD_PORT, port);
}
pub inline fn host_get_ktrace_background_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_KTRACE_BACKGROUND_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_KTRACE_BACKGROUND_PORT, port);
}
pub inline fn host_set_ktrace_background_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_KTRACE_BACKGROUND_PORT, port)) {
    return host_set_special_port(host, HOST_KTRACE_BACKGROUND_PORT, port);
}
pub inline fn host_get_kextd_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_KEXTD_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_KEXTD_PORT, port);
}
pub inline fn host_set_kextd_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_KEXTD_PORT, port)) {
    return host_set_special_port(host, HOST_KEXTD_PORT, port);
}
pub inline fn host_get_launchctl_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_LAUNCHCTL_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_LAUNCHCTL_PORT, port);
}
pub inline fn host_set_launchctl_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_LAUNCHCTL_PORT, port)) {
    return host_set_special_port(host, HOST_LAUNCHCTL_PORT, port);
}
pub inline fn host_get_chud_port(host: anytype, port: anytype) @TypeOf(host_get_launchctl_port(host, port)) {
    return host_get_launchctl_port(host, port);
}
pub inline fn host_set_chud_port(host: anytype, port: anytype) @TypeOf(host_set_launchctl_port(host, port)) {
    return host_set_launchctl_port(host, port);
}
pub inline fn host_get_unfreed_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_UNFREED_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_UNFREED_PORT, port);
}
pub inline fn host_set_unfreed_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_UNFREED_PORT, port)) {
    return host_set_special_port(host, HOST_UNFREED_PORT, port);
}
pub inline fn host_get_amfid_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_AMFID_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_AMFID_PORT, port);
}
pub inline fn host_set_amfid_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_AMFID_PORT, port)) {
    return host_set_special_port(host, HOST_AMFID_PORT, port);
}
pub inline fn host_get_gssd_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_GSSD_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_GSSD_PORT, port);
}
pub inline fn host_set_gssd_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_GSSD_PORT, port)) {
    return host_set_special_port(host, HOST_GSSD_PORT, port);
}
pub inline fn host_get_telemetry_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_TELEMETRY_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_TELEMETRY_PORT, port);
}
pub inline fn host_set_telemetry_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_TELEMETRY_PORT, port)) {
    return host_set_special_port(host, HOST_TELEMETRY_PORT, port);
}
pub inline fn host_get_atm_notification_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_ATM_NOTIFICATION_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_ATM_NOTIFICATION_PORT, port);
}
pub inline fn host_set_atm_notification_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_ATM_NOTIFICATION_PORT, port)) {
    return host_set_special_port(host, HOST_ATM_NOTIFICATION_PORT, port);
}
pub inline fn host_get_coalition_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_COALITION_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_COALITION_PORT, port);
}
pub inline fn host_set_coalition_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_COALITION_PORT, port)) {
    return host_set_special_port(host, HOST_COALITION_PORT, port);
}
pub inline fn host_get_sysdiagnose_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_SYSDIAGNOSE_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_SYSDIAGNOSE_PORT, port);
}
pub inline fn host_set_sysdiagnose_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_SYSDIAGNOSE_PORT, port)) {
    return host_set_special_port(host, HOST_SYSDIAGNOSE_PORT, port);
}
pub inline fn host_get_container_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_CONTAINERD_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_CONTAINERD_PORT, port);
}
pub inline fn host_set_container_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_CONTAINERD_PORT, port)) {
    return host_set_special_port(host, HOST_CONTAINERD_PORT, port);
}
pub inline fn host_get_node_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_NODE_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_NODE_PORT, port);
}
pub inline fn host_set_node_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_NODE_PORT, port)) {
    return host_set_special_port(host, HOST_NODE_PORT, port);
}
pub inline fn host_get_closured_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_CLOSURED_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_CLOSURED_PORT, port);
}
pub inline fn host_set_closured_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_CLOSURED_PORT, port)) {
    return host_set_special_port(host, HOST_CLOSURED_PORT, port);
}
pub inline fn host_get_syspolicyd_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_SYSPOLICYD_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_SYSPOLICYD_PORT, port);
}
pub inline fn host_set_syspolicyd_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_SYSPOLICYD_PORT, port)) {
    return host_set_special_port(host, HOST_SYSPOLICYD_PORT, port);
}
pub inline fn host_get_filecoordinationd_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_FILECOORDINATIOND_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_FILECOORDINATIOND_PORT, port);
}
pub inline fn host_set_filecoordinationd_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_FILECOORDINATIOND_PORT, port)) {
    return host_set_special_port(host, HOST_FILECOORDINATIOND_PORT, port);
}
pub inline fn host_get_fairplayd_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_FAIRPLAYD_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_FAIRPLAYD_PORT, port);
}
pub inline fn host_set_fairplayd_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_FAIRPLAYD_PORT, port)) {
    return host_set_special_port(host, HOST_FAIRPLAYD_PORT, port);
}
pub inline fn host_get_iocompressionstats_port(host: anytype, port: anytype) @TypeOf(host_get_special_port(host, HOST_LOCAL_NODE, HOST_IOCOMPRESSIONSTATS_PORT, port)) {
    return host_get_special_port(host, HOST_LOCAL_NODE, HOST_IOCOMPRESSIONSTATS_PORT, port);
}
pub inline fn host_set_iocompressionstats_port(host: anytype, port: anytype) @TypeOf(host_set_special_port(host, HOST_IOCOMPRESSIONSTATS_PORT, port)) {
    return host_set_special_port(host, HOST_IOCOMPRESSIONSTATS_PORT, port);
}
pub const _MACH_MEMORY_OBJECT_TYPES_H_ = "";
pub const _MACH_VM_PROT_H_ = "";
pub const VM_PROT_NONE = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x00));
pub const VM_PROT_READ = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x01));
pub const VM_PROT_WRITE = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x02));
pub const VM_PROT_EXECUTE = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x04));
pub const VM_PROT_DEFAULT = VM_PROT_READ | VM_PROT_WRITE;
pub const VM_PROT_ALL = (VM_PROT_READ | VM_PROT_WRITE) | VM_PROT_EXECUTE;
pub const VM_PROT_NO_CHANGE_LEGACY = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x08));
pub const VM_PROT_NO_CHANGE = @import("std").zig.c_translation.cast(vm_prot_t, @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal));
pub const VM_PROT_COPY = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x10));
pub const VM_PROT_WANTS_COPY = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x10));
pub const VM_PROT_IS_MASK = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x40));
pub const VM_PROT_STRIP_READ = @import("std").zig.c_translation.cast(vm_prot_t, @as(c_int, 0x80));
pub const VM_PROT_EXECUTE_ONLY = VM_PROT_EXECUTE | VM_PROT_STRIP_READ;
pub const VM_PROT_ALLEXEC = VM_PROT_EXECUTE;
pub const _MACH_VM_SYNC_H_ = "";
pub const VM_SYNC_ASYNCHRONOUS = @import("std").zig.c_translation.cast(vm_sync_t, @as(c_int, 0x01));
pub const VM_SYNC_SYNCHRONOUS = @import("std").zig.c_translation.cast(vm_sync_t, @as(c_int, 0x02));
pub const VM_SYNC_INVALIDATE = @import("std").zig.c_translation.cast(vm_sync_t, @as(c_int, 0x04));
pub const VM_SYNC_KILLPAGES = @import("std").zig.c_translation.cast(vm_sync_t, @as(c_int, 0x08));
pub const VM_SYNC_DEACTIVATE = @import("std").zig.c_translation.cast(vm_sync_t, @as(c_int, 0x10));
pub const VM_SYNC_CONTIGUOUS = @import("std").zig.c_translation.cast(vm_sync_t, @as(c_int, 0x20));
pub const VM_SYNC_REUSABLEPAGES = @import("std").zig.c_translation.cast(vm_sync_t, @as(c_int, 0x40));
pub const _MACH_VM_TYPES_H_ = "";
pub const PPNUM_MAX = UINT32_MAX;
pub const VM_MAP_NULL = @import("std").zig.c_translation.cast(vm_map_t, @as(c_int, 0));
pub const VM_MAP_INSPECT_NULL = @import("std").zig.c_translation.cast(vm_map_inspect_t, @as(c_int, 0));
pub const VM_MAP_READ_NULL = @import("std").zig.c_translation.cast(vm_map_read_t, @as(c_int, 0));
pub const UPL_NULL = @import("std").zig.c_translation.cast(upl_t, @as(c_int, 0));
pub const VM_NAMED_ENTRY_NULL = @import("std").zig.c_translation.cast(vm_named_entry_t, @as(c_int, 0));
pub const VM_64_BIT_DATA_OBJECTS = "";
pub const MEMORY_OBJECT_NULL = @import("std").zig.c_translation.cast(memory_object_t, @as(c_int, 0));
pub const MEMORY_OBJECT_CONTROL_NULL = @import("std").zig.c_translation.cast(memory_object_control_t, @as(c_int, 0));
pub const MEMORY_OBJECT_NAME_NULL = @import("std").zig.c_translation.cast(memory_object_name_t, @as(c_int, 0));
pub const MEMORY_OBJECT_DEFAULT_NULL = @import("std").zig.c_translation.cast(memory_object_default_t, @as(c_int, 0));
pub const MEMORY_OBJECT_COPY_NONE = @as(c_int, 0);
pub const MEMORY_OBJECT_COPY_CALL = @as(c_int, 1);
pub const MEMORY_OBJECT_COPY_DELAY = @as(c_int, 2);
pub const MEMORY_OBJECT_COPY_TEMPORARY = @as(c_int, 3);
pub const MEMORY_OBJECT_COPY_SYMMETRIC = @as(c_int, 4);
pub const MEMORY_OBJECT_COPY_INVALID = @as(c_int, 5);
pub const MEMORY_OBJECT_RETURN_NONE = @as(c_int, 0);
pub const MEMORY_OBJECT_RETURN_DIRTY = @as(c_int, 1);
pub const MEMORY_OBJECT_RETURN_ALL = @as(c_int, 2);
pub const MEMORY_OBJECT_RETURN_ANYTHING = @as(c_int, 3);
pub const MEMORY_OBJECT_DATA_FLUSH = @as(c_int, 0x1);
pub const MEMORY_OBJECT_DATA_NO_CHANGE = @as(c_int, 0x2);
pub const MEMORY_OBJECT_DATA_PURGE = @as(c_int, 0x4);
pub const MEMORY_OBJECT_COPY_SYNC = @as(c_int, 0x8);
pub const MEMORY_OBJECT_DATA_SYNC = @as(c_int, 0x10);
pub const MEMORY_OBJECT_IO_SYNC = @as(c_int, 0x20);
pub const MEMORY_OBJECT_DATA_FLUSH_ALL = @as(c_int, 0x40);
pub const MEMORY_OBJECT_INFO_MAX = @as(c_int, 1024);
pub const MEMORY_OBJECT_PERFORMANCE_INFO = @as(c_int, 11);
pub const MEMORY_OBJECT_ATTRIBUTE_INFO = @as(c_int, 14);
pub const MEMORY_OBJECT_BEHAVIOR_INFO = @as(c_int, 15);
pub const MEMORY_OBJECT_BEHAVE_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(memory_object_behave_info_data_t) / @import("std").zig.c_translation.sizeof(c_int));
pub const MEMORY_OBJECT_PERF_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(memory_object_perf_info_data_t) / @import("std").zig.c_translation.sizeof(c_int));
pub const MEMORY_OBJECT_ATTR_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(memory_object_attr_info_data_t) / @import("std").zig.c_translation.sizeof(c_int));
pub const MEMORY_OBJECT_TERMINATE_IDLE = @as(c_int, 0x1);
pub const MEMORY_OBJECT_RESPECT_CACHE = @as(c_int, 0x2);
pub const MEMORY_OBJECT_RELEASE_NO_OP = @as(c_int, 0x4);
pub const MAP_MEM_NOOP = @as(c_int, 0);
pub const MAP_MEM_COPYBACK = @as(c_int, 1);
pub const MAP_MEM_IO = @as(c_int, 2);
pub const MAP_MEM_WTHRU = @as(c_int, 3);
pub const MAP_MEM_WCOMB = @as(c_int, 4);
pub const MAP_MEM_INNERWBACK = @as(c_int, 5);
pub const MAP_MEM_POSTED = @as(c_int, 6);
pub const MAP_MEM_RT = @as(c_int, 7);
pub const MAP_MEM_POSTED_REORDERED = @as(c_int, 8);
pub const MAP_MEM_POSTED_COMBINED_REORDERED = @as(c_int, 9);
pub inline fn GET_MAP_MEM(flags: anytype) @TypeOf((@import("std").zig.c_translation.cast(c_uint, flags) >> @as(c_int, 24)) & @as(c_int, 0xFF)) {
    return (@import("std").zig.c_translation.cast(c_uint, flags) >> @as(c_int, 24)) & @as(c_int, 0xFF);
}
pub const MAP_MEM_LEDGER_TAGGED = @as(c_int, 0x002000);
pub const MAP_MEM_PURGABLE_KERNEL_ONLY = @as(c_int, 0x004000);
pub const MAP_MEM_GRAB_SECLUDED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x008000, .hexadecimal);
pub const MAP_MEM_ONLY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x010000, .hexadecimal);
pub const MAP_MEM_NAMED_CREATE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x020000, .hexadecimal);
pub const MAP_MEM_PURGABLE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x040000, .hexadecimal);
pub const MAP_MEM_NAMED_REUSE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x080000, .hexadecimal);
pub const MAP_MEM_USE_DATA_ADDR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x100000, .hexadecimal);
pub const MAP_MEM_VM_COPY = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x200000, .hexadecimal);
pub const MAP_MEM_VM_SHARE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400000, .hexadecimal);
pub const MAP_MEM_4K_DATA_ADDR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800000, .hexadecimal);
pub const MAP_MEM_FLAGS_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00FFFF00, .hexadecimal);
pub const MAP_MEM_FLAGS_USER = (((((((((MAP_MEM_PURGABLE_KERNEL_ONLY | MAP_MEM_GRAB_SECLUDED) | MAP_MEM_ONLY) | MAP_MEM_NAMED_CREATE) | MAP_MEM_PURGABLE) | MAP_MEM_NAMED_REUSE) | MAP_MEM_USE_DATA_ADDR) | MAP_MEM_VM_COPY) | MAP_MEM_VM_SHARE) | MAP_MEM_LEDGER_TAGGED) | MAP_MEM_4K_DATA_ADDR;
pub const MAP_MEM_FLAGS_ALL = MAP_MEM_FLAGS_USER;
pub const _MACH_EXCEPTION_TYPES_H_ = "";
pub const _MACH_MACHINE_EXCEPTION_H_ = "";
pub const _MACH_ARM_EXCEPTION_H_ = "";
pub const EXC_TYPES_COUNT = @as(c_int, 14);
pub const EXC_MASK_MACHINE = @as(c_int, 0);
pub const EXCEPTION_CODE_MAX = @as(c_int, 2);
pub const EXC_ARM_UNDEFINED = @as(c_int, 1);
pub const EXC_ARM_FP_UNDEFINED = @as(c_int, 0);
pub const EXC_ARM_FP_IO = @as(c_int, 1);
pub const EXC_ARM_FP_DZ = @as(c_int, 2);
pub const EXC_ARM_FP_OF = @as(c_int, 3);
pub const EXC_ARM_FP_UF = @as(c_int, 4);
pub const EXC_ARM_FP_IX = @as(c_int, 5);
pub const EXC_ARM_FP_ID = @as(c_int, 6);
pub const EXC_ARM_DA_ALIGN = @as(c_int, 0x101);
pub const EXC_ARM_DA_DEBUG = @as(c_int, 0x102);
pub const EXC_ARM_SP_ALIGN = @as(c_int, 0x103);
pub const EXC_ARM_SWP = @as(c_int, 0x104);
pub const EXC_ARM_PAC_FAIL = @as(c_int, 0x105);
pub const EXC_ARM_BREAKPOINT = @as(c_int, 1);
pub const EXC_BAD_ACCESS = @as(c_int, 1);
pub const EXC_BAD_INSTRUCTION = @as(c_int, 2);
pub const EXC_ARITHMETIC = @as(c_int, 3);
pub const EXC_EMULATION = @as(c_int, 4);
pub const EXC_SOFTWARE = @as(c_int, 5);
pub const EXC_BREAKPOINT = @as(c_int, 6);
pub const EXC_SYSCALL = @as(c_int, 7);
pub const EXC_MACH_SYSCALL = @as(c_int, 8);
pub const EXC_RPC_ALERT = @as(c_int, 9);
pub const EXC_CRASH = @as(c_int, 10);
pub const EXC_RESOURCE = @as(c_int, 11);
pub const EXC_GUARD = @as(c_int, 12);
pub const EXC_CORPSE_NOTIFY = @as(c_int, 13);
pub const EXC_CORPSE_VARIANT_BIT = @as(c_int, 0x100);
pub const EXCEPTION_DEFAULT = @as(c_int, 1);
pub const EXCEPTION_STATE = @as(c_int, 2);
pub const EXCEPTION_STATE_IDENTITY = @as(c_int, 3);
pub const EXCEPTION_IDENTITY_PROTECTED = @as(c_int, 4);
pub const MACH_EXCEPTION_ERRORS = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const MACH_EXCEPTION_CODES = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const MACH_EXCEPTION_MASK = MACH_EXCEPTION_CODES | MACH_EXCEPTION_ERRORS;
pub const EXC_MASK_BAD_ACCESS = @as(c_int, 1) << EXC_BAD_ACCESS;
pub const EXC_MASK_BAD_INSTRUCTION = @as(c_int, 1) << EXC_BAD_INSTRUCTION;
pub const EXC_MASK_ARITHMETIC = @as(c_int, 1) << EXC_ARITHMETIC;
pub const EXC_MASK_EMULATION = @as(c_int, 1) << EXC_EMULATION;
pub const EXC_MASK_SOFTWARE = @as(c_int, 1) << EXC_SOFTWARE;
pub const EXC_MASK_BREAKPOINT = @as(c_int, 1) << EXC_BREAKPOINT;
pub const EXC_MASK_SYSCALL = @as(c_int, 1) << EXC_SYSCALL;
pub const EXC_MASK_MACH_SYSCALL = @as(c_int, 1) << EXC_MACH_SYSCALL;
pub const EXC_MASK_RPC_ALERT = @as(c_int, 1) << EXC_RPC_ALERT;
pub const EXC_MASK_CRASH = @as(c_int, 1) << EXC_CRASH;
pub const EXC_MASK_RESOURCE = @as(c_int, 1) << EXC_RESOURCE;
pub const EXC_MASK_GUARD = @as(c_int, 1) << EXC_GUARD;
pub const EXC_MASK_CORPSE_NOTIFY = @as(c_int, 1) << EXC_CORPSE_NOTIFY;
pub const EXC_MASK_ALL = ((((((((((EXC_MASK_BAD_ACCESS | EXC_MASK_BAD_INSTRUCTION) | EXC_MASK_ARITHMETIC) | EXC_MASK_EMULATION) | EXC_MASK_SOFTWARE) | EXC_MASK_BREAKPOINT) | EXC_MASK_SYSCALL) | EXC_MASK_MACH_SYSCALL) | EXC_MASK_RPC_ALERT) | EXC_MASK_RESOURCE) | EXC_MASK_GUARD) | EXC_MASK_MACHINE;
pub const FIRST_EXCEPTION = @as(c_int, 1);
pub const EXC_SOFT_SIGNAL = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10003, .hexadecimal);
pub const EXC_MACF_MIN = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000, .hexadecimal);
pub const EXC_MACF_MAX = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x2FFFF, .hexadecimal);
pub const _MACH_THREAD_STATUS_H_ = "";
pub const _MACH_MACHINE_THREAD_STATUS_H_ = "";
pub const _ARM_THREAD_STATUS_H_ = "";
pub const _MACH_MACHINE_THREAD_STATE_H_ = "";
pub const _MACH_ARM_THREAD_STATE_H_ = "";
pub const ARM_THREAD_STATE_MAX = @as(c_int, 1296);
pub const THREAD_STATE_MAX = @as(c_int, 1296);
pub const ARM_THREAD_STATE = @as(c_int, 1);
pub const ARM_UNIFIED_THREAD_STATE = ARM_THREAD_STATE;
pub const ARM_VFP_STATE = @as(c_int, 2);
pub const ARM_EXCEPTION_STATE = @as(c_int, 3);
pub const ARM_DEBUG_STATE = @as(c_int, 4);
pub const THREAD_STATE_NONE = @as(c_int, 5);
pub const ARM_THREAD_STATE64 = @as(c_int, 6);
pub const ARM_EXCEPTION_STATE64 = @as(c_int, 7);
pub const ARM_THREAD_STATE32 = @as(c_int, 9);
pub const ARM_DEBUG_STATE32 = @as(c_int, 14);
pub const ARM_DEBUG_STATE64 = @as(c_int, 15);
pub const ARM_NEON_STATE = @as(c_int, 16);
pub const ARM_NEON_STATE64 = @as(c_int, 17);
pub const ARM_CPMU_STATE64 = @as(c_int, 18);
pub const ARM_PAGEIN_STATE = @as(c_int, 27);
pub inline fn ARM_STATE_FLAVOR_IS_OTHER_VALID(_flavor_: anytype) @TypeOf(@as(c_int, 0)) {
    _ = _flavor_;
    return @as(c_int, 0);
}
pub inline fn VALID_THREAD_STATE_FLAVOR(x: anytype) @TypeOf((((((((((((((x == ARM_THREAD_STATE) or (x == ARM_VFP_STATE)) or (x == ARM_EXCEPTION_STATE)) or (x == ARM_DEBUG_STATE)) or (x == THREAD_STATE_NONE)) or (x == ARM_THREAD_STATE32)) or (x == ARM_THREAD_STATE64)) or (x == ARM_EXCEPTION_STATE64)) or (x == ARM_NEON_STATE)) or (x == ARM_NEON_STATE64)) or (x == ARM_DEBUG_STATE32)) or (x == ARM_DEBUG_STATE64)) or (x == ARM_PAGEIN_STATE)) or (ARM_STATE_FLAVOR_IS_OTHER_VALID(x) != 0)) {
    return (((((((((((((x == ARM_THREAD_STATE) or (x == ARM_VFP_STATE)) or (x == ARM_EXCEPTION_STATE)) or (x == ARM_DEBUG_STATE)) or (x == THREAD_STATE_NONE)) or (x == ARM_THREAD_STATE32)) or (x == ARM_THREAD_STATE64)) or (x == ARM_EXCEPTION_STATE64)) or (x == ARM_NEON_STATE)) or (x == ARM_NEON_STATE64)) or (x == ARM_DEBUG_STATE32)) or (x == ARM_DEBUG_STATE64)) or (x == ARM_PAGEIN_STATE)) or (ARM_STATE_FLAVOR_IS_OTHER_VALID(x) != 0);
}
pub inline fn arm_thread_state64_get_pc(ts: anytype) @TypeOf(__darwin_arm_thread_state64_get_pc(ts)) {
    return __darwin_arm_thread_state64_get_pc(ts);
}
pub inline fn arm_thread_state64_get_pc_fptr(ts: anytype) @TypeOf(__darwin_arm_thread_state64_get_pc_fptr(ts)) {
    return __darwin_arm_thread_state64_get_pc_fptr(ts);
}
pub inline fn arm_thread_state64_set_pc_fptr(ts: anytype, fptr: anytype) @TypeOf(__darwin_arm_thread_state64_set_pc_fptr(ts, fptr)) {
    return __darwin_arm_thread_state64_set_pc_fptr(ts, fptr);
}
pub inline fn arm_thread_state64_get_lr(ts: anytype) @TypeOf(__darwin_arm_thread_state64_get_lr(ts)) {
    return __darwin_arm_thread_state64_get_lr(ts);
}
pub inline fn arm_thread_state64_get_lr_fptr(ts: anytype) @TypeOf(__darwin_arm_thread_state64_get_lr_fptr(ts)) {
    return __darwin_arm_thread_state64_get_lr_fptr(ts);
}
pub inline fn arm_thread_state64_set_lr_fptr(ts: anytype, fptr: anytype) @TypeOf(__darwin_arm_thread_state64_set_lr_fptr(ts, fptr)) {
    return __darwin_arm_thread_state64_set_lr_fptr(ts, fptr);
}
pub inline fn arm_thread_state64_get_sp(ts: anytype) @TypeOf(__darwin_arm_thread_state64_get_sp(ts)) {
    return __darwin_arm_thread_state64_get_sp(ts);
}
pub inline fn arm_thread_state64_set_sp(ts: anytype, ptr: anytype) @TypeOf(__darwin_arm_thread_state64_set_sp(ts, ptr)) {
    return __darwin_arm_thread_state64_set_sp(ts, ptr);
}
pub inline fn arm_thread_state64_get_fp(ts: anytype) @TypeOf(__darwin_arm_thread_state64_get_fp(ts)) {
    return __darwin_arm_thread_state64_get_fp(ts);
}
pub inline fn arm_thread_state64_set_fp(ts: anytype, ptr: anytype) @TypeOf(__darwin_arm_thread_state64_set_fp(ts, ptr)) {
    return __darwin_arm_thread_state64_set_fp(ts, ptr);
}
pub inline fn arm_thread_state64_ptrauth_strip(ts: anytype) @TypeOf(__darwin_arm_thread_state64_ptrauth_strip(ts)) {
    return __darwin_arm_thread_state64_ptrauth_strip(ts);
}
pub const ARM_THREAD_STATE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(arm_thread_state_t) / @import("std").zig.c_translation.sizeof(u32));
pub const ARM_THREAD_STATE32_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(arm_thread_state32_t) / @import("std").zig.c_translation.sizeof(u32));
pub const ARM_THREAD_STATE64_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(arm_thread_state64_t) / @import("std").zig.c_translation.sizeof(u32));
pub const ARM_UNIFIED_THREAD_STATE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(arm_unified_thread_state_t) / @import("std").zig.c_translation.sizeof(u32));
pub const ARM_VFP_STATE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(arm_vfp_state_t) / @import("std").zig.c_translation.sizeof(u32));
pub const ARM_EXCEPTION_STATE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(arm_exception_state_t) / @import("std").zig.c_translation.sizeof(u32));
pub const ARM_EXCEPTION_STATE64_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(arm_exception_state64_t) / @import("std").zig.c_translation.sizeof(u32));
pub const ARM_DEBUG_STATE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(arm_debug_state_t) / @import("std").zig.c_translation.sizeof(u32));
pub const ARM_DEBUG_STATE32_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(arm_debug_state32_t) / @import("std").zig.c_translation.sizeof(u32));
pub const ARM_PAGEIN_STATE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(arm_pagein_state_t) / @import("std").zig.c_translation.sizeof(u32));
pub const ARM_DEBUG_STATE64_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(arm_debug_state64_t) / @import("std").zig.c_translation.sizeof(u32));
pub const ARM_NEON_STATE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(arm_neon_state_t) / @import("std").zig.c_translation.sizeof(u32));
pub const ARM_NEON_STATE64_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(arm_neon_state64_t) / @import("std").zig.c_translation.sizeof(u32));
pub const MACHINE_THREAD_STATE = ARM_THREAD_STATE;
pub const MACHINE_THREAD_STATE_COUNT = ARM_UNIFIED_THREAD_STATE_COUNT;
pub const THREAD_MACHINE_STATE_MAX = THREAD_STATE_MAX;
pub const THREAD_STATE_FLAVOR_LIST = @as(c_int, 0);
pub const THREAD_STATE_FLAVOR_LIST_NEW = @as(c_int, 128);
pub const THREAD_STATE_FLAVOR_LIST_10_9 = @as(c_int, 129);
pub const THREAD_STATE_FLAVOR_LIST_10_13 = @as(c_int, 130);
pub const THREAD_STATE_FLAVOR_LIST_10_15 = @as(c_int, 131);
pub const THREAD_CONVERT_THREAD_STATE_TO_SELF = @as(c_int, 1);
pub const THREAD_CONVERT_THREAD_STATE_FROM_SELF = @as(c_int, 2);
pub const _MACH_DEBUG_IPC_INFO_H_ = "";
pub const _MACH_VOUCHER_TYPES_H_ = "";
pub const _MACH_STD_TYPES_H_ = "";
pub const MACH_VOUCHER_NULL = @import("std").zig.c_translation.cast(mach_voucher_t, @as(c_int, 0));
pub const MACH_VOUCHER_NAME_NULL = @import("std").zig.c_translation.cast(mach_voucher_name_t, @as(c_int, 0));
pub const MACH_VOUCHER_NAME_ARRAY_NULL = @import("std").zig.c_translation.cast(mach_voucher_name_array_t, @as(c_int, 0));
pub const IPC_VOUCHER_NULL = @import("std").zig.c_translation.cast(ipc_voucher_t, @as(c_int, 0));
pub const MACH_VOUCHER_SELECTOR_CURRENT = @import("std").zig.c_translation.cast(mach_voucher_selector_t, @as(c_int, 0));
pub const MACH_VOUCHER_SELECTOR_EFFECTIVE = @import("std").zig.c_translation.cast(mach_voucher_selector_t, @as(c_int, 1));
pub const MACH_VOUCHER_ATTR_KEY_ALL = @import("std").zig.c_translation.cast(mach_voucher_attr_key_t, ~@as(c_int, 0));
pub const MACH_VOUCHER_ATTR_KEY_NONE = @import("std").zig.c_translation.cast(mach_voucher_attr_key_t, @as(c_int, 0));
pub const MACH_VOUCHER_ATTR_KEY_ATM = @import("std").zig.c_translation.cast(mach_voucher_attr_key_t, @as(c_int, 1));
pub const MACH_VOUCHER_ATTR_KEY_IMPORTANCE = @import("std").zig.c_translation.cast(mach_voucher_attr_key_t, @as(c_int, 2));
pub const MACH_VOUCHER_ATTR_KEY_BANK = @import("std").zig.c_translation.cast(mach_voucher_attr_key_t, @as(c_int, 3));
pub const MACH_VOUCHER_ATTR_KEY_PTHPRIORITY = @import("std").zig.c_translation.cast(mach_voucher_attr_key_t, @as(c_int, 4));
pub const MACH_VOUCHER_ATTR_KEY_USER_DATA = @import("std").zig.c_translation.cast(mach_voucher_attr_key_t, @as(c_int, 7));
pub const MACH_VOUCHER_ATTR_KEY_BITS = MACH_VOUCHER_ATTR_KEY_USER_DATA;
pub const MACH_VOUCHER_ATTR_KEY_TEST = @import("std").zig.c_translation.cast(mach_voucher_attr_key_t, @as(c_int, 8));
pub const MACH_VOUCHER_ATTR_KEY_NUM_WELL_KNOWN = MACH_VOUCHER_ATTR_KEY_TEST;
pub const MACH_VOUCHER_ATTR_NOOP = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 0));
pub const MACH_VOUCHER_ATTR_COPY = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 1));
pub const MACH_VOUCHER_ATTR_REMOVE = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 2));
pub const MACH_VOUCHER_ATTR_SET_VALUE_HANDLE = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 3));
pub const MACH_VOUCHER_ATTR_AUTO_REDEEM = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 4));
pub const MACH_VOUCHER_ATTR_SEND_PREPROCESS = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 5));
pub const MACH_VOUCHER_ATTR_REDEEM = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 10));
pub const MACH_VOUCHER_ATTR_IMPORTANCE_SELF = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 200));
pub const MACH_VOUCHER_ATTR_USER_DATA_STORE = @import("std").zig.c_translation.cast(mach_voucher_attr_recipe_command_t, @as(c_int, 211));
pub const MACH_VOUCHER_ATTR_BITS_STORE = MACH_VOUCHER_ATTR_USER_DATA_STORE;
pub const MACH_VOUCHER_ATTR_TEST_STORE = MACH_VOUCHER_ATTR_USER_DATA_STORE;
pub const MACH_VOUCHER_ATTR_MAX_RAW_RECIPE_ARRAY_SIZE = @as(c_int, 5120);
pub const MACH_VOUCHER_TRAP_STACK_LIMIT = @as(c_int, 256);
pub const MACH_VOUCHER_ATTR_MANAGER_NULL = @import("std").zig.c_translation.cast(mach_voucher_attr_manager_t, @as(c_int, 0));
pub const MACH_VOUCHER_ATTR_CONTROL_NULL = @import("std").zig.c_translation.cast(mach_voucher_attr_control_t, @as(c_int, 0));
pub const IPC_VOUCHER_ATTR_MANAGER_NULL = @import("std").zig.c_translation.cast(ipc_voucher_attr_manager_t, @as(c_int, 0));
pub const IPC_VOUCHER_ATTR_CONTROL_NULL = @import("std").zig.c_translation.cast(ipc_voucher_attr_control_t, @as(c_int, 0));
pub const MACH_VOUCHER_ATTR_VALUE_MAX_NESTED = @import("std").zig.c_translation.cast(mach_voucher_attr_value_handle_array_size_t, @as(c_int, 4));
pub const MACH_VOUCHER_ATTR_VALUE_FLAGS_NONE = @import("std").zig.c_translation.cast(mach_voucher_attr_value_flags_t, @as(c_int, 0));
pub const MACH_VOUCHER_ATTR_VALUE_FLAGS_PERSIST = @import("std").zig.c_translation.cast(mach_voucher_attr_value_flags_t, @as(c_int, 1));
pub const MACH_VOUCHER_ATTR_CONTROL_FLAGS_NONE = @import("std").zig.c_translation.cast(mach_voucher_attr_control_flags_t, @as(c_int, 0));
pub const MACH_VOUCHER_IMPORTANCE_ATTR_ADD_EXTERNAL = @as(c_int, 1);
pub const MACH_VOUCHER_IMPORTANCE_ATTR_DROP_EXTERNAL = @as(c_int, 2);
pub const MACH_ACTIVITY_ID_COUNT_MAX = @as(c_int, 16);
pub const _MACH_PROCESSOR_INFO_H_ = "";
pub const _MACH_MACHINE_PROCESSOR_INFO_H_ = "";
pub const _MACH_ARM_PROCESSOR_INFO_H_ = "";
pub const PROCESSOR_CPU_STAT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000003, .hexadecimal);
pub const PROCESSOR_CPU_STAT64 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000004, .hexadecimal);
pub const PROCESSOR_CPU_STAT_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(processor_cpu_stat_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const PROCESSOR_CPU_STAT64_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(processor_cpu_stat64_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const PROCESSOR_INFO_MAX = @as(c_int, 1024);
pub const PROCESSOR_SET_INFO_MAX = @as(c_int, 1024);
pub const PROCESSOR_BASIC_INFO = @as(c_int, 1);
pub const PROCESSOR_CPU_LOAD_INFO = @as(c_int, 2);
pub const PROCESSOR_PM_REGS_INFO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000001, .hexadecimal);
pub const PROCESSOR_TEMPERATURE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000002, .hexadecimal);
pub const PROCESSOR_BASIC_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(processor_basic_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const PROCESSOR_CPU_LOAD_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(processor_cpu_load_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const LOAD_SCALE = @as(c_int, 1000);
pub const PROCESSOR_SET_BASIC_INFO = @as(c_int, 5);
pub const PROCESSOR_SET_BASIC_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(processor_set_basic_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const PROCESSOR_SET_LOAD_INFO = @as(c_int, 4);
pub const PROCESSOR_SET_LOAD_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(processor_set_load_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const _MACH_TASK_INFO_H_ = "";
pub const _MACH_POLICY_H_ = "";
pub const POLICY_NULL = @as(c_int, 0);
pub const POLICY_TIMESHARE = @as(c_int, 1);
pub const POLICY_RR = @as(c_int, 2);
pub const POLICY_FIFO = @as(c_int, 4);
pub const __NEW_SCHEDULING_FRAMEWORK__ = "";
pub const POLICYCLASS_FIXEDPRI = POLICY_RR | POLICY_FIFO;
pub inline fn invalid_policy(policy: anytype) @TypeOf(((policy != POLICY_TIMESHARE) and (policy != POLICY_RR)) and (policy != POLICY_FIFO)) {
    return ((policy != POLICY_TIMESHARE) and (policy != POLICY_RR)) and (policy != POLICY_FIFO);
}
pub const POLICY_TIMESHARE_BASE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(struct_policy_timeshare_base) / @import("std").zig.c_translation.sizeof(integer_t));
pub const POLICY_TIMESHARE_LIMIT_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(struct_policy_timeshare_limit) / @import("std").zig.c_translation.sizeof(integer_t));
pub const POLICY_TIMESHARE_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(struct_policy_timeshare_info) / @import("std").zig.c_translation.sizeof(integer_t));
pub const POLICY_RR_BASE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(struct_policy_rr_base) / @import("std").zig.c_translation.sizeof(integer_t));
pub const POLICY_RR_LIMIT_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(struct_policy_rr_limit) / @import("std").zig.c_translation.sizeof(integer_t));
pub const POLICY_RR_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(struct_policy_rr_info) / @import("std").zig.c_translation.sizeof(integer_t));
pub const POLICY_FIFO_BASE_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(struct_policy_fifo_base) / @import("std").zig.c_translation.sizeof(integer_t));
pub const POLICY_FIFO_LIMIT_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(struct_policy_fifo_limit) / @import("std").zig.c_translation.sizeof(integer_t));
pub const POLICY_FIFO_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(struct_policy_fifo_info) / @import("std").zig.c_translation.sizeof(integer_t));
pub const TASK_INFO_MAX = @as(c_int, 1024);
pub const TASK_BASIC_INFO_32 = @as(c_int, 4);
pub const TASK_BASIC2_INFO_32 = @as(c_int, 6);
pub const TASK_BASIC_INFO_32_COUNT = @import("std").zig.c_translation.sizeof(task_basic_info_32_data_t) / @import("std").zig.c_translation.sizeof(natural_t);
pub const TASK_BASIC_INFO_64 = TASK_BASIC_INFO_64_2;
pub const TASK_BASIC_INFO_64_COUNT = TASK_BASIC_INFO_64_2_COUNT;
pub const TASK_BASIC_INFO_COUNT = @import("std").zig.c_translation.sizeof(task_basic_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t);
pub const TASK_BASIC_INFO = TASK_BASIC_INFO_64;
pub const TASK_EVENTS_INFO = @as(c_int, 2);
pub const TASK_EVENTS_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(task_events_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_THREAD_TIMES_INFO = @as(c_int, 3);
pub const TASK_THREAD_TIMES_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(task_thread_times_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_ABSOLUTETIME_INFO = @as(c_int, 1);
pub const TASK_ABSOLUTETIME_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(task_absolutetime_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_KERNELMEMORY_INFO = @as(c_int, 7);
pub const TASK_KERNELMEMORY_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(task_kernelmemory_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_SECURITY_TOKEN = @as(c_int, 13);
pub const TASK_SECURITY_TOKEN_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(security_token_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_AUDIT_TOKEN = @as(c_int, 15);
pub const TASK_AUDIT_TOKEN_COUNT = @import("std").zig.c_translation.sizeof(audit_token_t) / @import("std").zig.c_translation.sizeof(natural_t);
pub const TASK_AFFINITY_TAG_INFO = @as(c_int, 16);
pub const TASK_AFFINITY_TAG_INFO_COUNT = @import("std").zig.c_translation.sizeof(task_affinity_tag_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t);
pub const TASK_DYLD_INFO = @as(c_int, 17);
pub const TASK_DYLD_INFO_COUNT = @import("std").zig.c_translation.sizeof(task_dyld_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t);
pub const TASK_DYLD_ALL_IMAGE_INFO_32 = @as(c_int, 0);
pub const TASK_DYLD_ALL_IMAGE_INFO_64 = @as(c_int, 1);
pub const TASK_BASIC_INFO_64_2 = @as(c_int, 18);
pub const TASK_BASIC_INFO_64_2_COUNT = @import("std").zig.c_translation.sizeof(task_basic_info_64_2_data_t) / @import("std").zig.c_translation.sizeof(natural_t);
pub const TASK_EXTMOD_INFO = @as(c_int, 19);
pub const TASK_EXTMOD_INFO_COUNT = @import("std").zig.c_translation.sizeof(task_extmod_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t);
pub const MACH_TASK_BASIC_INFO = @as(c_int, 20);
pub const MACH_TASK_BASIC_INFO_COUNT = @import("std").zig.c_translation.sizeof(mach_task_basic_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t);
pub const TASK_POWER_INFO = @as(c_int, 21);
pub const TASK_POWER_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(task_power_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_VM_INFO = @as(c_int, 22);
pub const TASK_VM_INFO_PURGEABLE = @as(c_int, 23);
pub const TASK_VM_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(task_vm_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_VM_INFO_REV5_COUNT = TASK_VM_INFO_COUNT;
pub const TASK_VM_INFO_REV4_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, TASK_VM_INFO_REV5_COUNT - @as(c_int, 1));
pub const TASK_VM_INFO_REV3_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, TASK_VM_INFO_REV4_COUNT - @as(c_int, 2));
pub const TASK_VM_INFO_REV2_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, TASK_VM_INFO_REV3_COUNT - @as(c_int, 42));
pub const TASK_VM_INFO_REV1_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, TASK_VM_INFO_REV2_COUNT - @as(c_int, 4));
pub const TASK_VM_INFO_REV0_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, TASK_VM_INFO_REV1_COUNT - @as(c_int, 2));
pub const TASK_TRACE_MEMORY_INFO = @as(c_int, 24);
pub const TASK_TRACE_MEMORY_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(task_trace_memory_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_WAIT_STATE_INFO = @as(c_int, 25);
pub const TASK_WAIT_STATE_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(task_wait_state_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_POWER_INFO_V2 = @as(c_int, 26);
pub const TASK_POWER_INFO_V2_COUNT_OLD = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(task_power_info_v2_data_t) - (@import("std").zig.c_translation.sizeof(u64) * @as(c_int, 2))) / @import("std").zig.c_translation.sizeof(natural_t);
pub const TASK_POWER_INFO_V2_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(task_power_info_v2_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const TASK_VM_INFO_PURGEABLE_ACCOUNT = @as(c_int, 27);
pub const TASK_FLAGS_INFO = @as(c_int, 28);
pub const TASK_FLAGS_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(task_flags_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const TF_LP64 = @as(c_int, 0x00000001);
pub const TF_64B_DATA = @as(c_int, 0x00000002);
pub const TASK_DEBUG_INFO_INTERNAL = @as(c_int, 29);
pub const TASK_EXC_GUARD_NONE = @as(c_int, 0x00);
pub const TASK_EXC_GUARD_VM_DELIVER = @as(c_int, 0x01);
pub const TASK_EXC_GUARD_VM_ONCE = @as(c_int, 0x02);
pub const TASK_EXC_GUARD_VM_CORPSE = @as(c_int, 0x04);
pub const TASK_EXC_GUARD_VM_FATAL = @as(c_int, 0x08);
pub const TASK_EXC_GUARD_VM_ALL = @as(c_int, 0x0f);
pub const TASK_EXC_GUARD_MP_DELIVER = @as(c_int, 0x10);
pub const TASK_EXC_GUARD_MP_ONCE = @as(c_int, 0x20);
pub const TASK_EXC_GUARD_MP_CORPSE = @as(c_int, 0x40);
pub const TASK_EXC_GUARD_MP_FATAL = @as(c_int, 0x80);
pub const TASK_EXC_GUARD_MP_ALL = @as(c_int, 0xf0);
pub const TASK_EXC_GUARD_ALL = @as(c_int, 0xff);
pub const TASK_CORPSE_FORKING_DISABLED_MEM_DIAG = @as(c_int, 0x01);
pub const TASK_SCHED_TIMESHARE_INFO = @as(c_int, 10);
pub const TASK_SCHED_RR_INFO = @as(c_int, 11);
pub const TASK_SCHED_FIFO_INFO = @as(c_int, 12);
pub const TASK_SCHED_INFO = @as(c_int, 14);
pub const MACH_TASK_INSPECT_H = "";
pub const TASK_INSPECT_BASIC_COUNTS_COUNT = @import("std").zig.c_translation.sizeof(struct_task_inspect_basic_counts) / @import("std").zig.c_translation.sizeof(natural_t);
pub const _MACH_TASK_POLICY_H_ = "";
pub const TASK_CATEGORY_POLICY = @as(c_int, 1);
pub const TASK_SUPPRESSION_POLICY = @as(c_int, 3);
pub const TASK_POLICY_STATE = @as(c_int, 4);
pub const TASK_BASE_QOS_POLICY = @as(c_int, 8);
pub const TASK_OVERRIDE_QOS_POLICY = @as(c_int, 9);
pub const TASK_BASE_LATENCY_QOS_POLICY = @as(c_int, 10);
pub const TASK_BASE_THROUGHPUT_QOS_POLICY = @as(c_int, 11);
pub const TASK_CATEGORY_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(task_category_policy_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const LATENCY_QOS_LAUNCH_DEFAULT_TIER = LATENCY_QOS_TIER_3;
pub const THROUGHPUT_QOS_LAUNCH_DEFAULT_TIER = THROUGHPUT_QOS_TIER_3;
pub const TASK_QOS_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(struct_task_qos_policy) / @import("std").zig.c_translation.sizeof(integer_t));
pub const PROC_FLAG_DARWINBG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hexadecimal);
pub const PROC_FLAG_EXT_DARWINBG = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000, .hexadecimal);
pub const PROC_FLAG_IOS_APPLEDAEMON = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000, .hexadecimal);
pub const PROC_FLAG_IOS_IMPPROMOTION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000, .hexadecimal);
pub const PROC_FLAG_ADAPTIVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x100000, .hexadecimal);
pub const PROC_FLAG_ADAPTIVE_IMPORTANT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x200000, .hexadecimal);
pub const PROC_FLAG_IMPORTANCE_DONOR = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x400000, .hexadecimal);
pub const PROC_FLAG_SUPPRESSED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800000, .hexadecimal);
pub const PROC_FLAG_APPLICATION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x1000000, .hexadecimal);
pub const PROC_FLAG_IOS_APPLICATION = PROC_FLAG_APPLICATION;
pub const _MACH_TASK_SPECIAL_PORTS_H_ = "";
pub const TASK_KERNEL_PORT = @as(c_int, 1);
pub const TASK_HOST_PORT = @as(c_int, 2);
pub const TASK_NAME_PORT = @as(c_int, 3);
pub const TASK_BOOTSTRAP_PORT = @as(c_int, 4);
pub const TASK_INSPECT_PORT = @as(c_int, 5);
pub const TASK_READ_PORT = @as(c_int, 6);
pub const TASK_ACCESS_PORT = @as(c_int, 9);
pub const TASK_DEBUG_CONTROL_PORT = @as(c_int, 10);
pub const TASK_RESOURCE_NOTIFY_PORT = @as(c_int, 11);
pub const TASK_MAX_SPECIAL_PORT = TASK_RESOURCE_NOTIFY_PORT;
pub inline fn task_get_kernel_port(task: anytype, port: anytype) @TypeOf(task_get_special_port(task, TASK_KERNEL_PORT, port)) {
    return task_get_special_port(task, TASK_KERNEL_PORT, port);
}
pub inline fn task_set_kernel_port(task: anytype, port: anytype) @TypeOf(task_set_special_port(task, TASK_KERNEL_PORT, port)) {
    return task_set_special_port(task, TASK_KERNEL_PORT, port);
}
pub inline fn task_get_host_port(task: anytype, port: anytype) @TypeOf(task_get_special_port(task, TASK_HOST_PORT, port)) {
    return task_get_special_port(task, TASK_HOST_PORT, port);
}
pub inline fn task_set_host_port(task: anytype, port: anytype) @TypeOf(task_set_special_port(task, TASK_HOST_PORT, port)) {
    return task_set_special_port(task, TASK_HOST_PORT, port);
}
pub inline fn task_get_bootstrap_port(task: anytype, port: anytype) @TypeOf(task_get_special_port(task, TASK_BOOTSTRAP_PORT, port)) {
    return task_get_special_port(task, TASK_BOOTSTRAP_PORT, port);
}
pub inline fn task_get_debug_control_port(task: anytype, port: anytype) @TypeOf(task_get_special_port(task, TASK_DEBUG_CONTROL_PORT, port)) {
    return task_get_special_port(task, TASK_DEBUG_CONTROL_PORT, port);
}
pub inline fn task_set_bootstrap_port(task: anytype, port: anytype) @TypeOf(task_set_special_port(task, TASK_BOOTSTRAP_PORT, port)) {
    return task_set_special_port(task, TASK_BOOTSTRAP_PORT, port);
}
pub inline fn task_get_task_access_port(task: anytype, port: anytype) @TypeOf(task_get_special_port(task, TASK_ACCESS_PORT, port)) {
    return task_get_special_port(task, TASK_ACCESS_PORT, port);
}
pub inline fn task_set_task_access_port(task: anytype, port: anytype) @TypeOf(task_set_special_port(task, TASK_ACCESS_PORT, port)) {
    return task_set_special_port(task, TASK_ACCESS_PORT, port);
}
pub inline fn task_set_task_debug_control_port(task: anytype, port: anytype) @TypeOf(task_set_special_port(task, TASK_DEBUG_CONTROL_PORT, port)) {
    return task_set_special_port(task, TASK_DEBUG_CONTROL_PORT, port);
}
pub const _MACH_THREAD_INFO_H_ = "";
pub const THREAD_INFO_MAX = @as(c_int, 32);
pub const THREAD_BASIC_INFO = @as(c_int, 3);
pub const THREAD_BASIC_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(thread_basic_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const THREAD_IDENTIFIER_INFO = @as(c_int, 4);
pub const THREAD_IDENTIFIER_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(thread_identifier_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const TH_USAGE_SCALE = @as(c_int, 1000);
pub const TH_STATE_RUNNING = @as(c_int, 1);
pub const TH_STATE_STOPPED = @as(c_int, 2);
pub const TH_STATE_WAITING = @as(c_int, 3);
pub const TH_STATE_UNINTERRUPTIBLE = @as(c_int, 4);
pub const TH_STATE_HALTED = @as(c_int, 5);
pub const TH_FLAGS_SWAPPED = @as(c_int, 0x1);
pub const TH_FLAGS_IDLE = @as(c_int, 0x2);
pub const TH_FLAGS_GLOBAL_FORCED_IDLE = @as(c_int, 0x4);
pub const THREAD_EXTENDED_INFO = @as(c_int, 5);
pub const MAXTHREADNAMESIZE = @as(c_int, 64);
pub const THREAD_EXTENDED_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(thread_extended_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const THREAD_DEBUG_INFO_INTERNAL = @as(c_int, 6);
pub const IO_NUM_PRIORITIES = @as(c_int, 4);
pub const THREAD_SCHED_TIMESHARE_INFO = @as(c_int, 10);
pub const THREAD_SCHED_RR_INFO = @as(c_int, 11);
pub const THREAD_SCHED_FIFO_INFO = @as(c_int, 12);
pub const _MACH_THREAD_POLICY_H_ = "";
pub const THREAD_STANDARD_POLICY = @as(c_int, 1);
pub const THREAD_STANDARD_POLICY_COUNT = @as(c_int, 0);
pub const THREAD_EXTENDED_POLICY = @as(c_int, 1);
pub const THREAD_EXTENDED_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(thread_extended_policy_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const THREAD_TIME_CONSTRAINT_POLICY = @as(c_int, 2);
pub const THREAD_TIME_CONSTRAINT_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(thread_time_constraint_policy_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const THREAD_PRECEDENCE_POLICY = @as(c_int, 3);
pub const THREAD_PRECEDENCE_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(thread_precedence_policy_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const THREAD_AFFINITY_POLICY = @as(c_int, 4);
pub const THREAD_AFFINITY_TAG_NULL = @as(c_int, 0);
pub const THREAD_AFFINITY_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(thread_affinity_policy_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const THREAD_BACKGROUND_POLICY = @as(c_int, 5);
pub const THREAD_BACKGROUND_POLICY_DARWIN_BG = @as(c_int, 0x1000);
pub const THREAD_BACKGROUND_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(thread_background_policy_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const THREAD_LATENCY_QOS_POLICY = @as(c_int, 7);
pub const THREAD_LATENCY_QOS_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(thread_latency_qos_policy_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const THREAD_THROUGHPUT_QOS_POLICY = @as(c_int, 8);
pub const THREAD_THROUGHPUT_QOS_POLICY_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(thread_throughput_qos_policy_data_t) / @import("std").zig.c_translation.sizeof(integer_t));
pub const _MACH_THREAD_SPECIAL_PORTS_H_ = "";
pub const THREAD_KERNEL_PORT = @as(c_int, 1);
pub const THREAD_INSPECT_PORT = @as(c_int, 2);
pub const THREAD_READ_PORT = @as(c_int, 3);
pub const THREAD_MAX_SPECIAL_PORT = THREAD_READ_PORT;
pub inline fn thread_get_kernel_port(thread: anytype, port: anytype) @TypeOf(thread_get_special_port(thread, THREAD_KERNEL_PORT, port)) {
    return thread_get_special_port(thread, THREAD_KERNEL_PORT, port);
}
pub inline fn thread_set_kernel_port(thread: anytype, port: anytype) @TypeOf(thread_set_special_port(thread, THREAD_KERNEL_PORT, port)) {
    return thread_set_special_port(thread, THREAD_KERNEL_PORT, port);
}
pub const _MACH_VM_ATTRIBUTES_H_ = "";
pub const MATTR_CACHE = @as(c_int, 1);
pub const MATTR_MIGRATE = @as(c_int, 2);
pub const MATTR_REPLICATE = @as(c_int, 4);
pub const MATTR_VAL_OFF = @as(c_int, 0);
pub const MATTR_VAL_ON = @as(c_int, 1);
pub const MATTR_VAL_GET = @as(c_int, 2);
pub const MATTR_VAL_CACHE_FLUSH = @as(c_int, 6);
pub const MATTR_VAL_DCACHE_FLUSH = @as(c_int, 7);
pub const MATTR_VAL_ICACHE_FLUSH = @as(c_int, 8);
pub const MATTR_VAL_CACHE_SYNC = @as(c_int, 9);
pub const MATTR_VAL_GET_INFO = @as(c_int, 10);
pub const _MACH_VM_INHERIT_H_ = "";
pub const VM_INHERIT_SHARE = @import("std").zig.c_translation.cast(vm_inherit_t, @as(c_int, 0));
pub const VM_INHERIT_COPY = @import("std").zig.c_translation.cast(vm_inherit_t, @as(c_int, 1));
pub const VM_INHERIT_NONE = @import("std").zig.c_translation.cast(vm_inherit_t, @as(c_int, 2));
pub const VM_INHERIT_DONATE_COPY = @import("std").zig.c_translation.cast(vm_inherit_t, @as(c_int, 3));
pub const VM_INHERIT_DEFAULT = VM_INHERIT_COPY;
pub const VM_INHERIT_LAST_VALID = VM_INHERIT_NONE;
pub const _MACH_VM_PURGABLE_H_ = "";
pub const VM_PURGABLE_SET_STATE = @import("std").zig.c_translation.cast(vm_purgable_t, @as(c_int, 0));
pub const VM_PURGABLE_GET_STATE = @import("std").zig.c_translation.cast(vm_purgable_t, @as(c_int, 1));
pub const VM_PURGABLE_PURGE_ALL = @import("std").zig.c_translation.cast(vm_purgable_t, @as(c_int, 2));
pub const VM_PURGABLE_SET_STATE_FROM_KERNEL = @import("std").zig.c_translation.cast(vm_purgable_t, @as(c_int, 3));
pub const VM_PURGABLE_NO_AGING_SHIFT = @as(c_int, 16);
pub const VM_PURGABLE_NO_AGING_MASK = @as(c_int, 0x1) << VM_PURGABLE_NO_AGING_SHIFT;
pub const VM_PURGABLE_NO_AGING = @as(c_int, 0x1) << VM_PURGABLE_NO_AGING_SHIFT;
pub const VM_PURGABLE_DEBUG_SHIFT = @as(c_int, 12);
pub const VM_PURGABLE_DEBUG_MASK = @as(c_int, 0x3) << VM_PURGABLE_DEBUG_SHIFT;
pub const VM_PURGABLE_DEBUG_EMPTY = @as(c_int, 0x1) << VM_PURGABLE_DEBUG_SHIFT;
pub const VM_PURGABLE_DEBUG_FAULT = @as(c_int, 0x2) << VM_PURGABLE_DEBUG_SHIFT;
pub const VM_VOLATILE_GROUP_SHIFT = @as(c_int, 8);
pub const VM_VOLATILE_GROUP_MASK = @as(c_int, 7) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_VOLATILE_GROUP_DEFAULT = VM_VOLATILE_GROUP_0;
pub const VM_VOLATILE_GROUP_0 = @as(c_int, 0) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_VOLATILE_GROUP_1 = @as(c_int, 1) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_VOLATILE_GROUP_2 = @as(c_int, 2) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_VOLATILE_GROUP_3 = @as(c_int, 3) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_VOLATILE_GROUP_4 = @as(c_int, 4) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_VOLATILE_GROUP_5 = @as(c_int, 5) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_VOLATILE_GROUP_6 = @as(c_int, 6) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_VOLATILE_GROUP_7 = @as(c_int, 7) << VM_VOLATILE_GROUP_SHIFT;
pub const VM_PURGABLE_BEHAVIOR_SHIFT = @as(c_int, 6);
pub const VM_PURGABLE_BEHAVIOR_MASK = @as(c_int, 1) << VM_PURGABLE_BEHAVIOR_SHIFT;
pub const VM_PURGABLE_BEHAVIOR_FIFO = @as(c_int, 0) << VM_PURGABLE_BEHAVIOR_SHIFT;
pub const VM_PURGABLE_BEHAVIOR_LIFO = @as(c_int, 1) << VM_PURGABLE_BEHAVIOR_SHIFT;
pub const VM_PURGABLE_ORDERING_SHIFT = @as(c_int, 5);
pub const VM_PURGABLE_ORDERING_MASK = @as(c_int, 1) << VM_PURGABLE_ORDERING_SHIFT;
pub const VM_PURGABLE_ORDERING_OBSOLETE = @as(c_int, 1) << VM_PURGABLE_ORDERING_SHIFT;
pub const VM_PURGABLE_ORDERING_NORMAL = @as(c_int, 0) << VM_PURGABLE_ORDERING_SHIFT;
pub const VM_VOLATILE_ORDER_SHIFT = @as(c_int, 4);
pub const VM_VOLATILE_ORDER_MASK = @as(c_int, 1) << VM_VOLATILE_ORDER_SHIFT;
pub const VM_VOLATILE_MAKE_FIRST_IN_GROUP = @as(c_int, 1) << VM_VOLATILE_ORDER_SHIFT;
pub const VM_VOLATILE_MAKE_LAST_IN_GROUP = @as(c_int, 0) << VM_VOLATILE_ORDER_SHIFT;
pub const VM_PURGABLE_STATE_MIN = @as(c_int, 0);
pub const VM_PURGABLE_STATE_MAX = @as(c_int, 3);
pub const VM_PURGABLE_STATE_MASK = @as(c_int, 3);
pub const VM_PURGABLE_NONVOLATILE = @as(c_int, 0);
pub const VM_PURGABLE_VOLATILE = @as(c_int, 1);
pub const VM_PURGABLE_EMPTY = @as(c_int, 2);
pub const VM_PURGABLE_DENY = @as(c_int, 3);
pub const VM_PURGABLE_ALL_MASKS = (((((VM_PURGABLE_STATE_MASK | VM_VOLATILE_ORDER_MASK) | VM_PURGABLE_ORDERING_MASK) | VM_PURGABLE_BEHAVIOR_MASK) | VM_VOLATILE_GROUP_MASK) | VM_PURGABLE_DEBUG_MASK) | VM_PURGABLE_NO_AGING_MASK;
pub const _MACH_VM_BEHAVIOR_H_ = "";
pub const VM_BEHAVIOR_DEFAULT = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 0));
pub const VM_BEHAVIOR_RANDOM = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 1));
pub const VM_BEHAVIOR_SEQUENTIAL = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 2));
pub const VM_BEHAVIOR_RSEQNTL = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 3));
pub const VM_BEHAVIOR_WILLNEED = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 4));
pub const VM_BEHAVIOR_DONTNEED = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 5));
pub const VM_BEHAVIOR_FREE = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 6));
pub const VM_BEHAVIOR_ZERO_WIRED_PAGES = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 7));
pub const VM_BEHAVIOR_REUSABLE = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 8));
pub const VM_BEHAVIOR_REUSE = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 9));
pub const VM_BEHAVIOR_CAN_REUSE = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 10));
pub const VM_BEHAVIOR_PAGEOUT = @import("std").zig.c_translation.cast(vm_behavior_t, @as(c_int, 11));
pub const _MACH_VM_REGION_H_ = "";
pub const _MACH_MACHINE_VM_PARAM_H_ = "";
pub const _MACH_ARM_VM_PARAM_H_ = "";
pub const _VM_PAGE_SIZE_H_ = "";
pub inline fn trunc_page(x: anytype) @TypeOf(x & ~(vm_page_size - @as(c_int, 1))) {
    return x & ~(vm_page_size - @as(c_int, 1));
}
pub inline fn round_page(x: anytype) @TypeOf(trunc_page(x + (vm_page_size - @as(c_int, 1)))) {
    return trunc_page(x + (vm_page_size - @as(c_int, 1)));
}
pub inline fn mach_vm_trunc_page(x: anytype) @TypeOf(@import("std").zig.c_translation.cast(mach_vm_offset_t, x) & ~@import("std").zig.c_translation.cast(c_int, vm_page_mask)) {
    return @import("std").zig.c_translation.cast(mach_vm_offset_t, x) & ~@import("std").zig.c_translation.cast(c_int, vm_page_mask);
}
pub inline fn mach_vm_round_page(x: anytype) @TypeOf((@import("std").zig.c_translation.cast(mach_vm_offset_t, x) + vm_page_mask) & ~@import("std").zig.c_translation.cast(c_int, vm_page_mask)) {
    return (@import("std").zig.c_translation.cast(mach_vm_offset_t, x) + vm_page_mask) & ~@import("std").zig.c_translation.cast(c_int, vm_page_mask);
}
pub inline fn trunc_page_kernel(x: anytype) @TypeOf(x & ~vm_kernel_page_mask) {
    return x & ~vm_kernel_page_mask;
}
pub inline fn round_page_kernel(x: anytype) @TypeOf(trunc_page_kernel(x + vm_kernel_page_mask)) {
    return trunc_page_kernel(x + vm_kernel_page_mask);
}
pub const BYTE_SIZE = @as(c_int, 8);
pub const PAGE_SHIFT = vm_page_shift;
pub const PAGE_SIZE = vm_page_size;
pub const PAGE_MASK = vm_page_mask;
pub const VM_PAGE_SIZE = vm_page_size;
pub inline fn machine_ptob(x: anytype) @TypeOf(x << PAGE_SHIFT) {
    return x << PAGE_SHIFT;
}
pub const PAGE_MAX_SHIFT = @as(c_int, 14);
pub const PAGE_MAX_SIZE = @as(c_int, 1) << PAGE_MAX_SHIFT;
pub const PAGE_MAX_MASK = PAGE_MAX_SIZE - @as(c_int, 1);
pub const PAGE_MIN_SHIFT = @as(c_int, 12);
pub const PAGE_MIN_SIZE = @as(c_int, 1) << PAGE_MIN_SHIFT;
pub const PAGE_MIN_MASK = PAGE_MIN_SIZE - @as(c_int, 1);
pub const VM_MAX_PAGE_ADDRESS = MACH_VM_MAX_ADDRESS;
pub const VM_MIN_ADDRESS = @import("std").zig.c_translation.cast(vm_address_t, @as(c_ulonglong, 0x0000000000000000));
pub const VM_MAX_ADDRESS = @import("std").zig.c_translation.cast(vm_address_t, @as(c_ulonglong, 0x0000000080000000));
pub const MACH_VM_MIN_ADDRESS_RAW = @as(c_ulonglong, 0x0);
pub const MACH_VM_MAX_ADDRESS_RAW = @as(c_ulonglong, 0x00007FFFFE000000);
pub const MACH_VM_MIN_ADDRESS = @import("std").zig.c_translation.cast(mach_vm_offset_t, MACH_VM_MIN_ADDRESS_RAW);
pub const MACH_VM_MAX_ADDRESS = @import("std").zig.c_translation.cast(mach_vm_offset_t, MACH_VM_MAX_ADDRESS_RAW);
pub const MACH_VM_MIN_GPU_CARVEOUT_ADDRESS_RAW = @as(c_ulonglong, 0x0000001000000000);
pub const MACH_VM_MAX_GPU_CARVEOUT_ADDRESS_RAW = @as(c_ulonglong, 0x0000007000000000);
pub const MACH_VM_MIN_GPU_CARVEOUT_ADDRESS = @import("std").zig.c_translation.cast(mach_vm_offset_t, MACH_VM_MIN_GPU_CARVEOUT_ADDRESS_RAW);
pub const MACH_VM_MAX_GPU_CARVEOUT_ADDRESS = @import("std").zig.c_translation.cast(mach_vm_offset_t, MACH_VM_MAX_GPU_CARVEOUT_ADDRESS_RAW);
pub const VM_MAP_MIN_ADDRESS = VM_MIN_ADDRESS;
pub const VM_MAP_MAX_ADDRESS = VM_MAX_ADDRESS;
pub const SWI_SYSCALL = @as(c_int, 0x80);
pub const VM_REGION_INFO_MAX = @as(c_int, 1024);
pub const VM_REGION_BASIC_INFO_64 = @as(c_int, 9);
pub const VM_REGION_BASIC_INFO_COUNT_64 = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(vm_region_basic_info_data_64_t) / @import("std").zig.c_translation.sizeof(c_int));
pub const VM_REGION_BASIC_INFO = @as(c_int, 10);
pub const VM_REGION_BASIC_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(vm_region_basic_info_data_t) / @import("std").zig.c_translation.sizeof(c_int));
pub const SM_COW = @as(c_int, 1);
pub const SM_PRIVATE = @as(c_int, 2);
pub const SM_EMPTY = @as(c_int, 3);
pub const SM_SHARED = @as(c_int, 4);
pub const SM_TRUESHARED = @as(c_int, 5);
pub const SM_PRIVATE_ALIASED = @as(c_int, 6);
pub const SM_SHARED_ALIASED = @as(c_int, 7);
pub const SM_LARGE_PAGE = @as(c_int, 8);
pub const VM_REGION_EXTENDED_INFO = @as(c_int, 13);
pub const VM_REGION_EXTENDED_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(vm_region_extended_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const VM_REGION_TOP_INFO = @as(c_int, 12);
pub const VM_REGION_TOP_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(vm_region_top_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const VM_REGION_SUBMAP_INFO_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(vm_region_submap_info_data_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const VM_REGION_SUBMAP_INFO_V2_SIZE = @import("std").zig.c_translation.sizeof(vm_region_submap_info_data_64_t);
pub const VM_REGION_SUBMAP_INFO_V1_SIZE = VM_REGION_SUBMAP_INFO_V2_SIZE - @import("std").zig.c_translation.sizeof(vm_object_id_t);
pub const VM_REGION_SUBMAP_INFO_V0_SIZE = VM_REGION_SUBMAP_INFO_V1_SIZE - @import("std").zig.c_translation.sizeof(c_uint);
pub const VM_REGION_SUBMAP_INFO_V2_COUNT_64 = @import("std").zig.c_translation.cast(mach_msg_type_number_t, VM_REGION_SUBMAP_INFO_V2_SIZE / @import("std").zig.c_translation.sizeof(natural_t));
pub const VM_REGION_SUBMAP_INFO_V1_COUNT_64 = @import("std").zig.c_translation.cast(mach_msg_type_number_t, VM_REGION_SUBMAP_INFO_V1_SIZE / @import("std").zig.c_translation.sizeof(natural_t));
pub const VM_REGION_SUBMAP_INFO_V0_COUNT_64 = @import("std").zig.c_translation.cast(mach_msg_type_number_t, VM_REGION_SUBMAP_INFO_V0_SIZE / @import("std").zig.c_translation.sizeof(natural_t));
pub const VM_REGION_SUBMAP_INFO_COUNT_64 = VM_REGION_SUBMAP_INFO_V2_COUNT_64;
pub const VM_REGION_SUBMAP_SHORT_INFO_COUNT_64 = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(vm_region_submap_short_info_data_64_t) / @import("std").zig.c_translation.sizeof(natural_t));
pub const VM_MAP_ENTRY_MAX = @as(c_int, 256);
pub const VM_PAGE_INFO_MAX = "";
pub const VM_PAGE_INFO_BASIC = @as(c_int, 1);
pub const VM_PAGE_INFO_BASIC_COUNT = @import("std").zig.c_translation.cast(mach_msg_type_number_t, @import("std").zig.c_translation.sizeof(vm_page_info_basic_data_t) / @import("std").zig.c_translation.sizeof(c_int));
pub const _MACH_KMOD_H_ = "";
pub const KMOD_MAX_NAME = @as(c_int, 64);
pub const KMOD_RETURN_SUCCESS = KERN_SUCCESS;
pub const KMOD_RETURN_FAILURE = KERN_FAILURE;
pub const KMOD_INFO_NAME = kmod_info;
pub const KMOD_INFO_VERSION = @as(c_int, 1);
pub const _MACH_DYLIB_INFO_H_ = "";
pub const _FSID_T = "";
pub const _FSOBJ_ID_T = "";
pub const TASK_NULL = @import("std").zig.c_translation.cast(task_t, @as(c_int, 0));
pub const TASK_NAME_NULL = @import("std").zig.c_translation.cast(task_name_t, @as(c_int, 0));
pub const TASK_INSPECT_NULL = @import("std").zig.c_translation.cast(task_inspect_t, @as(c_int, 0));
pub const TASK_READ_NULL = @import("std").zig.c_translation.cast(task_read_t, @as(c_int, 0));
pub const THREAD_NULL = @import("std").zig.c_translation.cast(thread_t, @as(c_int, 0));
pub const THREAD_INSPECT_NULL = @import("std").zig.c_translation.cast(thread_inspect_t, @as(c_int, 0));
pub const THREAD_READ_NULL = @import("std").zig.c_translation.cast(thread_read_t, @as(c_int, 0));
pub const TID_NULL = @import("std").zig.c_translation.cast(u64, @as(c_int, 0));
pub const THR_ACT_NULL = @import("std").zig.c_translation.cast(thread_act_t, @as(c_int, 0));
pub const IPC_SPACE_NULL = @import("std").zig.c_translation.cast(ipc_space_t, @as(c_int, 0));
pub const IPC_SPACE_READ_NULL = @import("std").zig.c_translation.cast(ipc_space_read_t, @as(c_int, 0));
pub const IPC_SPACE_INSPECT_NULL = @import("std").zig.c_translation.cast(ipc_space_inspect_t, @as(c_int, 0));
pub const COALITION_NULL = @import("std").zig.c_translation.cast(coalition_t, @as(c_int, 0));
pub const HOST_NULL = @import("std").zig.c_translation.cast(host_t, @as(c_int, 0));
pub const HOST_PRIV_NULL = @import("std").zig.c_translation.cast(host_priv_t, @as(c_int, 0));
pub const HOST_SECURITY_NULL = @import("std").zig.c_translation.cast(host_security_t, @as(c_int, 0));
pub const PROCESSOR_SET_NULL = @import("std").zig.c_translation.cast(processor_set_t, @as(c_int, 0));
pub const PROCESSOR_NULL = @import("std").zig.c_translation.cast(processor_t, @as(c_int, 0));
pub const SEMAPHORE_NULL = @import("std").zig.c_translation.cast(semaphore_t, @as(c_int, 0));
pub const LOCK_SET_NULL = @import("std").zig.c_translation.cast(lock_set_t, @as(c_int, 0));
pub const LEDGER_NULL = @import("std").zig.c_translation.cast(ledger_t, @as(c_int, 0));
pub const ALARM_NULL = @import("std").zig.c_translation.cast(alarm_t, @as(c_int, 0));
pub const CLOCK_NULL = @import("std").zig.c_translation.cast(clock_t, @as(c_int, 0));
pub const UND_SERVER_NULL = @import("std").zig.c_translation.cast(UNDServerRef, @as(c_int, 0));
pub const ARCADE_REG_NULL = @import("std").zig.c_translation.cast(arcade_register_t, @as(c_int, 0));
pub const MACH_EVENTLINK_NULL = @import("std").zig.c_translation.cast(mach_eventlink_t, @as(c_int, 0));
pub const IPC_EVENTLINK_NULL = @import("std").zig.c_translation.cast(ipc_eventlink_t, @as(c_int, 0));
pub const SUID_CRED_NULL = @import("std").zig.c_translation.cast(suid_cred_t, @as(c_int, 0));
pub const TASK_ID_TOKEN_NULL = @import("std").zig.c_translation.cast(task_id_token_t, @as(c_int, 0));
pub const TASK_FLAVOR_CONTROL = @as(c_int, 0);
pub const TASK_FLAVOR_READ = @as(c_int, 1);
pub const TASK_FLAVOR_INSPECT = @as(c_int, 2);
pub const TASK_FLAVOR_NAME = @as(c_int, 3);
pub const TASK_FLAVOR_MAX = TASK_FLAVOR_NAME;
pub const THREAD_FLAVOR_CONTROL = @as(c_int, 0);
pub const THREAD_FLAVOR_READ = @as(c_int, 1);
pub const THREAD_FLAVOR_INSPECT = @as(c_int, 2);
pub const THREAD_FLAVOR_MAX = THREAD_FLAVOR_INSPECT;
pub const LEDGER_ITEM_INFINITY = @import("std").zig.c_translation.cast(ledger_item_t, ~@as(c_int, 0));
pub const LEDGER_LIMIT_INFINITY = @import("std").zig.c_translation.cast(ledger_amount_t, (@as(c_ulonglong, 1) << @as(c_int, 63)) - @as(c_int, 1));
pub const _MACH_INIT_ = @as(c_int, 1);
pub inline fn mach_task_self() @TypeOf(mach_task_self_) {
    return mach_task_self_;
}
pub inline fn current_task() @TypeOf(mach_task_self()) {
    return mach_task_self();
}
pub const _MACH_MACH_TRAPS_H_ = "";
pub const NAME_SERVER_SLOT = @as(c_int, 0);
pub const ENVIRONMENT_SLOT = @as(c_int, 1);
pub const SERVICE_SLOT = @as(c_int, 2);
pub const MACH_PORTS_SLOTS_USED = @as(c_int, 3);
pub const __IOKIT_IOTYPES_H = "";
pub const IOKIT = @as(c_int, 1);
pub const __IOKIT_IORETURN_H = "";
pub const _MACH_ERROR_H_ = "";
pub const err_none = @import("std").zig.c_translation.cast(mach_error_t, @as(c_int, 0));
pub const ERR_SUCCESS = @import("std").zig.c_translation.cast(mach_error_t, @as(c_int, 0));
pub const ERR_ROUTINE_NIL = @import("std").zig.c_translation.cast(mach_error_fn_t, @as(c_int, 0));
pub inline fn err_system(x: anytype) c_int {
    return @import("std").zig.c_translation.cast(c_int, (@import("std").zig.c_translation.cast(c_uint, x) & @as(c_int, 0x3f)) << @as(c_int, 26));
}
pub inline fn err_sub(x: anytype) @TypeOf((x & @as(c_int, 0xfff)) << @as(c_int, 14)) {
    return (x & @as(c_int, 0xfff)) << @as(c_int, 14);
}
pub inline fn err_get_system(err: anytype) @TypeOf((err >> @as(c_int, 26)) & @as(c_int, 0x3f)) {
    return (err >> @as(c_int, 26)) & @as(c_int, 0x3f);
}
pub inline fn err_get_sub(err: anytype) @TypeOf((err >> @as(c_int, 14)) & @as(c_int, 0xfff)) {
    return (err >> @as(c_int, 14)) & @as(c_int, 0xfff);
}
pub inline fn err_get_code(err: anytype) @TypeOf(err & @as(c_int, 0x3fff)) {
    return err & @as(c_int, 0x3fff);
}
pub const system_emask = err_system(@as(c_int, 0x3f));
pub const sub_emask = err_sub(@as(c_int, 0xfff));
pub const code_emask = @as(c_int, 0x3fff);
pub const err_kern = err_system(@as(c_int, 0x0));
pub const err_us = err_system(@as(c_int, 0x1));
pub const err_server = err_system(@as(c_int, 0x2));
pub const err_ipc = err_system(@as(c_int, 0x3));
pub const err_mach_ipc = err_system(@as(c_int, 0x4));
pub const err_dipc = err_system(@as(c_int, 0x7));
pub const err_local = err_system(@as(c_int, 0x3e));
pub const err_ipc_compat = err_system(@as(c_int, 0x3f));
pub const err_max_system = @as(c_int, 0x3f);
pub inline fn unix_err(errno_1: anytype) @TypeOf((err_kern | err_sub(@as(c_int, 3))) | errno_1) {
    return (err_kern | err_sub(@as(c_int, 3))) | errno_1;
}
pub const sys_iokit = err_system(@as(c_int, 0x38));
pub const sub_iokit_common = err_sub(@as(c_int, 0));
pub const sub_iokit_usb = err_sub(@as(c_int, 1));
pub const sub_iokit_firewire = err_sub(@as(c_int, 2));
pub const sub_iokit_block_storage = err_sub(@as(c_int, 4));
pub const sub_iokit_graphics = err_sub(@as(c_int, 5));
pub const sub_iokit_networking = err_sub(@as(c_int, 6));
pub const sub_iokit_bluetooth = err_sub(@as(c_int, 8));
pub const sub_iokit_pmu = err_sub(@as(c_int, 9));
pub const sub_iokit_acpi = err_sub(@as(c_int, 10));
pub const sub_iokit_smbus = err_sub(@as(c_int, 11));
pub const sub_iokit_ahci = err_sub(@as(c_int, 12));
pub const sub_iokit_powermanagement = err_sub(@as(c_int, 13));
pub const sub_iokit_hidsystem = err_sub(@as(c_int, 14));
pub const sub_iokit_scsi = err_sub(@as(c_int, 16));
pub const sub_iokit_usbaudio = err_sub(@as(c_int, 17));
pub const sub_iokit_wirelesscharging = err_sub(@as(c_int, 18));
pub const sub_iokit_thunderbolt = err_sub(@as(c_int, 29));
pub const sub_iokit_graphics_acceleration = err_sub(@as(c_int, 30));
pub const sub_iokit_keystore = err_sub(@as(c_int, 31));
pub const sub_iokit_apfs = err_sub(@as(c_int, 33));
pub const sub_iokit_acpiec = err_sub(@as(c_int, 34));
pub const sub_iokit_timesync_avb = err_sub(@as(c_int, 35));
pub const sub_iokit_platform = err_sub(@as(c_int, 0x2A));
pub const sub_iokit_audio_video = err_sub(@as(c_int, 0x45));
pub const sub_iokit_cec = err_sub(@as(c_int, 0x46));
pub const sub_iokit_baseband = err_sub(@as(c_int, 0x80));
pub const sub_iokit_HDA = err_sub(@as(c_int, 0xFE));
pub const sub_iokit_hsic = err_sub(@as(c_int, 0x147));
pub const sub_iokit_sdio = err_sub(@as(c_int, 0x174));
pub const sub_iokit_wlan = err_sub(@as(c_int, 0x208));
pub const sub_iokit_appleembeddedsleepwakehandler = err_sub(@as(c_int, 0x209));
pub const sub_iokit_appleppm = err_sub(@as(c_int, 0x20A));
pub const sub_iokit_vendor_specific = err_sub(-@as(c_int, 2));
pub const sub_iokit_reserved = err_sub(-@as(c_int, 1));
pub const kIOReturnSuccess = KERN_SUCCESS;
pub const kIOReturnError = iokit_common_err(@as(c_int, 0x2bc));
pub const kIOReturnNoMemory = iokit_common_err(@as(c_int, 0x2bd));
pub const kIOReturnNoResources = iokit_common_err(@as(c_int, 0x2be));
pub const kIOReturnIPCError = iokit_common_err(@as(c_int, 0x2bf));
pub const kIOReturnNoDevice = iokit_common_err(@as(c_int, 0x2c0));
pub const kIOReturnNotPrivileged = iokit_common_err(@as(c_int, 0x2c1));
pub const kIOReturnBadArgument = iokit_common_err(@as(c_int, 0x2c2));
pub const kIOReturnLockedRead = iokit_common_err(@as(c_int, 0x2c3));
pub const kIOReturnLockedWrite = iokit_common_err(@as(c_int, 0x2c4));
pub const kIOReturnExclusiveAccess = iokit_common_err(@as(c_int, 0x2c5));
pub const kIOReturnBadMessageID = iokit_common_err(@as(c_int, 0x2c6));
pub const kIOReturnUnsupported = iokit_common_err(@as(c_int, 0x2c7));
pub const kIOReturnVMError = iokit_common_err(@as(c_int, 0x2c8));
pub const kIOReturnInternalError = iokit_common_err(@as(c_int, 0x2c9));
pub const kIOReturnIOError = iokit_common_err(@as(c_int, 0x2ca));
pub const kIOReturnCannotLock = iokit_common_err(@as(c_int, 0x2cc));
pub const kIOReturnNotOpen = iokit_common_err(@as(c_int, 0x2cd));
pub const kIOReturnNotReadable = iokit_common_err(@as(c_int, 0x2ce));
pub const kIOReturnNotWritable = iokit_common_err(@as(c_int, 0x2cf));
pub const kIOReturnNotAligned = iokit_common_err(@as(c_int, 0x2d0));
pub const kIOReturnBadMedia = iokit_common_err(@as(c_int, 0x2d1));
pub const kIOReturnStillOpen = iokit_common_err(@as(c_int, 0x2d2));
pub const kIOReturnRLDError = iokit_common_err(@as(c_int, 0x2d3));
pub const kIOReturnDMAError = iokit_common_err(@as(c_int, 0x2d4));
pub const kIOReturnBusy = iokit_common_err(@as(c_int, 0x2d5));
pub const kIOReturnTimeout = iokit_common_err(@as(c_int, 0x2d6));
pub const kIOReturnOffline = iokit_common_err(@as(c_int, 0x2d7));
pub const kIOReturnNotReady = iokit_common_err(@as(c_int, 0x2d8));
pub const kIOReturnNotAttached = iokit_common_err(@as(c_int, 0x2d9));
pub const kIOReturnNoChannels = iokit_common_err(@as(c_int, 0x2da));
pub const kIOReturnNoSpace = iokit_common_err(@as(c_int, 0x2db));
pub const kIOReturnPortExists = iokit_common_err(@as(c_int, 0x2dd));
pub const kIOReturnCannotWire = iokit_common_err(@as(c_int, 0x2de));
pub const kIOReturnNoInterrupt = iokit_common_err(@as(c_int, 0x2df));
pub const kIOReturnNoFrames = iokit_common_err(@as(c_int, 0x2e0));
pub const kIOReturnMessageTooLarge = iokit_common_err(@as(c_int, 0x2e1));
pub const kIOReturnNotPermitted = iokit_common_err(@as(c_int, 0x2e2));
pub const kIOReturnNoPower = iokit_common_err(@as(c_int, 0x2e3));
pub const kIOReturnNoMedia = iokit_common_err(@as(c_int, 0x2e4));
pub const kIOReturnUnformattedMedia = iokit_common_err(@as(c_int, 0x2e5));
pub const kIOReturnUnsupportedMode = iokit_common_err(@as(c_int, 0x2e6));
pub const kIOReturnUnderrun = iokit_common_err(@as(c_int, 0x2e7));
pub const kIOReturnOverrun = iokit_common_err(@as(c_int, 0x2e8));
pub const kIOReturnDeviceError = iokit_common_err(@as(c_int, 0x2e9));
pub const kIOReturnNoCompletion = iokit_common_err(@as(c_int, 0x2ea));
pub const kIOReturnAborted = iokit_common_err(@as(c_int, 0x2eb));
pub const kIOReturnNoBandwidth = iokit_common_err(@as(c_int, 0x2ec));
pub const kIOReturnNotResponding = iokit_common_err(@as(c_int, 0x2ed));
pub const kIOReturnIsoTooOld = iokit_common_err(@as(c_int, 0x2ee));
pub const kIOReturnIsoTooNew = iokit_common_err(@as(c_int, 0x2ef));
pub const kIOReturnNotFound = iokit_common_err(@as(c_int, 0x2f0));
pub const kIOReturnInvalid = iokit_common_err(@as(c_int, 0x1));
pub const _OS_OSTYPES_H = "";
pub const OSTYPES_K64_REV = @as(c_int, 2);
pub const PRIIOByteCount = PRIu64;
pub inline fn IOPhysical32(hi: anytype, lo: anytype) @TypeOf(@import("std").zig.c_translation.cast(UInt64, lo) + (@import("std").zig.c_translation.cast(UInt64, hi) << @as(c_int, 32))) {
    return @import("std").zig.c_translation.cast(UInt64, lo) + (@import("std").zig.c_translation.cast(UInt64, hi) << @as(c_int, 32));
}
pub const IOPhysSize = @as(c_int, 64);
pub const __IOKIT_PORTS_DEFINED__ = "";
pub const DEVICE_TYPES_H = "";
pub const IO_OBJECT_NULL = @import("std").zig.c_translation.cast(io_object_t, @as(c_int, 0));
pub const __IOKIT_IOMAPTYPES_H = "";
pub const _IOKIT_IOKITKEYS_H = "";
pub const kIOKitBuildVersionKey = "IOKitBuildVersion";
pub const kIOKitDiagnosticsKey = "IOKitDiagnostics";
pub const kIORegistryPlanesKey = "IORegistryPlanes";
pub const kIOCatalogueKey = "IOCatalogue";
pub const kIOServicePlane = "IOService";
pub const kIOPowerPlane = "IOPower";
pub const kIODeviceTreePlane = "IODeviceTree";
pub const kIOAudioPlane = "IOAudio";
pub const kIOFireWirePlane = "IOFireWire";
pub const kIOUSBPlane = "IOUSB";
pub const kIORegistryEntryIDKey = "IORegistryEntryID";
pub const kIORegistryEntryPropertyKeysKey = "IORegistryEntryPropertyKeys";
pub const kIOServiceClass = "IOService";
pub const kIOResourcesClass = "IOResources";
pub const kIOClassKey = "IOClass";
pub const kIOProbeScoreKey = "IOProbeScore";
pub const kIOKitDebugKey = "IOKitDebug";
pub const kIOSupportedPropertiesKey = "IOSupportedProperties";
pub const kIOUserServicePropertiesKey = "IOUserServiceProperties";
pub const kIOProviderClassKey = "IOProviderClass";
pub const kIONameMatchKey = "IONameMatch";
pub const kIOPropertyMatchKey = "IOPropertyMatch";
pub const kIOPropertyExistsMatchKey = "IOPropertyExistsMatch";
pub const kIOPathMatchKey = "IOPathMatch";
pub const kIOLocationMatchKey = "IOLocationMatch";
pub const kIOParentMatchKey = "IOParentMatch";
pub const kIOResourceMatchKey = "IOResourceMatch";
pub const kIOResourceMatchedKey = "IOResourceMatched";
pub const kIOMatchedServiceCountKey = "IOMatchedServiceCountMatch";
pub const kIONameMatchedKey = "IONameMatched";
pub const kIOMatchCategoryKey = "IOMatchCategory";
pub const kIODefaultMatchCategoryKey = "IODefaultMatchCategory";
pub const kIOMatchedPersonalityKey = "IOMatchedPersonality";
pub const kIORematchPersonalityKey = "IORematchPersonality";
pub const kIORematchCountKey = "IORematchCount";
pub const kIODEXTMatchCountKey = "IODEXTMatchCount";
pub const kIOServiceDEXTEntitlementsKey = "IOServiceDEXTEntitlements";
pub const kIODriverKitEntitlementKey = "com.apple.developer.driverkit";
pub const kIODriverKitUserClientEntitlementsKey = "com.apple.developer.driverkit.userclient-access";
pub const kIODriverKitRequiredEntitlementsKey = "com.apple.private.driverkit.driver-access";
pub const kIODriverKitUserClientEntitlementAllowAnyKey = "com.apple.developer.driverkit.allow-any-userclient-access";
pub const kIODriverKitUserClientEntitlementAdministratorKey = "com.apple.developer.driverkit.administrator";
pub const kIODriverKitUSBTransportEntitlementKey = "com.apple.developer.driverkit.transport.usb";
pub const kIODriverKitHIDTransportEntitlementKey = "com.apple.developer.driverkit.transport.hid";
pub const kIODriverKitHIDFamilyDeviceEntitlementKey = "com.apple.developer.driverkit.family.hid.device";
pub const kIODriverKitHIDFamilyEventServiceEntitlementKey = "com.apple.developer.driverkit.family.hid.eventservice";
pub const kIODriverKitTransportBuiltinEntitlementKey = "com.apple.developer.driverkit.builtin";
pub const kIONVRAMReadAccessKey = "com.apple.private.iokit.nvram-read-access";
pub const kIONVRAMWriteAccessKey = "com.apple.private.iokit.nvram-write-access";
pub const kIOResourcesSetPropertyKey = "com.apple.private.iokit.ioresources.setproperty";
pub const kIONVRAMSystemAllowKey = "com.apple.private.iokit.system-nvram-allow";
pub const kIOMatchDeferKey = "IOMatchDefer";
pub const kIOAllCPUInitializedKey = "IOAllCPUInitialized";
pub const kIOUserClientClassKey = "IOUserClientClass";
pub const kIOMapperIDKey = "IOMapperID";
pub const kIOUserClientCrossEndianKey = "IOUserClientCrossEndian";
pub const kIOUserClientCrossEndianCompatibleKey = "IOUserClientCrossEndianCompatible";
pub const kIOUserClientSharedInstanceKey = "IOUserClientSharedInstance";
pub const kIOUserClientDefaultLockingKey = "IOUserClientDefaultLocking";
pub const kIOUserClientCreatorKey = "IOUserClientCreator";
pub const kIOUserServerCDHashKey = "IOUserServerCDHash";
pub const kIOUserUserClientKey = "IOUserUserClient";
pub const kIOUserServerOneProcessKey = "IOUserServerOneProcess";
pub const kIOPublishNotification = "IOServicePublish";
pub const kIOFirstPublishNotification = "IOServiceFirstPublish";
pub const kIOMatchedNotification = "IOServiceMatched";
pub const kIOFirstMatchNotification = "IOServiceFirstMatch";
pub const kIOTerminatedNotification = "IOServiceTerminate";
pub const kIOWillTerminateNotification = "IOServiceWillTerminate";
pub const kIOGeneralInterest = "IOGeneralInterest";
pub const kIOBusyInterest = "IOBusyInterest";
pub const kIOAppPowerStateInterest = "IOAppPowerStateInterest";
pub const kIOPriorityPowerStateInterest = "IOPriorityPowerStateInterest";
pub const kIOPlatformDeviceMessageKey = "IOPlatformDeviceMessage";
pub const kIOCFPlugInTypesKey = "IOCFPlugInTypes";
pub const kIOCompatibilityMatchKey = "IOCompatibilityMatch";
pub const kIOCompatibilityPropertiesKey = "IOCompatibilityProperties";
pub const kIOPathKey = "IOPath";
pub const kIOCommandPoolSizeKey = "IOCommandPoolSize";
pub const kIOMaximumPriorityCountKey = "IOMaximumPriorityCount";
pub const kIOMaximumBlockCountReadKey = "IOMaximumBlockCountRead";
pub const kIOMaximumBlockCountWriteKey = "IOMaximumBlockCountWrite";
pub const kIOMaximumByteCountReadKey = "IOMaximumByteCountRead";
pub const kIOMaximumByteCountWriteKey = "IOMaximumByteCountWrite";
pub const kIOMaximumSegmentCountReadKey = "IOMaximumSegmentCountRead";
pub const kIOMaximumSegmentCountWriteKey = "IOMaximumSegmentCountWrite";
pub const kIOMaximumSegmentByteCountReadKey = "IOMaximumSegmentByteCountRead";
pub const kIOMaximumSegmentByteCountWriteKey = "IOMaximumSegmentByteCountWrite";
pub const kIOMinimumSegmentAlignmentByteCountKey = "IOMinimumSegmentAlignmentByteCount";
pub const kIOMaximumSegmentAddressableBitCountKey = "IOMaximumSegmentAddressableBitCount";
pub const kIOMinimumSaturationByteCountKey = "IOMinimumSaturationByteCount";
pub const kIOMaximumSwapWriteKey = "IOMaximumSwapWrite";
pub const kIOIconKey = "IOIcon";
pub const kIOBundleResourceFileKey = "IOBundleResourceFile";
pub const kIOBusBadgeKey = "IOBusBadge";
pub const kIODeviceIconKey = "IODeviceIcon";
pub const kIOPlatformSerialNumberKey = "IOPlatformSerialNumber";
pub const kIOPlatformUUIDKey = "IOPlatformUUID";
pub const kIONVRAMBootArgsKey = "boot-args";
pub const kIONVRAMDeletePropertyKey = "IONVRAM-DELETE-PROPERTY";
pub const kIONVRAMSyncNowPropertyKey = "IONVRAM-SYNCNOW-PROPERTY";
pub const kIONVRAMActivateCSRConfigPropertyKey = "IONVRAM-ARMCSR-PROPERTY";
pub const kIODTNVRAMPanicInfoKey = "aapl,panic-info";
pub const kIOBootDeviceKey = "IOBootDevice";
pub const kIOBootDevicePathKey = "IOBootDevicePath";
pub const kIOBootDeviceSizeKey = "IOBootDeviceSize";
pub const kOSBuildVersionKey = "OS Build Version";
pub const kIOStateNotificationItemCreateKey = "com.apple.iokit.statenotification.create";
pub const kIOStateNotificationItemSetKey = "com.apple.iokit.statenotification.set";
pub const kIOStateNotificationItemCopyKey = "com.apple.iokit.statenotification.copy";
pub const kIOStateNotificationNameKey = "com.apple.iokit.statenotification.name";
pub const kIOStateNotificationEntitlementSetKey = "com.apple.iokit.statenotification.entitlement-set";
pub const kIOStateNotificationEntitlementGetKey = "com.apple.iokit.statenotification.entitlement-get";
pub const kIOSystemStateClamshellKey = "com.apple.iokit.pm.clamshell";
pub const kIOSystemStateSleepDescriptionKey = "com.apple.iokit.pm.sleepdescription";
pub const kIOSystemStateSleepDescriptionReasonKey = "com.apple.iokit.pm.sleepreason";
pub const kIOSystemStateSleepDescriptionHibernateStateKey = "com.apple.iokit.pm.hibernatestate";
pub const kIOSystemStateHaltDescriptionKey = "com.apple.iokit.pm.haltdescription";
pub const kIOSystemStateHaltDescriptionHaltStateKey = "com.apple.iokit.pm.haltstate";
pub const kIOSystemStatePowerSourceDescriptionKey = "com.apple.iokit.pm.powersourcedescription";
pub const kIOSystemStatePowerSourceDescriptionACAttachedKey = "com.apple.iokit.pm.acattached";
pub const __OS_OSMESSAGENOTIFICATION_H = "";
pub const __DISKARBITRATION_DASESSION__ = "";
pub const __HFS_UNISTR__ = "";
pub const _HFSUNISTR255_DEFINED_ = "";
pub const kFSFileSecurityRemoveACL = @import("std").zig.c_translation.cast(acl_t, _FILESEC_REMOVE_ACL);
pub const __RESOURCES__ = "";
pub const MacLoadResource = LoadResource;
pub inline fn ComponentCallNow(callNumber: anytype, paramSize: anytype) @TypeOf(FIVEWORDINLINE(@as(c_int, 0x2F3C), paramSize, callNumber, @as(c_int, 0x7000), @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xA82A, .hexadecimal))) {
    return FIVEWORDINLINE(@as(c_int, 0x2F3C), paramSize, callNumber, @as(c_int, 0x7000), @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xA82A, .hexadecimal));
}
pub const __CODEFRAGMENTS__ = "";
pub const __MULTIPROCESSING__ = "";
pub const MPCopyrightNotice = "Copyright 1995-2020 Apple Computer, Inc.\n";
pub const MPLibraryName = "MPLibrary";
pub const MPLibraryCName = MPLibraryName;
pub const MP_API_Version = "2.3";
pub inline fn MPCreateBinarySemaphore(semaphore: anytype) @TypeOf(MPCreateSemaphore(@as(c_int, 1), @as(c_int, 1), semaphore)) {
    return MPCreateSemaphore(@as(c_int, 1), @as(c_int, 1), semaphore);
}
pub const kMPUnresolvedCFragSymbolAddress = @as(c_int, 0);
pub inline fn MPLibraryIsLoaded() @TypeOf(@"true") {
    return @"true";
}
pub const __ALIASES__ = "";
pub const __AL_USE_OPAQUE_RECORD__ = @as(c_int, 1);
pub const __MACLOCALES__ = "";
pub const __DEBUGGING__ = "";
pub const kComponentSignatureString = "Third Party Client";
pub const COMPONENT_SIGNATURE = 0x3f2a3f2a;
pub const DEBUG_LEVEL_PRODUCTION = @as(c_int, 0);
pub const DEBUG_LEVEL_BREAK_ONLY = @as(c_int, 1);
pub const DEBUG_LEVEL_EXTERNAL = @as(c_int, 3);
pub const DEBUG_LEVEL_INTERNAL = @as(c_int, 4);
pub const DEBUGFULL = DEBUG_LEVEL_INTERNAL;
pub const DEBUGLEVEL = DEBUG_LEVEL_PRODUCTION;
pub const DEBUG_NO_OPTIONS = @as(c_int, 0);
pub const DEBUG_ASSERT_COMPONENT_NAME_STRING = kComponentSignatureString;
pub const DEBUG_ASSERT_PRODUCTION_CODE = DEBUGLEVEL == @as(c_int, 0);
pub inline fn DEBUG_ASSERT_MESSAGE(componentNameString: anytype, assertionString: anytype, exceptionLabelString: anytype, errorString: anytype, fileName: anytype, lineNumber: anytype, value: anytype) @TypeOf(DEBUGASSERTMSG(COMPONENT_SIGNATURE, DEBUG_NO_OPTIONS, componentNameString ++ ": " ++ assertionString, exceptionLabelString, errorString, fileName, lineNumber, value)) {
    return DEBUGASSERTMSG(COMPONENT_SIGNATURE, DEBUG_NO_OPTIONS, componentNameString ++ ": " ++ assertionString, exceptionLabelString, errorString, fileName, lineNumber, value);
}
pub const __ASSERTMACROS__ = "";
pub inline fn __nCheck(assertion: anytype) @TypeOf(__Check(!(assertion != 0))) {
    return __Check(!(assertion != 0));
}
pub inline fn __nCheck_String(assertion: anytype, message: anytype) @TypeOf(__Check_String(!(assertion != 0), message)) {
    return __Check_String(!(assertion != 0), message);
}
pub inline fn __nVerify(assertion: anytype) @TypeOf(__Verify(!(assertion != 0))) {
    return __Verify(!(assertion != 0));
}
pub inline fn __nVerify_String(assertion: anytype, message: anytype) @TypeOf(__Verify_String(!(assertion != 0), message)) {
    return __Verify_String(!(assertion != 0), message);
}
pub inline fn __nRequire(assertion: anytype, exceptionLabel: anytype) @TypeOf(__Require(!(assertion != 0), exceptionLabel)) {
    return __Require(!(assertion != 0), exceptionLabel);
}
pub inline fn __nRequire_Action(assertion: anytype, exceptionLabel: anytype, action: anytype) @TypeOf(__Require_Action(!(assertion != 0), exceptionLabel, action)) {
    return __Require_Action(!(assertion != 0), exceptionLabel, action);
}
pub inline fn __nRequire_Quiet(assertion: anytype, exceptionLabel: anytype) @TypeOf(__Require_Quiet(!(assertion != 0), exceptionLabel)) {
    return __Require_Quiet(!(assertion != 0), exceptionLabel);
}
pub inline fn __nRequire_Action_Quiet(assertion: anytype, exceptionLabel: anytype, action: anytype) @TypeOf(__Require_Action_Quiet(!(assertion != 0), exceptionLabel, action)) {
    return __Require_Action_Quiet(!(assertion != 0), exceptionLabel, action);
}
pub inline fn __nRequire_String(assertion: anytype, exceptionLabel: anytype, string: anytype) @TypeOf(__Require_String(!(assertion != 0), exceptionLabel, string)) {
    return __Require_String(!(assertion != 0), exceptionLabel, string);
}
pub inline fn __nRequire_Action_String(assertion: anytype, exceptionLabel: anytype, action: anytype, message: anytype) @TypeOf(__Require_Action_String(!(assertion != 0), exceptionLabel, action, message)) {
    return __Require_Action_String(!(assertion != 0), exceptionLabel, action, message);
}
pub const __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES = @as(c_int, 0);
pub inline fn ATTASKLEVEL0() @TypeOf(TaskLevel() == @as(c_int, 0)) {
    return TaskLevel() == @as(c_int, 0);
}
pub inline fn check_tasklevel0() @TypeOf(__Check(ATTASKLEVEL0())) {
    return __Check(ATTASKLEVEL0());
}
pub inline fn verify_tasklevel0() @TypeOf(__Verify(ATTASKLEVEL0())) {
    return __Verify(ATTASKLEVEL0());
}
pub inline fn verify_tasklevel0_string(cstring: anytype) @TypeOf(__Verify_String(ATTASKLEVEL0(), cstring)) {
    return __Verify_String(ATTASKLEVEL0(), cstring);
}
pub inline fn require_tasklevel0(exceptionLabel: anytype) @TypeOf(__Require(ATTASKLEVEL0(), exceptionLabel)) {
    return __Require(ATTASKLEVEL0(), exceptionLabel);
}
pub const __PLSTRINGFUNCS__ = "";
pub const __DRIVERSYNCHRONIZATION__ = "";
pub const __DRIVERSERVICES__ = "";
pub const __MACHINEEXCEPTIONS__ = "";
pub const __NUMBERFORMATTING__ = "";
pub const __STRINGCOMPARE__ = "";
pub const __TEXTUTILS__ = "";
pub const __TOOLUTILS__ = "";
pub inline fn HiWord(x: anytype) c_short {
    return @import("std").zig.c_translation.cast(c_short, @import("std").zig.c_translation.cast(c_long, x) >> @as(c_int, 16));
}
pub inline fn LoWord(x: anytype) c_short {
    return @import("std").zig.c_translation.cast(c_short, x);
}
pub const __UNICODEUTILITIES__ = "";
pub const __FP__ = "";
pub const SIGDIGLEN = @as(c_int, 36);
pub const DECSTROUTLEN = @as(c_int, 80);
pub const FLOATDECIMAL = @import("std").zig.c_translation.cast(u8, @as(c_int, 0));
pub const FIXEDDECIMAL = @import("std").zig.c_translation.cast(u8, @as(c_int, 1));
pub const _LIBCPP_FENV_H = "";
pub const __FENV_H__ = "";
pub const FE_INEXACT = @as(c_int, 0x0010);
pub const FE_UNDERFLOW = @as(c_int, 0x0008);
pub const FE_OVERFLOW = @as(c_int, 0x0004);
pub const FE_DIVBYZERO = @as(c_int, 0x0002);
pub const FE_INVALID = @as(c_int, 0x0001);
pub const FE_FLUSHTOZERO = @as(c_int, 0x0080);
pub const FE_ALL_EXCEPT = @as(c_int, 0x009f);
pub const FE_TONEAREST = @as(c_int, 0x00000000);
pub const FE_UPWARD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal);
pub const FE_DOWNWARD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal);
pub const FE_TOWARDZERO = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00C00000, .hexadecimal);
pub const FE_DFL_ENV = &_FE_DFL_ENV;
pub const FE_DFL_DISABLE_DENORMS_ENV = &_FE_DFL_DISABLE_DENORMS_ENV;
pub const __TEXTENCODINGCONVERTER__ = "";
pub const __UNICODECONVERTER__ = "";
pub const __THREADS__ = "";
pub const MacGetCurrentThread = GetCurrentThread;
pub const __FOLDERS__ = "";
pub const __TIMER__ = "";
pub const __MULTIPROCESSINGINFO__ = "";
pub const __LOWMEM__ = "";
pub const __AVLTREE__ = "";
pub const __PEFBINARYFORMAT__ = "";
pub inline fn PEFFirstSectionNameOffset(container: anytype) @TypeOf(kPEFFirstSectionHeaderOffset + (container.*.sectionCount * @import("std").zig.c_translation.sizeof(PEFSectionHeader))) {
    return kPEFFirstSectionHeaderOffset + (container.*.sectionCount * @import("std").zig.c_translation.sizeof(PEFSectionHeader));
}
pub inline fn PEFPkDataOpcode(byte: anytype) @TypeOf(@import("std").zig.c_translation.cast(UInt8, byte) >> kPEFPkDataOpcodeShift) {
    return @import("std").zig.c_translation.cast(UInt8, byte) >> kPEFPkDataOpcodeShift;
}
pub inline fn PEFPkDataCount5(byte: anytype) @TypeOf(@import("std").zig.c_translation.cast(UInt8, byte) & kPEFPkDataCount5Mask) {
    return @import("std").zig.c_translation.cast(UInt8, byte) & kPEFPkDataCount5Mask;
}
pub inline fn PEFPkDataComposeInstr(opcode: anytype, count5: anytype) @TypeOf((@import("std").zig.c_translation.cast(UInt8, opcode) << kPEFPkDataOpcodeShift) | @import("std").zig.c_translation.cast(UInt8, count5)) {
    return (@import("std").zig.c_translation.cast(UInt8, opcode) << kPEFPkDataOpcodeShift) | @import("std").zig.c_translation.cast(UInt8, count5);
}
pub inline fn PEFImportedSymbolClass(classAndName: anytype) UInt8 {
    return @import("std").zig.c_translation.cast(UInt8, classAndName >> kPEFImpSymClassShift);
}
pub inline fn PEFImportedSymbolNameOffset(classAndName: anytype) @TypeOf(classAndName & kPEFImpSymNameOffsetMask) {
    return classAndName & kPEFImpSymNameOffsetMask;
}
pub inline fn PEFComposeImportedSymbol(class: anytype, nameOffset: anytype) @TypeOf((@import("std").zig.c_translation.cast(UInt32, class) << kPEFImpSymClassShift) | @import("std").zig.c_translation.cast(UInt32, nameOffset)) {
    return (@import("std").zig.c_translation.cast(UInt32, class) << kPEFImpSymClassShift) | @import("std").zig.c_translation.cast(UInt32, nameOffset);
}
pub inline fn PEFHashTableIndex(fullHashWord: anytype, hashTablePower: anytype) @TypeOf((fullHashWord ^ (fullHashWord >> hashTablePower)) & ((@as(c_int, 1) << hashTablePower) - @as(c_int, 1))) {
    return (fullHashWord ^ (fullHashWord >> hashTablePower)) & ((@as(c_int, 1) << hashTablePower) - @as(c_int, 1));
}
pub inline fn PEFHashSlotSymbolCount(countAndStart: anytype) UInt32 {
    return @import("std").zig.c_translation.cast(UInt32, countAndStart >> kPEFHashSlotSymCountShift);
}
pub inline fn PEFHashSlotFirstKey(countAndStart: anytype) @TypeOf(countAndStart & kPEFHashSlotFirstKeyMask) {
    return countAndStart & kPEFHashSlotFirstKeyMask;
}
pub inline fn PEFComposeExportedSymbolHashSlot(symbolCount: anytype, firstKey: anytype) @TypeOf((@import("std").zig.c_translation.cast(UInt32, symbolCount) << kPEFHashSlotSymCountShift) | @import("std").zig.c_translation.cast(UInt32, firstKey)) {
    return (@import("std").zig.c_translation.cast(UInt32, symbolCount) << kPEFHashSlotSymCountShift) | @import("std").zig.c_translation.cast(UInt32, firstKey);
}
pub inline fn PEFHashNameLength(fullHashWord: anytype) UInt32 {
    return @import("std").zig.c_translation.cast(UInt32, fullHashWord >> kPEFHashLengthShift);
}
pub inline fn PEFHashValue(fullHashWord: anytype) @TypeOf(fullHashWord & kPEFHashValueMask) {
    return fullHashWord & kPEFHashValueMask;
}
pub inline fn PEFComposeFullHashWord(nameLength: anytype, hashValue: anytype) @TypeOf((@import("std").zig.c_translation.cast(UInt32, nameLength) << kPEFHashLengthShift) | @import("std").zig.c_translation.cast(UInt32, hashValue)) {
    return (@import("std").zig.c_translation.cast(UInt32, nameLength) << kPEFHashLengthShift) | @import("std").zig.c_translation.cast(UInt32, hashValue);
}
pub inline fn PEFExportedSymbolClass(classAndName: anytype) UInt8 {
    return @import("std").zig.c_translation.cast(UInt8, classAndName >> kPEFExpSymClassShift);
}
pub inline fn PEFExportedSymbolNameOffset(classAndName: anytype) @TypeOf(classAndName & kPEFExpSymNameOffsetMask) {
    return classAndName & kPEFExpSymNameOffsetMask;
}
pub inline fn PEFComposeExportedSymbol(class: anytype, nameOffset: anytype) @TypeOf((@import("std").zig.c_translation.cast(UInt32, class) << kPEFExpSymClassShift) | @import("std").zig.c_translation.cast(UInt32, nameOffset)) {
    return (@import("std").zig.c_translation.cast(UInt32, class) << kPEFExpSymClassShift) | @import("std").zig.c_translation.cast(UInt32, nameOffset);
}
pub inline fn PEFRFShift(offset: anytype, length: anytype) @TypeOf(@as(c_int, 16) - (offset + length)) {
    return @as(c_int, 16) - (offset + length);
}
pub inline fn PEFRFMask(length: anytype) @TypeOf((@as(c_int, 1) << length) - @as(c_int, 1)) {
    return (@as(c_int, 1) << length) - @as(c_int, 1);
}
pub inline fn PEFRelocField(chunk: anytype, offset: anytype, length: anytype) @TypeOf((chunk >> (@as(c_int, 16) - (offset + length))) & ((@as(c_int, 1) << length) - @as(c_int, 1))) {
    return (chunk >> (@as(c_int, 16) - (offset + length))) & ((@as(c_int, 1) << length) - @as(c_int, 1));
}
pub inline fn PEFRelocLgSetOrBySubopcode(chunk: anytype) @TypeOf((chunk >> @as(c_int, 6)) & @as(c_int, 0x0F)) {
    return (chunk >> @as(c_int, 6)) & @as(c_int, 0x0F);
}
pub const PEFMaskedBasicOpcodes = blk: {
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectDWithSkip;
    _ = kPEFRelocBySectC;
    _ = kPEFRelocBySectD;
    _ = kPEFRelocTVector12;
    _ = kPEFRelocTVector8;
    _ = kPEFRelocVTable8;
    _ = kPEFRelocImportRun;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocSmByImport;
    _ = kPEFRelocSmSetSectC;
    _ = kPEFRelocSmSetSectD;
    _ = kPEFRelocSmBySection;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocIncrPosition;
    _ = kPEFRelocIncrPosition;
    _ = kPEFRelocIncrPosition;
    _ = kPEFRelocIncrPosition;
    _ = kPEFRelocIncrPosition;
    _ = kPEFRelocIncrPosition;
    _ = kPEFRelocIncrPosition;
    _ = kPEFRelocIncrPosition;
    _ = kPEFRelocSmRepeat;
    _ = kPEFRelocSmRepeat;
    _ = kPEFRelocSmRepeat;
    _ = kPEFRelocSmRepeat;
    _ = kPEFRelocSmRepeat;
    _ = kPEFRelocSmRepeat;
    _ = kPEFRelocSmRepeat;
    _ = kPEFRelocSmRepeat;
    _ = kPEFRelocSetPosition;
    _ = kPEFRelocSetPosition;
    _ = kPEFRelocLgByImport;
    _ = kPEFRelocLgByImport;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocLgRepeat;
    _ = kPEFRelocLgRepeat;
    _ = kPEFRelocLgSetOrBySection;
    _ = kPEFRelocLgSetOrBySection;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    _ = kPEFRelocUndefinedOpcode;
    break :blk kPEFRelocUndefinedOpcode;
};
pub inline fn PEFRelocWithSkipSkipCount(chunk: anytype) @TypeOf(PEFRelocField(chunk, @as(c_int, 2), @as(c_int, 8))) {
    return PEFRelocField(chunk, @as(c_int, 2), @as(c_int, 8));
}
pub inline fn PEFRelocWithSkipRelocCount(chunk: anytype) @TypeOf(PEFRelocField(chunk, @as(c_int, 10), @as(c_int, 6))) {
    return PEFRelocField(chunk, @as(c_int, 10), @as(c_int, 6));
}
pub inline fn PEFRelocComposeWithSkip(skipCount: anytype, relocCount: anytype) @TypeOf((@as(c_int, 0x0000) | (@import("std").zig.c_translation.cast(UInt16, skipCount) << @as(c_int, 6))) | @import("std").zig.c_translation.cast(UInt16, relocCount)) {
    return (@as(c_int, 0x0000) | (@import("std").zig.c_translation.cast(UInt16, skipCount) << @as(c_int, 6))) | @import("std").zig.c_translation.cast(UInt16, relocCount);
}
pub inline fn PEFRelocRunSubopcode(chunk: anytype) @TypeOf(PEFRelocField(chunk, @as(c_int, 3), @as(c_int, 4))) {
    return PEFRelocField(chunk, @as(c_int, 3), @as(c_int, 4));
}
pub inline fn PEFRelocRunRunLength(chunk: anytype) @TypeOf(PEFRelocField(chunk, @as(c_int, 7), @as(c_int, 9)) + @as(c_int, 1)) {
    return PEFRelocField(chunk, @as(c_int, 7), @as(c_int, 9)) + @as(c_int, 1);
}
pub inline fn PEFRelocComposeRun(subopcode: anytype, runLength: anytype) @TypeOf((@as(c_int, 0x4000) | (@import("std").zig.c_translation.cast(UInt16, subopcode) << @as(c_int, 9))) | @import("std").zig.c_translation.cast(UInt16, runLength - @as(c_int, 1))) {
    return (@as(c_int, 0x4000) | (@import("std").zig.c_translation.cast(UInt16, subopcode) << @as(c_int, 9))) | @import("std").zig.c_translation.cast(UInt16, runLength - @as(c_int, 1));
}
pub inline fn PEFRelocComposeBySectC(runLength: anytype) @TypeOf(PEFRelocComposeRun(@as(c_int, 0), runLength)) {
    return PEFRelocComposeRun(@as(c_int, 0), runLength);
}
pub inline fn PEFRelocComposeBySectD(runLength: anytype) @TypeOf(PEFRelocComposeRun(@as(c_int, 1), runLength)) {
    return PEFRelocComposeRun(@as(c_int, 1), runLength);
}
pub inline fn PEFRelocComposeTVector12(runLength: anytype) @TypeOf(PEFRelocComposeRun(@as(c_int, 2), runLength)) {
    return PEFRelocComposeRun(@as(c_int, 2), runLength);
}
pub inline fn PEFRelocComposeTVector8(runLength: anytype) @TypeOf(PEFRelocComposeRun(@as(c_int, 3), runLength)) {
    return PEFRelocComposeRun(@as(c_int, 3), runLength);
}
pub inline fn PEFRelocComposeVTable8(runLength: anytype) @TypeOf(PEFRelocComposeRun(@as(c_int, 4), runLength)) {
    return PEFRelocComposeRun(@as(c_int, 4), runLength);
}
pub inline fn PEFRelocComposeImportRun(runLength: anytype) @TypeOf(PEFRelocComposeRun(@as(c_int, 5), runLength)) {
    return PEFRelocComposeRun(@as(c_int, 5), runLength);
}
pub inline fn PEFRelocSmIndexSubopcode(chunk: anytype) @TypeOf(PEFRelocField(chunk, @as(c_int, 3), @as(c_int, 4))) {
    return PEFRelocField(chunk, @as(c_int, 3), @as(c_int, 4));
}
pub inline fn PEFRelocSmIndexIndex(chunk: anytype) @TypeOf(PEFRelocField(chunk, @as(c_int, 7), @as(c_int, 9))) {
    return PEFRelocField(chunk, @as(c_int, 7), @as(c_int, 9));
}
pub inline fn PEFRelocComposeSmIndex(subopcode: anytype, index_1: anytype) @TypeOf((@as(c_int, 0x6000) | (@import("std").zig.c_translation.cast(UInt16, subopcode) << @as(c_int, 9))) | @import("std").zig.c_translation.cast(UInt16, index_1)) {
    return (@as(c_int, 0x6000) | (@import("std").zig.c_translation.cast(UInt16, subopcode) << @as(c_int, 9))) | @import("std").zig.c_translation.cast(UInt16, index_1);
}
pub inline fn PEFRelocComposeSmByImport(index_1: anytype) @TypeOf(PEFRelocComposeSmIndex(@as(c_int, 0), index_1)) {
    return PEFRelocComposeSmIndex(@as(c_int, 0), index_1);
}
pub inline fn PEFRelocComposeSmSetSectC(index_1: anytype) @TypeOf(PEFRelocComposeSmIndex(@as(c_int, 1), index_1)) {
    return PEFRelocComposeSmIndex(@as(c_int, 1), index_1);
}
pub inline fn PEFRelocComposeSmSetSectD(index_1: anytype) @TypeOf(PEFRelocComposeSmIndex(@as(c_int, 2), index_1)) {
    return PEFRelocComposeSmIndex(@as(c_int, 2), index_1);
}
pub inline fn PEFRelocComposeSmBySection(index_1: anytype) @TypeOf(PEFRelocComposeSmIndex(@as(c_int, 3), index_1)) {
    return PEFRelocComposeSmIndex(@as(c_int, 3), index_1);
}
pub inline fn PEFRelocIncrPositionOffset(chunk: anytype) @TypeOf(PEFRelocField(chunk, @as(c_int, 4), @as(c_int, 12)) + @as(c_int, 1)) {
    return PEFRelocField(chunk, @as(c_int, 4), @as(c_int, 12)) + @as(c_int, 1);
}
pub inline fn PEFRelocComposeIncrPosition(offset: anytype) @TypeOf(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hexadecimal) | @import("std").zig.c_translation.cast(UInt16, offset - @as(c_int, 1))) {
    return @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hexadecimal) | @import("std").zig.c_translation.cast(UInt16, offset - @as(c_int, 1));
}
pub inline fn PEFRelocSmRepeatChunkCount(chunk: anytype) @TypeOf(PEFRelocField(chunk, @as(c_int, 4), @as(c_int, 4)) + @as(c_int, 1)) {
    return PEFRelocField(chunk, @as(c_int, 4), @as(c_int, 4)) + @as(c_int, 1);
}
pub inline fn PEFRelocSmRepeatRepeatCount(chunk: anytype) @TypeOf(PEFRelocField(chunk, @as(c_int, 8), @as(c_int, 8)) + @as(c_int, 1)) {
    return PEFRelocField(chunk, @as(c_int, 8), @as(c_int, 8)) + @as(c_int, 1);
}
pub inline fn PEFRelocComposeSmRepeat(chunkCount: anytype, repeatCount: anytype) @TypeOf((@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9000, .hexadecimal) | ((@import("std").zig.c_translation.cast(UInt16, chunkCount) - @as(c_int, 1)) << @as(c_int, 8))) | (@import("std").zig.c_translation.cast(UInt16, repeatCount) - @as(c_int, 1))) {
    return (@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x9000, .hexadecimal) | ((@import("std").zig.c_translation.cast(UInt16, chunkCount) - @as(c_int, 1)) << @as(c_int, 8))) | (@import("std").zig.c_translation.cast(UInt16, repeatCount) - @as(c_int, 1));
}
pub inline fn PEFRelocSetPosOffsetHigh(chunk: anytype) @TypeOf(PEFRelocField(chunk, @as(c_int, 6), @as(c_int, 10))) {
    return PEFRelocField(chunk, @as(c_int, 6), @as(c_int, 10));
}
pub inline fn PEFRelocSetPosFullOffset(firstChunk: anytype, secondChunk: anytype) @TypeOf(((@import("std").zig.c_translation.cast(UInt32, firstChunk) & @as(c_int, 0x03FF)) << @as(c_int, 16)) | @import("std").zig.c_translation.cast(UInt32, secondChunk)) {
    return ((@import("std").zig.c_translation.cast(UInt32, firstChunk) & @as(c_int, 0x03FF)) << @as(c_int, 16)) | @import("std").zig.c_translation.cast(UInt32, secondChunk);
}
pub inline fn PEFRelocComposeSetPosition_1st(fullOffset: anytype) @TypeOf(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xA000, .hexadecimal) | @import("std").zig.c_translation.cast(UInt16, @import("std").zig.c_translation.cast(UInt32, fullOffset) >> @as(c_int, 16))) {
    return @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xA000, .hexadecimal) | @import("std").zig.c_translation.cast(UInt16, @import("std").zig.c_translation.cast(UInt32, fullOffset) >> @as(c_int, 16));
}
pub inline fn PEFRelocComposeSetPosition_2nd(fullOffset: anytype) UInt16 {
    return @import("std").zig.c_translation.cast(UInt16, @import("std").zig.c_translation.cast(UInt32, fullOffset) & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF, .hexadecimal));
}
pub inline fn PEFRelocLgByImportIndexHigh(chunk: anytype) @TypeOf(PEFRelocField(chunk, @as(c_int, 6), @as(c_int, 10))) {
    return PEFRelocField(chunk, @as(c_int, 6), @as(c_int, 10));
}
pub inline fn PEFRelocLgByImportFullIndex(firstChunk: anytype, secondChunk: anytype) @TypeOf(((@import("std").zig.c_translation.cast(UInt32, firstChunk) & @as(c_int, 0x03FF)) << @as(c_int, 16)) | @import("std").zig.c_translation.cast(UInt32, secondChunk)) {
    return ((@import("std").zig.c_translation.cast(UInt32, firstChunk) & @as(c_int, 0x03FF)) << @as(c_int, 16)) | @import("std").zig.c_translation.cast(UInt32, secondChunk);
}
pub inline fn PEFRelocComposeLgByImport_1st(fullIndex: anytype) @TypeOf(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xA400, .hexadecimal) | @import("std").zig.c_translation.cast(UInt16, @import("std").zig.c_translation.cast(UInt32, fullIndex) >> @as(c_int, 16))) {
    return @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xA400, .hexadecimal) | @import("std").zig.c_translation.cast(UInt16, @import("std").zig.c_translation.cast(UInt32, fullIndex) >> @as(c_int, 16));
}
pub inline fn PEFRelocComposeLgByImport_2nd(fullIndex: anytype) UInt16 {
    return @import("std").zig.c_translation.cast(UInt16, @import("std").zig.c_translation.cast(UInt32, fullIndex) & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF, .hexadecimal));
}
pub inline fn PEFRelocLgRepeatChunkCount(chunk: anytype) @TypeOf(PEFRelocField(chunk, @as(c_int, 6), @as(c_int, 4)) + @as(c_int, 1)) {
    return PEFRelocField(chunk, @as(c_int, 6), @as(c_int, 4)) + @as(c_int, 1);
}
pub inline fn PEFRelocLgRepeatRepeatCountHigh(chunk: anytype) @TypeOf(PEFRelocField(chunk, @as(c_int, 10), @as(c_int, 6))) {
    return PEFRelocField(chunk, @as(c_int, 10), @as(c_int, 6));
}
pub inline fn PEFRelocLgRepeatFullRepeatCount(firstChunk: anytype, secondChunk: anytype) @TypeOf(((@import("std").zig.c_translation.cast(UInt32, firstChunk) & @as(c_int, 0x003F)) << @as(c_int, 16)) | @import("std").zig.c_translation.cast(UInt32, secondChunk)) {
    return ((@import("std").zig.c_translation.cast(UInt32, firstChunk) & @as(c_int, 0x003F)) << @as(c_int, 16)) | @import("std").zig.c_translation.cast(UInt32, secondChunk);
}
pub inline fn PEFRelocComposeLgRepeat_1st(chunkCount: anytype, fullRepeatCount: anytype) @TypeOf((@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xB000, .hexadecimal) | ((@import("std").zig.c_translation.cast(UInt16, chunkCount) - @as(c_int, 1)) << @as(c_int, 6))) | @import("std").zig.c_translation.cast(UInt16, @import("std").zig.c_translation.cast(UInt32, fullRepeatCount) >> @as(c_int, 16))) {
    return (@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xB000, .hexadecimal) | ((@import("std").zig.c_translation.cast(UInt16, chunkCount) - @as(c_int, 1)) << @as(c_int, 6))) | @import("std").zig.c_translation.cast(UInt16, @import("std").zig.c_translation.cast(UInt32, fullRepeatCount) >> @as(c_int, 16));
}
pub inline fn PEFRelocComposeLgRepeat_2nd(chunkCount: anytype, fullRepeatCount: anytype) UInt16 {
    _ = chunkCount;
    return @import("std").zig.c_translation.cast(UInt16, @import("std").zig.c_translation.cast(UInt32, fullRepeatCount) & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF, .hexadecimal));
}
pub inline fn PEFRelocLgSetOrBySectionSubopcode(chunk: anytype) @TypeOf(PEFRelocField(chunk, @as(c_int, 6), @as(c_int, 4))) {
    return PEFRelocField(chunk, @as(c_int, 6), @as(c_int, 4));
}
pub inline fn PEFRelocLgSetOrBySectionIndexHigh(chunk: anytype) @TypeOf(PEFRelocField(chunk, @as(c_int, 10), @as(c_int, 6))) {
    return PEFRelocField(chunk, @as(c_int, 10), @as(c_int, 6));
}
pub inline fn PEFRelocLgSetOrBySectionFullIndex(firstChunk: anytype, secondChunk: anytype) @TypeOf(((@import("std").zig.c_translation.cast(UInt32, firstChunk) & @as(c_int, 0x003F)) << @as(c_int, 16)) | @import("std").zig.c_translation.cast(UInt32, secondChunk)) {
    return ((@import("std").zig.c_translation.cast(UInt32, firstChunk) & @as(c_int, 0x003F)) << @as(c_int, 16)) | @import("std").zig.c_translation.cast(UInt32, secondChunk);
}
pub inline fn PEFRelocComposeLgSetOrBySection_1st(subopcode: anytype, fullIndex: anytype) @TypeOf((@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xB400, .hexadecimal) | (@import("std").zig.c_translation.cast(UInt16, subopcode) << @as(c_int, 6))) | @import("std").zig.c_translation.cast(UInt16, @import("std").zig.c_translation.cast(UInt32, fullIndex) >> @as(c_int, 16))) {
    return (@import("std").zig.c_translation.promoteIntLiteral(c_int, 0xB400, .hexadecimal) | (@import("std").zig.c_translation.cast(UInt16, subopcode) << @as(c_int, 6))) | @import("std").zig.c_translation.cast(UInt16, @import("std").zig.c_translation.cast(UInt32, fullIndex) >> @as(c_int, 16));
}
pub inline fn PEFRelocComposeLgSetOrBySection_2nd(subopcode: anytype, fullIndex: anytype) UInt16 {
    _ = subopcode;
    return @import("std").zig.c_translation.cast(UInt16, @import("std").zig.c_translation.cast(UInt32, fullIndex) & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xFFFF, .hexadecimal));
}
pub const IncludePEF2Declarations = @as(c_int, 0);
pub const __HFSVOLUMES__ = "";
pub const __HFS_FORMAT__ = "";
pub const HFSPLUSMETADATAFOLDER = "\xe2\x90\x80\xe2\x90\x80\xe2\x90\x80\xe2\x90\x80HFS+ Private Data";
pub const HFSPLUS_DIR_METADATA_FOLDER = ".HFS+ Private Directory Data\x0d";
pub const HFS_INODE_PREFIX = "iNode";
pub const HFS_DELETE_PREFIX = "temp";
pub const HFS_DIRINODE_PREFIX = "dir_";
pub const FIRST_LINK_XATTR_NAME = "com.apple.system.hfs.firstlink";
pub const FIRST_LINK_XATTR_REC_SIZE = (@import("std").zig.c_translation.sizeof(HFSPlusAttrData) - @as(c_int, 2)) + @as(c_int, 12);
pub const HFS_UUID_NAMESPACE_ID = "\xb3\xe2\x0f\x39\xf2\x92\x11\xd6\x97\xa4\x00\x30\x65\x43\xec\xac";
pub const kHFSPlusAttrKeyMaximumLength = @import("std").zig.c_translation.sizeof(HFSPlusAttrKey) - @import("std").zig.c_translation.sizeof(u_int16_t);
pub const kHFSPlusAttrKeyMinimumLength = kHFSPlusAttrKeyMaximumLength - (kHFSMaxAttrNameLen * @import("std").zig.c_translation.sizeof(u_int16_t));
pub inline fn SET_HFS_TEXT_ENCODING(hint: anytype) @TypeOf(@import("std").zig.c_translation.promoteIntLiteral(c_int, 0x656e6300, .hexadecimal) | (hint & @as(c_int, 0xff))) {
    return @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x656e6300, .hexadecimal) | (hint & @as(c_int, 0xff));
}
pub inline fn GET_HFS_TEXT_ENCODING(hint: anytype) @TypeOf(if ((hint & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff00, .hexadecimal)) == @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x656e6300, .hexadecimal)) hint & @as(c_int, 0x000000ff) else @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xffffffff, .hexadecimal)) {
    return if ((hint & @import("std").zig.c_translation.promoteIntLiteral(c_int, 0xffffff00, .hexadecimal)) == @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x656e6300, .hexadecimal)) hint & @as(c_int, 0x000000ff) else @import("std").zig.c_translation.promoteIntLiteral(c_uint, 0xffffffff, .hexadecimal);
}
pub const _UUID_UUID_H = "";
pub const _UUID_STRING_T = "";
pub const JIB_RESERVED_SIZE = ((@as(c_int, 32) * @import("std").zig.c_translation.sizeof(u_int32_t)) - @import("std").zig.c_translation.sizeof(uuid_string_t)) - @as(c_int, 48);
pub const EXTJNL_CONTENT_TYPE_UUID = "4A6F7572-6E61-11AA-AA11-00306543ECAC";
pub const __AIFF__ = "";
pub const __TEXTENCODINGPLUGIN__ = "";
pub const kTECMacOSXDispatchTableNameString = "ConverterPluginGetPluginDispatchTable";
pub const __AEDATAMODEL__ = "";
pub inline fn AEPutKeyPtr(theAERecord: anytype, theAEKeyword: anytype, typeCode: anytype, dataPtr: anytype, dataSize: anytype) @TypeOf(AEPutParamPtr(theAERecord, theAEKeyword, typeCode, dataPtr, dataSize)) {
    return AEPutParamPtr(theAERecord, theAEKeyword, typeCode, dataPtr, dataSize);
}
pub inline fn AEPutKeyDesc(theAERecord: anytype, theAEKeyword: anytype, theAEDesc: anytype) @TypeOf(AEPutParamDesc(theAERecord, theAEKeyword, theAEDesc)) {
    return AEPutParamDesc(theAERecord, theAEKeyword, theAEDesc);
}
pub inline fn AEGetKeyPtr(theAERecord: anytype, theAEKeyword: anytype, desiredType: anytype, typeCode: anytype, dataPtr: anytype, maxSize: anytype, actualSize: anytype) @TypeOf(AEGetParamPtr(theAERecord, theAEKeyword, desiredType, typeCode, dataPtr, maxSize, actualSize)) {
    return AEGetParamPtr(theAERecord, theAEKeyword, desiredType, typeCode, dataPtr, maxSize, actualSize);
}
pub inline fn AEGetKeyDesc(theAERecord: anytype, theAEKeyword: anytype, desiredType: anytype, result: anytype) @TypeOf(AEGetParamDesc(theAERecord, theAEKeyword, desiredType, result)) {
    return AEGetParamDesc(theAERecord, theAEKeyword, desiredType, result);
}
pub inline fn AESizeOfKeyDesc(theAERecord: anytype, theAEKeyword: anytype, typeCode: anytype, dataSize: anytype) @TypeOf(AESizeOfParam(theAERecord, theAEKeyword, typeCode, dataSize)) {
    return AESizeOfParam(theAERecord, theAEKeyword, typeCode, dataSize);
}
pub inline fn AEDeleteKeyDesc(theAERecord: anytype, theAEKeyword: anytype) @TypeOf(AEDeleteParam(theAERecord, theAEKeyword)) {
    return AEDeleteParam(theAERecord, theAEKeyword);
}
pub const __APPLEEVENTS__ = "";
pub const __AEPACKOBJECT__ = "";
pub const __AEOBJECTS__ = "";
pub const __AEREGISTRY__ = "";
pub const __AEUSERTERMTYPES__ = "";
pub const __AEHELPERS__ = "";
pub const __AEMACH__ = "";
pub const __CFNETWORK__ = "";
pub const __CFNETWORK_DEFS_H_ = "";
pub const __CFNETWORKERRORS__ = "";
pub const __CFSOCKETSTREAM__ = "";
pub const __CFHOST__ = "";
pub const __CFNETSERVICES__ = "";
pub const __CFFTPSTREAM__ = "";
pub const __CFHTTPMESSAGE__ = "";
pub const __CFHTTPSTREAM__ = "";
pub const __CFHTTPAUTHENTICATION__ = "";
pub const __CFNETDIAGNOSTICS__ = "";
pub const __CFPROXYSUPPORT__ = "";
pub const __DICTIONARYSERVICES__ = "";
pub const __LAUNCHSERVICES__ = "";
pub const __ICONSCORE__ = "";
pub const __OSSERVICES__ = "";
pub const __CSIDENTITY__ = "";
pub const __CSIDENTITYBASE__ = "";
pub const _SECURITY_SECBASE_H_ = "";
pub const SEC_OS_IPHONE = TARGET_OS_IPHONE;
pub const SEC_OS_OSX = TARGET_OS_OSX;
pub const SEC_OS_OSX_INCLUDES = TARGET_OS_OSX;
pub const SEC_DEPRECATED_ATTRIBUTE = DEPRECATED_ATTRIBUTE;
pub const SECURITY_TYPE_UNIFICATION = @as(c_int, 1);
pub const __CSIDENTITYAUTHORITY__ = "";
pub const _SECURITY_H_ = "";
pub const _SECURITY_SECCERTIFICATE_H_ = "";
pub const _SECURITY_VERSION_GREATER_THAN_57610_ = "";
pub const _CSSMTYPE_H_ = @as(c_int, 1);
pub const _CSSMCONFIG_H_ = @as(c_int, 1);
pub const _SINT64 = "";
pub const _UINT64 = "";
pub const _SINT32 = "";
pub const _SINT16 = "";
pub const _SINT8 = "";
pub const _UINT32 = "";
pub const _UINT16 = "";
pub const _UINT8 = "";
pub const CSSMACI = "";
pub const CSSMAPI = "";
pub const CSSMCLI = "";
pub const CSSMCSPI = "";
pub const CSSMDLI = "";
pub const CSSMKRI = "";
pub const CSSMSPI = "";
pub const CSSMTPI = "";
pub const _SEC_ASN1_TYPES_H_ = "";
pub const SEC_ASN1_TAG_MASK = @as(c_int, 0xff);
pub const SEC_ASN1_TAGNUM_MASK = @as(c_int, 0x1f);
pub const SEC_ASN1_BOOLEAN = @as(c_int, 0x01);
pub const SEC_ASN1_INTEGER = @as(c_int, 0x02);
pub const SEC_ASN1_BIT_STRING = @as(c_int, 0x03);
pub const SEC_ASN1_OCTET_STRING = @as(c_int, 0x04);
pub const SEC_ASN1_NULL = @as(c_int, 0x05);
pub const SEC_ASN1_OBJECT_ID = @as(c_int, 0x06);
pub const SEC_ASN1_OBJECT_DESCRIPTOR = @as(c_int, 0x07);
pub const SEC_ASN1_REAL = @as(c_int, 0x09);
pub const SEC_ASN1_ENUMERATED = @as(c_int, 0x0a);
pub const SEC_ASN1_EMBEDDED_PDV = @as(c_int, 0x0b);
pub const SEC_ASN1_UTF8_STRING = @as(c_int, 0x0c);
pub const SEC_ASN1_SEQUENCE = @as(c_int, 0x10);
pub const SEC_ASN1_SET = @as(c_int, 0x11);
pub const SEC_ASN1_NUMERIC_STRING = @as(c_int, 0x12);
pub const SEC_ASN1_PRINTABLE_STRING = @as(c_int, 0x13);
pub const SEC_ASN1_T61_STRING = @as(c_int, 0x14);
pub const SEC_ASN1_VIDEOTEX_STRING = @as(c_int, 0x15);
pub const SEC_ASN1_IA5_STRING = @as(c_int, 0x16);
pub const SEC_ASN1_UTC_TIME = @as(c_int, 0x17);
pub const SEC_ASN1_GENERALIZED_TIME = @as(c_int, 0x18);
pub const SEC_ASN1_GRAPHIC_STRING = @as(c_int, 0x19);
pub const SEC_ASN1_VISIBLE_STRING = @as(c_int, 0x1a);
pub const SEC_ASN1_GENERAL_STRING = @as(c_int, 0x1b);
pub const SEC_ASN1_UNIVERSAL_STRING = @as(c_int, 0x1c);
pub const SEC_ASN1_BMP_STRING = @as(c_int, 0x1e);
pub const SEC_ASN1_HIGH_TAG_NUMBER = @as(c_int, 0x1f);
pub const SEC_ASN1_TELETEX_STRING = SEC_ASN1_T61_STRING;
pub const SEC_ASN1_METHOD_MASK = @as(c_int, 0x20);
pub const SEC_ASN1_PRIMITIVE = @as(c_int, 0x00);
pub const SEC_ASN1_CONSTRUCTED = @as(c_int, 0x20);
pub const SEC_ASN1_CLASS_MASK = @as(c_int, 0xc0);
pub const SEC_ASN1_UNIVERSAL = @as(c_int, 0x00);
pub const SEC_ASN1_APPLICATION = @as(c_int, 0x40);
pub const SEC_ASN1_CONTEXT_SPECIFIC = @as(c_int, 0x80);
pub const SEC_ASN1_PRIVATE = @as(c_int, 0xc0);
pub const SEC_ASN1_OPTIONAL = @as(c_int, 0x00100);
pub const SEC_ASN1_EXPLICIT = @as(c_int, 0x00200);
pub const SEC_ASN1_ANY = @as(c_int, 0x00400);
pub const SEC_ASN1_INLINE = @as(c_int, 0x00800);
pub const SEC_ASN1_POINTER = @as(c_int, 0x01000);
pub const SEC_ASN1_GROUP = @as(c_int, 0x02000);
pub const SEC_ASN1_DYNAMIC = @as(c_int, 0x04000);
pub const SEC_ASN1_SKIP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x08000, .hexadecimal);
pub const SEC_ASN1_INNER = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000, .hexadecimal);
pub const SEC_ASN1_SAVE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000, .hexadecimal);
pub const SEC_ASN1_SKIP_REST = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000, .hexadecimal);
pub const SEC_ASN1_CHOICE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x100000, .hexadecimal);
pub const SEC_ASN1_SIGNED_INT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x800000, .hexadecimal);
pub const SEC_ASN1_SEQUENCE_OF = SEC_ASN1_GROUP | SEC_ASN1_SEQUENCE;
pub const SEC_ASN1_SET_OF = SEC_ASN1_GROUP | SEC_ASN1_SET;
pub const SEC_ASN1_ANY_CONTENTS = SEC_ASN1_ANY | SEC_ASN1_INNER;
pub const CSSM_DATA = SecAsn1Item;
pub const CSSM_OID = SecAsn1Oid;
pub const _X509DEFS_H_ = @as(c_int, 1);
pub const BER_TAG_UNKNOWN = @as(c_int, 0);
pub const BER_TAG_BOOLEAN = @as(c_int, 1);
pub const BER_TAG_INTEGER = @as(c_int, 2);
pub const BER_TAG_BIT_STRING = @as(c_int, 3);
pub const BER_TAG_OCTET_STRING = @as(c_int, 4);
pub const BER_TAG_NULL = @as(c_int, 5);
pub const BER_TAG_OID = @as(c_int, 6);
pub const BER_TAG_OBJECT_DESCRIPTOR = @as(c_int, 7);
pub const BER_TAG_EXTERNAL = @as(c_int, 8);
pub const BER_TAG_REAL = @as(c_int, 9);
pub const BER_TAG_ENUMERATED = @as(c_int, 10);
pub const BER_TAG_PKIX_UTF8_STRING = @as(c_int, 12);
pub const BER_TAG_SEQUENCE = @as(c_int, 16);
pub const BER_TAG_SET = @as(c_int, 17);
pub const BER_TAG_NUMERIC_STRING = @as(c_int, 18);
pub const BER_TAG_PRINTABLE_STRING = @as(c_int, 19);
pub const BER_TAG_T61_STRING = @as(c_int, 20);
pub const BER_TAG_TELETEX_STRING = BER_TAG_T61_STRING;
pub const BER_TAG_VIDEOTEX_STRING = @as(c_int, 21);
pub const BER_TAG_IA5_STRING = @as(c_int, 22);
pub const BER_TAG_UTC_TIME = @as(c_int, 23);
pub const BER_TAG_GENERALIZED_TIME = @as(c_int, 24);
pub const BER_TAG_GRAPHIC_STRING = @as(c_int, 25);
pub const BER_TAG_ISO646_STRING = @as(c_int, 26);
pub const BER_TAG_GENERAL_STRING = @as(c_int, 27);
pub const BER_TAG_VISIBLE_STRING = BER_TAG_ISO646_STRING;
pub const BER_TAG_PKIX_UNIVERSAL_STRING = @as(c_int, 28);
pub const BER_TAG_PKIX_BMP_STRING = @as(c_int, 30);
pub const CSSM_X509_ALGORITHM_IDENTIFIER = SecAsn1AlgId;
pub const CSSM_X509_SUBJECT_PUBLIC_KEY_INFO = SecAsn1PubKeyInfo;
pub const CSSM_X509_OPTION_PRESENT = CSSM_TRUE;
pub const CSSM_X509_OPTION_NOT_PRESENT = CSSM_FALSE;
pub const _SECURITY_SECIDENTITY_H_ = "";
pub const _SECURITY_SECACCESSCONTROL_H_ = "";
pub const _SECURITY_SECITEM_H_ = "";
pub const _SECURITY_SECKEY_H_ = "";
pub const _SECURITY_SECACCESS_H_ = "";
pub const _SECURITY_SECPOLICY_H_ = "";
pub const _SECURITY_SECRANDOM_H_ = "";
pub const _SECURITY_SECIMPORTEXPORT_H_ = "";
pub const _SECURITY_SECKEYCHAIN_H_ = "";
pub const _CSSMAPPLE_H_ = @as(c_int, 1);
pub const _CSSMERR_H_ = @as(c_int, 1);
pub inline fn CSSM_ERRCODE(CODE: anytype) @TypeOf((CODE - CSSM_BASE_ERROR) & (CSSM_ERRORCODE_MODULE_EXTENT - @as(c_int, 1))) {
    return (CODE - CSSM_BASE_ERROR) & (CSSM_ERRORCODE_MODULE_EXTENT - @as(c_int, 1));
}
pub inline fn CSSM_ERRBASE(CODE: anytype) @TypeOf(((CODE - CSSM_BASE_ERROR) & ~(CSSM_ERRORCODE_MODULE_EXTENT - @as(c_int, 1))) + CSSM_BASE_ERROR) {
    return ((CODE - CSSM_BASE_ERROR) & ~(CSSM_ERRORCODE_MODULE_EXTENT - @as(c_int, 1))) + CSSM_BASE_ERROR;
}
pub inline fn CSSM_ERR_IS_CONVERTIBLE(CODE: anytype) @TypeOf(CSSM_ERRCODE(CODE) < CSSM_ERRORCODE_COMMON_EXTENT) {
    return CSSM_ERRCODE(CODE) < CSSM_ERRORCODE_COMMON_EXTENT;
}
pub inline fn CSSM_ERR_TAG(CODE: anytype, BASE: anytype) @TypeOf(CSSM_ERRCODE(CODE) + BASE) {
    return CSSM_ERRCODE(CODE) + BASE;
}
pub const _CERT_EXTENSIONS_H_ = "";
pub const SecCEGeneralNameType = CE_GeneralNameType;
pub const CE_KU_DigitalSignature = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hexadecimal);
pub const CE_KU_NonRepudiation = @as(c_int, 0x4000);
pub const CE_KU_KeyEncipherment = @as(c_int, 0x2000);
pub const CE_KU_DataEncipherment = @as(c_int, 0x1000);
pub const CE_KU_KeyAgreement = @as(c_int, 0x0800);
pub const CE_KU_KeyCertSign = @as(c_int, 0x0400);
pub const CE_KU_CRLSign = @as(c_int, 0x0200);
pub const CE_KU_EncipherOnly = @as(c_int, 0x0100);
pub const CE_KU_DecipherOnly = @as(c_int, 0x0080);
pub const CE_CR_Unspecified = @as(c_int, 0);
pub const CE_CR_KeyCompromise = @as(c_int, 1);
pub const CE_CR_CACompromise = @as(c_int, 2);
pub const CE_CR_AffiliationChanged = @as(c_int, 3);
pub const CE_CR_Superseded = @as(c_int, 4);
pub const CE_CR_CessationOfOperation = @as(c_int, 5);
pub const CE_CR_CertificateHold = @as(c_int, 6);
pub const CE_CR_RemoveFromCRL = @as(c_int, 8);
pub const CE_CD_Unspecified = @as(c_int, 0x80);
pub const CE_CD_KeyCompromise = @as(c_int, 0x40);
pub const CE_CD_CACompromise = @as(c_int, 0x20);
pub const CE_CD_AffiliationChanged = @as(c_int, 0x10);
pub const CE_CD_Superseded = @as(c_int, 0x08);
pub const CE_CD_CessationOfOperation = @as(c_int, 0x04);
pub const CE_CD_CertificateHold = @as(c_int, 0x02);
pub inline fn CSSM_ACL_AUTHORIZATION_PREAUTH(slot: anytype) @TypeOf(CSSM_ACL_AUTHORIZATION_PREAUTH_BASE + slot) {
    return CSSM_ACL_AUTHORIZATION_PREAUTH_BASE + slot;
}
pub inline fn CSSM_ACL_AUTHORIZATION_PREAUTH_SLOT(auth: anytype) @TypeOf(auth - CSSM_ACL_AUTHORIZATION_PREAUTH_BASE) {
    return auth - CSSM_ACL_AUTHORIZATION_PREAUTH_BASE;
}
pub inline fn CSSM_ACL_AUTHORIZATION_IS_PREAUTH(auth: anytype) @TypeOf((auth >= CSSM_ACL_AUTHORIZATION_PREAUTH_BASE) and (auth < CSSM_ACL_AUTHORIZATION_PREAUTH_END)) {
    return (auth >= CSSM_ACL_AUTHORIZATION_PREAUTH_BASE) and (auth < CSSM_ACL_AUTHORIZATION_PREAUTH_END);
}
pub const CSSM_APPLE_TP_SSL_OPTS_VERSION = @as(c_int, 1);
pub const CSSM_APPLE_TP_SSL_CLIENT = @as(c_int, 0x00000001);
pub const CSSM_APPLE_TP_CRL_OPTS_VERSION = @as(c_int, 0);
pub const CSSM_APPLE_TP_SMIME_OPTS_VERSION = @as(c_int, 0);
pub const CSSM_APPLE_TP_ACTION_VERSION = @as(c_int, 0);
pub const CSSM_TP_APPLE_EVIDENCE_VERSION = @as(c_int, 0);
pub const CSSM_EVIDENCE_FORM_APPLE_CUSTOM = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x80000000, .hexadecimal);
pub const CSSM_APPLE_CRL_END_OF_TIME = "99991231235959";
pub const kKeychainSuffix = ".keychain";
pub const kKeychainDbSuffix = ".keychain-db";
pub const kSystemKeychainName = "System.keychain";
pub const kSystemKeychainDir = "/Library/Keychains/";
pub const kSystemUnlockFile = "/var/db/SystemKey";
pub const kSystemKeychainPath = kSystemKeychainDir ++ kSystemKeychainName;
pub const CSSM_APPLE_ACL_TAG_PARTITION_ID = "___PARTITION___";
pub const CSSM_APPLE_ACL_TAG_INTEGRITY = "___INTEGRITY___";
pub const errSecErrnoBase = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100000, .decimal);
pub const errSecErrnoLimit = @import("std").zig.c_translation.promoteIntLiteral(c_int, 100255, .decimal);
pub const SEC_KEYCHAIN_SETTINGS_VERS1 = @as(c_int, 1);
pub inline fn AUTH_TYPE_FIX_(x: anytype) @TypeOf(OSSwapConstInt32(x)) {
    return OSSwapConstInt32(x);
}
pub const SEC_KEY_IMPORT_EXPORT_PARAMS_VERSION = @as(c_int, 0);
pub const _SECURITY_SECTRUST_H_ = "";
pub const _SECURITY_SECSHAREDCREDENTIAL_H_ = "";
pub const SecProtocolOptions_h = "";
pub const SecProtocolObject_h = "";
pub const SEC_RETURNS_RETAINED = "";
pub const SecProtocolTypes_h = "";
pub const _SECURITY_CIPHERSUITE_H_ = "";
pub const SecProtocolMetadata_h = "";
pub const SEC_PROTOCOL_CERT_COMPRESSION_DEFAULT = @as(c_int, 1);
pub const __AuthSession__ = @as(c_int, 1);
pub const _SECURITY_AUTHORIZATION_H_ = "";
pub const kAuthorizationEmptyEnvironment = NULL;
pub const _CSSM_H_ = @as(c_int, 1);
pub const _EMMTYPE_H_ = @as(c_int, 1);
pub const CSSM_HINT_CALLBACK = @as(c_int, 1);
pub const CSSM_MANAGER_SERVICE_REQUEST = @as(c_int, 1);
pub const CSSM_MANAGER_REPLY = @as(c_int, 2);
pub const _CSSMAPI_H_ = @as(c_int, 1);
pub const _CSSMACI_H_ = @as(c_int, 1);
pub const _CSSMCLI_H_ = @as(c_int, 1);
pub const _CSSMCSPI_H_ = @as(c_int, 1);
pub const _CSSMSPI_H_ = @as(c_int, 1);
pub const _CSSMDLI_H_ = @as(c_int, 1);
pub const _CSSMKRAPI_H_ = @as(c_int, 1);
pub const CSSM_KR_INDIV_POLICY = @as(c_int, 0x00000001);
pub const CSSM_KR_ENT_POLICY = @as(c_int, 0x00000002);
pub const CSSM_KR_LE_MAN_POLICY = @as(c_int, 0x00000003);
pub const CSSM_KR_LE_USE_POLICY = @as(c_int, 0x00000004);
pub const CSSM_KR_INDIV = @as(c_int, 0x00000001);
pub const CSSM_KR_ENT = @as(c_int, 0x00000002);
pub const CSSM_KR_LE_MAN = @as(c_int, 0x00000004);
pub const CSSM_KR_LE_USE = @as(c_int, 0x00000008);
pub const CSSM_KR_LE = CSSM_KR_LE_MAN | CSSM_KR_LE_USE;
pub const CSSM_KR_OPTIMIZE = @as(c_int, 0x00000010);
pub const CSSM_KR_DROP_WORKFACTOR = @as(c_int, 0x00000020);
pub const _CSSMKRSPI_H_ = @as(c_int, 1);
pub const _CSSMTPI_H_ = @as(c_int, 1);
pub const _EMMSPI_H_ = @as(c_int, 1);
pub const _MDS_H_ = @as(c_int, 1);
pub const _MDS_SCHEMA_H_ = @as(c_int, 1);
pub const MDS_OBJECT_DIRECTORY_NAME = "MDS Object Directory";
pub const MDS_CDSA_DIRECTORY_NAME = "MDS CDSA Directory";
pub const CSSM_DB_RELATIONID_MDS_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const CSSM_DB_RELATIONID_MDS_END = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40004000, .hexadecimal);
pub const MDS_OBJECT_RECORDTYPE = CSSM_DB_RELATIONID_MDS_START;
pub const MDS_CDSA_SCHEMA_START = MDS_OBJECT_RECORDTYPE;
pub const MDS_CDSADIR_CSSM_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 1);
pub const MDS_CDSADIR_KRMM_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 2);
pub const MDS_CDSADIR_EMM_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 3);
pub const MDS_CDSADIR_COMMON_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 4);
pub const MDS_CDSADIR_CSP_PRIMARY_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 5);
pub const MDS_CDSADIR_CSP_CAPABILITY_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 6);
pub const MDS_CDSADIR_CSP_ENCAPSULATED_PRODUCT_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 7);
pub const MDS_CDSADIR_CSP_SC_INFO_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 8);
pub const MDS_CDSADIR_DL_PRIMARY_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 9);
pub const MDS_CDSADIR_DL_ENCAPSULATED_PRODUCT_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 10);
pub const MDS_CDSADIR_CL_PRIMARY_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 11);
pub const MDS_CDSADIR_CL_ENCAPSULATED_PRODUCT_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 12);
pub const MDS_CDSADIR_TP_PRIMARY_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 13);
pub const MDS_CDSADIR_TP_OIDS_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 14);
pub const MDS_CDSADIR_TP_ENCAPSULATED_PRODUCT_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 15);
pub const MDS_CDSADIR_EMM_PRIMARY_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 16);
pub const MDS_CDSADIR_AC_PRIMARY_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 17);
pub const MDS_CDSADIR_KR_PRIMARY_RECORDTYPE = MDS_CDSA_SCHEMA_START + @as(c_int, 18);
pub const MDS_CDSADIR_MDS_SCHEMA_RELATIONS = MDS_CDSA_SCHEMA_START + @as(c_int, 19);
pub const MDS_CDSADIR_MDS_SCHEMA_ATTRIBUTES = MDS_CDSA_SCHEMA_START + @as(c_int, 20);
pub const MDS_CDSADIR_MDS_SCHEMA_INDEXES = MDS_CDSA_SCHEMA_START + @as(c_int, 21);
pub const CSSM_DB_ATTRIBUTE_MDS_START = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000000, .hexadecimal);
pub const CSSM_DB_ATTRIBUTE_MDS_END = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40004000, .hexadecimal);
pub const MDS_CDSAATTR_MODULE_ID = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 1);
pub const MDS_CDSAATTR_MANIFEST = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 2);
pub const MDS_CDSAATTR_MODULE_NAME = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 3);
pub const MDS_CDSAATTR_PATH = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 4);
pub const MDS_CDSAATTR_CDSAVERSION = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 5);
pub const MDS_CDSAATTR_VENDOR = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 6);
pub const MDS_CDSAATTR_DESC = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 8);
pub const MDS_CDSAATTR_INTERFACE_GUID = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 9);
pub const MDS_CDSAATTR_POLICY_STMT = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 10);
pub const MDS_CDSAATTR_EMMSPECVERSION = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 11);
pub const MDS_CDSAATTR_EMM_VERSION = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 12);
pub const MDS_CDSAATTR_EMM_VENDOR = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 13);
pub const MDS_CDSAATTR_EMM_TYPE = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 14);
pub const MDS_CDSAATTR_SSID = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 15);
pub const MDS_CDSAATTR_SERVICE_TYPE = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 16);
pub const MDS_CDSAATTR_NATIVE_SERVICES = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 17);
pub const MDS_CDSAATTR_DYNAMIC_FLAG = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 18);
pub const MDS_CDSAATTR_MULTITHREAD_FLAG = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 19);
pub const MDS_CDSAATTR_SERVICE_MASK = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 20);
pub const MDS_CDSAATTR_CSP_TYPE = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 21);
pub const MDS_CDSAATTR_CSP_FLAGS = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 22);
pub const MDS_CDSAATTR_CSP_CUSTOMFLAGS = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 23);
pub const MDS_CDSAATTR_USEE_TAGS = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 24);
pub const MDS_CDSAATTR_CONTEXT_TYPE = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 25);
pub const MDS_CDSAATTR_ALG_TYPE = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 26);
pub const MDS_CDSAATTR_GROUP_ID = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 27);
pub const MDS_CDSAATTR_ATTRIBUTE_TYPE = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 28);
pub const MDS_CDSAATTR_ATTRIBUTE_VALUE = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 29);
pub const MDS_CDSAATTR_PRODUCT_DESC = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 30);
pub const MDS_CDSAATTR_PRODUCT_VENDOR = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 31);
pub const MDS_CDSAATTR_PRODUCT_VERSION = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 32);
pub const MDS_CDSAATTR_PRODUCT_FLAGS = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 33);
pub const MDS_CDSAATTR_PRODUCT_CUSTOMFLAGS = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 34);
pub const MDS_CDSAATTR_STANDARD_DESC = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 35);
pub const MDS_CDSAATTR_STANDARD_VERSION = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 36);
pub const MDS_CDSAATTR_READER_DESC = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 37);
pub const MDS_CDSAATTR_READER_VENDOR = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 38);
pub const MDS_CDSAATTR_READER_VERSION = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 39);
pub const MDS_CDSAATTR_READER_FWVERSION = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 40);
pub const MDS_CDSAATTR_READER_FLAGS = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 41);
pub const MDS_CDSAATTR_READER_CUSTOMFLAGS = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 42);
pub const MDS_CDSAATTR_READER_SERIALNUMBER = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 43);
pub const MDS_CDSAATTR_SC_DESC = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 44);
pub const MDS_CDSAATTR_SC_VENDOR = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 45);
pub const MDS_CDSAATTR_SC_VERSION = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 46);
pub const MDS_CDSAATTR_SC_FWVERSION = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 47);
pub const MDS_CDSAATTR_SC_FLAGS = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 48);
pub const MDS_CDSAATTR_SC_CUSTOMFLAGS = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 49);
pub const MDS_CDSAATTR_SC_SERIALNUMBER = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 50);
pub const MDS_CDSAATTR_DL_TYPE = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 51);
pub const MDS_CDSAATTR_QUERY_LIMITS = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 52);
pub const MDS_CDSAATTR_CONJUNCTIVE_OPS = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 53);
pub const MDS_CDSAATTR_RELATIONAL_OPS = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 54);
pub const MDS_CDSAATTR_PROTOCOL = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 55);
pub const MDS_CDSAATTR_CERT_TYPEFORMAT = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 56);
pub const MDS_CDSAATTR_CRL_TYPEFORMAT = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 57);
pub const MDS_CDSAATTR_CERT_FIELDNAMES = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 58);
pub const MDS_CDSAATTR_BUNDLE_TYPEFORMAT = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 59);
pub const MDS_CDSAATTR_CERT_CLASSNAME = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 60);
pub const MDS_CDSAATTR_ROOTCERT = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 61);
pub const MDS_CDSAATTR_ROOTCERT_TYPEFORMAT = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 62);
pub const MDS_CDSAATTR_VALUE = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 63);
pub const MDS_CDSAATTR_REQCREDENTIALS = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 64);
pub const MDS_CDSAATTR_SAMPLETYPES = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 65);
pub const MDS_CDSAATTR_ACLSUBJECTTYPES = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 66);
pub const MDS_CDSAATTR_AUTHTAGS = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 67);
pub const MDS_CDSAATTR_USEETAG = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 68);
pub const MDS_CDSAATTR_RETRIEVALMODE = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 69);
pub const MDS_CDSAATTR_OID = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 70);
pub const MDS_CDSAATTR_XLATIONTYPEFORMAT = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 71);
pub const MDS_CDSAATTR_DEFAULT_TEMPLATE_TYPE = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 72);
pub const MDS_CDSAATTR_TEMPLATE_FIELD_NAMES = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 73);
pub const MDS_CDSAATTR_AUTHORITY_REQUEST_TYPE = CSSM_DB_ATTRIBUTE_MDS_START + @as(c_int, 74);
pub const MDS_OBJECT_NUM_RELATIONS = @as(c_int, 1);
pub const MDS_OBJECT_NUM_ATTRIBUTES = @as(c_int, 4);
pub const MDS_CDSADIR_NUM_RELATIONS = @as(c_int, 19);
pub const MDS_CDSADIR_CSSM_NUM_ATTRIBUTES = @as(c_int, 4);
pub const MDS_CDSADIR_EMM_NUM_ATTRIBUTES = @as(c_int, 11);
pub const MDS_CDSADIR_COMMON_NUM_ATTRIBUTES = @as(c_int, 9);
pub const MDS_CDSADIR_CSP_PRIMARY_NUM_ATTRIBUTES = @as(c_int, 13);
pub const MDS_CDSADIR_CSP_CAPABILITY_NUM_ATTRIBUTES = @as(c_int, 9);
pub const MDS_CDSADIR_CSP_ENCAPSULATED_PRODUCT_NUM_ATTRIBUTES = @as(c_int, 16);
pub const MDS_CDSADIR_CSP_SC_INFO_NUM_ATTRIBUTES = @as(c_int, 9);
pub const MDS_CDSADIR_DL_PRIMARY_NUM_ATTRIBUTES = @as(c_int, 13);
pub const MDS_CDSADIR_DL_ENCAPSULATED_PRODUCT_NUM_ATTRIBUTES = @as(c_int, 10);
pub const MDS_CDSADIR_CL_PRIMARY_NUM_ATTRIBUTES = @as(c_int, 13);
pub const MDS_CDSADIR_CL_ENCAPSULATED_PRODUCT_NUM_ATTRIBUTES = @as(c_int, 8);
pub const MDS_CDSADIR_TP_PRIMARY_NUM_ATTRIBUTES = @as(c_int, 10);
pub const MDS_CDSADIR_TP_OIDS_NUM_ATTRIBUTES = @as(c_int, 4);
pub const MDS_CDSADIR_TP_ENCAPSULATED_PRODUCT_NUM_ATTRIBUTES = @as(c_int, 14);
pub const MDS_CDSADIR_EMM_PRIMARY_NUM_ATTRIBUTES = @as(c_int, 9);
pub const MDS_CDSADIR_AC_PRIMARY_NUM_ATTRIBUTES = @as(c_int, 6);
pub const MDS_CDSADIR_SCHEMA_RELATONS_NUM_ATTRIBUTES = @as(c_int, 2);
pub const MDS_CDSADIR_SCHEMA_ATTRIBUTES_NUM_ATTRIBUTES = @as(c_int, 6);
pub const MDS_CDSADIR_SCHEMA_INDEXES_NUM_ATTRIBUTES = @as(c_int, 5);
pub const _OIDS_ALG_H_ = "";
pub const _OIDSBASE_H_ = @as(c_int, 1);
pub const INTEL = blk: {
    _ = @as(c_int, 96);
    _ = @as(c_int, 134);
    _ = @as(c_int, 72);
    _ = @as(c_int, 1);
    _ = @as(c_int, 134);
    _ = @as(c_int, 248);
    break :blk @as(c_int, 77);
};
pub const INTEL_LENGTH = @as(c_int, 7);
pub const INTEL_CDSASECURITY = blk: {
    _ = INTEL;
    break :blk @as(c_int, 2);
};
pub const INTEL_CDSASECURITY_LENGTH = INTEL_LENGTH + @as(c_int, 1);
pub const INTEL_SEC_FORMATS = blk: {
    _ = INTEL_CDSASECURITY;
    break :blk @as(c_int, 1);
};
pub const INTEL_SEC_FORMATS_LENGTH = INTEL_CDSASECURITY_LENGTH + @as(c_int, 1);
pub const INTEL_SEC_ALGS = blk: {
    _ = INTEL_CDSASECURITY;
    _ = @as(c_int, 2);
    break :blk @as(c_int, 5);
};
pub const INTEL_SEC_ALGS_LENGTH = INTEL_CDSASECURITY_LENGTH + @as(c_int, 2);
pub const INTEL_SEC_OBJECT_BUNDLE = blk: {
    _ = INTEL_SEC_FORMATS;
    break :blk @as(c_int, 4);
};
pub const INTEL_SEC_OBJECT_BUNDLE_LENGTH = INTEL_SEC_FORMATS_LENGTH + @as(c_int, 1);
pub const INTEL_CERT_AND_PRIVATE_KEY_2_0 = blk: {
    _ = INTEL_SEC_OBJECT_BUNDLE;
    break :blk @as(c_int, 1);
};
pub const INTEL_CERT_AND_PRIVATE_KEY_2_0_LENGTH = INTEL_SEC_OBJECT_BUNDLE_LENGTH + @as(c_int, 1);
pub const INTEL_X509_C_DATATYPE = @as(c_int, 1);
pub const INTEL_X509_LDAPSTRING_DATATYPE = @as(c_int, 2);
pub const OID_ISO_CCITT_DIR_SERVICE = @as(c_int, 85);
pub const OID_DS = OID_ISO_CCITT_DIR_SERVICE;
pub const OID_DS_LENGTH = @as(c_int, 1);
pub const OID_ATTR_TYPE = blk: {
    _ = OID_DS;
    break :blk @as(c_int, 4);
};
pub const OID_ATTR_TYPE_LENGTH = OID_DS_LENGTH + @as(c_int, 1);
pub const OID_EXTENSION = blk: {
    _ = OID_DS;
    break :blk @as(c_int, 29);
};
pub const OID_EXTENSION_LENGTH = OID_DS_LENGTH + @as(c_int, 1);
pub const OID_ISO_STANDARD = @as(c_int, 40);
pub const OID_ISO_MEMBER = @as(c_int, 42);
pub const OID_US = blk: {
    _ = OID_ISO_MEMBER;
    _ = @as(c_int, 134);
    break :blk @as(c_int, 72);
};
pub const OID_ISO_IDENTIFIED_ORG = @as(c_int, 43);
pub const OID_OSINET = blk: {
    _ = OID_ISO_IDENTIFIED_ORG;
    break :blk @as(c_int, 4);
};
pub const OID_GOSIP = blk: {
    _ = OID_ISO_IDENTIFIED_ORG;
    break :blk @as(c_int, 5);
};
pub const OID_DOD = blk: {
    _ = OID_ISO_IDENTIFIED_ORG;
    break :blk @as(c_int, 6);
};
pub const OID_OIW = blk: {
    _ = OID_ISO_IDENTIFIED_ORG;
    break :blk @as(c_int, 14);
};
pub const OID_ITU_RFCDATA_MEMBER_LENGTH = @as(c_int, 1);
pub const OID_ITU_RFCDATA = @as(c_int, 9);
pub const OID_ISO_MEMBER_LENGTH = @as(c_int, 1);
pub const OID_US_LENGTH = OID_ISO_MEMBER_LENGTH + @as(c_int, 2);
pub const OID_RSA = blk: {
    _ = OID_US;
    _ = @as(c_int, 134);
    _ = @as(c_int, 247);
    break :blk @as(c_int, 13);
};
pub const OID_RSA_LENGTH = OID_US_LENGTH + @as(c_int, 3);
pub const OID_RSA_HASH = blk: {
    _ = OID_RSA;
    break :blk @as(c_int, 2);
};
pub const OID_RSA_HASH_LENGTH = OID_RSA_LENGTH + @as(c_int, 1);
pub const OID_RSA_ENCRYPT = blk: {
    _ = OID_RSA;
    break :blk @as(c_int, 3);
};
pub const OID_RSA_ENCRYPT_LENGTH = OID_RSA_LENGTH + @as(c_int, 1);
pub const OID_PKCS = blk: {
    _ = OID_RSA;
    break :blk @as(c_int, 1);
};
pub const OID_PKCS_LENGTH = OID_RSA_LENGTH + @as(c_int, 1);
pub const OID_PKCS_1 = blk: {
    _ = OID_PKCS;
    break :blk @as(c_int, 1);
};
pub const OID_PKCS_1_LENGTH = OID_PKCS_LENGTH + @as(c_int, 1);
pub const OID_PKCS_2 = blk: {
    _ = OID_PKCS;
    break :blk @as(c_int, 2);
};
pub const OID_PKCS_3 = blk: {
    _ = OID_PKCS;
    break :blk @as(c_int, 3);
};
pub const OID_PKCS_3_LENGTH = OID_PKCS_LENGTH + @as(c_int, 1);
pub const OID_PKCS_4 = blk: {
    _ = OID_PKCS;
    break :blk @as(c_int, 4);
};
pub const OID_PKCS_5 = blk: {
    _ = OID_PKCS;
    break :blk @as(c_int, 5);
};
pub const OID_PKCS_5_LENGTH = OID_PKCS_LENGTH + @as(c_int, 1);
pub const OID_PKCS_6 = blk: {
    _ = OID_PKCS;
    break :blk @as(c_int, 6);
};
pub const OID_PKCS_7 = blk: {
    _ = OID_PKCS;
    break :blk @as(c_int, 7);
};
pub const OID_PKCS_7_LENGTH = OID_PKCS_LENGTH + @as(c_int, 1);
pub const OID_PKCS_8 = blk: {
    _ = OID_PKCS;
    break :blk @as(c_int, 8);
};
pub const OID_PKCS_9 = blk: {
    _ = OID_PKCS;
    break :blk @as(c_int, 9);
};
pub const OID_PKCS_9_LENGTH = OID_PKCS_LENGTH + @as(c_int, 1);
pub const OID_PKCS_10 = blk: {
    _ = OID_PKCS;
    break :blk @as(c_int, 10);
};
pub const OID_PKCS_11 = blk: {
    _ = OID_PKCS;
    break :blk @as(c_int, 11);
};
pub const OID_PKCS_11_LENGTH = OID_PKCS_LENGTH + @as(c_int, 1);
pub const OID_PKCS_12 = blk: {
    _ = OID_PKCS;
    break :blk @as(c_int, 12);
};
pub const OID_PKCS_12_LENGTH = OID_PKCS_LENGTH + @as(c_int, 1);
pub const OID_ANSI_X9_42 = blk: {
    _ = OID_US;
    _ = @as(c_int, 206);
    _ = @as(c_int, 62);
    break :blk @as(c_int, 2);
};
pub const OID_ANSI_X9_42_LEN = OID_US_LENGTH + @as(c_int, 3);
pub const OID_ANSI_X9_42_SCHEME = blk: {
    _ = OID_ANSI_X9_42;
    break :blk @as(c_int, 3);
};
pub const OID_ANSI_X9_42_SCHEME_LEN = OID_ANSI_X9_42_LEN + @as(c_int, 1);
pub const OID_ANSI_X9_42_NAMED_SCHEME = blk: {
    _ = OID_ANSI_X9_42;
    break :blk @as(c_int, 4);
};
pub const OID_ANSI_X9_42_NAMED_SCHEME_LEN = OID_ANSI_X9_42_LEN + @as(c_int, 1);
pub const OID_ANSI_X9_62 = blk: {
    _ = @as(c_int, 0x2A);
    _ = @as(c_int, 0x86);
    _ = @as(c_int, 0x48);
    _ = @as(c_int, 0xCE);
    break :blk @as(c_int, 0x3D);
};
pub const OID_ANSI_X9_62_LEN = @as(c_int, 5);
pub const OID_ANSI_X9_62_FIELD_TYPE = blk: {
    _ = OID_ANSI_X9_62;
    break :blk @as(c_int, 1);
};
pub const OID_ANSI_X9_62_PUBKEY_TYPE = blk: {
    _ = OID_ANSI_X9_62;
    break :blk @as(c_int, 2);
};
pub const OID_ANSI_X9_62_ELL_CURVE = blk: {
    _ = OID_ANSI_X9_62;
    break :blk @as(c_int, 3);
};
pub const OID_ANSI_X9_62_ELL_CURVE_LEN = OID_ANSI_X9_62_LEN + @as(c_int, 1);
pub const OID_ANSI_X9_62_C_TWO_CURVE = blk: {
    _ = OID_ANSI_X9_62_ELL_CURVE;
    break :blk @as(c_int, 0);
};
pub const OID_ANSI_X9_62_PRIME_CURVE = blk: {
    _ = OID_ANSI_X9_62_ELL_CURVE;
    break :blk @as(c_int, 1);
};
pub const OID_ANSI_X9_62_SIG_TYPE = blk: {
    _ = OID_ANSI_X9_62;
    break :blk @as(c_int, 4);
};
pub const OID_ANSI_X9_62_SIG_TYPE_LEN = OID_ANSI_X9_62_LEN + @as(c_int, 1);
pub const OID_PKIX = blk: {
    _ = OID_DOD;
    _ = @as(c_int, 1);
    _ = @as(c_int, 5);
    _ = @as(c_int, 5);
    break :blk @as(c_int, 7);
};
pub const OID_PKIX_LENGTH = @as(c_int, 6);
pub const OID_PE = blk: {
    _ = OID_PKIX;
    break :blk @as(c_int, 1);
};
pub const OID_PE_LENGTH = OID_PKIX_LENGTH + @as(c_int, 1);
pub const OID_QT = blk: {
    _ = OID_PKIX;
    break :blk @as(c_int, 2);
};
pub const OID_QT_LENGTH = OID_PKIX_LENGTH + @as(c_int, 1);
pub const OID_KP = blk: {
    _ = OID_PKIX;
    break :blk @as(c_int, 3);
};
pub const OID_KP_LENGTH = OID_PKIX_LENGTH + @as(c_int, 1);
pub const OID_OTHER_NAME = blk: {
    _ = OID_PKIX;
    break :blk @as(c_int, 8);
};
pub const OID_OTHER_NAME_LENGTH = OID_PKIX_LENGTH + @as(c_int, 1);
pub const OID_PDA = blk: {
    _ = OID_PKIX;
    break :blk @as(c_int, 9);
};
pub const OID_PDA_LENGTH = OID_PKIX_LENGTH + @as(c_int, 1);
pub const OID_QCS = blk: {
    _ = OID_PKIX;
    break :blk @as(c_int, 11);
};
pub const OID_QCS_LENGTH = OID_PKIX_LENGTH + @as(c_int, 1);
pub const OID_AD = blk: {
    _ = OID_PKIX;
    break :blk @as(c_int, 48);
};
pub const OID_AD_LENGTH = OID_PKIX_LENGTH + @as(c_int, 1);
pub const OID_AD_OCSP = blk: {
    _ = OID_AD;
    break :blk @as(c_int, 1);
};
pub const OID_AD_OCSP_LENGTH = OID_AD_LENGTH + @as(c_int, 1);
pub const OID_ETSI = blk: {
    _ = @as(c_int, 0x04);
    break :blk @as(c_int, 0x00);
};
pub const OID_ETSI_LENGTH = @as(c_int, 2);
pub const OID_ETSI_QCS = blk: {
    _ = @as(c_int, 0x04);
    _ = @as(c_int, 0x00);
    _ = @as(c_int, 0x8E);
    _ = @as(c_int, 0x46);
    break :blk @as(c_int, 0x01);
};
pub const OID_ETSI_QCS_LENGTH = @as(c_int, 5);
pub const OID_OIW_SECSIG = blk: {
    _ = OID_OIW;
    break :blk @as(c_int, 3);
};
pub const OID_OIW_LENGTH = @as(c_int, 2);
pub const OID_OIW_SECSIG_LENGTH = OID_OIW_LENGTH + @as(c_int, 1);
pub const OID_OIW_ALGORITHM = blk: {
    _ = OID_OIW_SECSIG;
    break :blk @as(c_int, 2);
};
pub const OID_OIW_ALGORITHM_LENGTH = OID_OIW_SECSIG_LENGTH + @as(c_int, 1);
pub const OID_NIST_HASHALG = blk: {
    _ = @as(c_int, 0x60);
    _ = @as(c_int, 0x86);
    _ = @as(c_int, 0x48);
    _ = @as(c_int, 0x01);
    _ = @as(c_int, 0x65);
    _ = @as(c_int, 0x03);
    _ = @as(c_int, 0x04);
    break :blk @as(c_int, 0x02);
};
pub const OID_NIST_HASHALG_LENGTH = @as(c_int, 8);
pub const OID_KERBv5 = blk: {
    _ = @as(c_int, 0x2b);
    _ = @as(c_int, 6);
    _ = @as(c_int, 1);
    _ = @as(c_int, 5);
    break :blk @as(c_int, 2);
};
pub const OID_KERBv5_LEN = @as(c_int, 5);
pub const OID_KERBv5_PKINIT = blk: {
    _ = OID_KERBv5;
    break :blk @as(c_int, 3);
};
pub const OID_KERBv5_PKINIT_LEN = OID_KERBv5_LEN + @as(c_int, 1);
pub const OID_CERTICOM = blk: {
    _ = @as(c_int, 0x2B);
    _ = @as(c_int, 0x81);
    break :blk @as(c_int, 0x04);
};
pub const OID_CERTICOM_LEN = @as(c_int, 3);
pub const OID_CERTICOM_ELL_CURVE = blk: {
    _ = OID_CERTICOM;
    break :blk @as(c_int, 0);
};
pub const OID_CERTICOM_ELL_CURVE_LEN = OID_CERTICOM_LEN + @as(c_int, 1);
pub const APPLE_OID = blk: {
    _ = OID_US;
    _ = @as(c_int, 0x86);
    _ = @as(c_int, 0xf7);
    break :blk @as(c_int, 0x63);
};
pub const APPLE_OID_LENGTH = OID_US_LENGTH + @as(c_int, 3);
pub const APPLE_ADS_OID = blk: {
    _ = APPLE_OID;
    break :blk @as(c_int, 0x64);
};
pub const APPLE_ADS_OID_LENGTH = APPLE_OID_LENGTH + @as(c_int, 1);
pub const APPLE_TP_OID = blk: {
    _ = APPLE_ADS_OID;
    break :blk @as(c_int, 1);
};
pub const APPLE_TP_OID_LENGTH = APPLE_ADS_OID_LENGTH + @as(c_int, 1);
pub const APPLE_ALG_OID = blk: {
    _ = APPLE_ADS_OID;
    break :blk @as(c_int, 2);
};
pub const APPLE_ALG_OID_LENGTH = APPLE_ADS_OID_LENGTH + @as(c_int, 1);
pub const APPLE_DOTMAC_CERT_OID = blk: {
    _ = APPLE_ADS_OID;
    break :blk @as(c_int, 3);
};
pub const APPLE_DOTMAC_CERT_OID_LENGTH = APPLE_ADS_OID_LENGTH + @as(c_int, 1);
pub const APPLE_DOTMAC_CERT_REQ_OID = blk: {
    _ = APPLE_DOTMAC_CERT_OID;
    break :blk @as(c_int, 1);
};
pub const APPLE_DOTMAC_CERT_REQ_OID_LENGTH = APPLE_DOTMAC_CERT_OID_LENGTH + @as(c_int, 1);
pub const APPLE_DOTMAC_CERT_EXTEN_OID = blk: {
    _ = APPLE_DOTMAC_CERT_OID;
    break :blk @as(c_int, 2);
};
pub const APPLE_DOTMAC_CERT_EXTEN_OID_LENGTH = APPLE_DOTMAC_CERT_OID_LENGTH + @as(c_int, 1);
pub const APPLE_DOTMAC_CERT_REQ_VALUE_OID = blk: {
    _ = APPLE_DOTMAC_CERT_OID;
    break :blk @as(c_int, 3);
};
pub const APPLE_DOTMAC_CERT_REQ_VALUE_OID_LENGTH = APPLE_DOTMAC_CERT_OID_LENGTH + @as(c_int, 1);
pub const APPLE_EKU_OID = blk: {
    _ = APPLE_ADS_OID;
    break :blk @as(c_int, 4);
};
pub const APPLE_EKU_OID_LENGTH = APPLE_ADS_OID_LENGTH + @as(c_int, 1);
pub const APPLE_EKU_CODE_SIGNING = blk: {
    _ = APPLE_EKU_OID;
    break :blk @as(c_int, 1);
};
pub const APPLE_EKU_CODE_SIGNING_LENGTH = APPLE_EKU_OID_LENGTH + @as(c_int, 1);
pub const APPLE_CERT_POLICIES = blk: {
    _ = APPLE_ADS_OID;
    break :blk @as(c_int, 5);
};
pub const APPLE_CERT_POLICIES_LENGTH = APPLE_ADS_OID_LENGTH + @as(c_int, 1);
pub const APPLE_CERT_POLICIES_MACAPPSTORE = blk: {
    _ = APPLE_CERT_POLICIES;
    break :blk @as(c_int, 6);
};
pub const APPLE_CERT_POLICIES_MACAPPSTORE_LENGTH = APPLE_CERT_POLICIES_LENGTH + @as(c_int, 1);
pub const APPLE_CERT_POLICIES_MACAPPSTORE_RECEIPT = blk: {
    _ = APPLE_CERT_POLICIES_MACAPPSTORE;
    break :blk @as(c_int, 1);
};
pub const APPLE_CERT_POLICIES_MACAPPSTORE_RECEIPT_LENGTH = APPLE_CERT_POLICIES_MACAPPSTORE_LENGTH + @as(c_int, 1);
pub const APPLE_CERT_POLICIES_APPLEID = blk: {
    _ = APPLE_CERT_POLICIES;
    break :blk @as(c_int, 7);
};
pub const APPLE_CERT_POLICIES_APPLEID_LENGTH = APPLE_CERT_POLICIES_LENGTH + @as(c_int, 1);
pub const APPLE_CERT_POLICIES_APPLEID_SHARING = blk: {
    _ = APPLE_CERT_POLICIES_APPLEID;
    break :blk @as(c_int, 1);
};
pub const APPLE_CERT_POLICIES_APPLEID_SHARING_LENGTH = APPLE_CERT_POLICIES_APPLEID_LENGTH + @as(c_int, 1);
pub const APPLE_CERT_POLICIES_MOBILE_STORE_SIGNING = blk: {
    _ = APPLE_CERT_POLICIES;
    break :blk @as(c_int, 12);
};
pub const APPLE_CERT_POLICIES_MOBILE_STORE_SIGNING_LENGTH = APPLE_CERT_POLICIES_LENGTH + @as(c_int, 1);
pub const APPLE_CERT_POLICIES_TEST_MOBILE_STORE_SIGNING = blk: {
    _ = APPLE_CERT_POLICIES;
    _ = @as(c_int, 12);
    break :blk @as(c_int, 1);
};
pub const APPLE_CERT_POLICIES_TEST_MOBILE_STORE_SIGNING_LENGTH = APPLE_CERT_POLICIES_LENGTH + @as(c_int, 2);
pub const APPLE_EXTENSION_OID = blk: {
    _ = APPLE_ADS_OID;
    break :blk @as(c_int, 6);
};
pub const APPLE_EXTENSION_OID_LENGTH = APPLE_ADS_OID_LENGTH + @as(c_int, 1);
pub const APPLE_EXTENSION_CODE_SIGNING = blk: {
    _ = APPLE_EXTENSION_OID;
    break :blk @as(c_int, 1);
};
pub const APPLE_EXTENSION_CODE_SIGNING_LENGTH = APPLE_EXTENSION_OID_LENGTH + @as(c_int, 1);
pub const APPLE_EXTENSION_MACAPPSTORE_RECEIPT = blk: {
    _ = APPLE_EXTENSION_OID;
    _ = @as(c_int, 11);
    break :blk @as(c_int, 1);
};
pub const APPLE_EXTENSION_MACAPPSTORE_RECEIPT_LENGTH = APPLE_EXTENSION_OID_LENGTH + @as(c_int, 2);
pub const APPLE_EXTENSION_INTERMEDIATE_MARKER = blk: {
    _ = APPLE_EXTENSION_OID;
    break :blk @as(c_int, 2);
};
pub const APPLE_EXTENSION_INTERMEDIATE_MARKER_LENGTH = APPLE_EXTENSION_OID_LENGTH + @as(c_int, 1);
pub const APPLE_EXTENSION_WWDR_INTERMEDIATE = blk: {
    _ = APPLE_EXTENSION_INTERMEDIATE_MARKER;
    break :blk @as(c_int, 1);
};
pub const APPLE_EXTENSION_WWDR_INTERMEDIATE_LENGTH = APPLE_EXTENSION_INTERMEDIATE_MARKER_LENGTH + @as(c_int, 1);
pub const APPLE_EXTENSION_ITMS_INTERMEDIATE = blk: {
    _ = APPLE_EXTENSION_INTERMEDIATE_MARKER;
    break :blk @as(c_int, 2);
};
pub const APPLE_EXTENSION_ITMS_INTERMEDIATE_LENGTH = APPLE_EXTENSION_INTERMEDIATE_MARKER_LENGTH + @as(c_int, 1);
pub const APPLE_EXTENSION_AAI_INTERMEDIATE = blk: {
    _ = APPLE_EXTENSION_INTERMEDIATE_MARKER;
    break :blk @as(c_int, 3);
};
pub const APPLE_EXTENSION_AAI_INTERMEDIATE_LENGTH = APPLE_EXTENSION_INTERMEDIATE_MARKER_LENGTH + @as(c_int, 1);
pub const APPLE_EXTENSION_APPLEID_INTERMEDIATE = blk: {
    _ = APPLE_EXTENSION_INTERMEDIATE_MARKER;
    break :blk @as(c_int, 7);
};
pub const APPLE_EXTENSION_APPLEID_INTERMEDIATE_LENGTH = APPLE_EXTENSION_INTERMEDIATE_MARKER_LENGTH + @as(c_int, 1);
pub const APPLE_EXTENSION_SYSINT2_INTERMEDIATE = blk: {
    _ = APPLE_EXTENSION_INTERMEDIATE_MARKER;
    break :blk @as(c_int, 10);
};
pub const APPLE_EXTENSION_SYSINT2_INTERMEDIATE_LENGTH = APPLE_EXTENSION_INTERMEDIATE_MARKER_LENGTH + @as(c_int, 1);
pub const APPLE_EXTENSION_DEVELOPER_AUTHENTICATION = blk: {
    _ = APPLE_EXTENSION_INTERMEDIATE_MARKER;
    break :blk @as(c_int, 11);
};
pub const APPLE_EXTENSION_DEVELOPER_AUTHENTICATION_LENGTH = APPLE_EXTENSION_INTERMEDIATE_MARKER_LENGTH + @as(c_int, 1);
pub const APPLE_EXTENSION_SERVER_AUTHENTICATION = blk: {
    _ = APPLE_EXTENSION_INTERMEDIATE_MARKER;
    break :blk @as(c_int, 12);
};
pub const APPLE_EXTENSION_SERVER_AUTHENTICATION_LENGTH = APPLE_EXTENSION_INTERMEDIATE_MARKER_LENGTH + @as(c_int, 1);
pub const APPLE_EXTENSION_ESCROW_SERVICE = blk: {
    _ = APPLE_EXTENSION_OID;
    _ = @as(c_int, 23);
    break :blk @as(c_int, 1);
};
pub const APPLE_EXTENSION_ESCROW_SERVICE_LENGTH = APPLE_EXTENSION_OID_LENGTH + @as(c_int, 2);
pub const APPLE_EXTENSION_PROVISIONING_PROFILE_SIGNING = blk: {
    _ = APPLE_EKU_OID;
    break :blk @as(c_int, 11);
};
pub const APPLE_EXTENSION_PROVISIONING_PROFILE_SIGNING_LENGTH = APPLE_EKU_OID_LENGTH + @as(c_int, 1);
pub const APPLE_EXTENSION_APPLEID_SHARING = blk: {
    _ = APPLE_EKU_OID;
    break :blk @as(c_int, 7);
};
pub const APPLE_EXTENSION_APPLEID_SHARING_LENGTH = APPLE_EKU_OID_LENGTH + @as(c_int, 1);
pub const NETSCAPE_BASE_OID = blk: {
    _ = @as(c_int, 0x60);
    _ = @as(c_int, 0x86);
    _ = @as(c_int, 0x48);
    _ = @as(c_int, 0x01);
    _ = @as(c_int, 0x86);
    _ = @as(c_int, 0xf8);
    break :blk @as(c_int, 0x42);
};
pub const NETSCAPE_BASE_OID_LEN = @as(c_int, 7);
pub const NETSCAPE_CERT_EXTEN = blk: {
    _ = NETSCAPE_BASE_OID;
    break :blk @as(c_int, 0x01);
};
pub const NETSCAPE_CERT_EXTEN_LENGTH = NETSCAPE_BASE_OID_LEN + @as(c_int, 1);
pub const NETSCAPE_CERT_POLICY = blk: {
    _ = NETSCAPE_BASE_OID;
    break :blk @as(c_int, 0x04);
};
pub const NETSCAPE_CERT_POLICY_LENGTH = NETSCAPE_BASE_OID_LEN + @as(c_int, 1);
pub const GOOGLE_BASE_OID = blk: {
    _ = OID_DOD;
    _ = @as(c_int, 0x01);
    _ = @as(c_int, 0x04);
    _ = @as(c_int, 0x01);
    _ = @as(c_int, 0xD6);
    break :blk @as(c_int, 0x79);
};
pub const GOOGLE_EMBEDDED_SCT_OID = blk: {
    _ = GOOGLE_BASE_OID;
    _ = @as(c_int, 0x02);
    _ = @as(c_int, 0x04);
    break :blk @as(c_int, 0x02);
};
pub const GOOGLE_OCSP_SCT_OID = blk: {
    _ = GOOGLE_BASE_OID;
    _ = @as(c_int, 0x02);
    _ = @as(c_int, 0x04);
    break :blk @as(c_int, 0x05);
};
pub const OID_ITU_RFCDATA_2342 = blk: {
    _ = OID_ITU_RFCDATA;
    _ = @as(c_int, 0x49);
    break :blk @as(c_int, 0x86);
};
pub const OID_ITU_RFCDATA_2342_LENGTH = OID_ITU_RFCDATA_MEMBER_LENGTH + @as(c_int, 2);
pub const OID_ITU_RFCDATA_2342_UCL = blk: {
    _ = OID_ITU_RFCDATA_2342;
    _ = @as(c_int, 0x49);
    _ = @as(c_int, 0x1F);
    _ = @as(c_int, 0x12);
    break :blk @as(c_int, 0x8C);
};
pub const OID_ITU_RFCDATA_2342_UCL_LENGTH = OID_ITU_RFCDATA_2342_LENGTH + @as(c_int, 4);
pub const OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT = blk: {
    _ = OID_ITU_RFCDATA_2342_UCL;
    break :blk @as(c_int, 0xE4);
};
pub const OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_LENGTH = OID_ITU_RFCDATA_2342_UCL_LENGTH + @as(c_int, 1);
pub const OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES = blk: {
    _ = OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT;
    break :blk @as(c_int, 0x81);
};
pub const OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES_LENGTH = OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_LENGTH + @as(c_int, 1);
pub const OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES_DOMAINCOMPONENT = blk: {
    _ = OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES;
    break :blk @as(c_int, 0x99);
};
pub const OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES_DOMAINCOMPONENT_LENGTH = OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES_LENGTH + @as(c_int, 1);
pub const OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES_USERID = blk: {
    _ = OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES;
    break :blk @as(c_int, 0x81);
};
pub const OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES_USERID_LENGTH = OID_ITU_RFCDATA_2342_UCL_DIRECTORYPILOT_ATTRIBUTES_LENGTH + @as(c_int, 1);
pub const _CDSA_OIDSATTR_H_ = "";
pub const _OIDSCERT_H_ = @as(c_int, 1);
pub const INTEL_X509V3_CERT_R08 = blk: {
    _ = INTEL_SEC_FORMATS;
    _ = @as(c_int, 1);
    break :blk @as(c_int, 1);
};
pub const INTEL_X509V3_CERT_R08_LENGTH = INTEL_SEC_FORMATS_LENGTH + @as(c_int, 2);
pub const INTEL_X509V3_CERT_PRIVATE_EXTENSIONS = blk: {
    _ = INTEL_X509V3_CERT_R08;
    break :blk @as(c_int, 50);
};
pub const INTEL_X509V3_CERT_PRIVATE_EXTENSIONS_LENGTH = INTEL_X509V3_CERT_R08_LENGTH + @as(c_int, 1);
pub const INTEL_X509V3_SIGN_R08 = blk: {
    _ = INTEL_SEC_FORMATS;
    _ = @as(c_int, 3);
    break :blk @as(c_int, 2);
};
pub const INTEL_X509V3_SIGN_R08_LENGTH = INTEL_SEC_FORMATS_LENGTH + @as(c_int, 2);
pub const CE_NCT_SSL_Client = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hexadecimal);
pub const CE_NCT_SSL_Server = @as(c_int, 0x4000);
pub const CE_NCT_SMIME = @as(c_int, 0x2000);
pub const CE_NCT_ObjSign = @as(c_int, 0x1000);
pub const CE_NCT_Reserved = @as(c_int, 0x0800);
pub const CE_NCT_SSL_CA = @as(c_int, 0x0400);
pub const CE_NCT_SMIME_CA = @as(c_int, 0x0200);
pub const CE_NCT_ObjSignCA = @as(c_int, 0x0100);
pub const _OIDSCRL_H_ = @as(c_int, 1);
pub const INTEL_X509V2_CRL_R08 = blk: {
    _ = INTEL_SEC_FORMATS;
    _ = @as(c_int, 2);
    break :blk @as(c_int, 1);
};
pub const INTEL_X509V2_CRL_R08_LENGTH = INTEL_SEC_FORMATS_LENGTH + @as(c_int, 2);
pub const _SECURITY_SECACL_H_ = "";
pub const _SECURITY_SECCERTIFICATEOIDS_H_ = "";
pub const _SECURITY_SECIDENTITYSEARCH_H_ = "";
pub const _SECURITY_SECKEYCHAINITEM_H_ = "";
pub const _SECURITY_SECKEYCHAINSEARCH_H_ = "";
pub const _SECURITY_SECPOLICYSEARCH_H_ = "";
pub const _SECURITY_SECTRUSTEDAPPLICATION_H_ = "";
pub const _SECURITY_SECTRUSTSETTINGS_H_ = "";
pub const kSecTrustSettingsPolicy = CFSTR("kSecTrustSettingsPolicy");
pub const kSecTrustSettingsApplication = CFSTR("kSecTrustSettingsApplication");
pub const kSecTrustSettingsPolicyString = CFSTR("kSecTrustSettingsPolicyString");
pub const kSecTrustSettingsKeyUsage = CFSTR("kSecTrustSettingsKeyUsage");
pub const kSecTrustSettingsAllowedError = CFSTR("kSecTrustSettingsAllowedError");
pub const kSecTrustSettingsResult = CFSTR("kSecTrustSettingsResult");
pub const kSecTrustSettingsDefaultRootCertSetting = @import("std").zig.c_translation.cast(SecCertificateRef, -@as(c_int, 1));
pub const _H_SECSTATICCODE = "";
pub const _H_CSCOMMON = "";
pub const _H_SECCODE = "";
pub const __XPC_H__ = "";
pub const _SYS_MMAN_H_ = "";
pub const PROT_NONE = @as(c_int, 0x00);
pub const PROT_READ = @as(c_int, 0x01);
pub const PROT_WRITE = @as(c_int, 0x02);
pub const PROT_EXEC = @as(c_int, 0x04);
pub const MAP_SHARED = @as(c_int, 0x0001);
pub const MAP_PRIVATE = @as(c_int, 0x0002);
pub const MAP_COPY = MAP_PRIVATE;
pub const MAP_FIXED = @as(c_int, 0x0010);
pub const MAP_RENAME = @as(c_int, 0x0020);
pub const MAP_NORESERVE = @as(c_int, 0x0040);
pub const MAP_RESERVED0080 = @as(c_int, 0x0080);
pub const MAP_NOEXTEND = @as(c_int, 0x0100);
pub const MAP_HASSEMAPHORE = @as(c_int, 0x0200);
pub const MAP_NOCACHE = @as(c_int, 0x0400);
pub const MAP_JIT = @as(c_int, 0x0800);
pub const MAP_FILE = @as(c_int, 0x0000);
pub const MAP_ANON = @as(c_int, 0x1000);
pub const MAP_ANONYMOUS = MAP_ANON;
pub const MAP_RESILIENT_CODESIGN = @as(c_int, 0x2000);
pub const MAP_RESILIENT_MEDIA = @as(c_int, 0x4000);
pub const MAP_32BIT = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hexadecimal);
pub const MAP_TRANSLATED_ALLOW_EXECUTE = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x20000, .hexadecimal);
pub const MAP_UNIX03 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x40000, .hexadecimal);
pub const MCL_CURRENT = @as(c_int, 0x0001);
pub const MCL_FUTURE = @as(c_int, 0x0002);
pub const MAP_FAILED = @import("std").zig.c_translation.cast(?*anyopaque, -@as(c_int, 1));
pub const MS_ASYNC = @as(c_int, 0x0001);
pub const MS_INVALIDATE = @as(c_int, 0x0002);
pub const MS_SYNC = @as(c_int, 0x0010);
pub const MS_KILLPAGES = @as(c_int, 0x0004);
pub const MS_DEACTIVATE = @as(c_int, 0x0008);
pub const POSIX_MADV_NORMAL = @as(c_int, 0);
pub const POSIX_MADV_RANDOM = @as(c_int, 1);
pub const POSIX_MADV_SEQUENTIAL = @as(c_int, 2);
pub const POSIX_MADV_WILLNEED = @as(c_int, 3);
pub const POSIX_MADV_DONTNEED = @as(c_int, 4);
pub const MADV_NORMAL = POSIX_MADV_NORMAL;
pub const MADV_RANDOM = POSIX_MADV_RANDOM;
pub const MADV_SEQUENTIAL = POSIX_MADV_SEQUENTIAL;
pub const MADV_WILLNEED = POSIX_MADV_WILLNEED;
pub const MADV_DONTNEED = POSIX_MADV_DONTNEED;
pub const MADV_FREE = @as(c_int, 5);
pub const MADV_ZERO_WIRED_PAGES = @as(c_int, 6);
pub const MADV_FREE_REUSABLE = @as(c_int, 7);
pub const MADV_FREE_REUSE = @as(c_int, 8);
pub const MADV_CAN_REUSE = @as(c_int, 9);
pub const MADV_PAGEOUT = @as(c_int, 10);
pub const MINCORE_INCORE = @as(c_int, 0x1);
pub const MINCORE_REFERENCED = @as(c_int, 0x2);
pub const MINCORE_MODIFIED = @as(c_int, 0x4);
pub const MINCORE_REFERENCED_OTHER = @as(c_int, 0x8);
pub const MINCORE_MODIFIED_OTHER = @as(c_int, 0x10);
pub const MINCORE_PAGED_OUT = @as(c_int, 0x20);
pub const MINCORE_COPIED = @as(c_int, 0x40);
pub const MINCORE_ANONYMOUS = @as(c_int, 0x80);
pub const _MMAP = "";
pub const _BSM_AUDIT_H = "";
pub const _SYS_PARAM_H_ = "";
pub const BSD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 199506, .decimal);
pub const BSD4_3 = @as(c_int, 1);
pub const BSD4_4 = @as(c_int, 1);
pub const NeXTBSD = @import("std").zig.c_translation.promoteIntLiteral(c_int, 1995064, .decimal);
pub const NeXTBSD4_0 = @as(c_int, 0);
pub const MAXCOMLEN = @as(c_int, 16);
pub const MAXINTERP = @as(c_int, 64);
pub const MAXLOGNAME = @as(c_int, 255);
pub const MAXUPRC = CHILD_MAX;
pub const NCARGS = ARG_MAX;
pub const NGROUPS = NGROUPS_MAX;
pub const NOFILE = @as(c_int, 256);
pub const NOGROUP = @import("std").zig.c_translation.promoteIntLiteral(c_int, 65535, .decimal);
pub const MAXHOSTNAMELEN = @as(c_int, 256);
pub const MAXDOMNAMELEN = @as(c_int, 256);
pub const _BSD_MACHINE_PARAM_H_ = "";
pub const _ARM_PARAM_H_ = "";
pub const _ARM__PARAM_H_ = "";
pub const __DARWIN_ALIGNBYTES = @import("std").zig.c_translation.sizeof(__darwin_size_t) - @as(c_int, 1);
pub inline fn __DARWIN_ALIGN(p: anytype) @TypeOf(@import("std").zig.c_translation.cast(__darwin_size_t, @import("std").zig.c_translation.cast(__darwin_size_t, p) + __DARWIN_ALIGNBYTES) & ~__DARWIN_ALIGNBYTES) {
    return @import("std").zig.c_translation.cast(__darwin_size_t, @import("std").zig.c_translation.cast(__darwin_size_t, p) + __DARWIN_ALIGNBYTES) & ~__DARWIN_ALIGNBYTES;
}
pub const __DARWIN_ALIGNBYTES32 = @import("std").zig.c_translation.sizeof(__uint32_t) - @as(c_int, 1);
pub inline fn __DARWIN_ALIGN32(p: anytype) @TypeOf(@import("std").zig.c_translation.cast(__darwin_size_t, @import("std").zig.c_translation.cast(__darwin_size_t, p) + __DARWIN_ALIGNBYTES32) & ~__DARWIN_ALIGNBYTES32) {
    return @import("std").zig.c_translation.cast(__darwin_size_t, @import("std").zig.c_translation.cast(__darwin_size_t, p) + __DARWIN_ALIGNBYTES32) & ~__DARWIN_ALIGNBYTES32;
}
pub const ALIGNBYTES = __DARWIN_ALIGNBYTES;
pub inline fn ALIGN(p: anytype) @TypeOf(__DARWIN_ALIGN(p)) {
    return __DARWIN_ALIGN(p);
}
pub const NBPG = @as(c_int, 4096);
pub const PGOFSET = NBPG - @as(c_int, 1);
pub const PGSHIFT = @as(c_int, 12);
pub const DEV_BSIZE = @as(c_int, 512);
pub const DEV_BSHIFT = @as(c_int, 9);
pub const BLKDEV_IOSIZE = @as(c_int, 2048);
pub const MAXPHYS = @as(c_int, 64) * @as(c_int, 1024);
pub const CLSIZE = @as(c_int, 1);
pub const CLSIZELOG2 = @as(c_int, 0);
pub const MSIZESHIFT = @as(c_int, 8);
pub const MSIZE = @as(c_int, 1) << MSIZESHIFT;
pub const MCLSHIFT = @as(c_int, 11);
pub const MCLBYTES = @as(c_int, 1) << MCLSHIFT;
pub const MBIGCLSHIFT = @as(c_int, 12);
pub const MBIGCLBYTES = @as(c_int, 1) << MBIGCLSHIFT;
pub const M16KCLSHIFT = @as(c_int, 14);
pub const M16KCLBYTES = @as(c_int, 1) << M16KCLSHIFT;
pub const MCLOFSET = MCLBYTES - @as(c_int, 1);
pub inline fn ctos(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn stoc(x: anytype) @TypeOf(x) {
    return x;
}
pub inline fn ctod(x: anytype) @TypeOf(x << (PGSHIFT - DEV_BSHIFT)) {
    return x << (PGSHIFT - DEV_BSHIFT);
}
pub inline fn dtoc(x: anytype) @TypeOf(x >> (PGSHIFT - DEV_BSHIFT)) {
    return x >> (PGSHIFT - DEV_BSHIFT);
}
pub inline fn dtob(x: anytype) @TypeOf(x << DEV_BSHIFT) {
    return x << DEV_BSHIFT;
}
pub inline fn ctob(x: anytype) @TypeOf(x << PGSHIFT) {
    return x << PGSHIFT;
}
pub inline fn btoc(x: anytype) @TypeOf((@import("std").zig.c_translation.cast(c_uint, x) + (NBPG - @as(c_int, 1))) >> PGSHIFT) {
    return (@import("std").zig.c_translation.cast(c_uint, x) + (NBPG - @as(c_int, 1))) >> PGSHIFT;
}
pub inline fn btodb(bytes: anytype, devBlockSize: anytype) @TypeOf(@import("std").zig.c_translation.cast(c_uint, bytes) / devBlockSize) {
    return @import("std").zig.c_translation.cast(c_uint, bytes) / devBlockSize;
}
pub inline fn dbtob(db: anytype, devBlockSize: anytype) @TypeOf(@import("std").zig.c_translation.cast(c_uint, db) * devBlockSize) {
    return @import("std").zig.c_translation.cast(c_uint, db) * devBlockSize;
}
pub inline fn bdbtofsb(bn: anytype) @TypeOf(bn / (BLKDEV_IOSIZE / DEV_BSIZE)) {
    return bn / (BLKDEV_IOSIZE / DEV_BSIZE);
}
pub inline fn STATUS_WORD(rpl: anytype, ipl: anytype) @TypeOf((ipl << @as(c_int, 8)) | rpl) {
    return (ipl << @as(c_int, 8)) | rpl;
}
pub inline fn USERMODE(x: anytype) @TypeOf((x & @as(c_int, 3)) == @as(c_int, 3)) {
    return (x & @as(c_int, 3)) == @as(c_int, 3);
}
pub inline fn BASEPRI(x: anytype) @TypeOf((x & (@as(c_int, 255) << @as(c_int, 8))) == @as(c_int, 0)) {
    return (x & (@as(c_int, 255) << @as(c_int, 8))) == @as(c_int, 0);
}
pub const PSWP = @as(c_int, 0);
pub const PVM = @as(c_int, 4);
pub const PINOD = @as(c_int, 8);
pub const PRIBIO = @as(c_int, 16);
pub const PVFS = @as(c_int, 20);
pub const PZERO = @as(c_int, 22);
pub const PSOCK = @as(c_int, 24);
pub const PWAIT = @as(c_int, 32);
pub const PLOCK = @as(c_int, 36);
pub const PPAUSE = @as(c_int, 40);
pub const PUSER = @as(c_int, 50);
pub const MAXPRI = @as(c_int, 127);
pub const PRIMASK = @as(c_int, 0x0ff);
pub const PCATCH = @as(c_int, 0x100);
pub const PTTYBLOCK = @as(c_int, 0x200);
pub const PDROP = @as(c_int, 0x400);
pub const PSPIN = @as(c_int, 0x800);
pub const NBPW = @import("std").zig.c_translation.sizeof(c_int);
pub const CMASK = @as(c_int, 0o22);
pub const NODEV = @import("std").zig.c_translation.cast(dev_t, -@as(c_int, 1));
pub const CLBYTES = CLSIZE * NBPG;
pub const CLOFSET = (CLSIZE * NBPG) - @as(c_int, 1);
pub inline fn claligned(x: anytype) @TypeOf((@import("std").zig.c_translation.cast(c_int, x) & CLOFSET) == @as(c_int, 0)) {
    return (@import("std").zig.c_translation.cast(c_int, x) & CLOFSET) == @as(c_int, 0);
}
pub const CLOFF = CLOFSET;
pub const CLSHIFT = PGSHIFT + CLSIZELOG2;
pub inline fn clbase(i: anytype) @TypeOf(i) {
    return i;
}
pub inline fn clrnd(i: anytype) @TypeOf(i) {
    return i;
}
pub const CBLOCK = @as(c_int, 64);
pub const CBQSIZE = CBLOCK / NBBY;
pub const CROUND = CBLOCK - @as(c_int, 1);
pub const MAXBSIZE = @as(c_int, 256) * @as(c_int, 4096);
pub const MAXPHYSIO = MAXPHYS;
pub const MAXFRAG = @as(c_int, 8);
pub const MAXPHYSIO_WIRED = (@as(c_int, 16) * @as(c_int, 1024)) * @as(c_int, 1024);
pub const MAXPATHLEN = PATH_MAX;
pub const MAXSYMLINKS = @as(c_int, 32);
pub inline fn isset(a: anytype, i: anytype) @TypeOf(@import("std").zig.c_translation.cast([*c]u8, a)[i / NBBY] & (@as(c_uint, 1) << (i % NBBY))) {
    return @import("std").zig.c_translation.cast([*c]u8, a)[i / NBBY] & (@as(c_uint, 1) << (i % NBBY));
}
pub inline fn isclr(a: anytype, i: anytype) @TypeOf((@import("std").zig.c_translation.cast([*c]u8, a)[i / NBBY] & (@as(c_uint, 1) << (i % NBBY))) == @as(c_int, 0)) {
    return (@import("std").zig.c_translation.cast([*c]u8, a)[i / NBBY] & (@as(c_uint, 1) << (i % NBBY))) == @as(c_int, 0);
}
pub inline fn roundup(x: anytype, y: anytype) @TypeOf(if ((x % y) == @as(c_int, 0)) x else x + (y - (x % y))) {
    return if ((x % y) == @as(c_int, 0)) x else x + (y - (x % y));
}
pub inline fn powerof2(x: anytype) @TypeOf(((x - @as(c_int, 1)) & x) == @as(c_int, 0)) {
    return ((x - @as(c_int, 1)) & x) == @as(c_int, 0);
}
pub inline fn MIN(a: anytype, b: anytype) @TypeOf(if (a < b) a else b) {
    return if (a < b) a else b;
}
pub inline fn MAX(a: anytype, b: anytype) @TypeOf(if (a > b) a else b) {
    return if (a > b) a else b;
}
pub const FSHIFT = @as(c_int, 11);
pub const FSCALE = @as(c_int, 1) << FSHIFT;
pub const AUDIT_RECORD_MAGIC = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x828a0f1b, .hexadecimal);
pub const MAX_AUDIT_RECORDS = @as(c_int, 20);
pub const MAXAUDITDATA = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x8000, .hexadecimal) - @as(c_int, 1);
pub const MAX_AUDIT_RECORD_SIZE = MAXAUDITDATA;
pub const MIN_AUDIT_FILE_SIZE = @as(c_int, 512) * @as(c_int, 1024);
pub const AUDIT_HARD_LIMIT_FREE_BLOCKS = @as(c_int, 4);
pub const AUDIT_TRIGGER_MIN = @as(c_int, 1);
pub const AUDIT_TRIGGER_LOW_SPACE = @as(c_int, 1);
pub const AUDIT_TRIGGER_ROTATE_KERNEL = @as(c_int, 2);
pub const AUDIT_TRIGGER_READ_FILE = @as(c_int, 3);
pub const AUDIT_TRIGGER_CLOSE_AND_DIE = @as(c_int, 4);
pub const AUDIT_TRIGGER_NO_SPACE = @as(c_int, 5);
pub const AUDIT_TRIGGER_ROTATE_USER = @as(c_int, 6);
pub const AUDIT_TRIGGER_INITIALIZE = @as(c_int, 7);
pub const AUDIT_TRIGGER_EXPIRE_TRAILS = @as(c_int, 8);
pub const AUDIT_TRIGGER_MAX = @as(c_int, 8);
pub const AUDITDEV_FILENAME = "audit";
pub const AUDIT_TRIGGER_FILE = "/dev/" ++ AUDITDEV_FILENAME;
pub const AU_DEFAUDITID = @import("std").zig.c_translation.cast(uid_t, -@as(c_int, 1));
pub const AU_DEFAUDITSID = @as(c_int, 0);
pub const AU_ASSIGN_ASID = -@as(c_int, 1);
pub const AT_IPC_MSG = @import("std").zig.c_translation.cast(u8, @as(c_int, 1));
pub const AT_IPC_SEM = @import("std").zig.c_translation.cast(u8, @as(c_int, 2));
pub const AT_IPC_SHM = @import("std").zig.c_translation.cast(u8, @as(c_int, 3));
pub const AUC_UNSET = @as(c_int, 0);
pub const AUC_AUDITING = @as(c_int, 1);
pub const AUC_NOAUDIT = @as(c_int, 2);
pub const AUC_DISABLED = -@as(c_int, 1);
pub const A_OLDGETPOLICY = @as(c_int, 2);
pub const A_OLDSETPOLICY = @as(c_int, 3);
pub const A_GETKMASK = @as(c_int, 4);
pub const A_SETKMASK = @as(c_int, 5);
pub const A_OLDGETQCTRL = @as(c_int, 6);
pub const A_OLDSETQCTRL = @as(c_int, 7);
pub const A_GETCWD = @as(c_int, 8);
pub const A_GETCAR = @as(c_int, 9);
pub const A_GETSTAT = @as(c_int, 12);
pub const A_SETSTAT = @as(c_int, 13);
pub const A_SETUMASK = @as(c_int, 14);
pub const A_SETSMASK = @as(c_int, 15);
pub const A_OLDGETCOND = @as(c_int, 20);
pub const A_OLDSETCOND = @as(c_int, 21);
pub const A_GETCLASS = @as(c_int, 22);
pub const A_SETCLASS = @as(c_int, 23);
pub const A_GETPINFO = @as(c_int, 24);
pub const A_SETPMASK = @as(c_int, 25);
pub const A_SETFSIZE = @as(c_int, 26);
pub const A_GETFSIZE = @as(c_int, 27);
pub const A_GETPINFO_ADDR = @as(c_int, 28);
pub const A_GETKAUDIT = @as(c_int, 29);
pub const A_SETKAUDIT = @as(c_int, 30);
pub const A_SENDTRIGGER = @as(c_int, 31);
pub const A_GETSINFO_ADDR = @as(c_int, 32);
pub const A_GETPOLICY = @as(c_int, 33);
pub const A_SETPOLICY = @as(c_int, 34);
pub const A_GETQCTRL = @as(c_int, 35);
pub const A_SETQCTRL = @as(c_int, 36);
pub const A_GETCOND = @as(c_int, 37);
pub const A_SETCOND = @as(c_int, 38);
pub const A_GETSFLAGS = @as(c_int, 39);
pub const A_SETSFLAGS = @as(c_int, 40);
pub const A_GETCTLMODE = @as(c_int, 41);
pub const A_SETCTLMODE = @as(c_int, 42);
pub const A_GETEXPAFTER = @as(c_int, 43);
pub const A_SETEXPAFTER = @as(c_int, 44);
pub const AUDIT_CNT = @as(c_int, 0x0001);
pub const AUDIT_AHLT = @as(c_int, 0x0002);
pub const AUDIT_ARGV = @as(c_int, 0x0004);
pub const AUDIT_ARGE = @as(c_int, 0x0008);
pub const AUDIT_SEQ = @as(c_int, 0x0010);
pub const AUDIT_WINDATA = @as(c_int, 0x0020);
pub const AUDIT_USER = @as(c_int, 0x0040);
pub const AUDIT_GROUP = @as(c_int, 0x0080);
pub const AUDIT_TRAIL = @as(c_int, 0x0100);
pub const AUDIT_PATH = @as(c_int, 0x0200);
pub const AUDIT_SCNT = @as(c_int, 0x0400);
pub const AUDIT_PUBLIC = @as(c_int, 0x0800);
pub const AUDIT_ZONENAME = @as(c_int, 0x1000);
pub const AUDIT_PERZONE = @as(c_int, 0x2000);
pub const AQ_HIWATER = @as(c_int, 100);
pub const AQ_MAXHIGH = @as(c_int, 10000);
pub const AQ_LOWATER = @as(c_int, 10);
pub const AQ_BUFSZ = MAXAUDITDATA;
pub const AQ_MAXBUFSZ = @import("std").zig.c_translation.promoteIntLiteral(c_int, 1048576, .decimal);
pub const AU_FS_MINFREE = @as(c_int, 20);
pub const AU_IPv4 = @as(c_int, 4);
pub const AU_IPv6 = @as(c_int, 16);
pub const AU_CLASS_MASK_RESERVED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x10000000, .hexadecimal);
pub const AUDIT_CTLMODE_NORMAL = @import("std").zig.c_translation.cast(u8, @as(c_int, 1));
pub const AUDIT_CTLMODE_EXTERNAL = @import("std").zig.c_translation.cast(u8, @as(c_int, 2));
pub const AUDIT_EXPIRE_OP_AND = @import("std").zig.c_translation.cast(u8, @as(c_int, 0));
pub const AUDIT_EXPIRE_OP_OR = @import("std").zig.c_translation.cast(u8, @as(c_int, 1));
pub const __XPC_INDIRECT__ = "";
pub const __XPC_BASE_H__ = "";
pub const __XPC_AVAILABILITY_H__ = "";
pub const IPHONE_SIMULATOR_HOST_MIN_VERSION_REQUIRED = @import("std").zig.c_translation.promoteIntLiteral(c_int, 999999, .decimal);
pub const XPC_DEBUGGER_EXCL = XPC_NOEXPORT ++ XPC_USED;
pub const XPC_TESTEXPORT = XPC_NOEXPORT;
pub const XPC_GIVES_REFERENCE = "";
pub const XPC_UNRETAINED = "";
pub inline fn XPC_BRIDGE(xo: anytype) @TypeOf(xo) {
    return xo;
}
pub inline fn XPC_BRIDGEREF_BEGIN(xo: anytype) @TypeOf(xo) {
    return xo;
}
pub inline fn XPC_BRIDGEREF_BEGIN_WITH_REF(xo: anytype) @TypeOf(xo) {
    return xo;
}
pub inline fn XPC_BRIDGEREF_MIDDLE(xo: anytype) @TypeOf(xo) {
    return xo;
}
pub inline fn XPC_BRIDGEREF_END(xo: anytype) @TypeOf(xo) {
    return xo;
}
pub inline fn _xpc_unreachable() @TypeOf(__builtin_unreachable()) {
    return __builtin_unreachable();
}
pub const XPC_TRANSACTION_DEPRECATED = "";
pub const XPC_API_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 20200610, .decimal);
pub inline fn XPC_GLOBAL_OBJECT(object: anytype) @TypeOf(&object) {
    return &object;
}
pub const XPC_RETURNS_RETAINED = "";
pub const XPC_TYPE_CONNECTION = &_xpc_type_connection;
pub const XPC_TYPE_ENDPOINT = &_xpc_type_endpoint;
pub const XPC_TYPE_NULL = &_xpc_type_null;
pub const XPC_TYPE_BOOL = &_xpc_type_bool;
pub const XPC_BOOL_TRUE = XPC_GLOBAL_OBJECT(_xpc_bool_true);
pub const XPC_BOOL_FALSE = XPC_GLOBAL_OBJECT(_xpc_bool_false);
pub const XPC_TYPE_INT64 = &_xpc_type_int64;
pub const XPC_TYPE_UINT64 = &_xpc_type_uint64;
pub const XPC_TYPE_DOUBLE = &_xpc_type_double;
pub const XPC_TYPE_DATE = &_xpc_type_date;
pub const XPC_TYPE_DATA = &_xpc_type_data;
pub const XPC_TYPE_STRING = &_xpc_type_string;
pub const XPC_TYPE_UUID = &_xpc_type_uuid;
pub const XPC_TYPE_FD = &_xpc_type_fd;
pub const XPC_TYPE_SHMEM = &_xpc_type_shmem;
pub const XPC_TYPE_ARRAY = &_xpc_type_array;
pub const XPC_TYPE_DICTIONARY = &_xpc_type_dictionary;
pub const XPC_TYPE_ERROR = &_xpc_type_error;
pub const XPC_ERROR_KEY_DESCRIPTION = _xpc_error_key_description;
pub const XPC_EVENT_KEY_NAME = _xpc_event_key_name;
pub const __XPC_ENDPOINT_H__ = "";
pub const __XPC_DEBUG_H__ = "";
pub const __XPC_CONNECTION_H__ = "";
pub const XPC_ERROR_CONNECTION_INTERRUPTED = XPC_GLOBAL_OBJECT(_xpc_error_connection_interrupted);
pub const XPC_ERROR_CONNECTION_INVALID = XPC_GLOBAL_OBJECT(_xpc_error_connection_invalid);
pub const XPC_ERROR_TERMINATION_IMMINENT = XPC_GLOBAL_OBJECT(_xpc_error_termination_imminent);
pub const XPC_ERROR_PEER_CODE_SIGNING_REQUIREMENT = XPC_GLOBAL_OBJECT(_xpc_error_peer_code_signing_requirement);
pub const XPC_CONNECTION_MACH_SERVICE_LISTENER = @as(c_int, 1) << @as(c_int, 0);
pub const XPC_CONNECTION_MACH_SERVICE_PRIVILEGED = @as(c_int, 1) << @as(c_int, 1);
pub const __XPC_ACTIVITY_H__ = "";
pub const XPC_TYPE_ACTIVITY = &_xpc_type_activity;
pub const __XPC_LAUNCH_H__ = "";
pub const _MACH_H_ = "";
pub const __MACH30__ = "";
pub const _MACH_INTERFACE_H_ = "";
pub const _clock_priv_user_ = "";
pub const _MACH_NDR_H_ = "";
pub const NDR_PROTOCOL_2_0 = @as(c_int, 0);
pub const NDR_INT_BIG_ENDIAN = @as(c_int, 0);
pub const NDR_INT_LITTLE_ENDIAN = @as(c_int, 1);
pub const NDR_FLOAT_IEEE = @as(c_int, 0);
pub const NDR_FLOAT_VAX = @as(c_int, 1);
pub const NDR_FLOAT_CRAY = @as(c_int, 2);
pub const NDR_FLOAT_IBM = @as(c_int, 3);
pub const NDR_CHAR_ASCII = @as(c_int, 0);
pub const NDR_CHAR_EBCDIC = @as(c_int, 1);
pub const __NDR_convert__ = @as(c_int, 0);
pub const __NDR_convert__int_rep__ = __NDR_convert__;
pub const __NDR_convert__char_rep__ = @as(c_int, 0);
pub const __NDR_convert__float_rep__ = @as(c_int, 0);
pub const _MACH_NOTIFY_H_ = "";
pub const MACH_NOTIFY_FIRST = @as(c_int, 0o100);
pub const MACH_NOTIFY_PORT_DELETED = MACH_NOTIFY_FIRST + @as(c_int, 0o01);
pub const MACH_NOTIFY_SEND_POSSIBLE = MACH_NOTIFY_FIRST + @as(c_int, 0o02);
pub const MACH_NOTIFY_PORT_DESTROYED = MACH_NOTIFY_FIRST + @as(c_int, 0o05);
pub const MACH_NOTIFY_NO_SENDERS = MACH_NOTIFY_FIRST + @as(c_int, 0o06);
pub const MACH_NOTIFY_SEND_ONCE = MACH_NOTIFY_FIRST + @as(c_int, 0o07);
pub const MACH_NOTIFY_DEAD_NAME = MACH_NOTIFY_FIRST + @as(c_int, 0o10);
pub const MACH_NOTIFY_LAST = MACH_NOTIFY_FIRST + @as(c_int, 0o15);
pub const _MACH_MIG_ERRORS_H_ = "";
pub const _MACH_MIG_H_ = "";
pub const __MigTypeCheck = @as(c_int, 1);
pub const __MigPackStructs = @as(c_int, 1);
pub const MIG_ROUTINE_ARG_DESCRIPTOR_NULL = @import("std").zig.c_translation.cast(mig_routine_arg_descriptor_t, @as(c_int, 0));
pub const MIG_ROUTINE_DESCRIPTOR_NULL = @import("std").zig.c_translation.cast(mig_routine_descriptor_t, @as(c_int, 0));
pub const MIG_SUBSYSTEM_NULL = @import("std").zig.c_translation.cast(mig_subsystem_t, @as(c_int, 0));
pub const MIG_TYPE_ERROR = -@as(c_int, 300);
pub const MIG_REPLY_MISMATCH = -@as(c_int, 301);
pub const MIG_REMOTE_ERROR = -@as(c_int, 302);
pub const MIG_BAD_ID = -@as(c_int, 303);
pub const MIG_BAD_ARGUMENTS = -@as(c_int, 304);
pub const MIG_NO_REPLY = -@as(c_int, 305);
pub const MIG_EXCEPTION = -@as(c_int, 306);
pub const MIG_ARRAY_TOO_LARGE = -@as(c_int, 307);
pub const MIG_SERVER_DIED = -@as(c_int, 308);
pub const MIG_TRAILER_ERROR = -@as(c_int, 309);
pub const __NDR_convert__mig_reply_error_t__defined = "";
pub const USING_MIG_STRNCPY_ZEROFILL = "";
pub const __MIG_STRNCPY_ZEROFILL_FORWARD_TYPE_DECLS__ = "";
pub const clock_priv_MSG_COUNT = @as(c_int, 2);
pub const __Request__clock_priv_subsystem__defined = "";
pub const __RequestUnion__clock_priv_subsystem__defined = "";
pub const __Reply__clock_priv_subsystem__defined = "";
pub const __ReplyUnion__clock_priv_subsystem__defined = "";
pub const _host_priv_user_ = "";
pub const host_priv_MSG_COUNT = @as(c_int, 26);
pub const _MACH_DEBUG_MACH_DEBUG_TYPES_H_ = "";
pub const _MACH_DEBUG_VM_INFO_H_ = "";
pub const _MACH_DEBUG_ZONE_INFO_H_ = "";
pub const ZONE_NAME_MAX_LEN = @as(c_int, 80);
pub const MACH_ZONE_NAME_MAX_LEN = @as(c_int, 80);
pub inline fn GET_MZI_COLLECTABLE_BYTES(val: anytype) @TypeOf(val >> @as(c_int, 1)) {
    return val >> @as(c_int, 1);
}
pub inline fn GET_MZI_COLLECTABLE_FLAG(val: anytype) @TypeOf(val & @as(c_int, 1)) {
    return val & @as(c_int, 1);
}
pub const MACH_MEMORY_INFO_NAME_MAX_LEN = @as(c_int, 80);
pub const MAX_ZTRACE_DEPTH = @as(c_int, 15);
pub const ZOP_ALLOC = @as(c_int, 1);
pub const ZOP_FREE = @as(c_int, 0);
pub const MACH_DEBUG_PAGE_INFO_H = "";
pub const _MACH_DEBUG_HASH_INFO_H_ = "";
pub const _MACH_DEBUG_LOCKGROUP_INFO_H_ = "";
pub const LOCKGROUP_MAX_NAME = @as(c_int, 64);
pub const LOCKGROUP_ATTR_STAT = @as(c_ulonglong, 0x01);
pub const MACH_CORE_FILEHEADER_SIGNATURE = @as(c_ulonglong, 0x0063614d20646152);
pub const MACH_CORE_FILEHEADER_V2_SIGNATURE = @as(c_ulonglong, 0x63614d2073736f42);
pub const MACH_CORE_FILEHEADER_MAXFILES = @as(c_int, 16);
pub const MACH_CORE_FILEHEADER_NAMELEN = @as(c_int, 16);
pub const MACH_CORE_FILEHEADER_V2_FLAG_LOG_ENCRYPTED_AEA = @as(c_ulonglong, 1) << @as(c_int, 0);
pub const MACH_CORE_FILEHEADER_V2_FLAG_EXISTING_COREFILE_KEY_FORMAT_NIST_P256 = @as(c_ulonglong, 1) << @as(c_int, 8);
pub const MACH_CORE_FILEHEADER_V2_FLAG_NEXT_COREFILE_KEY_FORMAT_NIST_P256 = @as(c_ulonglong, 1) << @as(c_int, 16);
pub const MACH_CORE_FILEHEADER_V2_FLAGS_EXISTING_COREFILE_KEY_FORMAT_MASK = @as(c_ulonglong, 0x1) << @as(c_int, 8);
pub const MACH_CORE_FILEHEADER_V2_FLAGS_NEXT_COREFILE_KEY_FORMAT_MASK = @as(c_ulonglong, 0x1) << @as(c_int, 16);
pub inline fn MACH_CORE_FILEHEADER_V2_FLAGS_NEXT_KEY_FORMAT_TO_KEY_FORMAT(x: anytype) @TypeOf((x >> @as(c_int, 8)) & MACH_CORE_FILEHEADER_V2_FLAGS_EXISTING_COREFILE_KEY_FORMAT_MASK) {
    return (x >> @as(c_int, 8)) & MACH_CORE_FILEHEADER_V2_FLAGS_EXISTING_COREFILE_KEY_FORMAT_MASK;
}
pub const MACH_CORE_DETAILS_V2_FLAG_ENCRYPTED_AEA = @as(c_ulonglong, 1) << @as(c_int, 0);
pub const MACH_CORE_DETAILS_V2_FLAG_COMPRESSED_ZLIB = @as(c_ulonglong, 1) << @as(c_int, 8);
pub const KOBJECT_DESCRIPTION_LENGTH = @as(c_int, 512);
pub const __Request__host_priv_subsystem__defined = "";
pub const __RequestUnion__host_priv_subsystem__defined = "";
pub const __Reply__host_priv_subsystem__defined = "";
pub const __ReplyUnion__host_priv_subsystem__defined = "";
pub const _host_security_user_ = "";
pub const host_security_MSG_COUNT = @as(c_int, 2);
pub const __Request__host_security_subsystem__defined = "";
pub const __RequestUnion__host_security_subsystem__defined = "";
pub const __Reply__host_security_subsystem__defined = "";
pub const __ReplyUnion__host_security_subsystem__defined = "";
pub const _lock_set_user_ = "";
pub const lock_set_MSG_COUNT = @as(c_int, 6);
pub const __Request__lock_set_subsystem__defined = "";
pub const __RequestUnion__lock_set_subsystem__defined = "";
pub const __Reply__lock_set_subsystem__defined = "";
pub const __ReplyUnion__lock_set_subsystem__defined = "";
pub const _processor_user_ = "";
pub const processor_MSG_COUNT = @as(c_int, 6);
pub const __Request__processor_subsystem__defined = "";
pub const __RequestUnion__processor_subsystem__defined = "";
pub const __Reply__processor_subsystem__defined = "";
pub const __ReplyUnion__processor_subsystem__defined = "";
pub const _processor_set_user_ = "";
pub const processor_set_MSG_COUNT = @as(c_int, 11);
pub const __Request__processor_set_subsystem__defined = "";
pub const __RequestUnion__processor_set_subsystem__defined = "";
pub const __Reply__processor_set_subsystem__defined = "";
pub const __ReplyUnion__processor_set_subsystem__defined = "";
pub const _MACH_SEMAPHORE_H_ = "";
pub const _MACH_SYNC_POLICY_H_ = "";
pub const SYNC_POLICY_FIFO = @as(c_int, 0x0);
pub const SYNC_POLICY_FIXED_PRIORITY = @as(c_int, 0x1);
pub const SYNC_POLICY_REVERSED = @as(c_int, 0x2);
pub const SYNC_POLICY_ORDER_MASK = @as(c_int, 0x3);
pub const SYNC_POLICY_LIFO = SYNC_POLICY_FIFO | SYNC_POLICY_REVERSED;
pub const _task_user_ = "";
pub const task_MSG_COUNT = @as(c_int, 63);
pub const __Request__task_subsystem__defined = "";
pub const __RequestUnion__task_subsystem__defined = "";
pub const __Reply__task_subsystem__defined = "";
pub const __ReplyUnion__task_subsystem__defined = "";
pub const _thread_act_user_ = "";
pub const thread_act_MSG_COUNT = @as(c_int, 31);
pub const __Request__thread_act_subsystem__defined = "";
pub const __RequestUnion__thread_act_subsystem__defined = "";
pub const __Reply__thread_act_subsystem__defined = "";
pub const __ReplyUnion__thread_act_subsystem__defined = "";
pub const _vm_map_user_ = "";
pub const vm_map_MSG_COUNT = @as(c_int, 33);
pub const __Request__vm_map_subsystem__defined = "";
pub const __RequestUnion__vm_map_subsystem__defined = "";
pub const __Reply__vm_map_subsystem__defined = "";
pub const __ReplyUnion__vm_map_subsystem__defined = "";
pub const _mach_port_user_ = "";
pub const mach_port_MSG_COUNT = @as(c_int, 43);
pub const __Request__mach_port_subsystem__defined = "";
pub const __RequestUnion__mach_port_subsystem__defined = "";
pub const __Reply__mach_port_subsystem__defined = "";
pub const __ReplyUnion__mach_port_subsystem__defined = "";
pub const _mach_host_user_ = "";
pub const mach_host_MSG_COUNT = @as(c_int, 35);
pub const __Request__mach_host_subsystem__defined = "";
pub const __RequestUnion__mach_host_subsystem__defined = "";
pub const __Reply__mach_host_subsystem__defined = "";
pub const __ReplyUnion__mach_host_subsystem__defined = "";
pub const _MACH_THREAD_SWITCH_H_ = "";
pub const SWITCH_OPTION_NONE = @as(c_int, 0);
pub const SWITCH_OPTION_DEPRESS = @as(c_int, 1);
pub const SWITCH_OPTION_WAIT = @as(c_int, 2);
pub inline fn valid_switch_option(opt: anytype) @TypeOf((@as(c_int, 0) <= opt) and (opt <= @as(c_int, 5))) {
    return (@as(c_int, 0) <= opt) and (opt <= @as(c_int, 5));
}
pub const _MACH_RPC_H_ = "";
pub const _MACH_MACHINE_RPC_H_ = "";
pub const _MACH_ARM_RPC_H_ = "";
pub inline fn RPC_DESCR_SIZE(x: anytype) @TypeOf(x.*.descr_count * @import("std").zig.c_translation.sizeof(struct_rpc_routine_arg_descriptor)) {
    return x.*.descr_count * @import("std").zig.c_translation.sizeof(struct_rpc_routine_arg_descriptor);
}
pub const RPC_SIGBUF_SIZE = @as(c_int, 8);
pub const RPC_SUBSYSTEM_NULL = @import("std").zig.c_translation.cast(rpc_subsystem_t, @as(c_int, 0));
pub const _MACH_ERROR_ = @as(c_int, 1);
pub const VOUCHER_MACH_MSG_API_VERSION = @import("std").zig.c_translation.promoteIntLiteral(c_int, 20140205, .decimal);
pub const VOUCHER_MACH_MSG_STATE_UNCHANGED = @import("std").zig.c_translation.cast(voucher_mach_msg_state_t, ~@as(c_ulong, 0));
pub const LAUNCH_KEY_SUBMITJOB = "SubmitJob";
pub const LAUNCH_KEY_REMOVEJOB = "RemoveJob";
pub const LAUNCH_KEY_STARTJOB = "StartJob";
pub const LAUNCH_KEY_STOPJOB = "StopJob";
pub const LAUNCH_KEY_GETJOB = "GetJob";
pub const LAUNCH_KEY_GETJOBS = "GetJobs";
pub const LAUNCH_KEY_CHECKIN = "CheckIn";
pub const LAUNCH_JOBKEY_LABEL = "Label";
pub const LAUNCH_JOBKEY_DISABLED = "Disabled";
pub const LAUNCH_JOBKEY_USERNAME = "UserName";
pub const LAUNCH_JOBKEY_GROUPNAME = "GroupName";
pub const LAUNCH_JOBKEY_TIMEOUT = "TimeOut";
pub const LAUNCH_JOBKEY_EXITTIMEOUT = "ExitTimeOut";
pub const LAUNCH_JOBKEY_INITGROUPS = "InitGroups";
pub const LAUNCH_JOBKEY_SOCKETS = "Sockets";
pub const LAUNCH_JOBKEY_MACHSERVICES = "MachServices";
pub const LAUNCH_JOBKEY_MACHSERVICELOOKUPPOLICIES = "MachServiceLookupPolicies";
pub const LAUNCH_JOBKEY_INETDCOMPATIBILITY = "inetdCompatibility";
pub const LAUNCH_JOBKEY_ENABLEGLOBBING = "EnableGlobbing";
pub const LAUNCH_JOBKEY_PROGRAMARGUMENTS = "ProgramArguments";
pub const LAUNCH_JOBKEY_PROGRAM = "Program";
pub const LAUNCH_JOBKEY_ONDEMAND = "OnDemand";
pub const LAUNCH_JOBKEY_KEEPALIVE = "KeepAlive";
pub const LAUNCH_JOBKEY_LIMITLOADTOHOSTS = "LimitLoadToHosts";
pub const LAUNCH_JOBKEY_LIMITLOADFROMHOSTS = "LimitLoadFromHosts";
pub const LAUNCH_JOBKEY_LIMITLOADTOSESSIONTYPE = "LimitLoadToSessionType";
pub const LAUNCH_JOBKEY_LIMITLOADTOHARDWARE = "LimitLoadToHardware";
pub const LAUNCH_JOBKEY_LIMITLOADFROMHARDWARE = "LimitLoadFromHardware";
pub const LAUNCH_JOBKEY_RUNATLOAD = "RunAtLoad";
pub const LAUNCH_JOBKEY_ROOTDIRECTORY = "RootDirectory";
pub const LAUNCH_JOBKEY_WORKINGDIRECTORY = "WorkingDirectory";
pub const LAUNCH_JOBKEY_ENVIRONMENTVARIABLES = "EnvironmentVariables";
pub const LAUNCH_JOBKEY_USERENVIRONMENTVARIABLES = "UserEnvironmentVariables";
pub const LAUNCH_JOBKEY_UMASK = "Umask";
pub const LAUNCH_JOBKEY_NICE = "Nice";
pub const LAUNCH_JOBKEY_HOPEFULLYEXITSFIRST = "HopefullyExitsFirst";
pub const LAUNCH_JOBKEY_HOPEFULLYEXITSLAST = "HopefullyExitsLast";
pub const LAUNCH_JOBKEY_LOWPRIORITYIO = "LowPriorityIO";
pub const LAUNCH_JOBKEY_LOWPRIORITYBACKGROUNDIO = "LowPriorityBackgroundIO";
pub const LAUNCH_JOBKEY_MATERIALIZEDATALESSFILES = "MaterializeDatalessFiles";
pub const LAUNCH_JOBKEY_SESSIONCREATE = "SessionCreate";
pub const LAUNCH_JOBKEY_STARTONMOUNT = "StartOnMount";
pub const LAUNCH_JOBKEY_SOFTRESOURCELIMITS = "SoftResourceLimits";
pub const LAUNCH_JOBKEY_HARDRESOURCELIMITS = "HardResourceLimits";
pub const LAUNCH_JOBKEY_STANDARDINPATH = "StandardInPath";
pub const LAUNCH_JOBKEY_STANDARDOUTPATH = "StandardOutPath";
pub const LAUNCH_JOBKEY_STANDARDERRORPATH = "StandardErrorPath";
pub const LAUNCH_JOBKEY_DEBUG = "Debug";
pub const LAUNCH_JOBKEY_WAITFORDEBUGGER = "WaitForDebugger";
pub const LAUNCH_JOBKEY_QUEUEDIRECTORIES = "QueueDirectories";
pub const LAUNCH_JOBKEY_HOMERELATIVEQUEUEDIRECTORIES = "HomeRelativeQueueDirectories";
pub const LAUNCH_JOBKEY_WATCHPATHS = "WatchPaths";
pub const LAUNCH_JOBKEY_STARTINTERVAL = "StartInterval";
pub const LAUNCH_JOBKEY_STARTCALENDARINTERVAL = "StartCalendarInterval";
pub const LAUNCH_JOBKEY_BONJOURFDS = "BonjourFDs";
pub const LAUNCH_JOBKEY_LASTEXITSTATUS = "LastExitStatus";
pub const LAUNCH_JOBKEY_PID = "PID";
pub const LAUNCH_JOBKEY_THROTTLEINTERVAL = "ThrottleInterval";
pub const LAUNCH_JOBKEY_LAUNCHONLYONCE = "LaunchOnlyOnce";
pub const LAUNCH_JOBKEY_ABANDONPROCESSGROUP = "AbandonProcessGroup";
pub const LAUNCH_JOBKEY_IGNOREPROCESSGROUPATSHUTDOWN = "IgnoreProcessGroupAtShutdown";
pub const LAUNCH_JOBKEY_LEGACYTIMERS = "LegacyTimers";
pub const LAUNCH_JOBKEY_ENABLEPRESSUREDEXIT = "EnablePressuredExit";
pub const LAUNCH_JOBKEY_ENABLETRANSACTIONS = "EnableTransactions";
pub const LAUNCH_JOBKEY_DRAINMESSAGESONFAILEDINIT = "DrainMessagesOnFailedInit";
pub const LAUNCH_JOBKEY_POLICIES = "Policies";
pub const LAUNCH_JOBKEY_PUBLISHESEVENTS = "PublishesEvents";
pub const LAUNCH_KEY_PUBLISHESEVENTS_DOMAININTERNAL = "DomainInternal";
pub const LAUNCH_JOBPOLICY_DENYCREATINGOTHERJOBS = "DenyCreatingOtherJobs";
pub const LAUNCH_JOBINETDCOMPATIBILITY_WAIT = "Wait";
pub const LAUNCH_JOBINETDCOMPATIBILITY_INSTANCES = "Instances";
pub const LAUNCH_JOBKEY_MACH_RESETATCLOSE = "ResetAtClose";
pub const LAUNCH_JOBKEY_MACH_HIDEUNTILCHECKIN = "HideUntilCheckIn";
pub const LAUNCH_JOBKEY_KEEPALIVE_SUCCESSFULEXIT = "SuccessfulExit";
pub const LAUNCH_JOBKEY_KEEPALIVE_NETWORKSTATE = "NetworkState";
pub const LAUNCH_JOBKEY_KEEPALIVE_PATHSTATE = "PathState";
pub const LAUNCH_JOBKEY_KEEPALIVE_HOMERELATIVEPATHSTATE = "HomeRelativePathState";
pub const LAUNCH_JOBKEY_KEEPALIVE_OTHERJOBACTIVE = "OtherJobActive";
pub const LAUNCH_JOBKEY_KEEPALIVE_OTHERJOBENABLED = "OtherJobEnabled";
pub const LAUNCH_JOBKEY_KEEPALIVE_AFTERINITIALDEMAND = "AfterInitialDemand";
pub const LAUNCH_JOBKEY_KEEPALIVE_CRASHED = "Crashed";
pub const LAUNCH_JOBKEY_LAUNCHEVENTS = "LaunchEvents";
pub const LAUNCH_JOBKEY_CAL_MINUTE = "Minute";
pub const LAUNCH_JOBKEY_CAL_HOUR = "Hour";
pub const LAUNCH_JOBKEY_CAL_DAY = "Day";
pub const LAUNCH_JOBKEY_CAL_WEEKDAY = "Weekday";
pub const LAUNCH_JOBKEY_CAL_MONTH = "Month";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_CORE = "Core";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_CPU = "CPU";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_DATA = "Data";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_FSIZE = "FileSize";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_MEMLOCK = "MemoryLock";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_NOFILE = "NumberOfFiles";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_NPROC = "NumberOfProcesses";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_RSS = "ResidentSetSize";
pub const LAUNCH_JOBKEY_RESOURCELIMIT_STACK = "Stack";
pub const LAUNCH_JOBKEY_DISABLED_MACHINETYPE = "MachineType";
pub const LAUNCH_JOBKEY_DISABLED_MODELNAME = "ModelName";
pub const LAUNCH_JOBKEY_DATASTORES = "Datastores";
pub const LAUNCH_JOBKEY_DATASTORES_SIZELIMIT = "SizeLimit";
pub const LAUNCH_JOBSOCKETKEY_TYPE = "SockType";
pub const LAUNCH_JOBSOCKETKEY_PASSIVE = "SockPassive";
pub const LAUNCH_JOBSOCKETKEY_BONJOUR = "Bonjour";
pub const LAUNCH_JOBSOCKETKEY_SECUREWITHKEY = "SecureSocketWithKey";
pub const LAUNCH_JOBSOCKETKEY_PATHNAME = "SockPathName";
pub const LAUNCH_JOBSOCKETKEY_PATHMODE = "SockPathMode";
pub const LAUNCH_JOBSOCKETKEY_PATHOWNER = "SockPathOwner";
pub const LAUNCH_JOBSOCKETKEY_PATHGROUP = "SockPathGroup";
pub const LAUNCH_JOBSOCKETKEY_NODENAME = "SockNodeName";
pub const LAUNCH_JOBSOCKETKEY_SERVICENAME = "SockServiceName";
pub const LAUNCH_JOBSOCKETKEY_FAMILY = "SockFamily";
pub const LAUNCH_JOBSOCKETKEY_PROTOCOL = "SockProtocol";
pub const LAUNCH_JOBSOCKETKEY_MULTICASTGROUP = "MulticastGroup";
pub const LAUNCH_JOBKEY_PROCESSTYPE = "ProcessType";
pub const LAUNCH_KEY_PROCESSTYPE_APP = "App";
pub const LAUNCH_KEY_PROCESSTYPE_STANDARD = "Standard";
pub const LAUNCH_KEY_PROCESSTYPE_BACKGROUND = "Background";
pub const LAUNCH_KEY_PROCESSTYPE_INTERACTIVE = "Interactive";
pub const LAUNCH_KEY_PROCESSTYPE_ADAPTIVE = "Adaptive";
pub const XPC_ARRAY_APPEND = @import("std").zig.c_translation.cast(usize, -@as(c_int, 1));
pub const _H_SECCODEHOST = "";
pub const _H_SECREQUIREMENT = "";
pub const _SECURITY_SECTASK_H_ = "";
pub const _SECURITY_AUTHORIZATIONTAGS_H_ = "";
pub const kAuthorizationEnvironmentUsername = "username";
pub const kAuthorizationEnvironmentPassword = "password";
pub const kAuthorizationEnvironmentShared = "shared";
pub const kAuthorizationRightExecute = "system.privilege.admin";
pub const kAuthorizationEnvironmentPrompt = "prompt";
pub const kAuthorizationEnvironmentIcon = "icon";
pub const kAuthorizationPamResult = "pam_result";
pub const kAuthorizationFlags = "flags";
pub const _SECURITY_AUTHORIZATIONDB_H_ = "";
pub const kAuthorizationRightRule = "rule";
pub const kAuthorizationRuleIsAdmin = "is-admin";
pub const kAuthorizationRuleAuthenticateAsSessionUser = "authenticate-session-owner";
pub const kAuthorizationRuleAuthenticateAsAdmin = "authenticate-admin";
pub const kAuthorizationRuleClassAllow = "allow";
pub const kAuthorizationRuleClassDeny = "deny";
pub const kAuthorizationComment = "comment";
pub const _CMS_DECODER_H_ = "";
pub const _CMS_ENCODER_H_ = "";
pub const _SECURITY_SECURETRANSPORT_H_ = "";
pub const errSSLServerAuthCompleted = errSSLPeerAuthCompleted;
pub const errSSLClientAuthCompleted = errSSLPeerAuthCompleted;
pub const errSSLLast = errSSLUnexpectedRecord;
pub const _SEC_TRANSFORM_H__ = "";
pub const _SEC_CUSTOM_TRANSFORM_H__ = "";
pub const __SECDECODETRANSFORM_H__ = "";
pub const __SECENCODETRANSFORM_H__ = "";
pub const __TRANSFORM_DIGEST__ = "";
pub const __SEC_ENCRYPT_TRANSFORM__ = @as(c_int, 1);
pub const __TRANSFORM_SIGN_VERIFY__ = "";
pub const _SEC_TRANSFORM_READ_TRANSFORM_H = "";
pub const _DER_ITEM_H_ = "";
pub const _LIB_DER_CONFIG_H_ = "";
pub inline fn DERMemset(ptr: anytype, c: anytype, len: anytype) @TypeOf(memset(ptr, c, len)) {
    return memset(ptr, c, len);
}
pub inline fn DERMemmove(dst: anytype, src: anytype, len: anytype) @TypeOf(memmove(dst, src, len)) {
    return memmove(dst, src, len);
}
pub inline fn DERMemcmp(b1: anytype, b2: anytype, len: anytype) @TypeOf(memcmp(b1, b2, len)) {
    return memcmp(b1, b2, len);
}
pub const DER_ENCODE_ENABLE = @as(c_int, 1);
pub const DER_DECODE_ENABLE = @as(c_int, 1);
pub const DER_MULTIBYTE_TAGS = @as(c_int, 1);
pub const DER_TAG_SIZE = @as(c_int, 8);
pub const DER_bidi_indexable = "";
pub const DER_indexable = "";
pub const DER_single = "";
pub const DER_unsafe_indexable = "";
pub inline fn DER_unsafe_forge_bidi_indexable(P: anytype, S: anytype) @TypeOf(P) {
    _ = S;
    return P;
}
pub const _SECURITY_OIDS_H_ = "";
pub const __CSIDENTITYQUERY__ = "";
pub const __ICONSTORAGE__ = "";
pub const __POWER__ = "";
pub const __SECURITYCORE__ = "";
pub const __KEYCHAINCORE__ = "";
pub inline fn KeychainManagerAvailable() @TypeOf(@"true") {
    return @"true";
}
pub const __WSMETHODINVOCATION__ = "";
pub const __WSTYPES__ = "";
pub const __WSPROTOCOLHANDLER__ = "";
pub const kWSMethodName = CFSTR("/WSMethodName");
pub const kWSMethodParameters = CFSTR("/WSMethodParameters");
pub const kWSMethodParameterOrder = CFSTR("/WSMethodParameterOrder");
pub const __LSINFO__ = "";
pub const __LSINFODEPRECATED__ = "";
pub const kLSInvalidExtensionIndex = ULONG_MAX;
pub const __LSOPEN__ = "";
pub const __LSOPENDEPRECATED__ = "";
pub const __LSQUARANTINE__ = "";
pub const __UTCORETYPES__ = "";
pub const __UTTYPE__ = "";
pub const __METADATA_METADATA__ = @as(c_int, 1);
pub const __MDITEM__ = @as(c_int, 1);
pub const MD_BEGIN_C_DECLS = "";
pub const MD_END_C_DECLS = "";
pub const __MDLABEL__ = @as(c_int, 1);
pub const __MDQUERY__ = @as(c_int, 1);
pub const __MDSCHEMA__ = @as(c_int, 1);
pub const __MDIMPORTER__ = @as(c_int, 1);
pub const kMDImporterTypeID = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorDefault, @as(c_int, 0x8B), @as(c_int, 0x08), @as(c_int, 0xC4), @as(c_int, 0xBF), @as(c_int, 0x41), @as(c_int, 0x5B), @as(c_int, 0x11), @as(c_int, 0xD8), @as(c_int, 0xB3), @as(c_int, 0xF9), @as(c_int, 0x00), @as(c_int, 0x03), @as(c_int, 0x93), @as(c_int, 0x67), @as(c_int, 0x26), @as(c_int, 0xFC));
pub const kMDImporterInterfaceID = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorDefault, @as(c_int, 0x6E), @as(c_int, 0xBC), @as(c_int, 0x27), @as(c_int, 0xC4), @as(c_int, 0x89), @as(c_int, 0x9C), @as(c_int, 0x11), @as(c_int, 0xD8), @as(c_int, 0x84), @as(c_int, 0xAE), @as(c_int, 0x00), @as(c_int, 0x03), @as(c_int, 0x93), @as(c_int, 0x67), @as(c_int, 0x26), @as(c_int, 0xFC));
pub const kMDExporterInterfaceID = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorDefault, @as(c_int, 0xB4), @as(c_int, 0x1C), @as(c_int, 0x60), @as(c_int, 0x74), @as(c_int, 0x7D), @as(c_int, 0xFB), @as(c_int, 0x40), @as(c_int, 0x57), @as(c_int, 0x96), @as(c_int, 0x9D), @as(c_int, 0x31), @as(c_int, 0xC8), @as(c_int, 0xE8), @as(c_int, 0x61), @as(c_int, 0xA8), @as(c_int, 0xD4));
pub const kMDImporterURLInterfaceID = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorDefault, @as(c_int, 0x13), @as(c_int, 0xF6), @as(c_int, 0x0F), @as(c_int, 0x02), @as(c_int, 0x36), @as(c_int, 0x22), @as(c_int, 0x4F), @as(c_int, 0x35), @as(c_int, 0x98), @as(c_int, 0x91), @as(c_int, 0xEC), @as(c_int, 0x10), @as(c_int, 0xE6), @as(c_int, 0xCD), @as(c_int, 0x08), @as(c_int, 0xF8));
pub const kMDImporterBundleWrapperURLInterfaceID = CFUUIDGetConstantUUIDWithBytes(kCFAllocatorDefault, @as(c_int, 0xCF), @as(c_int, 0x76), @as(c_int, 0x37), @as(c_int, 0x4B), @as(c_int, 0x0C), @as(c_int, 0x83), @as(c_int, 0x47), @as(c_int, 0xC5), @as(c_int, 0xAB), @as(c_int, 0x2F), @as(c_int, 0x7B), @as(c_int, 0x95), @as(c_int, 0x08), @as(c_int, 0x84), @as(c_int, 0x67), @as(c_int, 0x0A));
pub const __SEARCHKIT__ = "";
pub const __SKDOCUMENT__ = "";
pub const __SKANALYSIS__ = "";
pub const __SKINDEX__ = "";
pub const __SKSEARCH__ = "";
pub const __SKSUMMARY__ = "";
pub const __FSEVENTS__ = "";
pub const kFSEventStreamEventExtendedDataPathKey = CFSTR("path");
pub const kFSEventStreamEventExtendedFileIDKey = CFSTR("fileID");
pub const __SHAREDFILELIST__ = "";
pub const __LSSHAREDFILELIST__ = "";
pub const __ATS__ = "";
pub const __ATSDEFINES__ = "";
pub const ATS_LEGACY_API = @as(c_int, 1);
pub const __ATSLAYOUTTYPES__ = "";
pub const __SFNTLAYOUTTYPES__ = "";
pub const __ATSTYPES__ = "";
pub const CGGEOMETRY_H_ = "";
pub const CGBASE_H_ = "";
pub const CG_EXTERN_64 = CG_EXTERN;
pub const CG_SKYLIGHT_EXTERN_64 = CG_EXTERN;
pub const CG_LOCAL_64 = CG_LOCAL;
pub inline fn CG_OSX_VERSION(v: anytype) @TypeOf((v > @as(c_int, 0)) and (__MAC_OS_X_VERSION_MAX_ALLOWED >= v)) {
    return (v > @as(c_int, 0)) and (__MAC_OS_X_VERSION_MAX_ALLOWED >= v);
}
pub inline fn CG_IOS_VERSION(v: anytype) @TypeOf(@as(c_int, 0)) {
    _ = v;
    return @as(c_int, 0);
}
pub inline fn CG_TV_VERSION(v: anytype) @TypeOf(@as(c_int, 0)) {
    _ = v;
    return @as(c_int, 0);
}
pub inline fn CG_WATCH_VERSION(v: anytype) @TypeOf(@as(c_int, 0)) {
    _ = v;
    return @as(c_int, 0);
}
pub inline fn CG_BRIDGE_VERSION(v: anytype) @TypeOf(@as(c_int, 0)) {
    _ = v;
    return @as(c_int, 0);
}
pub const CG_OS_VERSION_2020 = ((((CG_OSX_VERSION(__MAC_10_16) != 0) or (CG_IOS_VERSION(__IPHONE_14_0) != 0)) or (CG_TV_VERSION(__TVOS_14_0) != 0)) or (CG_WATCH_VERSION(__WATCHOS_7_0) != 0)) or (CG_BRIDGE_VERSION(@import("std").zig.c_translation.promoteIntLiteral(c_int, 50000, .decimal)) != 0);
pub const CGFLOAT_TYPE = f64;
pub const CGFLOAT_IS_DOUBLE = @as(c_int, 1);
pub const CGFLOAT_MIN = DBL_MIN;
pub const CGFLOAT_MAX = DBL_MAX;
pub const CGFLOAT_EPSILON = DBL_EPSILON;
pub const CGFLOAT_DEFINED = @as(c_int, 1);
pub const CG_OBSOLETE = __CG_DEPRECATED;
pub const CG_PRIVATE_EXTERN = CG_LOCAL;
pub const cg_nullable = __nullable;
pub const CG_NONNULL_ARRAY = __nonnull;
pub const CG_NULLABLE_ARRAY = __nullable;
pub const CGVECTOR_DEFINED = @as(c_int, 1);
pub inline fn NewFMFontFamilyCallbackFilterUPP(userRoutine: anytype) FMFontFamilyCallbackFilterUPP {
    return @import("std").zig.c_translation.cast(FMFontFamilyCallbackFilterUPP, userRoutine);
}
pub inline fn NewFMFontCallbackFilterUPP(userRoutine: anytype) FMFontCallbackFilterUPP {
    return @import("std").zig.c_translation.cast(FMFontCallbackFilterUPP, userRoutine);
}
pub inline fn InvokeFMFontFamilyCallbackFilterUPP(iFontFamily: anytype, iRefCon: anytype, userUPP: anytype) @TypeOf(userUPP.*(iFontFamily, iRefCon)) {
    return userUPP.*(iFontFamily, iRefCon);
}
pub inline fn InvokeFMFontCallbackFilterUPP(iFont: anytype, iRefCon: anytype, userUPP: anytype) @TypeOf(userUPP.*(iFont, iRefCon)) {
    return userUPP.*(iFont, iRefCon);
}
pub const ATSFONTREF_DEFINED = @as(c_int, 1);
pub inline fn NewATSUDirectLayoutOperationOverrideUPP(userRoutine: anytype) ATSUDirectLayoutOperationOverrideUPP {
    return @import("std").zig.c_translation.cast(ATSUDirectLayoutOperationOverrideUPP, userRoutine);
}
pub inline fn InvokeATSUDirectLayoutOperationOverrideUPP(iCurrentOperation: anytype, iLineRef: anytype, iRefCon: anytype, iOperationCallbackParameterPtr: anytype, oCallbackStatus: anytype, userUPP: anytype) @TypeOf(userUPP.*(iCurrentOperation, iLineRef, iRefCon, iOperationCallbackParameterPtr, oCallbackStatus)) {
    return userUPP.*(iCurrentOperation, iLineRef, iRefCon, iOperationCallbackParameterPtr, oCallbackStatus);
}
pub const __ATSFONT__ = "";
pub const __ATS_SFNTTYPES__ = "";
pub const __SFNTTYPES__ = "";
pub const kATSQueryClientPID = CFSTR("ATS client pid");
pub const kATSQueryQDFamilyName = CFSTR("font family name");
pub const kATSQueryFontName = CFSTR("font name");
pub const kATSQueryFontPostScriptName = CFSTR("font PS name");
pub const kATSQueryFontNameTableEntries = CFSTR("font name table entries");
pub const kATSFontNameTableCode = CFSTR("font name code");
pub const kATSFontNameTablePlatform = CFSTR("font platform code");
pub const kATSFontNameTableScript = CFSTR("font script code");
pub const kATSFontNameTableLanguage = CFSTR("font language code");
pub const kATSFontNameTableBytes = CFSTR("font name table bytes");
pub const __COLORSYNC_MAIN_HEADER__ = "";
pub const __COLORSYNCBASE__ = "";
pub const CSEXTERN_DESKTOP = CSEXTERN;
pub const CS_UNAVAILABLE_PUBLIC_EMBEDDED = CS_UNAVAILABLE_EMBEDDED;
pub const __COLORSYNCPROFILE__ = "";
pub const COLORSYNC_PROFILE_INSTALL_ENTITLEMENT = "com.apple.developer.ColorSync.profile.install";
pub const COLORSYNC_MD5_LENGTH = @as(c_int, 16);
pub const COLORSYNC_ITERATE_ASYNC = "";
pub const __COLORSYNCTRANSFORM__ = "";
pub const __COLORSYNCCMM__ = "";
pub const __COLORSYNCDEVICE__ = "";
pub const COREGRAPHICS_H_ = "";
pub const CGAFFINETRANSFORM_H_ = "";
pub const CGBITMAPCONTEXT_H_ = "";
pub const CGCONTEXT_H_ = "";
pub const CGCOLOR_H_ = "";
pub const CGCOLORSPACE_H_ = "";
pub const CGDATAPROVIDER_H_ = "";
pub const CG_HDR_BT_2100 = @as(c_int, 1);
pub const CGPATTERN_H_ = "";
pub const CGFONT_H_ = "";
pub const CGGRADIENT_H_ = "";
pub const CGIMAGE_H_ = "";
pub const kCGBitmapByteOrder16Host = kCGBitmapByteOrder16Little;
pub const kCGBitmapByteOrder32Host = kCGBitmapByteOrder32Little;
pub const CGPATH_H_ = "";
pub const CGPDFDOCUMENT_H_ = "";
pub const CGPDFPAGE_H_ = "";
pub const CGPDFDICTIONARY_H_ = "";
pub const CGPDFARRAY_H_ = "";
pub const CGPDFOBJECT_H_ = "";
pub const CGPDFSTREAM_H_ = "";
pub const CGPDFSTRING_H_ = "";
pub const CGSHADING_H_ = "";
pub const CGFUNCTION_H_ = "";
pub const CGCOLORCONVERSIONINFO_H_ = "";
pub const CGCONVERTCOLORDATAWITHFORMAT_H = "";
pub const CGDATACONSUMER_H_ = "";
pub const CGERROR_H_ = "";
pub const CGLAYER_H_ = "";
pub const CGPDFCONTENTSTREAM_H_ = "";
pub const CGPDFCONTEXT_H_ = "";
pub const CGPDFOPERATORTABLE_H_ = "";
pub const CGPDFSCANNER_H_ = "";
pub const CGDIRECTDISPLAY_H_ = "";
pub const CGWINDOW_H_ = "";
pub const kCGNullWindowID = @import("std").zig.c_translation.cast(CGWindowID, @as(c_int, 0));
pub const kCGWindowIDCFNumberType = kCFNumberSInt32Type;
pub const kCGWindowSharingCFNumberType = kCFNumberSInt32Type;
pub const kCGWindowBackingCFNumberType = kCFNumberSInt32Type;
pub const CGWINDOWLEVEL_H_ = "";
pub const kCGNumReservedWindowLevels = @as(c_int, 16);
pub const kCGNumReservedBaseWindowLevels = @as(c_int, 5);
pub const kCGBaseWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, INT32_MIN);
pub const kCGMinimumWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, kCGBaseWindowLevel + kCGNumReservedBaseWindowLevels);
pub const kCGMaximumWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, INT32_MAX - kCGNumReservedWindowLevels);
pub const kCGDesktopWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, kCGMinimumWindowLevel + @as(c_int, 20));
pub const kCGDesktopIconWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, kCGDesktopWindowLevel + @as(c_int, 20));
pub const kCGBackstopMenuLevel = @import("std").zig.c_translation.cast(CGWindowLevel, -@as(c_int, 20));
pub const kCGNormalWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 0));
pub const kCGFloatingWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 3));
pub const kCGTornOffMenuWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 3));
pub const kCGModalPanelWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 8));
pub const kCGUtilityWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 19));
pub const kCGDockWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 20));
pub const kCGMainMenuWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 24));
pub const kCGStatusWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 25));
pub const kCGPopUpMenuWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 101));
pub const kCGOverlayWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 102));
pub const kCGHelpWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 200));
pub const kCGDraggingWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 500));
pub const kCGScreenSaverWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 1000));
pub const kCGAssistiveTechHighWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, @as(c_int, 1500));
pub const kCGCursorWindowLevel = @import("std").zig.c_translation.cast(CGWindowLevel, kCGMaximumWindowLevel - @as(c_int, 1));
pub const kCGNullDirectDisplay = @import("std").zig.c_translation.cast(CGDirectDisplayID, @as(c_int, 0));
pub const kCGDirectMainDisplay = CGMainDisplayID();
pub const kCGDisplayWidth = CFSTR("Width");
pub const kCGDisplayHeight = CFSTR("Height");
pub const kCGDisplayMode = CFSTR("Mode");
pub const kCGDisplayBitsPerPixel = CFSTR("BitsPerPixel");
pub const kCGDisplayBitsPerSample = CFSTR("BitsPerSample");
pub const kCGDisplaySamplesPerPixel = CFSTR("SamplesPerPixel");
pub const kCGDisplayRefreshRate = CFSTR("RefreshRate");
pub const kCGDisplayModeUsableForDesktopGUI = CFSTR("UsableForDesktopGUI");
pub const kCGDisplayIOFlags = CFSTR("IOFlags");
pub const kCGDisplayBytesPerRow = CFSTR("kCGDisplayBytesPerRow");
pub const kCGIODisplayModeID = CFSTR("IODisplayModeID");
pub const kCGDisplayModeIsSafeForHardware = CFSTR("kCGDisplayModeIsSafeForHardware");
pub const kCGDisplayModeIsInterlaced = CFSTR("kCGDisplayModeIsInterlaced");
pub const kCGDisplayModeIsStretched = CFSTR("kCGDisplayModeIsStretched");
pub const kCGDisplayModeIsTelevisionOutput = CFSTR("kCGDisplayModeIsTelevisionOutput");
pub const CGDisplayNoErr = kCGErrorSuccess;
pub const CGDIRECTPALETTE_H_ = "";
pub const CGDISPLAYCONFIGURATION_H_ = "";
pub const CGDISPLAYFADE_H_ = "";
pub const kCGDisplayFadeReservationInvalidToken = @as(c_int, 0);
pub const kCGDisplayBlendNormal = 0.0;
pub const kCGDisplayBlendSolidColor = 1.0;
pub const kCGMaxDisplayReservationInterval = @import("std").zig.c_translation.cast(CGDisplayReservationInterval, 15.0);
pub const CGDISPLAYSTREAM_H_ = "";
pub const CGEVENT_H_ = "";
pub const CGEVENTTYPES_H_ = "";
pub const CGREMOTEOPERATION_H_ = "";
pub const CGEventNoErr = kCGErrorSuccess;
pub const kCGMouseDownEventMaskingDeadSwitchTimeout = 60.0;
pub const kCGEventFilterMaskPermitAllEvents = (kCGEventFilterMaskPermitLocalMouseEvents | kCGEventFilterMaskPermitLocalKeyboardEvents) | kCGEventFilterMaskPermitSystemDefinedEvents;
pub const kCGEventSupressionStateSupressionInterval = kCGEventSuppressionStateSuppressionInterval;
pub const kCGEventSupressionStateRemoteMouseDrag = kCGEventSuppressionStateRemoteMouseDrag;
pub const kCGNumberOfEventSupressionStates = kCGNumberOfEventSuppressionStates;
pub const CGEventSupressionState = CGEventSuppressionState;
pub inline fn CGSetLocalEventsFilterDuringSupressionState(filter: anytype, state: anytype) @TypeOf(CGSetLocalEventsFilterDuringSuppressionState(filter, state)) {
    return CGSetLocalEventsFilterDuringSuppressionState(filter, state);
}
pub const _DEV_EVENT_H = "";
pub const _DEV_EV_TYPES_H = "";
pub const _OSATOMIC_H_ = "";
pub const _OSATOMIC_DEPRECATED_H_ = "";
pub const OSATOMIC_DEPRECATED = @as(c_int, 1);
pub const _OSSPINLOCK_DEPRECATED_H_ = "";
pub const OSSPINLOCK_DEPRECATED = @as(c_int, 1);
pub const OS_SPINLOCK_INIT = @as(c_int, 0);
pub const _OSATOMICQUEUE_H_ = "";
pub const _IOKIT_IOGRAPHICSTYPES_H = "";
pub const IOGRAPHICSTYPES_REV = @as(c_int, 76);
pub const IO1BitIndexedPixels = "P";
pub const IO2BitIndexedPixels = "PP";
pub const IO4BitIndexedPixels = "PPPP";
pub const IO8BitIndexedPixels = "PPPPPPPP";
pub const IO16BitDirectPixels = "-RRRRRGGGGGBBBBB";
pub const IO32BitDirectPixels = "--------RRRRRRRRGGGGGGGGBBBBBBBB";
pub const kIO30BitDirectPixels = "--RRRRRRRRRRGGGGGGGGGGBBBBBBBBBB";
pub const kIO64BitDirectPixels = "-16R16G16B16";
pub const kIO16BitFloatPixels = "-16FR16FG16FB16";
pub const kIO32BitFloatPixels = "-32FR32FG32FB32";
pub const IOYUV422Pixels = "Y4U2V2";
pub const IO8BitOverlayPixels = "O8";
pub const IOPagedPixels = "Page1";
pub const IO_SampleTypeAlpha = 'A';
pub const IO_SampleTypeSkip = '-';
pub const kIOFBSetGammaSyncNotSpecified = -@as(c_int, 1);
pub const kIOFBSetGammaSyncNoSync = @as(c_int, 0);
pub const kIOFBSetGammaSyncVerticalBlankSync = @as(c_int, 1);
pub const kIODisplayAttributesKey = "IODisplayAttributes";
pub const kIODisplaySupportsUnderscanKey = "IODisplaySupportsUnderscan";
pub const kIODisplaySupportsBasicAudioKey = "IODisplaySupportsBasicAudio";
pub const kIODisplaySupportsYCbCr444Key = "IODisplaySupportsYCbCr444";
pub const kIODisplaySupportsYCbCr422Key = "IODisplaySupportsYCbCr422";
pub const kIODisplaySelectedColorModeKey = "cmod";
pub const IO_DISPLAY_CAN_FILL = @as(c_int, 0x00000040);
pub const IO_DISPLAY_CAN_BLIT = @as(c_int, 0x00000020);
pub const IO_24BPP_TRANSFER_TABLE_SIZE = @as(c_int, 256);
pub const IO_15BPP_TRANSFER_TABLE_SIZE = @as(c_int, 256);
pub const IO_8BPP_TRANSFER_TABLE_SIZE = @as(c_int, 256);
pub const IO_12BPP_TRANSFER_TABLE_SIZE = @as(c_int, 256);
pub const IO_2BPP_TRANSFER_TABLE_SIZE = @as(c_int, 256);
pub const STDFB_BM256_TO_BM38_MAP_SIZE = @as(c_int, 256);
pub const STDFB_BM38_TO_BM256_MAP_SIZE = @as(c_int, 256);
pub const STDFB_BM38_TO_256_WITH_LOGICAL_SIZE = STDFB_BM38_TO_BM256_MAP_SIZE + (@as(c_int, 256) / @import("std").zig.c_translation.sizeof(c_int));
pub const STDFB_4BPS_TO_5BPS_MAP_SIZE = @as(c_int, 16);
pub const STDFB_5BPS_TO_4BPS_MAP_SIZE = @as(c_int, 32);
pub const kIOFramebufferInfoKey = "IOFramebufferInformation";
pub const kIOFBWidthKey = "IOFBWidth";
pub const kIOFBHeightKey = "IOFBHeight";
pub const kIOFBRefreshRateKey = "IOFBRefreshRate";
pub const kIOFBFlagsKey = "IOFBFlags";
pub const kIOFBBytesPerRowKey = "IOFBBytesPerRow";
pub const kIOFBBytesPerPlaneKey = "IOFBBytesPerPlane";
pub const kIOFBBitsPerPixelKey = "IOFBBitsPerPixel";
pub const kIOFBComponentCountKey = "IOFBComponentCount";
pub const kIOFBBitsPerComponentKey = "IOFBBitsPerComponent";
pub const kIOFBDetailedTimingsKey = "IOFBDetailedTimings";
pub const kIOFBTimingRangeKey = "IOFBTimingRange";
pub const kIOFBScalerInfoKey = "IOFBScalerInfo";
pub const kIOFBCursorInfoKey = "IOFBCursorInfo";
pub const kIOFBHDMIDongleROMKey = "IOFBHDMIDongleROM";
pub const kIOFBHostAccessFlagsKey = "IOFBHostAccessFlags";
pub const kIOFBMemorySizeKey = "IOFBMemorySize";
pub const kIOFBNeedsRefreshKey = "IOFBNeedsRefresh";
pub const kIOFBProbeOptionsKey = "IOFBProbeOptions";
pub const kIOFBGammaWidthKey = "IOFBGammaWidth";
pub const kIOFBGammaCountKey = "IOFBGammaCount";
pub const kIOFBCLUTDeferKey = "IOFBCLUTDefer";
pub const kIOFBDisplayPortConfigurationDataKey = "dpcd-registers";
pub const kIOHibernatePreviewActiveKey = "IOHibernatePreviewActive";
pub const kIOHibernateEFIGfxStatusKey = "IOHibernateEFIGfxStatus";
pub const kIOFBAVSignalTypeKey = "av-signal-type";
pub const kIOFBConfigKey = "IOFBConfig";
pub const kIOFBModesKey = "IOFBModes";
pub const kIOFBModeIDKey = "ID";
pub const kIOFBModeDMKey = "DM";
pub const kIOFBModeTMKey = "TM";
pub const kIOFBModeAIDKey = "AID";
pub const kIOFBModeDFKey = "DF";
pub const kIOFBModePIKey = "PI";
pub const kIODisplayEDIDKey = "IODisplayEDID";
pub const kIODisplayEDIDOriginalKey = "IODisplayEDIDOriginal";
pub const kIODisplayLocationKey = "IODisplayLocation";
pub const kIODisplayConnectFlagsKey = "IODisplayConnectFlags";
pub const kIODisplayHasBacklightKey = "IODisplayHasBacklight";
pub const kIODisplayIsDigitalKey = "IODisplayIsDigital";
pub const kDisplayBundleKey = "DisplayBundle";
pub const kAppleDisplayTypeKey = "AppleDisplayType";
pub const kAppleSenseKey = "AppleSense";
pub const kIODisplayMCCSVersionKey = "IODisplayMCCSVersion";
pub const kIODisplayTechnologyTypeKey = "IODisplayTechnologyType";
pub const kIODisplayUsageTimeKey = "IODisplayUsageTime";
pub const kIODisplayFirmwareLevelKey = "IODisplayFirmwareLevel";
pub const kDisplayVendorID = "DisplayVendorID";
pub const kDisplayProductID = "DisplayProductID";
pub const kDisplaySerialNumber = "DisplaySerialNumber";
pub const kDisplaySerialString = "DisplaySerialString";
pub const kDisplayWeekOfManufacture = "DisplayWeekManufacture";
pub const kDisplayYearOfManufacture = "DisplayYearManufacture";
pub const kDisplayProductName = "DisplayProductName";
pub const kDisplayWhitePointX = "DisplayWhitePointX";
pub const kDisplayWhitePointY = "DisplayWhitePointY";
pub const kDisplayRedPointX = "DisplayRedPointX";
pub const kDisplayRedPointY = "DisplayRedPointY";
pub const kDisplayGreenPointX = "DisplayGreenPointX";
pub const kDisplayGreenPointY = "DisplayGreenPointY";
pub const kDisplayBluePointX = "DisplayBluePointX";
pub const kDisplayBluePointY = "DisplayBluePointY";
pub const kDisplayWhiteGamma = "DisplayWhiteGamma";
pub const kDisplayRedGamma = "DisplayRedGamma";
pub const kDisplayGreenGamma = "DisplayGreenGamma";
pub const kDisplayBlueGamma = "DisplayBlueGamma";
pub const kDisplayGammaChannels = "DisplayGammaChannels";
pub const kDisplayGammaEntryCount = "DisplayGammaEntryCount";
pub const kDisplayGammaEntrySize = "DisplayGammaEntrySize";
pub const kDisplayGammaTable = "DisplayGammaTable";
pub const kDisplayBrightnessAffectsGamma = "DisplayBrightnessAffectsGamma";
pub const kDisplayViewAngleAffectsGamma = "DisplayViewAngleAffectsGamma";
pub const kDisplayCSProfile = "DisplayCSProfile";
pub const kDisplayHorizontalImageSize = "DisplayHorizontalImageSize";
pub const kDisplayVerticalImageSize = "DisplayVerticalImageSize";
pub const kDisplayFixedPixelFormat = "DisplayFixedPixelFormat";
pub const kDisplaySubPixelLayout = "DisplaySubPixelLayout";
pub const kDisplaySubPixelConfiguration = "DisplaySubPixelConfiguration";
pub const kDisplaySubPixelShape = "DisplaySubPixelShape";
pub const kIODisplayOverrideMatchingKey = "IODisplayOverrideMatching";
pub const kIODisplayParametersKey = "IODisplayParameters";
pub const kIODisplayGUIDKey = "IODisplayGUID";
pub const kIODisplayValueKey = "value";
pub const kIODisplayMinValueKey = "min";
pub const kIODisplayMaxValueKey = "max";
pub const kIODisplayBrightnessProbeKey = "brightness-probe";
pub const kIODisplayLinearBrightnessProbeKey = "linear-brightness-probe";
pub const kIODisplayBrightnessKey = "brightness";
pub const kIODisplayLinearBrightnessKey = "linear-brightness";
pub const kIODisplayUsableLinearBrightnessKey = "usable-linear-brightness";
pub const kIODisplayBrightnessFadeKey = "brightness-fade";
pub const kIODisplayContrastKey = "contrast";
pub const kIODisplayHorizontalPositionKey = "horizontal-position";
pub const kIODisplayHorizontalSizeKey = "horizontal-size";
pub const kIODisplayVerticalPositionKey = "vertical-position";
pub const kIODisplayVerticalSizeKey = "vertical-size";
pub const kIODisplayTrapezoidKey = "trapezoid";
pub const kIODisplayPincushionKey = "pincushion";
pub const kIODisplayParallelogramKey = "parallelogram";
pub const kIODisplayRotationKey = "rotation";
pub const kIODisplayTheatreModeKey = "theatre-mode";
pub const kIODisplayTheatreModeWindowKey = "theatre-mode-window";
pub const kIODisplayOverscanKey = "oscn";
pub const kIODisplayVideoBestKey = "vbst";
pub const kIODisplaySpeakerVolumeKey = "speaker-volume";
pub const kIODisplaySpeakerSelectKey = "speaker-select";
pub const kIODisplayMicrophoneVolumeKey = "microphone-volume";
pub const kIODisplayAmbientLightSensorKey = "ambient-light-sensor";
pub const kIODisplayAudioMuteAndScreenBlankKey = "audio-mute-and-screen-blank";
pub const kIODisplayAudioTrebleKey = "audio-treble";
pub const kIODisplayAudioBassKey = "audio-bass";
pub const kIODisplayAudioBalanceLRKey = "audio-balance-LR";
pub const kIODisplayAudioProcessorModeKey = "audio-processor-mode";
pub const kIODisplayPowerModeKey = "power-mode";
pub const kIODisplayManufacturerSpecificKey = "manufacturer-specific";
pub const kIODisplayPowerStateKey = "dsyp";
pub const kIODisplayControllerIDKey = "IODisplayControllerID";
pub const kIODisplayCapabilityStringKey = "IODisplayCapabilityString";
pub const kIODisplayRedGammaScaleKey = "rgsc";
pub const kIODisplayGreenGammaScaleKey = "ggsc";
pub const kIODisplayBlueGammaScaleKey = "bgsc";
pub const kIODisplayGammaScaleKey = "gsc ";
pub const kIODisplayParametersCommitKey = "commit";
pub const kIODisplayParametersDefaultKey = "defaults";
pub const kIODisplayParametersFlushKey = "flush";
pub const _IOKIT_IOSHAREDLOCK_H = "";
pub const IOSharedLockData = OSSpinLock;
pub const ev_lock_data_t = OSSpinLock;
pub const EVENT_SYSTEM_VERSION = @as(c_int, 2);
pub const NX_MAXMOUSESCALINGS = @as(c_int, 20);
pub const NX_EVS_INFO_MAX = @as(c_int, 1024);
pub const NX_EVS_DEVICE_MAX = @as(c_int, 16);
pub const NX_EVS_DEVICE_INTERFACE_OTHER = @as(c_int, 0);
pub const NX_EVS_DEVICE_INTERFACE_NeXT = @as(c_int, 1);
pub const NX_EVS_DEVICE_INTERFACE_ADB = @as(c_int, 2);
pub const NX_EVS_DEVICE_INTERFACE_ACE = @as(c_int, 3);
pub const NX_EVS_DEVICE_INTERFACE_SERIAL_ACE = @as(c_int, 4);
pub const NX_EVS_DEVICE_INTERFACE_BUS_ACE = @as(c_int, 5);
pub const NX_EVS_DEVICE_INTERFACE_HIL = @as(c_int, 6);
pub const NX_EVS_DEVICE_INTERFACE_TYPE5 = @as(c_int, 7);
pub const NUM_SUPPORTED_INTERFACES = NX_EVS_DEVICE_INTERFACE_TYPE5 + @as(c_int, 1);
pub const NX_EVS_DEVICE_TYPE_OTHER = @as(c_int, 0);
pub const NX_EVS_DEVICE_TYPE_KEYBOARD = @as(c_int, 1);
pub const NX_EVS_DEVICE_TYPE_MOUSE = @as(c_int, 2);
pub const NX_EVS_DEVICE_TYPE_TABLET = @as(c_int, 3);
pub const __OLD_NX_EVS_DEVICE_INFO = @as(c_int, 1);
pub const NX_EVS_DEVICE_INFO = "Evs_EventDeviceInfo";
pub const NX_EVS_DEVICE_INFO_COUNT = @import("std").zig.c_translation.sizeof(NXEventSystemDeviceList) / @import("std").zig.c_translation.sizeof(c_int);
pub const EV_SCREEN_MIN_BRIGHTNESS = @as(c_int, 0);
pub const EV_SCREEN_MAX_BRIGHTNESS = @as(c_int, 64);
pub inline fn EV_SCALE_BRIGHTNESS(scale: anytype, datum: anytype) @TypeOf((@import("std").zig.c_translation.cast(UInt32, datum) * @import("std").zig.c_translation.cast(UInt32, scale)) >> @as(c_int, 6)) {
    return (@import("std").zig.c_translation.cast(UInt32, datum) * @import("std").zig.c_translation.cast(UInt32, scale)) >> @as(c_int, 6);
}
pub const EV_TICK_TIME = @as(c_int, 16);
pub const EV_TICKS_PER_SEC = @as(c_int, 1000) / EV_TICK_TIME;
pub const EV_RB = @as(c_int, 0x01);
pub const EV_LB = @as(c_int, 0x04);
pub const EV_MOUSEBUTTONMASK = EV_LB | EV_RB;
pub const EV_MINPRESSURE = @as(c_int, 0);
pub const EV_MAXPRESSURE = @as(c_int, 255);
pub const EV_CURSOR_WIDTH = @as(c_int, 16);
pub const EV_CURSOR_HEIGHT = @as(c_int, 16);
pub const kAppleOnboardGUID = @as(c_ulonglong, 0x0610000000000000);
pub const EVENT_H = "";
pub const _NXSIZE_ = @as(c_int, 1);
pub const _NXSize_ = NXSize;
pub const NX_NULLEVENT = @as(c_int, 0);
pub const NX_LMOUSEDOWN = @as(c_int, 1);
pub const NX_LMOUSEUP = @as(c_int, 2);
pub const NX_RMOUSEDOWN = @as(c_int, 3);
pub const NX_RMOUSEUP = @as(c_int, 4);
pub const NX_MOUSEMOVED = @as(c_int, 5);
pub const NX_LMOUSEDRAGGED = @as(c_int, 6);
pub const NX_RMOUSEDRAGGED = @as(c_int, 7);
pub const NX_MOUSEENTERED = @as(c_int, 8);
pub const NX_MOUSEEXITED = @as(c_int, 9);
pub const NX_OMOUSEDOWN = @as(c_int, 25);
pub const NX_OMOUSEUP = @as(c_int, 26);
pub const NX_OMOUSEDRAGGED = @as(c_int, 27);
pub const NX_KEYDOWN = @as(c_int, 10);
pub const NX_KEYUP = @as(c_int, 11);
pub const NX_FLAGSCHANGED = @as(c_int, 12);
pub const NX_KITDEFINED = @as(c_int, 13);
pub const NX_SYSDEFINED = @as(c_int, 14);
pub const NX_APPDEFINED = @as(c_int, 15);
pub const NX_SCROLLWHEELMOVED = @as(c_int, 22);
pub const NX_ZOOM = @as(c_int, 28);
pub const NX_TABLETPOINTER = @as(c_int, 23);
pub const NX_TABLETPROXIMITY = @as(c_int, 24);
pub const NX_FIRSTEVENT = @as(c_int, 0);
pub const NX_LASTEVENT = @as(c_int, 28);
pub const NX_NUMPROCS = (NX_LASTEVENT - NX_FIRSTEVENT) + @as(c_int, 1);
pub const NX_NULLEVENTMASK = @as(c_int, 1) << NX_NULLEVENT;
pub const NX_LMOUSEDOWNMASK = @as(c_int, 1) << NX_LMOUSEDOWN;
pub const NX_LMOUSEUPMASK = @as(c_int, 1) << NX_LMOUSEUP;
pub const NX_RMOUSEDOWNMASK = @as(c_int, 1) << NX_RMOUSEDOWN;
pub const NX_RMOUSEUPMASK = @as(c_int, 1) << NX_RMOUSEUP;
pub const NX_OMOUSEDOWNMASK = @as(c_int, 1) << NX_OMOUSEDOWN;
pub const NX_OMOUSEUPMASK = @as(c_int, 1) << NX_OMOUSEUP;
pub const NX_MOUSEMOVEDMASK = @as(c_int, 1) << NX_MOUSEMOVED;
pub const NX_LMOUSEDRAGGEDMASK = @as(c_int, 1) << NX_LMOUSEDRAGGED;
pub const NX_RMOUSEDRAGGEDMASK = @as(c_int, 1) << NX_RMOUSEDRAGGED;
pub const NX_OMOUSEDRAGGEDMASK = @as(c_int, 1) << NX_OMOUSEDRAGGED;
pub const NX_MOUSEENTEREDMASK = @as(c_int, 1) << NX_MOUSEENTERED;
pub const NX_MOUSEEXITEDMASK = @as(c_int, 1) << NX_MOUSEEXITED;
pub const NX_KEYDOWNMASK = @as(c_int, 1) << NX_KEYDOWN;
pub const NX_KEYUPMASK = @as(c_int, 1) << NX_KEYUP;
pub const NX_FLAGSCHANGEDMASK = @as(c_int, 1) << NX_FLAGSCHANGED;
pub const NX_KITDEFINEDMASK = @as(c_int, 1) << NX_KITDEFINED;
pub const NX_SYSDEFINEDMASK = @as(c_int, 1) << NX_SYSDEFINED;
pub const NX_APPDEFINEDMASK = @as(c_int, 1) << NX_APPDEFINED;
pub const NX_SCROLLWHEELMOVEDMASK = @as(c_int, 1) << NX_SCROLLWHEELMOVED;
pub const NX_ZOOMMASK = @as(c_int, 1) << NX_ZOOM;
pub const NX_TABLETPOINTERMASK = @as(c_int, 1) << NX_TABLETPOINTER;
pub const NX_TABLETPROXIMITYMASK = @as(c_int, 1) << NX_TABLETPROXIMITY;
pub inline fn EventCodeMask(@"type": anytype) @TypeOf(@as(c_int, 1) << @"type") {
    return @as(c_int, 1) << @"type";
}
pub const NX_ALLEVENTS = -@as(c_int, 1);
pub const NX_SUBTYPE_DEFAULT = @as(c_int, 0);
pub const NX_SUBTYPE_TABLET_POINT = @as(c_int, 1);
pub const NX_SUBTYPE_TABLET_PROXIMITY = @as(c_int, 2);
pub const NX_SUBTYPE_MOUSE_TOUCH = @as(c_int, 3);
pub const NX_SUBTYPE_POWER_KEY = @as(c_int, 1);
pub const NX_SUBTYPE_AUX_MOUSE_BUTTONS = @as(c_int, 7);
pub const NX_SUBTYPE_AUX_CONTROL_BUTTONS = @as(c_int, 8);
pub const NX_SUBTYPE_EJECT_KEY = @as(c_int, 10);
pub const NX_SUBTYPE_SLEEP_EVENT = @as(c_int, 11);
pub const NX_SUBTYPE_RESTART_EVENT = @as(c_int, 12);
pub const NX_SUBTYPE_SHUTDOWN_EVENT = @as(c_int, 13);
pub const NX_SUBTYPE_MENU = @as(c_int, 16);
pub const NX_SUBTYPE_ACCESSIBILITY = @as(c_int, 17);
pub const NX_SUBTYPE_STICKYKEYS_ON = @as(c_int, 100);
pub const NX_SUBTYPE_STICKYKEYS_OFF = @as(c_int, 101);
pub const NX_SUBTYPE_STICKYKEYS_SHIFT = @as(c_int, 102);
pub const NX_SUBTYPE_STICKYKEYS_CONTROL = @as(c_int, 103);
pub const NX_SUBTYPE_STICKYKEYS_ALTERNATE = @as(c_int, 104);
pub const NX_SUBTYPE_STICKYKEYS_COMMAND = @as(c_int, 105);
pub const NX_SUBTYPE_STICKYKEYS_RELEASE = @as(c_int, 106);
pub const NX_SUBTYPE_STICKYKEYS_TOGGLEMOUSEDRIVING = @as(c_int, 107);
pub const NX_SUBTYPE_STICKYKEYS_SHIFT_DOWN = @as(c_int, 110);
pub const NX_SUBTYPE_STICKYKEYS_CONTROL_DOWN = @as(c_int, 111);
pub const NX_SUBTYPE_STICKYKEYS_ALTERNATE_DOWN = @as(c_int, 112);
pub const NX_SUBTYPE_STICKYKEYS_COMMAND_DOWN = @as(c_int, 113);
pub const NX_SUBTYPE_STICKYKEYS_FN_DOWN = @as(c_int, 114);
pub const NX_SUBTYPE_STICKYKEYS_SHIFT_LOCK = @as(c_int, 120);
pub const NX_SUBTYPE_STICKYKEYS_CONTROL_LOCK = @as(c_int, 121);
pub const NX_SUBTYPE_STICKYKEYS_ALTERNATE_LOCK = @as(c_int, 122);
pub const NX_SUBTYPE_STICKYKEYS_COMMAND_LOCK = @as(c_int, 123);
pub const NX_SUBTYPE_STICKYKEYS_FN_LOCK = @as(c_int, 124);
pub const NX_SUBTYPE_STICKYKEYS_SHIFT_UP = @as(c_int, 130);
pub const NX_SUBTYPE_STICKYKEYS_CONTROL_UP = @as(c_int, 131);
pub const NX_SUBTYPE_STICKYKEYS_ALTERNATE_UP = @as(c_int, 132);
pub const NX_SUBTYPE_STICKYKEYS_COMMAND_UP = @as(c_int, 133);
pub const NX_SUBTYPE_STICKYKEYS_FN_UP = @as(c_int, 134);
pub const NX_SUBTYPE_SLOWKEYS_START = @as(c_int, 200);
pub const NX_SUBTYPE_SLOWKEYS_ABORT = @as(c_int, 201);
pub const NX_SUBTYPE_SLOWKEYS_END = @as(c_int, 202);
pub const NX_SUBTYPE_HIDPARAMETER_MODIFIED = @as(c_int, 210);
pub const NX_ALPHASHIFTMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00010000, .hexadecimal);
pub const NX_SHIFTMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const NX_CONTROLMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const NX_ALTERNATEMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const NX_COMMANDMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00100000, .hexadecimal);
pub const NX_NUMERICPADMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00200000, .hexadecimal);
pub const NX_HELPMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00400000, .hexadecimal);
pub const NX_SECONDARYFNMASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00800000, .hexadecimal);
pub const NX_ALPHASHIFT_STATELESS_MASK = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x01000000, .hexadecimal);
pub const NX_DEVICELCTLKEYMASK = @as(c_int, 0x00000001);
pub const NX_DEVICELSHIFTKEYMASK = @as(c_int, 0x00000002);
pub const NX_DEVICERSHIFTKEYMASK = @as(c_int, 0x00000004);
pub const NX_DEVICELCMDKEYMASK = @as(c_int, 0x00000008);
pub const NX_DEVICERCMDKEYMASK = @as(c_int, 0x00000010);
pub const NX_DEVICELALTKEYMASK = @as(c_int, 0x00000020);
pub const NX_DEVICERALTKEYMASK = @as(c_int, 0x00000040);
pub const NX_DEVICE_ALPHASHIFT_STATELESS_MASK = @as(c_int, 0x00000080);
pub const NX_DEVICERCTLKEYMASK = @as(c_int, 0x00002000);
pub const NX_STYLUSPROXIMITYMASK = @as(c_int, 0x00000080);
pub const NX_NONCOALSESCEDMASK = @as(c_int, 0x00000100);
pub const NX_ASCIISET = @as(c_int, 0);
pub const NX_SYMBOLSET = @as(c_int, 1);
pub const NX_DINGBATSSET = @as(c_int, 2);
pub const NX_TABLET_BUTTON_PENTIPMASK = @as(c_int, 0x0001);
pub const NX_TABLET_BUTTON_PENLOWERSIDEMASK = @as(c_int, 0x0002);
pub const NX_TABLET_BUTTON_PENUPPERSIDEMASK = @as(c_int, 0x0004);
pub const NX_TABLET_CAPABILITY_DEVICEIDMASK = @as(c_int, 0x0001);
pub const NX_TABLET_CAPABILITY_ABSXMASK = @as(c_int, 0x0002);
pub const NX_TABLET_CAPABILITY_ABSYMASK = @as(c_int, 0x0004);
pub const NX_TABLET_CAPABILITY_VENDOR1MASK = @as(c_int, 0x0008);
pub const NX_TABLET_CAPABILITY_VENDOR2MASK = @as(c_int, 0x0010);
pub const NX_TABLET_CAPABILITY_VENDOR3MASK = @as(c_int, 0x0020);
pub const NX_TABLET_CAPABILITY_BUTTONSMASK = @as(c_int, 0x0040);
pub const NX_TABLET_CAPABILITY_TILTXMASK = @as(c_int, 0x0080);
pub const NX_TABLET_CAPABILITY_TILTYMASK = @as(c_int, 0x0100);
pub const NX_TABLET_CAPABILITY_ABSZMASK = @as(c_int, 0x0200);
pub const NX_TABLET_CAPABILITY_PRESSUREMASK = @as(c_int, 0x0400);
pub const NX_TABLET_CAPABILITY_TANGENTIALPRESSUREMASK = @as(c_int, 0x0800);
pub const NX_TABLET_CAPABILITY_ORIENTINFOMASK = @as(c_int, 0x1000);
pub const NX_TABLET_CAPABILITY_ROTATIONMASK = @as(c_int, 0x2000);
pub const NX_TABLET_POINTER_UNKNOWN = @as(c_int, 0);
pub const NX_TABLET_POINTER_PEN = @as(c_int, 1);
pub const NX_TABLET_POINTER_CURSOR = @as(c_int, 2);
pub const NX_TABLET_POINTER_ERASER = @as(c_int, 3);
pub const kNXEventDataVersion = @as(c_int, 2);
pub const kNXEventVersion = @as(c_int, 2);
pub const NX_NOWINDOW = -@as(c_int, 1);
pub const NX_BYTYPE = @as(c_int, 0);
pub const NX_BROADCAST = @as(c_int, 1);
pub const NX_TOPWINDOW = @as(c_int, 2);
pub const NX_FIRSTWINDOW = @as(c_int, 3);
pub const NX_MOUSEWINDOW = @as(c_int, 4);
pub const NX_NEXTWINDOW = @as(c_int, 5);
pub const NX_LASTLEFT = @as(c_int, 6);
pub const NX_LASTRIGHT = @as(c_int, 7);
pub const NX_LASTKEY = @as(c_int, 8);
pub const NX_EXPLICIT = @as(c_int, 9);
pub const NX_TRANSMIT = @as(c_int, 10);
pub const NX_BYPSCONTEXT = @as(c_int, 11);
pub const NX_WAKEMASK = ((((((NX_KEYDOWNMASK | NX_FLAGSCHANGEDMASK) | NX_LMOUSEDOWNMASK) | NX_LMOUSEUPMASK) | NX_RMOUSEDOWNMASK) | NX_RMOUSEUPMASK) | NX_OMOUSEDOWNMASK) | NX_OMOUSEUPMASK;
pub const NX_UNDIMMASK = (((((((((NX_WAKEMASK | NX_KEYUPMASK) | NX_SCROLLWHEELMOVEDMASK) | NX_LMOUSEDRAGGEDMASK) | NX_RMOUSEDRAGGEDMASK) | NX_OMOUSEDRAGGEDMASK) | NX_MOUSEMOVEDMASK) | NX_MOUSEENTEREDMASK) | NX_MOUSEEXITEDMASK) | NX_TABLETPOINTERMASK) | NX_TABLETPROXIMITYMASK;
pub const NX_EVENT_EXTENSION_LOCATION_INVALID = @as(c_int, 0x1);
pub const NX_EVENT_EXTENSION_LOCATION_TYPE_FLOAT = @as(c_int, 0x2);
pub const NX_EVENT_EXTENSION_LOCATION_DEVICE_SCALED = @as(c_int, 0x4);
pub const NX_EVENT_EXTENSION_MOUSE_DELTA_TYPE_FLOAT = @as(c_int, 0x8);
pub const NX_EVENT_EXTENSION_AUDIT_TOKEN = @as(c_int, 0x10);
pub inline fn CGEventMaskBit(eventType: anytype) @TypeOf(@import("std").zig.c_translation.cast(CGEventMask, @as(c_int, 1)) << eventType) {
    return @import("std").zig.c_translation.cast(CGEventMask, @as(c_int, 1)) << eventType;
}
pub const kCGEventMaskForAllEvents = ~@import("std").zig.c_translation.cast(CGEventMask, @as(c_int, 0));
pub const kCGNotifyEventTapAdded = "com.apple.coregraphics.eventTapAdded";
pub const kCGNotifyEventTapRemoved = "com.apple.coregraphics.eventTapRemoved";
pub const kCGAnyInputEventType = @import("std").zig.c_translation.cast(CGEventType, ~@as(c_int, 0));
pub const CGEVENTSOURCE_H_ = "";
pub const CGPSCONVERTER_H_ = "";
pub const CGSESSION_H_ = "";
pub const kCGSessionUserIDKey = CFSTR("kCGSSessionUserIDKey");
pub const kCGSessionUserNameKey = CFSTR("kCGSSessionUserNameKey");
pub const kCGSessionConsoleSetKey = CFSTR("kCGSSessionConsoleSetKey");
pub const kCGSessionOnConsoleKey = CFSTR("kCGSSessionOnConsoleKey");
pub const kCGSessionLoginDoneKey = CFSTR("kCGSessionLoginDoneKey");
pub const kCGNotifyGUIConsoleSessionChanged = "com.apple.coregraphics.GUIConsoleSessionChanged";
pub const kCGNotifyGUISessionUserChanged = "com.apple.coregraphics.GUISessionUserChanged";
pub const CGDIRECTDISPLAYMETAL_H_ = "";
pub const __CORETEXT__ = "";
pub const __CTFONT__ = "";
pub const __CTFONTDESCRIPTOR__ = "";
pub const __CTFONTTRAITS__ = "";
pub const __CTDEFINES__ = "";
pub const __CTFONTCOLLECTION__ = "";
pub const __CTFONTMANAGER__ = "";
pub const __CTFONTMANAGERERRORS__ = "";
pub const __CTFRAME__ = "";
pub const __CTFRAMESETTER__ = "";
pub const __CTTYPESETTER__ = "";
pub const __CTLINE__ = "";
pub const __CTGLYPHINFO__ = "";
pub const __CTPARAGRAPHSTYLE__ = "";
pub const __CTRUBYANNOTATION__ = "";
pub const __CTRUN__ = "";
pub const __CTRUNDELEGATE__ = "";
pub const __CTSTRINGATTRIBUTES__ = "";
pub const __CTTEXTTAB__ = "";
pub const kCTVersionNumber10_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020000, .hexadecimal);
pub const kCTVersionNumber10_5_2 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020001, .hexadecimal);
pub const kCTVersionNumber10_5_3 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020002, .hexadecimal);
pub const kCTVersionNumber10_5_5 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00020003, .hexadecimal);
pub const kCTVersionNumber10_6 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00030000, .hexadecimal);
pub const kCTVersionNumber10_7 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00040000, .hexadecimal);
pub const kCTVersionNumber10_8 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00050000, .hexadecimal);
pub const kCTVersionNumber10_9 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00060000, .hexadecimal);
pub const kCTVersionNumber10_10 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00070000, .hexadecimal);
pub const kCTVersionNumber10_11 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00080000, .hexadecimal);
pub const kCTVersionNumber10_12 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x00090000, .hexadecimal);
pub const kCTVersionNumber10_13 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000A0000, .hexadecimal);
pub const kCTVersionNumber10_14 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000B0000, .hexadecimal);
pub const kCTVersionNumber10_15 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000C0000, .hexadecimal);
pub const kCTVersionNumber11_0 = @import("std").zig.c_translation.promoteIntLiteral(c_int, 0x000D0000, .hexadecimal);
pub const __HISERVICES__ = "";
pub const __HISHAPE__ = "";
pub const __QUICKDRAW__ = "";
pub const __COLORSYNCDEPRECATED__ = "";
pub inline fn CMProfileMD5AreEqual(a: anytype, b: anytype) @TypeOf((((@import("std").zig.c_translation.cast([*c]UInt32, a)[@as(c_int, 0)] == @import("std").zig.c_translation.cast([*c]UInt32, b)[@as(c_int, 0)]) and (@import("std").zig.c_translation.cast([*c]UInt32, a)[@as(c_int, 1)] == @import("std").zig.c_translation.cast([*c]UInt32, b)[@as(c_int, 1)])) and (@import("std").zig.c_translation.cast([*c]UInt32, a)[@as(c_int, 2)] == @import("std").zig.c_translation.cast([*c]UInt32, b)[@as(c_int, 2)])) and (@import("std").zig.c_translation.cast([*c]UInt32, a)[@as(c_int, 3)] == @import("std").zig.c_translation.cast([*c]UInt32, b)[@as(c_int, 3)])) {
    return (((@import("std").zig.c_translation.cast([*c]UInt32, a)[@as(c_int, 0)] == @import("std").zig.c_translation.cast([*c]UInt32, b)[@as(c_int, 0)]) and (@import("std").zig.c_translation.cast([*c]UInt32, a)[@as(c_int, 1)] == @import("std").zig.c_translation.cast([*c]UInt32, b)[@as(c_int, 1)])) and (@import("std").zig.c_translation.cast([*c]UInt32, a)[@as(c_int, 2)] == @import("std").zig.c_translation.cast([*c]UInt32, b)[@as(c_int, 2)])) and (@import("std").zig.c_translation.cast([*c]UInt32, a)[@as(c_int, 3)] == @import("std").zig.c_translation.cast([*c]UInt32, b)[@as(c_int, 3)]);
}
pub const CMBITMAPCALLBACKPROCPTR_DEFINED = @as(c_int, 1);
pub const kCMPrefsChangedNotification = CFSTR("AppleColorSyncPreferencesChangedNotification");
pub const kCMDeviceRegisteredNotification = CFSTR("CMDeviceRegisteredNotification");
pub const kCMDeviceUnregisteredNotification = CFSTR("CMDeviceUnregisteredNotification");
pub const kCMDeviceOnlineNotification = CFSTR("CMDeviceOnlineNotification");
pub const kCMDeviceOfflineNotification = CFSTR("CMDeviceOfflineNotification");
pub const kCMDeviceStateNotification = CFSTR("CMDeviceStateNotification");
pub const kCMDefaultDeviceNotification = CFSTR("CMDefaultDeviceNotification");
pub const kCMDeviceProfilesNotification = CFSTR("CMDeviceProfilesNotification");
pub const kCMDefaultDeviceProfileNotification = CFSTR("CMDefaultDeviceProfileNotification");
pub const kCMDisplayDeviceProfilesNotification = CFSTR("CMDisplayDeviceProfilesNotification");
pub const QD_HEADERS_ARE_PRIVATE = @as(c_int, 1);
pub inline fn GETPIXMAPPIXELFORMAT(pm: anytype) @TypeOf(if (pm.*.pixelFormat != @as(c_int, 0)) @import("std").zig.c_translation.cast(UInt32, pm.*.pixelFormat) else @import("std").zig.c_translation.cast(UInt32, pm.*.pixelSize)) {
    return if (pm.*.pixelFormat != @as(c_int, 0)) @import("std").zig.c_translation.cast(UInt32, pm.*.pixelFormat) else @import("std").zig.c_translation.cast(UInt32, pm.*.pixelSize);
}
pub const __ICONS__ = "";
pub const __INTERNETCONFIG__ = "";
pub const __PROCESSES__ = "";
pub const MacGetCurrentProcess = GetCurrentProcess;
pub const __PASTEBOARD__ = "";
pub const kPasteboardTypeFileURLPromise = CFSTR("com.apple.pasteboard.promised-file-url");
pub const kPasteboardTypeFilePromiseContent = CFSTR("com.apple.pasteboard.promised-file-content-type");
pub const kPasteboardClipboard = CFSTR("com.apple.pasteboard.clipboard");
pub const kPasteboardFind = CFSTR("com.apple.pasteboard.find");
pub const kPasteboardUniqueName = @import("std").zig.c_translation.cast(CFStringRef, NULL);
pub const kPasteboardPromisedData = @import("std").zig.c_translation.cast(CFDataRef, NULL);
pub const kPasteboardResolveAllPromises = @import("std").zig.c_translation.cast(PasteboardRef, NULL);
pub const __TRANSLATIONSERVICES__ = "";
pub const __ACCESSIBILITY__ = "";
pub const __AXERROR__ = "";
pub const __AXCONSTANTS__ = "";
pub const __AXROLECONSTANTS__ = "";
pub const kAXApplicationRole = CFSTR("AXApplication");
pub const kAXSystemWideRole = CFSTR("AXSystemWide");
pub const kAXWindowRole = CFSTR("AXWindow");
pub const kAXSheetRole = CFSTR("AXSheet");
pub const kAXDrawerRole = CFSTR("AXDrawer");
pub const kAXGrowAreaRole = CFSTR("AXGrowArea");
pub const kAXImageRole = CFSTR("AXImage");
pub const kAXUnknownRole = CFSTR("AXUnknown");
pub const kAXButtonRole = CFSTR("AXButton");
pub const kAXRadioButtonRole = CFSTR("AXRadioButton");
pub const kAXCheckBoxRole = CFSTR("AXCheckBox");
pub const kAXPopUpButtonRole = CFSTR("AXPopUpButton");
pub const kAXMenuButtonRole = CFSTR("AXMenuButton");
pub const kAXTabGroupRole = CFSTR("AXTabGroup");
pub const kAXTableRole = CFSTR("AXTable");
pub const kAXColumnRole = CFSTR("AXColumn");
pub const kAXRowRole = CFSTR("AXRow");
pub const kAXOutlineRole = CFSTR("AXOutline");
pub const kAXBrowserRole = CFSTR("AXBrowser");
pub const kAXScrollAreaRole = CFSTR("AXScrollArea");
pub const kAXScrollBarRole = CFSTR("AXScrollBar");
pub const kAXRadioGroupRole = CFSTR("AXRadioGroup");
pub const kAXListRole = CFSTR("AXList");
pub const kAXGroupRole = CFSTR("AXGroup");
pub const kAXValueIndicatorRole = CFSTR("AXValueIndicator");
pub const kAXComboBoxRole = CFSTR("AXComboBox");
pub const kAXSliderRole = CFSTR("AXSlider");
pub const kAXIncrementorRole = CFSTR("AXIncrementor");
pub const kAXBusyIndicatorRole = CFSTR("AXBusyIndicator");
pub const kAXProgressIndicatorRole = CFSTR("AXProgressIndicator");
pub const kAXRelevanceIndicatorRole = CFSTR("AXRelevanceIndicator");
pub const kAXToolbarRole = CFSTR("AXToolbar");
pub const kAXDisclosureTriangleRole = CFSTR("AXDisclosureTriangle");
pub const kAXTextFieldRole = CFSTR("AXTextField");
pub const kAXTextAreaRole = CFSTR("AXTextArea");
pub const kAXStaticTextRole = CFSTR("AXStaticText");
pub const kAXHeadingRole = CFSTR("AXHeading");
pub const kAXMenuBarRole = CFSTR("AXMenuBar");
pub const kAXMenuBarItemRole = CFSTR("AXMenuBarItem");
pub const kAXMenuRole = CFSTR("AXMenu");
pub const kAXMenuItemRole = CFSTR("AXMenuItem");
pub const kAXSplitGroupRole = CFSTR("AXSplitGroup");
pub const kAXSplitterRole = CFSTR("AXSplitter");
pub const kAXColorWellRole = CFSTR("AXColorWell");
pub const kAXTimeFieldRole = CFSTR("AXTimeField");
pub const kAXDateFieldRole = CFSTR("AXDateField");
pub const kAXHelpTagRole = CFSTR("AXHelpTag");
pub const kAXMatteRole = CFSTR("AXMatte");
pub const kAXDockItemRole = CFSTR("AXDockItem");
pub const kAXRulerRole = CFSTR("AXRuler");
pub const kAXRulerMarkerRole = CFSTR("AXRulerMarker");
pub const kAXGridRole = CFSTR("AXGrid");
pub const kAXLevelIndicatorRole = CFSTR("AXLevelIndicator");
pub const kAXCellRole = CFSTR("AXCell");
pub const kAXLayoutAreaRole = CFSTR("AXLayoutArea");
pub const kAXLayoutItemRole = CFSTR("AXLayoutItem");
pub const kAXHandleRole = CFSTR("AXHandle");
pub const kAXPopoverRole = CFSTR("AXPopover");
pub const kAXCloseButtonSubrole = CFSTR("AXCloseButton");
pub const kAXMinimizeButtonSubrole = CFSTR("AXMinimizeButton");
pub const kAXZoomButtonSubrole = CFSTR("AXZoomButton");
pub const kAXToolbarButtonSubrole = CFSTR("AXToolbarButton");
pub const kAXFullScreenButtonSubrole = CFSTR("AXFullScreenButton");
pub const kAXSecureTextFieldSubrole = CFSTR("AXSecureTextField");
pub const kAXTableRowSubrole = CFSTR("AXTableRow");
pub const kAXOutlineRowSubrole = CFSTR("AXOutlineRow");
pub const kAXUnknownSubrole = CFSTR("AXUnknown");
pub const kAXStandardWindowSubrole = CFSTR("AXStandardWindow");
pub const kAXDialogSubrole = CFSTR("AXDialog");
pub const kAXSystemDialogSubrole = CFSTR("AXSystemDialog");
pub const kAXFloatingWindowSubrole = CFSTR("AXFloatingWindow");
pub const kAXSystemFloatingWindowSubrole = CFSTR("AXSystemFloatingWindow");
pub const kAXDecorativeSubrole = CFSTR("AXDecorative");
pub const kAXIncrementArrowSubrole = CFSTR("AXIncrementArrow");
pub const kAXDecrementArrowSubrole = CFSTR("AXDecrementArrow");
pub const kAXIncrementPageSubrole = CFSTR("AXIncrementPage");
pub const kAXDecrementPageSubrole = CFSTR("AXDecrementPage");
pub const kAXSortButtonSubrole = CFSTR("AXSortButton");
pub const kAXSearchFieldSubrole = CFSTR("AXSearchField");
pub const kAXTimelineSubrole = CFSTR("AXTimeline");
pub const kAXRatingIndicatorSubrole = CFSTR("AXRatingIndicator");
pub const kAXContentListSubrole = CFSTR("AXContentList");
pub const kAXDefinitionListSubrole = CFSTR("AXDefinitionList");
pub const kAXDescriptionListSubrole = CFSTR("AXDescriptionList");
pub const kAXToggleSubrole = CFSTR("AXToggle");
pub const kAXSwitchSubrole = CFSTR("AXSwitch");
pub const kAXApplicationDockItemSubrole = CFSTR("AXApplicationDockItem");
pub const kAXDocumentDockItemSubrole = CFSTR("AXDocumentDockItem");
pub const kAXFolderDockItemSubrole = CFSTR("AXFolderDockItem");
pub const kAXMinimizedWindowDockItemSubrole = CFSTR("AXMinimizedWindowDockItem");
pub const kAXURLDockItemSubrole = CFSTR("AXURLDockItem");
pub const kAXDockExtraDockItemSubrole = CFSTR("AXDockExtraDockItem");
pub const kAXTrashDockItemSubrole = CFSTR("AXTrashDockItem");
pub const kAXSeparatorDockItemSubrole = CFSTR("AXSeparatorDockItem");
pub const kAXProcessSwitcherListSubrole = CFSTR("AXProcessSwitcherList");
pub const __AXATTRIBUTECONSTANTS__ = "";
pub const kAXRoleAttribute = CFSTR("AXRole");
pub const kAXSubroleAttribute = CFSTR("AXSubrole");
pub const kAXRoleDescriptionAttribute = CFSTR("AXRoleDescription");
pub const kAXHelpAttribute = CFSTR("AXHelp");
pub const kAXTitleAttribute = CFSTR("AXTitle");
pub const kAXValueAttribute = CFSTR("AXValue");
pub const kAXValueDescriptionAttribute = CFSTR("AXValueDescription");
pub const kAXMinValueAttribute = CFSTR("AXMinValue");
pub const kAXMaxValueAttribute = CFSTR("AXMaxValue");
pub const kAXValueIncrementAttribute = CFSTR("AXValueIncrement");
pub const kAXAllowedValuesAttribute = CFSTR("AXAllowedValues");
pub const kAXPlaceholderValueAttribute = CFSTR("AXPlaceholderValue");
pub const kAXEnabledAttribute = CFSTR("AXEnabled");
pub const kAXElementBusyAttribute = CFSTR("AXElementBusy");
pub const kAXFocusedAttribute = CFSTR("AXFocused");
pub const kAXParentAttribute = CFSTR("AXParent");
pub const kAXChildrenAttribute = CFSTR("AXChildren");
pub const kAXSelectedChildrenAttribute = CFSTR("AXSelectedChildren");
pub const kAXVisibleChildrenAttribute = CFSTR("AXVisibleChildren");
pub const kAXWindowAttribute = CFSTR("AXWindow");
pub const kAXTopLevelUIElementAttribute = CFSTR("AXTopLevelUIElement");
pub const kAXPositionAttribute = CFSTR("AXPosition");
pub const kAXSizeAttribute = CFSTR("AXSize");
pub const kAXOrientationAttribute = CFSTR("AXOrientation");
pub const kAXDescriptionAttribute = CFSTR("AXDescription");
pub const kAXDescription = CFSTR("AXDescription");
pub const kAXSelectedTextAttribute = CFSTR("AXSelectedText");
pub const kAXSelectedTextRangeAttribute = CFSTR("AXSelectedTextRange");
pub const kAXSelectedTextRangesAttribute = CFSTR("AXSelectedTextRanges");
pub const kAXVisibleCharacterRangeAttribute = CFSTR("AXVisibleCharacterRange");
pub const kAXNumberOfCharactersAttribute = CFSTR("AXNumberOfCharacters");
pub const kAXSharedTextUIElementsAttribute = CFSTR("AXSharedTextUIElements");
pub const kAXSharedCharacterRangeAttribute = CFSTR("AXSharedCharacterRange");
pub const kAXSharedFocusElementsAttribute = CFSTR("AXSharedFocusElements");
pub const kAXInsertionPointLineNumberAttribute = CFSTR("AXInsertionPointLineNumber");
pub const kAXMainAttribute = CFSTR("AXMain");
pub const kAXMinimizedAttribute = CFSTR("AXMinimized");
pub const kAXCloseButtonAttribute = CFSTR("AXCloseButton");
pub const kAXZoomButtonAttribute = CFSTR("AXZoomButton");
pub const kAXMinimizeButtonAttribute = CFSTR("AXMinimizeButton");
pub const kAXToolbarButtonAttribute = CFSTR("AXToolbarButton");
pub const kAXFullScreenButtonAttribute = CFSTR("AXFullScreenButton");
pub const kAXProxyAttribute = CFSTR("AXProxy");
pub const kAXGrowAreaAttribute = CFSTR("AXGrowArea");
pub const kAXModalAttribute = CFSTR("AXModal");
pub const kAXDefaultButtonAttribute = CFSTR("AXDefaultButton");
pub const kAXCancelButtonAttribute = CFSTR("AXCancelButton");
pub const kAXMenuItemCmdCharAttribute = CFSTR("AXMenuItemCmdChar");
pub const kAXMenuItemCmdVirtualKeyAttribute = CFSTR("AXMenuItemCmdVirtualKey");
pub const kAXMenuItemCmdGlyphAttribute = CFSTR("AXMenuItemCmdGlyph");
pub const kAXMenuItemCmdModifiersAttribute = CFSTR("AXMenuItemCmdModifiers");
pub const kAXMenuItemMarkCharAttribute = CFSTR("AXMenuItemMarkChar");
pub const kAXMenuItemPrimaryUIElementAttribute = CFSTR("AXMenuItemPrimaryUIElement");
pub const kAXMenuBarAttribute = CFSTR("AXMenuBar");
pub const kAXWindowsAttribute = CFSTR("AXWindows");
pub const kAXFrontmostAttribute = CFSTR("AXFrontmost");
pub const kAXHiddenAttribute = CFSTR("AXHidden");
pub const kAXMainWindowAttribute = CFSTR("AXMainWindow");
pub const kAXFocusedWindowAttribute = CFSTR("AXFocusedWindow");
pub const kAXFocusedUIElementAttribute = CFSTR("AXFocusedUIElement");
pub const kAXExtrasMenuBarAttribute = CFSTR("AXExtrasMenuBar");
pub const kAXHeaderAttribute = CFSTR("AXHeader");
pub const kAXEditedAttribute = CFSTR("AXEdited");
pub const kAXValueWrapsAttribute = CFSTR("AXValueWraps");
pub const kAXTabsAttribute = CFSTR("AXTabs");
pub const kAXTitleUIElementAttribute = CFSTR("AXTitleUIElement");
pub const kAXHorizontalScrollBarAttribute = CFSTR("AXHorizontalScrollBar");
pub const kAXVerticalScrollBarAttribute = CFSTR("AXVerticalScrollBar");
pub const kAXOverflowButtonAttribute = CFSTR("AXOverflowButton");
pub const kAXFilenameAttribute = CFSTR("AXFilename");
pub const kAXExpandedAttribute = CFSTR("AXExpanded");
pub const kAXSelectedAttribute = CFSTR("AXSelected");
pub const kAXSplittersAttribute = CFSTR("AXSplitters");
pub const kAXNextContentsAttribute = CFSTR("AXNextContents");
pub const kAXDocumentAttribute = CFSTR("AXDocument");
pub const kAXDecrementButtonAttribute = CFSTR("AXDecrementButton");
pub const kAXIncrementButtonAttribute = CFSTR("AXIncrementButton");
pub const kAXPreviousContentsAttribute = CFSTR("AXPreviousContents");
pub const kAXContentsAttribute = CFSTR("AXContents");
pub const kAXIncrementorAttribute = CFSTR("AXIncrementor");
pub const kAXHourFieldAttribute = CFSTR("AXHourField");
pub const kAXMinuteFieldAttribute = CFSTR("AXMinuteField");
pub const kAXSecondFieldAttribute = CFSTR("AXSecondField");
pub const kAXAMPMFieldAttribute = CFSTR("AXAMPMField");
pub const kAXDayFieldAttribute = CFSTR("AXDayField");
pub const kAXMonthFieldAttribute = CFSTR("AXMonthField");
pub const kAXYearFieldAttribute = CFSTR("AXYearField");
pub const kAXColumnTitleAttribute = CFSTR("AXColumnTitles");
pub const kAXURLAttribute = CFSTR("AXURL");
pub const kAXLabelUIElementsAttribute = CFSTR("AXLabelUIElements");
pub const kAXLabelValueAttribute = CFSTR("AXLabelValue");
pub const kAXShownMenuUIElementAttribute = CFSTR("AXShownMenuUIElement");
pub const kAXServesAsTitleForUIElementsAttribute = CFSTR("AXServesAsTitleForUIElements");
pub const kAXLinkedUIElementsAttribute = CFSTR("AXLinkedUIElements");
pub const kAXRowsAttribute = CFSTR("AXRows");
pub const kAXVisibleRowsAttribute = CFSTR("AXVisibleRows");
pub const kAXSelectedRowsAttribute = CFSTR("AXSelectedRows");
pub const kAXColumnsAttribute = CFSTR("AXColumns");
pub const kAXVisibleColumnsAttribute = CFSTR("AXVisibleColumns");
pub const kAXSelectedColumnsAttribute = CFSTR("AXSelectedColumns");
pub const kAXSortDirectionAttribute = CFSTR("AXSortDirection");
pub const kAXIndexAttribute = CFSTR("AXIndex");
pub const kAXDisclosingAttribute = CFSTR("AXDisclosing");
pub const kAXDisclosedRowsAttribute = CFSTR("AXDisclosedRows");
pub const kAXDisclosedByRowAttribute = CFSTR("AXDisclosedByRow");
pub const kAXDisclosureLevelAttribute = CFSTR("AXDisclosureLevel");
pub const kAXMatteHoleAttribute = CFSTR("AXMatteHole");
pub const kAXMatteContentUIElementAttribute = CFSTR("AXMatteContentUIElement");
pub const kAXMarkerUIElementsAttribute = CFSTR("AXMarkerUIElements");
pub const kAXUnitsAttribute = CFSTR("AXUnits");
pub const kAXUnitDescriptionAttribute = CFSTR("AXUnitDescription");
pub const kAXMarkerTypeAttribute = CFSTR("AXMarkerType");
pub const kAXMarkerTypeDescriptionAttribute = CFSTR("AXMarkerTypeDescription");
pub const kAXIsApplicationRunningAttribute = CFSTR("AXIsApplicationRunning");
pub const kAXSearchButtonAttribute = CFSTR("AXSearchButton");
pub const kAXClearButtonAttribute = CFSTR("AXClearButton");
pub const kAXFocusedApplicationAttribute = CFSTR("AXFocusedApplication");
pub const kAXRowCountAttribute = CFSTR("AXRowCount");
pub const kAXColumnCountAttribute = CFSTR("AXColumnCount");
pub const kAXOrderedByRowAttribute = CFSTR("AXOrderedByRow");
pub const kAXWarningValueAttribute = CFSTR("AXWarningValue");
pub const kAXCriticalValueAttribute = CFSTR("AXCriticalValue");
pub const kAXSelectedCellsAttribute = CFSTR("AXSelectedCells");
pub const kAXVisibleCellsAttribute = CFSTR("AXVisibleCells");
pub const kAXRowHeaderUIElementsAttribute = CFSTR("AXRowHeaderUIElements");
pub const kAXColumnHeaderUIElementsAttribute = CFSTR("AXColumnHeaderUIElements");
pub const kAXRowIndexRangeAttribute = CFSTR("AXRowIndexRange");
pub const kAXColumnIndexRangeAttribute = CFSTR("AXColumnIndexRange");
pub const kAXHorizontalUnitsAttribute = CFSTR("AXHorizontalUnits");
pub const kAXVerticalUnitsAttribute = CFSTR("AXVerticalUnits");
pub const kAXHorizontalUnitDescriptionAttribute = CFSTR("AXHorizontalUnitDescription");
pub const kAXVerticalUnitDescriptionAttribute = CFSTR("AXVerticalUnitDescription");
pub const kAXHandlesAttribute = CFSTR("AXHandles");
pub const kAXTextAttribute = CFSTR("AXText");
pub const kAXVisibleTextAttribute = CFSTR("AXVisibleText");
pub const kAXIsEditableAttribute = CFSTR("AXIsEditable");
pub const kAXColumnTitlesAttribute = CFSTR("AXColumnTitles");
pub const kAXIdentifierAttribute = CFSTR("AXIdentifier");
pub const kAXAlternateUIVisibleAttribute = CFSTR("AXAlternateUIVisible");
pub const kAXLineForIndexParameterizedAttribute = CFSTR("AXLineForIndex");
pub const kAXRangeForLineParameterizedAttribute = CFSTR("AXRangeForLine");
pub const kAXStringForRangeParameterizedAttribute = CFSTR("AXStringForRange");
pub const kAXRangeForPositionParameterizedAttribute = CFSTR("AXRangeForPosition");
pub const kAXRangeForIndexParameterizedAttribute = CFSTR("AXRangeForIndex");
pub const kAXBoundsForRangeParameterizedAttribute = CFSTR("AXBoundsForRange");
pub const kAXRTFForRangeParameterizedAttribute = CFSTR("AXRTFForRange");
pub const kAXAttributedStringForRangeParameterizedAttribute = CFSTR("AXAttributedStringForRange");
pub const kAXStyleRangeForIndexParameterizedAttribute = CFSTR("AXStyleRangeForIndex");
pub const kAXCellForColumnAndRowParameterizedAttribute = CFSTR("AXCellForColumnAndRow");
pub const kAXLayoutPointForScreenPointParameterizedAttribute = CFSTR("AXLayoutPointForScreenPoint");
pub const kAXLayoutSizeForScreenSizeParameterizedAttribute = CFSTR("AXLayoutSizeForScreenSize");
pub const kAXScreenPointForLayoutPointParameterizedAttribute = CFSTR("AXScreenPointForLayoutPoint");
pub const kAXScreenSizeForLayoutSizeParameterizedAttribute = CFSTR("AXScreenSizeForLayoutSize");
pub const __AXACTIONCONSTANTS__ = "";
pub const kAXPressAction = CFSTR("AXPress");
pub const kAXIncrementAction = CFSTR("AXIncrement");
pub const kAXDecrementAction = CFSTR("AXDecrement");
pub const kAXConfirmAction = CFSTR("AXConfirm");
pub const kAXCancelAction = CFSTR("AXCancel");
pub const kAXShowAlternateUIAction = CFSTR("AXShowAlternateUI");
pub const kAXShowDefaultUIAction = CFSTR("AXShowDefaultUI");
pub const kAXRaiseAction = CFSTR("AXRaise");
pub const kAXShowMenuAction = CFSTR("AXShowMenu");
pub const kAXPickAction = CFSTR("AXPick");
pub const __AXNOTIFICATIONCONSTANTS__ = "";
pub const kAXMainWindowChangedNotification = CFSTR("AXMainWindowChanged");
pub const kAXFocusedWindowChangedNotification = CFSTR("AXFocusedWindowChanged");
pub const kAXFocusedUIElementChangedNotification = CFSTR("AXFocusedUIElementChanged");
pub const kAXApplicationActivatedNotification = CFSTR("AXApplicationActivated");
pub const kAXApplicationDeactivatedNotification = CFSTR("AXApplicationDeactivated");
pub const kAXApplicationHiddenNotification = CFSTR("AXApplicationHidden");
pub const kAXApplicationShownNotification = CFSTR("AXApplicationShown");
pub const kAXWindowCreatedNotification = CFSTR("AXWindowCreated");
pub const kAXWindowMovedNotification = CFSTR("AXWindowMoved");
pub const kAXWindowResizedNotification = CFSTR("AXWindowResized");
pub const kAXWindowMiniaturizedNotification = CFSTR("AXWindowMiniaturized");
pub const kAXWindowDeminiaturizedNotification = CFSTR("AXWindowDeminiaturized");
pub const kAXDrawerCreatedNotification = CFSTR("AXDrawerCreated");
pub const kAXSheetCreatedNotification = CFSTR("AXSheetCreated");
pub const kAXHelpTagCreatedNotification = CFSTR("AXHelpTagCreated");
pub const kAXValueChangedNotification = CFSTR("AXValueChanged");
pub const kAXUIElementDestroyedNotification = CFSTR("AXUIElementDestroyed");
pub const kAXElementBusyChangedNotification = CFSTR("AXElementBusyChanged");
pub const kAXMenuOpenedNotification = CFSTR("AXMenuOpened");
pub const kAXMenuClosedNotification = CFSTR("AXMenuClosed");
pub const kAXMenuItemSelectedNotification = CFSTR("AXMenuItemSelected");
pub const kAXRowCountChangedNotification = CFSTR("AXRowCountChanged");
pub const kAXRowExpandedNotification = CFSTR("AXRowExpanded");
pub const kAXRowCollapsedNotification = CFSTR("AXRowCollapsed");
pub const kAXSelectedCellsChangedNotification = CFSTR("AXSelectedCellsChanged");
pub const kAXUnitsChangedNotification = CFSTR("AXUnitsChanged");
pub const kAXSelectedChildrenMovedNotification = CFSTR("AXSelectedChildrenMoved");
pub const kAXSelectedChildrenChangedNotification = CFSTR("AXSelectedChildrenChanged");
pub const kAXResizedNotification = CFSTR("AXResized");
pub const kAXMovedNotification = CFSTR("AXMoved");
pub const kAXCreatedNotification = CFSTR("AXCreated");
pub const kAXSelectedRowsChangedNotification = CFSTR("AXSelectedRowsChanged");
pub const kAXSelectedColumnsChangedNotification = CFSTR("AXSelectedColumnsChanged");
pub const kAXSelectedTextChangedNotification = CFSTR("AXSelectedTextChanged");
pub const kAXTitleChangedNotification = CFSTR("AXTitleChanged");
pub const kAXLayoutChangedNotification = CFSTR("AXLayoutChanged");
pub const kAXAnnouncementRequestedNotification = CFSTR("AXAnnouncementRequested");
pub const kAXUIElementsKey = CFSTR("AXUIElementsKey");
pub const kAXPriorityKey = CFSTR("AXPriorityKey");
pub const kAXAnnouncementKey = CFSTR("AXAnnouncementKey");
pub const kAXUIElementTitleKey = CFSTR("AXUIElementTitleKey");
pub const __AXVALUECONSTANTS__ = "";
pub const kAXHorizontalOrientationValue = CFSTR("AXHorizontalOrientation");
pub const kAXVerticalOrientationValue = CFSTR("AXVerticalOrientation");
pub const kAXUnknownOrientationValue = CFSTR("AXUnknownOrientation");
pub const kAXAscendingSortDirectionValue = CFSTR("AXAscendingSortDirection");
pub const kAXDescendingSortDirectionValue = CFSTR("AXDescendingSortDirection");
pub const kAXUnknownSortDirectionValue = CFSTR("AXUnknownSortDirection");
pub const __AXUIELEMENT__ = "";
pub const __AXVALUE__ = "";
pub const AXTEXTATTRIBUTEDSTRING_H = "";
pub const __UNIVERSALACCESS__ = "";
pub const __IMAGEIO__ = "";
pub const __IMAGEIOBASE__ = "";
pub const IMAGEIO_EXTERN_C_BEGIN = "";
pub const IMAGEIO_EXTERN_C_END = "";
pub const IIO_HAS_IOSURFACE = @as(c_int, 1);
pub inline fn IIO_BRIDGED_TYPE(@"type": anytype) @TypeOf(CF_BRIDGED_TYPE(@"type")) {
    return CF_BRIDGED_TYPE(@"type");
}
pub const CGIMAGESOURCE_H_ = "";
pub const CGIMAGEMETADATA_H_ = "";
pub const CGIMAGEDESTINATION_H_ = "";
pub const __CGIMAGEPROPERTIES__ = "";
pub const IMAGEIO_PNG_NO_FILTERS = @as(c_int, 0x00);
pub const IMAGEIO_PNG_FILTER_NONE = @as(c_int, 0x08);
pub const IMAGEIO_PNG_FILTER_SUB = @as(c_int, 0x10);
pub const IMAGEIO_PNG_FILTER_UP = @as(c_int, 0x20);
pub const IMAGEIO_PNG_FILTER_AVG = @as(c_int, 0x40);
pub const IMAGEIO_PNG_FILTER_PAETH = @as(c_int, 0x80);
pub const IMAGEIO_PNG_ALL_FILTERS = (((IMAGEIO_PNG_FILTER_NONE | IMAGEIO_PNG_FILTER_SUB) | IMAGEIO_PNG_FILTER_UP) | IMAGEIO_PNG_FILTER_AVG) | IMAGEIO_PNG_FILTER_PAETH;
pub const CGIMAGEANIMATION_H_ = "";
pub const __PRINTCORE__ = "";
pub const __PMDEFINITIONS__ = "";
pub const kPMNoData = NULL;
pub const kPMDontWantSize = NULL;
pub const kPMDontWantData = NULL;
pub const kPMDontWantBoolean = NULL;
pub const kPMNoReference = NULL;
pub const kPMDuplexDefault = kPMDuplexNone;
pub const kPMNoPrintSettings = @import("std").zig.c_translation.cast(PMPrintSettings, NULL);
pub const kPMNoPageFormat = @import("std").zig.c_translation.cast(PMPageFormat, NULL);
pub const kPMServerLocal = @import("std").zig.c_translation.cast(PMServer, NULL);
pub const kPMDestinationTypeDefault = kPMDestinationPrinter;
pub const kPMColorSpaceModelCount = @as(c_int, 4);
pub const kPMPPDDescriptionType = CFSTR("PMPPDDescriptionType");
pub const kPMDocumentFormatDefault = CFSTR("com.apple.documentformat.default");
pub const kPMDocumentFormatPDF = CFSTR("application/pdf");
pub const kPMDocumentFormatPostScript = CFSTR("application/postscript");
pub const kPMGraphicsContextDefault = CFSTR("com.apple.graphicscontext.default");
pub const kPMGraphicsContextCoreGraphics = CFSTR("com.apple.graphicscontext.coregraphics");
pub const kPDFWorkflowItemURLKey = CFSTR("itemURL");
pub const kPDFWorkflowDisplayNameKey = CFSTR("displayName");
pub const kPDFWorkflowItemsKey = CFSTR("items");
pub const kPDFWorkflowModifiedKey = CFSTR("wasModifiedInline");
pub const kPMPrintSelectionTitleKey = CFSTR("com.apple.printSelection.title");
pub const kPMPresetGraphicsTypeKey = CFSTR("com.apple.print.preset.graphicsType");
pub const kPMPresetGraphicsTypePhoto = CFSTR("Photo");
pub const kPMPresetGraphicsTypeAll = CFSTR("All");
pub const kPMPresetGraphicsTypeGeneral = CFSTR("General");
pub const kPMPresetGraphicsTypeNone = CFSTR("None");
pub const __PMCORE__ = "";
pub const __PMPrintAETypes__ = "";
pub const kPMPrintSettingsAEType = 0x70736574;
pub const kPMShowPrintDialogAEType = 0x70646c67;
pub const kPMPrinterAEType = 0x74727072;
pub const kPMCopiesAEProp = "copies";
pub const kPMCopiesAEKey = 0x6c776370;
pub const kPMCopieAEType = typeSInt32;
pub const kPMCollateAEProp = "collating";
pub const kPMCollateAEKey = 0x6c77636c;
pub const kPMCollateAEType = typeBoolean;
pub const kPMFirstPageAEProp = "starting page";
pub const kPMFirstPageAEKey = 0x6c776670;
pub const kPMFirstPageAEType = typeSInt32;
pub const kPMLastPageAEProp = "ending page";
pub const kPMLastPageAEKey = 0x6c776c70;
pub const kPMLastPageAEType = typeSInt32;
pub const kPMLayoutAcrossAEProp = "pages across";
pub const kPMLayoutAcrossAEKey = 0x6c776c61;
pub const kPMLayoutAcrossAEType = typeSInt32;
pub const kPMLayoutDownAEProp = "pages down";
pub const kPMLayoutDownAEKey = 0x6c776c64;
pub const kPMLayoutDownAEType = typeSInt32;
pub const kPMErrorHandlingAEProp = "error handling";
pub const kPMErrorHandlingAEKey = 0x6c776568;
pub const kPMErrorHandlingAEType = typeEnumerated;
pub const kPMPrintTimeAEProp = "requested print time";
pub const kPMPrintTimeAEKey = 0x6c777174;
pub const kPMPrintTimeAEType = cLongDateTime;
pub const kPMFeatureAEProp = "printer features";
pub const kPMFeatureAEKey = 0x6c777066;
pub const kPMFeatureAEType = typeAEList;
pub const kPMFaxNumberAEProp = "fax number";
pub const kPMFaxNumberAEKey = 0x6661786e;
pub const kPMFaxNumberAEType = typeChar;
pub const kPMTargetPrinterAEProp = "target printer";
pub const kPMTargetPrinterAEKey = 0x74727072;
pub const kPMTargetPrinterAEType = typeChar;
pub const kPMPDFWorkFlowAEProp = "PDF work flow";
pub const kPMPDFWorkFlowAEKey = 0x77726b66;
pub const kPMPDFWorkFlowAEType = typeUTF8Text;
pub const kPMPresetAEProp = "preset";
pub const kPMPresetAEKey = 0x70727374;
pub const kPMPresetAEType = typeUTF8Text;
pub const kPMSaveAsPDFAEProp = "save as PDF";
pub const kPMSaveAsPDFAEKey = 0x73706466;
pub const kPMSaveAsPDFAEType = typeFileURL;
pub const kPMSaveAsPSAEProp = "save as PS";
pub const kPMSaveAsPSAEKey = 0x73707320;
pub const kPMSaveAsPSAEType = typeFileURL;
pub const kPMErrorHandlingStandardEnum = 0x6c777374;
pub const kPMErrorHandlingDetailedEnum = 0x6c776474;
pub const __PMPRINTSETTINGSKEYS__ = "";
pub const kPMCopiesStr = "com.apple.print.PrintSettings.PMCopies";
pub const kPMCopiesKey = CFSTR(kPMCopiesStr);
pub const kPMCopyCollateStr = "com.apple.print.PrintSettings.PMCopyCollate";
pub const kPMCopyCollateKey = CFSTR(kPMCopyCollateStr);
pub const kPMOutputOrderStr = "OutputOrder";
pub const kPMOutputOrderKey = CFSTR(kPMOutputOrderStr);
pub const kPMPageSetStr = "page-set";
pub const kPMPageSetKey = CFSTR(kPMPageSetStr);
pub const kPMMirrorStr = "mirror";
pub const kPMMirrorKey = CFSTR(kPMMirrorStr);
pub const kPMPrintSelectionOnlyStr = "com.apple.print.PrintSettings.PMPrintSelectionOnly";
pub const kPMPrintSelectionOnlyKey = CFSTR(kPMPrintSelectionOnlyStr);
pub const kPMBorderStr = "com.apple.print.PrintSettings.PMBorder";
pub const kPMBorderKey = CFSTR(kPMBorderStr);
pub const kPMBorderTypeStr = "com.apple.print.PrintSettings.PMBorderType";
pub const kPMBorderTypeKey = CFSTR(kPMBorderTypeStr);
pub const kPMLayoutNUpStr = "com.apple.print.PrintSettings.PMLayoutNUp";
pub const kPMLayoutNUpKey = CFSTR(kPMLayoutNUpStr);
pub const kPMLayoutRowsStr = "com.apple.print.PrintSettings.PMLayoutRows";
pub const kPMLayoutRowsKey = CFSTR(kPMLayoutRowsStr);
pub const kPMLayoutColumnsStr = "com.apple.print.PrintSettings.PMLayoutColumns";
pub const kPMLayoutColumnsKey = CFSTR(kPMLayoutColumnsStr);
pub const kPMLayoutDirectionStr = "com.apple.print.PrintSettings.PMLayoutDirection";
pub const kPMLayoutDirectionKey = CFSTR(kPMLayoutDirectionStr);
pub const kPMLayoutTileOrientationStr = "com.apple.print.PrintSettings.PMLayoutTileOrientation";
pub const kPMLayoutTileOrientationKey = CFSTR(kPMLayoutTileOrientationStr);
pub const kPMJobStateStr = "com.apple.print.PrintSettings.PMJobState";
pub const kPMJobStateKey = CFSTR(kPMJobStateStr);
pub const kPMJobHoldUntilTimeStr = "com.apple.print.PrintSettings.PMJobHoldUntilTime";
pub const kPMJobHoldUntilTimeKey = CFSTR(kPMJobHoldUntilTimeStr);
pub const kPMJobPriorityStr = "com.apple.print.PrintSettings.PMJobPriority";
pub const kPMJobPriorityKey = CFSTR(kPMJobPriorityStr);
pub const kPMDuplexingStr = "com.apple.print.PrintSettings.PMDuplexing";
pub const kPMDuplexingKey = CFSTR(kPMDuplexingStr);
pub const kPMColorSyncProfileIDStr = "com.apple.print.PrintSettings.PMColorSyncProfileID";
pub const kPMColorSyncProfileIDKey = CFSTR(kPMColorSyncProfileIDStr);
pub const kPMPrimaryPaperFeedStr = "com.apple.print.PrintSettings.PMPrimaryPaperFeed";
pub const kPMPrimaryPaperFeedKey = CFSTR(kPMPrimaryPaperFeedStr);
pub const kPMSecondaryPaperFeedStr = "com.apple.print.PrintSettings.PMSecondaryPaperFeed";
pub const kPMSecondaryPaperFeedKey = CFSTR(kPMSecondaryPaperFeedStr);
pub const kPMPSErrorHandlerStr = "com.apple.print.PrintSettings.PMPSErrorHandler";
pub const kPMPSErrorHandlerKey = CFSTR(kPMPSErrorHandlerStr);
pub const kPMPSTraySwitchStr = "com.apple.print.PrintSettings.PMPSTraySwitch";
pub const kPMPSTraySwitchKey = CFSTR(kPMPSTraySwitchStr);
pub const kPMTotalBeginPagesStr = "com.apple.print.PrintSettings.PMTotalBeginPages";
pub const kPMTotalBeginPagesKey = CFSTR(kPMTotalBeginPagesStr);
pub const kPMTotalSidesImagedStr = "com.apple.print.PrintSettings.PMTotalSidesImaged";
pub const kPMTotalSidesImagedKey = CFSTR(kPMTotalSidesImagedStr);
pub const kPMFitToPageStr = "fit-to-page";
pub const kPMFitToPageKey = CFSTR(kPMFitToPageStr);
pub const kPMUseOptionalPINStr = "com.apple.print.PrintSettings.PMUseOptionalPIN";
pub const kPMUseOptionalPINKey = CFSTR(kPMUseOptionalPINStr);
pub const kPMUseOptionalAccountIDStr = "com.apple.print.PrintSettings.PMUseOptionalAccountID";
pub const kPMUseOptionalAccountIDKey = CFSTR(kPMUseOptionalAccountIDStr);
pub const kPMFaxNumberStr = "phone";
pub const kPMFaxNumberKey = CFSTR(kPMFaxNumberStr);
pub const kPMFaxToStr = "faxTo";
pub const kPMFaxToKey = CFSTR(kPMFaxToStr);
pub const kPMFaxPrefixStr = "faxPrefix";
pub const kPMFaxPrefixKey = CFSTR(kPMFaxPrefixStr);
pub const kPMFaxSubjectStr = "faxSubject";
pub const kPMFaxSubjectKey = CFSTR(kPMFaxSubjectStr);
pub const kPMFaxCoverSheetStr = "faxCoverSheet";
pub const kPMFaxCoverSheetKey = CFSTR(kPMFaxCoverSheetStr);
pub const kPMFaxCoverSheetMessageStr = "faxCoverSheetMessage";
pub const kPMFaxCoverSheetMessageKey = CFSTR(kPMFaxCoverSheetMessageStr);
pub const kPMFaxToneDialingStr = "faxToneDialing";
pub const kPMFaxToneDialingKey = CFSTR(kPMFaxToneDialingStr);
pub const kPMFaxUseSoundStr = "faxUseSound";
pub const kPMFaxUseSoundKey = CFSTR(kPMFaxUseSoundStr);
pub const kPMFaxWaitForDialToneStr = "faxWaitForDialTone";
pub const kPMFaxWaitForDialToneKey = CFSTR(kPMFaxWaitForDialToneStr);
pub const kPMFaxToLabelStr = "faxToLabel";
pub const kPMFaxToLabelKey = CFSTR(kPMFaxToLabelStr);
pub const kPMFaxFromLabelStr = "faxFromLabel";
pub const kPMFaxFromLabelKey = CFSTR(kPMFaxFromLabelStr);
pub const kPMFaxDateLabelStr = "faxDateLabel";
pub const kPMFaxDateLabelKey = CFSTR(kPMFaxDateLabelStr);
pub const kPMFaxSubjectLabelStr = "faxSubjectLabel";
pub const kPMFaxSubjectLabelKey = CFSTR(kPMFaxSubjectLabelStr);
pub const kPMFaxSheetsLabelStr = "faxSheetsLabel";
pub const kPMFaxSheetsLabelKey = CFSTR(kPMFaxSheetsLabelStr);
pub const kPMCoverPageStr = "com.apple.print.PrintSettings.PMCoverPage";
pub const kPMCoverPageKey = CFSTR(kPMCoverPageStr);
pub const kPMCoverPageDefault = kPMCoverPageNone;
pub const kPMCoverPageSourceStr = "com.apple.print.PrintSettings.PMCoverPageSource";
pub const kPMCoverPageSourceKey = CFSTR(kPMCoverPageSourceStr);
pub const kPMDestinationPrinterIDStr = "DestinationPrinterID";
pub const kPMDestinationPrinterIDKey = CFSTR(kPMDestinationPrinterIDStr);
pub const kPMInlineWorkflowStr = "inlineWorkflow";
pub const kPMInlineWorkflowKey = CFSTR(kPMInlineWorkflowStr);
pub const kPMPageToPaperMappingTypeStr = "com.apple.print.PageToPaperMappingType";
pub const kPMPageToPaperMappingTypeKey = CFSTR(kPMPageToPaperMappingTypeStr);
pub const kPMPageToPaperMediaNameStr = "com.apple.print.PageToPaperMappingMediaName";
pub const kPMPageToPaperMediaNameKey = CFSTR(kPMPageToPaperMediaNameStr);
pub const kPMPageToPaperMappingAllowScalingUpStr = "com.apple.print.PageToPaperMappingAllowScalingUp";
pub const kPMPageToPaperMappingAllowScalingUpKey = CFSTR(kPMPageToPaperMappingAllowScalingUpStr);
pub const kPMCustomProfilePathStr = "PMCustomProfilePath";
pub const kPMCustomProfilePathKey = CFSTR(kPMCustomProfilePathStr);
pub const kPMVendorColorMatchingStr = "AP_VendorColorMatching";
pub const kPMVendorColorMatching = CFSTR(kPMVendorColorMatchingStr);
pub const kPMApplicationColorMatchingStr = "AP_ApplicationColorMatching";
pub const kPMApplicationColorMatching = CFSTR(kPMApplicationColorMatchingStr);
pub const kPMColorMatchingModeStr = "AP_ColorMatchingMode";
pub const kPMColorMatchingModeKey = CFSTR(kPMColorMatchingModeStr);
pub const kPMDestinationTypeStr = "com.apple.print.PrintSettings.PMDestinationType";
pub const kPMDestinationTypeKey = CFSTR(kPMDestinationTypeStr);
pub const kPMOutputFilenameStr = "com.apple.print.PrintSettings.PMOutputFilename";
pub const kPMOutputFilenameKey = CFSTR(kPMOutputFilenameStr);
pub const __PMERRORS__ = "";
pub const __QD__ = "";
pub const __FONTS__ = "";
pub const __ATSUNICODE__ = "";
pub const __ATSUNICODETYPES__ = "";
pub const kATSUStartAlignment = @import("std").zig.c_translation.cast(Fract, @as(c_long, 0x00000000));
pub const kATSUEndAlignment = @import("std").zig.c_translation.cast(Fract, @as(c_long, 0x40000000));
pub const kATSUCenterAlignment = @import("std").zig.c_translation.cast(Fract, @as(c_long, 0x20000000));
pub const kATSUNoJustification = @import("std").zig.c_translation.cast(Fract, @as(c_long, 0x00000000));
pub const kATSUFullJustification = @import("std").zig.c_translation.cast(Fract, @as(c_long, 0x40000000));
pub const __ATSUNICODEGLYPHS__ = "";
pub const __ATSUNICODEFLATTENING__ = "";
pub const __ATSUNICODEDIRECTACCESS__ = "";
pub const __SPEECHSYNTHESIS__ = "";
pub const _OBJC_OBJC_H_ = "";
pub const _OBJC_OBJC_API_H_ = "";
pub const OBJC_API_VERSION = @as(c_int, 2);
pub const OBJC_NO_GC = @as(c_int, 1);
pub const NS_ENFORCE_NSOBJECT_DESIGNATED_INITIALIZER = @as(c_int, 1);
pub const OBJC_OLD_DISPATCH_PROTOTYPES = @as(c_int, 0);
pub const OBJC_ISA_AVAILABILITY = "";
pub const OBJC_ARC_UNAVAILABLE = "";
pub const OBJC_ARM64_UNAVAILABLE = OBJC_UNAVAILABLE("not available in arm64");
pub const OBJC_GC_UNAVAILABLE = "";
pub const OBJC_EXPORT = OBJC_EXTERN ++ OBJC_VISIBLE;
pub const OBJC_RETURNS_RETAINED = "";
pub const OBJC_COLD = "";
pub const OBJC_NORETURN = "";
pub const OBJC_BOOL_IS_BOOL = @as(c_int, 1);
pub const OBJC_BOOL_DEFINED = "";
pub const Nil = __DARWIN_NULL;
pub const __autoreleasing = "";
pub const ARITH_SHIFT = @as(c_int, 32);
pub inline fn ISSELECTOR(sel: anytype) @TypeOf(sel_isMapped(sel)) {
    return sel_isMapped(sel);
}
pub inline fn SELNAME(sel: anytype) @TypeOf(sel_getName(sel)) {
    return sel_getName(sel);
}
pub inline fn SELUID(str: anytype) @TypeOf(sel_getUid(str)) {
    return sel_getUid(str);
}
pub inline fn NAMEOF(obj: anytype) @TypeOf(object_getClassName(obj)) {
    return object_getClassName(obj);
}
pub inline fn IV(obj: anytype) @TypeOf(object_getIndexedIvars(obj)) {
    return object_getIndexedIvars(obj);
}
pub const __darwin_pthread_handler_rec = struct___darwin_pthread_handler_rec;
pub const _opaque_pthread_attr_t = struct__opaque_pthread_attr_t;
pub const _opaque_pthread_cond_t = struct__opaque_pthread_cond_t;
pub const _opaque_pthread_condattr_t = struct__opaque_pthread_condattr_t;
pub const _opaque_pthread_mutex_t = struct__opaque_pthread_mutex_t;
pub const _opaque_pthread_mutexattr_t = struct__opaque_pthread_mutexattr_t;
pub const _opaque_pthread_once_t = struct__opaque_pthread_once_t;
pub const _opaque_pthread_rwlock_t = struct__opaque_pthread_rwlock_t;
pub const _opaque_pthread_rwlockattr_t = struct__opaque_pthread_rwlockattr_t;
pub const _opaque_pthread_t = struct__opaque_pthread_t;
pub const VkBuffer_T = struct_VkBuffer_T;
pub const VkImage_T = struct_VkImage_T;
pub const VkInstance_T = struct_VkInstance_T;
pub const VkPhysicalDevice_T = struct_VkPhysicalDevice_T;
pub const VkDevice_T = struct_VkDevice_T;
pub const VkQueue_T = struct_VkQueue_T;
pub const VkSemaphore_T = struct_VkSemaphore_T;
pub const VkCommandBuffer_T = struct_VkCommandBuffer_T;
pub const VkFence_T = struct_VkFence_T;
pub const VkDeviceMemory_T = struct_VkDeviceMemory_T;
pub const VkEvent_T = struct_VkEvent_T;
pub const VkQueryPool_T = struct_VkQueryPool_T;
pub const VkBufferView_T = struct_VkBufferView_T;
pub const VkImageView_T = struct_VkImageView_T;
pub const VkShaderModule_T = struct_VkShaderModule_T;
pub const VkPipelineCache_T = struct_VkPipelineCache_T;
pub const VkPipelineLayout_T = struct_VkPipelineLayout_T;
pub const VkPipeline_T = struct_VkPipeline_T;
pub const VkRenderPass_T = struct_VkRenderPass_T;
pub const VkDescriptorSetLayout_T = struct_VkDescriptorSetLayout_T;
pub const VkSampler_T = struct_VkSampler_T;
pub const VkDescriptorSet_T = struct_VkDescriptorSet_T;
pub const VkDescriptorPool_T = struct_VkDescriptorPool_T;
pub const VkFramebuffer_T = struct_VkFramebuffer_T;
pub const VkCommandPool_T = struct_VkCommandPool_T;
pub const VkSamplerYcbcrConversion_T = struct_VkSamplerYcbcrConversion_T;
pub const VkDescriptorUpdateTemplate_T = struct_VkDescriptorUpdateTemplate_T;
pub const VkPrivateDataSlot_T = struct_VkPrivateDataSlot_T;
pub const VkSurfaceKHR_T = struct_VkSurfaceKHR_T;
pub const VkSwapchainKHR_T = struct_VkSwapchainKHR_T;
pub const VkDisplayKHR_T = struct_VkDisplayKHR_T;
pub const VkDisplayModeKHR_T = struct_VkDisplayModeKHR_T;
pub const VkDeferredOperationKHR_T = struct_VkDeferredOperationKHR_T;
pub const VkDebugReportCallbackEXT_T = struct_VkDebugReportCallbackEXT_T;
pub const VkCuModuleNVX_T = struct_VkCuModuleNVX_T;
pub const VkCuFunctionNVX_T = struct_VkCuFunctionNVX_T;
pub const VkDebugUtilsMessengerEXT_T = struct_VkDebugUtilsMessengerEXT_T;
pub const VkValidationCacheEXT_T = struct_VkValidationCacheEXT_T;
pub const VkAccelerationStructureNV_T = struct_VkAccelerationStructureNV_T;
pub const VkPerformanceConfigurationINTEL_T = struct_VkPerformanceConfigurationINTEL_T;
pub const VkIndirectCommandsLayoutNV_T = struct_VkIndirectCommandsLayoutNV_T;
pub const VkAccelerationStructureKHR_T = struct_VkAccelerationStructureKHR_T;
pub const __GLsync = struct___GLsync;
pub const _OSUnalignedU16 = struct__OSUnalignedU16;
pub const _OSUnalignedU32 = struct__OSUnalignedU32;
pub const _OSUnalignedU64 = struct__OSUnalignedU64;
pub const lconv = struct_lconv;
pub const __float2 = struct___float2;
pub const __double2 = struct___double2;
pub const exception = struct_exception;
pub const __darwin_arm_exception_state = struct___darwin_arm_exception_state;
pub const __darwin_arm_exception_state64 = struct___darwin_arm_exception_state64;
pub const __darwin_arm_thread_state = struct___darwin_arm_thread_state;
pub const __darwin_arm_thread_state64 = struct___darwin_arm_thread_state64;
pub const __darwin_arm_vfp_state = struct___darwin_arm_vfp_state;
pub const __darwin_arm_neon_state64 = struct___darwin_arm_neon_state64;
pub const __darwin_arm_neon_state = struct___darwin_arm_neon_state;
pub const __arm_pagein_state = struct___arm_pagein_state;
pub const __arm_legacy_debug_state = struct___arm_legacy_debug_state;
pub const __darwin_arm_debug_state32 = struct___darwin_arm_debug_state32;
pub const __darwin_arm_debug_state64 = struct___darwin_arm_debug_state64;
pub const __darwin_arm_cpmu_state64 = struct___darwin_arm_cpmu_state64;
pub const __darwin_mcontext32 = struct___darwin_mcontext32;
pub const __darwin_mcontext64 = struct___darwin_mcontext64;
pub const __darwin_sigaltstack = struct___darwin_sigaltstack;
pub const __darwin_ucontext = struct___darwin_ucontext;
pub const sigval = union_sigval;
pub const sigevent = struct_sigevent;
pub const __siginfo = struct___siginfo;
pub const __sigaction_u = union___sigaction_u;
pub const __sigaction = struct___sigaction;
pub const sigstack = struct_sigstack;
pub const __sbuf = struct___sbuf;
pub const __sFILEX = struct___sFILEX;
pub const __sFILE = struct___sFILE;
pub const timeval = struct_timeval;
pub const rusage = struct_rusage;
pub const rusage_info_v0 = struct_rusage_info_v0;
pub const rusage_info_v1 = struct_rusage_info_v1;
pub const rusage_info_v2 = struct_rusage_info_v2;
pub const rusage_info_v3 = struct_rusage_info_v3;
pub const rusage_info_v4 = struct_rusage_info_v4;
pub const rusage_info_v5 = struct_rusage_info_v5;
pub const rlimit = struct_rlimit;
pub const proc_rlimit_control_wakeupmon = struct_proc_rlimit_control_wakeupmon;
pub const timespec = struct_timespec;
pub const tm = struct_tm;
pub const TimeBaseRecord = struct_TimeBaseRecord;
pub const __CFString = struct___CFString;
pub const __CFNull = struct___CFNull;
pub const __CFAllocator = struct___CFAllocator;
pub const __CFArray = struct___CFArray;
pub const __CFBag = struct___CFBag;
pub const __CFBinaryHeap = struct___CFBinaryHeap;
pub const __CFBitVector = struct___CFBitVector;
pub const __CFByteOrder = enum___CFByteOrder;
pub const __CFDictionary = struct___CFDictionary;
pub const __CFNotificationCenter = struct___CFNotificationCenter;
pub const __CFLocale = struct___CFLocale;
pub const __CFDate = struct___CFDate;
pub const __CFTimeZone = struct___CFTimeZone;
pub const __CFData = struct___CFData;
pub const __CFCharacterSet = struct___CFCharacterSet;
pub const __CFCalendar = struct___CFCalendar;
pub const __CFDateFormatter = struct___CFDateFormatter;
pub const __CFError = struct___CFError;
pub const __CFBoolean = struct___CFBoolean;
pub const __CFNumber = struct___CFNumber;
pub const __CFNumberFormatter = struct___CFNumberFormatter;
pub const __CFURL = struct___CFURL;
pub const mach_port_status = struct_mach_port_status;
pub const mach_port_limits = struct_mach_port_limits;
pub const mach_port_info_ext = struct_mach_port_info_ext;
pub const mach_port_guard_info = struct_mach_port_guard_info;
pub const mach_port_qos = struct_mach_port_qos;
pub const mach_service_port_info = struct_mach_service_port_info;
pub const mach_port_options = struct_mach_port_options;
pub const mach_port_guard_exception_codes = enum_mach_port_guard_exception_codes;
pub const __CFRunLoop = struct___CFRunLoop;
pub const __CFRunLoopSource = struct___CFRunLoopSource;
pub const __CFRunLoopObserver = struct___CFRunLoopObserver;
pub const __CFRunLoopTimer = struct___CFRunLoopTimer;
pub const __CFSocket = struct___CFSocket;
pub const accessx_descriptor = struct_accessx_descriptor;
pub const fssearchblock = struct_fssearchblock;
pub const searchstate = struct_searchstate;
pub const flocktimeout = struct_flocktimeout;
pub const radvisory = struct_radvisory;
pub const fsignatures = struct_fsignatures;
pub const fsupplement = struct_fsupplement;
pub const fchecklv = struct_fchecklv;
pub const fgetsigsinfo = struct_fgetsigsinfo;
pub const fstore = struct_fstore;
pub const fpunchhole = struct_fpunchhole;
pub const ftrimactivefile = struct_ftrimactivefile;
pub const fspecread = struct_fspecread;
pub const fbootstraptransfer = struct_fbootstraptransfer;
pub const log2phys = struct_log2phys;
pub const _filesec = struct__filesec;
pub const os_workgroup_attr_opaque_s = struct_os_workgroup_attr_opaque_s;
pub const os_workgroup_interval_data_opaque_s = struct_os_workgroup_interval_data_opaque_s;
pub const os_workgroup_join_token_opaque_s = struct_os_workgroup_join_token_opaque_s;
pub const os_workgroup_s = struct_os_workgroup_s;
pub const os_workgroup_max_parallel_threads_attr_s = struct_os_workgroup_max_parallel_threads_attr_s;
pub const time_value = struct_time_value;
pub const mach_timespec = struct_mach_timespec;
pub const _os_object_s = struct__os_object_s;
pub const dispatch_object_s = struct_dispatch_object_s;
pub const dispatch_queue_s = struct_dispatch_queue_s;
pub const dispatch_queue_attr_s = struct_dispatch_queue_attr_s;
pub const dispatch_group_s = struct_dispatch_group_s;
pub const dispatch_source_s = struct_dispatch_source_s;
pub const dispatch_channel_s = struct_dispatch_channel_s;
pub const dispatch_mach_s = struct_dispatch_mach_s;
pub const dispatch_mach_msg_s = struct_dispatch_mach_msg_s;
pub const dispatch_semaphore_s = struct_dispatch_semaphore_s;
pub const dispatch_data_s = struct_dispatch_data_s;
pub const dispatch_io_s = struct_dispatch_io_s;
pub const dispatch_source_type_s = struct_dispatch_source_type_s;
pub const __CFReadStream = struct___CFReadStream;
pub const __CFWriteStream = struct___CFWriteStream;
pub const __CFSet = struct___CFSet;
pub const __CFTree = struct___CFTree;
pub const __CFUUID = struct___CFUUID;
pub const __CFBundle = struct___CFBundle;
pub const __CFMessagePort = struct___CFMessagePort;
pub const __CFPlugInInstance = struct___CFPlugInInstance;
pub const __CFMachPort = struct___CFMachPort;
pub const __CFAttributedString = struct___CFAttributedString;
pub const __CFURLEnumerator = struct___CFURLEnumerator;
pub const kauth_identity_extlookup = struct_kauth_identity_extlookup;
pub const kauth_cache_sizes = struct_kauth_cache_sizes;
pub const kauth_ace = struct_kauth_ace;
pub const kauth_acl = struct_kauth_acl;
pub const kauth_filesec = struct_kauth_filesec;
pub const _acl = struct__acl;
pub const _acl_entry = struct__acl_entry;
pub const _acl_permset = struct__acl_permset;
pub const _acl_flagset = struct__acl_flagset;
pub const __CFFileSecurity = struct___CFFileSecurity;
pub const __CFStringTokenizer = struct___CFStringTokenizer;
pub const __CFFileDescriptor = struct___CFFileDescriptor;
pub const __CFUserNotification = struct___CFUserNotification;
pub const __CFXMLNode = struct___CFXMLNode;
pub const __CFXMLParser = struct___CFXMLParser;
pub const OpaqueCollection = struct_OpaqueCollection;
pub const vm_statistics = struct_vm_statistics;
pub const vm_statistics64 = struct_vm_statistics64;
pub const vm_extmod_statistics = struct_vm_extmod_statistics;
pub const vm_purgeable_stat = struct_vm_purgeable_stat;
pub const vm_purgeable_info = struct_vm_purgeable_info;
pub const virtual_memory_guard_exception_codes = enum_virtual_memory_guard_exception_codes;
pub const host_can_has_debugger_info = struct_host_can_has_debugger_info;
pub const host_basic_info = struct_host_basic_info;
pub const host_sched_info = struct_host_sched_info;
pub const kernel_resource_sizes = struct_kernel_resource_sizes;
pub const host_priority_info = struct_host_priority_info;
pub const host_load_info = struct_host_load_info;
pub const host_cpu_load_info = struct_host_cpu_load_info;
pub const host_preferred_user_arch = struct_host_preferred_user_arch;
pub const memory_object_perf_info = struct_memory_object_perf_info;
pub const memory_object_attr_info = struct_memory_object_attr_info;
pub const memory_object_behave_info = struct_memory_object_behave_info;
pub const arm_state_hdr = struct_arm_state_hdr;
pub const arm_unified_thread_state = struct_arm_unified_thread_state;
pub const ipc_info_space = struct_ipc_info_space;
pub const ipc_info_space_basic = struct_ipc_info_space_basic;
pub const ipc_info_name = struct_ipc_info_name;
pub const ipc_info_tree_name = struct_ipc_info_tree_name;
pub const ipc_info_port = struct_ipc_info_port;
pub const mach_voucher_attr_recipe_data = struct_mach_voucher_attr_recipe_data;
pub const processor_cpu_stat = struct_processor_cpu_stat;
pub const processor_cpu_stat64 = struct_processor_cpu_stat64;
pub const processor_basic_info = struct_processor_basic_info;
pub const processor_cpu_load_info = struct_processor_cpu_load_info;
pub const processor_set_basic_info = struct_processor_set_basic_info;
pub const processor_set_load_info = struct_processor_set_load_info;
pub const policy_timeshare_base = struct_policy_timeshare_base;
pub const policy_timeshare_limit = struct_policy_timeshare_limit;
pub const policy_timeshare_info = struct_policy_timeshare_info;
pub const policy_rr_base = struct_policy_rr_base;
pub const policy_rr_limit = struct_policy_rr_limit;
pub const policy_rr_info = struct_policy_rr_info;
pub const policy_fifo_base = struct_policy_fifo_base;
pub const policy_fifo_limit = struct_policy_fifo_limit;
pub const policy_fifo_info = struct_policy_fifo_info;
pub const policy_bases = struct_policy_bases;
pub const policy_limits = struct_policy_limits;
pub const policy_infos = struct_policy_infos;
pub const task_basic_info_32 = struct_task_basic_info_32;
pub const task_basic_info_64 = struct_task_basic_info_64;
pub const task_basic_info = struct_task_basic_info;
pub const task_events_info = struct_task_events_info;
pub const task_thread_times_info = struct_task_thread_times_info;
pub const task_absolutetime_info = struct_task_absolutetime_info;
pub const task_kernelmemory_info = struct_task_kernelmemory_info;
pub const task_affinity_tag_info = struct_task_affinity_tag_info;
pub const task_dyld_info = struct_task_dyld_info;
pub const task_basic_info_64_2 = struct_task_basic_info_64_2;
pub const task_extmod_info = struct_task_extmod_info;
pub const mach_task_basic_info = struct_mach_task_basic_info;
pub const task_power_info = struct_task_power_info;
pub const task_vm_info = struct_task_vm_info;
pub const task_trace_memory_info = struct_task_trace_memory_info;
pub const task_wait_state_info = struct_task_wait_state_info;
pub const task_power_info_v2 = struct_task_power_info_v2;
pub const task_flags_info = struct_task_flags_info;
pub const task_inspect_flavor = enum_task_inspect_flavor;
pub const task_inspect_basic_counts = struct_task_inspect_basic_counts;
pub const task_role = enum_task_role;
pub const task_category_policy = struct_task_category_policy;
pub const task_latency_qos = enum_task_latency_qos;
pub const task_throughput_qos = enum_task_throughput_qos;
pub const task_qos_policy = struct_task_qos_policy;
pub const thread_basic_info = struct_thread_basic_info;
pub const thread_identifier_info = struct_thread_identifier_info;
pub const thread_extended_info = struct_thread_extended_info;
pub const io_stat_entry = struct_io_stat_entry;
pub const io_stat_info = struct_io_stat_info;
pub const thread_standard_policy = struct_thread_standard_policy;
pub const thread_extended_policy = struct_thread_extended_policy;
pub const thread_time_constraint_policy = struct_thread_time_constraint_policy;
pub const thread_precedence_policy = struct_thread_precedence_policy;
pub const thread_affinity_policy = struct_thread_affinity_policy;
pub const thread_background_policy = struct_thread_background_policy;
pub const thread_latency_qos_policy = struct_thread_latency_qos_policy;
pub const thread_throughput_qos_policy = struct_thread_throughput_qos_policy;
pub const vm_region_basic_info_64 = struct_vm_region_basic_info_64;
pub const vm_region_basic_info = struct_vm_region_basic_info;
pub const vm_region_extended_info = struct_vm_region_extended_info;
pub const vm_region_top_info = struct_vm_region_top_info;
pub const vm_region_submap_info = struct_vm_region_submap_info;
pub const vm_region_submap_info_64 = struct_vm_region_submap_info_64;
pub const vm_region_submap_short_info_64 = struct_vm_region_submap_short_info_64;
pub const mach_vm_read_entry = struct_mach_vm_read_entry;
pub const vm_read_entry = struct_vm_read_entry;
pub const vm_page_info_basic = struct_vm_page_info_basic;
pub const kmod_reference = struct_kmod_reference;
pub const kmod_info = struct_kmod_info;
pub const kmod_info_32_v1 = struct_kmod_info_32_v1;
pub const kmod_info_64_v1 = struct_kmod_info_64_v1;
pub const fsid = struct_fsid;
pub const fsobj_id = struct_fsobj_id;
pub const dyld_kernel_image_info = struct_dyld_kernel_image_info;
pub const dyld_kernel_process_info = struct_dyld_kernel_process_info;
pub const OSNotificationHeader64 = struct_OSNotificationHeader64;
pub const IOServiceInterestContent64 = struct_IOServiceInterestContent64;
pub const IONotificationPort = struct_IONotificationPort;
pub const __DASession = struct___DASession;
pub const __DADisk = struct___DADisk;
pub const __FSFileSecurity = struct___FSFileSecurity;
pub const OpaqueFSIterator = struct_OpaqueFSIterator;
pub const OpaqueFNSubscriptionRef = struct_OpaqueFNSubscriptionRef;
pub const OpaqueFSVolumeOperation = struct_OpaqueFSVolumeOperation;
pub const __FSFileOperation = struct___FSFileOperation;
pub const OpaqueMPProcessID = struct_OpaqueMPProcessID;
pub const OpaqueMPTaskID = struct_OpaqueMPTaskID;
pub const OpaqueMPQueueID = struct_OpaqueMPQueueID;
pub const OpaqueMPSemaphoreID = struct_OpaqueMPSemaphoreID;
pub const OpaqueMPCriticalRegionID = struct_OpaqueMPCriticalRegionID;
pub const OpaqueMPTimerID = struct_OpaqueMPTimerID;
pub const OpaqueMPEventID = struct_OpaqueMPEventID;
pub const OpaqueMPAddressSpaceID = struct_OpaqueMPAddressSpaceID;
pub const OpaqueMPNotificationID = struct_OpaqueMPNotificationID;
pub const OpaqueMPCoherenceID = struct_OpaqueMPCoherenceID;
pub const OpaqueMPCpuID = struct_OpaqueMPCpuID;
pub const OpaqueMPAreaID = struct_OpaqueMPAreaID;
pub const OpaqueMPConsoleID = struct_OpaqueMPConsoleID;
pub const OpaqueMPOpaqueID = struct_OpaqueMPOpaqueID;
pub const OpaqueLocaleRef = struct_OpaqueLocaleRef;
pub const OpaqueAreaID = struct_OpaqueAreaID;
pub const OpaqueCollatorRef = struct_OpaqueCollatorRef;
pub const OpaqueUCTypeSelectRef = struct_OpaqueUCTypeSelectRef;
pub const OpaqueTextBreakLocatorRef = struct_OpaqueTextBreakLocatorRef;
pub const OpaqueTECObjectRef = struct_OpaqueTECObjectRef;
pub const OpaqueTECSnifferObjectRef = struct_OpaqueTECSnifferObjectRef;
pub const OpaqueTextToUnicodeInfo = struct_OpaqueTextToUnicodeInfo;
pub const OpaqueUnicodeToTextInfo = struct_OpaqueUnicodeToTextInfo;
pub const OpaqueUnicodeToTextRunInfo = struct_OpaqueUnicodeToTextRunInfo;
pub const FndrExtendedDirInfo = struct_FndrExtendedDirInfo;
pub const FndrExtendedFileInfo = struct_FndrExtendedFileInfo;
pub const BTreeKeyLimits = enum_BTreeKeyLimits;
pub const OpaqueAEDataStorageType = struct_OpaqueAEDataStorageType;
pub const AERemoteProcessResolver = struct_AERemoteProcessResolver;
pub const OpaqueAEStreamRef = struct_OpaqueAEStreamRef;
pub const __CFHost = struct___CFHost;
pub const __CFNetService = struct___CFNetService;
pub const __CFNetServiceMonitor = struct___CFNetServiceMonitor;
pub const __CFNetServiceBrowser = struct___CFNetServiceBrowser;
pub const __CFHTTPMessage = struct___CFHTTPMessage;
pub const _CFHTTPAuthentication = struct__CFHTTPAuthentication;
pub const __CFNetDiagnostic = struct___CFNetDiagnostic;
pub const __DCSDictionary = struct___DCSDictionary;
pub const __SecCertificate = struct___SecCertificate;
pub const __SecIdentity = struct___SecIdentity;
pub const __SecKey = struct___SecKey;
pub const __SecPolicy = struct___SecPolicy;
pub const __SecAccessControl = struct___SecAccessControl;
pub const __SecKeychain = struct___SecKeychain;
pub const __SecKeychainItem = struct___SecKeychainItem;
pub const __SecKeychainSearch = struct___SecKeychainSearch;
pub const __SecTrustedApplication = struct___SecTrustedApplication;
pub const __SecAccess = struct___SecAccess;
pub const __SecACL = struct___SecACL;
pub const __SecPassword = struct___SecPassword;
pub const __CSIdentityAuthority = struct___CSIdentityAuthority;
pub const cssm_data = struct_cssm_data;
pub const SecAsn1Template_struct = struct_SecAsn1Template_struct;
pub const cssm_guid = struct_cssm_guid;
pub const cssm_version = struct_cssm_version;
pub const cssm_subservice_uid = struct_cssm_subservice_uid;
pub const cssm_net_address = struct_cssm_net_address;
pub const cssm_crypto_data = struct_cssm_crypto_data;
pub const cssm_list = struct_cssm_list;
pub const cssm_list_element = struct_cssm_list_element;
pub const cssm_tuplegroup = struct_cssm_tuplegroup;
pub const cssm_sample = struct_cssm_sample;
pub const cssm_samplegroup = struct_cssm_samplegroup;
pub const cssm_memory_funcs = struct_cssm_memory_funcs;
pub const cssm_encoded_cert = struct_cssm_encoded_cert;
pub const cssm_parsed_cert = struct_cssm_parsed_cert;
pub const cssm_cert_pair = struct_cssm_cert_pair;
pub const cssm_certgroup = struct_cssm_certgroup;
pub const cssm_base_certs = struct_cssm_base_certs;
pub const cssm_access_credentials = struct_cssm_access_credentials;
pub const cssm_authorizationgroup = struct_cssm_authorizationgroup;
pub const cssm_acl_validity_period = struct_cssm_acl_validity_period;
pub const cssm_acl_entry_prototype = struct_cssm_acl_entry_prototype;
pub const cssm_acl_owner_prototype = struct_cssm_acl_owner_prototype;
pub const cssm_acl_entry_input = struct_cssm_acl_entry_input;
pub const cssm_resource_control_context = struct_cssm_resource_control_context;
pub const cssm_acl_entry_info = struct_cssm_acl_entry_info;
pub const cssm_acl_edit = struct_cssm_acl_edit;
pub const cssm_func_name_addr = struct_cssm_func_name_addr;
pub const cssm_date = struct_cssm_date;
pub const cssm_range = struct_cssm_range;
pub const cssm_query_size_data = struct_cssm_query_size_data;
pub const cssm_key_size = struct_cssm_key_size;
pub const cssm_keyheader = struct_cssm_keyheader;
pub const cssm_key = struct_cssm_key;
pub const cssm_dl_db_handle = struct_cssm_dl_db_handle;
pub const cssm_kr_name = struct_cssm_kr_name;
pub const cssm_kr_profile = struct_cssm_kr_profile;
pub const cssm_context_attribute_value = union_cssm_context_attribute_value;
pub const cssm_context_attribute = struct_cssm_context_attribute;
pub const cssm_context = struct_cssm_context;
pub const cssm_pkcs1_oaep_params = struct_cssm_pkcs1_oaep_params;
pub const cssm_csp_operational_statistics = struct_cssm_csp_operational_statistics;
pub const cssm_pkcs5_pbkdf1_params = struct_cssm_pkcs5_pbkdf1_params;
pub const cssm_pkcs5_pbkdf2_params = struct_cssm_pkcs5_pbkdf2_params;
pub const cssm_kea_derive_params = struct_cssm_kea_derive_params;
pub const cssm_tp_authority_id = struct_cssm_tp_authority_id;
pub const cssm_field = struct_cssm_field;
pub const cssm_tp_policyinfo = struct_cssm_tp_policyinfo;
pub const cssm_dl_db_list = struct_cssm_dl_db_list;
pub const cssm_tp_callerauth_context = struct_cssm_tp_callerauth_context;
pub const cssm_encoded_crl = struct_cssm_encoded_crl;
pub const cssm_parsed_crl = struct_cssm_parsed_crl;
pub const cssm_crl_pair = struct_cssm_crl_pair;
pub const cssm_crlgroup = struct_cssm_crlgroup;
pub const cssm_fieldgroup = struct_cssm_fieldgroup;
pub const cssm_evidence = struct_cssm_evidence;
pub const cssm_tp_verify_context = struct_cssm_tp_verify_context;
pub const cssm_tp_verify_context_result = struct_cssm_tp_verify_context_result;
pub const cssm_tp_request_set = struct_cssm_tp_request_set;
pub const cssm_tp_result_set = struct_cssm_tp_result_set;
pub const cssm_tp_confirm_response = struct_cssm_tp_confirm_response;
pub const cssm_tp_certissue_input = struct_cssm_tp_certissue_input;
pub const cssm_tp_certissue_output = struct_cssm_tp_certissue_output;
pub const cssm_tp_certchange_input = struct_cssm_tp_certchange_input;
pub const cssm_tp_certchange_output = struct_cssm_tp_certchange_output;
pub const cssm_tp_certverify_input = struct_cssm_tp_certverify_input;
pub const cssm_tp_certverify_output = struct_cssm_tp_certverify_output;
pub const cssm_tp_certnotarize_input = struct_cssm_tp_certnotarize_input;
pub const cssm_tp_certnotarize_output = struct_cssm_tp_certnotarize_output;
pub const cssm_tp_certreclaim_input = struct_cssm_tp_certreclaim_input;
pub const cssm_tp_certreclaim_output = struct_cssm_tp_certreclaim_output;
pub const cssm_tp_crlissue_input = struct_cssm_tp_crlissue_input;
pub const cssm_tp_crlissue_output = struct_cssm_tp_crlissue_output;
pub const cssm_cert_bundle_header = struct_cssm_cert_bundle_header;
pub const cssm_cert_bundle = struct_cssm_cert_bundle;
pub const cssm_db_attribute_label = union_cssm_db_attribute_label;
pub const cssm_db_attribute_info = struct_cssm_db_attribute_info;
pub const cssm_db_attribute_data = struct_cssm_db_attribute_data;
pub const cssm_db_record_attribute_info = struct_cssm_db_record_attribute_info;
pub const cssm_db_record_attribute_data = struct_cssm_db_record_attribute_data;
pub const cssm_db_parsing_module_info = struct_cssm_db_parsing_module_info;
pub const cssm_db_index_info = struct_cssm_db_index_info;
pub const cssm_db_unique_record = struct_cssm_db_unique_record;
pub const cssm_db_record_index_info = struct_cssm_db_record_index_info;
pub const cssm_dbinfo = struct_cssm_dbinfo;
pub const cssm_selection_predicate = struct_cssm_selection_predicate;
pub const cssm_query_limits = struct_cssm_query_limits;
pub const cssm_query = struct_cssm_query;
pub const cssm_dl_pkcs11_attributes = struct_cssm_dl_pkcs11_attributes;
pub const cssm_name_list = struct_cssm_name_list;
pub const cssm_db_schema_attribute_info = struct_cssm_db_schema_attribute_info;
pub const cssm_db_schema_index_info = struct_cssm_db_schema_index_info;
pub const cssm_x509_type_value_pair = struct_cssm_x509_type_value_pair;
pub const cssm_x509_rdn = struct_cssm_x509_rdn;
pub const cssm_x509_name = struct_cssm_x509_name;
pub const cssm_x509_time = struct_cssm_x509_time;
pub const x509_validity = struct_x509_validity;
pub const cssm_x509ext_basicConstraints = struct_cssm_x509ext_basicConstraints;
pub const extension_data_format = enum_extension_data_format;
pub const cssm_x509_extensionTagAndValue = struct_cssm_x509_extensionTagAndValue;
pub const cssm_x509ext_pair = struct_cssm_x509ext_pair;
pub const cssm_x509ext_value = union_cssm_x509ext_value;
pub const cssm_x509_extension = struct_cssm_x509_extension;
pub const cssm_x509_extensions = struct_cssm_x509_extensions;
pub const cssm_x509_tbs_certificate = struct_cssm_x509_tbs_certificate;
pub const cssm_x509_signature = struct_cssm_x509_signature;
pub const cssm_x509_signed_certificate = struct_cssm_x509_signed_certificate;
pub const cssm_x509ext_policyQualifierInfo = struct_cssm_x509ext_policyQualifierInfo;
pub const cssm_x509ext_policyQualifiers = struct_cssm_x509ext_policyQualifiers;
pub const cssm_x509ext_policyInfo = struct_cssm_x509ext_policyInfo;
pub const cssm_x509_revoked_cert_entry = struct_cssm_x509_revoked_cert_entry;
pub const cssm_x509_revoked_cert_list = struct_cssm_x509_revoked_cert_list;
pub const cssm_x509_tbs_certlist = struct_cssm_x509_tbs_certlist;
pub const cssm_x509_signed_crl = struct_cssm_x509_signed_crl;
pub const __SecRandom = struct___SecRandom;
pub const __CE_GeneralNameType = enum___CE_GeneralNameType;
pub const __CE_OtherName = struct___CE_OtherName;
pub const __CE_GeneralName = struct___CE_GeneralName;
pub const __CE_GeneralNames = struct___CE_GeneralNames;
pub const __CE_AuthorityKeyID = struct___CE_AuthorityKeyID;
pub const __CE_ExtendedKeyUsage = struct___CE_ExtendedKeyUsage;
pub const __CE_BasicConstraints = struct___CE_BasicConstraints;
pub const __CE_PolicyQualifierInfo = struct___CE_PolicyQualifierInfo;
pub const __CE_PolicyInformation = struct___CE_PolicyInformation;
pub const __CE_CertPolicies = struct___CE_CertPolicies;
pub const __CE_CrlDistributionPointNameType = enum___CE_CrlDistributionPointNameType;
pub const __CE_DistributionPointName = struct___CE_DistributionPointName;
pub const __CE_CRLDistributionPoint = struct___CE_CRLDistributionPoint;
pub const __CE_CRLDistPointsSyntax = struct___CE_CRLDistPointsSyntax;
pub const __CE_AccessDescription = struct___CE_AccessDescription;
pub const __CE_AuthorityInfoAccess = struct___CE_AuthorityInfoAccess;
pub const __CE_SemanticsInformation = struct___CE_SemanticsInformation;
pub const __CE_QC_Statement = struct___CE_QC_Statement;
pub const __CE_QC_Statements = struct___CE_QC_Statements;
pub const __CE_IssuingDistributionPoint = struct___CE_IssuingDistributionPoint;
pub const __CE_GeneralSubtree = struct___CE_GeneralSubtree;
pub const __CE_GeneralSubtrees = struct___CE_GeneralSubtrees;
pub const __CE_NameConstraints = struct___CE_NameConstraints;
pub const __CE_PolicyMapping = struct___CE_PolicyMapping;
pub const __CE_PolicyMappings = struct___CE_PolicyMappings;
pub const __CE_PolicyConstraints = struct___CE_PolicyConstraints;
pub const __CE_DataType = enum___CE_DataType;
pub const __CE_DataAndType = struct___CE_DataAndType;
pub const cssm_acl_process_subject_selector = struct_cssm_acl_process_subject_selector;
pub const cssm_acl_keychain_prompt_selector = struct_cssm_acl_keychain_prompt_selector;
pub const cssm_appledl_open_parameters_mask = enum_cssm_appledl_open_parameters_mask;
pub const cssm_appledl_open_parameters = struct_cssm_appledl_open_parameters;
pub const cssm_applecspdl_db_settings_parameters = struct_cssm_applecspdl_db_settings_parameters;
pub const cssm_applecspdl_db_is_locked_parameters = struct_cssm_applecspdl_db_is_locked_parameters;
pub const cssm_applecspdl_db_change_password_parameters = struct_cssm_applecspdl_db_change_password_parameters;
pub const __SecTrust = struct___SecTrust;
pub const sec_object = struct_sec_object;
pub const sec_trust = struct_sec_trust;
pub const sec_identity = struct_sec_identity;
pub const sec_certificate = struct_sec_certificate;
pub const sec_protocol_metadata = struct_sec_protocol_metadata;
pub const sec_protocol_options = struct_sec_protocol_options;
pub const AuthorizationOpaqueRef = struct_AuthorizationOpaqueRef;
pub const cssm_manager_event_notification = struct_cssm_manager_event_notification;
pub const cssm_spi_ac_funcs = struct_cssm_spi_ac_funcs;
pub const cssm_spi_cl_funcs = struct_cssm_spi_cl_funcs;
pub const cssm_module_funcs = struct_cssm_module_funcs;
pub const cssm_upcalls = struct_cssm_upcalls;
pub const cssm_spi_csp_funcs = struct_cssm_spi_csp_funcs;
pub const cssm_spi_dl_funcs = struct_cssm_spi_dl_funcs;
pub const cssm_kr_wrappedproductinfo = struct_cssm_kr_wrappedproductinfo;
pub const cssm_krsubservice = struct_cssm_krsubservice;
pub const kr_policy_list_item = struct_kr_policy_list_item;
pub const cssm_kr_policy_list_item = struct_cssm_kr_policy_list_item;
pub const cssm_kr_policy_info = struct_cssm_kr_policy_info;
pub const cssm_spi_kr_funcs = struct_cssm_spi_kr_funcs;
pub const cssm_spi_tp_funcs = struct_cssm_spi_tp_funcs;
pub const cssm_state_funcs = struct_cssm_state_funcs;
pub const cssm_manager_registration_info = struct_cssm_manager_registration_info;
pub const mds_funcs = struct_mds_funcs;
pub const OpaqueSecIdentitySearchRef = struct_OpaqueSecIdentitySearchRef;
pub const OpaquePolicySearchRef = struct_OpaquePolicySearchRef;
pub const __SecCode = struct___SecCode;
pub const __SecRequirement = struct___SecRequirement;
pub const au_tid = struct_au_tid;
pub const au_tid_addr = struct_au_tid_addr;
pub const au_mask = struct_au_mask;
pub const auditinfo = struct_auditinfo;
pub const auditinfo_addr = struct_auditinfo_addr;
pub const auditpinfo = struct_auditpinfo;
pub const auditpinfo_addr = struct_auditpinfo_addr;
pub const au_session = struct_au_session;
pub const au_expire_after = struct_au_expire_after;
pub const au_token = struct_au_token;
pub const au_qctrl = struct_au_qctrl;
pub const audit_stat = struct_audit_stat;
pub const audit_fstat = struct_audit_fstat;
pub const au_evclass_map = struct_au_evclass_map;
pub const _xpc_type_s = struct__xpc_type_s;
pub const _xpc_connection_s = struct__xpc_connection_s;
pub const _xpc_endpoint_s = struct__xpc_endpoint_s;
pub const _xpc_bool_s = struct__xpc_bool_s;
pub const _xpc_dictionary_s = struct__xpc_dictionary_s;
pub const _xpc_activity_s = struct__xpc_activity_s;
pub const routine_descriptor = struct_routine_descriptor;
pub const mig_subsystem = struct_mig_subsystem;
pub const mig_symtab = struct_mig_symtab;
pub const __RequestUnion__clock_priv_subsystem = union___RequestUnion__clock_priv_subsystem;
pub const __ReplyUnion__clock_priv_subsystem = union___ReplyUnion__clock_priv_subsystem;
pub const mach_vm_info_region = struct_mach_vm_info_region;
pub const vm_info_region_64 = struct_vm_info_region_64;
pub const vm_info_region = struct_vm_info_region;
pub const vm_info_object = struct_vm_info_object;
pub const zone_name = struct_zone_name;
pub const zone_info = struct_zone_info;
pub const mach_zone_name = struct_mach_zone_name;
pub const mach_zone_info_data = struct_mach_zone_info_data;
pub const task_zone_info_data = struct_task_zone_info_data;
pub const zone_btrecord = struct_zone_btrecord;
pub const hash_info_bucket = struct_hash_info_bucket;
pub const lockgroup_info = struct_lockgroup_info;
pub const mach_core_details = struct_mach_core_details;
pub const mach_core_fileheader = struct_mach_core_fileheader;
pub const mach_core_details_v2 = struct_mach_core_details_v2;
pub const mach_core_fileheader_base = struct_mach_core_fileheader_base;
pub const mach_core_fileheader_v2 = struct_mach_core_fileheader_v2;
pub const __RequestUnion__host_priv_subsystem = union___RequestUnion__host_priv_subsystem;
pub const __ReplyUnion__host_priv_subsystem = union___ReplyUnion__host_priv_subsystem;
pub const __RequestUnion__host_security_subsystem = union___RequestUnion__host_security_subsystem;
pub const __ReplyUnion__host_security_subsystem = union___ReplyUnion__host_security_subsystem;
pub const __RequestUnion__lock_set_subsystem = union___RequestUnion__lock_set_subsystem;
pub const __ReplyUnion__lock_set_subsystem = union___ReplyUnion__lock_set_subsystem;
pub const __RequestUnion__processor_subsystem = union___RequestUnion__processor_subsystem;
pub const __ReplyUnion__processor_subsystem = union___ReplyUnion__processor_subsystem;
pub const __RequestUnion__processor_set_subsystem = union___RequestUnion__processor_set_subsystem;
pub const __ReplyUnion__processor_set_subsystem = union___ReplyUnion__processor_set_subsystem;
pub const __RequestUnion__task_subsystem = union___RequestUnion__task_subsystem;
pub const __ReplyUnion__task_subsystem = union___ReplyUnion__task_subsystem;
pub const __RequestUnion__thread_act_subsystem = union___RequestUnion__thread_act_subsystem;
pub const __ReplyUnion__thread_act_subsystem = union___ReplyUnion__thread_act_subsystem;
pub const __RequestUnion__vm_map_subsystem = union___RequestUnion__vm_map_subsystem;
pub const __ReplyUnion__vm_map_subsystem = union___ReplyUnion__vm_map_subsystem;
pub const __RequestUnion__mach_port_subsystem = union___RequestUnion__mach_port_subsystem;
pub const __ReplyUnion__mach_port_subsystem = union___ReplyUnion__mach_port_subsystem;
pub const __RequestUnion__mach_host_subsystem = union___RequestUnion__mach_host_subsystem;
pub const __ReplyUnion__mach_host_subsystem = union___ReplyUnion__mach_host_subsystem;
pub const rpc_routine_arg_descriptor = struct_rpc_routine_arg_descriptor;
pub const rpc_routine_descriptor = struct_rpc_routine_descriptor;
pub const rpc_signature = struct_rpc_signature;
pub const rpc_subsystem = struct_rpc_subsystem;
pub const voucher_mach_msg_state_s = struct_voucher_mach_msg_state_s;
pub const _launch_data = struct__launch_data;
pub const __SecTask = struct___SecTask;
pub const _CMSDecoder = struct__CMSDecoder;
pub const _CMSEncoder = struct__CMSEncoder;
pub const SSLContext = struct_SSLContext;
pub const OpaqueSecTransformImplementation = struct_OpaqueSecTransformImplementation;
pub const __CSIdentity = struct___CSIdentity;
pub const __CSIdentityQuery = struct___CSIdentityQuery;
pub const OpaqueWSMethodInvocationRef = struct_OpaqueWSMethodInvocationRef;
pub const OpaqueWSProtocolHandlerRef = struct_OpaqueWSProtocolHandlerRef;
pub const OpaqueIconRef = struct_OpaqueIconRef;
pub const __MDItem = struct___MDItem;
pub const __MDQuery = struct___MDQuery;
pub const __MDLabel = struct___MDLabel;
pub const __SKIndex = struct___SKIndex;
pub const __SKIndexDocumentIterator = struct___SKIndexDocumentIterator;
pub const __SKSearch = struct___SKSearch;
pub const __SKSearchGroup = struct___SKSearchGroup;
pub const __SKSearchResults = struct___SKSearchResults;
pub const __SKSummary = struct___SKSummary;
pub const __FSEventStream = struct___FSEventStream;
pub const OpaqueLSSharedFileListRef = struct_OpaqueLSSharedFileListRef;
pub const OpaqueLSSharedFileListItemRef = struct_OpaqueLSSharedFileListItemRef;
pub const __IOSurface = struct___IOSurface;
pub const ATSGlyphVector = struct_ATSGlyphVector;
pub const ATSFontFamilyIterator_ = struct_ATSFontFamilyIterator_;
pub const ATSFontIterator_ = struct_ATSFontIterator_;
pub const ATSFontNotificationRef_ = struct_ATSFontNotificationRef_;
pub const ATSFontNotificationInfoRef_ = struct_ATSFontNotificationInfoRef_;
pub const ColorSyncProfile = struct_ColorSyncProfile;
pub const ColorSyncTransform = struct_ColorSyncTransform;
pub const ColorSyncCMM = struct_ColorSyncCMM;
pub const CGContext = struct_CGContext;
pub const CGColor = struct_CGColor;
pub const CGColorSpace = struct_CGColorSpace;
pub const CGDataProvider = struct_CGDataProvider;
pub const CGPattern = struct_CGPattern;
pub const CGFont = struct_CGFont;
pub const CGGradient = struct_CGGradient;
pub const CGImage = struct_CGImage;
pub const CGPath = struct_CGPath;
pub const CGPDFDocument = struct_CGPDFDocument;
pub const CGPDFPage = struct_CGPDFPage;
pub const CGPDFDictionary = struct_CGPDFDictionary;
pub const CGPDFArray = struct_CGPDFArray;
pub const CGPDFObject = struct_CGPDFObject;
pub const CGPDFStream = struct_CGPDFStream;
pub const CGPDFString = struct_CGPDFString;
pub const CGShading = struct_CGShading;
pub const CGFunction = struct_CGFunction;
pub const CGColorConversionInfo = struct_CGColorConversionInfo;
pub const CGDataConsumer = struct_CGDataConsumer;
pub const CGLayer = struct_CGLayer;
pub const CGPDFContentStream = struct_CGPDFContentStream;
pub const CGPDFOperatorTable = struct_CGPDFOperatorTable;
pub const CGPDFScanner = struct_CGPDFScanner;
pub const CGDisplayMode = struct_CGDisplayMode;
pub const _CGDisplayConfigRef = struct__CGDisplayConfigRef;
pub const CGDisplayStream = struct_CGDisplayStream;
pub const CGDisplayStreamUpdate = struct_CGDisplayStreamUpdate;
pub const evsioKeymapping = struct_evsioKeymapping;
pub const evsioMouseScaling = struct_evsioMouseScaling;
pub const __IOFixedPoint32 = struct___IOFixedPoint32;
pub const _NXPoint = struct__NXPoint;
pub const _NXSize = struct__NXSize;
pub const _NXTabletPointData = struct__NXTabletPointData;
pub const _NXTabletProximityData = struct__NXTabletProximityData;
pub const _NXEvent = struct__NXEvent;
pub const _NXEventExtension = struct__NXEventExtension;
pub const _NXEventExt = struct__NXEventExt;
pub const __CGEvent = struct___CGEvent;
pub const __CGEventTapProxy = struct___CGEventTapProxy;
pub const __CGEventTapInformation = struct___CGEventTapInformation;
pub const __CGEventSource = struct___CGEventSource;
pub const CGPSConverter = struct_CGPSConverter;
pub const __CTFontDescriptor = struct___CTFontDescriptor;
pub const __CTFont = struct___CTFont;
pub const __CTFontCollection = struct___CTFontCollection;
pub const __CTFrame = struct___CTFrame;
pub const __CTLine = struct___CTLine;
pub const __CTTypesetter = struct___CTTypesetter;
pub const __CTFramesetter = struct___CTFramesetter;
pub const __CTGlyphInfo = struct___CTGlyphInfo;
pub const __CTParagraphStyle = struct___CTParagraphStyle;
pub const __CTRubyAnnotation = struct___CTRubyAnnotation;
pub const __CTRun = struct___CTRun;
pub const __CTRunDelegate = struct___CTRunDelegate;
pub const __CTTextTab = struct___CTTextTab;
pub const OpaqueCMProfileRef = struct_OpaqueCMProfileRef;
pub const OpaqueCMWorldRef = struct_OpaqueCMWorldRef;
pub const OpaqueGrafPtr = struct_OpaqueGrafPtr;
pub const OpaqueRgnHandle = struct_OpaqueRgnHandle;
pub const OpaqueWindowPtr = struct_OpaqueWindowPtr;
pub const OpaqueDialogPtr = struct_OpaqueDialogPtr;
pub const __HIShape = struct___HIShape;
pub const OpaqueICInstance = struct_OpaqueICInstance;
pub const OpaquePasteboardRef = struct_OpaquePasteboardRef;
pub const OpaqueTranslationRef = struct_OpaqueTranslationRef;
pub const __AXUIElement = struct___AXUIElement;
pub const __AXTextMarker = struct___AXTextMarker;
pub const __AXTextMarkerRange = struct___AXTextMarkerRange;
pub const __AXObserver = struct___AXObserver;
pub const __AXValue = struct___AXValue;
pub const CGImageSource = struct_CGImageSource;
pub const CGImageMetadata = struct_CGImageMetadata;
pub const CGImageMetadataTag = struct_CGImageMetadataTag;
pub const CGImageDestination = struct_CGImageDestination;
pub const OpaquePMPrintSettings = struct_OpaquePMPrintSettings;
pub const OpaquePMPageFormat = struct_OpaquePMPageFormat;
pub const OpaquePMPrintSession = struct_OpaquePMPrintSession;
pub const OpaquePMPrinter = struct_OpaquePMPrinter;
pub const OpaquePMServer = struct_OpaquePMServer;
pub const OpaquePMPreset = struct_OpaquePMPreset;
pub const OpaquePMPaper = struct_OpaquePMPaper;
pub const OpaqueATSUTextLayout = struct_OpaqueATSUTextLayout;
pub const OpaqueATSUStyle = struct_OpaqueATSUStyle;
pub const OpaqueATSUFontFallbacks = struct_OpaqueATSUFontFallbacks;
pub const LLCStyleInfo = struct_LLCStyleInfo;
pub const objc_class = struct_objc_class;
pub const objc_object = struct_objc_object;
pub const objc_selector = struct_objc_selector;
